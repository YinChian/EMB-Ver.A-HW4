
STM32F746G_DISCO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002b45c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004d84  0802b630  0802b630  0003b630  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontSearchFlashSection 00000018  080303b4  080303b4  000403b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  080303cc  080303cc  00114578  2**0
                  CONTENTS
  5 .ARM          00000008  080303cc  080303cc  000403cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  080303d4  080303d4  00114578  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   0000001c  080303d4  080303d4  000403d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000008  080303f0  080303f0  000403f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000124  20000000  080303f8  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0001794c  20000124  0803051c  00050124  2**2
                  ALLOC
 11 ._user_heap_stack 00001400  20017a70  0803051c  00057a70  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00114578  2**0
                  CONTENTS, READONLY
 13 BufferSection 0013ec00  c0000000  c0000000  00120000  2**2
                  ALLOC
 14 ExtFlashSection 000b43c0  90000000  90000000  00060000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 FontFlashSection 000001a8  900b43c0  900b43c0  001143c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 TextFlashSection 00000010  900b4568  900b4568  00114568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 17 .debug_info   000f3668  00000000  00000000  001145a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 00019cd4  00000000  00000000  00207c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00003360  00000000  00000000  002218e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_ranges 00005c10  00000000  00000000  00224c48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  0003a404  00000000  00000000  0022a858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   000755bd  00000000  00000000  00264c5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    00127414  00000000  00000000  002da219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      000000cf  00000000  00000000  0040162d  2**0
                  CONTENTS, READONLY
 25 .debug_frame  00009d08  00000000  00000000  004016fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_loc    00055dd4  00000000  00000000  0040b404  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000124 	.word	0x20000124
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0802b614 	.word	0x0802b614

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000128 	.word	0x20000128
 800020c:	0802b614 	.word	0x0802b614

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_uldivmod>:
 8000aec:	b953      	cbnz	r3, 8000b04 <__aeabi_uldivmod+0x18>
 8000aee:	b94a      	cbnz	r2, 8000b04 <__aeabi_uldivmod+0x18>
 8000af0:	2900      	cmp	r1, #0
 8000af2:	bf08      	it	eq
 8000af4:	2800      	cmpeq	r0, #0
 8000af6:	bf1c      	itt	ne
 8000af8:	f04f 31ff 	movne.w	r1, #4294967295
 8000afc:	f04f 30ff 	movne.w	r0, #4294967295
 8000b00:	f000 b974 	b.w	8000dec <__aeabi_idiv0>
 8000b04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b0c:	f000 f806 	bl	8000b1c <__udivmoddi4>
 8000b10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b18:	b004      	add	sp, #16
 8000b1a:	4770      	bx	lr

08000b1c <__udivmoddi4>:
 8000b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b20:	9d08      	ldr	r5, [sp, #32]
 8000b22:	4604      	mov	r4, r0
 8000b24:	468e      	mov	lr, r1
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d14d      	bne.n	8000bc6 <__udivmoddi4+0xaa>
 8000b2a:	428a      	cmp	r2, r1
 8000b2c:	4694      	mov	ip, r2
 8000b2e:	d969      	bls.n	8000c04 <__udivmoddi4+0xe8>
 8000b30:	fab2 f282 	clz	r2, r2
 8000b34:	b152      	cbz	r2, 8000b4c <__udivmoddi4+0x30>
 8000b36:	fa01 f302 	lsl.w	r3, r1, r2
 8000b3a:	f1c2 0120 	rsb	r1, r2, #32
 8000b3e:	fa20 f101 	lsr.w	r1, r0, r1
 8000b42:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b46:	ea41 0e03 	orr.w	lr, r1, r3
 8000b4a:	4094      	lsls	r4, r2
 8000b4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b50:	0c21      	lsrs	r1, r4, #16
 8000b52:	fbbe f6f8 	udiv	r6, lr, r8
 8000b56:	fa1f f78c 	uxth.w	r7, ip
 8000b5a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b5e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b62:	fb06 f107 	mul.w	r1, r6, r7
 8000b66:	4299      	cmp	r1, r3
 8000b68:	d90a      	bls.n	8000b80 <__udivmoddi4+0x64>
 8000b6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b6e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b72:	f080 811f 	bcs.w	8000db4 <__udivmoddi4+0x298>
 8000b76:	4299      	cmp	r1, r3
 8000b78:	f240 811c 	bls.w	8000db4 <__udivmoddi4+0x298>
 8000b7c:	3e02      	subs	r6, #2
 8000b7e:	4463      	add	r3, ip
 8000b80:	1a5b      	subs	r3, r3, r1
 8000b82:	b2a4      	uxth	r4, r4
 8000b84:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b88:	fb08 3310 	mls	r3, r8, r0, r3
 8000b8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b90:	fb00 f707 	mul.w	r7, r0, r7
 8000b94:	42a7      	cmp	r7, r4
 8000b96:	d90a      	bls.n	8000bae <__udivmoddi4+0x92>
 8000b98:	eb1c 0404 	adds.w	r4, ip, r4
 8000b9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ba0:	f080 810a 	bcs.w	8000db8 <__udivmoddi4+0x29c>
 8000ba4:	42a7      	cmp	r7, r4
 8000ba6:	f240 8107 	bls.w	8000db8 <__udivmoddi4+0x29c>
 8000baa:	4464      	add	r4, ip
 8000bac:	3802      	subs	r0, #2
 8000bae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bb2:	1be4      	subs	r4, r4, r7
 8000bb4:	2600      	movs	r6, #0
 8000bb6:	b11d      	cbz	r5, 8000bc0 <__udivmoddi4+0xa4>
 8000bb8:	40d4      	lsrs	r4, r2
 8000bba:	2300      	movs	r3, #0
 8000bbc:	e9c5 4300 	strd	r4, r3, [r5]
 8000bc0:	4631      	mov	r1, r6
 8000bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bc6:	428b      	cmp	r3, r1
 8000bc8:	d909      	bls.n	8000bde <__udivmoddi4+0xc2>
 8000bca:	2d00      	cmp	r5, #0
 8000bcc:	f000 80ef 	beq.w	8000dae <__udivmoddi4+0x292>
 8000bd0:	2600      	movs	r6, #0
 8000bd2:	e9c5 0100 	strd	r0, r1, [r5]
 8000bd6:	4630      	mov	r0, r6
 8000bd8:	4631      	mov	r1, r6
 8000bda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bde:	fab3 f683 	clz	r6, r3
 8000be2:	2e00      	cmp	r6, #0
 8000be4:	d14a      	bne.n	8000c7c <__udivmoddi4+0x160>
 8000be6:	428b      	cmp	r3, r1
 8000be8:	d302      	bcc.n	8000bf0 <__udivmoddi4+0xd4>
 8000bea:	4282      	cmp	r2, r0
 8000bec:	f200 80f9 	bhi.w	8000de2 <__udivmoddi4+0x2c6>
 8000bf0:	1a84      	subs	r4, r0, r2
 8000bf2:	eb61 0303 	sbc.w	r3, r1, r3
 8000bf6:	2001      	movs	r0, #1
 8000bf8:	469e      	mov	lr, r3
 8000bfa:	2d00      	cmp	r5, #0
 8000bfc:	d0e0      	beq.n	8000bc0 <__udivmoddi4+0xa4>
 8000bfe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c02:	e7dd      	b.n	8000bc0 <__udivmoddi4+0xa4>
 8000c04:	b902      	cbnz	r2, 8000c08 <__udivmoddi4+0xec>
 8000c06:	deff      	udf	#255	; 0xff
 8000c08:	fab2 f282 	clz	r2, r2
 8000c0c:	2a00      	cmp	r2, #0
 8000c0e:	f040 8092 	bne.w	8000d36 <__udivmoddi4+0x21a>
 8000c12:	eba1 010c 	sub.w	r1, r1, ip
 8000c16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1a:	fa1f fe8c 	uxth.w	lr, ip
 8000c1e:	2601      	movs	r6, #1
 8000c20:	0c20      	lsrs	r0, r4, #16
 8000c22:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c26:	fb07 1113 	mls	r1, r7, r3, r1
 8000c2a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c2e:	fb0e f003 	mul.w	r0, lr, r3
 8000c32:	4288      	cmp	r0, r1
 8000c34:	d908      	bls.n	8000c48 <__udivmoddi4+0x12c>
 8000c36:	eb1c 0101 	adds.w	r1, ip, r1
 8000c3a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c3e:	d202      	bcs.n	8000c46 <__udivmoddi4+0x12a>
 8000c40:	4288      	cmp	r0, r1
 8000c42:	f200 80cb 	bhi.w	8000ddc <__udivmoddi4+0x2c0>
 8000c46:	4643      	mov	r3, r8
 8000c48:	1a09      	subs	r1, r1, r0
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c50:	fb07 1110 	mls	r1, r7, r0, r1
 8000c54:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c58:	fb0e fe00 	mul.w	lr, lr, r0
 8000c5c:	45a6      	cmp	lr, r4
 8000c5e:	d908      	bls.n	8000c72 <__udivmoddi4+0x156>
 8000c60:	eb1c 0404 	adds.w	r4, ip, r4
 8000c64:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c68:	d202      	bcs.n	8000c70 <__udivmoddi4+0x154>
 8000c6a:	45a6      	cmp	lr, r4
 8000c6c:	f200 80bb 	bhi.w	8000de6 <__udivmoddi4+0x2ca>
 8000c70:	4608      	mov	r0, r1
 8000c72:	eba4 040e 	sub.w	r4, r4, lr
 8000c76:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c7a:	e79c      	b.n	8000bb6 <__udivmoddi4+0x9a>
 8000c7c:	f1c6 0720 	rsb	r7, r6, #32
 8000c80:	40b3      	lsls	r3, r6
 8000c82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c8a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c8e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c92:	431c      	orrs	r4, r3
 8000c94:	40f9      	lsrs	r1, r7
 8000c96:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c9a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c9e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000ca2:	0c20      	lsrs	r0, r4, #16
 8000ca4:	fa1f fe8c 	uxth.w	lr, ip
 8000ca8:	fb09 1118 	mls	r1, r9, r8, r1
 8000cac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cb0:	fb08 f00e 	mul.w	r0, r8, lr
 8000cb4:	4288      	cmp	r0, r1
 8000cb6:	fa02 f206 	lsl.w	r2, r2, r6
 8000cba:	d90b      	bls.n	8000cd4 <__udivmoddi4+0x1b8>
 8000cbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000cc0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000cc4:	f080 8088 	bcs.w	8000dd8 <__udivmoddi4+0x2bc>
 8000cc8:	4288      	cmp	r0, r1
 8000cca:	f240 8085 	bls.w	8000dd8 <__udivmoddi4+0x2bc>
 8000cce:	f1a8 0802 	sub.w	r8, r8, #2
 8000cd2:	4461      	add	r1, ip
 8000cd4:	1a09      	subs	r1, r1, r0
 8000cd6:	b2a4      	uxth	r4, r4
 8000cd8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000cdc:	fb09 1110 	mls	r1, r9, r0, r1
 8000ce0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ce4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ce8:	458e      	cmp	lr, r1
 8000cea:	d908      	bls.n	8000cfe <__udivmoddi4+0x1e2>
 8000cec:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cf4:	d26c      	bcs.n	8000dd0 <__udivmoddi4+0x2b4>
 8000cf6:	458e      	cmp	lr, r1
 8000cf8:	d96a      	bls.n	8000dd0 <__udivmoddi4+0x2b4>
 8000cfa:	3802      	subs	r0, #2
 8000cfc:	4461      	add	r1, ip
 8000cfe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d02:	fba0 9402 	umull	r9, r4, r0, r2
 8000d06:	eba1 010e 	sub.w	r1, r1, lr
 8000d0a:	42a1      	cmp	r1, r4
 8000d0c:	46c8      	mov	r8, r9
 8000d0e:	46a6      	mov	lr, r4
 8000d10:	d356      	bcc.n	8000dc0 <__udivmoddi4+0x2a4>
 8000d12:	d053      	beq.n	8000dbc <__udivmoddi4+0x2a0>
 8000d14:	b15d      	cbz	r5, 8000d2e <__udivmoddi4+0x212>
 8000d16:	ebb3 0208 	subs.w	r2, r3, r8
 8000d1a:	eb61 010e 	sbc.w	r1, r1, lr
 8000d1e:	fa01 f707 	lsl.w	r7, r1, r7
 8000d22:	fa22 f306 	lsr.w	r3, r2, r6
 8000d26:	40f1      	lsrs	r1, r6
 8000d28:	431f      	orrs	r7, r3
 8000d2a:	e9c5 7100 	strd	r7, r1, [r5]
 8000d2e:	2600      	movs	r6, #0
 8000d30:	4631      	mov	r1, r6
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	f1c2 0320 	rsb	r3, r2, #32
 8000d3a:	40d8      	lsrs	r0, r3
 8000d3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d40:	fa21 f303 	lsr.w	r3, r1, r3
 8000d44:	4091      	lsls	r1, r2
 8000d46:	4301      	orrs	r1, r0
 8000d48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d4c:	fa1f fe8c 	uxth.w	lr, ip
 8000d50:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d54:	fb07 3610 	mls	r6, r7, r0, r3
 8000d58:	0c0b      	lsrs	r3, r1, #16
 8000d5a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d5e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d62:	429e      	cmp	r6, r3
 8000d64:	fa04 f402 	lsl.w	r4, r4, r2
 8000d68:	d908      	bls.n	8000d7c <__udivmoddi4+0x260>
 8000d6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d72:	d22f      	bcs.n	8000dd4 <__udivmoddi4+0x2b8>
 8000d74:	429e      	cmp	r6, r3
 8000d76:	d92d      	bls.n	8000dd4 <__udivmoddi4+0x2b8>
 8000d78:	3802      	subs	r0, #2
 8000d7a:	4463      	add	r3, ip
 8000d7c:	1b9b      	subs	r3, r3, r6
 8000d7e:	b289      	uxth	r1, r1
 8000d80:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d84:	fb07 3316 	mls	r3, r7, r6, r3
 8000d88:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d8c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d90:	428b      	cmp	r3, r1
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x28a>
 8000d94:	eb1c 0101 	adds.w	r1, ip, r1
 8000d98:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d9c:	d216      	bcs.n	8000dcc <__udivmoddi4+0x2b0>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d914      	bls.n	8000dcc <__udivmoddi4+0x2b0>
 8000da2:	3e02      	subs	r6, #2
 8000da4:	4461      	add	r1, ip
 8000da6:	1ac9      	subs	r1, r1, r3
 8000da8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000dac:	e738      	b.n	8000c20 <__udivmoddi4+0x104>
 8000dae:	462e      	mov	r6, r5
 8000db0:	4628      	mov	r0, r5
 8000db2:	e705      	b.n	8000bc0 <__udivmoddi4+0xa4>
 8000db4:	4606      	mov	r6, r0
 8000db6:	e6e3      	b.n	8000b80 <__udivmoddi4+0x64>
 8000db8:	4618      	mov	r0, r3
 8000dba:	e6f8      	b.n	8000bae <__udivmoddi4+0x92>
 8000dbc:	454b      	cmp	r3, r9
 8000dbe:	d2a9      	bcs.n	8000d14 <__udivmoddi4+0x1f8>
 8000dc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000dc4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000dc8:	3801      	subs	r0, #1
 8000dca:	e7a3      	b.n	8000d14 <__udivmoddi4+0x1f8>
 8000dcc:	4646      	mov	r6, r8
 8000dce:	e7ea      	b.n	8000da6 <__udivmoddi4+0x28a>
 8000dd0:	4620      	mov	r0, r4
 8000dd2:	e794      	b.n	8000cfe <__udivmoddi4+0x1e2>
 8000dd4:	4640      	mov	r0, r8
 8000dd6:	e7d1      	b.n	8000d7c <__udivmoddi4+0x260>
 8000dd8:	46d0      	mov	r8, sl
 8000dda:	e77b      	b.n	8000cd4 <__udivmoddi4+0x1b8>
 8000ddc:	3b02      	subs	r3, #2
 8000dde:	4461      	add	r1, ip
 8000de0:	e732      	b.n	8000c48 <__udivmoddi4+0x12c>
 8000de2:	4630      	mov	r0, r6
 8000de4:	e709      	b.n	8000bfa <__udivmoddi4+0xde>
 8000de6:	4464      	add	r4, ip
 8000de8:	3802      	subs	r0, #2
 8000dea:	e742      	b.n	8000c72 <__udivmoddi4+0x156>

08000dec <__aeabi_idiv0>:
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop

08000df0 <vApplicationIdleHook>:
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
   vTaskSetApplicationTaskTag(NULL, IdleTaskHook);
 8000df0:	4901      	ldr	r1, [pc, #4]	; (8000df8 <vApplicationIdleHook+0x8>)
 8000df2:	2000      	movs	r0, #0
 8000df4:	f008 bc50 	b.w	8009698 <vTaskSetApplicationTaskTag>
 8000df8:	08001e09 	.word	0x08001e09

08000dfc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000dfc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
 8000dfe:	2064      	movs	r0, #100	; 0x64
 8000e00:	f006 fe48 	bl	8007a94 <osDelay>
  for(;;)
 8000e04:	e7fb      	b.n	8000dfe <StartDefaultTask+0x2>
	...

08000e08 <SystemClock_Config>:
{
 8000e08:	b510      	push	{r4, lr}
 8000e0a:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e0c:	2210      	movs	r2, #16
 8000e0e:	2100      	movs	r1, #0
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e10:	2402      	movs	r4, #2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e12:	a80a      	add	r0, sp, #40	; 0x28
 8000e14:	f029 f9fe 	bl	802a214 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e18:	2214      	movs	r2, #20
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	a803      	add	r0, sp, #12
 8000e1e:	f029 f9f9 	bl	802a214 <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e22:	4b1d      	ldr	r3, [pc, #116]	; (8000e98 <SystemClock_Config+0x90>)
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000e24:	2119      	movs	r1, #25
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e26:	a808      	add	r0, sp, #32
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e2a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000e2e:	641a      	str	r2, [r3, #64]	; 0x40
 8000e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e36:	9301      	str	r3, [sp, #4]
 8000e38:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e3a:	4b18      	ldr	r3, [pc, #96]	; (8000e9c <SystemClock_Config+0x94>)
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8000e42:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e44:	2201      	movs	r2, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e4c:	9302      	str	r3, [sp, #8]
 8000e4e:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e54:	e9cd 2308 	strd	r2, r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e58:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e5c:	e9cd 430e 	strd	r4, r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000e60:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000e64:	e9cd 4412 	strd	r4, r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000e68:	e9cd 1310 	strd	r1, r3, [sp, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e6c:	f005 fdd0 	bl	8006a10 <HAL_RCC_OscConfig>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000e70:	f005 fa82 	bl	8006378 <HAL_PWREx_EnableOverDrive>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e74:	230f      	movs	r3, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e76:	2000      	movs	r0, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000e78:	2107      	movs	r1, #7
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e7a:	e9cd 3403 	strd	r3, r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e7e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e82:	e9cd 0305 	strd	r0, r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000e8a:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e8c:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000e8e:	f005 ffab 	bl	8006de8 <HAL_RCC_ClockConfig>
}
 8000e92:	b014      	add	sp, #80	; 0x50
 8000e94:	bd10      	pop	{r4, pc}
 8000e96:	bf00      	nop
 8000e98:	40023800 	.word	0x40023800
 8000e9c:	40007000 	.word	0x40007000

08000ea0 <main>:
{
 8000ea0:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8000ea4:	b09b      	sub	sp, #108	; 0x6c

/* MPU Configuration */

void MPU_Config(void)
{
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000ea6:	2210      	movs	r2, #16
 8000ea8:	2100      	movs	r1, #0
  /* Disables the MPU */
  HAL_MPU_Disable();

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000eaa:	2501      	movs	r5, #1
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000eac:	a80d      	add	r0, sp, #52	; 0x34
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
  MPU_InitStruct.BaseAddress = 0x90000000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 8000eae:	f04f 4910 	mov.w	r9, #2415919104	; 0x90000000
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000eb2:	f029 f9af 	bl	802a214 <memset>
  MPU_InitStruct.SubRegionDisable = 0x0;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000eb6:	2400      	movs	r4, #0
  HAL_MPU_Disable();
 8000eb8:	f004 f988 	bl	80051cc <HAL_MPU_Disable>
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 8000ebc:	4bc6      	ldr	r3, [pc, #792]	; (80011d8 <main+0x338>)
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000ebe:	a80d      	add	r0, sp, #52	; 0x34
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000ec0:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000ec4:	9410      	str	r4, [sp, #64]	; 0x40
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 8000ec6:	e9cd 930e 	strd	r9, r3, [sp, #56]	; 0x38
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000eca:	f004 f99d 	bl	8005208 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
  MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 8000ece:	2317      	movs	r3, #23
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000ed0:	a80d      	add	r0, sp, #52	; 0x34
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000ed2:	f88d 5035 	strb.w	r5, [sp, #53]	; 0x35
  MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 8000ed6:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000eda:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000ede:	f004 f993 	bl	8005208 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000ee2:	2004      	movs	r0, #4
 8000ee4:	f004 f980 	bl	80051e8 <HAL_MPU_Enable>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000ee8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000eec:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000ef0:	4aba      	ldr	r2, [pc, #744]	; (80011dc <main+0x33c>)
 8000ef2:	f8c2 4250 	str.w	r4, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000ef6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000efa:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000efe:	6953      	ldr	r3, [r2, #20]
 8000f00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f04:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f06:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000f0a:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000f0e:	f8c2 4084 	str.w	r4, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000f12:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000f16:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000f1a:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000f1e:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000f22:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8000f26:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000f28:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000f2c:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000f2e:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000f32:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000f34:	f8c2 5260 	str.w	r5, [r2, #608]	; 0x260
      } while (ways-- != 0U);
 8000f38:	d2f9      	bcs.n	8000f2e <main+0x8e>
    } while(sets-- != 0U);
 8000f3a:	3b20      	subs	r3, #32
 8000f3c:	f113 0f20 	cmn.w	r3, #32
 8000f40:	d1f2      	bne.n	8000f28 <main+0x88>
 8000f42:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000f46:	6953      	ldr	r3, [r2, #20]
 8000f48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f4c:	6153      	str	r3, [r2, #20]
 8000f4e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000f52:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8000f56:	f004 f89d 	bl	8005094 <HAL_Init>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f5a:	2400      	movs	r4, #0
  SystemClock_Config();
 8000f5c:	f7ff ff54 	bl	8000e08 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f60:	2214      	movs	r2, #20
 8000f62:	2100      	movs	r1, #0
 8000f64:	a80d      	add	r0, sp, #52	; 0x34
 8000f66:	f029 f955 	bl	802a214 <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f6a:	4b9d      	ldr	r3, [pc, #628]	; (80011e0 <main+0x340>)
  HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 8000f6c:	2110      	movs	r1, #16
 8000f6e:	489d      	ldr	r0, [pc, #628]	; (80011e4 <main+0x344>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f72:	2701      	movs	r7, #1
 8000f74:	f04f 0810 	mov.w	r8, #16
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f78:	f04f 0b03 	mov.w	fp, #3
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f7c:	f042 0210 	orr.w	r2, r2, #16
  GPIO_InitStruct.Pin = LCD_DISP_Pin;
 8000f80:	f44f 5a80 	mov.w	sl, #4096	; 0x1000
  hdma2d.Instance = DMA2D;
 8000f84:	4d98      	ldr	r5, [pc, #608]	; (80011e8 <main+0x348>)
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000f86:	f04f 0904 	mov.w	r9, #4
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f8a:	631a      	str	r2, [r3, #48]	; 0x30
 8000f8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000f8e:	4e97      	ldr	r6, [pc, #604]	; (80011ec <main+0x34c>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f90:	f002 0210 	and.w	r2, r2, #16
 8000f94:	9202      	str	r2, [sp, #8]
 8000f96:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f9a:	f042 0202 	orr.w	r2, r2, #2
 8000f9e:	631a      	str	r2, [r3, #48]	; 0x30
 8000fa0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fa2:	f002 0202 	and.w	r2, r2, #2
 8000fa6:	9203      	str	r2, [sp, #12]
 8000fa8:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000faa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fac:	f042 0201 	orr.w	r2, r2, #1
 8000fb0:	631a      	str	r2, [r3, #48]	; 0x30
 8000fb2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fb4:	f002 0201 	and.w	r2, r2, #1
 8000fb8:	9204      	str	r2, [sp, #16]
 8000fba:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fbe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000fc2:	631a      	str	r2, [r3, #48]	; 0x30
 8000fc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fc6:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8000fca:	9205      	str	r2, [sp, #20]
 8000fcc:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000fce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000fd4:	631a      	str	r2, [r3, #48]	; 0x30
 8000fd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fd8:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8000fdc:	9206      	str	r2, [sp, #24]
 8000fde:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fe0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fe2:	f042 0208 	orr.w	r2, r2, #8
 8000fe6:	631a      	str	r2, [r3, #48]	; 0x30
 8000fe8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fea:	f002 0208 	and.w	r2, r2, #8
 8000fee:	9207      	str	r2, [sp, #28]
 8000ff0:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000ff2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ff4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000ff8:	631a      	str	r2, [r3, #48]	; 0x30
 8000ffa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ffc:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8001000:	9208      	str	r2, [sp, #32]
 8001002:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001004:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001006:	f042 0220 	orr.w	r2, r2, #32
 800100a:	631a      	str	r2, [r3, #48]	; 0x30
 800100c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800100e:	f002 0220 	and.w	r2, r2, #32
 8001012:	9209      	str	r2, [sp, #36]	; 0x24
 8001014:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001016:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001018:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800101c:	631a      	str	r2, [r3, #48]	; 0x30
 800101e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001020:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8001024:	920a      	str	r2, [sp, #40]	; 0x28
 8001026:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001028:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800102a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800102e:	631a      	str	r2, [r3, #48]	; 0x30
 8001030:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001032:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001036:	920b      	str	r2, [sp, #44]	; 0x2c
 8001038:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800103a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800103c:	f042 0204 	orr.w	r2, r2, #4
 8001040:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 8001042:	2200      	movs	r2, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	f003 0304 	and.w	r3, r3, #4
 800104a:	930c      	str	r3, [sp, #48]	; 0x30
 800104c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 800104e:	f004 fc2f 	bl	80058b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8001052:	2201      	movs	r2, #1
 8001054:	2108      	movs	r1, #8
 8001056:	4866      	ldr	r0, [pc, #408]	; (80011f0 <main+0x350>)
 8001058:	f004 fc2a 	bl	80058b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 800105c:	2201      	movs	r2, #1
 800105e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001062:	4864      	ldr	r0, [pc, #400]	; (80011f4 <main+0x354>)
 8001064:	f004 fc24 	bl	80058b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, FRAME_RATE_Pin|RENDER_TIME_Pin, GPIO_PIN_RESET);
 8001068:	2200      	movs	r2, #0
 800106a:	21c0      	movs	r1, #192	; 0xc0
 800106c:	4862      	ldr	r0, [pc, #392]	; (80011f8 <main+0x358>)
 800106e:	f004 fc1f 	bl	80058b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 8001072:	2200      	movs	r2, #0
 8001074:	2140      	movs	r1, #64	; 0x40
 8001076:	4861      	ldr	r0, [pc, #388]	; (80011fc <main+0x35c>)
 8001078:	f004 fc1a 	bl	80058b0 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(VSYNC_FREQ_GPIO_Port, &GPIO_InitStruct);
 800107c:	a90d      	add	r1, sp, #52	; 0x34
 800107e:	4859      	ldr	r0, [pc, #356]	; (80011e4 <main+0x344>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001080:	e9cd 870d 	strd	r8, r7, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001084:	e9cd 4b0f 	strd	r4, fp, [sp, #60]	; 0x3c
  HAL_GPIO_Init(VSYNC_FREQ_GPIO_Port, &GPIO_InitStruct);
 8001088:	f004 fa8c 	bl	80055a4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 800108c:	2308      	movs	r3, #8
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800108e:	a90d      	add	r1, sp, #52	; 0x34
 8001090:	4857      	ldr	r0, [pc, #348]	; (80011f0 <main+0x350>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001092:	e9cd 370d 	strd	r3, r7, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001096:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800109a:	f004 fa83 	bl	80055a4 <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 800109e:	a90d      	add	r1, sp, #52	; 0x34
 80010a0:	4854      	ldr	r0, [pc, #336]	; (80011f4 <main+0x354>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a2:	e9cd a70d 	strd	sl, r7, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a6:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 80010aa:	f004 fa7b 	bl	80055a4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FRAME_RATE_Pin|RENDER_TIME_Pin;
 80010ae:	22c0      	movs	r2, #192	; 0xc0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010b0:	a90d      	add	r1, sp, #52	; 0x34
 80010b2:	4851      	ldr	r0, [pc, #324]	; (80011f8 <main+0x358>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b4:	e9cd 270d 	strd	r2, r7, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b8:	e9cd 4b0f 	strd	r4, fp, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010bc:	f004 fa72 	bl	80055a4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = MCU_ACTIVE_Pin;
 80010c0:	2240      	movs	r2, #64	; 0x40
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 80010c2:	a90d      	add	r1, sp, #52	; 0x34
 80010c4:	484d      	ldr	r0, [pc, #308]	; (80011fc <main+0x35c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c6:	e9cd 270d 	strd	r2, r7, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ca:	e9cd 4b0f 	strd	r4, fp, [sp, #60]	; 0x3c
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 80010ce:	f004 fa69 	bl	80055a4 <HAL_GPIO_Init>
  hcrc.Instance = CRC;
 80010d2:	484b      	ldr	r0, [pc, #300]	; (8001200 <main+0x360>)
 80010d4:	494b      	ldr	r1, [pc, #300]	; (8001204 <main+0x364>)
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80010d6:	8084      	strh	r4, [r0, #4]
  hcrc.Instance = CRC;
 80010d8:	6001      	str	r1, [r0, #0]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80010da:	6207      	str	r7, [r0, #32]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80010dc:	e9c0 4405 	strd	r4, r4, [r0, #20]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80010e0:	f004 f8be 	bl	8005260 <HAL_CRC_Init>
  hdma2d.Instance = DMA2D;
 80010e4:	4948      	ldr	r1, [pc, #288]	; (8001208 <main+0x368>)
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80010e6:	4628      	mov	r0, r5
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80010e8:	e9c5 440a 	strd	r4, r4, [r5, #40]	; 0x28
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80010ec:	e9c5 440c 	strd	r4, r4, [r5, #48]	; 0x30
  hdma2d.Init.Mode = DMA2D_M2M;
 80010f0:	e9c5 1400 	strd	r1, r4, [r5]
  hdma2d.Init.OutputOffset = 0;
 80010f4:	e9c5 4402 	strd	r4, r4, [r5, #8]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80010f8:	f004 f954 	bl	80053a4 <HAL_DMA2D_Init>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80010fc:	4639      	mov	r1, r7
 80010fe:	4628      	mov	r0, r5
    Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8001100:	4d42      	ldr	r5, [pc, #264]	; (800120c <main+0x36c>)
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001102:	f004 fa07 	bl	8005514 <HAL_DMA2D_ConfigLayer>
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001106:	2340      	movs	r3, #64	; 0x40
 8001108:	f44f 72c0 	mov.w	r2, #384	; 0x180
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800110c:	4940      	ldr	r1, [pc, #256]	; (8001210 <main+0x370>)
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800110e:	4630      	mov	r0, r6
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001110:	60b4      	str	r4, [r6, #8]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001112:	61f4      	str	r4, [r6, #28]
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001114:	62b4      	str	r4, [r6, #40]	; 0x28
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001116:	e9c6 3205 	strd	r3, r2, [r6, #20]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800111a:	f44f 6200 	mov.w	r2, #2048	; 0x800
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800111e:	e9c6 2a08 	strd	r2, sl, [r6, #32]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001122:	f04f 0a02 	mov.w	sl, #2
 8001126:	2207      	movs	r2, #7
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8001128:	e9c6 1400 	strd	r1, r4, [r6]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800112c:	a90d      	add	r1, sp, #52	; 0x34
  SdramTiming.RCDDelay = 2;
 800112e:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001132:	e9c6 9803 	strd	r9, r8, [r6, #12]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001136:	e9cd a20d 	strd	sl, r2, [sp, #52]	; 0x34
  SdramTiming.RowCycleDelay = 7;
 800113a:	e9cd 920f 	strd	r9, r2, [sp, #60]	; 0x3c
  SdramTiming.RPDelay = 2;
 800113e:	e9cd ba11 	strd	fp, sl, [sp, #68]	; 0x44
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001142:	f006 f9a7 	bl	8007494 <HAL_SDRAM_Init>
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001146:	4629      	mov	r1, r5
 8001148:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800114c:	4630      	mov	r0, r6
  __IO uint32_t tmpmrd = 0;
 800114e:	9401      	str	r4, [sp, #4]
    Command.CommandTarget          =  FMC_SDRAM_CMD_TARGET_BANK1;
 8001150:	e9c5 7800 	strd	r7, r8, [r5]
    Command.ModeRegisterDefinition = 0;
 8001154:	e9c5 7402 	strd	r7, r4, [r5, #8]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001158:	f006 f9bc 	bl	80074d4 <HAL_SDRAM_SendCommand>
    HAL_Delay(1);
 800115c:	4638      	mov	r0, r7
 800115e:	f003 ffbd 	bl	80050dc <HAL_Delay>
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001162:	4629      	mov	r1, r5
 8001164:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001168:	4630      	mov	r0, r6
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800116a:	e9c5 a800 	strd	sl, r8, [r5]
    Command.ModeRegisterDefinition = 0;
 800116e:	e9c5 7402 	strd	r7, r4, [r5, #8]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001172:	f006 f9af 	bl	80074d4 <HAL_SDRAM_SendCommand>
    Command.AutoRefreshNumber      = 8;
 8001176:	2308      	movs	r3, #8
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001178:	4629      	mov	r1, r5
 800117a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800117e:	4630      	mov	r0, r6
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001180:	e9c5 b800 	strd	fp, r8, [r5]
    Command.ModeRegisterDefinition = 0;
 8001184:	e9c5 3402 	strd	r3, r4, [r5, #8]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001188:	f006 f9a4 	bl	80074d4 <HAL_SDRAM_SendCommand>
    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1 | \
 800118c:	f44f 730c 	mov.w	r3, #560	; 0x230
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001190:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001194:	4629      	mov	r1, r5
    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1 | \
 8001196:	9301      	str	r3, [sp, #4]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001198:	4630      	mov	r0, r6
    Command.ModeRegisterDefinition = tmpmrd;
 800119a:	9b01      	ldr	r3, [sp, #4]
    Command.AutoRefreshNumber      = 1;
 800119c:	60af      	str	r7, [r5, #8]
    Command.ModeRegisterDefinition = tmpmrd;
 800119e:	60eb      	str	r3, [r5, #12]
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80011a0:	e9c5 9800 	strd	r9, r8, [r5]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80011a4:	f006 f996 	bl	80074d4 <HAL_SDRAM_SendCommand>
    HAL_SDRAM_ProgramRefreshRate(&hsdram1, REFRESH_COUNT);
 80011a8:	f240 712b 	movw	r1, #1835	; 0x72b
 80011ac:	4630      	mov	r0, r6
  hi2c3.Instance = I2C3;
 80011ae:	4d19      	ldr	r5, [pc, #100]	; (8001214 <main+0x374>)
    HAL_SDRAM_ProgramRefreshRate(&hsdram1, REFRESH_COUNT);
 80011b0:	f006 f9af 	bl	8007512 <HAL_SDRAM_ProgramRefreshRate>
    FMC_Bank1->BTCR[0] = 0x000030D2;
 80011b4:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 80011b8:	f243 02d2 	movw	r2, #12498	; 0x30d2
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80011bc:	4628      	mov	r0, r5
  hltdc.Init.AccumulatedActiveH = 283;
 80011be:	f240 2615 	movw	r6, #533	; 0x215
    FMC_Bank1->BTCR[0] = 0x000030D2;
 80011c2:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x20404768;
 80011c4:	4b14      	ldr	r3, [pc, #80]	; (8001218 <main+0x378>)
 80011c6:	4a15      	ldr	r2, [pc, #84]	; (800121c <main+0x37c>)
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011c8:	622c      	str	r4, [r5, #32]
  hi2c3.Init.Timing = 0x20404768;
 80011ca:	e9c5 2300 	strd	r2, r3, [r5]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011ce:	e9c5 4702 	strd	r4, r7, [r5, #8]
  hi2c3.Init.OwnAddress2 = 0;
 80011d2:	e9c5 4404 	strd	r4, r4, [r5, #16]
 80011d6:	e023      	b.n	8001220 <main+0x380>
 80011d8:	0300001b 	.word	0x0300001b
 80011dc:	e000ed00 	.word	0xe000ed00
 80011e0:	40023800 	.word	0x40023800
 80011e4:	40020400 	.word	0x40020400
 80011e8:	2000017c 	.word	0x2000017c
 80011ec:	200002fc 	.word	0x200002fc
 80011f0:	40022800 	.word	0x40022800
 80011f4:	40022000 	.word	0x40022000
 80011f8:	40020800 	.word	0x40020800
 80011fc:	40021800 	.word	0x40021800
 8001200:	20000158 	.word	0x20000158
 8001204:	40023000 	.word	0x40023000
 8001208:	4002b000 	.word	0x4002b000
 800120c:	20000140 	.word	0x20000140
 8001210:	a0000140 	.word	0xa0000140
 8001214:	200001bc 	.word	0x200001bc
 8001218:	20404768 	.word	0x20404768
 800121c:	40005c00 	.word	0x40005c00
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001220:	e9c5 4406 	strd	r4, r4, [r5, #24]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001224:	f004 fce3 	bl	8005bee <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001228:	4621      	mov	r1, r4
 800122a:	4628      	mov	r0, r5
 800122c:	f004 febc 	bl	8005fa8 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001230:	4621      	mov	r1, r4
 8001232:	4628      	mov	r0, r5
  hltdc.Instance = LTDC;
 8001234:	4d3d      	ldr	r5, [pc, #244]	; (800132c <main+0x48c>)
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001236:	f004 fedd 	bl	8005ff4 <HAL_I2CEx_ConfigDigitalFilter>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800123a:	2234      	movs	r2, #52	; 0x34
 800123c:	4621      	mov	r1, r4
 800123e:	eb0d 0002 	add.w	r0, sp, r2
 8001242:	f028 ffe7 	bl	802a214 <memset>
  hltdc.Instance = LTDC;
 8001246:	4b3a      	ldr	r3, [pc, #232]	; (8001330 <main+0x490>)
  hltdc.Init.VerticalSync = 9;
 8001248:	2128      	movs	r1, #40	; 0x28
  hltdc.Init.AccumulatedVBP = 11;
 800124a:	2035      	movs	r0, #53	; 0x35
  hltdc.Init.TotalHeigh = 285;
 800124c:	f240 2c35 	movw	ip, #565	; 0x235
  hltdc.Init.Backcolor.Blue = 0;
 8001250:	86ac      	strh	r4, [r5, #52]	; 0x34
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001252:	612c      	str	r4, [r5, #16]
  hltdc.Init.Backcolor.Red = 0;
 8001254:	f885 4036 	strb.w	r4, [r5, #54]	; 0x36
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001258:	e9c5 3400 	strd	r3, r4, [r5]
  hltdc.Init.VerticalSync = 9;
 800125c:	2309      	movs	r3, #9
 800125e:	e9c5 1305 	strd	r1, r3, [r5, #20]
  hltdc.Init.AccumulatedVBP = 11;
 8001262:	230b      	movs	r3, #11
 8001264:	e9c5 0307 	strd	r0, r3, [r5, #28]
  hltdc.Init.AccumulatedActiveH = 283;
 8001268:	f240 131b 	movw	r3, #283	; 0x11b
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800126c:	4628      	mov	r0, r5
  hltdc.Init.AccumulatedActiveH = 283;
 800126e:	e9c5 6309 	strd	r6, r3, [r5, #36]	; 0x24
  hltdc.Init.TotalHeigh = 285;
 8001272:	f240 131d 	movw	r3, #285	; 0x11d
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001276:	e9c5 4402 	strd	r4, r4, [r5, #8]
  hltdc.Init.TotalHeigh = 285;
 800127a:	e9c5 c30b 	strd	ip, r3, [r5, #44]	; 0x2c
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800127e:	f004 ff65 	bl	800614c <HAL_LTDC_Init>
  pLayerCfg.Alpha = 255;
 8001282:	21ff      	movs	r1, #255	; 0xff
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001284:	f44f 6e80 	mov.w	lr, #1024	; 0x400
  pLayerCfg.WindowX1 = 480;
 8001288:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
  pLayerCfg.WindowY1 = 272;
 800128c:	f44f 7388 	mov.w	r3, #272	; 0x110
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001290:	4628      	mov	r0, r5
  pLayerCfg.WindowX0 = 0;
 8001292:	940d      	str	r4, [sp, #52]	; 0x34
  pLayerCfg.ImageHeight = 272;
 8001294:	9318      	str	r3, [sp, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8001296:	f8ad 4064 	strh.w	r4, [sp, #100]	; 0x64
  pLayerCfg.Backcolor.Red = 0;
 800129a:	f88d 4066 	strb.w	r4, [sp, #102]	; 0x66
  pLayerCfg.Alpha0 = 0;
 800129e:	e9cd 1412 	strd	r1, r4, [sp, #72]	; 0x48
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80012a2:	2105      	movs	r1, #5
 80012a4:	e9cd e114 	strd	lr, r1, [sp, #80]	; 0x50
  pLayerCfg.FBStartAdress = 0xC0000000;
 80012a8:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
  pLayerCfg.WindowY0 = 0;
 80012ac:	e9cd 240e 	strd	r2, r4, [sp, #56]	; 0x38
  pLayerCfg.ImageWidth = 480;
 80012b0:	e9cd 1216 	strd	r1, r2, [sp, #88]	; 0x58
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80012b4:	4622      	mov	r2, r4
 80012b6:	a90d      	add	r1, sp, #52	; 0x34
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80012b8:	e9cd 3a10 	strd	r3, sl, [sp, #64]	; 0x40
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80012bc:	f005 f811 	bl	80062e2 <HAL_LTDC_ConfigLayer>
  hqspi.Instance = QUADSPI;
 80012c0:	481c      	ldr	r0, [pc, #112]	; (8001334 <main+0x494>)
 80012c2:	4b1d      	ldr	r3, [pc, #116]	; (8001338 <main+0x498>)
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80012c4:	6204      	str	r4, [r0, #32]
  hqspi.Init.ClockPrescaler = 1;
 80012c6:	e9c0 3700 	strd	r3, r7, [r0]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80012ca:	e9c0 9802 	strd	r9, r8, [r0, #8]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 80012ce:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80012d2:	f04f 0818 	mov.w	r8, #24
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80012d6:	e9c0 4406 	strd	r4, r4, [r0, #24]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 80012da:	e9c0 8304 	strd	r8, r3, [r0, #16]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80012de:	f005 f95b 	bl	8006598 <HAL_QSPI_Init>
  BSP_QSPI_Init();
 80012e2:	f003 fd55 	bl	8004d90 <BSP_QSPI_Init>
  BSP_QSPI_MemoryMappedMode();
 80012e6:	f003 fc99 	bl	8004c1c <BSP_QSPI_EnableMemoryMappedMode>
  HAL_NVIC_DisableIRQ(QUADSPI_IRQn);
 80012ea:	205c      	movs	r0, #92	; 0x5c
 80012ec:	f003 ff5a 	bl	80051a4 <HAL_NVIC_DisableIRQ>
  MX_LIBJPEG_Init();
 80012f0:	f000 fb4a 	bl	8001988 <MX_LIBJPEG_Init>
  MX_TouchGFX_Init();
 80012f4:	f000 fb73 	bl	80019de <MX_TouchGFX_Init>
  osKernelInitialize();
 80012f8:	f006 fb3c 	bl	8007974 <osKernelInitialize>
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80012fc:	4a0f      	ldr	r2, [pc, #60]	; (800133c <main+0x49c>)
 80012fe:	4621      	mov	r1, r4
 8001300:	480f      	ldr	r0, [pc, #60]	; (8001340 <main+0x4a0>)
 8001302:	f006 fb71 	bl	80079e8 <osThreadNew>
 8001306:	4b0f      	ldr	r3, [pc, #60]	; (8001344 <main+0x4a4>)
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8001308:	4a0f      	ldr	r2, [pc, #60]	; (8001348 <main+0x4a8>)
 800130a:	4621      	mov	r1, r4
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800130c:	6018      	str	r0, [r3, #0]
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 800130e:	480f      	ldr	r0, [pc, #60]	; (800134c <main+0x4ac>)
 8001310:	f006 fb6a 	bl	80079e8 <osThreadNew>
 8001314:	4b0e      	ldr	r3, [pc, #56]	; (8001350 <main+0x4b0>)
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 8001316:	4a0f      	ldr	r2, [pc, #60]	; (8001354 <main+0x4b4>)
 8001318:	4621      	mov	r1, r4
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 800131a:	6018      	str	r0, [r3, #0]
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 800131c:	480e      	ldr	r0, [pc, #56]	; (8001358 <main+0x4b8>)
 800131e:	f006 fb63 	bl	80079e8 <osThreadNew>
 8001322:	4b0e      	ldr	r3, [pc, #56]	; (800135c <main+0x4bc>)
 8001324:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8001326:	f006 fb3f 	bl	80079a8 <osKernelStart>
  while (1)
 800132a:	e7fe      	b.n	800132a <main+0x48a>
 800132c:	20000208 	.word	0x20000208
 8001330:	40016800 	.word	0x40016800
 8001334:	200002b0 	.word	0x200002b0
 8001338:	a0001000 	.word	0xa0001000
 800133c:	0802b6b8 	.word	0x0802b6b8
 8001340:	08000dfd 	.word	0x08000dfd
 8001344:	20000154 	.word	0x20000154
 8001348:	0802b694 	.word	0x0802b694
 800134c:	080019e3 	.word	0x080019e3
 8001350:	20000150 	.word	0x20000150
 8001354:	0802b6dc 	.word	0x0802b6dc
 8001358:	0800321d 	.word	0x0800321d
 800135c:	20000330 	.word	0x20000330

08001360 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001360:	6802      	ldr	r2, [r0, #0]
 8001362:	4b03      	ldr	r3, [pc, #12]	; (8001370 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8001364:	429a      	cmp	r2, r3
 8001366:	d101      	bne.n	800136c <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8001368:	f003 bea6 	b.w	80050b8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	40001000 	.word	0x40001000

08001374 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001374:	4770      	bx	lr
	...

08001378 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001378:	4b0d      	ldr	r3, [pc, #52]	; (80013b0 <HAL_MspInit+0x38>)
{
 800137a:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800137c:	210f      	movs	r1, #15
 800137e:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 8001382:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001384:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001388:	641a      	str	r2, [r3, #64]	; 0x40
 800138a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800138c:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8001390:	9200      	str	r2, [sp, #0]
 8001392:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001394:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001396:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800139a:	645a      	str	r2, [r3, #68]	; 0x44
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800139c:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800139e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013a4:	9301      	str	r3, [sp, #4]
 80013a6:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013a8:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013aa:	f003 bebb 	b.w	8005124 <HAL_NVIC_SetPriority>
 80013ae:	bf00      	nop
 80013b0:	40023800 	.word	0x40023800

080013b4 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 80013b4:	6802      	ldr	r2, [r0, #0]
{
 80013b6:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 80013b8:	4b08      	ldr	r3, [pc, #32]	; (80013dc <HAL_CRC_MspInit+0x28>)
 80013ba:	429a      	cmp	r2, r3
 80013bc:	d10b      	bne.n	80013d6 <HAL_CRC_MspInit+0x22>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80013be:	f8d3 2830 	ldr.w	r2, [r3, #2096]	; 0x830
 80013c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80013c6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80013ca:	631a      	str	r2, [r3, #48]	; 0x30
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013d2:	9301      	str	r3, [sp, #4]
 80013d4:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80013d6:	b002      	add	sp, #8
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	40023000 	.word	0x40023000

080013e0 <HAL_DMA2D_MspInit>:
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
  if(hdma2d->Instance==DMA2D)
 80013e0:	4b0e      	ldr	r3, [pc, #56]	; (800141c <HAL_DMA2D_MspInit+0x3c>)
{
 80013e2:	b507      	push	{r0, r1, r2, lr}
  if(hdma2d->Instance==DMA2D)
 80013e4:	6802      	ldr	r2, [r0, #0]
 80013e6:	429a      	cmp	r2, r3
 80013e8:	d115      	bne.n	8001416 <HAL_DMA2D_MspInit+0x36>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80013ea:	f5a3 43f0 	sub.w	r3, r3, #30720	; 0x7800
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80013ee:	2105      	movs	r1, #5
 80013f0:	205a      	movs	r0, #90	; 0x5a
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80013f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013f4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80013f8:	631a      	str	r2, [r3, #48]	; 0x30
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80013fa:	2200      	movs	r2, #0
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001402:	9301      	str	r3, [sp, #4]
 8001404:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001406:	f003 fe8d 	bl	8005124 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800140a:	205a      	movs	r0, #90	; 0x5a
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800140c:	b003      	add	sp, #12
 800140e:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001412:	f003 beb9 	b.w	8005188 <HAL_NVIC_EnableIRQ>
}
 8001416:	b003      	add	sp, #12
 8001418:	f85d fb04 	ldr.w	pc, [sp], #4
 800141c:	4002b000 	.word	0x4002b000

08001420 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001420:	b510      	push	{r4, lr}
 8001422:	b0a8      	sub	sp, #160	; 0xa0
 8001424:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001426:	2214      	movs	r2, #20
 8001428:	2100      	movs	r1, #0
 800142a:	a802      	add	r0, sp, #8
 800142c:	f028 fef2 	bl	802a214 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001430:	2284      	movs	r2, #132	; 0x84
 8001432:	2100      	movs	r1, #0
 8001434:	a807      	add	r0, sp, #28
 8001436:	f028 feed 	bl	802a214 <memset>
  if(hi2c->Instance==I2C3)
 800143a:	6822      	ldr	r2, [r4, #0]
 800143c:	4b17      	ldr	r3, [pc, #92]	; (800149c <HAL_I2C_MspInit+0x7c>)
 800143e:	429a      	cmp	r2, r3
 8001440:	d12a      	bne.n	8001498 <HAL_I2C_MspInit+0x78>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001442:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001446:	a807      	add	r0, sp, #28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001448:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800144a:	f005 fd9b 	bl	8006f84 <HAL_RCCEx_PeriphCLKConfig>
 800144e:	b108      	cbz	r0, 8001454 <HAL_I2C_MspInit+0x34>
    {
      Error_Handler();
 8001450:	f7ff ff90 	bl	8001374 <Error_Handler>
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001454:	4c12      	ldr	r4, [pc, #72]	; (80014a0 <HAL_I2C_MspInit+0x80>)
    /**I2C3 GPIO Configuration
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001456:	f44f 72c0 	mov.w	r2, #384	; 0x180
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800145a:	2101      	movs	r1, #1
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800145c:	4811      	ldr	r0, [pc, #68]	; (80014a4 <HAL_I2C_MspInit+0x84>)
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800145e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001460:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001464:	6323      	str	r3, [r4, #48]	; 0x30
 8001466:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001468:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800146c:	9300      	str	r3, [sp, #0]
 800146e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001470:	2312      	movs	r3, #18
 8001472:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001476:	2303      	movs	r3, #3
 8001478:	e9cd 1304 	strd	r1, r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800147c:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800147e:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001480:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001482:	f004 f88f 	bl	80055a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001486:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001488:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800148c:	6423      	str	r3, [r4, #64]	; 0x40
 800148e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001490:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001494:	9301      	str	r3, [sp, #4]
 8001496:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001498:	b028      	add	sp, #160	; 0xa0
 800149a:	bd10      	pop	{r4, pc}
 800149c:	40005c00 	.word	0x40005c00
 80014a0:	40023800 	.word	0x40023800
 80014a4:	40021c00 	.word	0x40021c00

080014a8 <HAL_I2C_MspDeInit>:
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
  if(hi2c->Instance==I2C3)
 80014a8:	6802      	ldr	r2, [r0, #0]
{
 80014aa:	b508      	push	{r3, lr}
  if(hi2c->Instance==I2C3)
 80014ac:	4b09      	ldr	r3, [pc, #36]	; (80014d4 <HAL_I2C_MspDeInit+0x2c>)
 80014ae:	429a      	cmp	r2, r3
 80014b0:	d10f      	bne.n	80014d2 <HAL_I2C_MspDeInit+0x2a>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 80014b2:	4a09      	ldr	r2, [pc, #36]	; (80014d8 <HAL_I2C_MspDeInit+0x30>)

    /**I2C3 GPIO Configuration
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA
    */
    HAL_GPIO_DeInit(GPIOH, GPIO_PIN_7);
 80014b4:	2180      	movs	r1, #128	; 0x80
 80014b6:	4809      	ldr	r0, [pc, #36]	; (80014dc <HAL_I2C_MspDeInit+0x34>)
    __HAL_RCC_I2C3_CLK_DISABLE();
 80014b8:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80014ba:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80014be:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOH, GPIO_PIN_7);
 80014c0:	f004 f954 	bl	800576c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOH, GPIO_PIN_8);
 80014c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014c8:	4804      	ldr	r0, [pc, #16]	; (80014dc <HAL_I2C_MspDeInit+0x34>)
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 80014ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_GPIO_DeInit(GPIOH, GPIO_PIN_8);
 80014ce:	f004 b94d 	b.w	800576c <HAL_GPIO_DeInit>
}
 80014d2:	bd08      	pop	{r3, pc}
 80014d4:	40005c00 	.word	0x40005c00
 80014d8:	40023800 	.word	0x40023800
 80014dc:	40021c00 	.word	0x40021c00

080014e0 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80014e0:	b570      	push	{r4, r5, r6, lr}
 80014e2:	b0ac      	sub	sp, #176	; 0xb0
 80014e4:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e6:	2214      	movs	r2, #20
 80014e8:	2100      	movs	r1, #0
 80014ea:	a806      	add	r0, sp, #24
 80014ec:	f028 fe92 	bl	802a214 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014f0:	2284      	movs	r2, #132	; 0x84
 80014f2:	2100      	movs	r1, #0
 80014f4:	a80b      	add	r0, sp, #44	; 0x2c
 80014f6:	f028 fe8d 	bl	802a214 <memset>
  if(hltdc->Instance==LTDC)
 80014fa:	6822      	ldr	r2, [r4, #0]
 80014fc:	4b48      	ldr	r3, [pc, #288]	; (8001620 <HAL_LTDC_MspInit+0x140>)
 80014fe:	429a      	cmp	r2, r3
 8001500:	f040 808c 	bne.w	800161c <HAL_LTDC_MspInit+0x13c>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001504:	2308      	movs	r3, #8
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001506:	2005      	movs	r0, #5
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
    PeriphClkInitStruct.PLLSAIDivQ = 1;
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001508:	2401      	movs	r4, #1
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800150a:	930b      	str	r3, [sp, #44]	; 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 800150c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001510:	9310      	str	r3, [sp, #64]	; 0x40
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001512:	2302      	movs	r3, #2
 8001514:	e9cd 3011 	strd	r3, r0, [sp, #68]	; 0x44
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001518:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800151c:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800151e:	e9cd 4315 	strd	r4, r3, [sp, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001522:	f005 fd2f 	bl	8006f84 <HAL_RCCEx_PeriphCLKConfig>
 8001526:	b108      	cbz	r0, 800152c <HAL_LTDC_MspInit+0x4c>
    {
      Error_Handler();
 8001528:	f7ff ff24 	bl	8001374 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800152c:	4b3d      	ldr	r3, [pc, #244]	; (8001624 <HAL_LTDC_MspInit+0x144>)
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152e:	2400      	movs	r4, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001530:	2502      	movs	r5, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001532:	260e      	movs	r6, #14
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001534:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001536:	a906      	add	r1, sp, #24
 8001538:	483b      	ldr	r0, [pc, #236]	; (8001628 <HAL_LTDC_MspInit+0x148>)
    __HAL_RCC_LTDC_CLK_ENABLE();
 800153a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800153e:	645a      	str	r2, [r3, #68]	; 0x44
 8001540:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001542:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8001546:	9200      	str	r2, [sp, #0]
 8001548:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800154a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800154c:	f042 0210 	orr.w	r2, r2, #16
 8001550:	631a      	str	r2, [r3, #48]	; 0x30
 8001552:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001554:	f002 0210 	and.w	r2, r2, #16
 8001558:	9201      	str	r2, [sp, #4]
 800155a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800155c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800155e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001562:	631a      	str	r2, [r3, #48]	; 0x30
 8001564:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001566:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800156a:	9202      	str	r2, [sp, #8]
 800156c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 800156e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001570:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001574:	631a      	str	r2, [r3, #48]	; 0x30
 8001576:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001578:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 800157c:	9203      	str	r2, [sp, #12]
 800157e:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001580:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001582:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001586:	631a      	str	r2, [r3, #48]	; 0x30
 8001588:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800158a:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800158e:	9204      	str	r2, [sp, #16]
 8001590:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001592:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001594:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001598:	631a      	str	r2, [r3, #48]	; 0x30
 800159a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015a0:	9305      	str	r3, [sp, #20]
 80015a2:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a4:	2310      	movs	r3, #16
 80015a6:	e9cd 3506 	strd	r3, r5, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015aa:	e9cd 4408 	strd	r4, r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80015ae:	960a      	str	r6, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015b0:	f003 fff8 	bl	80055a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_11
 80015b4:	f64e 73ff 	movw	r3, #61439	; 0xefff
                          |GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80015b8:	a906      	add	r1, sp, #24
 80015ba:	481c      	ldr	r0, [pc, #112]	; (800162c <HAL_LTDC_MspInit+0x14c>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80015bc:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015be:	e9cd 3506 	strd	r3, r5, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c2:	e9cd 4408 	strd	r4, r4, [sp, #32]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80015c6:	f003 ffed 	bl	80055a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4
 80015ca:	23f7      	movs	r3, #247	; 0xf7
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80015cc:	a906      	add	r1, sp, #24
 80015ce:	4818      	ldr	r0, [pc, #96]	; (8001630 <HAL_LTDC_MspInit+0x150>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80015d0:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d2:	e9cd 3506 	strd	r3, r5, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d6:	e9cd 4408 	strd	r4, r4, [sp, #32]
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80015da:	f003 ffe3 	bl	80055a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80015de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015e2:	a906      	add	r1, sp, #24
 80015e4:	4813      	ldr	r0, [pc, #76]	; (8001634 <HAL_LTDC_MspInit+0x154>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e6:	e9cd 3506 	strd	r3, r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80015ea:	2309      	movs	r3, #9
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ec:	e9cd 4408 	strd	r4, r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80015f0:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015f2:	f003 ffd7 	bl	80055a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_15|GPIO_PIN_14;
 80015f6:	f44f 4346 	mov.w	r3, #50688	; 0xc600
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80015fa:	a906      	add	r1, sp, #24
 80015fc:	480e      	ldr	r0, [pc, #56]	; (8001638 <HAL_LTDC_MspInit+0x158>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80015fe:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001600:	e9cd 3506 	strd	r3, r5, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001604:	e9cd 4408 	strd	r4, r4, [sp, #32]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001608:	f003 ffcc 	bl	80055a4 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800160c:	2058      	movs	r0, #88	; 0x58
 800160e:	4622      	mov	r2, r4
 8001610:	2105      	movs	r1, #5
 8001612:	f003 fd87 	bl	8005124 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001616:	2058      	movs	r0, #88	; 0x58
 8001618:	f003 fdb6 	bl	8005188 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800161c:	b02c      	add	sp, #176	; 0xb0
 800161e:	bd70      	pop	{r4, r5, r6, pc}
 8001620:	40016800 	.word	0x40016800
 8001624:	40023800 	.word	0x40023800
 8001628:	40021000 	.word	0x40021000
 800162c:	40022400 	.word	0x40022400
 8001630:	40022800 	.word	0x40022800
 8001634:	40021800 	.word	0x40021800
 8001638:	40022000 	.word	0x40022000

0800163c <HAL_QSPI_MspInit>:
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800163c:	2214      	movs	r2, #20
 800163e:	2100      	movs	r1, #0
{
 8001640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001644:	b08a      	sub	sp, #40	; 0x28
 8001646:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001648:	eb0d 0002 	add.w	r0, sp, r2
 800164c:	f028 fde2 	bl	802a214 <memset>
  if(hqspi->Instance==QUADSPI)
 8001650:	6822      	ldr	r2, [r4, #0]
 8001652:	4b2c      	ldr	r3, [pc, #176]	; (8001704 <HAL_QSPI_MspInit+0xc8>)
 8001654:	429a      	cmp	r2, r3
 8001656:	d151      	bne.n	80016fc <HAL_QSPI_MspInit+0xc0>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001658:	4b2b      	ldr	r3, [pc, #172]	; (8001708 <HAL_QSPI_MspInit+0xcc>)
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165a:	2502      	movs	r5, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800165c:	2403      	movs	r4, #3
 800165e:	2609      	movs	r6, #9
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001660:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001662:	f04f 0804 	mov.w	r8, #4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001666:	a905      	add	r1, sp, #20
 8001668:	4828      	ldr	r0, [pc, #160]	; (800170c <HAL_QSPI_MspInit+0xd0>)
    __HAL_RCC_QSPI_CLK_ENABLE();
 800166a:	f042 0202 	orr.w	r2, r2, #2

    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166e:	2700      	movs	r7, #0
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001670:	639a      	str	r2, [r3, #56]	; 0x38
 8001672:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001674:	f002 0202 	and.w	r2, r2, #2
 8001678:	9201      	str	r2, [sp, #4]
 800167a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800167c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800167e:	f042 0210 	orr.w	r2, r2, #16
 8001682:	631a      	str	r2, [r3, #48]	; 0x30
 8001684:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001686:	f002 0210 	and.w	r2, r2, #16
 800168a:	9202      	str	r2, [sp, #8]
 800168c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800168e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001690:	f042 0202 	orr.w	r2, r2, #2
 8001694:	631a      	str	r2, [r3, #48]	; 0x30
 8001696:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001698:	f002 0202 	and.w	r2, r2, #2
 800169c:	9203      	str	r2, [sp, #12]
 800169e:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016a2:	f042 0208 	orr.w	r2, r2, #8
 80016a6:	631a      	str	r2, [r3, #48]	; 0x30
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	f003 0308 	and.w	r3, r3, #8
 80016ae:	9304      	str	r3, [sp, #16]
 80016b0:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b2:	e9cd 8505 	strd	r8, r5, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80016b6:	e9cd 4608 	strd	r4, r6, [sp, #32]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016ba:	f003 ff73 	bl	80055a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80016be:	2340      	movs	r3, #64	; 0x40
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c0:	a905      	add	r1, sp, #20
 80016c2:	4813      	ldr	r0, [pc, #76]	; (8001710 <HAL_QSPI_MspInit+0xd4>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c4:	e9cd 3505 	strd	r3, r5, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80016c8:	230a      	movs	r3, #10
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ca:	e9cd 7407 	strd	r7, r4, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80016ce:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d0:	f003 ff68 	bl	80055a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d4:	a905      	add	r1, sp, #20
 80016d6:	480e      	ldr	r0, [pc, #56]	; (8001710 <HAL_QSPI_MspInit+0xd4>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80016d8:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016da:	e9cd 8505 	strd	r8, r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016de:	e9cd 7407 	strd	r7, r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016e2:	f003 ff5f 	bl	80055a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_11;
 80016e6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016ea:	a905      	add	r1, sp, #20
 80016ec:	4809      	ldr	r0, [pc, #36]	; (8001714 <HAL_QSPI_MspInit+0xd8>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80016ee:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f0:	e9cd 3505 	strd	r3, r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f4:	e9cd 7407 	strd	r7, r4, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016f8:	f003 ff54 	bl	80055a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80016fc:	b00a      	add	sp, #40	; 0x28
 80016fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001702:	bf00      	nop
 8001704:	a0001000 	.word	0xa0001000
 8001708:	40023800 	.word	0x40023800
 800170c:	40021000 	.word	0x40021000
 8001710:	40020400 	.word	0x40020400
 8001714:	40020c00 	.word	0x40020c00

08001718 <HAL_QSPI_MspDeInit>:
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* hqspi)
{
  if(hqspi->Instance==QUADSPI)
 8001718:	6802      	ldr	r2, [r0, #0]
{
 800171a:	b508      	push	{r3, lr}
  if(hqspi->Instance==QUADSPI)
 800171c:	4b0b      	ldr	r3, [pc, #44]	; (800174c <HAL_QSPI_MspDeInit+0x34>)
 800171e:	429a      	cmp	r2, r3
 8001720:	d113      	bne.n	800174a <HAL_QSPI_MspDeInit+0x32>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 8001722:	4a0b      	ldr	r2, [pc, #44]	; (8001750 <HAL_QSPI_MspDeInit+0x38>)
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_2);
 8001724:	2104      	movs	r1, #4
 8001726:	480b      	ldr	r0, [pc, #44]	; (8001754 <HAL_QSPI_MspDeInit+0x3c>)
    __HAL_RCC_QSPI_CLK_DISABLE();
 8001728:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800172a:	f023 0302 	bic.w	r3, r3, #2
 800172e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_2);
 8001730:	f004 f81c 	bl	800576c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6|GPIO_PIN_2);
 8001734:	2144      	movs	r1, #68	; 0x44
 8001736:	4808      	ldr	r0, [pc, #32]	; (8001758 <HAL_QSPI_MspDeInit+0x40>)
 8001738:	f004 f818 	bl	800576c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_11);
 800173c:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 8001740:	4806      	ldr	r0, [pc, #24]	; (800175c <HAL_QSPI_MspDeInit+0x44>)
  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }

}
 8001742:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_11);
 8001746:	f004 b811 	b.w	800576c <HAL_GPIO_DeInit>
}
 800174a:	bd08      	pop	{r3, pc}
 800174c:	a0001000 	.word	0xa0001000
 8001750:	40023800 	.word	0x40023800
 8001754:	40021000 	.word	0x40021000
 8001758:	40020400 	.word	0x40020400
 800175c:	40020c00 	.word	0x40020c00

08001760 <HAL_SDRAM_MspInit>:
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001760:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001762:	2300      	movs	r3, #0
void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001764:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001766:	9303      	str	r3, [sp, #12]
  if (FMC_Initialized) {
 8001768:	4b29      	ldr	r3, [pc, #164]	; (8001810 <HAL_SDRAM_MspInit+0xb0>)
 800176a:	681e      	ldr	r6, [r3, #0]
 800176c:	2e00      	cmp	r6, #0
 800176e:	d14d      	bne.n	800180c <HAL_SDRAM_MspInit+0xac>
  FMC_Initialized = 1;
 8001770:	2201      	movs	r2, #1
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001772:	2702      	movs	r7, #2
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001774:	2503      	movs	r5, #3
 8001776:	240c      	movs	r4, #12
  FMC_Initialized = 1;
 8001778:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800177a:	a901      	add	r1, sp, #4
  __HAL_RCC_FMC_CLK_ENABLE();
 800177c:	4b25      	ldr	r3, [pc, #148]	; (8001814 <HAL_SDRAM_MspInit+0xb4>)
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800177e:	4826      	ldr	r0, [pc, #152]	; (8001818 <HAL_SDRAM_MspInit+0xb8>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8001780:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001782:	f042 0201 	orr.w	r2, r2, #1
 8001786:	639a      	str	r2, [r3, #56]	; 0x38
 8001788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800178a:	f003 0301 	and.w	r3, r3, #1
 800178e:	9300      	str	r3, [sp, #0]
 8001790:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001792:	f64f 7383 	movw	r3, #65411	; 0xff83
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001796:	e9cd 5404 	strd	r5, r4, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179a:	e9cd 3701 	strd	r3, r7, [sp, #4]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800179e:	f003 ff01 	bl	80055a4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
 80017a2:	f248 1333 	movw	r3, #33075	; 0x8133
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017a6:	a901      	add	r1, sp, #4
 80017a8:	481c      	ldr	r0, [pc, #112]	; (800181c <HAL_SDRAM_MspInit+0xbc>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80017aa:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ac:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017b0:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017b4:	f003 fef6 	bl	80055a4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 80017b8:	f24c 7303 	movw	r3, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017bc:	a901      	add	r1, sp, #4
 80017be:	4818      	ldr	r0, [pc, #96]	; (8001820 <HAL_SDRAM_MspInit+0xc0>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80017c0:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c2:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017c6:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017ca:	f003 feeb 	bl	80055a4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80017ce:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017d2:	a901      	add	r1, sp, #4
 80017d4:	4813      	ldr	r0, [pc, #76]	; (8001824 <HAL_SDRAM_MspInit+0xc4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80017d6:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d8:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017dc:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017e0:	f003 fee0 	bl	80055a4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3;
 80017e4:	2328      	movs	r3, #40	; 0x28
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80017e6:	a901      	add	r1, sp, #4
 80017e8:	480f      	ldr	r0, [pc, #60]	; (8001828 <HAL_SDRAM_MspInit+0xc8>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80017ea:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ec:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017f0:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80017f4:	f003 fed6 	bl	80055a4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80017f8:	2308      	movs	r3, #8
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017fa:	a901      	add	r1, sp, #4
 80017fc:	480b      	ldr	r0, [pc, #44]	; (800182c <HAL_SDRAM_MspInit+0xcc>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80017fe:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001800:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001804:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001808:	f003 fecc 	bl	80055a4 <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800180c:	b007      	add	sp, #28
 800180e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001810:	20000334 	.word	0x20000334
 8001814:	40023800 	.word	0x40023800
 8001818:	40021000 	.word	0x40021000
 800181c:	40021800 	.word	0x40021800
 8001820:	40020c00 	.word	0x40020c00
 8001824:	40021400 	.word	0x40021400
 8001828:	40021c00 	.word	0x40021c00
 800182c:	40020800 	.word	0x40020800

08001830 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001830:	b510      	push	{r4, lr}
 8001832:	4601      	mov	r1, r0
 8001834:	b088      	sub	sp, #32
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001836:	2200      	movs	r2, #0
 8001838:	2036      	movs	r0, #54	; 0x36
 800183a:	f003 fc73 	bl	8005124 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800183e:	2036      	movs	r0, #54	; 0x36
 8001840:	f003 fca2 	bl	8005188 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001844:	4b14      	ldr	r3, [pc, #80]	; (8001898 <HAL_InitTick+0x68>)

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001846:	a901      	add	r1, sp, #4
 8001848:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 800184a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800184c:	4c13      	ldr	r4, [pc, #76]	; (800189c <HAL_InitTick+0x6c>)
  __HAL_RCC_TIM6_CLK_ENABLE();
 800184e:	f042 0210 	orr.w	r2, r2, #16
 8001852:	641a      	str	r2, [r3, #64]	; 0x40
 8001854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001856:	f003 0310 	and.w	r3, r3, #16
 800185a:	9302      	str	r3, [sp, #8]
 800185c:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800185e:	f005 fb73 	bl	8006f48 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001862:	f005 fb61 	bl	8006f28 <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 8001866:	4b0e      	ldr	r3, [pc, #56]	; (80018a0 <HAL_InitTick+0x70>)
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001868:	0040      	lsls	r0, r0, #1
  htim6.Instance = TIM6;
 800186a:	6023      	str	r3, [r4, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800186c:	f240 33e7 	movw	r3, #999	; 0x3e7
 8001870:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001872:	4b0c      	ldr	r3, [pc, #48]	; (80018a4 <HAL_InitTick+0x74>)
 8001874:	fbb0 f0f3 	udiv	r0, r0, r3
 8001878:	3801      	subs	r0, #1
  htim6.Init.Prescaler = uwPrescalerValue;
  htim6.Init.ClockDivision = 0;
 800187a:	2300      	movs	r3, #0
  htim6.Init.Prescaler = uwPrescalerValue;
 800187c:	6060      	str	r0, [r4, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800187e:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 8001880:	6123      	str	r3, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001882:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001884:	f005 ffb6 	bl	80077f4 <HAL_TIM_Base_Init>
 8001888:	b920      	cbnz	r0, 8001894 <HAL_InitTick+0x64>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800188a:	4620      	mov	r0, r4
 800188c:	f005 fe5a 	bl	8007544 <HAL_TIM_Base_Start_IT>
  }

  /* Return function status */
  return HAL_ERROR;
}
 8001890:	b008      	add	sp, #32
 8001892:	bd10      	pop	{r4, pc}
  return HAL_ERROR;
 8001894:	2001      	movs	r0, #1
 8001896:	e7fb      	b.n	8001890 <HAL_InitTick+0x60>
 8001898:	40023800 	.word	0x40023800
 800189c:	20000338 	.word	0x20000338
 80018a0:	40001000 	.word	0x40001000
 80018a4:	000f4240 	.word	0x000f4240

080018a8 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80018a8:	4770      	bx	lr

080018aa <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018aa:	e7fe      	b.n	80018aa <HardFault_Handler>

080018ac <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018ac:	e7fe      	b.n	80018ac <MemManage_Handler>

080018ae <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018ae:	e7fe      	b.n	80018ae <BusFault_Handler>

080018b0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018b0:	e7fe      	b.n	80018b0 <UsageFault_Handler>

080018b2 <DebugMon_Handler>:
 80018b2:	4770      	bx	lr

080018b4 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80018b4:	4801      	ldr	r0, [pc, #4]	; (80018bc <TIM6_DAC_IRQHandler+0x8>)
 80018b6:	f005 be87 	b.w	80075c8 <HAL_TIM_IRQHandler>
 80018ba:	bf00      	nop
 80018bc:	20000338 	.word	0x20000338

080018c0 <LTDC_IRQHandler>:
void LTDC_IRQHandler(void)
{
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80018c0:	4801      	ldr	r0, [pc, #4]	; (80018c8 <LTDC_IRQHandler+0x8>)
 80018c2:	f004 bcb1 	b.w	8006228 <HAL_LTDC_IRQHandler>
 80018c6:	bf00      	nop
 80018c8:	20000208 	.word	0x20000208

080018cc <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80018cc:	4801      	ldr	r0, [pc, #4]	; (80018d4 <DMA2D_IRQHandler+0x8>)
 80018ce:	f003 bd97 	b.w	8005400 <HAL_DMA2D_IRQHandler>
 80018d2:	bf00      	nop
 80018d4:	2000017c 	.word	0x2000017c

080018d8 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80018d8:	2001      	movs	r0, #1
 80018da:	4770      	bx	lr

080018dc <_kill>:

int _kill(int pid, int sig)
{
 80018dc:	b508      	push	{r3, lr}
	errno = EINVAL;
 80018de:	f028 fc3b 	bl	802a158 <__errno>
 80018e2:	2316      	movs	r3, #22
 80018e4:	6003      	str	r3, [r0, #0]
	return -1;
}
 80018e6:	f04f 30ff 	mov.w	r0, #4294967295
 80018ea:	bd08      	pop	{r3, pc}

080018ec <_exit>:

void _exit (int status)
{
 80018ec:	b508      	push	{r3, lr}
	errno = EINVAL;
 80018ee:	f028 fc33 	bl	802a158 <__errno>
 80018f2:	2316      	movs	r3, #22
 80018f4:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 80018f6:	e7fe      	b.n	80018f6 <_exit+0xa>

080018f8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018f8:	b570      	push	{r4, r5, r6, lr}
 80018fa:	460d      	mov	r5, r1
 80018fc:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018fe:	460e      	mov	r6, r1
 8001900:	1b73      	subs	r3, r6, r5
 8001902:	429c      	cmp	r4, r3
 8001904:	dc01      	bgt.n	800190a <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8001906:	4620      	mov	r0, r4
 8001908:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 800190a:	f3af 8000 	nop.w
 800190e:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001912:	e7f5      	b.n	8001900 <_read+0x8>

08001914 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001914:	b570      	push	{r4, r5, r6, lr}
 8001916:	460d      	mov	r5, r1
 8001918:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800191a:	460e      	mov	r6, r1
 800191c:	1b73      	subs	r3, r6, r5
 800191e:	429c      	cmp	r4, r3
 8001920:	dc01      	bgt.n	8001926 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8001922:	4620      	mov	r0, r4
 8001924:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8001926:	f816 0b01 	ldrb.w	r0, [r6], #1
 800192a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800192e:	e7f5      	b.n	800191c <_write+0x8>

08001930 <_close>:

int _close(int file)
{
	return -1;
}
 8001930:	f04f 30ff 	mov.w	r0, #4294967295
 8001934:	4770      	bx	lr

08001936 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001936:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 800193a:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 800193c:	604b      	str	r3, [r1, #4]
}
 800193e:	4770      	bx	lr

08001940 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001940:	2001      	movs	r0, #1
 8001942:	4770      	bx	lr

08001944 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001944:	2000      	movs	r0, #0
 8001946:	4770      	bx	lr

08001948 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001948:	4a0b      	ldr	r2, [pc, #44]	; (8001978 <_sbrk+0x30>)
{
 800194a:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 800194c:	6811      	ldr	r1, [r2, #0]
{
 800194e:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8001950:	b909      	cbnz	r1, 8001956 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8001952:	490a      	ldr	r1, [pc, #40]	; (800197c <_sbrk+0x34>)
 8001954:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001956:	6810      	ldr	r0, [r2, #0]
 8001958:	4909      	ldr	r1, [pc, #36]	; (8001980 <_sbrk+0x38>)
 800195a:	4c0a      	ldr	r4, [pc, #40]	; (8001984 <_sbrk+0x3c>)
 800195c:	4403      	add	r3, r0
 800195e:	1b09      	subs	r1, r1, r4
 8001960:	428b      	cmp	r3, r1
 8001962:	d906      	bls.n	8001972 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001964:	f028 fbf8 	bl	802a158 <__errno>
 8001968:	230c      	movs	r3, #12
 800196a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800196c:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001970:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8001972:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001974:	e7fc      	b.n	8001970 <_sbrk+0x28>
 8001976:	bf00      	nop
 8001978:	20000384 	.word	0x20000384
 800197c:	20017a70 	.word	0x20017a70
 8001980:	20050000 	.word	0x20050000
 8001984:	00000a00 	.word	0x00000a00

08001988 <MX_LIBJPEG_Init>:
  */

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 8001988:	4770      	bx	lr
	...

0800198c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800198c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019c4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001990:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001992:	e003      	b.n	800199c <LoopCopyDataInit>

08001994 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001994:	4b0c      	ldr	r3, [pc, #48]	; (80019c8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001996:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001998:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800199a:	3104      	adds	r1, #4

0800199c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800199c:	480b      	ldr	r0, [pc, #44]	; (80019cc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800199e:	4b0c      	ldr	r3, [pc, #48]	; (80019d0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80019a0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80019a2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80019a4:	d3f6      	bcc.n	8001994 <CopyDataInit>
  ldr  r2, =_sbss
 80019a6:	4a0b      	ldr	r2, [pc, #44]	; (80019d4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80019a8:	e002      	b.n	80019b0 <LoopFillZerobss>

080019aa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80019aa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80019ac:	f842 3b04 	str.w	r3, [r2], #4

080019b0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80019b0:	4b09      	ldr	r3, [pc, #36]	; (80019d8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80019b2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80019b4:	d3f9      	bcc.n	80019aa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80019b6:	f003 fa83 	bl	8004ec0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019ba:	f028 fbe5 	bl	802a188 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019be:	f7ff fa6f 	bl	8000ea0 <main>
  bx  lr    
 80019c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80019c4:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 80019c8:	080303f8 	.word	0x080303f8
  ldr  r0, =_sdata
 80019cc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80019d0:	20000124 	.word	0x20000124
  ldr  r2, =_sbss
 80019d4:	20000124 	.word	0x20000124
  ldr  r3, = _ebss
 80019d8:	20017a70 	.word	0x20017a70

080019dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019dc:	e7fe      	b.n	80019dc <ADC_IRQHandler>

080019de <MX_TouchGFX_Init>:
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_init();
 80019de:	f001 b879 	b.w	8002ad4 <touchgfx_init>

080019e2 <TouchGFX_Task>:
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 80019e2:	f001 b8e9 	b.w	8002bb8 <touchgfx_taskEntry>

080019e6 <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
    {
        return cc_consumed;
 80019e6:	6840      	ldr	r0, [r0, #4]
    }
 80019e8:	4770      	bx	lr

080019ea <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
     *
     * @param  val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
    {
        cc_consumed = val;
 80019ea:	6041      	str	r1, [r0, #4]
    }
 80019ec:	4770      	bx	lr
	...

080019f0 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>:
    //                                    Embedded Trace Macrocell (ETM)
    //                                    Trace Port Interface Unit (TPIU).
    //                                    This enables control of power usage unless tracing is required. The application can enable this, for ITM use, or use by a debugger.

    // Enable Debug Exception and Monitor Control Register
    *((volatile unsigned int*)0xE000EDFC) |= 0x01000000;
 80019f0:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 80019f4:	f8d2 3dfc 	ldr.w	r3, [r2, #3580]	; 0xdfc
 80019f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019fc:	f8c2 3dfc 	str.w	r3, [r2, #3580]	; 0xdfc
    // Enable Lock Access Register
    *((volatile unsigned int*)0xE0001FB0) |= 0xC5ACCE55;
 8001a00:	4b05      	ldr	r3, [pc, #20]	; (8001a18 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x28>)
 8001a02:	4a06      	ldr	r2, [pc, #24]	; (8001a1c <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x2c>)
 8001a04:	f8d3 1fb0 	ldr.w	r1, [r3, #4016]	; 0xfb0
 8001a08:	430a      	orrs	r2, r1
 8001a0a:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
    // Enable Data Watchpoint and Trace Control Register
    *((volatile unsigned int*)0xE0001000) |= 1;
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	f042 0201 	orr.w	r2, r2, #1
 8001a14:	601a      	str	r2, [r3, #0]
}
 8001a16:	4770      	bx	lr
 8001a18:	e0001000 	.word	0xe0001000
 8001a1c:	c5acce55 	.word	0xc5acce55

08001a20 <_ZN8touchgfx25CortexMMCUInstrumentation12getElapsedUSEjjj>:

//Board specific clockfrequency
unsigned int CortexMMCUInstrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
 8001a20:	1a51      	subs	r1, r2, r1
 8001a22:	eb01 0153 	add.w	r1, r1, r3, lsr #1
}
 8001a26:	fbb1 f0f3 	udiv	r0, r1, r3
 8001a2a:	4770      	bx	lr

08001a2c <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv>:

unsigned int CortexMMCUInstrumentation::getCPUCycles()
{
    return *((volatile unsigned int*)0xE0001004);
 8001a2c:	4b01      	ldr	r3, [pc, #4]	; (8001a34 <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv+0x8>)
 8001a2e:	6858      	ldr	r0, [r3, #4]
}
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	e0001000 	.word	0xe0001000

08001a38 <_ZN8touchgfx25CortexMMCUInstrumentationD1Ev>:
 *        Interface for instrumenting Cortex-M processors to measure MCU load via measured CPU
 *        cycles.
 *
 * @sa MCUInstrumentation
 */
class CortexMMCUInstrumentation : public MCUInstrumentation
 8001a38:	4770      	bx	lr

08001a3a <_ZN8touchgfx25CortexMMCUInstrumentationD0Ev>:
 8001a3a:	b510      	push	{r4, lr}
 8001a3c:	4604      	mov	r4, r0
 8001a3e:	210c      	movs	r1, #12
 8001a40:	f028 fb2a 	bl	802a098 <_ZdlPvj>
 8001a44:	4620      	mov	r0, r4
 8001a46:	bd10      	pop	{r4, pc}

08001a48 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb>:

void CortexMMCUInstrumentation::setMCUActive(bool active)
{
    if (active) //idle task sched out
    {
        uint32_t cc_temp = getCPUCycles() - cc_in;
 8001a48:	6803      	ldr	r3, [r0, #0]
{
 8001a4a:	b510      	push	{r4, lr}
        uint32_t cc_temp = getCPUCycles() - cc_in;
 8001a4c:	691b      	ldr	r3, [r3, #16]
{
 8001a4e:	4604      	mov	r4, r0
    if (active) //idle task sched out
 8001a50:	b131      	cbz	r1, 8001a60 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x18>
        uint32_t cc_temp = getCPUCycles() - cc_in;
 8001a52:	4798      	blx	r3
 8001a54:	68a2      	ldr	r2, [r4, #8]
        cc_consumed += cc_temp;
 8001a56:	6863      	ldr	r3, [r4, #4]
 8001a58:	1a9b      	subs	r3, r3, r2
 8001a5a:	4418      	add	r0, r3
 8001a5c:	6060      	str	r0, [r4, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
 8001a5e:	bd10      	pop	{r4, pc}
        cc_in = getCPUCycles();
 8001a60:	4798      	blx	r3
 8001a62:	60a0      	str	r0, [r4, #8]
}
 8001a64:	e7fb      	b.n	8001a5e <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x16>
	...

08001a68 <_ZN20STM32TouchController4initEv>:
extern I2C_HandleTypeDef hi2c3;

void STM32TouchController::init()
{
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 8001a68:	4b02      	ldr	r3, [pc, #8]	; (8001a74 <_ZN20STM32TouchController4initEv+0xc>)

    /* Initialize the TS driver */
    tsDriver->Start(TS_I2C_ADDRESS);
 8001a6a:	2070      	movs	r0, #112	; 0x70
    tsDriver = &ft5336_ts_drv;
 8001a6c:	4a02      	ldr	r2, [pc, #8]	; (8001a78 <_ZN20STM32TouchController4initEv+0x10>)
 8001a6e:	6013      	str	r3, [r2, #0]
    tsDriver->Start(TS_I2C_ADDRESS);
 8001a70:	68db      	ldr	r3, [r3, #12]
 8001a72:	4718      	bx	r3
 8001a74:	20000010 	.word	0x20000010
 8001a78:	20000388 	.word	0x20000388

08001a7c <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8001a7c:	4770      	bx	lr

08001a7e <_ZN20STM32TouchControllerD0Ev>:
 8001a7e:	b510      	push	{r4, lr}
 8001a80:	4604      	mov	r4, r0
 8001a82:	2104      	movs	r1, #4
 8001a84:	f028 fb08 	bl	802a098 <_ZdlPvj>
 8001a88:	4620      	mov	r0, r4
 8001a8a:	bd10      	pop	{r4, pc}

08001a8c <_ZN20STM32TouchController11sampleTouchERlS0_>:
}

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8001a8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    if (tsDriver)
 8001a8e:	4d0a      	ldr	r5, [pc, #40]	; (8001ab8 <_ZN20STM32TouchController11sampleTouchERlS0_+0x2c>)
{
 8001a90:	460c      	mov	r4, r1
    if (tsDriver)
 8001a92:	682b      	ldr	r3, [r5, #0]
 8001a94:	b913      	cbnz	r3, 8001a9c <_ZN20STM32TouchController11sampleTouchERlS0_+0x10>
            /* Get each touch coordinates */
            tsDriver->GetXY(TS_I2C_ADDRESS, (uint16_t*)&y, (uint16_t*)&x);
            return true;
        }
    }
    return false;
 8001a96:	2000      	movs	r0, #0
}
 8001a98:	b003      	add	sp, #12
 8001a9a:	bd30      	pop	{r4, r5, pc}
        if (tsDriver->DetectTouch(TS_I2C_ADDRESS))
 8001a9c:	691b      	ldr	r3, [r3, #16]
 8001a9e:	2070      	movs	r0, #112	; 0x70
 8001aa0:	9201      	str	r2, [sp, #4]
 8001aa2:	4798      	blx	r3
 8001aa4:	9901      	ldr	r1, [sp, #4]
 8001aa6:	2800      	cmp	r0, #0
 8001aa8:	d0f5      	beq.n	8001a96 <_ZN20STM32TouchController11sampleTouchERlS0_+0xa>
            tsDriver->GetXY(TS_I2C_ADDRESS, (uint16_t*)&y, (uint16_t*)&x);
 8001aaa:	682b      	ldr	r3, [r5, #0]
 8001aac:	2070      	movs	r0, #112	; 0x70
 8001aae:	4622      	mov	r2, r4
 8001ab0:	695b      	ldr	r3, [r3, #20]
 8001ab2:	4798      	blx	r3
 8001ab4:	2001      	movs	r0, #1
 8001ab6:	e7ef      	b.n	8001a98 <_ZN20STM32TouchController11sampleTouchERlS0_+0xc>
 8001ab8:	20000388 	.word	0x20000388

08001abc <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001abc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001abe:	2301      	movs	r3, #1
{
 8001ac0:	f88d 2017 	strb.w	r2, [sp, #23]
    status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001ac4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ac8:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8001acc:	f10d 0217 	add.w	r2, sp, #23
 8001ad0:	9200      	str	r2, [sp, #0]
 8001ad2:	460a      	mov	r2, r1
 8001ad4:	4601      	mov	r1, r0
 8001ad6:	4805      	ldr	r0, [pc, #20]	; (8001aec <TS_IO_Write+0x30>)
 8001ad8:	f004 f8f3 	bl	8005cc2 <HAL_I2C_Mem_Write>
    if (status != HAL_OK)
 8001adc:	b110      	cbz	r0, 8001ae4 <TS_IO_Write+0x28>
    HAL_I2C_DeInit(i2c_handler);
 8001ade:	4803      	ldr	r0, [pc, #12]	; (8001aec <TS_IO_Write+0x30>)
 8001ae0:	f004 f8d6 	bl	8005c90 <HAL_I2C_DeInit>
    I2Cx_WriteMultiple(&hi2c3, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&Value, 1);
}
 8001ae4:	b007      	add	sp, #28
 8001ae6:	f85d fb04 	ldr.w	pc, [sp], #4
 8001aea:	bf00      	nop
 8001aec:	200001bc 	.word	0x200001bc

08001af0 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001af0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    uint8_t read_value = 0;
 8001af2:	2300      	movs	r3, #0
{
 8001af4:	460a      	mov	r2, r1
    status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001af6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    uint8_t read_value = 0;
 8001afa:	f88d 3017 	strb.w	r3, [sp, #23]
    status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001afe:	2301      	movs	r3, #1
 8001b00:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8001b04:	f10d 0117 	add.w	r1, sp, #23
 8001b08:	9100      	str	r1, [sp, #0]
 8001b0a:	4601      	mov	r1, r0
 8001b0c:	4805      	ldr	r0, [pc, #20]	; (8001b24 <TS_IO_Read+0x34>)
 8001b0e:	f004 f98f 	bl	8005e30 <HAL_I2C_Mem_Read>
    if (status != HAL_OK)
 8001b12:	b110      	cbz	r0, 8001b1a <TS_IO_Read+0x2a>
    HAL_I2C_DeInit(i2c_handler);
 8001b14:	4803      	ldr	r0, [pc, #12]	; (8001b24 <TS_IO_Read+0x34>)
 8001b16:	f004 f8bb 	bl	8005c90 <HAL_I2C_DeInit>

    I2Cx_ReadMultiple(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);

    return read_value;
}
 8001b1a:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8001b1e:	b007      	add	sp, #28
 8001b20:	f85d fb04 	ldr.w	pc, [sp], #4
 8001b24:	200001bc 	.word	0x200001bc

08001b28 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
    switch (id)
 8001b28:	2803      	cmp	r0, #3
 8001b2a:	d823      	bhi.n	8001b74 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x4c>
 8001b2c:	e8df f000 	tbb	[pc, r0]
 8001b30:	1a130b02 	.word	0x1a130b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
 8001b34:	4b10      	ldr	r3, [pc, #64]	; (8001b78 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>)
 8001b36:	2110      	movs	r1, #16
 8001b38:	4810      	ldr	r0, [pc, #64]	; (8001b7c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	fab2 f282 	clz	r2, r2
 8001b40:	0952      	lsrs	r2, r2, #5
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 8001b42:	f003 beb5 	b.w	80058b0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 8001b46:	4b0c      	ldr	r3, [pc, #48]	; (8001b78 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>)
 8001b48:	2140      	movs	r1, #64	; 0x40
 8001b4a:	685a      	ldr	r2, [r3, #4]
 8001b4c:	fab2 f282 	clz	r2, r2
 8001b50:	0952      	lsrs	r2, r2, #5
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
 8001b52:	480b      	ldr	r0, [pc, #44]	; (8001b80 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x58>)
 8001b54:	e7f5      	b.n	8001b42 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x1a>
 8001b56:	4b08      	ldr	r3, [pc, #32]	; (8001b78 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>)
 8001b58:	2180      	movs	r1, #128	; 0x80
 8001b5a:	689a      	ldr	r2, [r3, #8]
 8001b5c:	fab2 f282 	clz	r2, r2
 8001b60:	0952      	lsrs	r2, r2, #5
 8001b62:	e7f6      	b.n	8001b52 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x2a>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 8001b64:	4b04      	ldr	r3, [pc, #16]	; (8001b78 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>)
 8001b66:	2140      	movs	r1, #64	; 0x40
 8001b68:	4806      	ldr	r0, [pc, #24]	; (8001b84 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x5c>)
 8001b6a:	68da      	ldr	r2, [r3, #12]
 8001b6c:	fab2 f282 	clz	r2, r2
 8001b70:	0952      	lsrs	r2, r2, #5
 8001b72:	e7e6      	b.n	8001b42 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x1a>
#endif
        break;
    }
}
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	2000038c 	.word	0x2000038c
 8001b7c:	40020400 	.word	0x40020400
 8001b80:	40020800 	.word	0x40020800
 8001b84:	40021800 	.word	0x40021800

08001b88 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:
/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
    switch (id)
 8001b88:	2803      	cmp	r0, #3
 8001b8a:	d823      	bhi.n	8001bd4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x4c>
 8001b8c:	e8df f000 	tbb	[pc, r0]
 8001b90:	1a130b02 	.word	0x1a130b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
 8001b94:	4b10      	ldr	r3, [pc, #64]	; (8001bd8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>)
 8001b96:	2110      	movs	r1, #16
 8001b98:	4810      	ldr	r0, [pc, #64]	; (8001bdc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	3a00      	subs	r2, #0
 8001b9e:	bf18      	it	ne
 8001ba0:	2201      	movne	r2, #1
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 8001ba2:	f003 be85 	b.w	80058b0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 8001ba6:	4b0c      	ldr	r3, [pc, #48]	; (8001bd8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>)
 8001ba8:	2140      	movs	r1, #64	; 0x40
 8001baa:	685a      	ldr	r2, [r3, #4]
 8001bac:	3a00      	subs	r2, #0
 8001bae:	bf18      	it	ne
 8001bb0:	2201      	movne	r2, #1
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
 8001bb2:	480b      	ldr	r0, [pc, #44]	; (8001be0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>)
 8001bb4:	e7f5      	b.n	8001ba2 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x1a>
 8001bb6:	4b08      	ldr	r3, [pc, #32]	; (8001bd8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>)
 8001bb8:	2180      	movs	r1, #128	; 0x80
 8001bba:	689a      	ldr	r2, [r3, #8]
 8001bbc:	3a00      	subs	r2, #0
 8001bbe:	bf18      	it	ne
 8001bc0:	2201      	movne	r2, #1
 8001bc2:	e7f6      	b.n	8001bb2 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x2a>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 8001bc4:	4b04      	ldr	r3, [pc, #16]	; (8001bd8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>)
 8001bc6:	2140      	movs	r1, #64	; 0x40
 8001bc8:	4806      	ldr	r0, [pc, #24]	; (8001be4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x5c>)
 8001bca:	68da      	ldr	r2, [r3, #12]
 8001bcc:	3a00      	subs	r2, #0
 8001bce:	bf18      	it	ne
 8001bd0:	2201      	movne	r2, #1
 8001bd2:	e7e6      	b.n	8001ba2 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x1a>
#endif
        break;
    }
}
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	2000038c 	.word	0x2000038c
 8001bdc:	40020400 	.word	0x40020400
 8001be0:	40020800 	.word	0x40020800
 8001be4:	40021800 	.word	0x40021800

08001be8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
    switch (id)
 8001be8:	2803      	cmp	r0, #3
 8001bea:	d80f      	bhi.n	8001c0c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x24>
 8001bec:	e8df f000 	tbb	[pc, r0]
 8001bf0:	0b090602 	.word	0x0b090602
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8001bf4:	2110      	movs	r1, #16
 8001bf6:	4806      	ldr	r0, [pc, #24]	; (8001c10 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x28>)
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001bf8:	f003 be5f 	b.w	80058ba <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001bfc:	2140      	movs	r1, #64	; 0x40
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8001bfe:	4805      	ldr	r0, [pc, #20]	; (8001c14 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2c>)
 8001c00:	e7fa      	b.n	8001bf8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x10>
 8001c02:	2180      	movs	r1, #128	; 0x80
 8001c04:	e7fb      	b.n	8001bfe <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x16>
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001c06:	2140      	movs	r1, #64	; 0x40
 8001c08:	4803      	ldr	r0, [pc, #12]	; (8001c18 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x30>)
 8001c0a:	e7f5      	b.n	8001bf8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x10>
#endif
        break;
    }
}
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	40020400 	.word	0x40020400
 8001c14:	40020800 	.word	0x40020800
 8001c18:	40021800 	.word	0x40021800

08001c1c <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
        displayOrientationChangeRequested = true;
 8001c1c:	2301      	movs	r3, #1
        requestedOrientation = orientation;
 8001c1e:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8001c22:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
    }
 8001c26:	4770      	bx	lr

08001c28 <_ZN8touchgfx3HAL9sampleKeyERh>:
     */
    virtual bool sampleKey(uint8_t& key)
    {
        (void)key; // Unused variable
        return false;
    }
 8001c28:	2000      	movs	r0, #0
 8001c2a:	4770      	bx	lr

08001c2c <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8001c2c:	6441      	str	r1, [r0, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8001c2e:	3900      	subs	r1, #0
 8001c30:	4b02      	ldr	r3, [pc, #8]	; (8001c3c <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x10>)
 8001c32:	bf18      	it	ne
 8001c34:	2101      	movne	r1, #1
 8001c36:	7019      	strb	r1, [r3, #0]
    }
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	200177c3 	.word	0x200177c3

08001c40 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
 8001c40:	2000      	movs	r0, #0
 8001c42:	4770      	bx	lr

08001c44 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
    {
        if (taskDelayFunc)
 8001c44:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001c46:	b10b      	cbz	r3, 8001c4c <_ZN8touchgfx3HAL9taskDelayEt+0x8>
        {
            taskDelayFunc(ms);
 8001c48:	4608      	mov	r0, r1
 8001c4a:	4718      	bx	r3
        }
    }
 8001c4c:	4770      	bx	lr

08001c4e <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
 8001c4e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001c52:	4770      	bx	lr

08001c54 <_ZN8touchgfx3HAL10getDMATypeEv>:
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
    {
        return dma.getDMAType();
 8001c54:	6840      	ldr	r0, [r0, #4]
 8001c56:	6803      	ldr	r3, [r0, #0]
 8001c58:	699b      	ldr	r3, [r3, #24]
 8001c5a:	4718      	bx	r3

08001c5c <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8001c5c:	4770      	bx	lr
	...

08001c60 <_ZN11TouchGFXHAL10initializeEv>:

LOCATION_PRAGMA("TouchGFX_Framebuffer")
uint32_t animationBuffer[(480 * 272 * 2 + 3) / 4] LOCATION_ATTRIBUTE("TouchGFX_Framebuffer");

void TouchGFXHAL::initialize()
{
 8001c60:	b538      	push	{r3, r4, r5, lr}
 8001c62:	4604      	mov	r4, r0
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8001c64:	f001 f884 	bl	8002d70 <_ZN20TouchGFXGeneratedHAL10initializeEv>
    setFrameBufferStartAddresses((void*)frameBuffer0, (void*)frameBuffer1, (void*)animationBuffer);  //enable the animation storage to allow slide animations
 8001c68:	6823      	ldr	r3, [r4, #0]
 8001c6a:	4620      	mov	r0, r4
 8001c6c:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 8001c70:	4b07      	ldr	r3, [pc, #28]	; (8001c90 <_ZN11TouchGFXHAL10initializeEv+0x30>)
 8001c72:	e9d4 120f 	ldrd	r1, r2, [r4, #60]	; 0x3c
 8001c76:	47a8      	blx	r5
        lockDMAToPorch = enableLock;
 8001c78:	2300      	movs	r3, #0
    lockDMAToFrontPorch(false);
    instrumentation.init();
 8001c7a:	4d06      	ldr	r5, [pc, #24]	; (8001c94 <_ZN11TouchGFXHAL10initializeEv+0x34>)
 8001c7c:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
 8001c80:	4628      	mov	r0, r5
 8001c82:	f7ff feb5 	bl	80019f0 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>
        updateMCULoad = enabled;
 8001c86:	2301      	movs	r3, #1
        mcuInstrumentation = mcuInstr;
 8001c88:	6125      	str	r5, [r4, #16]
        updateMCULoad = enabled;
 8001c8a:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
    setMCUInstrumentation(&instrumentation);
    enableMCULoadCalculation(true);
}
 8001c8e:	bd38      	pop	{r3, r4, r5, pc}
 8001c90:	c0000000 	.word	0xc0000000
 8001c94:	2000039c 	.word	0x2000039c

08001c98 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8001c98:	f001 b844 	b.w	8002d24 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>

08001c9c <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8001c9c:	f001 b848 	b.w	8002d30 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>

08001ca0 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8001ca0:	b570      	push	{r4, r5, r6, lr}
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8001ca2:	f001 f897 	bl	8002dd4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8001ca6:	4910      	ldr	r1, [pc, #64]	; (8001ce8 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x48>)
 8001ca8:	2300      	movs	r3, #0
 8001caa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001cae:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001cb2:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001cb6:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001cba:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001cbe:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8001cc2:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001cc4:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001cc8:	4602      	mov	r2, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001cca:	ea46 7582 	orr.w	r5, r6, r2, lsl #30
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001cce:	3a01      	subs	r2, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001cd0:	f8c1 5274 	str.w	r5, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 8001cd4:	d2f9      	bcs.n	8001cca <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x2a>
    } while(sets-- != 0U);
 8001cd6:	3b20      	subs	r3, #32
 8001cd8:	f113 0f20 	cmn.w	r3, #32
 8001cdc:	d1f2      	bne.n	8001cc4 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x24>
 8001cde:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001ce2:	f3bf 8f6f 	isb	sy
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache to make sure framebuffer is correct in RAM. That's done
    // using SCB_CleanInvalidateDCache().

    SCB_CleanInvalidateDCache();
}
 8001ce6:	bd70      	pop	{r4, r5, r6, pc}
 8001ce8:	e000ed00 	.word	0xe000ed00

08001cec <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 8001cec:	f001 b880 	b.w	8002df0 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>

08001cf0 <_ZN11TouchGFXHAL19configureInterruptsEv>:
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8001cf0:	f000 bff4 	b.w	8002cdc <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>

08001cf4 <_ZN11TouchGFXHAL16enableInterruptsEv>:
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8001cf4:	f001 b99a 	b.w	800302c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>

08001cf8 <_ZN11TouchGFXHAL17disableInterruptsEv>:
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8001cf8:	f001 b9a2 	b.w	8003040 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>

08001cfc <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8001cfc:	f000 bff8 	b.w	8002cf0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>

08001d00 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 8001d00:	b510      	push	{r4, lr}
 8001d02:	4604      	mov	r4, r0
        swapFrameBuffers();
 8001d04:	f016 fafc 	bl	8018300 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8001d08:	6823      	ldr	r3, [r4, #0]
 8001d0a:	4620      	mov	r0, r4
 8001d0c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
    }
 8001d10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        tick();
 8001d14:	4718      	bx	r3

08001d16 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
    {
        HAL::flushFrameBuffer();
 8001d16:	f015 bd4d 	b.w	80177b4 <_ZN8touchgfx3HAL16flushFrameBufferEv>

08001d1a <_ZN11TouchGFXHALD0Ev>:
 8001d1a:	b510      	push	{r4, lr}
 8001d1c:	4604      	mov	r4, r0
 8001d1e:	217c      	movs	r1, #124	; 0x7c
 8001d20:	f028 f9ba 	bl	802a098 <_ZdlPvj>
 8001d24:	4620      	mov	r0, r4
 8001d26:	bd10      	pop	{r4, pc}

08001d28 <_ZN8touchgfx3HAL11getBlitCapsEv>:
        if (useDMAAcceleration)
 8001d28:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
 8001d2c:	b11b      	cbz	r3, 8001d36 <_ZN8touchgfx3HAL11getBlitCapsEv+0xe>
            return dma.getBlitCaps();
 8001d2e:	6840      	ldr	r0, [r0, #4]
 8001d30:	6803      	ldr	r3, [r0, #0]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4718      	bx	r3
    }
 8001d36:	4618      	mov	r0, r3
 8001d38:	4770      	bx	lr
	...

08001d3c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8001d3c:	f890 1034 	ldrb.w	r1, [r0, #52]	; 0x34
        {
            if (DISPLAY_ROTATION == rotate0)
 8001d40:	4b0d      	ldr	r3, [pc, #52]	; (8001d78 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
    virtual void performDisplayOrientationChange()
 8001d42:	b510      	push	{r4, lr}
        if (requestedOrientation != nativeDisplayOrientation)
 8001d44:	f890 4074 	ldrb.w	r4, [r0, #116]	; 0x74
            if (DISPLAY_ROTATION == rotate0)
 8001d48:	781a      	ldrb	r2, [r3, #0]
        if (requestedOrientation != nativeDisplayOrientation)
 8001d4a:	428c      	cmp	r4, r1
 8001d4c:	d009      	beq.n	8001d62 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
            if (DISPLAY_ROTATION == rotate0)
 8001d4e:	b93a      	cbnz	r2, 8001d60 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 8001d50:	490a      	ldr	r1, [pc, #40]	; (8001d7c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001d52:	4a0b      	ldr	r2, [pc, #44]	; (8001d80 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
                const uint16_t tmp = DISPLAY_HEIGHT;
 8001d54:	8808      	ldrh	r0, [r1, #0]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001d56:	8814      	ldrh	r4, [r2, #0]
                DISPLAY_WIDTH = tmp;
 8001d58:	8010      	strh	r0, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 8001d5a:	2201      	movs	r2, #1
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001d5c:	800c      	strh	r4, [r1, #0]
        else if (DISPLAY_ROTATION != rotate0)
        {
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
 8001d5e:	701a      	strb	r2, [r3, #0]
        }
    }
 8001d60:	bd10      	pop	{r4, pc}
        else if (DISPLAY_ROTATION != rotate0)
 8001d62:	2a00      	cmp	r2, #0
 8001d64:	d0fc      	beq.n	8001d60 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001d66:	4a06      	ldr	r2, [pc, #24]	; (8001d80 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001d68:	4904      	ldr	r1, [pc, #16]	; (8001d7c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001d6a:	8814      	ldrh	r4, [r2, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001d6c:	8808      	ldrh	r0, [r1, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001d6e:	800c      	strh	r4, [r1, #0]
            DISPLAY_WIDTH = tmp;
 8001d70:	8010      	strh	r0, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8001d72:	2200      	movs	r2, #0
 8001d74:	e7f3      	b.n	8001d5e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x22>
 8001d76:	bf00      	nop
 8001d78:	200177bc 	.word	0x200177bc
 8001d7c:	200177ba 	.word	0x200177ba
 8001d80:	200177b8 	.word	0x200177b8

08001d84 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8001d84:	b570      	push	{r4, r5, r6, lr}
 8001d86:	460d      	mov	r5, r1
 8001d88:	4619      	mov	r1, r3
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8001d8a:	b935      	cbnz	r5, 8001d9a <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x16>
 8001d8c:	4b09      	ldr	r3, [pc, #36]	; (8001db4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x30>)
 8001d8e:	f240 21d2 	movw	r1, #722	; 0x2d2
 8001d92:	4a09      	ldr	r2, [pc, #36]	; (8001db8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x34>)
 8001d94:	4809      	ldr	r0, [pc, #36]	; (8001dbc <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x38>)
 8001d96:	f028 f9ad 	bl	802a0f4 <__assert_func>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8001d9a:	e9c0 520f 	strd	r5, r2, [r0, #60]	; 0x3c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8001d9e:	3a00      	subs	r2, #0
 8001da0:	4b07      	ldr	r3, [pc, #28]	; (8001dc0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x3c>)
 8001da2:	bf18      	it	ne
 8001da4:	2201      	movne	r2, #1
 8001da6:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 8001da8:	6803      	ldr	r3, [r0, #0]
    }
 8001daa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setAnimationStorage(animationStorage);
 8001dae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001db2:	4718      	bx	r3
 8001db4:	0802b740 	.word	0x0802b740
 8001db8:	0802b778 	.word	0x0802b778
 8001dbc:	0802b7c6 	.word	0x0802b7c6
 8001dc0:	200177c2 	.word	0x200177c2

08001dc4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8001dc4:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8001dc6:	4b09      	ldr	r3, [pc, #36]	; (8001dec <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
 8001dc8:	881b      	ldrh	r3, [r3, #0]
 8001dca:	428b      	cmp	r3, r1
 8001dcc:	d803      	bhi.n	8001dd6 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x12>
 8001dce:	4b08      	ldr	r3, [pc, #32]	; (8001df0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
 8001dd0:	881b      	ldrh	r3, [r3, #0]
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d905      	bls.n	8001de2 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1e>
 8001dd6:	4b07      	ldr	r3, [pc, #28]	; (8001df4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
 8001dd8:	219e      	movs	r1, #158	; 0x9e
 8001dda:	4a07      	ldr	r2, [pc, #28]	; (8001df8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
 8001ddc:	4807      	ldr	r0, [pc, #28]	; (8001dfc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
 8001dde:	f028 f989 	bl	802a0f4 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8001de2:	4b07      	ldr	r3, [pc, #28]	; (8001e00 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
 8001de4:	8019      	strh	r1, [r3, #0]
        FRAME_BUFFER_HEIGHT = height;
 8001de6:	4b07      	ldr	r3, [pc, #28]	; (8001e04 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
 8001de8:	801a      	strh	r2, [r3, #0]
    }
 8001dea:	bd08      	pop	{r3, pc}
 8001dec:	200177b8 	.word	0x200177b8
 8001df0:	200177ba 	.word	0x200177ba
 8001df4:	0802b80b 	.word	0x0802b80b
 8001df8:	0802b86e 	.word	0x0802b86e
 8001dfc:	0802b7c6 	.word	0x0802b7c6
 8001e00:	200177be 	.word	0x200177be
 8001e04:	200177c0 	.word	0x200177c0

08001e08 <IdleTaskHook>:
}

extern "C"
{
    portBASE_TYPE IdleTaskHook(void* p)
    {
 8001e08:	4601      	mov	r1, r0
 8001e0a:	b508      	push	{r3, lr}
        return instance;
 8001e0c:	4b03      	ldr	r3, [pc, #12]	; (8001e1c <IdleTaskHook+0x14>)
 8001e0e:	6818      	ldr	r0, [r3, #0]
        if ((int)p) //idle task sched out
 8001e10:	b101      	cbz	r1, 8001e14 <IdleTaskHook+0xc>
        {
            touchgfx::HAL::getInstance()->setMCUActive(true);
 8001e12:	2101      	movs	r1, #1
        }
        else //idle task sched in
        {
            touchgfx::HAL::getInstance()->setMCUActive(false);
 8001e14:	f016 fa8e 	bl	8018334 <_ZN8touchgfx3HAL12setMCUActiveEb>
        }
        return pdTRUE;
    }
 8001e18:	2001      	movs	r0, #1
 8001e1a:	bd08      	pop	{r3, pc}
 8001e1c:	200177c4 	.word	0x200177c4

08001e20 <_GLOBAL__sub_I_instrumentation>:
          cc_in(0)
 8001e20:	4b03      	ldr	r3, [pc, #12]	; (8001e30 <_GLOBAL__sub_I_instrumentation+0x10>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	605a      	str	r2, [r3, #4]
 8001e26:	609a      	str	r2, [r3, #8]
 8001e28:	4a02      	ldr	r2, [pc, #8]	; (8001e34 <_GLOBAL__sub_I_instrumentation+0x14>)
 8001e2a:	601a      	str	r2, [r3, #0]
}
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	2000039c 	.word	0x2000039c
 8001e34:	0802b708 	.word	0x0802b708

08001e38 <_ZN8touchgfx10OSWrappers10initializeEv>:
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8001e38:	2101      	movs	r1, #1
 8001e3a:	2200      	movs	r2, #0
{
 8001e3c:	b508      	push	{r3, lr}
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8001e3e:	4608      	mov	r0, r1
 8001e40:	f005 fede 	bl	8007c00 <osSemaphoreNew>
 8001e44:	4b0a      	ldr	r3, [pc, #40]	; (8001e70 <_ZN8touchgfx10OSWrappers10initializeEv+0x38>)
 8001e46:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8001e48:	b928      	cbnz	r0, 8001e56 <_ZN8touchgfx10OSWrappers10initializeEv+0x1e>
 8001e4a:	4b0a      	ldr	r3, [pc, #40]	; (8001e74 <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
 8001e4c:	2128      	movs	r1, #40	; 0x28
 8001e4e:	4a0a      	ldr	r2, [pc, #40]	; (8001e78 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8001e50:	480a      	ldr	r0, [pc, #40]	; (8001e7c <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 8001e52:	f028 f94f 	bl	802a0f4 <__assert_func>
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8001e56:	2200      	movs	r2, #0
 8001e58:	2104      	movs	r1, #4
 8001e5a:	2001      	movs	r0, #1
 8001e5c:	f005 ff96 	bl	8007d8c <osMessageQueueNew>
 8001e60:	4b07      	ldr	r3, [pc, #28]	; (8001e80 <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 8001e62:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8001e64:	b918      	cbnz	r0, 8001e6e <_ZN8touchgfx10OSWrappers10initializeEv+0x36>
 8001e66:	4b07      	ldr	r3, [pc, #28]	; (8001e84 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 8001e68:	212c      	movs	r1, #44	; 0x2c
 8001e6a:	4a03      	ldr	r2, [pc, #12]	; (8001e78 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8001e6c:	e7f0      	b.n	8001e50 <_ZN8touchgfx10OSWrappers10initializeEv+0x18>
}
 8001e6e:	bd08      	pop	{r3, pc}
 8001e70:	200003ac 	.word	0x200003ac
 8001e74:	0802b98c 	.word	0x0802b98c
 8001e78:	0802b9d5 	.word	0x0802b9d5
 8001e7c:	0802ba04 	.word	0x0802ba04
 8001e80:	200003a8 	.word	0x200003a8
 8001e84:	0802ba54 	.word	0x0802ba54

08001e88 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:
/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8001e88:	4b02      	ldr	r3, [pc, #8]	; (8001e94 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0xc>)
 8001e8a:	f04f 31ff 	mov.w	r1, #4294967295
 8001e8e:	6818      	ldr	r0, [r3, #0]
 8001e90:	f005 bf0c 	b.w	8007cac <osSemaphoreAcquire>
 8001e94:	200003ac 	.word	0x200003ac

08001e98 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
    osSemaphoreRelease(frame_buffer_sem);
 8001e98:	4b01      	ldr	r3, [pc, #4]	; (8001ea0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x8>)
 8001e9a:	6818      	ldr	r0, [r3, #0]
 8001e9c:	f005 bf40 	b.w	8007d20 <osSemaphoreRelease>
 8001ea0:	200003ac 	.word	0x200003ac

08001ea4 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8001ea4:	4b02      	ldr	r3, [pc, #8]	; (8001eb0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0xc>)
 8001ea6:	2100      	movs	r1, #0
 8001ea8:	6818      	ldr	r0, [r3, #0]
 8001eaa:	f005 beff 	b.w	8007cac <osSemaphoreAcquire>
 8001eae:	bf00      	nop
 8001eb0:	200003ac 	.word	0x200003ac

08001eb4 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 8001eb4:	f7ff bff0 	b.w	8001e98 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08001eb8 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8001eb8:	2300      	movs	r3, #0
 8001eba:	4803      	ldr	r0, [pc, #12]	; (8001ec8 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x10>)
 8001ebc:	4903      	ldr	r1, [pc, #12]	; (8001ecc <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	6800      	ldr	r0, [r0, #0]
 8001ec2:	f005 bfa9 	b.w	8007e18 <osMessageQueuePut>
 8001ec6:	bf00      	nop
 8001ec8:	200003a8 	.word	0x200003a8
 8001ecc:	20000004 	.word	0x20000004

08001ed0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8001ed0:	b513      	push	{r0, r1, r4, lr}
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	4c07      	ldr	r4, [pc, #28]	; (8001ef4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 8001ed6:	a901      	add	r1, sp, #4
 8001ed8:	461a      	mov	r2, r3
 8001eda:	6820      	ldr	r0, [r4, #0]
 8001edc:	f005 ffde 	bl	8007e9c <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8001ee0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	a901      	add	r1, sp, #4
 8001ee8:	6820      	ldr	r0, [r4, #0]
 8001eea:	f005 ffd7 	bl	8007e9c <osMessageQueueGet>
}
 8001eee:	b002      	add	sp, #8
 8001ef0:	bd10      	pop	{r4, pc}
 8001ef2:	bf00      	nop
 8001ef4:	200003a8 	.word	0x200003a8

08001ef8 <_ZN8touchgfx13DMA_Interface5flushEv>:
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
    {
        waitForFrameBufferSemaphore();
 8001ef8:	6803      	ldr	r3, [r0, #0]
 8001efa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001efc:	4718      	bx	r3

08001efe <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
 8001efe:	2001      	movs	r0, #1
 8001f00:	4770      	bx	lr

08001f02 <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
    {
        executeCompleted();
 8001f02:	6803      	ldr	r3, [r0, #0]
 8001f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f06:	4718      	bx	r3

08001f08 <_ZN8STM32DMA10initializeEv>:
}

void STM32DMA::initialize()
{
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001f08:	4b0d      	ldr	r3, [pc, #52]	; (8001f40 <_ZN8STM32DMA10initializeEv+0x38>)
{
 8001f0a:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001f0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f0e:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001f12:	631a      	str	r2, [r3, #48]	; 0x30
 8001f14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f16:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 8001f1a:	9201      	str	r2, [sp, #4]
 8001f1c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8001f1e:	691a      	ldr	r2, [r3, #16]
 8001f20:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001f24:	611a      	str	r2, [r3, #16]
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8001f26:	691a      	ldr	r2, [r3, #16]
 8001f28:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8001f2c:	611a      	str	r2, [r3, #16]

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8001f2e:	4b05      	ldr	r3, [pc, #20]	; (8001f44 <_ZN8STM32DMA10initializeEv+0x3c>)
 8001f30:	4a05      	ldr	r2, [pc, #20]	; (8001f48 <_ZN8STM32DMA10initializeEv+0x40>)
 8001f32:	611a      	str	r2, [r3, #16]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f34:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001f38:	4b04      	ldr	r3, [pc, #16]	; (8001f4c <_ZN8STM32DMA10initializeEv+0x44>)
 8001f3a:	609a      	str	r2, [r3, #8]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
}
 8001f3c:	b002      	add	sp, #8
 8001f3e:	4770      	bx	lr
 8001f40:	40023800 	.word	0x40023800
 8001f44:	2000017c 	.word	0x2000017c
 8001f48:	08001f91 	.word	0x08001f91
 8001f4c:	e000e100 	.word	0xe000e100

08001f50 <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
 8001f50:	f240 30ef 	movw	r0, #1007	; 0x3ef
 8001f54:	4770      	bx	lr
	...

08001f58 <_ZN8STM32DMAD1Ev>:
STM32DMA::~STM32DMA()
 8001f58:	4b05      	ldr	r3, [pc, #20]	; (8001f70 <_ZN8STM32DMAD1Ev+0x18>)
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f5a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001f5e:	6003      	str	r3, [r0, #0]
 8001f60:	4b04      	ldr	r3, [pc, #16]	; (8001f74 <_ZN8STM32DMAD1Ev+0x1c>)
 8001f62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8001f66:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001f6a:	f3bf 8f6f 	isb	sy
}
 8001f6e:	4770      	bx	lr
 8001f70:	0802bbf4 	.word	0x0802bbf4
 8001f74:	e000e100 	.word	0xe000e100

08001f78 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8001f78:	b510      	push	{r4, lr}
 8001f7a:	4604      	mov	r4, r0
}
 8001f7c:	f44f 615a 	mov.w	r1, #3488	; 0xda0
 8001f80:	f7ff ffea 	bl	8001f58 <_ZN8STM32DMAD1Ev>
 8001f84:	4620      	mov	r0, r4
 8001f86:	f028 f887 	bl	802a098 <_ZdlPvj>
 8001f8a:	4620      	mov	r0, r4
 8001f8c:	bd10      	pop	{r4, pc}
	...

08001f90 <DMA2D_XferCpltCallback>:
 8001f90:	4b02      	ldr	r3, [pc, #8]	; (8001f9c <DMA2D_XferCpltCallback+0xc>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	6858      	ldr	r0, [r3, #4]
        dma.signalDMAInterrupt();
 8001f96:	6803      	ldr	r3, [r0, #0]
 8001f98:	695b      	ldr	r3, [r3, #20]
 8001f9a:	4718      	bx	r3
 8001f9c:	200177c4 	.word	0x200177c4

08001fa0 <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
 8001fa0:	b570      	push	{r4, r5, r6, lr}
 8001fa2:	4604      	mov	r4, r0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8001fa4:	4b0a      	ldr	r3, [pc, #40]	; (8001fd0 <_ZN8STM32DMAC1Ev+0x30>)
 8001fa6:	300c      	adds	r0, #12
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8001fa8:	2600      	movs	r6, #0
 8001faa:	4625      	mov	r5, r4
 8001fac:	2260      	movs	r2, #96	; 0x60
 8001fae:	6060      	str	r0, [r4, #4]
 8001fb0:	7226      	strb	r6, [r4, #8]
 8001fb2:	7266      	strb	r6, [r4, #9]
 8001fb4:	f845 3b20 	str.w	r3, [r5], #32
 8001fb8:	4629      	mov	r1, r5
 8001fba:	f016 fb0f 	bl	80185dc <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8001fbe:	f504 635a 	add.w	r3, r4, #3488	; 0xda0
 */
struct colortype
{
    /** Default constructor. Creates a black (0) color. */
    colortype()
        : color(0)
 8001fc2:	60ee      	str	r6, [r5, #12]
 8001fc4:	3524      	adds	r5, #36	; 0x24
 8001fc6:	42ab      	cmp	r3, r5
 8001fc8:	d1fb      	bne.n	8001fc2 <_ZN8STM32DMAC1Ev+0x22>
}
 8001fca:	4620      	mov	r0, r4
 8001fcc:	bd70      	pop	{r4, r5, r6, pc}
 8001fce:	bf00      	nop
 8001fd0:	0802bbf4 	.word	0x0802bbf4

08001fd4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:
{
 8001fd4:	b508      	push	{r3, lr}
    switch (format)
 8001fd6:	290b      	cmp	r1, #11
 8001fd8:	d80b      	bhi.n	8001ff2 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1e>
 8001fda:	e8df f001 	tbb	[pc, r1]
 8001fde:	0612      	.short	0x0612
 8001fe0:	0a0a0a10 	.word	0x0a0a0a10
 8001fe4:	0808080a 	.word	0x0808080a
 8001fe8:	0808      	.short	0x0808
 8001fea:	2001      	movs	r0, #1
}
 8001fec:	bd08      	pop	{r3, pc}
        dma2dColorMode = DMA2D_INPUT_L8;
 8001fee:	2005      	movs	r0, #5
        break;
 8001ff0:	e7fc      	b.n	8001fec <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        assert(0 && "Unsupported Format!");
 8001ff2:	4b05      	ldr	r3, [pc, #20]	; (8002008 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x34>)
 8001ff4:	2166      	movs	r1, #102	; 0x66
 8001ff6:	4a05      	ldr	r2, [pc, #20]	; (800200c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x38>)
 8001ff8:	4805      	ldr	r0, [pc, #20]	; (8002010 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x3c>)
 8001ffa:	f028 f87b 	bl	802a0f4 <__assert_func>
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8001ffe:	2000      	movs	r0, #0
 8002000:	e7f4      	b.n	8001fec <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8002002:	2002      	movs	r0, #2
    return dma2dColorMode;
 8002004:	e7f2      	b.n	8001fec <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
 8002006:	bf00      	nop
 8002008:	0802ba96 	.word	0x0802ba96
 800200c:	0802bab1 	.word	0x0802bab1
 8002010:	0802bafb 	.word	0x0802bafb

08002014 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:
{
 8002014:	b508      	push	{r3, lr}
    switch (format)
 8002016:	290a      	cmp	r1, #10
 8002018:	d809      	bhi.n	800202e <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1a>
 800201a:	e8df f001 	tbb	[pc, r1]
 800201e:	0610      	.short	0x0610
 8002020:	0808080e 	.word	0x0808080e
 8002024:	06060608 	.word	0x06060608
 8002028:	06          	.byte	0x06
 8002029:	00          	.byte	0x00
 800202a:	2001      	movs	r0, #1
}
 800202c:	bd08      	pop	{r3, pc}
        assert(0 && "Unsupported Format!");
 800202e:	4b05      	ldr	r3, [pc, #20]	; (8002044 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x30>)
 8002030:	2187      	movs	r1, #135	; 0x87
 8002032:	4a05      	ldr	r2, [pc, #20]	; (8002048 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x34>)
 8002034:	4805      	ldr	r0, [pc, #20]	; (800204c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x38>)
 8002036:	f028 f85d 	bl	802a0f4 <__assert_func>
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 800203a:	2000      	movs	r0, #0
 800203c:	e7f6      	b.n	800202c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 800203e:	2002      	movs	r0, #2
    return dma2dColorMode;
 8002040:	e7f4      	b.n	800202c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
 8002042:	bf00      	nop
 8002044:	0802ba96 	.word	0x0802ba96
 8002048:	0802bb49 	.word	0x0802bb49
 800204c:	0802bafb 	.word	0x0802bafb

08002050 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 8002050:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8002054:	7f4f      	ldrb	r7, [r1, #29]
{
 8002056:	460c      	mov	r4, r1
 8002058:	4681      	mov	r9, r0
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 800205a:	4639      	mov	r1, r7
 800205c:	f7ff ffba 	bl	8001fd4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002060:	f894 801e 	ldrb.w	r8, [r4, #30]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8002064:	4605      	mov	r5, r0
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002066:	4648      	mov	r0, r9
 8002068:	4641      	mov	r1, r8
 800206a:	f7ff ffb3 	bl	8001fd4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 800206e:	4641      	mov	r1, r8
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002070:	4606      	mov	r6, r0
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002072:	4648      	mov	r0, r9
 8002074:	f7ff ffce 	bl	8002014 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002078:	8aa1      	ldrh	r1, [r4, #20]
 800207a:	8b62      	ldrh	r2, [r4, #26]
 800207c:	4b42      	ldr	r3, [pc, #264]	; (8002188 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 800207e:	1a52      	subs	r2, r2, r1
 8002080:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration */
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002082:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration */
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8002084:	8b22      	ldrh	r2, [r4, #24]
 8002086:	1a52      	subs	r2, r2, r1
 8002088:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 800208a:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 800208c:	6358      	str	r0, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 800208e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002092:	6920      	ldr	r0, [r4, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002094:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8002096:	6862      	ldr	r2, [r4, #4]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002098:	63d8      	str	r0, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 800209a:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 800209c:	6821      	ldr	r1, [r4, #0]
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800209e:	f894 c01c 	ldrb.w	ip, [r4, #28]
    switch (blitOp.operation)
 80020a2:	2980      	cmp	r1, #128	; 0x80
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80020a4:	ea4f 620c 	mov.w	r2, ip, lsl #24
    switch (blitOp.operation)
 80020a8:	d026      	beq.n	80020f8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa8>
 80020aa:	d810      	bhi.n	80020ce <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x7e>
 80020ac:	2920      	cmp	r1, #32
 80020ae:	ea45 0402 	orr.w	r4, r5, r2
 80020b2:	d062      	beq.n	800217a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12a>
 80020b4:	2940      	cmp	r1, #64	; 0x40
 80020b6:	d060      	beq.n	800217a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12a>
 80020b8:	2904      	cmp	r1, #4
 80020ba:	d05e      	beq.n	800217a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12a>
        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
        break;
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80020bc:	432a      	orrs	r2, r5
 80020be:	4b32      	ldr	r3, [pc, #200]	; (8002188 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 80020c0:	4547      	cmp	r7, r8
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80020c2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80020c6:	61da      	str	r2, [r3, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
 80020c8:	d05b      	beq.n	8002182 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x132>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 80020ca:	4a30      	ldr	r2, [pc, #192]	; (800218c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13c>)
 80020cc:	e040      	b.n	8002150 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
    switch (blitOp.operation)
 80020ce:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80020d2:	d007      	beq.n	80020e4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x94>
 80020d4:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80020d8:	d1f0      	bne.n	80020bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x6c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80020da:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80020de:	f042 0209 	orr.w	r2, r2, #9
 80020e2:	e003      	b.n	80020ec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x9c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80020e4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80020e8:	f042 020a 	orr.w	r2, r2, #10
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80020ec:	61da      	str	r2, [r3, #28]
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
    {
        return color;
 80020ee:	68e2      	ldr	r2, [r4, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 80020f0:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80020f2:	625e      	str	r6, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80020f4:	6158      	str	r0, [r3, #20]
 80020f6:	e02a      	b.n	800214e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfe>
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 80020f8:	68a4      	ldr	r4, [r4, #8]
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80020fa:	432a      	orrs	r2, r5
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 80020fc:	1d21      	adds	r1, r4, #4
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80020fe:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8002102:	62d9      	str	r1, [r3, #44]	; 0x2c
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002104:	61da      	str	r2, [r3, #28]
            switch ((Bitmap::ClutFormat)palette->format)
 8002106:	7822      	ldrb	r2, [r4, #0]
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002108:	625e      	str	r6, [r3, #36]	; 0x24
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800210a:	6158      	str	r0, [r3, #20]
            switch ((Bitmap::ClutFormat)palette->format)
 800210c:	b142      	cbz	r2, 8002120 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 800210e:	2a01      	cmp	r2, #1
 8002110:	d021      	beq.n	8002156 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
                assert(0 && "Unsupported format");
 8002112:	4b1f      	ldr	r3, [pc, #124]	; (8002190 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x140>)
 8002114:	f240 1111 	movw	r1, #273	; 0x111
 8002118:	4a1e      	ldr	r2, [pc, #120]	; (8002194 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 800211a:	481f      	ldr	r0, [pc, #124]	; (8002198 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>)
 800211c:	f027 ffea 	bl	802a0f4 <__assert_func>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002120:	69da      	ldr	r2, [r3, #28]
            bool blend = true;
 8002122:	2001      	movs	r0, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002124:	8861      	ldrh	r1, [r4, #2]
 8002126:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800212a:	3901      	subs	r1, #1
 800212c:	f022 0210 	bic.w	r2, r2, #16
 8002130:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002134:	61da      	str	r2, [r3, #28]
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8002136:	4b14      	ldr	r3, [pc, #80]	; (8002188 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 8002138:	69da      	ldr	r2, [r3, #28]
 800213a:	f042 0220 	orr.w	r2, r2, #32
 800213e:	61da      	str	r2, [r3, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8002140:	69da      	ldr	r2, [r3, #28]
 8002142:	0692      	lsls	r2, r2, #26
 8002144:	d4fc      	bmi.n	8002140 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf0>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8002146:	2210      	movs	r2, #16
 8002148:	609a      	str	r2, [r3, #8]
            if (blend)
 800214a:	2800      	cmp	r0, #0
 800214c:	d0bd      	beq.n	80020ca <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x7a>
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 800214e:	4a13      	ldr	r2, [pc, #76]	; (800219c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14c>)
        }
        else
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8002150:	601a      	str	r2, [r3, #0]
        }
        break;
    }
}
 8002152:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002156:	8862      	ldrh	r2, [r4, #2]
                if (blitOp.alpha == 255)
 8002158:	f1bc 00ff 	subs.w	r0, ip, #255	; 0xff
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 800215c:	69d9      	ldr	r1, [r3, #28]
 800215e:	f102 34ff 	add.w	r4, r2, #4294967295
                if (blitOp.alpha == 255)
 8002162:	bf18      	it	ne
 8002164:	2001      	movne	r0, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002166:	f421 427f 	bic.w	r2, r1, #65280	; 0xff00
 800216a:	f022 0210 	bic.w	r2, r2, #16
 800216e:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 8002172:	f042 0210 	orr.w	r2, r2, #16
 8002176:	61da      	str	r2, [r3, #28]
                break;
 8002178:	e7dd      	b.n	8002136 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe6>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800217a:	f444 3400 	orr.w	r4, r4, #131072	; 0x20000
 800217e:	61dc      	str	r4, [r3, #28]
 8002180:	e7b7      	b.n	80020f2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa2>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8002182:	f240 2201 	movw	r2, #513	; 0x201
 8002186:	e7e3      	b.n	8002150 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
 8002188:	4002b000 	.word	0x4002b000
 800218c:	00010201 	.word	0x00010201
 8002190:	0802bb94 	.word	0x0802bb94
 8002194:	0802bbae 	.word	0x0802bbae
 8002198:	0802bafb 	.word	0x0802bafb
 800219c:	00020201 	.word	0x00020201

080021a0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 80021a0:	b570      	push	{r4, r5, r6, lr}
 80021a2:	460c      	mov	r4, r1
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80021a4:	7f89      	ldrb	r1, [r1, #30]
 80021a6:	f7ff ff35 	bl	8002014 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 80021aa:	4b17      	ldr	r3, [pc, #92]	; (8002208 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x68>)

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80021ac:	8aa6      	ldrh	r6, [r4, #20]
 80021ae:	8ae1      	ldrh	r1, [r4, #22]

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80021b0:	8b62      	ldrh	r2, [r4, #26]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80021b2:	ea41 4106 	orr.w	r1, r1, r6, lsl #16
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80021b6:	6925      	ldr	r5, [r4, #16]
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80021b8:	1b92      	subs	r2, r2, r6
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 80021ba:	6358      	str	r0, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80021bc:	6459      	str	r1, [r3, #68]	; 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80021be:	63dd      	str	r5, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80021c0:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 80021c2:	6826      	ldr	r6, [r4, #0]
 80021c4:	68e1      	ldr	r1, [r4, #12]
 80021c6:	2e08      	cmp	r6, #8
 80021c8:	d10d      	bne.n	80021e6 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x46>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80021ca:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80021cc:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80021ce:	6258      	str	r0, [r3, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 80021d0:	4a0e      	ldr	r2, [pc, #56]	; (800220c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x6c>)
 80021d2:	7f20      	ldrb	r0, [r4, #28]
 80021d4:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 80021d8:	61da      	str	r2, [r3, #28]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 80021da:	4a0d      	ldr	r2, [pc, #52]	; (8002210 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x70>)
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 80021dc:	6219      	str	r1, [r3, #32]
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80021de:	615d      	str	r5, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80021e0:	60dd      	str	r5, [r3, #12]

        /* Set color */
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 80021e2:	601a      	str	r2, [r3, #0]
    }
}
 80021e4:	bd70      	pop	{r4, r5, r6, pc}
        WRITE_REG(DMA2D->FGOR, 0);
 80021e6:	2200      	movs	r2, #0
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 80021e8:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
 80021ea:	0948      	lsrs	r0, r1, #5
        WRITE_REG(DMA2D->FGOR, 0);
 80021ec:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
 80021ee:	0a0a      	lsrs	r2, r1, #8
 80021f0:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80021f4:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 80021f8:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 80021fc:	4302      	orrs	r2, r0
 80021fe:	430a      	orrs	r2, r1
 8002200:	639a      	str	r2, [r3, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8002202:	4a04      	ldr	r2, [pc, #16]	; (8002214 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x74>)
 8002204:	e7ed      	b.n	80021e2 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x42>
 8002206:	bf00      	nop
 8002208:	4002b000 	.word	0x4002b000
 800220c:	00010009 	.word	0x00010009
 8002210:	00020201 	.word	0x00020201
 8002214:	00030201 	.word	0x00030201

08002218 <_ZN8touchgfx5paint6rgb5658tearDownEv>:
* @brief Waits until previous DMA drawing operation has finished
*/
void tearDown()
{
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8002218:	4b03      	ldr	r3, [pc, #12]	; (8002228 <_ZN8touchgfx5paint6rgb5658tearDownEv+0x10>)
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	07d2      	lsls	r2, r2, #31
 800221e:	d4fc      	bmi.n	800221a <_ZN8touchgfx5paint6rgb5658tearDownEv+0x2>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002220:	2223      	movs	r2, #35	; 0x23
 8002222:	609a      	str	r2, [r3, #8]
}
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	4002b000 	.word	0x4002b000

0800222c <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm>:
*
* @brief Renders Canvas Widget chunks using DMA.
* This functions will not generate an interrupt, and will not affect the DMA queue.
*/
void lineFromColor(uint16_t* const ptr, const unsigned count, const uint32_t color, const uint8_t alpha, const uint32_t color565)
{
 800222c:	b530      	push	{r4, r5, lr}
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 800222e:	4c10      	ldr	r4, [pc, #64]	; (8002270 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x44>)
 8002230:	6825      	ldr	r5, [r4, #0]
 8002232:	07ed      	lsls	r5, r5, #31
 8002234:	d4fc      	bmi.n	8002230 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x4>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002236:	2523      	movs	r5, #35	; 0x23

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8002238:	0409      	lsls	r1, r1, #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));

    if (alpha < 0xFF)
 800223a:	2bff      	cmp	r3, #255	; 0xff
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800223c:	60a5      	str	r5, [r4, #8]
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 800223e:	f041 0101 	orr.w	r1, r1, #1
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);
 8002242:	f04f 0502 	mov.w	r5, #2
 8002246:	6365      	str	r5, [r4, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8002248:	6461      	str	r1, [r4, #68]	; 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 800224a:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (alpha < 0xFF)
 800224c:	d00a      	beq.n	8002264 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x38>
    {
        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB565 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, CM_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 800224e:	4909      	ldr	r1, [pc, #36]	; (8002274 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x48>)
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB565 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002250:	6265      	str	r5, [r4, #36]	; 0x24
        WRITE_REG(DMA2D->FGPFCCR, CM_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8002252:	ea41 6303 	orr.w	r3, r1, r3, lsl #24
 8002256:	61e3      	str	r3, [r4, #28]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_M2M_BLEND));
 8002258:	4b07      	ldr	r3, [pc, #28]	; (8002278 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x4c>)
        WRITE_REG(DMA2D->FGCOLR, color);
 800225a:	6222      	str	r2, [r4, #32]
        WRITE_REG(DMA2D->BGMAR, (uint32_t)ptr);
 800225c:	6160      	str	r0, [r4, #20]
        WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);
 800225e:	60e0      	str	r0, [r4, #12]

        /* Set color */
        WRITE_REG(DMA2D->OCOLR, color565);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 8002260:	6023      	str	r3, [r4, #0]
    }
}
 8002262:	bd30      	pop	{r4, r5, pc}
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_OUTPUT_RGB565 | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8002264:	61e5      	str	r5, [r4, #28]
        WRITE_REG(DMA2D->OCOLR, color565);
 8002266:	9b03      	ldr	r3, [sp, #12]
 8002268:	63a3      	str	r3, [r4, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 800226a:	4b04      	ldr	r3, [pc, #16]	; (800227c <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x50>)
 800226c:	e7f8      	b.n	8002260 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x34>
 800226e:	bf00      	nop
 8002270:	4002b000 	.word	0x4002b000
 8002274:	00010009 	.word	0x00010009
 8002278:	00020001 	.word	0x00020001
 800227c:	00030001 	.word	0x00030001

08002280 <_ZNK20SoftwareMJPEGDecoder21getCurrentFrameNumberEv>:
    virtual void gotoFrame(uint32_t frameno);

    virtual uint32_t getCurrentFrameNumber() const
    {
        return frameNumber;
    }
 8002280:	6940      	ldr	r0, [r0, #20]
 8002282:	4770      	bx	lr

08002284 <_ZN20SoftwareMJPEGDecoder12getLastErrorEv>:
    }

    AVIErrors getLastError()
    {
        return lastError;
    }
 8002284:	f890 0044 	ldrb.w	r0, [r0, #68]	; 0x44
 8002288:	4770      	bx	lr

0800228a <_ZN20SoftwareMJPEGDecoder8hasVideoEv>:
    readVideoHeader();
}

bool SoftwareMJPEGDecoder::hasVideo()
{
    return (reader != 0) || (movieData != 0);
 800228a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800228c:	b923      	cbnz	r3, 8002298 <_ZN20SoftwareMJPEGDecoder8hasVideoEv+0xe>
 800228e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8002290:	3800      	subs	r0, #0
 8002292:	bf18      	it	ne
 8002294:	2001      	movne	r0, #1
 8002296:	4770      	bx	lr
 8002298:	2001      	movs	r0, #1
}
 800229a:	4770      	bx	lr

0800229c <_ZN20SoftwareMJPEGDecoder17getNumberOfFramesEv>:
}

uint32_t SoftwareMJPEGDecoder::getNumberOfFrames()
{
    return videoInfo.number_of_frames;
}
 800229c:	6880      	ldr	r0, [r0, #8]
 800229e:	4770      	bx	lr

080022a0 <_ZN20SoftwareMJPEGDecoder12getVideoInfoEPN8touchgfx16VideoInformationE>:

void SoftwareMJPEGDecoder::getVideoInfo(touchgfx::VideoInformation* data)
{
    *data = videoInfo;
 80022a0:	3004      	adds	r0, #4
{
 80022a2:	b510      	push	{r4, lr}
 80022a4:	460c      	mov	r4, r1
    *data = videoInfo;
 80022a6:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 80022a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if VIDEO_DECODE_FORMAT == RGB565 || VIDEO_DECODE_FORMAT == RGB888
#else
    data->frame_width = 0;
    data->frame_height = 0;
#endif
}
 80022ac:	bd10      	pop	{r4, pc}

080022ae <_ZN20SoftwareMJPEGDecoderD1Ev>:
class SoftwareMJPEGDecoder : public MJPEGDecoder
 80022ae:	4770      	bx	lr

080022b0 <_ZN20SoftwareMJPEGDecoder15decodeThumbnailEmPhtt>:
{
 80022b0:	b508      	push	{r3, lr}
    assert(0);
 80022b2:	4a03      	ldr	r2, [pc, #12]	; (80022c0 <_ZN20SoftwareMJPEGDecoder15decodeThumbnailEmPhtt+0x10>)
 80022b4:	f240 11f9 	movw	r1, #505	; 0x1f9
 80022b8:	4b02      	ldr	r3, [pc, #8]	; (80022c4 <_ZN20SoftwareMJPEGDecoder15decodeThumbnailEmPhtt+0x14>)
 80022ba:	4803      	ldr	r0, [pc, #12]	; (80022c8 <_ZN20SoftwareMJPEGDecoder15decodeThumbnailEmPhtt+0x18>)
 80022bc:	f027 ff1a 	bl	802a0f4 <__assert_func>
 80022c0:	0802bc3c 	.word	0x0802bc3c
 80022c4:	0802d537 	.word	0x0802d537
 80022c8:	0802bc97 	.word	0x0802bc97

080022cc <_ZN20SoftwareMJPEGDecoderD0Ev>:
 80022cc:	b510      	push	{r4, lr}
 80022ce:	4604      	mov	r4, r0
 80022d0:	2148      	movs	r1, #72	; 0x48
 80022d2:	f027 fee1 	bl	802a098 <_ZdlPvj>
 80022d6:	4620      	mov	r0, r4
 80022d8:	bd10      	pop	{r4, pc}
	...

080022dc <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0>:
void SoftwareMJPEGDecoder::decodeMJPEGFrame(const uint8_t* const mjpgdata, const uint32_t length, uint8_t* outputBuffer, uint16_t bufferWidth, uint16_t bufferHeight, uint32_t bufferStride)
 80022dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80022e0:	461c      	mov	r4, r3
    if (outputBuffer && lineBuffer) //only decode if buffers are assigned.
 80022e2:	6b43      	ldr	r3, [r0, #52]	; 0x34
void SoftwareMJPEGDecoder::decodeMJPEGFrame(const uint8_t* const mjpgdata, const uint32_t length, uint8_t* outputBuffer, uint16_t bufferWidth, uint16_t bufferHeight, uint32_t bufferStride)
 80022e4:	f5ad 7d1f 	sub.w	sp, sp, #636	; 0x27c
 80022e8:	4605      	mov	r5, r0
 80022ea:	460e      	mov	r6, r1
 80022ec:	4617      	mov	r7, r2
    if (outputBuffer && lineBuffer) //only decode if buffers are assigned.
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d052      	beq.n	8002398 <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xbc>
        JSAMPROW lines[2] = { lineBuffer, 0 }; /* Output row buffer */
 80022f2:	2200      	movs	r2, #0
        cinfo.err = jpeg_std_error(&jerr);
 80022f4:	a803      	add	r0, sp, #12
                const uint16_t pix = ((RGB_matrix->R & 0xF8) << 8) | ((RGB_matrix->G & 0xFC) << 3) | ((RGB_matrix->B & 0xF8) >> 3);
 80022f6:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 80023a0 <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xc4>
        JSAMPROW lines[2] = { lineBuffer, 0 }; /* Output row buffer */
 80022fa:	e9cd 3201 	strd	r3, r2, [sp, #4]
        cinfo.err = jpeg_std_error(&jerr);
 80022fe:	f00d ff59 	bl	80101b4 <jpeg_std_error>
        jpeg_create_decompress(&cinfo);
 8002302:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8002306:	2150      	movs	r1, #80	; 0x50
        cinfo.err = jpeg_std_error(&jerr);
 8002308:	9024      	str	r0, [sp, #144]	; 0x90
        jpeg_create_decompress(&cinfo);
 800230a:	a824      	add	r0, sp, #144	; 0x90
 800230c:	f007 fe73 	bl	8009ff6 <jpeg_CreateDecompress>
        jpeg_mem_src(&cinfo, const_cast<uint8_t*>(mjpgdata), length);
 8002310:	463a      	mov	r2, r7
 8002312:	4631      	mov	r1, r6
 8002314:	a824      	add	r0, sp, #144	; 0x90
 8002316:	f008 fe07 	bl	800af28 <jpeg_mem_src>
        jpeg_read_header(&cinfo, TRUE);
 800231a:	2101      	movs	r1, #1
 800231c:	a824      	add	r0, sp, #144	; 0x90
 800231e:	f007 ff73 	bl	800a208 <jpeg_read_header>
        cinfo.dct_method = JDCT_FLOAT;
 8002322:	2302      	movs	r3, #2
        jpeg_start_decompress(&cinfo);
 8002324:	a824      	add	r0, sp, #144	; 0x90
        cinfo.dct_method = JDCT_FLOAT;
 8002326:	f88d 30d8 	strb.w	r3, [sp, #216]	; 0xd8
        jpeg_start_decompress(&cinfo);
 800232a:	f008 f811 	bl	800a350 <jpeg_start_decompress>
        const uint32_t width = MIN(bufferWidth, cinfo.image_width);
 800232e:	f8bd 6298 	ldrh.w	r6, [sp, #664]	; 0x298
 8002332:	9b2b      	ldr	r3, [sp, #172]	; 0xac
        const uint32_t height = MIN(bufferHeight, cinfo.output_height);
 8002334:	f8bd 729c 	ldrh.w	r7, [sp, #668]	; 0x29c
        const uint32_t width = MIN(bufferWidth, cinfo.image_width);
 8002338:	429e      	cmp	r6, r3
 800233a:	bf28      	it	cs
 800233c:	461e      	movcs	r6, r3
        const uint32_t height = MIN(bufferHeight, cinfo.output_height);
 800233e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8002340:	429f      	cmp	r7, r3
            JPEG_RGB* const RGB_end = RGB_matrix + width;
 8002342:	eb06 0846 	add.w	r8, r6, r6, lsl #1
        const uint32_t height = MIN(bufferHeight, cinfo.output_height);
 8002346:	bf28      	it	cs
 8002348:	461f      	movcs	r7, r3
            lineptr = (uint16_t*)((uint8_t*)lineptr + bufferStride - width * 2); //move to next line
 800234a:	9ba8      	ldr	r3, [sp, #672]	; 0x2a0
 800234c:	eba3 0646 	sub.w	r6, r3, r6, lsl #1
        while (cinfo.output_scanline < height)
 8002350:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8002352:	429f      	cmp	r7, r3
 8002354:	d91a      	bls.n	800238c <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xb0>
            (void)jpeg_read_scanlines(&cinfo, lines, 1);
 8002356:	2201      	movs	r2, #1
 8002358:	a901      	add	r1, sp, #4
 800235a:	a824      	add	r0, sp, #144	; 0x90
 800235c:	f008 f841 	bl	800a3e2 <jpeg_read_scanlines>
            JPEG_RGB* RGB_matrix = (JPEG_RGB*)lineBuffer;
 8002360:	6b6b      	ldr	r3, [r5, #52]	; 0x34
            JPEG_RGB* const RGB_end = RGB_matrix + width;
 8002362:	eb03 0008 	add.w	r0, r3, r8
            while (RGB_matrix < RGB_end)
 8002366:	4298      	cmp	r0, r3
 8002368:	d90e      	bls.n	8002388 <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xac>
                const uint16_t pix = ((RGB_matrix->R & 0xF8) << 8) | ((RGB_matrix->G & 0xFC) << 3) | ((RGB_matrix->B & 0xF8) >> 3);
 800236a:	7859      	ldrb	r1, [r3, #1]
 800236c:	789a      	ldrb	r2, [r3, #2]
 800236e:	00c9      	lsls	r1, r1, #3
 8002370:	ea09 2202 	and.w	r2, r9, r2, lsl #8
 8002374:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8002378:	430a      	orrs	r2, r1
 800237a:	f813 1b03 	ldrb.w	r1, [r3], #3
 800237e:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
                *lineptr++ = pix;
 8002382:	f824 2b02 	strh.w	r2, [r4], #2
            while (RGB_matrix < RGB_end)
 8002386:	e7ee      	b.n	8002366 <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x8a>
            lineptr = (uint16_t*)((uint8_t*)lineptr + bufferStride - width * 2); //move to next line
 8002388:	4434      	add	r4, r6
        while (cinfo.output_scanline < height)
 800238a:	e7e1      	b.n	8002350 <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x74>
        jpeg_finish_decompress(&cinfo);
 800238c:	a824      	add	r0, sp, #144	; 0x90
 800238e:	f007 ff5d 	bl	800a24c <jpeg_finish_decompress>
        jpeg_destroy_decompress(&cinfo);
 8002392:	a824      	add	r0, sp, #144	; 0x90
 8002394:	f007 fe7c 	bl	800a090 <jpeg_destroy_decompress>
}
 8002398:	f50d 7d1f 	add.w	sp, sp, #636	; 0x27c
 800239c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80023a0:	fffff800 	.word	0xfffff800

080023a4 <_ZN20SoftwareMJPEGDecoderC1EPh>:
      reader(0), lineBuffer(buffer), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 80023a4:	4a0a      	ldr	r2, [pc, #40]	; (80023d0 <_ZN20SoftwareMJPEGDecoderC1EPh+0x2c>)
 80023a6:	6002      	str	r2, [r0, #0]
 80023a8:	2200      	movs	r2, #0
 80023aa:	e9c0 2205 	strd	r2, r2, [r0, #20]
 80023ae:	e9c0 2207 	strd	r2, r2, [r0, #28]
 80023b2:	e9c0 2209 	strd	r2, r2, [r0, #36]	; 0x24
 80023b6:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 80023ba:	e9c0 120d 	strd	r1, r2, [r0, #52]	; 0x34
 80023be:	e9c0 220f 	strd	r2, r2, [r0, #60]	; 0x3c
 80023c2:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
    videoInfo.frame_width = 0;
 80023c6:	e9c0 2203 	strd	r2, r2, [r0, #12]
    videoInfo.number_of_frames = 0;
 80023ca:	e9c0 2201 	strd	r2, r2, [r0, #4]
}
 80023ce:	4770      	bx	lr
 80023d0:	0802bf78 	.word	0x0802bf78

080023d4 <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>:
{
 80023d4:	b420      	push	{r5}
 80023d6:	460d      	mov	r5, r1
 80023d8:	4611      	mov	r1, r2
 80023da:	461a      	mov	r2, r3
    if (reader != 0)
 80023dc:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80023de:	b13b      	cbz	r3, 80023f0 <_ZN20SoftwareMJPEGDecoder7compareEmPKcm+0x1c>
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
 80023e0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80023e2:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80023e4:	1aed      	subs	r5, r5, r3
        src = (const char*)movieData + offset;
 80023e6:	4428      	add	r0, r5
}
 80023e8:	f85d 5b04 	ldr.w	r5, [sp], #4
    return strncmp(src, str, num);
 80023ec:	f028 bb5c 	b.w	802aaa8 <strncmp>
        src = (const char*)movieData + offset;
 80023f0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80023f2:	e7f8      	b.n	80023e6 <_ZN20SoftwareMJPEGDecoder7compareEmPKcm+0x12>

080023f4 <_ZN20SoftwareMJPEGDecoder6getU32Em>:
    if (reader != 0)
 80023f4:	6b03      	ldr	r3, [r0, #48]	; 0x30
{
 80023f6:	b510      	push	{r4, lr}
    if (reader != 0)
 80023f8:	b173      	cbz	r3, 8002418 <_ZN20SoftwareMJPEGDecoder6getU32Em+0x24>
        const uint32_t index = offset - aviBufferStartOffset;
 80023fa:	6c03      	ldr	r3, [r0, #64]	; 0x40
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
 80023fc:	6b82      	ldr	r2, [r0, #56]	; 0x38
        const uint32_t index = offset - aviBufferStartOffset;
 80023fe:	1ac9      	subs	r1, r1, r3
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
 8002400:	1853      	adds	r3, r2, r1
 8002402:	5c52      	ldrb	r2, [r2, r1]
 8002404:	7898      	ldrb	r0, [r3, #2]
 8002406:	785c      	ldrb	r4, [r3, #1]
 8002408:	0400      	lsls	r0, r0, #16
 800240a:	78db      	ldrb	r3, [r3, #3]
 800240c:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
 8002410:	4310      	orrs	r0, r2
 8002412:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
}
 8002416:	bd10      	pop	{r4, pc}
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
 8002418:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800241a:	5858      	ldr	r0, [r3, r1]
 800241c:	e7fb      	b.n	8002416 <_ZN20SoftwareMJPEGDecoder6getU32Em+0x22>

0800241e <_ZN20SoftwareMJPEGDecoder6getU16Em>:
    if (reader != 0)
 800241e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002420:	b143      	cbz	r3, 8002434 <_ZN20SoftwareMJPEGDecoder6getU16Em+0x16>
        const uint32_t index = offset - aviBufferStartOffset;
 8002422:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002424:	1ac9      	subs	r1, r1, r3
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8);
 8002426:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002428:	185a      	adds	r2, r3, r1
 800242a:	5c58      	ldrb	r0, [r3, r1]
 800242c:	7852      	ldrb	r2, [r2, #1]
 800242e:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8002432:	4770      	bx	lr
        return d[0] | (d[1] << 8);
 8002434:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002436:	5a58      	ldrh	r0, [r3, r1]
}
 8002438:	4770      	bx	lr
	...

0800243c <_ZN20SoftwareMJPEGDecoder8readDataEmm>:
{
 800243c:	b570      	push	{r4, r5, r6, lr}
 800243e:	4604      	mov	r4, r0
    if (reader != 0)
 8002440:	6b00      	ldr	r0, [r0, #48]	; 0x30
{
 8002442:	460d      	mov	r5, r1
 8002444:	4616      	mov	r6, r2
    if (reader != 0)
 8002446:	b1d8      	cbz	r0, 8002480 <_ZN20SoftwareMJPEGDecoder8readDataEmm+0x44>
        if (length > aviBufferLength)
 8002448:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800244a:	4293      	cmp	r3, r2
 800244c:	d208      	bcs.n	8002460 <_ZN20SoftwareMJPEGDecoder8readDataEmm+0x24>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 800244e:	2309      	movs	r3, #9
            assert(!"Buffer to small");
 8002450:	4a0d      	ldr	r2, [pc, #52]	; (8002488 <_ZN20SoftwareMJPEGDecoder8readDataEmm+0x4c>)
 8002452:	2164      	movs	r1, #100	; 0x64
 8002454:	480d      	ldr	r0, [pc, #52]	; (800248c <_ZN20SoftwareMJPEGDecoder8readDataEmm+0x50>)
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 8002456:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            assert(!"Buffer to small");
 800245a:	4b0d      	ldr	r3, [pc, #52]	; (8002490 <_ZN20SoftwareMJPEGDecoder8readDataEmm+0x54>)
 800245c:	f027 fe4a 	bl	802a0f4 <__assert_func>
        reader->seek(offset);
 8002460:	6803      	ldr	r3, [r0, #0]
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
 8002466:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002468:	4632      	mov	r2, r6
 800246a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800246c:	6803      	ldr	r3, [r0, #0]
 800246e:	691b      	ldr	r3, [r3, #16]
 8002470:	4798      	blx	r3
 8002472:	b910      	cbnz	r0, 800247a <_ZN20SoftwareMJPEGDecoder8readDataEmm+0x3e>
            lastError = AVI_ERROR_EOF_REACHED;
 8002474:	230d      	movs	r3, #13
 8002476:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        return aviBuffer;
 800247a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        aviBufferStartOffset = offset;
 800247c:	6425      	str	r5, [r4, #64]	; 0x40
}
 800247e:	bd70      	pop	{r4, r5, r6, pc}
    return movieData + offset;
 8002480:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8002482:	4408      	add	r0, r1
 8002484:	e7fb      	b.n	800247e <_ZN20SoftwareMJPEGDecoder8readDataEmm+0x42>
 8002486:	bf00      	nop
 8002488:	0802bd04 	.word	0x0802bd04
 800248c:	0802bc97 	.word	0x0802bc97
 8002490:	0802bcf1 	.word	0x0802bcf1

08002494 <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv>:
{
 8002494:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    assert((frameNumber > 0) && "SoftwareMJPEGDecoder decoding without frame data!");
 8002498:	6943      	ldr	r3, [r0, #20]
{
 800249a:	4604      	mov	r4, r0
    assert((frameNumber > 0) && "SoftwareMJPEGDecoder decoding without frame data!");
 800249c:	b92b      	cbnz	r3, 80024aa <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x16>
 800249e:	4b23      	ldr	r3, [pc, #140]	; (800252c <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x98>)
 80024a0:	21a9      	movs	r1, #169	; 0xa9
 80024a2:	4a23      	ldr	r2, [pc, #140]	; (8002530 <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x9c>)
 80024a4:	4823      	ldr	r0, [pc, #140]	; (8002534 <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0xa0>)
 80024a6:	f027 fe25 	bl	802a0f4 <__assert_func>
    readData(currentMovieOffset, 8);
 80024aa:	2208      	movs	r2, #8
 80024ac:	6981      	ldr	r1, [r0, #24]
 80024ae:	f7ff ffc5 	bl	800243c <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 80024b2:	69a1      	ldr	r1, [r4, #24]
 80024b4:	4620      	mov	r0, r4
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 80024b6:	f243 0630 	movw	r6, #12336	; 0x3030
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 80024ba:	3104      	adds	r1, #4
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 80024bc:	f246 3764 	movw	r7, #25444	; 0x6364
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 80024c0:	f7ff ff98 	bl	80023f4 <_ZN20SoftwareMJPEGDecoder6getU32Em>
 80024c4:	4605      	mov	r5, r0
    while (currentMovieOffset + 8 + chunkSize < movieLength)
 80024c6:	69a1      	ldr	r1, [r4, #24]
 80024c8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80024ca:	440d      	add	r5, r1
 80024cc:	f105 0208 	add.w	r2, r5, #8
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d224      	bcs.n	800251e <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x8a>
        frameNumber++;
 80024d4:	6963      	ldr	r3, [r4, #20]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 80024d6:	3509      	adds	r5, #9
        readData(currentMovieOffset, 8);
 80024d8:	2208      	movs	r2, #8
 80024da:	4620      	mov	r0, r4
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 80024dc:	f025 0101 	bic.w	r1, r5, #1
        frameNumber++;
 80024e0:	3301      	adds	r3, #1
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 80024e2:	61a1      	str	r1, [r4, #24]
        frameNumber++;
 80024e4:	6163      	str	r3, [r4, #20]
        readData(currentMovieOffset, 8);
 80024e6:	f7ff ffa9 	bl	800243c <_ZN20SoftwareMJPEGDecoder8readDataEmm>
        uint32_t streamNo = getU16(currentMovieOffset);
 80024ea:	f8d4 8018 	ldr.w	r8, [r4, #24]
 80024ee:	4620      	mov	r0, r4
 80024f0:	4641      	mov	r1, r8
 80024f2:	f7ff ff94 	bl	800241e <_ZN20SoftwareMJPEGDecoder6getU16Em>
 80024f6:	4681      	mov	r9, r0
        chunkSize = getU32(currentMovieOffset + 4);
 80024f8:	f108 0104 	add.w	r1, r8, #4
 80024fc:	4620      	mov	r0, r4
 80024fe:	f7ff ff79 	bl	80023f4 <_ZN20SoftwareMJPEGDecoder6getU32Em>
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 8002502:	45b1      	cmp	r9, r6
        chunkSize = getU32(currentMovieOffset + 4);
 8002504:	4605      	mov	r5, r0
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 8002506:	d1de      	bne.n	80024c6 <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x32>
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 8002508:	f108 0102 	add.w	r1, r8, #2
 800250c:	4620      	mov	r0, r4
 800250e:	f7ff ff86 	bl	800241e <_ZN20SoftwareMJPEGDecoder6getU16Em>
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 8002512:	42b8      	cmp	r0, r7
 8002514:	d1d7      	bne.n	80024c6 <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x32>
 8002516:	2d00      	cmp	r5, #0
 8002518:	d0d5      	beq.n	80024c6 <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x32>
            return true;
 800251a:	2001      	movs	r0, #1
 800251c:	e004      	b.n	8002528 <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x94>
    frameNumber = 1;
 800251e:	2301      	movs	r3, #1
    return false;
 8002520:	2000      	movs	r0, #0
    frameNumber = 1;
 8002522:	6163      	str	r3, [r4, #20]
    currentMovieOffset = firstFrameOffset; //start over
 8002524:	6a23      	ldr	r3, [r4, #32]
 8002526:	61a3      	str	r3, [r4, #24]
}
 8002528:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800252c:	0802bd46 	.word	0x0802bd46
 8002530:	0802bd8f 	.word	0x0802bd8f
 8002534:	0802bc97 	.word	0x0802bc97

08002538 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm>:
{
 8002538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800253c:	4604      	mov	r4, r0
 800253e:	f5ad 7d1f 	sub.w	sp, sp, #636	; 0x27c
 8002542:	468a      	mov	sl, r1
 8002544:	4615      	mov	r5, r2
    readData(currentMovieOffset, 8);
 8002546:	6981      	ldr	r1, [r0, #24]
 8002548:	2208      	movs	r2, #8
{
 800254a:	4698      	mov	r8, r3
    readData(currentMovieOffset, 8);
 800254c:	f7ff ff76 	bl	800243c <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    const uint32_t length = getU32(currentMovieOffset + 4);
 8002550:	69a7      	ldr	r7, [r4, #24]
 8002552:	4620      	mov	r0, r4
 8002554:	1d39      	adds	r1, r7, #4
 8002556:	f7ff ff4d 	bl	80023f4 <_ZN20SoftwareMJPEGDecoder6getU32Em>
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 800255a:	f107 0108 	add.w	r1, r7, #8
 800255e:	4602      	mov	r2, r0
    const uint32_t length = getU32(currentMovieOffset + 4);
 8002560:	4606      	mov	r6, r0
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 8002562:	4620      	mov	r0, r4
 8002564:	f7ff ff6a 	bl	800243c <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    assert(lineBuffer && "LineBuffer must be assigned prior to decoding directly to framebuffer");
 8002568:	6b63      	ldr	r3, [r4, #52]	; 0x34
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 800256a:	4607      	mov	r7, r0
    assert(lineBuffer && "LineBuffer must be assigned prior to decoding directly to framebuffer");
 800256c:	b933      	cbnz	r3, 800257c <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x44>
 800256e:	4b3c      	ldr	r3, [pc, #240]	; (8002660 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x128>)
 8002570:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 8002574:	4a3b      	ldr	r2, [pc, #236]	; (8002664 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x12c>)
 8002576:	483c      	ldr	r0, [pc, #240]	; (8002668 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x130>)
 8002578:	f027 fdbc 	bl	802a0f4 <__assert_func>
    JSAMPROW lines[2] = { lineBuffer, 0 }; /* Output row buffer */
 800257c:	2200      	movs	r2, #0
    cinfo.err = jpeg_std_error(&jerr);
 800257e:	a803      	add	r0, sp, #12
    JSAMPROW lines[2] = { lineBuffer, 0 }; /* Output row buffer */
 8002580:	e9cd 3201 	strd	r3, r2, [sp, #4]
    cinfo.err = jpeg_std_error(&jerr);
 8002584:	f00d fe16 	bl	80101b4 <jpeg_std_error>
    jpeg_create_decompress(&cinfo);
 8002588:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800258c:	2150      	movs	r1, #80	; 0x50
    cinfo.err = jpeg_std_error(&jerr);
 800258e:	9024      	str	r0, [sp, #144]	; 0x90
    jpeg_create_decompress(&cinfo);
 8002590:	a824      	add	r0, sp, #144	; 0x90
 8002592:	f007 fd30 	bl	8009ff6 <jpeg_CreateDecompress>
    jpeg_mem_src(&cinfo, const_cast<uint8_t*>(mjpgdata), length);
 8002596:	4632      	mov	r2, r6
 8002598:	4639      	mov	r1, r7
 800259a:	a824      	add	r0, sp, #144	; 0x90
 800259c:	f008 fcc4 	bl	800af28 <jpeg_mem_src>
    jpeg_read_header(&cinfo, TRUE);
 80025a0:	2101      	movs	r1, #1
 80025a2:	a824      	add	r0, sp, #144	; 0x90
 80025a4:	f007 fe30 	bl	800a208 <jpeg_read_header>
    cinfo.dct_method = JDCT_FLOAT;
 80025a8:	2302      	movs	r3, #2
    jpeg_start_decompress(&cinfo);
 80025aa:	a824      	add	r0, sp, #144	; 0x90
    cinfo.dct_method = JDCT_FLOAT;
 80025ac:	f88d 30d8 	strb.w	r3, [sp, #216]	; 0xd8
    jpeg_start_decompress(&cinfo);
 80025b0:	f007 fece 	bl	800a350 <jpeg_start_decompress>
    const uint32_t startY = area.y;
 80025b4:	f9ba 6002 	ldrsh.w	r6, [sl, #2]
    while (cinfo.output_scanline < startY)
 80025b8:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80025ba:	42b3      	cmp	r3, r6
 80025bc:	d205      	bcs.n	80025ca <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x92>
        (void)jpeg_read_scanlines(&cinfo, lines, 1);
 80025be:	2201      	movs	r2, #1
 80025c0:	a901      	add	r1, sp, #4
 80025c2:	a824      	add	r0, sp, #144	; 0x90
 80025c4:	f007 ff0d 	bl	800a3e2 <jpeg_read_scanlines>
    while (cinfo.output_scanline < startY)
 80025c8:	e7f6      	b.n	80025b8 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x80>
    const uint32_t startX = area.x;
 80025ca:	f9ba 9000 	ldrsh.w	r9, [sl]
     *
     * @return x coordinate of the right edge (calculated as "x + width").
     */
    FORCE_INLINE_FUNCTION int16_t right() const
    {
        return x + width;
 80025ce:	ea4f 0848 	mov.w	r8, r8, lsl #1
 80025d2:	f8ba 7004 	ldrh.w	r7, [sl, #4]
 80025d6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    lineptr += framebuffer_width * startY;
 80025d8:	fb08 5506 	mla	r5, r8, r6, r5
 80025dc:	444f      	add	r7, r9
     *
     * @return y coordinate of the bottom edge (calculated as "y + height").
     */
    FORCE_INLINE_FUNCTION int16_t bottom() const
    {
        return y + height;
 80025de:	f8ba 6002 	ldrh.w	r6, [sl, #2]
            const uint16_t pix = ((RGB_matrix[counter].R & 0xF8) << 8) | ((RGB_matrix[counter].G & 0xFC) << 3) | ((RGB_matrix[counter].B & 0xF8) >> 3);
 80025e2:	f8df b088 	ldr.w	fp, [pc, #136]	; 800266c <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x134>
    const uint32_t endX = MIN((uint32_t)area.right(), cinfo.image_width);
 80025e6:	b23f      	sxth	r7, r7
 80025e8:	429f      	cmp	r7, r3
 80025ea:	bf28      	it	cs
 80025ec:	461f      	movcs	r7, r3
 80025ee:	f8ba 3006 	ldrh.w	r3, [sl, #6]
 80025f2:	eb09 0a49 	add.w	sl, r9, r9, lsl #1
 80025f6:	441e      	add	r6, r3
 80025f8:	9b41      	ldr	r3, [sp, #260]	; 0x104
    const uint32_t endY = MIN((uint32_t)area.bottom(), cinfo.output_height);
 80025fa:	b236      	sxth	r6, r6
 80025fc:	429e      	cmp	r6, r3
 80025fe:	bf28      	it	cs
 8002600:	461e      	movcs	r6, r3
    while (cinfo.output_scanline < endY)
 8002602:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8002604:	42b3      	cmp	r3, r6
 8002606:	d21f      	bcs.n	8002648 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x110>
        (void)jpeg_read_scanlines(&cinfo, lines, 1);
 8002608:	2201      	movs	r2, #1
 800260a:	a901      	add	r1, sp, #4
 800260c:	a824      	add	r0, sp, #144	; 0x90
 800260e:	f007 fee8 	bl	800a3e2 <jpeg_read_scanlines>
        for (uint32_t counter = startX; counter < endX; counter++)
 8002612:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8002614:	4649      	mov	r1, r9
 8002616:	4452      	add	r2, sl
 8002618:	42b9      	cmp	r1, r7
 800261a:	f102 0203 	add.w	r2, r2, #3
 800261e:	d211      	bcs.n	8002644 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x10c>
            const uint16_t pix = ((RGB_matrix[counter].R & 0xF8) << 8) | ((RGB_matrix[counter].G & 0xFC) << 3) | ((RGB_matrix[counter].B & 0xF8) >> 3);
 8002620:	f812 0c02 	ldrb.w	r0, [r2, #-2]
 8002624:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 8002628:	00c0      	lsls	r0, r0, #3
 800262a:	ea0b 2303 	and.w	r3, fp, r3, lsl #8
 800262e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8002632:	4303      	orrs	r3, r0
 8002634:	f812 0c03 	ldrb.w	r0, [r2, #-3]
 8002638:	ea43 03d0 	orr.w	r3, r3, r0, lsr #3
            *(lineptr + counter) = pix;
 800263c:	f825 3011 	strh.w	r3, [r5, r1, lsl #1]
        for (uint32_t counter = startX; counter < endX; counter++)
 8002640:	3101      	adds	r1, #1
 8002642:	e7e9      	b.n	8002618 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0xe0>
        lineptr += framebuffer_width; //move to next line
 8002644:	4445      	add	r5, r8
    while (cinfo.output_scanline < endY)
 8002646:	e7dc      	b.n	8002602 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0xca>
    jpeg_finish_decompress(&cinfo);
 8002648:	a824      	add	r0, sp, #144	; 0x90
 800264a:	f007 fdff 	bl	800a24c <jpeg_finish_decompress>
    jpeg_destroy_decompress(&cinfo);
 800264e:	a824      	add	r0, sp, #144	; 0x90
 8002650:	f007 fd1e 	bl	800a090 <jpeg_destroy_decompress>
}
 8002654:	2001      	movs	r0, #1
 8002656:	f50d 7d1f 	add.w	sp, sp, #636	; 0x27c
 800265a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800265e:	bf00      	nop
 8002660:	0802bdc2 	.word	0x0802bdc2
 8002664:	0802be18 	.word	0x0802be18
 8002668:	0802bc97 	.word	0x0802bc97
 800266c:	fffff800 	.word	0xfffff800

08002670 <_ZN20SoftwareMJPEGDecoder9gotoFrameEm>:
    if (frameNumber == 0)
 8002670:	2901      	cmp	r1, #1
    if (frameNumber > getNumberOfFrames())
 8002672:	6803      	ldr	r3, [r0, #0]
 8002674:	bf38      	it	cc
 8002676:	2101      	movcc	r1, #1
 8002678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
{
 800267a:	b570      	push	{r4, r5, r6, lr}
 800267c:	460d      	mov	r5, r1
 800267e:	4604      	mov	r4, r0
    if (frameNumber > getNumberOfFrames())
 8002680:	4798      	blx	r3
 8002682:	42a8      	cmp	r0, r5
 8002684:	d204      	bcs.n	8002690 <_ZN20SoftwareMJPEGDecoder9gotoFrameEm+0x20>
        frameNumber = getNumberOfFrames();
 8002686:	6823      	ldr	r3, [r4, #0]
 8002688:	4620      	mov	r0, r4
 800268a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800268c:	4798      	blx	r3
 800268e:	4605      	mov	r5, r0
    uint32_t offset = indexOffset + 8 + (frameNumber - 1) * 16;
 8002690:	1e6b      	subs	r3, r5, #1
 8002692:	69e6      	ldr	r6, [r4, #28]
    readData(offset, 16);
 8002694:	2210      	movs	r2, #16
 8002696:	4620      	mov	r0, r4
    uint32_t offset = indexOffset + 8 + (frameNumber - 1) * 16;
 8002698:	eb06 1603 	add.w	r6, r6, r3, lsl #4
    readData(offset, 16);
 800269c:	f106 0108 	add.w	r1, r6, #8
 80026a0:	f7ff fecc 	bl	800243c <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    currentMovieOffset = getU32(offset + 8) + firstFrameOffset - 4;
 80026a4:	f106 0110 	add.w	r1, r6, #16
 80026a8:	4620      	mov	r0, r4
 80026aa:	f7ff fea3 	bl	80023f4 <_ZN20SoftwareMJPEGDecoder6getU32Em>
 80026ae:	6a23      	ldr	r3, [r4, #32]
 80026b0:	3b04      	subs	r3, #4
 80026b2:	4403      	add	r3, r0
    this->frameNumber = frameNumber;
 80026b4:	e9c4 5305 	strd	r5, r3, [r4, #20]
}
 80026b8:	bd70      	pop	{r4, r5, r6, pc}
	...

080026bc <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv>:
{
 80026bc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    currentMovieOffset = 0;
 80026c0:	2100      	movs	r1, #0
{
 80026c2:	4604      	mov	r4, r0
    readData(0, 72);
 80026c4:	2248      	movs	r2, #72	; 0x48
    currentMovieOffset = 0;
 80026c6:	6181      	str	r1, [r0, #24]
    lastError = AVI_NO_ERROR;
 80026c8:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
    readData(0, 72);
 80026cc:	f7ff feb6 	bl	800243c <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    if (compare(currentMovieOffset, "RIFF", 4))
 80026d0:	69a7      	ldr	r7, [r4, #24]
 80026d2:	2304      	movs	r3, #4
 80026d4:	4a63      	ldr	r2, [pc, #396]	; (8002864 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1a8>)
 80026d6:	4639      	mov	r1, r7
 80026d8:	4620      	mov	r0, r4
 80026da:	f7ff fe7b 	bl	80023d4 <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>
 80026de:	b140      	cbz	r0, 80026f2 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x36>
        lastError = AVI_ERROR_NOT_RIFF;
 80026e0:	2303      	movs	r3, #3
        assert(!"RIFF header not found");
 80026e2:	4a61      	ldr	r2, [pc, #388]	; (8002868 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 80026e4:	21f1      	movs	r1, #241	; 0xf1
        lastError = AVI_ERROR_NOT_RIFF;
 80026e6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        assert(!"RIFF header not found");
 80026ea:	4b60      	ldr	r3, [pc, #384]	; (800286c <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1b0>)
        assert(!"AVI header not found");
 80026ec:	4860      	ldr	r0, [pc, #384]	; (8002870 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1b4>)
 80026ee:	f027 fd01 	bl	802a0f4 <__assert_func>
    currentMovieOffset += 8;
 80026f2:	f107 0108 	add.w	r1, r7, #8
    if (compare(currentMovieOffset, "AVI ", 4))
 80026f6:	2304      	movs	r3, #4
 80026f8:	4a5e      	ldr	r2, [pc, #376]	; (8002874 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1b8>)
 80026fa:	4620      	mov	r0, r4
    currentMovieOffset += 8;
 80026fc:	61a1      	str	r1, [r4, #24]
    if (compare(currentMovieOffset, "AVI ", 4))
 80026fe:	f7ff fe69 	bl	80023d4 <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>
 8002702:	b130      	cbz	r0, 8002712 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x56>
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 8002704:	2304      	movs	r3, #4
        assert(!"AVI header not found");
 8002706:	4a58      	ldr	r2, [pc, #352]	; (8002868 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 8002708:	21f9      	movs	r1, #249	; 0xf9
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 800270a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        assert(!"AVI header not found");
 800270e:	4b5a      	ldr	r3, [pc, #360]	; (8002878 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1bc>)
 8002710:	e7ec      	b.n	80026ec <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x30>
    currentMovieOffset += 4;
 8002712:	f107 010c 	add.w	r1, r7, #12
    if (compare(currentMovieOffset, "LIST", 4))
 8002716:	2304      	movs	r3, #4
 8002718:	4a58      	ldr	r2, [pc, #352]	; (800287c <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1c0>)
 800271a:	4620      	mov	r0, r4
    currentMovieOffset += 4;
 800271c:	61a1      	str	r1, [r4, #24]
    if (compare(currentMovieOffset, "LIST", 4))
 800271e:	f7ff fe59 	bl	80023d4 <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>
 8002722:	4606      	mov	r6, r0
 8002724:	b138      	cbz	r0, 8002736 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x7a>
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 8002726:	2305      	movs	r3, #5
        assert(!"AVI LIST not found");
 8002728:	4a4f      	ldr	r2, [pc, #316]	; (8002868 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 800272a:	f44f 7180 	mov.w	r1, #256	; 0x100
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 800272e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        assert(!"AVI LIST not found");
 8002732:	4b53      	ldr	r3, [pc, #332]	; (8002880 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1c4>)
 8002734:	e7da      	b.n	80026ec <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x30>
    const uint32_t aviListSize = getU32(currentMovieOffset + 4);
 8002736:	f107 0110 	add.w	r1, r7, #16
 800273a:	4620      	mov	r0, r4
 800273c:	f7ff fe5a 	bl	80023f4 <_ZN20SoftwareMJPEGDecoder6getU32Em>
    assert(aviListSize);
 8002740:	4605      	mov	r5, r0
 8002742:	b920      	cbnz	r0, 800274e <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x92>
 8002744:	4b4f      	ldr	r3, [pc, #316]	; (8002884 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1c8>)
 8002746:	f44f 7183 	mov.w	r1, #262	; 0x106
 800274a:	4a47      	ldr	r2, [pc, #284]	; (8002868 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 800274c:	e7ce      	b.n	80026ec <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x30>
    uint32_t offset = currentMovieOffset + 8;
 800274e:	f107 0814 	add.w	r8, r7, #20
    if (compare(offset, "hdrl", 4))
 8002752:	2304      	movs	r3, #4
 8002754:	4a4c      	ldr	r2, [pc, #304]	; (8002888 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1cc>)
 8002756:	4620      	mov	r0, r4
 8002758:	4641      	mov	r1, r8
 800275a:	f7ff fe3b 	bl	80023d4 <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>
 800275e:	2800      	cmp	r0, #0
 8002760:	d04b      	beq.n	80027fa <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x13e>
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
 8002762:	2306      	movs	r3, #6
 8002764:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    if (compare(offset, "avih", 4))
 8002768:	2304      	movs	r3, #4
 800276a:	4a48      	ldr	r2, [pc, #288]	; (800288c <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1d0>)
 800276c:	f107 0118 	add.w	r1, r7, #24
 8002770:	4620      	mov	r0, r4
 8002772:	f7ff fe2f 	bl	80023d4 <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>
 8002776:	2800      	cmp	r0, #0
 8002778:	d041      	beq.n	80027fe <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x142>
        lastError = AVI_ERROR_AVI_AVIH_NOT_FOUND;
 800277a:	2307      	movs	r3, #7
 800277c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    uint32_t listOffset = aviListOffset + aviListSize + 8;
 8002780:	4445      	add	r5, r8
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 8002782:	4f43      	ldr	r7, [pc, #268]	; (8002890 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1d4>)
    readData(listOffset, 12);
 8002784:	220c      	movs	r2, #12
 8002786:	4620      	mov	r0, r4
 8002788:	4629      	mov	r1, r5
 800278a:	f7ff fe57 	bl	800243c <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 800278e:	f105 0608 	add.w	r6, r5, #8
 8002792:	2304      	movs	r3, #4
 8002794:	463a      	mov	r2, r7
 8002796:	4620      	mov	r0, r4
 8002798:	4631      	mov	r1, r6
 800279a:	f7ff fe1b 	bl	80023d4 <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>
 800279e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80027a2:	2800      	cmp	r0, #0
 80027a4:	d04a      	beq.n	800283c <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x180>
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d14a      	bne.n	8002840 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x184>
 80027aa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        const uint32_t listSize = getU32(listOffset + 4) + 8;
 80027ac:	1d29      	adds	r1, r5, #4
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 80027ae:	42ab      	cmp	r3, r5
 80027b0:	d84a      	bhi.n	8002848 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x18c>
    currentMovieOffset = listOffset + 8 + 4; //skip LIST and 'movi'
 80027b2:	f105 030c 	add.w	r3, r5, #12
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 80027b6:	1d29      	adds	r1, r5, #4
 80027b8:	4620      	mov	r0, r4
    currentMovieOffset = listOffset + 8 + 4; //skip LIST and 'movi'
 80027ba:	61a3      	str	r3, [r4, #24]
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 80027bc:	9101      	str	r1, [sp, #4]
 80027be:	f7ff fe19 	bl	80023f4 <_ZN20SoftwareMJPEGDecoder6getU32Em>
 80027c2:	4430      	add	r0, r6
    const uint32_t listSize = getU32(listOffset + 4) + 8;
 80027c4:	9901      	ldr	r1, [sp, #4]
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 80027c6:	6260      	str	r0, [r4, #36]	; 0x24
    const uint32_t listSize = getU32(listOffset + 4) + 8;
 80027c8:	4620      	mov	r0, r4
 80027ca:	f7ff fe13 	bl	80023f4 <_ZN20SoftwareMJPEGDecoder6getU32Em>
    listOffset += listSize;
 80027ce:	4406      	add	r6, r0
    readData(listOffset, 4);
 80027d0:	2204      	movs	r2, #4
 80027d2:	4620      	mov	r0, r4
 80027d4:	4631      	mov	r1, r6
 80027d6:	f7ff fe31 	bl	800243c <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    if (!compare(listOffset, "idx1", 4))
 80027da:	2304      	movs	r3, #4
 80027dc:	4a2d      	ldr	r2, [pc, #180]	; (8002894 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1d8>)
 80027de:	4631      	mov	r1, r6
 80027e0:	4620      	mov	r0, r4
 80027e2:	f7ff fdf7 	bl	80023d4 <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>
 80027e6:	2800      	cmp	r0, #0
 80027e8:	d139      	bne.n	800285e <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1a2>
    frameNumber = 1; //next frame number is 1
 80027ea:	2301      	movs	r3, #1
        indexOffset = listOffset;
 80027ec:	61e6      	str	r6, [r4, #28]
    frameNumber = 1; //next frame number is 1
 80027ee:	6163      	str	r3, [r4, #20]
    firstFrameOffset = currentMovieOffset;
 80027f0:	69a3      	ldr	r3, [r4, #24]
 80027f2:	6223      	str	r3, [r4, #32]
}
 80027f4:	b002      	add	sp, #8
 80027f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bool foundFrame = true;
 80027fa:	2601      	movs	r6, #1
 80027fc:	e7b4      	b.n	8002768 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0xac>
    if (foundFrame)
 80027fe:	2e00      	cmp	r6, #0
 8002800:	d0be      	beq.n	8002780 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0xc4>
        videoInfo.ms_between_frames = getU32(offset) / 1000;
 8002802:	f107 0120 	add.w	r1, r7, #32
 8002806:	4620      	mov	r0, r4
 8002808:	f7ff fdf4 	bl	80023f4 <_ZN20SoftwareMJPEGDecoder6getU32Em>
 800280c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
        videoInfo.number_of_frames = getU32(offset + 16);
 8002810:	f107 0130 	add.w	r1, r7, #48	; 0x30
        videoInfo.ms_between_frames = getU32(offset) / 1000;
 8002814:	fbb0 f0f3 	udiv	r0, r0, r3
 8002818:	6060      	str	r0, [r4, #4]
        videoInfo.number_of_frames = getU32(offset + 16);
 800281a:	4620      	mov	r0, r4
 800281c:	f7ff fdea 	bl	80023f4 <_ZN20SoftwareMJPEGDecoder6getU32Em>
        videoInfo.frame_width = getU32(offset + 32);
 8002820:	f107 0140 	add.w	r1, r7, #64	; 0x40
        videoInfo.number_of_frames = getU32(offset + 16);
 8002824:	60a0      	str	r0, [r4, #8]
        videoInfo.frame_width = getU32(offset + 32);
 8002826:	4620      	mov	r0, r4
 8002828:	f7ff fde4 	bl	80023f4 <_ZN20SoftwareMJPEGDecoder6getU32Em>
        videoInfo.frame_height = getU32(offset + 36);
 800282c:	f107 0144 	add.w	r1, r7, #68	; 0x44
        videoInfo.frame_width = getU32(offset + 32);
 8002830:	60e0      	str	r0, [r4, #12]
        videoInfo.frame_height = getU32(offset + 36);
 8002832:	4620      	mov	r0, r4
 8002834:	f7ff fdde 	bl	80023f4 <_ZN20SoftwareMJPEGDecoder6getU32Em>
 8002838:	6120      	str	r0, [r4, #16]
 800283a:	e7a1      	b.n	8002780 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0xc4>
    if (lastError != AVI_NO_ERROR)
 800283c:	2b00      	cmp	r3, #0
 800283e:	d0b8      	beq.n	80027b2 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0xf6>
        lastError = AVI_ERROR_MOVI_NOT_FOUND;
 8002840:	230a      	movs	r3, #10
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 8002842:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        return;
 8002846:	e7d5      	b.n	80027f4 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x138>
        const uint32_t listSize = getU32(listOffset + 4) + 8;
 8002848:	4620      	mov	r0, r4
 800284a:	f7ff fdd3 	bl	80023f4 <_ZN20SoftwareMJPEGDecoder6getU32Em>
 800284e:	3008      	adds	r0, #8
        readData(listOffset, 12);
 8002850:	220c      	movs	r2, #12
        listOffset += listSize;
 8002852:	4405      	add	r5, r0
        readData(listOffset, 12);
 8002854:	4620      	mov	r0, r4
 8002856:	4629      	mov	r1, r5
 8002858:	f7ff fdf0 	bl	800243c <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 800285c:	e797      	b.n	800278e <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0xd2>
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 800285e:	230b      	movs	r3, #11
 8002860:	e7ef      	b.n	8002842 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x186>
 8002862:	bf00      	nop
 8002864:	0802be72 	.word	0x0802be72
 8002868:	0802be90 	.word	0x0802be90
 800286c:	0802be77 	.word	0x0802be77
 8002870:	0802bc97 	.word	0x0802bc97
 8002874:	0802bebd 	.word	0x0802bebd
 8002878:	0802bec2 	.word	0x0802bec2
 800287c:	0802beda 	.word	0x0802beda
 8002880:	0802bedf 	.word	0x0802bedf
 8002884:	0802bef5 	.word	0x0802bef5
 8002888:	0802bf01 	.word	0x0802bf01
 800288c:	0802bf06 	.word	0x0802bf06
 8002890:	0802bf0b 	.word	0x0802bf0b
 8002894:	0802bf10 	.word	0x0802bf10

08002898 <_ZN20SoftwareMJPEGDecoder12setVideoDataEPKhm>:
    movieLength = length;
 8002898:	e9c0 210a 	strd	r2, r1, [r0, #40]	; 0x28
    reader = 0; //not using reader
 800289c:	2200      	movs	r2, #0
 800289e:	6302      	str	r2, [r0, #48]	; 0x30
    readVideoHeader();
 80028a0:	f7ff bf0c 	b.w	80026bc <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv>

080028a4 <_ZN20SoftwareMJPEGDecoder12setVideoDataERN8touchgfx15VideoDataReaderE>:
{
 80028a4:	b510      	push	{r4, lr}
    movieData = 0;
 80028a6:	2300      	movs	r3, #0
{
 80028a8:	4604      	mov	r4, r0
 80028aa:	4608      	mov	r0, r1
    movieData = 0;
 80028ac:	62e3      	str	r3, [r4, #44]	; 0x2c
    movieLength = reader.getDataLength();
 80028ae:	680b      	ldr	r3, [r1, #0]
    this->reader = &reader;
 80028b0:	6321      	str	r1, [r4, #48]	; 0x30
    movieLength = reader.getDataLength();
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	4798      	blx	r3
 80028b6:	62a0      	str	r0, [r4, #40]	; 0x28
    readVideoHeader();
 80028b8:	4620      	mov	r0, r4
}
 80028ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    readVideoHeader();
 80028be:	f7ff befd 	b.w	80026bc <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv>

080028c2 <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>:
{
 80028c2:	b4f0      	push	{r4, r5, r6, r7}
 80028c4:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 80028c8:	f8bd 6014 	ldrh.w	r6, [sp, #20]
    if (length == 0)
 80028cc:	b12a      	cbz	r2, 80028da <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x18>
    if (outputBuffer && lineBuffer) //only decode if buffers are assigned.
 80028ce:	b123      	cbz	r3, 80028da <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x18>
 80028d0:	e9cd 5604 	strd	r5, r6, [sp, #16]
}
 80028d4:	bcf0      	pop	{r4, r5, r6, r7}
 80028d6:	f7ff bd01 	b.w	80022dc <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0>
 80028da:	bcf0      	pop	{r4, r5, r6, r7}
 80028dc:	4770      	bx	lr
	...

080028e0 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm>:
{
 80028e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80028e4:	4699      	mov	r9, r3
    assert((frameNumber > 0) && "SoftwareMJPEGDecoder decoding without frame data!");
 80028e6:	6943      	ldr	r3, [r0, #20]
{
 80028e8:	4604      	mov	r4, r0
 80028ea:	460f      	mov	r7, r1
 80028ec:	4690      	mov	r8, r2
    assert((frameNumber > 0) && "SoftwareMJPEGDecoder decoding without frame data!");
 80028ee:	b92b      	cbnz	r3, 80028fc <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0x1c>
 80028f0:	4b2a      	ldr	r3, [pc, #168]	; (800299c <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0xbc>)
 80028f2:	2176      	movs	r1, #118	; 0x76
 80028f4:	4a2a      	ldr	r2, [pc, #168]	; (80029a0 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0xc0>)
 80028f6:	482b      	ldr	r0, [pc, #172]	; (80029a4 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0xc4>)
 80028f8:	f027 fbfc 	bl	802a0f4 <__assert_func>
    readData(currentMovieOffset, 8);
 80028fc:	2208      	movs	r2, #8
 80028fe:	6981      	ldr	r1, [r0, #24]
 8002900:	f7ff fd9c 	bl	800243c <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    uint32_t streamNo = getU16(currentMovieOffset);
 8002904:	69a6      	ldr	r6, [r4, #24]
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8002906:	4620      	mov	r0, r4
 8002908:	f106 0a08 	add.w	sl, r6, #8
 800290c:	1d31      	adds	r1, r6, #4
 800290e:	f7ff fd71 	bl	80023f4 <_ZN20SoftwareMJPEGDecoder6getU32Em>
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 8002912:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002914:	eb00 020a 	add.w	r2, r0, sl
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8002918:	4605      	mov	r5, r0
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 800291a:	429a      	cmp	r2, r3
 800291c:	d231      	bcs.n	8002982 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0xa2>
    uint32_t streamNo = getU16(currentMovieOffset);
 800291e:	4631      	mov	r1, r6
 8002920:	4620      	mov	r0, r4
 8002922:	f7ff fd7c 	bl	800241e <_ZN20SoftwareMJPEGDecoder6getU16Em>
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 8002926:	f243 0330 	movw	r3, #12336	; 0x3030
 800292a:	4298      	cmp	r0, r3
 800292c:	d11d      	bne.n	800296a <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 800292e:	1cb1      	adds	r1, r6, #2
 8002930:	4620      	mov	r0, r4
 8002932:	f7ff fd74 	bl	800241e <_ZN20SoftwareMJPEGDecoder6getU16Em>
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 8002936:	f246 3364 	movw	r3, #25444	; 0x6364
 800293a:	4298      	cmp	r0, r3
 800293c:	d115      	bne.n	800296a <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
 800293e:	b1a5      	cbz	r5, 800296a <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 8002940:	462a      	mov	r2, r5
 8002942:	4651      	mov	r1, sl
 8002944:	4620      	mov	r0, r4
            currentMovieOffset += 8;
 8002946:	f8c4 a018 	str.w	sl, [r4, #24]
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 800294a:	f7ff fd77 	bl	800243c <_ZN20SoftwareMJPEGDecoder8readDataEmm>
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 800294e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 8002950:	4601      	mov	r1, r0
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 8002952:	462a      	mov	r2, r5
 8002954:	4620      	mov	r0, r4
 8002956:	f8cd 8000 	str.w	r8, [sp]
 800295a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800295e:	463b      	mov	r3, r7
 8002960:	f7ff ffaf 	bl	80028c2 <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>
            frameNumber++;
 8002964:	6963      	ldr	r3, [r4, #20]
 8002966:	3301      	adds	r3, #1
 8002968:	6163      	str	r3, [r4, #20]
        currentMovieOffset += chunkSize;
 800296a:	69a3      	ldr	r3, [r4, #24]
 800296c:	442b      	add	r3, r5
        if (chunkSize == 0) // Empty frame - Skip
 800296e:	b18d      	cbz	r5, 8002994 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0xb4>
            currentMovieOffset += 8;
 8002970:	61a3      	str	r3, [r4, #24]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 8002972:	69a3      	ldr	r3, [r4, #24]
        if (currentMovieOffset == lastFrameEnd)
 8002974:	6a62      	ldr	r2, [r4, #36]	; 0x24
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 8002976:	3301      	adds	r3, #1
 8002978:	f023 0301 	bic.w	r3, r3, #1
        if (currentMovieOffset == lastFrameEnd)
 800297c:	4293      	cmp	r3, r2
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 800297e:	61a3      	str	r3, [r4, #24]
        if (currentMovieOffset == lastFrameEnd)
 8002980:	d10a      	bne.n	8002998 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0xb8>
        frameNumber = 1;
 8002982:	2001      	movs	r0, #1
        currentMovieOffset = firstFrameOffset; //start over
 8002984:	6a23      	ldr	r3, [r4, #32]
        frameNumber = 1;
 8002986:	6160      	str	r0, [r4, #20]
        currentMovieOffset = firstFrameOffset; //start over
 8002988:	61a3      	str	r3, [r4, #24]
}
 800298a:	f080 0001 	eor.w	r0, r0, #1
 800298e:	b004      	add	sp, #16
 8002990:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            currentMovieOffset += 8;
 8002994:	3308      	adds	r3, #8
 8002996:	e7eb      	b.n	8002970 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0x90>
        isCurrentFrameLast = false;
 8002998:	2000      	movs	r0, #0
 800299a:	e7f6      	b.n	800298a <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0xaa>
 800299c:	0802bd46 	.word	0x0802bd46
 80029a0:	0802bf15 	.word	0x0802bf15
 80029a4:	0802bc97 	.word	0x0802bc97

080029a8 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
 80029a8:	2001      	movs	r0, #1
 80029aa:	4770      	bx	lr

080029ac <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
 80029ac:	200c      	movs	r0, #12
 80029ae:	4770      	bx	lr

080029b0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
 80029b0:	230c      	movs	r3, #12
 80029b2:	fb03 0001 	mla	r0, r3, r1, r0
    }
 80029b6:	3008      	adds	r0, #8
 80029b8:	4770      	bx	lr

080029ba <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
 80029ba:	230c      	movs	r3, #12
 80029bc:	fb03 0001 	mla	r0, r3, r1, r0
    }
 80029c0:	3008      	adds	r0, #8
 80029c2:	4770      	bx	lr

080029c4 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI14playscreenViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 80029c4:	2001      	movs	r0, #1
 80029c6:	4770      	bx	lr

080029c8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14playscreenViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 80029c8:	f642 0060 	movw	r0, #10336	; 0x2860
 80029cc:	4770      	bx	lr

080029ce <_ZN8touchgfx9PartitionINS_4meta8TypeListI14playscreenViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 80029ce:	f642 0360 	movw	r3, #10336	; 0x2860
 80029d2:	fb03 0001 	mla	r0, r3, r1, r0
    }
 80029d6:	3008      	adds	r0, #8
 80029d8:	4770      	bx	lr

080029da <_ZNK8touchgfx9PartitionINS_4meta8TypeListI14playscreenViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 80029da:	f642 0360 	movw	r3, #10336	; 0x2860
 80029de:	fb03 0001 	mla	r0, r3, r1, r0
    }
 80029e2:	3008      	adds	r0, #8
 80029e4:	4770      	bx	lr

080029e6 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI15resultPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 80029e6:	2001      	movs	r0, #1
 80029e8:	4770      	bx	lr

080029ea <_ZN8touchgfx9PartitionINS_4meta8TypeListI15resultPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 80029ea:	2010      	movs	r0, #16
 80029ec:	4770      	bx	lr

080029ee <_ZN8touchgfx9PartitionINS_4meta8TypeListI15resultPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 80029ee:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 80029f2:	3008      	adds	r0, #8
 80029f4:	4770      	bx	lr

080029f6 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI15resultPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 80029f6:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 80029fa:	3008      	adds	r0, #8
 80029fc:	4770      	bx	lr

080029fe <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
    {
        app.gotoruleScreenNoTransition();
 80029fe:	4608      	mov	r0, r1
 8002a00:	f000 beb4 	b.w	800376c <_ZN23FrontendApplicationBase26gotoruleScreenNoTransitionEv>

08002a04 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
 8002a04:	4b03      	ldr	r3, [pc, #12]	; (8002a14 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8002a06:	b510      	push	{r4, lr}
 8002a08:	4604      	mov	r4, r0
 8002a0a:	6003      	str	r3, [r0, #0]
 8002a0c:	f014 fc1e 	bl	801724c <_ZN8touchgfx17AbstractPartitionD1Ev>
 8002a10:	4620      	mov	r0, r4
 8002a12:	bd10      	pop	{r4, pc}
 8002a14:	0802c020 	.word	0x0802c020

08002a18 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8002a18:	b510      	push	{r4, lr}
 8002a1a:	4604      	mov	r4, r0
 8002a1c:	f7ff fff2 	bl	8002a04 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002a20:	2114      	movs	r1, #20
 8002a22:	4620      	mov	r0, r4
 8002a24:	f027 fb38 	bl	802a098 <_ZdlPvj>
 8002a28:	4620      	mov	r0, r4
 8002a2a:	bd10      	pop	{r4, pc}

08002a2c <_ZN8touchgfx9PartitionINS_4meta8TypeListI14playscreenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8002a2c:	4b03      	ldr	r3, [pc, #12]	; (8002a3c <_ZN8touchgfx9PartitionINS_4meta8TypeListI14playscreenViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8002a2e:	b510      	push	{r4, lr}
 8002a30:	4604      	mov	r4, r0
 8002a32:	6003      	str	r3, [r0, #0]
 8002a34:	f014 fc0a 	bl	801724c <_ZN8touchgfx17AbstractPartitionD1Ev>
 8002a38:	4620      	mov	r0, r4
 8002a3a:	bd10      	pop	{r4, pc}
 8002a3c:	0802bfec 	.word	0x0802bfec

08002a40 <_ZN8touchgfx9PartitionINS_4meta8TypeListI14playscreenViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8002a40:	b510      	push	{r4, lr}
 8002a42:	4604      	mov	r4, r0
 8002a44:	f7ff fff2 	bl	8002a2c <_ZN8touchgfx9PartitionINS_4meta8TypeListI14playscreenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002a48:	f642 0168 	movw	r1, #10344	; 0x2868
 8002a4c:	4620      	mov	r0, r4
 8002a4e:	f027 fb23 	bl	802a098 <_ZdlPvj>
 8002a52:	4620      	mov	r0, r4
 8002a54:	bd10      	pop	{r4, pc}
	...

08002a58 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15resultPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8002a58:	4b03      	ldr	r3, [pc, #12]	; (8002a68 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15resultPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8002a5a:	b510      	push	{r4, lr}
 8002a5c:	4604      	mov	r4, r0
 8002a5e:	6003      	str	r3, [r0, #0]
 8002a60:	f014 fbf4 	bl	801724c <_ZN8touchgfx17AbstractPartitionD1Ev>
 8002a64:	4620      	mov	r0, r4
 8002a66:	bd10      	pop	{r4, pc}
 8002a68:	0802bfb8 	.word	0x0802bfb8

08002a6c <_ZN8touchgfx9PartitionINS_4meta8TypeListI15resultPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8002a6c:	b510      	push	{r4, lr}
 8002a6e:	4604      	mov	r4, r0
 8002a70:	f7ff fff2 	bl	8002a58 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15resultPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002a74:	2118      	movs	r1, #24
 8002a76:	4620      	mov	r0, r4
 8002a78:	f027 fb0e 	bl	802a098 <_ZdlPvj>
 8002a7c:	4620      	mov	r0, r4
 8002a7e:	bd10      	pop	{r4, pc}

08002a80 <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 8002a80:	4b09      	ldr	r3, [pc, #36]	; (8002aa8 <_ZN12FrontendHeapD1Ev+0x28>)
 8002a82:	b510      	push	{r4, lr}
 8002a84:	4604      	mov	r4, r0
 8002a86:	6003      	str	r3, [r0, #0]
 8002a88:	f500 5022 	add.w	r0, r0, #10368	; 0x2880
 8002a8c:	3014      	adds	r0, #20
 8002a8e:	f7ff ffb9 	bl	8002a04 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002a92:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8002a96:	f7ff ffc9 	bl	8002a2c <_ZN8touchgfx9PartitionINS_4meta8TypeListI14playscreenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002a9a:	f104 0014 	add.w	r0, r4, #20
 8002a9e:	f7ff ffdb 	bl	8002a58 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15resultPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002aa2:	4620      	mov	r0, r4
 8002aa4:	bd10      	pop	{r4, pc}
 8002aa6:	bf00      	nop
 8002aa8:	0802c054 	.word	0x0802c054

08002aac <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8002aac:	b508      	push	{r3, lr}
 8002aae:	4802      	ldr	r0, [pc, #8]	; (8002ab8 <__tcf_0+0xc>)
 8002ab0:	f7ff ffe6 	bl	8002a80 <_ZN12FrontendHeapD1Ev>
 8002ab4:	bd08      	pop	{r3, pc}
 8002ab6:	bf00      	nop
 8002ab8:	200003b4 	.word	0x200003b4

08002abc <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
 8002abc:	b510      	push	{r4, lr}
 8002abe:	4604      	mov	r4, r0
 8002ac0:	f7ff ffde 	bl	8002a80 <_ZN12FrontendHeapD1Ev>
 8002ac4:	f642 2104 	movw	r1, #10756	; 0x2a04
 8002ac8:	4620      	mov	r0, r4
 8002aca:	f027 fae5 	bl	802a098 <_ZdlPvj>
 8002ace:	4620      	mov	r0, r4
 8002ad0:	bd10      	pop	{r4, pc}
	...

08002ad4 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 8002ad4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8002ad8:	f000 fc38 	bl	800334c <_ZN14BitmapDatabase11getInstanceEv>
 8002adc:	2400      	movs	r4, #0
 8002ade:	4605      	mov	r5, r0
 8002ae0:	f000 fc38 	bl	8003354 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8002ae4:	4623      	mov	r3, r4
 8002ae6:	4601      	mov	r1, r0
 8002ae8:	4622      	mov	r2, r4
 8002aea:	4628      	mov	r0, r5
 8002aec:	9400      	str	r4, [sp, #0]
 8002aee:	f01b f8ef 	bl	801dcd0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
 8002af2:	4b26      	ldr	r3, [pc, #152]	; (8002b8c <touchgfx_init+0xb8>)
 8002af4:	4a26      	ldr	r2, [pc, #152]	; (8002b90 <touchgfx_init+0xbc>)
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
 8002af6:	4620      	mov	r0, r4
        static FrontendHeap instance;
 8002af8:	4d26      	ldr	r5, [pc, #152]	; (8002b94 <touchgfx_init+0xc0>)
 8002afa:	601a      	str	r2, [r3, #0]
 8002afc:	f000 ffc4 	bl	8003a88 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 8002b00:	4825      	ldr	r0, [pc, #148]	; (8002b98 <touchgfx_init+0xc4>)
 8002b02:	f01b f84d 	bl	801dba0 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
 8002b06:	782b      	ldrb	r3, [r5, #0]
 8002b08:	f3bf 8f5b 	dmb	ish
 8002b0c:	07db      	lsls	r3, r3, #31
 8002b0e:	d437      	bmi.n	8002b80 <touchgfx_init+0xac>
 8002b10:	4628      	mov	r0, r5
 8002b12:	f027 fac3 	bl	802a09c <__cxa_guard_acquire>
 8002b16:	b398      	cbz	r0, 8002b80 <touchgfx_init+0xac>
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 8002b18:	4c20      	ldr	r4, [pc, #128]	; (8002b9c <touchgfx_init+0xc8>)
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
 8002b1a:	4b21      	ldr	r3, [pc, #132]	; (8002ba0 <touchgfx_init+0xcc>)
 8002b1c:	f104 0014 	add.w	r0, r4, #20
 8002b20:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 8002b24:	6023      	str	r3, [r4, #0]
 8002b26:	f500 5722 	add.w	r7, r0, #10368	; 0x2880
 8002b2a:	6060      	str	r0, [r4, #4]
 8002b2c:	f8c4 8008 	str.w	r8, [r4, #8]
 8002b30:	f107 0618 	add.w	r6, r7, #24
 8002b34:	60e7      	str	r7, [r4, #12]
 8002b36:	6126      	str	r6, [r4, #16]
 8002b38:	f014 fb8a 	bl	8017250 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002b3c:	4b19      	ldr	r3, [pc, #100]	; (8002ba4 <touchgfx_init+0xd0>)
 8002b3e:	4640      	mov	r0, r8
 8002b40:	6163      	str	r3, [r4, #20]
 8002b42:	f014 fb85 	bl	8017250 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002b46:	4b18      	ldr	r3, [pc, #96]	; (8002ba8 <touchgfx_init+0xd4>)
 8002b48:	4638      	mov	r0, r7
 8002b4a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002b4c:	f014 fb80 	bl	8017250 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002b50:	f504 5300 	add.w	r3, r4, #8192	; 0x2000
 8002b54:	4a15      	ldr	r2, [pc, #84]	; (8002bac <touchgfx_init+0xd8>)
 8002b56:	f603 00a8 	addw	r0, r3, #2216	; 0x8a8
 8002b5a:	f8c3 2894 	str.w	r2, [r3, #2196]	; 0x894
 8002b5e:	f001 ff7f 	bl	8004a60 <_ZN5ModelC1Ev>
 8002b62:	4622      	mov	r2, r4
 8002b64:	f107 0114 	add.w	r1, r7, #20
 8002b68:	4630      	mov	r0, r6
 8002b6a:	f001 ff6f 	bl	8004a4c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 8002b6e:	4630      	mov	r0, r6
 8002b70:	f000 fdfc 	bl	800376c <_ZN23FrontendApplicationBase26gotoruleScreenNoTransitionEv>
        static FrontendHeap instance;
 8002b74:	480e      	ldr	r0, [pc, #56]	; (8002bb0 <touchgfx_init+0xdc>)
 8002b76:	f027 fadb 	bl	802a130 <atexit>
 8002b7a:	4628      	mov	r0, r5
 8002b7c:	f027 fa9a 	bl	802a0b4 <__cxa_guard_release>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 8002b80:	480c      	ldr	r0, [pc, #48]	; (8002bb4 <touchgfx_init+0xe0>)
}
 8002b82:	b002      	add	sp, #8
 8002b84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
 8002b88:	f7ff b86a 	b.w	8001c60 <_ZN11TouchGFXHAL10initializeEv>
 8002b8c:	20017828 	.word	0x20017828
 8002b90:	20003bd8 	.word	0x20003bd8
 8002b94:	200003b0 	.word	0x200003b0
 8002b98:	20000008 	.word	0x20000008
 8002b9c:	200003b4 	.word	0x200003b4
 8002ba0:	0802c054 	.word	0x0802c054
 8002ba4:	0802bfb8 	.word	0x0802bfb8
 8002ba8:	0802bfec 	.word	0x0802bfec
 8002bac:	0802c020 	.word	0x0802c020
 8002bb0:	08002aad 	.word	0x08002aad
 8002bb4:	20003b5c 	.word	0x20003b5c

08002bb8 <touchgfx_taskEntry>:
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 8002bb8:	4801      	ldr	r0, [pc, #4]	; (8002bc0 <touchgfx_taskEntry+0x8>)
 8002bba:	f014 be62 	b.w	8017882 <_ZN8touchgfx3HAL9taskEntryEv>
 8002bbe:	bf00      	nop
 8002bc0:	20003b5c 	.word	0x20003b5c

08002bc4 <_GLOBAL__sub_I_touchgfx_init>:
}
 8002bc4:	b570      	push	{r4, r5, r6, lr}
static STM32DMA dma;
 8002bc6:	4e23      	ldr	r6, [pc, #140]	; (8002c54 <_GLOBAL__sub_I_touchgfx_init+0x90>)
{
public:

    STM32TouchController() {}
 8002bc8:	4b23      	ldr	r3, [pc, #140]	; (8002c58 <_GLOBAL__sub_I_touchgfx_init+0x94>)
 8002bca:	4c24      	ldr	r4, [pc, #144]	; (8002c5c <_GLOBAL__sub_I_touchgfx_init+0x98>)
 8002bcc:	4630      	mov	r0, r6
static LCD16bpp display;
 8002bce:	4d24      	ldr	r5, [pc, #144]	; (8002c60 <_GLOBAL__sub_I_touchgfx_init+0x9c>)
 8002bd0:	6023      	str	r3, [r4, #0]
static STM32DMA dma;
 8002bd2:	f7ff f9e5 	bl	8001fa0 <_ZN8STM32DMAC1Ev>
static LCD16bpp display;
 8002bd6:	4628      	mov	r0, r5
 8002bd8:	f01e f986 	bl	8020ee8 <_ZN8touchgfx8LCD16bppC1Ev>
          lastRenderMethod(HARDWARE)
 8002bdc:	4b21      	ldr	r3, [pc, #132]	; (8002c64 <_GLOBAL__sub_I_touchgfx_init+0xa0>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	f44f 7180 	mov.w	r1, #256	; 0x100
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8002be4:	4820      	ldr	r0, [pc, #128]	; (8002c68 <_GLOBAL__sub_I_touchgfx_init+0xa4>)
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
 8002be6:	861a      	strh	r2, [r3, #48]	; 0x30
          lastRenderMethod(HARDWARE)
 8002be8:	661a      	str	r2, [r3, #96]	; 0x60
 8002bea:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8002bee:	671a      	str	r2, [r3, #112]	; 0x70
 8002bf0:	60dc      	str	r4, [r3, #12]
 8002bf2:	e9c3 1212 	strd	r1, r2, [r3, #72]	; 0x48
 8002bf6:	491d      	ldr	r1, [pc, #116]	; (8002c6c <_GLOBAL__sub_I_touchgfx_init+0xa8>)
 8002bf8:	e9c3 1219 	strd	r1, r2, [r3, #100]	; 0x64
 8002bfc:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8002c00:	6759      	str	r1, [r3, #116]	; 0x74
 8002c02:	2101      	movs	r1, #1
 8002c04:	f883 1078 	strb.w	r1, [r3, #120]	; 0x78
        instance = this;
 8002c08:	4919      	ldr	r1, [pc, #100]	; (8002c70 <_GLOBAL__sub_I_touchgfx_init+0xac>)
 8002c0a:	600b      	str	r3, [r1, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8002c0c:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8002c10:	8001      	strh	r1, [r0, #0]
 8002c12:	4818      	ldr	r0, [pc, #96]	; (8002c74 <_GLOBAL__sub_I_touchgfx_init+0xb0>)
 8002c14:	8001      	strh	r1, [r0, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8002c16:	f44f 7188 	mov.w	r1, #272	; 0x110
 8002c1a:	4817      	ldr	r0, [pc, #92]	; (8002c78 <_GLOBAL__sub_I_touchgfx_init+0xb4>)
          lastRenderMethod(HARDWARE)
 8002c1c:	e9c3 2204 	strd	r2, r2, [r3, #16]
 8002c20:	e9c3 2206 	strd	r2, r2, [r3, #24]
 8002c24:	e9c3 2208 	strd	r2, r2, [r3, #32]
 8002c28:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
 8002c2c:	e9c3 220e 	strd	r2, r2, [r3, #56]	; 0x38
 8002c30:	e9c3 2210 	strd	r2, r2, [r3, #64]	; 0x40
        : x(0), y(0), width(0), height(0)
 8002c34:	e9c3 2214 	strd	r2, r2, [r3, #80]	; 0x50
 8002c38:	e9c3 2216 	strd	r2, r2, [r3, #88]	; 0x58
 8002c3c:	e9c3 6501 	strd	r6, r5, [r3, #4]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8002c40:	8001      	strh	r1, [r0, #0]
 8002c42:	480e      	ldr	r0, [pc, #56]	; (8002c7c <_GLOBAL__sub_I_touchgfx_init+0xb8>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8002c44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8002c48:	8001      	strh	r1, [r0, #0]
        DISPLAY_ROTATION = rotate0;
 8002c4a:	490d      	ldr	r1, [pc, #52]	; (8002c80 <_GLOBAL__sub_I_touchgfx_init+0xbc>)
 8002c4c:	700a      	strb	r2, [r1, #0]
     * @param [in,out] display Reference to LCD interface.
     * @param [in,out] tc      Reference to Touch Controller driver.
     * @param width            Width of the display.
     * @param height           Height of the display.
     */
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8002c4e:	4a0d      	ldr	r2, [pc, #52]	; (8002c84 <_GLOBAL__sub_I_touchgfx_init+0xc0>)
 8002c50:	601a      	str	r2, [r3, #0]
}
 8002c52:	bd70      	pop	{r4, r5, r6, pc}
 8002c54:	20002dbc 	.word	0x20002dbc
 8002c58:	0802b730 	.word	0x0802b730
 8002c5c:	20002db8 	.word	0x20002db8
 8002c60:	20003bdc 	.word	0x20003bdc
 8002c64:	20003b5c 	.word	0x20003b5c
 8002c68:	200177b8 	.word	0x200177b8
 8002c6c:	01000001 	.word	0x01000001
 8002c70:	200177c4 	.word	0x200177c4
 8002c74:	200177be 	.word	0x200177be
 8002c78:	200177ba 	.word	0x200177ba
 8002c7c:	200177c0 	.word	0x200177c0
 8002c80:	200177bc 	.word	0x200177bc
 8002c84:	0802b8bc 	.word	0x0802b8bc

08002c88 <_GLOBAL__sub_D_touchgfx_init>:
static STM32DMA dma;
 8002c88:	4801      	ldr	r0, [pc, #4]	; (8002c90 <_GLOBAL__sub_D_touchgfx_init+0x8>)
 8002c8a:	f7ff b965 	b.w	8001f58 <_ZN8STM32DMAD1Ev>
 8002c8e:	bf00      	nop
 8002c90:	20002dbc 	.word	0x20002dbc

08002c94 <SCB_CleanInvalidateDCache>:
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8002c94:	4910      	ldr	r1, [pc, #64]	; (8002cd8 <SCB_CleanInvalidateDCache+0x44>)
 8002c96:	2300      	movs	r3, #0
{
 8002c98:	b570      	push	{r4, r5, r6, lr}
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8002c9a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8002c9e:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8002ca2:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002ca6:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002caa:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8002cae:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8002cb2:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002cb4:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002cb8:	4602      	mov	r2, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002cba:	ea46 7582 	orr.w	r5, r6, r2, lsl #30
      } while (ways-- != 0U);
 8002cbe:	3a01      	subs	r2, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002cc0:	f8c1 5274 	str.w	r5, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 8002cc4:	d2f9      	bcs.n	8002cba <SCB_CleanInvalidateDCache+0x26>
    } while(sets-- != 0U);
 8002cc6:	3b20      	subs	r3, #32
 8002cc8:	f113 0f20 	cmn.w	r3, #32
 8002ccc:	d1f2      	bne.n	8002cb4 <SCB_CleanInvalidateDCache+0x20>
 8002cce:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002cd2:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 8002cd6:	bd70      	pop	{r4, r5, r6, pc}
 8002cd8:	e000ed00 	.word	0xe000ed00

08002cdc <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cdc:	4b03      	ldr	r3, [pc, #12]	; (8002cec <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0x10>)
 8002cde:	2290      	movs	r2, #144	; 0x90
 8002ce0:	f883 235a 	strb.w	r2, [r3, #858]	; 0x35a
 8002ce4:	f883 2358 	strb.w	r2, [r3, #856]	; 0x358

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
    NVIC_SetPriority(LTDC_IRQn, 9);
}
 8002ce8:	4770      	bx	lr
 8002cea:	bf00      	nop
 8002cec:	e000e100 	.word	0xe000e100

08002cf0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:
    NVIC_DisableIRQ(LTDC_IRQn);
}

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8002cf0:	4a09      	ldr	r2, [pc, #36]	; (8002d18 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x28>)
 8002cf2:	490a      	ldr	r1, [pc, #40]	; (8002d1c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x2c>)
 8002cf4:	68d3      	ldr	r3, [r2, #12]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8002cf6:	480a      	ldr	r0, [pc, #40]	; (8002d20 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x30>)
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8002cf8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002cfc:	3b01      	subs	r3, #1
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	800b      	strh	r3, [r1, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8002d02:	6911      	ldr	r1, [r2, #16]
 8002d04:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8002d08:	3901      	subs	r1, #1
 8002d0a:	8001      	strh	r1, [r0, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8002d0c:	6413      	str	r3, [r2, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8002d0e:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8002d10:	f043 0301 	orr.w	r3, r3, #1
 8002d14:	6353      	str	r3, [r2, #52]	; 0x34
}
 8002d16:	4770      	bx	lr
 8002d18:	40016800 	.word	0x40016800
 8002d1c:	20003c58 	.word	0x20003c58
 8002d20:	20003c56 	.word	0x20003c56

08002d24 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:
    videoController.endFrame();
}

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8002d24:	4b01      	ldr	r3, [pc, #4]	; (8002d2c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x8>)
 8002d26:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
}
 8002d2a:	4770      	bx	lr
 8002d2c:	40016800 	.word	0x40016800

08002d30 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8002d30:	4b02      	ldr	r3, [pc, #8]	; (8002d3c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0xc>)

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8002d32:	2201      	movs	r2, #1
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8002d34:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8002d38:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002d3a:	4770      	bx	lr
 8002d3c:	40016800 	.word	0x40016800

08002d40 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:
{
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8002d40:	4b03      	ldr	r3, [pc, #12]	; (8002d50 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x10>)
 8002d42:	695b      	ldr	r3, [r3, #20]
 8002d44:	03db      	lsls	r3, r3, #15
 8002d46:	d501      	bpl.n	8002d4c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xc>
    {
        SCB_CleanInvalidateDCache();
 8002d48:	f7ff bfa4 	b.w	8002c94 <SCB_CleanInvalidateDCache>
    }
}
 8002d4c:	4770      	bx	lr
 8002d4e:	bf00      	nop
 8002d50:	e000ed00 	.word	0xe000ed00

08002d54 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EED1Ev>:
#define SEM_TYPE osSemaphoreId_t
#define SEM_WAIT(s) osSemaphoreAcquire(s, osWaitForever)
#endif

template <uint32_t no_streams, uint32_t width, uint32_t height, uint32_t stride, touchgfx::Bitmap::BitmapFormat output_format>
class DoubleBufferedVideoController : public touchgfx::VideoController
 8002d54:	4770      	bx	lr

08002d56 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21unregisterVideoWidgetEm>:
    void unregisterVideoWidget(const Handle handle)
    {
        // Running in UI thread

        // Reset active for this handle
        streams[handle].isActive = false;
 8002d56:	2338      	movs	r3, #56	; 0x38
 8002d58:	fb01 3103 	mla	r1, r1, r3, r3
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	5443      	strb	r3, [r0, r1]
        bool oneIsActive = false;
        for (uint32_t i = 0; i < no_streams; i++)
        {
            oneIsActive |= streams[i].isActive;
        }
        if (oneIsActive == false)
 8002d60:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002d64:	b90b      	cbnz	r3, 8002d6a <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21unregisterVideoWidgetEm+0x14>
        {
            // Reset memory usage
            topBufferRGB = bufferRGB;
 8002d66:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002d68:	6483      	str	r3, [r0, #72]	; 0x48
        }
    }
 8002d6a:	4770      	bx	lr

08002d6c <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE>:
    void draw(const Handle handle, const touchgfx::Rect& invalidatedArea, const touchgfx::VideoWidget& widget)
    {
        // Running in UI thread

        // Nothing in this decoder
    }
 8002d6c:	4770      	bx	lr
	...

08002d70 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
 8002d70:	b538      	push	{r3, r4, r5, lr}
 8002d72:	4604      	mov	r4, r0
    HAL::initialize();
 8002d74:	f014 fd73 	bl	801785e <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8002d78:	6823      	ldr	r3, [r4, #0]
 8002d7a:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 8002d7c:	f018 fb36 	bl	801b3ec <_ZN8touchgfx11Application11getInstanceEv>
 8002d80:	4601      	mov	r1, r0
 8002d82:	4620      	mov	r0, r4
 8002d84:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
 8002d86:	6823      	ldr	r3, [r4, #0]
 8002d88:	4a08      	ldr	r2, [pc, #32]	; (8002dac <_ZN20TouchGFXGeneratedHAL10initializeEv+0x3c>)
 8002d8a:	4620      	mov	r0, r4
 8002d8c:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 8002d90:	2300      	movs	r3, #0
 8002d92:	f5a2 317f 	sub.w	r1, r2, #261120	; 0x3fc00
 8002d96:	47a8      	blx	r5
    void addDecoder(MJPEGDecoder& decoder, uint32_t index)
    {
        // Running in UI thread / main

        assert(index < no_streams);
        mjpegDecoders[index] = &decoder;
 8002d98:	4b05      	ldr	r3, [pc, #20]	; (8002db0 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x40>)
 8002d9a:	4a06      	ldr	r2, [pc, #24]	; (8002db4 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>)
 8002d9c:	605a      	str	r2, [r3, #4]
        bufferRGB = buffer;
 8002d9e:	4a06      	ldr	r2, [pc, #24]	; (8002db8 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x48>)
 8002da0:	641a      	str	r2, [r3, #64]	; 0x40
        topBufferRGB = bufferRGB;
 8002da2:	649a      	str	r2, [r3, #72]	; 0x48
        sizeBufferRGB = sizeOfBuffer;
 8002da4:	f44f 22ff 	mov.w	r2, #522240	; 0x7f800
 8002da8:	645a      	str	r2, [r3, #68]	; 0x44
}
 8002daa:	bd38      	pop	{r3, r4, r5, pc}
 8002dac:	c007f800 	.word	0xc007f800
 8002db0:	20004424 	.word	0x20004424
 8002db4:	200043dc 	.word	0x200043dc
 8002db8:	c00bf400 	.word	0xc00bf400

08002dbc <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:
    return HAL::beginFrame();
 8002dbc:	f014 bd36 	b.w	801782c <_ZN8touchgfx3HAL10beginFrameEv>

08002dc0 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:
    if (frameBufferUpdatedThisFrame)
 8002dc0:	f890 304b 	ldrb.w	r3, [r0, #75]	; 0x4b
 8002dc4:	b113      	cbz	r3, 8002dcc <_ZN20TouchGFXGeneratedHAL8endFrameEv+0xc>
        refreshRequested = true;
 8002dc6:	4b02      	ldr	r3, [pc, #8]	; (8002dd0 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x10>)
 8002dc8:	2201      	movs	r2, #1
 8002dca:	701a      	strb	r2, [r3, #0]
    HAL::endFrame();
 8002dcc:	f014 bd3a 	b.w	8017844 <_ZN8touchgfx3HAL8endFrameEv>
 8002dd0:	20003c54 	.word	0x20003c54

08002dd4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:
{
 8002dd4:	b508      	push	{r3, lr}
    HAL::flushFrameBuffer(rect);
 8002dd6:	f014 fcf3 	bl	80177c0 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8002dda:	4b04      	ldr	r3, [pc, #16]	; (8002dec <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x18>)
 8002ddc:	695b      	ldr	r3, [r3, #20]
 8002dde:	03db      	lsls	r3, r3, #15
 8002de0:	d503      	bpl.n	8002dea <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x16>
}
 8002de2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        SCB_CleanInvalidateDCache();
 8002de6:	f7ff bf55 	b.w	8002c94 <SCB_CleanInvalidateDCache>
}
 8002dea:	bd08      	pop	{r3, pc}
 8002dec:	e000ed00 	.word	0xe000ed00

08002df0 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
    return HAL::blockCopy(dest, src, numBytes);
 8002df0:	f014 be4f 	b.w	8017a92 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>

08002df4 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EED0Ev>:
class DoubleBufferedVideoController : public touchgfx::VideoController
 8002df4:	b510      	push	{r4, lr}
 8002df6:	4604      	mov	r4, r0
 8002df8:	2158      	movs	r1, #88	; 0x58
 8002dfa:	f027 f94d 	bl	802a098 <_ZdlPvj>
 8002dfe:	4620      	mov	r0, r4
 8002e00:	bd10      	pop	{r4, pc}
	...

08002e04 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm>:
    {
        assert(handle < no_streams);
        mjpegDecoders[handle]->getVideoInfo(data);
    }

    bool getIsPlaying(const Handle handle)
 8002e04:	b508      	push	{r3, lr}
    {
        assert(handle < no_streams);
 8002e06:	b131      	cbz	r1, 8002e16 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x12>
 8002e08:	4b04      	ldr	r3, [pc, #16]	; (8002e1c <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x18>)
 8002e0a:	f240 1197 	movw	r1, #407	; 0x197
 8002e0e:	4a04      	ldr	r2, [pc, #16]	; (8002e20 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x1c>)
 8002e10:	4804      	ldr	r0, [pc, #16]	; (8002e24 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x20>)
 8002e12:	f027 f96f 	bl	802a0f4 <__assert_func>
        Stream& stream = streams[handle];
        return stream.isPlaying;
    }
 8002e16:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
 8002e1a:	bd08      	pop	{r3, pc}
 8002e1c:	0802c060 	.word	0x0802c060
 8002e20:	0802c074 	.word	0x0802c074
 8002e24:	0802c201 	.word	0x0802c201

08002e28 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE>:
    void getVideoInformation(const Handle handle, touchgfx::VideoInformation* data)
 8002e28:	b510      	push	{r4, lr}
        assert(handle < no_streams);
 8002e2a:	b131      	cbz	r1, 8002e3a <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x12>
 8002e2c:	4b06      	ldr	r3, [pc, #24]	; (8002e48 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x20>)
 8002e2e:	f240 1191 	movw	r1, #401	; 0x191
 8002e32:	4a06      	ldr	r2, [pc, #24]	; (8002e4c <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x24>)
 8002e34:	4806      	ldr	r0, [pc, #24]	; (8002e50 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x28>)
 8002e36:	f027 f95d 	bl	802a0f4 <__assert_func>
        mjpegDecoders[handle]->getVideoInfo(data);
 8002e3a:	6840      	ldr	r0, [r0, #4]
 8002e3c:	4611      	mov	r1, r2
 8002e3e:	6803      	ldr	r3, [r0, #0]
    }
 8002e40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mjpegDecoders[handle]->getVideoInfo(data);
 8002e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e46:	4718      	bx	r3
 8002e48:	0802c060 	.word	0x0802c060
 8002e4c:	0802c243 	.word	0x0802c243
 8002e50:	0802c201 	.word	0x0802c201

08002e54 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm>:
    uint32_t getCurrentFrameNumber(const Handle handle)
 8002e54:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 8002e56:	b129      	cbz	r1, 8002e64 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x10>
 8002e58:	4b03      	ldr	r3, [pc, #12]	; (8002e68 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x14>)
 8002e5a:	217a      	movs	r1, #122	; 0x7a
 8002e5c:	4a03      	ldr	r2, [pc, #12]	; (8002e6c <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x18>)
 8002e5e:	4804      	ldr	r0, [pc, #16]	; (8002e70 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x1c>)
 8002e60:	f027 f948 	bl	802a0f4 <__assert_func>
    }
 8002e64:	6900      	ldr	r0, [r0, #16]
 8002e66:	bd08      	pop	{r3, pc}
 8002e68:	0802c060 	.word	0x0802c060
 8002e6c:	0802c3f4 	.word	0x0802c3f4
 8002e70:	0802c201 	.word	0x0802c201

08002e74 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm>:
    void setFrameRate(const Handle handle, uint32_t ui_frames, uint32_t video_frames)
 8002e74:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 8002e76:	b129      	cbz	r1, 8002e84 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x10>
 8002e78:	4b05      	ldr	r3, [pc, #20]	; (8002e90 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x1c>)
 8002e7a:	2183      	movs	r1, #131	; 0x83
 8002e7c:	4a05      	ldr	r2, [pc, #20]	; (8002e94 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x20>)
 8002e7e:	4806      	ldr	r0, [pc, #24]	; (8002e98 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x24>)
 8002e80:	f027 f938 	bl	802a0f4 <__assert_func>
        stream.tickCount = 0;
 8002e84:	6141      	str	r1, [r0, #20]
        stream.frameCount = 0;
 8002e86:	6081      	str	r1, [r0, #8]
        stream.frame_rate_video = video_frames;
 8002e88:	e9c0 3206 	strd	r3, r2, [r0, #24]
    }
 8002e8c:	bd08      	pop	{r3, pc}
 8002e8e:	bf00      	nop
 8002e90:	0802c060 	.word	0x0802c060
 8002e94:	0802c5ac 	.word	0x0802c5ac
 8002e98:	0802c201 	.word	0x0802c201

08002e9c <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm>:
    void setCommand(const Handle handle, Command cmd, uint32_t param)
 8002e9c:	b510      	push	{r4, lr}
 8002e9e:	4604      	mov	r4, r0
        assert(handle < no_streams);
 8002ea0:	b129      	cbz	r1, 8002eae <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x12>
 8002ea2:	4b27      	ldr	r3, [pc, #156]	; (8002f40 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0xa4>)
 8002ea4:	21a4      	movs	r1, #164	; 0xa4
 8002ea6:	4a27      	ldr	r2, [pc, #156]	; (8002f44 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0xa8>)
 8002ea8:	4827      	ldr	r0, [pc, #156]	; (8002f48 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0xac>)
 8002eaa:	f027 f923 	bl	802a0f4 <__assert_func>
        switch (cmd)
 8002eae:	2a05      	cmp	r2, #5
 8002eb0:	d834      	bhi.n	8002f1c <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x80>
 8002eb2:	e8df f002 	tbb	[pc, r2]
 8002eb6:	2903      	.short	0x2903
 8002eb8:	3e39342f 	.word	0x3e39342f
            if (mjpegDecoders[handle]->hasVideo())
 8002ebc:	6840      	ldr	r0, [r0, #4]
 8002ebe:	6803      	ldr	r3, [r0, #0]
 8002ec0:	691b      	ldr	r3, [r3, #16]
 8002ec2:	4798      	blx	r3
 8002ec4:	b350      	cbz	r0, 8002f1c <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x80>
                MUTEX_LOCK(mutexBuffers);
 8002ec6:	f04f 31ff 	mov.w	r1, #4294967295
 8002eca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002ecc:	f004 fe3e 	bl	8007b4c <osMutexAcquire>
                stream.cancelDecoding = false;
 8002ed0:	2300      	movs	r3, #0
                stream.isPlaying = true;
 8002ed2:	2201      	movs	r2, #1
                if (stream.isStopped)
 8002ed4:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
                stream.cancelDecoding = false;
 8002ed8:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
                stream.isPlaying = true;
 8002edc:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
                stream.frameCount = 0;
 8002ee0:	60a3      	str	r3, [r4, #8]
                stream.tickCount = 0;
 8002ee2:	6163      	str	r3, [r4, #20]
                if (stream.isStopped)
 8002ee4:	b101      	cbz	r1, 8002ee8 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x4c>
                    stream.seek_to_frame = 1;
 8002ee6:	6222      	str	r2, [r4, #32]
                stream.isStopped = false;
 8002ee8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
                stream.skip_frames = 0;
 8002eec:	6263      	str	r3, [r4, #36]	; 0x24
                if (stream.nextBuffer == 0)
 8002eee:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002ef0:	b92b      	cbnz	r3, 8002efe <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x62>
                    stream.doDecodeNewFrame = true;
 8002ef2:	2301      	movs	r3, #1
                    SEM_POST(semDecode);
 8002ef4:	6d20      	ldr	r0, [r4, #80]	; 0x50
                    stream.doDecodeNewFrame = true;
 8002ef6:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
                    SEM_POST(semDecode);
 8002efa:	f004 ff11 	bl	8007d20 <osSemaphoreRelease>
                MUTEX_UNLOCK(mutexBuffers);
 8002efe:	6d60      	ldr	r0, [r4, #84]	; 0x54
    }
 8002f00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                MUTEX_UNLOCK(mutexBuffers);
 8002f04:	f004 be52 	b.w	8007bac <osMutexRelease>
            stream.isPlaying = false;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
            stream.isStopped = true;
 8002f0e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
            break;
 8002f12:	e003      	b.n	8002f1c <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x80>
            stream.seek_to_frame = param;
 8002f14:	6203      	str	r3, [r0, #32]
            stream.frameCount = 0;
 8002f16:	2300      	movs	r3, #0
 8002f18:	6083      	str	r3, [r0, #8]
            stream.tickCount = 0;
 8002f1a:	6143      	str	r3, [r0, #20]
    }
 8002f1c:	bd10      	pop	{r4, pc}
            stream.seek_to_frame = param;
 8002f1e:	6203      	str	r3, [r0, #32]
            stream.frameCount = 0;
 8002f20:	2300      	movs	r3, #0
 8002f22:	6083      	str	r3, [r0, #8]
            stream.tickCount = 0;
 8002f24:	6143      	str	r3, [r0, #20]
 8002f26:	e7f2      	b.n	8002f0e <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x72>
            stream.isPlaying = false;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
            stream.isStopped = true;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e7ed      	b.n	8002f0e <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x72>
            stream.repeat = (param > 0);
 8002f32:	3b00      	subs	r3, #0
 8002f34:	bf18      	it	ne
 8002f36:	2301      	movne	r3, #1
 8002f38:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    }
 8002f3c:	e7ee      	b.n	8002f1c <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x80>
 8002f3e:	bf00      	nop
 8002f40:	0802c060 	.word	0x0802c060
 8002f44:	0802c76b 	.word	0x0802c76b
 8002f48:	0802c201 	.word	0x0802c201

08002f4c <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE>:
    bool updateFrame(const Handle handle, touchgfx::VideoWidget& widget)
 8002f4c:	b570      	push	{r4, r5, r6, lr}
 8002f4e:	4604      	mov	r4, r0
 8002f50:	4616      	mov	r6, r2
        assert(handle < no_streams);
 8002f52:	b129      	cbz	r1, 8002f60 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x14>
 8002f54:	4b31      	ldr	r3, [pc, #196]	; (800301c <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0xd0>)
 8002f56:	21e7      	movs	r1, #231	; 0xe7
 8002f58:	4a31      	ldr	r2, [pc, #196]	; (8003020 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0xd4>)
 8002f5a:	4832      	ldr	r0, [pc, #200]	; (8003024 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0xd8>)
 8002f5c:	f027 f8ca 	bl	802a0f4 <__assert_func>
        if (stream.isPlaying)
 8002f60:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002f64:	b133      	cbz	r3, 8002f74 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x28>
        return vSyncForFrame;
 8002f66:	4b30      	ldr	r3, [pc, #192]	; (8003028 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0xdc>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f893 2067 	ldrb.w	r2, [r3, #103]	; 0x67
            stream.tickCount += HAL::getInstance()->getLCDRefreshCount();
 8002f6e:	6943      	ldr	r3, [r0, #20]
 8002f70:	4413      	add	r3, r2
 8002f72:	6143      	str	r3, [r0, #20]
        if (stream.nextBuffer && (decodeForNextTick(stream) || stream.seek_to_frame > 0))
 8002f74:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d04d      	beq.n	8003016 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0xca>
    bool decodeForNextTick(Stream& stream)
    {
        // Running in UI thread

        // Compare tickCount/frameCount to frame_rate_ticks/frame_rate_video
        if ((stream.tickCount * stream.frame_rate_video) >= (stream.frame_rate_ticks * stream.frameCount))
 8002f7a:	69e1      	ldr	r1, [r4, #28]
 8002f7c:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 8002f80:	4353      	muls	r3, r2
 8002f82:	68a2      	ldr	r2, [r4, #8]
 8002f84:	434a      	muls	r2, r1
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d220      	bcs.n	8002fcc <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x80>
        if (stream.nextBuffer && (decodeForNextTick(stream) || stream.seek_to_frame > 0))
 8002f8a:	6a23      	ldr	r3, [r4, #32]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d042      	beq.n	8003016 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0xca>
            MUTEX_LOCK(mutexBuffers);
 8002f90:	f04f 31ff 	mov.w	r1, #4294967295
 8002f94:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002f96:	f004 fdd9 	bl	8007b4c <osMutexAcquire>
            if (stream.seek_to_frame > 0)
 8002f9a:	6a23      	ldr	r3, [r4, #32]
 8002f9c:	b10b      	cbz	r3, 8002fa2 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x56>
                stream.nextBuffer = 0;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	62e3      	str	r3, [r4, #44]	; 0x2c
            if (stream.nextBuffer != 0)
 8002fa2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002fa4:	b9fb      	cbnz	r3, 8002fe6 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x9a>
        bool hasMoreFrames = true;
 8002fa6:	2501      	movs	r5, #1
            MUTEX_UNLOCK(mutexBuffers);
 8002fa8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002faa:	f004 fdff 	bl	8007bac <osMutexRelease>
        if ((stream.isPlaying || stream.seek_to_frame > 0) && (stream.nextBuffer == 0))
 8002fae:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8002fb2:	b90b      	cbnz	r3, 8002fb8 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x6c>
 8002fb4:	6a23      	ldr	r3, [r4, #32]
 8002fb6:	b13b      	cbz	r3, 8002fc8 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x7c>
 8002fb8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002fba:	b92b      	cbnz	r3, 8002fc8 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x7c>
            stream.doDecodeNewFrame = true;
 8002fbc:	2301      	movs	r3, #1
            SEM_POST(semDecode);
 8002fbe:	6d20      	ldr	r0, [r4, #80]	; 0x50
            stream.doDecodeNewFrame = true;
 8002fc0:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
            SEM_POST(semDecode);
 8002fc4:	f004 feac 	bl	8007d20 <osSemaphoreRelease>
    }
 8002fc8:	4628      	mov	r0, r5
 8002fca:	bd70      	pop	{r4, r5, r6, pc}
        {
            if (allowSkipFrames)
 8002fcc:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
 8002fd0:	2800      	cmp	r0, #0
 8002fd2:	d0dd      	beq.n	8002f90 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x44>
            {
                stream.skip_frames = (stream.tickCount * stream.frame_rate_video - stream.frame_rate_ticks * stream.frameCount) / stream.frame_rate_ticks;
 8002fd4:	1a9b      	subs	r3, r3, r2
 8002fd6:	fbb3 f2f1 	udiv	r2, r3, r1
                if (stream.skip_frames > 0)
 8002fda:	4299      	cmp	r1, r3
                {
                    stream.skip_frames--;
 8002fdc:	bf98      	it	ls
 8002fde:	f102 32ff 	addls.w	r2, r2, #4294967295
 8002fe2:	6262      	str	r2, [r4, #36]	; 0x24
 8002fe4:	e7d4      	b.n	8002f90 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x44>
                stream.nextBuffer = 0;
 8002fe6:	2200      	movs	r2, #0
                hasMoreFrames = stream.hasMoreFramesAfterNext;
 8002fe8:	f894 503c 	ldrb.w	r5, [r4, #60]	; 0x3c
                stream.currentBuffer = stream.nextBuffer;
 8002fec:	62a3      	str	r3, [r4, #40]	; 0x28
                widget.invalidate();
 8002fee:	4630      	mov	r0, r6
                stream.nextBuffer = 0;
 8002ff0:	62e2      	str	r2, [r4, #44]	; 0x2c
                stream.frameNumberShown = stream.frameNumberNext;
 8002ff2:	68e2      	ldr	r2, [r4, #12]
 8002ff4:	6122      	str	r2, [r4, #16]
                stream.frameCount++;
 8002ff6:	68a2      	ldr	r2, [r4, #8]
 8002ff8:	3201      	adds	r2, #1
 8002ffa:	60a2      	str	r2, [r4, #8]
     *
     * @param [in] videoBuffer Video buffer.
     */
    void setVideoBuffer(uint8_t* const videoBuffer)
    {
        buffer = videoBuffer;
 8002ffc:	6333      	str	r3, [r6, #48]	; 0x30
                widget.invalidate();
 8002ffe:	6833      	ldr	r3, [r6, #0]
 8003000:	695b      	ldr	r3, [r3, #20]
 8003002:	4798      	blx	r3
                if (!hasMoreFrames && !stream.repeat)
 8003004:	2d00      	cmp	r5, #0
 8003006:	d1ce      	bne.n	8002fa6 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x5a>
 8003008:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800300c:	2b00      	cmp	r3, #0
 800300e:	d1cb      	bne.n	8002fa8 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x5c>
                    stream.isPlaying = false;
 8003010:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
 8003014:	e7c8      	b.n	8002fa8 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x5c>
        bool hasMoreFrames = true;
 8003016:	2501      	movs	r5, #1
 8003018:	e7c9      	b.n	8002fae <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x62>
 800301a:	bf00      	nop
 800301c:	0802c060 	.word	0x0802c060
 8003020:	0802c942 	.word	0x0802c942
 8003024:	0802c201 	.word	0x0802c201
 8003028:	200177c4 	.word	0x200177c4

0800302c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800302c:	4b03      	ldr	r3, [pc, #12]	; (800303c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0x10>)
 800302e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003032:	609a      	str	r2, [r3, #8]
 8003034:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003038:	609a      	str	r2, [r3, #8]
}
 800303a:	4770      	bx	lr
 800303c:	e000e100 	.word	0xe000e100

08003040 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003040:	4b08      	ldr	r3, [pc, #32]	; (8003064 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x24>)
 8003042:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003046:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 800304a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800304e:	f3bf 8f6f 	isb	sy
 8003052:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003056:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 800305a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800305e:	f3bf 8f6f 	isb	sy
}
 8003062:	4770      	bx	lr
 8003064:	e000e100 	.word	0xe000e100

08003068 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE>:
    Handle registerVideoWidget(touchgfx::VideoWidget& widget)
 8003068:	b538      	push	{r3, r4, r5, lr}
    {
        // Running in UI thread

        for (uint32_t i = 0; i < no_streams; i++)
        {
            if (streams[i].isActive == false)
 800306a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800306e:	bb3b      	cbnz	r3, 80030c0 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x58>
        streams[handle].isActive = true;
 8003070:	2201      	movs	r2, #1
            {
                // Reset stream parameters
                streams[i] = Stream();
 8003072:	6083      	str	r3, [r0, #8]
 8003074:	60c3      	str	r3, [r0, #12]
        streams[handle].isActive = true;
 8003076:	6382      	str	r2, [r0, #56]	; 0x38
                streams[i] = Stream();
 8003078:	f44f 7280 	mov.w	r2, #256	; 0x100
 800307c:	6143      	str	r3, [r0, #20]
 800307e:	8782      	strh	r2, [r0, #60]	; 0x3c
     * @param height Height of the videoBuffer in pixels
     */
    void setVideoBufferFormat(Bitmap::BitmapFormat bufferFormat, int16_t width, int16_t height)
    {
        format = bufferFormat;
        bufferWidth = width;
 8003080:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003084:	6183      	str	r3, [r0, #24]
 8003086:	61c3      	str	r3, [r0, #28]
 8003088:	6203      	str	r3, [r0, #32]
 800308a:	6243      	str	r3, [r0, #36]	; 0x24
 800308c:	6283      	str	r3, [r0, #40]	; 0x28
 800308e:	62c3      	str	r3, [r0, #44]	; 0x2c
 8003090:	6303      	str	r3, [r0, #48]	; 0x30
 8003092:	6343      	str	r3, [r0, #52]	; 0x34
 8003094:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 8003098:	86ca      	strh	r2, [r1, #54]	; 0x36
        bufferHeight = height;
 800309a:	f44f 7288 	mov.w	r2, #272	; 0x110
        format = bufferFormat;
 800309e:	f881 3034 	strb.w	r3, [r1, #52]	; 0x34
        bufferHeight = height;
 80030a2:	870a      	strh	r2, [r1, #56]	; 0x38
        buffer = videoBuffer;
 80030a4:	630b      	str	r3, [r1, #48]	; 0x30
        if (topBufferRGB + 2 * sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 80030a6:	6c82      	ldr	r2, [r0, #72]	; 0x48
        streams[handle].frameNumberShown = 0;
 80030a8:	6103      	str	r3, [r0, #16]
        if (topBufferRGB + 2 * sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 80030aa:	f502 24ff 	add.w	r4, r2, #522240	; 0x7f800
 80030ae:	e9d0 1510 	ldrd	r1, r5, [r0, #64]	; 0x40
 80030b2:	4429      	add	r1, r5
 80030b4:	428c      	cmp	r4, r1
 80030b6:	d90a      	bls.n	80030ce <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x66>
            assert(0 && "registerVideoWidget: Unable to allocate two RGB buffers!");
 80030b8:	4b08      	ldr	r3, [pc, #32]	; (80030dc <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x74>)
 80030ba:	2158      	movs	r1, #88	; 0x58
 80030bc:	4a08      	ldr	r2, [pc, #32]	; (80030e0 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x78>)
 80030be:	e003      	b.n	80030c8 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x60>

                return static_cast<VideoController::Handle>(i);
            }
        }

        assert(0 && "Unable to find free video stream handle!");
 80030c0:	4b08      	ldr	r3, [pc, #32]	; (80030e4 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x7c>)
 80030c2:	f240 11f5 	movw	r1, #501	; 0x1f5
 80030c6:	4a08      	ldr	r2, [pc, #32]	; (80030e8 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x80>)
            assert(0 && "registerVideoWidget: Unable to allocate two RGB buffers!");
 80030c8:	4808      	ldr	r0, [pc, #32]	; (80030ec <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x84>)
 80030ca:	f027 f813 	bl	802a0f4 <__assert_func>
        streams[handle].bufferA = (uint8_t*)topBufferRGB;
 80030ce:	6302      	str	r2, [r0, #48]	; 0x30
        topBufferRGB += sizeOfOneDecodeBuffer;
 80030d0:	f502 327f 	add.w	r2, r2, #261120	; 0x3fc00
        topBufferRGB += sizeOfOneDecodeBuffer;
 80030d4:	6484      	str	r4, [r0, #72]	; 0x48
        streams[handle].bufferB = (uint8_t*)topBufferRGB;
 80030d6:	6342      	str	r2, [r0, #52]	; 0x34
    }
 80030d8:	4618      	mov	r0, r3
 80030da:	bd38      	pop	{r3, r4, r5, pc}
 80030dc:	0802cca0 	.word	0x0802cca0
 80030e0:	0802cce0 	.word	0x0802cce0
 80030e4:	0802cae6 	.word	0x0802cae6
 80030e8:	0802cb16 	.word	0x0802cb16
 80030ec:	0802c201 	.word	0x0802c201

080030f0 <HAL_LTDC_LineEventCallback>:
}

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 80030f0:	b510      	push	{r4, lr}
        return instance;
 80030f2:	4c14      	ldr	r4, [pc, #80]	; (8003144 <HAL_LTDC_LineEventCallback+0x54>)
        if (!HAL::getInstance())
 80030f4:	6823      	ldr	r3, [r4, #0]
 80030f6:	b323      	cbz	r3, 8003142 <HAL_LTDC_LineEventCallback+0x52>
        {
            return;
        }

        if (LTDC->LIPCR == lcd_int_active_line)
 80030f8:	4b13      	ldr	r3, [pc, #76]	; (8003148 <HAL_LTDC_LineEventCallback+0x58>)
 80030fa:	4a14      	ldr	r2, [pc, #80]	; (800314c <HAL_LTDC_LineEventCallback+0x5c>)
 80030fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fe:	8811      	ldrh	r1, [r2, #0]
 8003100:	428b      	cmp	r3, r1
 8003102:	d113      	bne.n	800312c <HAL_LTDC_LineEventCallback+0x3c>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 8003104:	4b12      	ldr	r3, [pc, #72]	; (8003150 <HAL_LTDC_LineEventCallback+0x60>)
 8003106:	8819      	ldrh	r1, [r3, #0]
 8003108:	f003 f918 	bl	800633c <HAL_LTDC_ProgramLineEvent>
 800310c:	6822      	ldr	r2, [r4, #0]
        vSyncCnt++;
 800310e:	f892 3066 	ldrb.w	r3, [r2, #102]	; 0x66
 8003112:	3301      	adds	r3, #1
 8003114:	f882 3066 	strb.w	r3, [r2, #102]	; 0x66
            HAL::getInstance()->vSync();
            OSWrappers::signalVSync();
 8003118:	f7fe fece 	bl	8001eb8 <_ZN8touchgfx10OSWrappers11signalVSyncEv>

            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 800311c:	6820      	ldr	r0, [r4, #0]
 800311e:	f015 f8ef 	bl	8018300 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 8003122:	2000      	movs	r0, #0

            // Signal to the framework that display update has finished.
            HAL::getInstance()->frontPorchEntered();
            GPIO::clear(GPIO::VSYNC_FREQ);
        }
    }
 8003124:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            GPIO::set(GPIO::VSYNC_FREQ);
 8003128:	f7fe bcfe 	b.w	8001b28 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 800312c:	f003 f906 	bl	800633c <HAL_LTDC_ProgramLineEvent>
        return instance;
 8003130:	6820      	ldr	r0, [r4, #0]
        allowDMATransfers();
 8003132:	6803      	ldr	r3, [r0, #0]
 8003134:	6a1b      	ldr	r3, [r3, #32]
 8003136:	4798      	blx	r3
            GPIO::clear(GPIO::VSYNC_FREQ);
 8003138:	2000      	movs	r0, #0
    }
 800313a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            GPIO::clear(GPIO::VSYNC_FREQ);
 800313e:	f7fe bd23 	b.w	8001b88 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
    }
 8003142:	bd10      	pop	{r4, pc}
 8003144:	200177c4 	.word	0x200177c4
 8003148:	40016800 	.word	0x40016800
 800314c:	20003c58 	.word	0x20003c58
 8003150:	20003c56 	.word	0x20003c56

08003154 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv>:
    void decoderTaskEntry()
 8003154:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003158:	4604      	mov	r4, r0
            const bool hasMoreFrames = decoder->decodeNextFrame(decodeBuffer, width, height, stride);
 800315a:	f44f 7870 	mov.w	r8, #960	; 0x3c0
    uint32_t getStreamIndexToDecode()
    {
        for (uint32_t i = 0; i < no_streams; i++)
        {
            Stream& stream = streams[i];
            if (stream.doDecodeNewFrame) // Marked by UI for decoding
 800315e:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
            MUTEX_LOCK(mutexBuffers);
 8003162:	f04f 31ff 	mov.w	r1, #4294967295
            if (stream.doDecodeNewFrame) // Marked by UI for decoding
 8003166:	b91b      	cbnz	r3, 8003170 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x1c>
                SEM_WAIT(semDecode);
 8003168:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800316a:	f004 fd9f 	bl	8007cac <osSemaphoreAcquire>
                continue;
 800316e:	e7f6      	b.n	800315e <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xa>
            MUTEX_LOCK(mutexBuffers);
 8003170:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003172:	f004 fceb 	bl	8007b4c <osMutexAcquire>
            uint8_t* decodeBuffer = (stream.currentBuffer == stream.bufferA) ? stream.bufferB : stream.bufferA;
 8003176:	6b27      	ldr	r7, [r4, #48]	; 0x30
 8003178:	6aa3      	ldr	r3, [r4, #40]	; 0x28
            if (stream.seek_to_frame > 0)
 800317a:	6a26      	ldr	r6, [r4, #32]
            uint8_t* decodeBuffer = (stream.currentBuffer == stream.bufferA) ? stream.bufferB : stream.bufferA;
 800317c:	42bb      	cmp	r3, r7
            MJPEGDecoder* const decoder = mjpegDecoders[stream_index];
 800317e:	6865      	ldr	r5, [r4, #4]
            uint8_t* decodeBuffer = (stream.currentBuffer == stream.bufferA) ? stream.bufferB : stream.bufferA;
 8003180:	bf08      	it	eq
 8003182:	6b67      	ldreq	r7, [r4, #52]	; 0x34
            if (stream.seek_to_frame > 0)
 8003184:	b336      	cbz	r6, 80031d4 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x80>
                decoder->gotoFrame(stream.seek_to_frame);
 8003186:	682b      	ldr	r3, [r5, #0]
 8003188:	4631      	mov	r1, r6
 800318a:	4628      	mov	r0, r5
 800318c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318e:	4798      	blx	r3
                stream.seek_to_frame = 0;
 8003190:	2300      	movs	r3, #0
 8003192:	6223      	str	r3, [r4, #32]
                stream.cancelDecoding = false;
 8003194:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
            MUTEX_UNLOCK(mutexBuffers);
 8003198:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800319a:	f004 fd07 	bl	8007bac <osMutexRelease>
            const bool hasMoreFrames = decoder->decodeNextFrame(decodeBuffer, width, height, stride);
 800319e:	682b      	ldr	r3, [r5, #0]
 80031a0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80031a4:	4639      	mov	r1, r7
 80031a6:	f8cd 8000 	str.w	r8, [sp]
 80031aa:	4628      	mov	r0, r5
 80031ac:	695e      	ldr	r6, [r3, #20]
 80031ae:	f44f 7388 	mov.w	r3, #272	; 0x110
 80031b2:	47b0      	blx	r6
            MUTEX_LOCK(mutexBuffers);
 80031b4:	f04f 31ff 	mov.w	r1, #4294967295
            const bool hasMoreFrames = decoder->decodeNextFrame(decodeBuffer, width, height, stride);
 80031b8:	4606      	mov	r6, r0
            MUTEX_LOCK(mutexBuffers);
 80031ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80031bc:	f004 fcc6 	bl	8007b4c <osMutexAcquire>
            if (stream.cancelDecoding)
 80031c0:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
 80031c4:	b1c3      	cbz	r3, 80031f8 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xa4>
                stream.cancelDecoding = false;
 80031c6:	2300      	movs	r3, #0
 80031c8:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
            MUTEX_UNLOCK(mutexBuffers);
 80031cc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80031ce:	f004 fced 	bl	8007bac <osMutexRelease>
 80031d2:	e7c4      	b.n	800315e <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xa>
                if (stream.skip_frames > 0)
 80031d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d0de      	beq.n	8003198 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x44>
                    decoder->gotoFrame(decoder->getCurrentFrameNumber() + stream.skip_frames);
 80031da:	682b      	ldr	r3, [r5, #0]
 80031dc:	4628      	mov	r0, r5
 80031de:	e9d3 9309 	ldrd	r9, r3, [r3, #36]	; 0x24
 80031e2:	4798      	blx	r3
 80031e4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80031e6:	4401      	add	r1, r0
 80031e8:	4628      	mov	r0, r5
 80031ea:	47c8      	blx	r9
                    stream.frameCount += stream.skip_frames;
 80031ec:	68a3      	ldr	r3, [r4, #8]
 80031ee:	6a62      	ldr	r2, [r4, #36]	; 0x24
                    stream.skip_frames = 0;
 80031f0:	6266      	str	r6, [r4, #36]	; 0x24
                    stream.frameCount += stream.skip_frames;
 80031f2:	4413      	add	r3, r2
 80031f4:	60a3      	str	r3, [r4, #8]
 80031f6:	e7cf      	b.n	8003198 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x44>
                stream.nextBuffer = decodeBuffer;
 80031f8:	62e7      	str	r7, [r4, #44]	; 0x2c
                if (hasMoreFrames)
 80031fa:	b15e      	cbz	r6, 8003214 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xc0>
                    stream.frameNumberNext = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
 80031fc:	682b      	ldr	r3, [r5, #0]
 80031fe:	4628      	mov	r0, r5
 8003200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003202:	4798      	blx	r3
 8003204:	3801      	subs	r0, #1
 8003206:	60e0      	str	r0, [r4, #12]
                stream.doDecodeNewFrame = false;
 8003208:	2300      	movs	r3, #0
                stream.hasMoreFramesAfterNext = hasMoreFrames;
 800320a:	f884 603c 	strb.w	r6, [r4, #60]	; 0x3c
                stream.doDecodeNewFrame = false;
 800320e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
 8003212:	e7db      	b.n	80031cc <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x78>
                    stream.frameNumberNext = 1;
 8003214:	2301      	movs	r3, #1
 8003216:	60e3      	str	r3, [r4, #12]
 8003218:	e7f6      	b.n	8003208 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xb4>
	...

0800321c <videoTaskFunc>:
    videoController.decoderTaskEntry();
 800321c:	4801      	ldr	r0, [pc, #4]	; (8003224 <videoTaskFunc+0x8>)
{
 800321e:	b508      	push	{r3, lr}
    videoController.decoderTaskEntry();
 8003220:	f7ff ff98 	bl	8003154 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv>
 8003224:	20004424 	.word	0x20004424

08003228 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10clearStateEm>:
    }

    void clearState(const Handle handle)
    {
        // Stop playing, and clear next buffer if any, cancel ongoing decoding
        setCommand(handle, STOP, 0);
 8003228:	6803      	ldr	r3, [r0, #0]
 800322a:	2204      	movs	r2, #4
    void clearState(const Handle handle)
 800322c:	b570      	push	{r4, r5, r6, lr}
 800322e:	4604      	mov	r4, r0
        setCommand(handle, STOP, 0);
 8003230:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 8003232:	2300      	movs	r3, #0
    void clearState(const Handle handle)
 8003234:	460d      	mov	r5, r1
        setCommand(handle, STOP, 0);
 8003236:	47b0      	blx	r6

        MUTEX_LOCK(mutexBuffers);
 8003238:	f04f 31ff 	mov.w	r1, #4294967295
 800323c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800323e:	f004 fc85 	bl	8007b4c <osMutexAcquire>

        Stream& stream = streams[handle];
        if (stream.nextBuffer != 0)
 8003242:	2138      	movs	r1, #56	; 0x38
 8003244:	fb01 4305 	mla	r3, r1, r5, r4
 8003248:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800324a:	b10a      	cbz	r2, 8003250 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10clearStateEm+0x28>
        {
            // Ignore any decoded buffer
            stream.nextBuffer = 0;
 800324c:	2200      	movs	r2, #0
 800324e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003250:	fb01 4505 	mla	r5, r1, r5, r4
        }
        stream.cancelDecoding = true;
 8003254:	2301      	movs	r3, #1
 8003256:	f885 303b 	strb.w	r3, [r5, #59]	; 0x3b
        stream.isPlaying = false;
 800325a:	2300      	movs	r3, #0
 800325c:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39

        MUTEX_UNLOCK(mutexBuffers);
 8003260:	6d60      	ldr	r0, [r4, #84]	; 0x54
    }
 8003262:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        MUTEX_UNLOCK(mutexBuffers);
 8003266:	f004 bca1 	b.w	8007bac <osMutexRelease>

0800326a <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmRNS0_15VideoDataReaderE>:
    void setVideoData(const Handle handle, VideoDataReader& reader)
 800326a:	b538      	push	{r3, r4, r5, lr}
        mjpegDecoders[handle]->setVideoData(reader);
 800326c:	eb00 0381 	add.w	r3, r0, r1, lsl #2
    void setVideoData(const Handle handle, VideoDataReader& reader)
 8003270:	4604      	mov	r4, r0
 8003272:	460d      	mov	r5, r1
        mjpegDecoders[handle]->setVideoData(reader);
 8003274:	4611      	mov	r1, r2
 8003276:	6858      	ldr	r0, [r3, #4]
 8003278:	6803      	ldr	r3, [r0, #0]
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	4798      	blx	r3
        clearState(handle);
 800327e:	4629      	mov	r1, r5
 8003280:	4620      	mov	r0, r4
 8003282:	f7ff ffd1 	bl	8003228 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10clearStateEm>
    }
 8003286:	bd38      	pop	{r3, r4, r5, pc}

08003288 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm>:
    void setVideoData(const Handle handle, const uint8_t* movie, const uint32_t length)
 8003288:	b570      	push	{r4, r5, r6, lr}
 800328a:	460d      	mov	r5, r1
 800328c:	4611      	mov	r1, r2
 800328e:	4604      	mov	r4, r0
        mjpegDecoders[handle]->setVideoData(movie, length);
 8003290:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8003294:	6850      	ldr	r0, [r2, #4]
 8003296:	6802      	ldr	r2, [r0, #0]
 8003298:	6896      	ldr	r6, [r2, #8]
 800329a:	461a      	mov	r2, r3
 800329c:	47b0      	blx	r6
        clearState(handle);
 800329e:	4629      	mov	r1, r5
 80032a0:	4620      	mov	r0, r4
 80032a2:	f7ff ffc1 	bl	8003228 <_ZN29DoubleBufferedVideoControllerILm1ELm480ELm272ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10clearStateEm>
    }
 80032a6:	bd70      	pop	{r4, r5, r6, pc}

080032a8 <_GLOBAL__sub_I_lineBuffer>:
}
 80032a8:	b538      	push	{r3, r4, r5, lr}
SoftwareMJPEGDecoder mjpegdecoder1((uint8_t*)lineBuffer);
 80032aa:	4916      	ldr	r1, [pc, #88]	; (8003304 <_GLOBAL__sub_I_lineBuffer+0x5c>)
          semDecode(0), mutexBuffers(0)
 80032ac:	2500      	movs	r5, #0
 80032ae:	4816      	ldr	r0, [pc, #88]	; (8003308 <_GLOBAL__sub_I_lineBuffer+0x60>)
 80032b0:	f7ff f878 	bl	80023a4 <_ZN20SoftwareMJPEGDecoderC1EPh>
 80032b4:	4c15      	ldr	r4, [pc, #84]	; (800330c <_GLOBAL__sub_I_lineBuffer+0x64>)
 80032b6:	4b16      	ldr	r3, [pc, #88]	; (8003310 <_GLOBAL__sub_I_lineBuffer+0x68>)
 80032b8:	2001      	movs	r0, #1
        semDecode = SEM_CREATE(); // Binary semaphore
 80032ba:	462a      	mov	r2, r5
 80032bc:	4629      	mov	r1, r5
          semDecode(0), mutexBuffers(0)
 80032be:	6023      	str	r3, [r4, #0]
        Stream() : frameCount(0), frameNumberNext(0), frameNumberShown(0), tickCount(0),
 80032c0:	f44f 7380 	mov.w	r3, #256	; 0x100
          semDecode(0), mutexBuffers(0)
 80032c4:	64a5      	str	r5, [r4, #72]	; 0x48
        Stream() : frameCount(0), frameNumberNext(0), frameNumberShown(0), tickCount(0),
 80032c6:	87a3      	strh	r3, [r4, #60]	; 0x3c
          semDecode(0), mutexBuffers(0)
 80032c8:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
            hasMoreFramesAfterNext(false), repeat(true), isStopped(false)
 80032cc:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
          semDecode(0), mutexBuffers(0)
 80032d0:	e9c4 5510 	strd	r5, r5, [r4, #64]	; 0x40
 80032d4:	e9c4 5514 	strd	r5, r5, [r4, #80]	; 0x50
            hasMoreFramesAfterNext(false), repeat(true), isStopped(false)
 80032d8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80032dc:	e9c4 5503 	strd	r5, r5, [r4, #12]
 80032e0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80032e4:	e9c4 5507 	strd	r5, r5, [r4, #28]
 80032e8:	e9c4 5509 	strd	r5, r5, [r4, #36]	; 0x24
 80032ec:	e9c4 550b 	strd	r5, r5, [r4, #44]	; 0x2c
        Stream() : frameCount(0), frameNumberNext(0), frameNumberShown(0), tickCount(0),
 80032f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
        semDecode = SEM_CREATE(); // Binary semaphore
 80032f4:	f004 fc84 	bl	8007c00 <osSemaphoreNew>
 80032f8:	6520      	str	r0, [r4, #80]	; 0x50
        mutexBuffers = MUTEX_CREATE();
 80032fa:	4628      	mov	r0, r5
 80032fc:	f004 fbe4 	bl	8007ac8 <osMutexNew>
 8003300:	6560      	str	r0, [r4, #84]	; 0x54
}
 8003302:	bd38      	pop	{r3, r4, r5, pc}
 8003304:	20003c5c 	.word	0x20003c5c
 8003308:	200043dc 	.word	0x200043dc
 800330c:	20004424 	.word	0x20004424
 8003310:	0802ce90 	.word	0x0802ce90

08003314 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8003314:	4770      	bx	lr

08003316 <_ZN23ApplicationFontProviderD0Ev>:
 8003316:	b510      	push	{r4, lr}
 8003318:	4604      	mov	r4, r0
 800331a:	2104      	movs	r1, #4
 800331c:	f026 febc 	bl	802a098 <_ZdlPvj>
 8003320:	4620      	mov	r0, r4
 8003322:	bd10      	pop	{r4, pc}

08003324 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
    switch (typography)
 8003324:	2901      	cmp	r1, #1
{
 8003326:	b508      	push	{r3, lr}
    switch (typography)
 8003328:	d006      	beq.n	8003338 <_ZN23ApplicationFontProvider7getFontEt+0x14>
 800332a:	2902      	cmp	r1, #2
 800332c:	d008      	beq.n	8003340 <_ZN23ApplicationFontProvider7getFontEt+0x1c>
 800332e:	b959      	cbnz	r1, 8003348 <_ZN23ApplicationFontProvider7getFontEt+0x24>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8003330:	f000 fbe8 	bl	8003b04 <_ZN17TypedTextDatabase8getFontsEv>
 8003334:	6800      	ldr	r0, [r0, #0]
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
    default:
        return 0;
    }
}
 8003336:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8003338:	f000 fbe4 	bl	8003b04 <_ZN17TypedTextDatabase8getFontsEv>
 800333c:	6840      	ldr	r0, [r0, #4]
 800333e:	e7fa      	b.n	8003336 <_ZN23ApplicationFontProvider7getFontEt+0x12>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8003340:	f000 fbe0 	bl	8003b04 <_ZN17TypedTextDatabase8getFontsEv>
 8003344:	6880      	ldr	r0, [r0, #8]
 8003346:	e7f6      	b.n	8003336 <_ZN23ApplicationFontProvider7getFontEt+0x12>
    switch (typography)
 8003348:	2000      	movs	r0, #0
 800334a:	e7f4      	b.n	8003336 <_ZN23ApplicationFontProvider7getFontEt+0x12>

0800334c <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
 800334c:	4800      	ldr	r0, [pc, #0]	; (8003350 <_ZN14BitmapDatabase11getInstanceEv+0x4>)
 800334e:	4770      	bx	lr
 8003350:	0802ced8 	.word	0x0802ced8

08003354 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
 8003354:	2011      	movs	r0, #17
 8003356:	4770      	bx	lr

08003358 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8003358:	b513      	push	{r0, r1, r4, lr}
 800335a:	2400      	movs	r4, #0
    {
        if (unicode == 0)
 800335c:	b151      	cbz	r1, 8003374 <_ZNK8touchgfx4Font8getGlyphEt+0x1c>
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
        uint8_t bitsPerPixelDummy = 0;
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800335e:	6803      	ldr	r3, [r0, #0]
 8003360:	aa01      	add	r2, sp, #4
        const uint8_t* dummyPixelDataPointer = 0;
 8003362:	9401      	str	r4, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
 8003364:	f88d 4003 	strb.w	r4, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8003368:	689c      	ldr	r4, [r3, #8]
 800336a:	f10d 0303 	add.w	r3, sp, #3
 800336e:	47a0      	blx	r4
        return glyph;
    }
 8003370:	b002      	add	sp, #8
 8003372:	bd10      	pop	{r4, pc}
            return 0;
 8003374:	4608      	mov	r0, r1
 8003376:	e7fb      	b.n	8003370 <_ZNK8touchgfx4Font8getGlyphEt+0x18>

08003378 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
 8003378:	8940      	ldrh	r0, [r0, #10]
 800337a:	4770      	bx	lr

0800337c <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
 800337c:	8980      	ldrh	r0, [r0, #12]
 800337e:	4770      	bx	lr

08003380 <_ZNK8touchgfx4Font13getFontHeightEv>:
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
    {
        return fontHeight;
    }
 8003380:	8880      	ldrh	r0, [r0, #4]
 8003382:	4770      	bx	lr

08003384 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
    {
        return fontHeight + pixelsBelowBaseline;
 8003384:	7983      	ldrb	r3, [r0, #6]
 8003386:	8880      	ldrh	r0, [r0, #4]
 8003388:	4418      	add	r0, r3
    }
 800338a:	b280      	uxth	r0, r0
 800338c:	4770      	bx	lr

0800338e <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
 800338e:	79c0      	ldrb	r0, [r0, #7]
    }
 8003390:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8003394:	4770      	bx	lr

08003396 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
 8003396:	79c0      	ldrb	r0, [r0, #7]
    }
 8003398:	09c0      	lsrs	r0, r0, #7
 800339a:	4770      	bx	lr

0800339c <_ZN8touchgfx11Application19changeToStartScreenEv>:
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
    {
    }
 800339c:	4770      	bx	lr

0800339e <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
        (void)screenId; // Unused variable
    }
 800339e:	4770      	bx	lr

080033a0 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
 80033a0:	f500 7396 	add.w	r3, r0, #300	; 0x12c
 80033a4:	6808      	ldr	r0, [r1, #0]
 80033a6:	6849      	ldr	r1, [r1, #4]
 80033a8:	c303      	stmia	r3!, {r0, r1}
    }
 80033aa:	4770      	bx	lr

080033ac <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
 80033ac:	4770      	bx	lr

080033ae <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
 80033ae:	4770      	bx	lr

080033b0 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
 80033b0:	6041      	str	r1, [r0, #4]
    }
 80033b2:	4770      	bx	lr

080033b4 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 80033b4:	4770      	bx	lr
	...

080033b8 <_ZN23FrontendApplicationBase19changeToStartScreenEv>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80033b8:	4b06      	ldr	r3, [pc, #24]	; (80033d4 <_ZN23FrontendApplicationBase19changeToStartScreenEv+0x1c>)
 80033ba:	f8c0 0144 	str.w	r0, [r0, #324]	; 0x144
 80033be:	f8c0 3148 	str.w	r3, [r0, #328]	; 0x148
 80033c2:	2300      	movs	r3, #0
 80033c4:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
// rule

void FrontendApplicationBase::gotoruleScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoruleScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 80033c8:	f500 73a0 	add.w	r3, r0, #320	; 0x140
 80033cc:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c

    virtual void changeToStartScreen()
    {
        gotoruleScreenNoTransition();
    }
 80033d0:	4770      	bx	lr
 80033d2:	bf00      	nop
 80033d4:	080035c9 	.word	0x080035c9

080033d8 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
 80033d8:	2301      	movs	r3, #1
 80033da:	7203      	strb	r3, [r0, #8]
    }
 80033dc:	4770      	bx	lr

080033de <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
 80033de:	4770      	bx	lr

080033e0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 80033e0:	4770      	bx	lr

080033e2 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 80033e2:	b410      	push	{r4}
    {
        (pobject->*pmemfun)();
 80033e4:	6841      	ldr	r1, [r0, #4]
    virtual void execute()
 80033e6:	4603      	mov	r3, r0
        (pobject->*pmemfun)();
 80033e8:	68c2      	ldr	r2, [r0, #12]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	1054      	asrs	r4, r2, #1
 80033ee:	eb01 0062 	add.w	r0, r1, r2, asr #1
 80033f2:	07d2      	lsls	r2, r2, #31
 80033f4:	bf48      	it	mi
 80033f6:	590a      	ldrmi	r2, [r1, r4]
    }
 80033f8:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun)();
 80033fc:	bf48      	it	mi
 80033fe:	58d3      	ldrmi	r3, [r2, r3]
 8003400:	4718      	bx	r3

08003402 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
    {
        return (pobject != 0) && (pmemfun != 0);
 8003402:	6843      	ldr	r3, [r0, #4]
 8003404:	b12b      	cbz	r3, 8003412 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x10>
 8003406:	6883      	ldr	r3, [r0, #8]
 8003408:	b92b      	cbnz	r3, 8003416 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x14>
 800340a:	68c0      	ldr	r0, [r0, #12]
 800340c:	f000 0001 	and.w	r0, r0, #1
 8003410:	4770      	bx	lr
 8003412:	4618      	mov	r0, r3
 8003414:	4770      	bx	lr
 8003416:	2001      	movs	r0, #1
    }
 8003418:	4770      	bx	lr

0800341a <_ZN8touchgfx12NoTransitionD0Ev>:
 800341a:	b510      	push	{r4, lr}
 800341c:	4604      	mov	r4, r0
 800341e:	210c      	movs	r1, #12
 8003420:	f026 fe3a 	bl	802a098 <_ZdlPvj>
 8003424:	4620      	mov	r0, r4
 8003426:	bd10      	pop	{r4, pc}

08003428 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8003428:	b510      	push	{r4, lr}
 800342a:	4604      	mov	r4, r0
 800342c:	2110      	movs	r1, #16
 800342e:	f026 fe33 	bl	802a098 <_ZdlPvj>
 8003432:	4620      	mov	r0, r4
 8003434:	bd10      	pop	{r4, pc}

08003436 <_ZN23FrontendApplicationBaseD0Ev>:
    virtual ~FrontendApplicationBase() { }
 8003436:	b510      	push	{r4, lr}
 8003438:	4604      	mov	r4, r0
 800343a:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800343e:	f026 fe2b 	bl	802a098 <_ZdlPvj>
 8003442:	4620      	mov	r0, r4
 8003444:	bd10      	pop	{r4, pc}

08003446 <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
 8003446:	b508      	push	{r3, lr}
        Application::getInstance()->invalidate();
 8003448:	f017 ffd0 	bl	801b3ec <_ZN8touchgfx11Application11getInstanceEv>
    }
 800344c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        Application::getInstance()->invalidate();
 8003450:	f018 bb72 	b.w	801bb38 <_ZN8touchgfx11Application10invalidateEv>

08003454 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8003454:	b510      	push	{r4, lr}
 8003456:	4604      	mov	r4, r0
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8003458:	f8d0 013c 	ldr.w	r0, [r0, #316]	; 0x13c
 800345c:	b158      	cbz	r0, 8003476 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
 800345e:	6803      	ldr	r3, [r0, #0]
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	4798      	blx	r3
 8003464:	b138      	cbz	r0, 8003476 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
        {
            pendingScreenTransitionCallback->execute();
 8003466:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
 800346a:	6803      	ldr	r3, [r0, #0]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8003470:	2300      	movs	r3, #0
 8003472:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    }
 8003476:	bd10      	pop	{r4, pc}

08003478 <_ZN23FrontendApplicationBase36gotoplayscreenScreenNoTransitionImplEv>:
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoplayscreenScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoplayscreenScreenNoTransitionImpl()
{
 8003478:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<playscreenView, playscreenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800347c:	e9d0 5a54 	ldrd	r5, sl, [r0, #336]	; 0x150
{
 8003480:	4607      	mov	r7, r0
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8003482:	68a8      	ldr	r0, [r5, #8]
 8003484:	6803      	ldr	r3, [r0, #0]
 8003486:	6a1b      	ldr	r3, [r3, #32]
 8003488:	4798      	blx	r3
 800348a:	f642 035f 	movw	r3, #10335	; 0x285f
 800348e:	4298      	cmp	r0, r3
 8003490:	d805      	bhi.n	800349e <_ZN23FrontendApplicationBase36gotoplayscreenScreenNoTransitionImplEv+0x26>
 8003492:	4b45      	ldr	r3, [pc, #276]	; (80035a8 <_ZN23FrontendApplicationBase36gotoplayscreenScreenNoTransitionImplEv+0x130>)
 8003494:	21a3      	movs	r1, #163	; 0xa3
 8003496:	4a45      	ldr	r2, [pc, #276]	; (80035ac <_ZN23FrontendApplicationBase36gotoplayscreenScreenNoTransitionImplEv+0x134>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8003498:	4845      	ldr	r0, [pc, #276]	; (80035b0 <_ZN23FrontendApplicationBase36gotoplayscreenScreenNoTransitionImplEv+0x138>)
 800349a:	f026 fe2b 	bl	802a0f4 <__assert_func>
 800349e:	6868      	ldr	r0, [r5, #4]
 80034a0:	6803      	ldr	r3, [r0, #0]
 80034a2:	6a1b      	ldr	r3, [r3, #32]
 80034a4:	4798      	blx	r3
 80034a6:	280f      	cmp	r0, #15
 80034a8:	d803      	bhi.n	80034b2 <_ZN23FrontendApplicationBase36gotoplayscreenScreenNoTransitionImplEv+0x3a>
 80034aa:	4b42      	ldr	r3, [pc, #264]	; (80035b4 <_ZN23FrontendApplicationBase36gotoplayscreenScreenNoTransitionImplEv+0x13c>)
 80034ac:	21a4      	movs	r1, #164	; 0xa4
 80034ae:	4a3f      	ldr	r2, [pc, #252]	; (80035ac <_ZN23FrontendApplicationBase36gotoplayscreenScreenNoTransitionImplEv+0x134>)
 80034b0:	e7f2      	b.n	8003498 <_ZN23FrontendApplicationBase36gotoplayscreenScreenNoTransitionImplEv+0x20>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 80034b2:	68e8      	ldr	r0, [r5, #12]
 80034b4:	6803      	ldr	r3, [r0, #0]
 80034b6:	6a1b      	ldr	r3, [r3, #32]
 80034b8:	4798      	blx	r3
 80034ba:	280b      	cmp	r0, #11
 80034bc:	d803      	bhi.n	80034c6 <_ZN23FrontendApplicationBase36gotoplayscreenScreenNoTransitionImplEv+0x4e>
 80034be:	4b3e      	ldr	r3, [pc, #248]	; (80035b8 <_ZN23FrontendApplicationBase36gotoplayscreenScreenNoTransitionImplEv+0x140>)
 80034c0:	21a5      	movs	r1, #165	; 0xa5
 80034c2:	4a3a      	ldr	r2, [pc, #232]	; (80035ac <_ZN23FrontendApplicationBase36gotoplayscreenScreenNoTransitionImplEv+0x134>)
 80034c4:	e7e8      	b.n	8003498 <_ZN23FrontendApplicationBase36gotoplayscreenScreenNoTransitionImplEv+0x20>
    if (*currentTrans)
 80034c6:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 80035c0 <_ZN23FrontendApplicationBase36gotoplayscreenScreenNoTransitionImplEv+0x148>
    Application::getInstance()->clearAllTimerWidgets();
 80034ca:	f017 ff8f 	bl	801b3ec <_ZN8touchgfx11Application11getInstanceEv>
 80034ce:	f017 ff93 	bl	801b3f8 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 80034d2:	f8d9 0000 	ldr.w	r0, [r9]
 80034d6:	b110      	cbz	r0, 80034de <_ZN23FrontendApplicationBase36gotoplayscreenScreenNoTransitionImplEv+0x66>
        (*currentTrans)->tearDown();
 80034d8:	6803      	ldr	r3, [r0, #0]
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	4798      	blx	r3
    if (*currentTrans)
 80034de:	f8d9 0000 	ldr.w	r0, [r9]
 80034e2:	b110      	cbz	r0, 80034ea <_ZN23FrontendApplicationBase36gotoplayscreenScreenNoTransitionImplEv+0x72>
        (*currentTrans)->~Transition();
 80034e4:	6803      	ldr	r3, [r0, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4798      	blx	r3
    if (*currentScreen)
 80034ea:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 80035c4 <_ZN23FrontendApplicationBase36gotoplayscreenScreenNoTransitionImplEv+0x14c>
 80034ee:	f8d8 0000 	ldr.w	r0, [r8]
 80034f2:	b110      	cbz	r0, 80034fa <_ZN23FrontendApplicationBase36gotoplayscreenScreenNoTransitionImplEv+0x82>
        (*currentScreen)->tearDownScreen();
 80034f4:	6803      	ldr	r3, [r0, #0]
 80034f6:	695b      	ldr	r3, [r3, #20]
 80034f8:	4798      	blx	r3
    if (*currentPresenter)
 80034fa:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
 80034fe:	b110      	cbz	r0, 8003506 <_ZN23FrontendApplicationBase36gotoplayscreenScreenNoTransitionImplEv+0x8e>
        (*currentPresenter)->deactivate();
 8003500:	6803      	ldr	r3, [r0, #0]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	4798      	blx	r3
    if (*currentScreen)
 8003506:	f8d8 0000 	ldr.w	r0, [r8]
 800350a:	b110      	cbz	r0, 8003512 <_ZN23FrontendApplicationBase36gotoplayscreenScreenNoTransitionImplEv+0x9a>
        (*currentScreen)->~Screen();
 800350c:	6803      	ldr	r3, [r0, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4798      	blx	r3
    if (*currentPresenter)
 8003512:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
 8003516:	b110      	cbz	r0, 800351e <_ZN23FrontendApplicationBase36gotoplayscreenScreenNoTransitionImplEv+0xa6>
        (*currentPresenter)->~Presenter();
 8003518:	6803      	ldr	r3, [r0, #0]
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800351e:	68e8      	ldr	r0, [r5, #12]
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
 8003520:	2100      	movs	r1, #0
        : screenContainer(0), done(false)
 8003522:	f04f 0b00 	mov.w	fp, #0
 8003526:	6803      	ldr	r3, [r0, #0]
 8003528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352a:	4798      	blx	r3
 800352c:	4b23      	ldr	r3, [pc, #140]	; (80035bc <_ZN23FrontendApplicationBase36gotoplayscreenScreenNoTransitionImplEv+0x144>)
 800352e:	4604      	mov	r4, r0
 8003530:	f8c0 b004 	str.w	fp, [r0, #4]
 8003534:	6003      	str	r3, [r0, #0]
 8003536:	4659      	mov	r1, fp
 8003538:	f880 b008 	strb.w	fp, [r0, #8]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800353c:	68a8      	ldr	r0, [r5, #8]
 800353e:	6803      	ldr	r3, [r0, #0]
 8003540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003542:	4798      	blx	r3
 8003544:	4606      	mov	r6, r0
 8003546:	f001 facb 	bl	8004ae0 <_ZN14playscreenViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800354a:	6868      	ldr	r0, [r5, #4]
 800354c:	4659      	mov	r1, fp
 800354e:	6803      	ldr	r3, [r0, #0]
 8003550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003552:	4798      	blx	r3
 8003554:	4605      	mov	r5, r0
 8003556:	4631      	mov	r1, r6
 8003558:	f001 fa94 	bl	8004a84 <_ZN19playscreenPresenterC1ER14playscreenView>
    *currentTrans = newTransition;
 800355c:	f8c9 4000 	str.w	r4, [r9]
    *currentPresenter = newPresenter;
 8003560:	f8c7 5138 	str.w	r5, [r7, #312]	; 0x138
    *currentScreen = newScreen;
 8003564:	f8c8 6000 	str.w	r6, [r8]
    model->bind(newPresenter);
 8003568:	b1e5      	cbz	r5, 80035a4 <_ZN23FrontendApplicationBase36gotoplayscreenScreenNoTransitionImplEv+0x12c>
 800356a:	1d2b      	adds	r3, r5, #4
public:
    Model();

    void bind(ModelListener* listener)
    {
        modelListener = listener;
 800356c:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 8003570:	4630      	mov	r0, r6
 8003572:	6833      	ldr	r3, [r6, #0]
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
 8003574:	f8c5 a008 	str.w	sl, [r5, #8]
 8003578:	68db      	ldr	r3, [r3, #12]
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
    {
        presenter = &newPresenter;
 800357a:	63f5      	str	r5, [r6, #60]	; 0x3c
 800357c:	4798      	blx	r3
    newPresenter->activate();
 800357e:	682b      	ldr	r3, [r5, #0]
 8003580:	4628      	mov	r0, r5
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8003586:	4621      	mov	r1, r4
 8003588:	4630      	mov	r0, r6
 800358a:	f019 fc01 	bl	801cd90 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800358e:	6823      	ldr	r3, [r4, #0]
 8003590:	4620      	mov	r0, r4
 8003592:	691b      	ldr	r3, [r3, #16]
 8003594:	4798      	blx	r3
    newTransition->invalidate();
 8003596:	6823      	ldr	r3, [r4, #0]
 8003598:	4620      	mov	r0, r4
 800359a:	695b      	ldr	r3, [r3, #20]
}
 800359c:	b001      	add	sp, #4
 800359e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035a2:	4718      	bx	r3
    model->bind(newPresenter);
 80035a4:	462b      	mov	r3, r5
 80035a6:	e7e1      	b.n	800356c <_ZN23FrontendApplicationBase36gotoplayscreenScreenNoTransitionImplEv+0xf4>
 80035a8:	0802d02c 	.word	0x0802d02c
 80035ac:	0802d0ba 	.word	0x0802d0ba
 80035b0:	0802d1c4 	.word	0x0802d1c4
 80035b4:	0802d20b 	.word	0x0802d20b
 80035b8:	0802d2ae 	.word	0x0802d2ae
 80035bc:	0802d4bc 	.word	0x0802d4bc
 80035c0:	2001780c 	.word	0x2001780c
 80035c4:	20017808 	.word	0x20017808

080035c8 <_ZN23FrontendApplicationBase30gotoruleScreenNoTransitionImplEv>:
{
 80035c8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<ruleView, rulePresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 80035cc:	e9d0 5a54 	ldrd	r5, sl, [r0, #336]	; 0x150
{
 80035d0:	4607      	mov	r7, r0
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80035d2:	68a8      	ldr	r0, [r5, #8]
 80035d4:	6803      	ldr	r3, [r0, #0]
 80035d6:	6a1b      	ldr	r3, [r3, #32]
 80035d8:	4798      	blx	r3
 80035da:	28db      	cmp	r0, #219	; 0xdb
 80035dc:	d805      	bhi.n	80035ea <_ZN23FrontendApplicationBase30gotoruleScreenNoTransitionImplEv+0x22>
 80035de:	4b45      	ldr	r3, [pc, #276]	; (80036f4 <_ZN23FrontendApplicationBase30gotoruleScreenNoTransitionImplEv+0x12c>)
 80035e0:	21a3      	movs	r1, #163	; 0xa3
 80035e2:	4a45      	ldr	r2, [pc, #276]	; (80036f8 <_ZN23FrontendApplicationBase30gotoruleScreenNoTransitionImplEv+0x130>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 80035e4:	4845      	ldr	r0, [pc, #276]	; (80036fc <_ZN23FrontendApplicationBase30gotoruleScreenNoTransitionImplEv+0x134>)
 80035e6:	f026 fd85 	bl	802a0f4 <__assert_func>
 80035ea:	6868      	ldr	r0, [r5, #4]
 80035ec:	6803      	ldr	r3, [r0, #0]
 80035ee:	6a1b      	ldr	r3, [r3, #32]
 80035f0:	4798      	blx	r3
 80035f2:	280f      	cmp	r0, #15
 80035f4:	d803      	bhi.n	80035fe <_ZN23FrontendApplicationBase30gotoruleScreenNoTransitionImplEv+0x36>
 80035f6:	4b42      	ldr	r3, [pc, #264]	; (8003700 <_ZN23FrontendApplicationBase30gotoruleScreenNoTransitionImplEv+0x138>)
 80035f8:	21a4      	movs	r1, #164	; 0xa4
 80035fa:	4a3f      	ldr	r2, [pc, #252]	; (80036f8 <_ZN23FrontendApplicationBase30gotoruleScreenNoTransitionImplEv+0x130>)
 80035fc:	e7f2      	b.n	80035e4 <_ZN23FrontendApplicationBase30gotoruleScreenNoTransitionImplEv+0x1c>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 80035fe:	68e8      	ldr	r0, [r5, #12]
 8003600:	6803      	ldr	r3, [r0, #0]
 8003602:	6a1b      	ldr	r3, [r3, #32]
 8003604:	4798      	blx	r3
 8003606:	280b      	cmp	r0, #11
 8003608:	d803      	bhi.n	8003612 <_ZN23FrontendApplicationBase30gotoruleScreenNoTransitionImplEv+0x4a>
 800360a:	4b3e      	ldr	r3, [pc, #248]	; (8003704 <_ZN23FrontendApplicationBase30gotoruleScreenNoTransitionImplEv+0x13c>)
 800360c:	21a5      	movs	r1, #165	; 0xa5
 800360e:	4a3a      	ldr	r2, [pc, #232]	; (80036f8 <_ZN23FrontendApplicationBase30gotoruleScreenNoTransitionImplEv+0x130>)
 8003610:	e7e8      	b.n	80035e4 <_ZN23FrontendApplicationBase30gotoruleScreenNoTransitionImplEv+0x1c>
    if (*currentTrans)
 8003612:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 800370c <_ZN23FrontendApplicationBase30gotoruleScreenNoTransitionImplEv+0x144>
    Application::getInstance()->clearAllTimerWidgets();
 8003616:	f017 fee9 	bl	801b3ec <_ZN8touchgfx11Application11getInstanceEv>
 800361a:	f017 feed 	bl	801b3f8 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800361e:	f8d9 0000 	ldr.w	r0, [r9]
 8003622:	b110      	cbz	r0, 800362a <_ZN23FrontendApplicationBase30gotoruleScreenNoTransitionImplEv+0x62>
        (*currentTrans)->tearDown();
 8003624:	6803      	ldr	r3, [r0, #0]
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	4798      	blx	r3
    if (*currentTrans)
 800362a:	f8d9 0000 	ldr.w	r0, [r9]
 800362e:	b110      	cbz	r0, 8003636 <_ZN23FrontendApplicationBase30gotoruleScreenNoTransitionImplEv+0x6e>
        (*currentTrans)->~Transition();
 8003630:	6803      	ldr	r3, [r0, #0]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4798      	blx	r3
    if (*currentScreen)
 8003636:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 8003710 <_ZN23FrontendApplicationBase30gotoruleScreenNoTransitionImplEv+0x148>
 800363a:	f8d8 0000 	ldr.w	r0, [r8]
 800363e:	b110      	cbz	r0, 8003646 <_ZN23FrontendApplicationBase30gotoruleScreenNoTransitionImplEv+0x7e>
        (*currentScreen)->tearDownScreen();
 8003640:	6803      	ldr	r3, [r0, #0]
 8003642:	695b      	ldr	r3, [r3, #20]
 8003644:	4798      	blx	r3
    if (*currentPresenter)
 8003646:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
 800364a:	b110      	cbz	r0, 8003652 <_ZN23FrontendApplicationBase30gotoruleScreenNoTransitionImplEv+0x8a>
        (*currentPresenter)->deactivate();
 800364c:	6803      	ldr	r3, [r0, #0]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	4798      	blx	r3
    if (*currentScreen)
 8003652:	f8d8 0000 	ldr.w	r0, [r8]
 8003656:	b110      	cbz	r0, 800365e <_ZN23FrontendApplicationBase30gotoruleScreenNoTransitionImplEv+0x96>
        (*currentScreen)->~Screen();
 8003658:	6803      	ldr	r3, [r0, #0]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4798      	blx	r3
    if (*currentPresenter)
 800365e:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
 8003662:	b110      	cbz	r0, 800366a <_ZN23FrontendApplicationBase30gotoruleScreenNoTransitionImplEv+0xa2>
        (*currentPresenter)->~Presenter();
 8003664:	6803      	ldr	r3, [r0, #0]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800366a:	68e8      	ldr	r0, [r5, #12]
 800366c:	2100      	movs	r1, #0
 800366e:	f04f 0b00 	mov.w	fp, #0
 8003672:	6803      	ldr	r3, [r0, #0]
 8003674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003676:	4798      	blx	r3
 8003678:	4b23      	ldr	r3, [pc, #140]	; (8003708 <_ZN23FrontendApplicationBase30gotoruleScreenNoTransitionImplEv+0x140>)
 800367a:	4604      	mov	r4, r0
 800367c:	f8c0 b004 	str.w	fp, [r0, #4]
 8003680:	6003      	str	r3, [r0, #0]
 8003682:	4659      	mov	r1, fp
 8003684:	f880 b008 	strb.w	fp, [r0, #8]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8003688:	68a8      	ldr	r0, [r5, #8]
 800368a:	6803      	ldr	r3, [r0, #0]
 800368c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368e:	4798      	blx	r3
 8003690:	4606      	mov	r6, r0
 8003692:	f001 fa57 	bl	8004b44 <_ZN8ruleViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8003696:	6868      	ldr	r0, [r5, #4]
 8003698:	4659      	mov	r1, fp
 800369a:	6803      	ldr	r3, [r0, #0]
 800369c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369e:	4798      	blx	r3
 80036a0:	4605      	mov	r5, r0
 80036a2:	4631      	mov	r1, r6
 80036a4:	f001 fa34 	bl	8004b10 <_ZN13rulePresenterC1ER8ruleView>
    *currentTrans = newTransition;
 80036a8:	f8c9 4000 	str.w	r4, [r9]
    *currentPresenter = newPresenter;
 80036ac:	f8c7 5138 	str.w	r5, [r7, #312]	; 0x138
    *currentScreen = newScreen;
 80036b0:	f8c8 6000 	str.w	r6, [r8]
    model->bind(newPresenter);
 80036b4:	b1e5      	cbz	r5, 80036f0 <_ZN23FrontendApplicationBase30gotoruleScreenNoTransitionImplEv+0x128>
 80036b6:	1d2b      	adds	r3, r5, #4
 80036b8:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 80036bc:	4630      	mov	r0, r6
 80036be:	6833      	ldr	r3, [r6, #0]
 80036c0:	f8c5 a008 	str.w	sl, [r5, #8]
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	63f5      	str	r5, [r6, #60]	; 0x3c
 80036c8:	4798      	blx	r3
    newPresenter->activate();
 80036ca:	682b      	ldr	r3, [r5, #0]
 80036cc:	4628      	mov	r0, r5
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 80036d2:	4621      	mov	r1, r4
 80036d4:	4630      	mov	r0, r6
 80036d6:	f019 fb5b 	bl	801cd90 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 80036da:	6823      	ldr	r3, [r4, #0]
 80036dc:	4620      	mov	r0, r4
 80036de:	691b      	ldr	r3, [r3, #16]
 80036e0:	4798      	blx	r3
    newTransition->invalidate();
 80036e2:	6823      	ldr	r3, [r4, #0]
 80036e4:	4620      	mov	r0, r4
 80036e6:	695b      	ldr	r3, [r3, #20]
}
 80036e8:	b001      	add	sp, #4
 80036ea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036ee:	4718      	bx	r3
    model->bind(newPresenter);
 80036f0:	462b      	mov	r3, r5
 80036f2:	e7e1      	b.n	80036b8 <_ZN23FrontendApplicationBase30gotoruleScreenNoTransitionImplEv+0xf0>
 80036f4:	0802d02c 	.word	0x0802d02c
 80036f8:	0802d351 	.word	0x0802d351
 80036fc:	0802d1c4 	.word	0x0802d1c4
 8003700:	0802d20b 	.word	0x0802d20b
 8003704:	0802d2ae 	.word	0x0802d2ae
 8003708:	0802d4bc 	.word	0x0802d4bc
 800370c:	2001780c 	.word	0x2001780c
 8003710:	20017808 	.word	0x20017808

08003714 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8003714:	b570      	push	{r4, r5, r6, lr}
 8003716:	4604      	mov	r4, r0
 8003718:	460d      	mov	r5, r1
 800371a:	4616      	mov	r6, r2
          pendingScreenTransitionCallback(0)
 800371c:	f017 fe88 	bl	801b430 <_ZN8touchgfx11ApplicationC1Ev>
        instance = this;
 8003720:	4b0e      	ldr	r3, [pc, #56]	; (800375c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x48>)
          pendingScreenTransitionCallback(0)
 8003722:	2100      	movs	r1, #0
        instance = this;
 8003724:	601c      	str	r4, [r3, #0]
      model(m)
 8003726:	4b0e      	ldr	r3, [pc, #56]	; (8003760 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x4c>)
 8003728:	e9c4 6554 	strd	r6, r5, [r4, #336]	; 0x150
        return instance;
 800372c:	4d0d      	ldr	r5, [pc, #52]	; (8003764 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x50>)
 800372e:	6023      	str	r3, [r4, #0]
 8003730:	6828      	ldr	r0, [r5, #0]
        : pobject(0), pmemfun(0)
 8003732:	4b0d      	ldr	r3, [pc, #52]	; (8003768 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x54>)
 8003734:	e9c4 1152 	strd	r1, r1, [r4, #328]	; 0x148
 8003738:	e9c4 3150 	strd	r3, r1, [r4, #320]	; 0x140
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 800373c:	6803      	ldr	r3, [r0, #0]
          pendingScreenTransitionCallback(0)
 800373e:	e9c4 114e 	strd	r1, r1, [r4, #312]	; 0x138
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	4798      	blx	r3
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8003746:	682b      	ldr	r3, [r5, #0]
 8003748:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800374c:	b10a      	cbz	r2, 8003752 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x3e>
 800374e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003750:	b900      	cbnz	r0, 8003754 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x40>
        return instance->lcdRef;
 8003752:	6898      	ldr	r0, [r3, #8]
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 8003754:	f01f f9af 	bl	8022ab6 <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
}
 8003758:	4620      	mov	r0, r4
 800375a:	bd70      	pop	{r4, r5, r6, pc}
 800375c:	20017818 	.word	0x20017818
 8003760:	0802d470 	.word	0x0802d470
 8003764:	200177c4 	.word	0x200177c4
 8003768:	0802d458 	.word	0x0802d458

0800376c <_ZN23FrontendApplicationBase26gotoruleScreenNoTransitionEv>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800376c:	4b06      	ldr	r3, [pc, #24]	; (8003788 <_ZN23FrontendApplicationBase26gotoruleScreenNoTransitionEv+0x1c>)
 800376e:	f8c0 0144 	str.w	r0, [r0, #324]	; 0x144
 8003772:	f8c0 3148 	str.w	r3, [r0, #328]	; 0x148
 8003776:	2300      	movs	r3, #0
 8003778:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
    pendingScreenTransitionCallback = &transitionCallback;
 800377c:	f500 73a0 	add.w	r3, r0, #320	; 0x140
 8003780:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
}
 8003784:	4770      	bx	lr
 8003786:	bf00      	nop
 8003788:	080035c9 	.word	0x080035c9

0800378c <_ZN23FrontendApplicationBase32gotoplayscreenScreenNoTransitionEv>:
 800378c:	4b06      	ldr	r3, [pc, #24]	; (80037a8 <_ZN23FrontendApplicationBase32gotoplayscreenScreenNoTransitionEv+0x1c>)
 800378e:	f8c0 0144 	str.w	r0, [r0, #324]	; 0x144
 8003792:	f8c0 3148 	str.w	r3, [r0, #328]	; 0x148
 8003796:	2300      	movs	r3, #0
 8003798:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
    pendingScreenTransitionCallback = &transitionCallback;
 800379c:	f500 73a0 	add.w	r3, r0, #320	; 0x140
 80037a0:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
}
 80037a4:	4770      	bx	lr
 80037a6:	bf00      	nop
 80037a8:	08003479 	.word	0x08003479

080037ac <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
 80037ac:	6a00      	ldr	r0, [r0, #32]
 80037ae:	4770      	bx	lr

080037b0 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
 80037b0:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80037b2:	4770      	bx	lr

080037b4 <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 80037b4:	4770      	bx	lr

080037b6 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 80037b6:	888b      	ldrh	r3, [r1, #4]
 80037b8:	6980      	ldr	r0, [r0, #24]
 80037ba:	0adb      	lsrs	r3, r3, #11
 80037bc:	680a      	ldr	r2, [r1, #0]
 80037be:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
 80037c2:	4410      	add	r0, r2
 80037c4:	4770      	bx	lr

080037c6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 80037c6:	b510      	push	{r4, lr}
    if (!glyph || glyph->kerningTableSize == 0)
 80037c8:	b1c2      	cbz	r2, 80037fc <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
 80037ca:	7b13      	ldrb	r3, [r2, #12]
 80037cc:	b1b3      	cbz	r3, 80037fc <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 80037ce:	7b54      	ldrb	r4, [r2, #13]
 80037d0:	7ad2      	ldrb	r2, [r2, #11]
 80037d2:	0224      	lsls	r4, r4, #8
 80037d4:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 80037d8:	4314      	orrs	r4, r2
 80037da:	69c2      	ldr	r2, [r0, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 80037dc:	b298      	uxth	r0, r3
    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 80037de:	eb02 0284 	add.w	r2, r2, r4, lsl #2
    {
        if (prevChar == kerndata->unicodePrevChar)
 80037e2:	8813      	ldrh	r3, [r2, #0]
 80037e4:	428b      	cmp	r3, r1
 80037e6:	d102      	bne.n	80037ee <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x28>
        {
            return kerndata->distance;
 80037e8:	f992 0002 	ldrsb.w	r0, [r2, #2]
        {
            break;
        }
    }
    return 0;
}
 80037ec:	bd10      	pop	{r4, pc}
        if (prevChar < kerndata->unicodePrevChar)
 80037ee:	d805      	bhi.n	80037fc <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 80037f0:	3801      	subs	r0, #1
 80037f2:	3204      	adds	r2, #4
 80037f4:	b280      	uxth	r0, r0
 80037f6:	2800      	cmp	r0, #0
 80037f8:	d1f3      	bne.n	80037e2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 80037fa:	e7f7      	b.n	80037ec <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return 0;
 80037fc:	2000      	movs	r0, #0
 80037fe:	e7f5      	b.n	80037ec <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>

08003800 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8003800:	b510      	push	{r4, lr}
 8003802:	4604      	mov	r4, r0
 8003804:	2128      	movs	r1, #40	; 0x28
 8003806:	f026 fc47 	bl	802a098 <_ZdlPvj>
 800380a:	4620      	mov	r0, r4
 800380c:	bd10      	pop	{r4, pc}
	...

08003810 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8003810:	b530      	push	{r4, r5, lr}
 8003812:	b089      	sub	sp, #36	; 0x24
 8003814:	4604      	mov	r4, r0
      arabicTable(formsTable)
 8003816:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 800381a:	9506      	str	r5, [sp, #24]
 800381c:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 8003820:	9505      	str	r5, [sp, #20]
 8003822:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 8003826:	9504      	str	r5, [sp, #16]
 8003828:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 800382c:	9503      	str	r5, [sp, #12]
 800382e:	f89d 5038 	ldrb.w	r5, [sp, #56]	; 0x38
 8003832:	9502      	str	r5, [sp, #8]
 8003834:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 8003838:	9501      	str	r5, [sp, #4]
 800383a:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 800383e:	9500      	str	r5, [sp, #0]
 8003840:	f018 fe1a 	bl	801c478 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 8003844:	4b06      	ldr	r3, [pc, #24]	; (8003860 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x50>)
}
 8003846:	4620      	mov	r0, r4
      arabicTable(formsTable)
 8003848:	6023      	str	r3, [r4, #0]
 800384a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800384c:	61a3      	str	r3, [r4, #24]
 800384e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003850:	61e3      	str	r3, [r4, #28]
 8003852:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003854:	6223      	str	r3, [r4, #32]
 8003856:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003858:	6263      	str	r3, [r4, #36]	; 0x24
}
 800385a:	b009      	add	sp, #36	; 0x24
 800385c:	bd30      	pop	{r4, r5, pc}
 800385e:	bf00      	nop
 8003860:	0802d4e0 	.word	0x0802d4e0

08003864 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8003864:	4770      	bx	lr
	...

08003868 <_Z23getFont_verdana_10_4bppv>:
{
 8003868:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800386a:	4d15      	ldr	r5, [pc, #84]	; (80038c0 <_Z23getFont_verdana_10_4bppv+0x58>)
{
 800386c:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800386e:	782c      	ldrb	r4, [r5, #0]
 8003870:	f3bf 8f5b 	dmb	ish
 8003874:	f014 0401 	ands.w	r4, r4, #1
 8003878:	d11e      	bne.n	80038b8 <_Z23getFont_verdana_10_4bppv+0x50>
 800387a:	4628      	mov	r0, r5
 800387c:	f026 fc0e 	bl	802a09c <__cxa_guard_acquire>
 8003880:	b1d0      	cbz	r0, 80038b8 <_Z23getFont_verdana_10_4bppv+0x50>
 8003882:	233f      	movs	r3, #63	; 0x3f
 8003884:	2201      	movs	r2, #1
 8003886:	490f      	ldr	r1, [pc, #60]	; (80038c4 <_Z23getFont_verdana_10_4bppv+0x5c>)
 8003888:	9307      	str	r3, [sp, #28]
 800388a:	4b0f      	ldr	r3, [pc, #60]	; (80038c8 <_Z23getFont_verdana_10_4bppv+0x60>)
 800388c:	480f      	ldr	r0, [pc, #60]	; (80038cc <_Z23getFont_verdana_10_4bppv+0x64>)
 800388e:	9306      	str	r3, [sp, #24]
 8003890:	4b0f      	ldr	r3, [pc, #60]	; (80038d0 <_Z23getFont_verdana_10_4bppv+0x68>)
 8003892:	9408      	str	r4, [sp, #32]
 8003894:	9403      	str	r4, [sp, #12]
 8003896:	9400      	str	r4, [sp, #0]
 8003898:	e9cd 4304 	strd	r4, r3, [sp, #16]
 800389c:	2304      	movs	r3, #4
 800389e:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 80038a2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80038a6:	230a      	movs	r3, #10
 80038a8:	f7ff ffb2 	bl	8003810 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80038ac:	4809      	ldr	r0, [pc, #36]	; (80038d4 <_Z23getFont_verdana_10_4bppv+0x6c>)
 80038ae:	f026 fc3f 	bl	802a130 <atexit>
 80038b2:	4628      	mov	r0, r5
 80038b4:	f026 fbfe 	bl	802a0b4 <__cxa_guard_release>
    return verdana_10_4bpp;
}
 80038b8:	4804      	ldr	r0, [pc, #16]	; (80038cc <_Z23getFont_verdana_10_4bppv+0x64>)
 80038ba:	b00d      	add	sp, #52	; 0x34
 80038bc:	bd30      	pop	{r4, r5, pc}
 80038be:	bf00      	nop
 80038c0:	2000447c 	.word	0x2000447c
 80038c4:	900b4538 	.word	0x900b4538
 80038c8:	080303b4 	.word	0x080303b4
 80038cc:	20004480 	.word	0x20004480
 80038d0:	080303c0 	.word	0x080303c0
 80038d4:	08003865 	.word	0x08003865

080038d8 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80038d8:	4770      	bx	lr
	...

080038dc <_Z23getFont_verdana_20_4bppv>:
{
 80038dc:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80038de:	4d15      	ldr	r5, [pc, #84]	; (8003934 <_Z23getFont_verdana_20_4bppv+0x58>)
{
 80038e0:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80038e2:	782c      	ldrb	r4, [r5, #0]
 80038e4:	f3bf 8f5b 	dmb	ish
 80038e8:	f014 0401 	ands.w	r4, r4, #1
 80038ec:	d11e      	bne.n	800392c <_Z23getFont_verdana_20_4bppv+0x50>
 80038ee:	4628      	mov	r0, r5
 80038f0:	f026 fbd4 	bl	802a09c <__cxa_guard_acquire>
 80038f4:	b1d0      	cbz	r0, 800392c <_Z23getFont_verdana_20_4bppv+0x50>
 80038f6:	233f      	movs	r3, #63	; 0x3f
 80038f8:	2201      	movs	r2, #1
 80038fa:	490f      	ldr	r1, [pc, #60]	; (8003938 <_Z23getFont_verdana_20_4bppv+0x5c>)
 80038fc:	9307      	str	r3, [sp, #28]
 80038fe:	4b0f      	ldr	r3, [pc, #60]	; (800393c <_Z23getFont_verdana_20_4bppv+0x60>)
 8003900:	480f      	ldr	r0, [pc, #60]	; (8003940 <_Z23getFont_verdana_20_4bppv+0x64>)
 8003902:	9306      	str	r3, [sp, #24]
 8003904:	4b0f      	ldr	r3, [pc, #60]	; (8003944 <_Z23getFont_verdana_20_4bppv+0x68>)
 8003906:	9408      	str	r4, [sp, #32]
 8003908:	9403      	str	r4, [sp, #12]
 800390a:	9400      	str	r4, [sp, #0]
 800390c:	e9cd 4304 	strd	r4, r3, [sp, #16]
 8003910:	2304      	movs	r3, #4
 8003912:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8003916:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800391a:	2314      	movs	r3, #20
 800391c:	f7ff ff78 	bl	8003810 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8003920:	4809      	ldr	r0, [pc, #36]	; (8003948 <_Z23getFont_verdana_20_4bppv+0x6c>)
 8003922:	f026 fc05 	bl	802a130 <atexit>
 8003926:	4628      	mov	r0, r5
 8003928:	f026 fbc4 	bl	802a0b4 <__cxa_guard_release>
    return verdana_20_4bpp;
}
 800392c:	4804      	ldr	r0, [pc, #16]	; (8003940 <_Z23getFont_verdana_20_4bppv+0x64>)
 800392e:	b00d      	add	sp, #52	; 0x34
 8003930:	bd30      	pop	{r4, r5, pc}
 8003932:	bf00      	nop
 8003934:	200044a8 	.word	0x200044a8
 8003938:	900b4548 	.word	0x900b4548
 800393c:	080303b8 	.word	0x080303b8
 8003940:	200044ac 	.word	0x200044ac
 8003944:	080303c4 	.word	0x080303c4
 8003948:	080038d9 	.word	0x080038d9

0800394c <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800394c:	4770      	bx	lr
	...

08003950 <_Z23getFont_verdana_40_4bppv>:
{
 8003950:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8003952:	4d15      	ldr	r5, [pc, #84]	; (80039a8 <_Z23getFont_verdana_40_4bppv+0x58>)
{
 8003954:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8003956:	782c      	ldrb	r4, [r5, #0]
 8003958:	f3bf 8f5b 	dmb	ish
 800395c:	f014 0401 	ands.w	r4, r4, #1
 8003960:	d11e      	bne.n	80039a0 <_Z23getFont_verdana_40_4bppv+0x50>
 8003962:	4628      	mov	r0, r5
 8003964:	f026 fb9a 	bl	802a09c <__cxa_guard_acquire>
 8003968:	b1d0      	cbz	r0, 80039a0 <_Z23getFont_verdana_40_4bppv+0x50>
 800396a:	233f      	movs	r3, #63	; 0x3f
 800396c:	2201      	movs	r2, #1
 800396e:	490f      	ldr	r1, [pc, #60]	; (80039ac <_Z23getFont_verdana_40_4bppv+0x5c>)
 8003970:	9307      	str	r3, [sp, #28]
 8003972:	4b0f      	ldr	r3, [pc, #60]	; (80039b0 <_Z23getFont_verdana_40_4bppv+0x60>)
 8003974:	480f      	ldr	r0, [pc, #60]	; (80039b4 <_Z23getFont_verdana_40_4bppv+0x64>)
 8003976:	9306      	str	r3, [sp, #24]
 8003978:	4b0f      	ldr	r3, [pc, #60]	; (80039b8 <_Z23getFont_verdana_40_4bppv+0x68>)
 800397a:	9408      	str	r4, [sp, #32]
 800397c:	9403      	str	r4, [sp, #12]
 800397e:	9400      	str	r4, [sp, #0]
 8003980:	e9cd 4304 	strd	r4, r3, [sp, #16]
 8003984:	2304      	movs	r3, #4
 8003986:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 800398a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800398e:	2328      	movs	r3, #40	; 0x28
 8003990:	f7ff ff3e 	bl	8003810 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8003994:	4809      	ldr	r0, [pc, #36]	; (80039bc <_Z23getFont_verdana_40_4bppv+0x6c>)
 8003996:	f026 fbcb 	bl	802a130 <atexit>
 800399a:	4628      	mov	r0, r5
 800399c:	f026 fb8a 	bl	802a0b4 <__cxa_guard_release>
    return verdana_40_4bpp;
}
 80039a0:	4804      	ldr	r0, [pc, #16]	; (80039b4 <_Z23getFont_verdana_40_4bppv+0x64>)
 80039a2:	b00d      	add	sp, #52	; 0x34
 80039a4:	bd30      	pop	{r4, r5, pc}
 80039a6:	bf00      	nop
 80039a8:	200044d4 	.word	0x200044d4
 80039ac:	900b4558 	.word	0x900b4558
 80039b0:	080303bc 	.word	0x080303bc
 80039b4:	200044d8 	.word	0x200044d8
 80039b8:	080303c8 	.word	0x080303c8
 80039bc:	0800394d 	.word	0x0800394d

080039c0 <_ZNK8touchgfx4Font12getGSUBTableEv>:
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
    {
        return 0;
    }
 80039c0:	2000      	movs	r0, #0
 80039c2:	4770      	bx	lr

080039c4 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return 0;
    }
 80039c4:	2000      	movs	r0, #0
 80039c6:	4770      	bx	lr

080039c8 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 80039c8:	b40e      	push	{r1, r2, r3}
 80039ca:	b503      	push	{r0, r1, lr}
 80039cc:	ab03      	add	r3, sp, #12
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 80039ce:	2100      	movs	r1, #0
{
 80039d0:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(pArg, text);
 80039d4:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 80039d6:	f018 fb7f 	bl	801c0d8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 80039da:	b002      	add	sp, #8
 80039dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80039e0:	b003      	add	sp, #12
 80039e2:	4770      	bx	lr

080039e4 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 80039e4:	b40c      	push	{r2, r3}
 80039e6:	b507      	push	{r0, r1, r2, lr}
 80039e8:	ab04      	add	r3, sp, #16
 80039ea:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 80039ee:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 80039f0:	f018 fb72 	bl	801c0d8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 80039f4:	b003      	add	sp, #12
 80039f6:	f85d eb04 	ldr.w	lr, [sp], #4
 80039fa:	b002      	add	sp, #8
 80039fc:	4770      	bx	lr
	...

08003a00 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
 8003a00:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
 8003a02:	b510      	push	{r4, lr}
 8003a04:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
 8003a06:	b373      	cbz	r3, 8003a66 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8003a08:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 8003a0a:	b92b      	cbnz	r3, 8003a18 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x18>
 8003a0c:	4b18      	ldr	r3, [pc, #96]	; (8003a70 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x70>)
 8003a0e:	21c0      	movs	r1, #192	; 0xc0
 8003a10:	4a18      	ldr	r2, [pc, #96]	; (8003a74 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x74>)
            return buffer[pos];
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8003a12:	4819      	ldr	r0, [pc, #100]	; (8003a78 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x78>)
 8003a14:	f026 fb6e 	bl	802a0f4 <__assert_func>
            return buffer[pos];
 8003a18:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8003a1a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8003a1e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003a20:	b30b      	cbz	r3, 8003a66 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
    {
        substituteGlyphs();
 8003a22:	f019 fe81 	bl	801d728 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
            assert(offset < used);
 8003a26:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d803      	bhi.n	8003a34 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x34>
 8003a2c:	4b13      	ldr	r3, [pc, #76]	; (8003a7c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 8003a2e:	21c5      	movs	r1, #197	; 0xc5
 8003a30:	4a13      	ldr	r2, [pc, #76]	; (8003a80 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x80>)
 8003a32:	e7ee      	b.n	8003a12 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
            const uint16_t index = pos + offset;
 8003a34:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 8003a36:	f640 103f 	movw	r0, #2367	; 0x93f
 8003a3a:	1c53      	adds	r3, r2, #1
 8003a3c:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
 8003a3e:	2b09      	cmp	r3, #9
 8003a40:	4619      	mov	r1, r3
 8003a42:	bf88      	it	hi
 8003a44:	f1a3 010a 	subhi.w	r1, r3, #10
 8003a48:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8003a4c:	8c49      	ldrh	r1, [r1, #34]	; 0x22
 8003a4e:	4281      	cmp	r1, r0
 8003a50:	d109      	bne.n	8003a66 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
 8003a52:	2b0a      	cmp	r3, #10
 8003a54:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8003a58:	bf28      	it	cs
 8003a5a:	2300      	movcs	r3, #0
            return buffer[pos];
 8003a5c:	8c50      	ldrh	r0, [r2, #34]	; 0x22
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
 8003a5e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8003a62:	8458      	strh	r0, [r3, #34]	; 0x22
            buffer[pos] = newChar;
 8003a64:	8451      	strh	r1, [r2, #34]	; 0x22
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
 8003a66:	4620      	mov	r0, r4
}
 8003a68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return getNextChar();
 8003a6c:	f019 bd5e 	b.w	801d52c <_ZN8touchgfx12TextProvider11getNextCharEv>
 8003a70:	0802d530 	.word	0x0802d530
 8003a74:	0802d539 	.word	0x0802d539
 8003a78:	0802d5e4 	.word	0x0802d5e4
 8003a7c:	0802d62e 	.word	0x0802d62e
 8003a80:	0802d63c 	.word	0x0802d63c

08003a84 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
 8003a84:	f019 bd1b 	b.w	801d4be <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08003a88 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8003a88:	b538      	push	{r3, r4, r5, lr}
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
 8003a8a:	bb18      	cbnz	r0, 8003ad4 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
    {
        if (languagesArray[id] != 0)
 8003a8c:	4b12      	ldr	r3, [pc, #72]	; (8003ad8 <_ZN8touchgfx5Texts11setLanguageEt+0x50>)
 8003a8e:	4813      	ldr	r0, [pc, #76]	; (8003adc <_ZN8touchgfx5Texts11setLanguageEt+0x54>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4913      	ldr	r1, [pc, #76]	; (8003ae0 <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
 8003a94:	b1b3      	cbz	r3, 8003ac4 <_ZN8touchgfx5Texts11setLanguageEt+0x3c>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8003a96:	681a      	ldr	r2, [r3, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8003a98:	689c      	ldr	r4, [r3, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8003a9a:	441a      	add	r2, r3
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8003a9c:	441c      	add	r4, r3
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8003a9e:	6002      	str	r2, [r0, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8003aa0:	685a      	ldr	r2, [r3, #4]
 8003aa2:	441a      	add	r2, r3
 8003aa4:	600a      	str	r2, [r1, #0]
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
 8003aa6:	4b0f      	ldr	r3, [pc, #60]	; (8003ae4 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8003aac:	f000 f82a 	bl	8003b04 <_ZN17TypedTextDatabase8getFontsEv>
 8003ab0:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8003ab2:	f000 f825 	bl	8003b00 <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
 8003ab6:	4b0c      	ldr	r3, [pc, #48]	; (8003ae8 <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 8003ab8:	601c      	str	r4, [r3, #0]
        fonts = f;
 8003aba:	4b0c      	ldr	r3, [pc, #48]	; (8003aec <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
 8003abc:	601d      	str	r5, [r3, #0]
        numberOfTypedTexts = n;
 8003abe:	4b0c      	ldr	r3, [pc, #48]	; (8003af0 <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
 8003ac0:	8018      	strh	r0, [r3, #0]
    }
}
 8003ac2:	e007      	b.n	8003ad4 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
            currentLanguagePtr = texts_all_languages;
 8003ac4:	4b0b      	ldr	r3, [pc, #44]	; (8003af4 <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
 8003ac6:	6003      	str	r3, [r0, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8003ac8:	4b0b      	ldr	r3, [pc, #44]	; (8003af8 <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
 8003aca:	600b      	str	r3, [r1, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8003acc:	4b0b      	ldr	r3, [pc, #44]	; (8003afc <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
 8003ace:	681c      	ldr	r4, [r3, #0]
    if (currentLanguageTypedText)
 8003ad0:	2c00      	cmp	r4, #0
 8003ad2:	d1e8      	bne.n	8003aa6 <_ZN8touchgfx5Texts11setLanguageEt+0x1e>
}
 8003ad4:	bd38      	pop	{r3, r4, r5, pc}
 8003ad6:	bf00      	nop
 8003ad8:	20004500 	.word	0x20004500
 8003adc:	20004504 	.word	0x20004504
 8003ae0:	20004508 	.word	0x20004508
 8003ae4:	2000450c 	.word	0x2000450c
 8003ae8:	2001781c 	.word	0x2001781c
 8003aec:	20017824 	.word	0x20017824
 8003af0:	20017820 	.word	0x20017820
 8003af4:	900b456c 	.word	0x900b456c
 8003af8:	900b4568 	.word	0x900b4568
 8003afc:	900b4574 	.word	0x900b4574

08003b00 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}

uint16_t getInstanceSize()
{
    return 0;
}
 8003b00:	2000      	movs	r0, #0
 8003b02:	4770      	bx	lr

08003b04 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
    return touchgfx_fonts;
}
 8003b04:	4800      	ldr	r0, [pc, #0]	; (8003b08 <_ZN17TypedTextDatabase8getFontsEv+0x4>)
 8003b06:	4770      	bx	lr
 8003b08:	20004510 	.word	0x20004510

08003b0c <_GLOBAL__sub_I_touchgfx_fonts>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8003b0c:	b510      	push	{r4, lr}
};
 8003b0e:	4c05      	ldr	r4, [pc, #20]	; (8003b24 <_GLOBAL__sub_I_touchgfx_fonts+0x18>)
    &(getFont_verdana_20_4bpp()),
 8003b10:	f7ff fee4 	bl	80038dc <_Z23getFont_verdana_20_4bppv>
};
 8003b14:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_40_4bpp()),
 8003b16:	f7ff ff1b 	bl	8003950 <_Z23getFont_verdana_40_4bppv>
};
 8003b1a:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_10_4bpp())
 8003b1c:	f7ff fea4 	bl	8003868 <_Z23getFont_verdana_10_4bppv>
};
 8003b20:	60a0      	str	r0, [r4, #8]
} // namespace TypedTextDatabase
 8003b22:	bd10      	pop	{r4, pc}
 8003b24:	20004510 	.word	0x20004510

08003b28 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
 8003b28:	2000      	movs	r0, #0
 8003b2a:	4770      	bx	lr

08003b2c <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
 8003b2c:	8081      	strh	r1, [r0, #4]
    }
 8003b2e:	4770      	bx	lr

08003b30 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
 8003b30:	80c1      	strh	r1, [r0, #6]
    }
 8003b32:	4770      	bx	lr

08003b34 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
 8003b34:	8101      	strh	r1, [r0, #8]
    }
 8003b36:	4770      	bx	lr

08003b38 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
 8003b38:	8141      	strh	r1, [r0, #10]
    }
 8003b3a:	4770      	bx	lr

08003b3c <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
 8003b3c:	4770      	bx	lr

08003b3e <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
 8003b3e:	4770      	bx	lr

08003b40 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
 8003b40:	4770      	bx	lr

08003b42 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
 8003b42:	4770      	bx	lr

08003b44 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
 8003b44:	4770      	bx	lr

08003b46 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8003b46:	b410      	push	{r4}
    {
        moveRelative(x - rect.x, y - rect.y);
 8003b48:	88c4      	ldrh	r4, [r0, #6]
 8003b4a:	6803      	ldr	r3, [r0, #0]
 8003b4c:	1b12      	subs	r2, r2, r4
 8003b4e:	8884      	ldrh	r4, [r0, #4]
 8003b50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b52:	1b09      	subs	r1, r1, r4
 8003b54:	b212      	sxth	r2, r2
    }
 8003b56:	f85d 4b04 	ldr.w	r4, [sp], #4
        moveRelative(x - rect.x, y - rect.y);
 8003b5a:	b209      	sxth	r1, r1
 8003b5c:	4718      	bx	r3

08003b5e <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 8003b5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003b62:	8183      	strh	r3, [r0, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8003b64:	f04f 33ff 	mov.w	r3, #4294967295
 8003b68:	6203      	str	r3, [r0, #32]
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
 8003b6a:	6813      	ldr	r3, [r2, #0]
 8003b6c:	61c3      	str	r3, [r0, #28]
        *nextPreviousElement = this;
 8003b6e:	6010      	str	r0, [r2, #0]
    }
 8003b70:	4770      	bx	lr

08003b72 <_ZN8touchgfx6Screen11setupScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
    {
    }
 8003b72:	4770      	bx	lr

08003b74 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
 8003b74:	4770      	bx	lr

08003b76 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
 8003b76:	4770      	bx	lr

08003b78 <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
 8003b78:	4770      	bx	lr

08003b7a <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
        (void)key; // Unused variable
    }
 8003b7a:	4770      	bx	lr

08003b7c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
    {
        if (isVisible() && isTouchable())
 8003b7c:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8003b80:	b11a      	cbz	r2, 8003b8a <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
 8003b82:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 8003b86:	b102      	cbz	r2, 8003b8a <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
 8003b88:	6018      	str	r0, [r3, #0]
        }
    }
 8003b8a:	4770      	bx	lr

08003b8c <_ZNK8touchgfx15AbstractPainter18getRenderingMethodEv>:
     * @return HARDWARE if painter uses hardware based drawing, SOFTWARE otherwise.
     */
    virtual HAL::RenderingMethod getRenderingMethod() const
    {
        return HAL::SOFTWARE;
    }
 8003b8c:	2000      	movs	r0, #0
 8003b8e:	4770      	bx	lr

08003b90 <_ZNK8touchgfx15AbstractPainter5setupERKNS_4RectE>:
     *
     * @see AbstractPainter::paint, AbstractPainter::tearDown
     */
    virtual bool setup(const Rect& widgetRect) const
    {
        widgetWidth = widgetRect.width;
 8003b90:	888b      	ldrh	r3, [r1, #4]
 8003b92:	8083      	strh	r3, [r0, #4]
        return true;
    }
 8003b94:	2001      	movs	r0, #1
 8003b96:	4770      	bx	lr

08003b98 <_ZNK8touchgfx15AbstractPainter8tearDownEv>:
     * @see AbstractPainter::paint, AbstractPainter::setup
     */
    virtual void tearDown() const
    {
        return;
    }
 8003b98:	4770      	bx	lr

08003b9a <_ZN18playscreenViewBaseD1Ev>:

class playscreenViewBase : public touchgfx::View<playscreenPresenter>
{
public:
    playscreenViewBase();
    virtual ~playscreenViewBase() {}
 8003b9a:	4770      	bx	lr

08003b9c <_ZN18playscreenViewBase11setupScreenEv>:
}

void playscreenViewBase::setupScreen()
{

}
 8003b9c:	4770      	bx	lr

08003b9e <_ZN18playscreenViewBaseD0Ev>:
 8003b9e:	b510      	push	{r4, lr}
 8003ba0:	4604      	mov	r4, r0
 8003ba2:	f642 0160 	movw	r1, #10336	; 0x2860
 8003ba6:	f026 fa77 	bl	802a098 <_ZdlPvj>
 8003baa:	4620      	mov	r0, r4
 8003bac:	bd10      	pop	{r4, pc}

08003bae <_ZNK8touchgfx8Drawable17invalidateContentEv>:
        if (visible)
 8003bae:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8003bb2:	b112      	cbz	r2, 8003bba <_ZNK8touchgfx8Drawable17invalidateContentEv+0xc>
            invalidate();
 8003bb4:	6803      	ldr	r3, [r0, #0]
 8003bb6:	695b      	ldr	r3, [r3, #20]
 8003bb8:	4718      	bx	r3
    }
 8003bba:	4770      	bx	lr

08003bbc <_ZN8touchgfx8Drawable5setXYEss>:
        setX(x);
 8003bbc:	6803      	ldr	r3, [r0, #0]
    void setXY(int16_t x, int16_t y)
 8003bbe:	b570      	push	{r4, r5, r6, lr}
 8003bc0:	4604      	mov	r4, r0
        setX(x);
 8003bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    void setXY(int16_t x, int16_t y)
 8003bc4:	4615      	mov	r5, r2
        setX(x);
 8003bc6:	4798      	blx	r3
        setY(y);
 8003bc8:	6823      	ldr	r3, [r4, #0]
 8003bca:	4620      	mov	r0, r4
 8003bcc:	4629      	mov	r1, r5
 8003bce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    }
 8003bd0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(y);
 8003bd4:	4718      	bx	r3

08003bd6 <_ZN8touchgfx8Drawable11setPositionEssss>:
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8003bd6:	b570      	push	{r4, r5, r6, lr}
 8003bd8:	4604      	mov	r4, r0
 8003bda:	461d      	mov	r5, r3
 8003bdc:	f9bd 6010 	ldrsh.w	r6, [sp, #16]
        setXY(x, y);
 8003be0:	f7ff ffec 	bl	8003bbc <_ZN8touchgfx8Drawable5setXYEss>
        setWidth(width);
 8003be4:	6823      	ldr	r3, [r4, #0]
 8003be6:	4629      	mov	r1, r5
 8003be8:	4620      	mov	r0, r4
 8003bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bec:	4798      	blx	r3
        setHeight(height);
 8003bee:	6823      	ldr	r3, [r4, #0]
 8003bf0:	4631      	mov	r1, r6
 8003bf2:	4620      	mov	r0, r4
 8003bf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    }
 8003bf6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setHeight(height);
 8003bfa:	4718      	bx	r3

08003bfc <_ZN8touchgfx21AbstractPainterRGB565C1Ev>:
        : widgetWidth(0)
 8003bfc:	2300      	movs	r3, #0
public:
    static const uint16_t RMASK = 0xF800; ///< Mask for red   (1111100000000000)
    static const uint16_t GMASK = 0x07E0; ///< Mask for green (0000011111100000)
    static const uint16_t BMASK = 0x001F; ///< Mask for blue  (0000000000011111)

    AbstractPainterRGB565()
 8003bfe:	b570      	push	{r4, r5, r6, lr}
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8003c00:	4e12      	ldr	r6, [pc, #72]	; (8003c4c <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x50>)
 8003c02:	4605      	mov	r5, r0
 8003c04:	8083      	strh	r3, [r0, #4]
        : AbstractPainter()
 8003c06:	4b12      	ldr	r3, [pc, #72]	; (8003c50 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x54>)
 8003c08:	6003      	str	r3, [r0, #0]
 8003c0a:	6833      	ldr	r3, [r6, #0]
 8003c0c:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8003c10:	b10a      	cbz	r2, 8003c16 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x1a>
 8003c12:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003c14:	b900      	cbnz	r0, 8003c18 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x1c>
        return instance->lcdRef;
 8003c16:	6898      	ldr	r0, [r3, #8]
     *
     * @return True if the format matches the framebuffer format, false otherwise.
     */
    FORCE_INLINE_FUNCTION static bool compatibleFramebuffer(Bitmap::BitmapFormat format)
    {
        bool compat = HAL::lcd().framebufferFormat() == format;
 8003c18:	6803      	ldr	r3, [r0, #0]
 8003c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c1c:	4798      	blx	r3
        return auxiliaryLCD;
 8003c1e:	6833      	ldr	r3, [r6, #0]
 8003c20:	fab0 f480 	clz	r4, r0
 8003c24:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003c26:	0964      	lsrs	r4, r4, #5
        if (HAL::getInstance()->getAuxiliaryLCD())
 8003c28:	b130      	cbz	r0, 8003c38 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x3c>
        {
            compat |= HAL::getInstance()->getAuxiliaryLCD()->framebufferFormat() == format;
 8003c2a:	6803      	ldr	r3, [r0, #0]
 8003c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c2e:	4798      	blx	r3
 8003c30:	2800      	cmp	r0, #0
 8003c32:	bf08      	it	eq
 8003c34:	f044 0401 	orreq.w	r4, r4, #1
    {
        assert(compatibleFramebuffer(Bitmap::RGB565) && "The chosen painter only works with RGB565 displays");
 8003c38:	b92c      	cbnz	r4, 8003c46 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x4a>
 8003c3a:	4b06      	ldr	r3, [pc, #24]	; (8003c54 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x58>)
 8003c3c:	212c      	movs	r1, #44	; 0x2c
 8003c3e:	4a06      	ldr	r2, [pc, #24]	; (8003c58 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x5c>)
 8003c40:	4806      	ldr	r0, [pc, #24]	; (8003c5c <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x60>)
 8003c42:	f026 fa57 	bl	802a0f4 <__assert_func>
    }
 8003c46:	4628      	mov	r0, r5
 8003c48:	bd70      	pop	{r4, r5, r6, pc}
 8003c4a:	bf00      	nop
 8003c4c:	200177c4 	.word	0x200177c4
 8003c50:	0802d810 	.word	0x0802d810
 8003c54:	0802d70e 	.word	0x0802d70e
 8003c58:	0802d76c 	.word	0x0802d76c
 8003c5c:	0802d7a5 	.word	0x0802d7a5

08003c60 <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE>:
    /**
     * Initializes a new instance of the PainterRGB565 class.
     *
     * @param  color (Optional) the color, default is black.
     */
    PainterRGB565(colortype color = 0)
 8003c60:	b538      	push	{r3, r4, r5, lr}
 8003c62:	4604      	mov	r4, r0
 8003c64:	460d      	mov	r5, r1
        : AbstractPainterRGB565(), AbstractPainterColor(color)
 8003c66:	f7ff ffc9 	bl	8003bfc <_ZN8touchgfx21AbstractPainterRGB565C1Ev>
 8003c6a:	4b03      	ldr	r3, [pc, #12]	; (8003c78 <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE+0x18>)
    {
    }
 8003c6c:	4620      	mov	r0, r4
     *
     * @param  color The color.
     */
    virtual void setColor(colortype color)
    {
        painterColor = color;
 8003c6e:	60e5      	str	r5, [r4, #12]
        : AbstractPainterRGB565(), AbstractPainterColor(color)
 8003c70:	6023      	str	r3, [r4, #0]
 8003c72:	3324      	adds	r3, #36	; 0x24
 8003c74:	60a3      	str	r3, [r4, #8]
    }
 8003c76:	bd38      	pop	{r3, r4, r5, pc}
 8003c78:	0802fb30 	.word	0x0802fb30

08003c7c <_ZN8touchgfx6ButtonC1Ev>:
class AbstractButton : public Widget
{
public:
    /** Sets this Widget touchable so the user can interact with buttons. */
    AbstractButton()
        : Widget(), action(), pressed(false)
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	6282      	str	r2, [r0, #40]	; 0x28
 8003c80:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
 8003c84:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8003c88:	e9c0 2203 	strd	r2, r2, [r0, #12]
          visible(true)
 8003c8c:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8003c90:	e9c0 2207 	strd	r2, r2, [r0, #28]
        touchable = touch;
 8003c94:	f240 1201 	movw	r2, #257	; 0x101
 8003c98:	8482      	strh	r2, [r0, #36]	; 0x24
 */
class Button : public AbstractButton
{
public:
    Button()
        : AbstractButton(), up(), down(), alpha(255)
 8003c9a:	4a04      	ldr	r2, [pc, #16]	; (8003cac <_ZN8touchgfx6ButtonC1Ev+0x30>)
 8003c9c:	6002      	str	r2, [r0, #0]
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
        : bitmapId(id)
 8003c9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ca2:	85c2      	strh	r2, [r0, #46]	; 0x2e
 8003ca4:	8602      	strh	r2, [r0, #48]	; 0x30
 8003ca6:	f880 2032 	strb.w	r2, [r0, #50]	; 0x32
    {
    }
 8003caa:	4770      	bx	lr
 8003cac:	0802fde0 	.word	0x0802fde0

08003cb0 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>:
     * @note The area containing the Line is not invalidated.
     */
    template <typename T>
    void setStart(T x, T y)
    {
        setStart(CWRUtil::toQ5<T>(x), CWRUtil::toQ5<T>(y));
 8003cb0:	0152      	lsls	r2, r2, #5
 8003cb2:	0149      	lsls	r1, r1, #5
 8003cb4:	f014 bfbc 	b.w	8018c30 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_>

08003cb8 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>:
     * @note The area containing the Line is not invalidated.
     */
    template <typename T>
    void setEnd(T x, T y)
    {
        setEnd(CWRUtil::toQ5<T>(x), CWRUtil::toQ5<T>(y));
 8003cb8:	0152      	lsls	r2, r2, #5
 8003cba:	0149      	lsls	r1, r1, #5
 8003cbc:	f014 bfc3 	b.w	8018c46 <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_>

08003cc0 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>:
     * @see updateLineWidth
     *
     * @note The area containing the Line is not invalidated.
     */
    template <typename T>
    void setLineWidth(T width)
 8003cc0:	b410      	push	{r4}
     *
     * @note The area containing the Line is not invalidated.
     */
    void setLineWidth(CWRUtil::Q5 widthQ5)
    {
        if (lineWidthQ5 == widthQ5)
 8003cc2:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
    template <typename T>
    FORCE_INLINE_FUNCTION
#endif
    static Q5 toQ5(T value)
    {
        return Q5((int)(value * Rasterizer::POLY_BASE_SIZE));
 8003cc4:	014a      	lsls	r2, r1, #5
 8003cc6:	ebb4 1f41 	cmp.w	r4, r1, lsl #5
 8003cca:	d004      	beq.n	8003cd6 <_ZN8touchgfx4Line12setLineWidthIiEEvT_+0x16>
    }
 8003ccc:	f85d 4b04 	ldr.w	r4, [sp], #4
        {
            return;
        }

        lineWidthQ5 = widthQ5;
 8003cd0:	63c2      	str	r2, [r0, #60]	; 0x3c

        updateCachedShape();
 8003cd2:	f014 beb7 	b.w	8018a44 <_ZN8touchgfx4Line17updateCachedShapeEv>
    }
 8003cd6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003cda:	4770      	bx	lr

08003cdc <_ZN18playscreenViewBaseC1Ev>:
playscreenViewBase::playscreenViewBase()
 8003cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ce0:	4680      	mov	r8, r0
        : presenter(0)
 8003ce2:	2400      	movs	r4, #0
    __background.setPosition(0, 0, 480, 272);
 8003ce4:	f44f 7788 	mov.w	r7, #272	; 0x110
 8003ce8:	2604      	movs	r6, #4
playscreenViewBase::playscreenViewBase()
 8003cea:	f508 7b2a 	add.w	fp, r8, #680	; 0x2a8
 8003cee:	f508 7a4b 	add.w	sl, r8, #812	; 0x32c
 8003cf2:	f508 796c 	add.w	r9, r8, #944	; 0x3b0
    line1.setPosition(0, 66, 480, 5);
 8003cf6:	2505      	movs	r5, #5
playscreenViewBase::playscreenViewBase()
 8003cf8:	ed2d 8b10 	vpush	{d8-d15}
 8003cfc:	b0a9      	sub	sp, #164	; 0xa4
 8003cfe:	f018 fe9b 	bl	801ca38 <_ZN8touchgfx6ScreenC1Ev>
 8003d02:	4642      	mov	r2, r8
 8003d04:	4be7      	ldr	r3, [pc, #924]	; (80040a4 <_ZN18playscreenViewBaseC1Ev+0x3c8>)
 8003d06:	a927      	add	r1, sp, #156	; 0x9c
 8003d08:	f8c8 403c 	str.w	r4, [r8, #60]	; 0x3c
 8003d0c:	f842 3b40 	str.w	r3, [r2], #64
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
        : Widget(), alpha(255), color(0)
 8003d10:	4be5      	ldr	r3, [pc, #916]	; (80040a8 <_ZN18playscreenViewBaseC1Ev+0x3cc>)
          visible(true)
 8003d12:	f8c8 4060 	str.w	r4, [r8, #96]	; 0x60
        : color(col)
 8003d16:	f8c8 4068 	str.w	r4, [r8, #104]	; 0x68
 8003d1a:	921b      	str	r2, [sp, #108]	; 0x6c
        : x(0), y(0), width(0), height(0)
 8003d1c:	e9c8 3410 	strd	r3, r4, [r8, #64]	; 0x40
 8003d20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d24:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
 8003d28:	23ff      	movs	r3, #255	; 0xff
 8003d2a:	f888 3066 	strb.w	r3, [r8, #102]	; 0x66
 8003d2e:	f108 036c 	add.w	r3, r8, #108	; 0x6c
 8003d32:	ee0b 3a90 	vmov	s23, r3
 8003d36:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003d3a:	e9c8 4412 	strd	r4, r4, [r8, #72]	; 0x48
 8003d3e:	e9c8 4414 	strd	r4, r4, [r8, #80]	; 0x50
 8003d42:	e9c8 4416 	strd	r4, r4, [r8, #88]	; 0x58
 8003d46:	ee1b 0a90 	vmov	r0, s23
 8003d4a:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
 8003d4e:	f015 f88b 	bl	8018e68 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>
 8003d52:	f108 0398 	add.w	r3, r8, #152	; 0x98
 8003d56:	4618      	mov	r0, r3
 8003d58:	ee08 3a10 	vmov	s16, r3
 8003d5c:	f014 fe52 	bl	8018a04 <_ZN8touchgfx4LineC1Ev>
 8003d60:	f508 7384 	add.w	r3, r8, #264	; 0x108
 8003d64:	4621      	mov	r1, r4
 8003d66:	4618      	mov	r0, r3
 8003d68:	931c      	str	r3, [sp, #112]	; 0x70
 8003d6a:	f7ff ff79 	bl	8003c60 <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE>
 8003d6e:	f508 738e 	add.w	r3, r8, #284	; 0x11c
 8003d72:	4618      	mov	r0, r3
 8003d74:	ee08 3a90 	vmov	s17, r3
 8003d78:	f014 fe44 	bl	8018a04 <_ZN8touchgfx4LineC1Ev>
 8003d7c:	f508 73c6 	add.w	r3, r8, #396	; 0x18c
 8003d80:	4621      	mov	r1, r4
 8003d82:	4618      	mov	r0, r3
 8003d84:	931d      	str	r3, [sp, #116]	; 0x74
 8003d86:	f7ff ff6b 	bl	8003c60 <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE>
 8003d8a:	f508 73d0 	add.w	r3, r8, #416	; 0x1a0
 8003d8e:	4618      	mov	r0, r3
 8003d90:	ee09 3a10 	vmov	s18, r3
 8003d94:	f014 fe36 	bl	8018a04 <_ZN8touchgfx4LineC1Ev>
 8003d98:	f508 7304 	add.w	r3, r8, #528	; 0x210
 8003d9c:	4621      	mov	r1, r4
 8003d9e:	4618      	mov	r0, r3
 8003da0:	931e      	str	r3, [sp, #120]	; 0x78
 8003da2:	f7ff ff5d 	bl	8003c60 <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE>
 8003da6:	f508 7309 	add.w	r3, r8, #548	; 0x224
 8003daa:	4618      	mov	r0, r3
 8003dac:	ee09 3a90 	vmov	s19, r3
 8003db0:	f014 fe28 	bl	8018a04 <_ZN8touchgfx4LineC1Ev>
 8003db4:	f508 7325 	add.w	r3, r8, #660	; 0x294
 8003db8:	4621      	mov	r1, r4
 8003dba:	4618      	mov	r0, r3
 8003dbc:	931f      	str	r3, [sp, #124]	; 0x7c
 8003dbe:	f7ff ff4f 	bl	8003c60 <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE>
 8003dc2:	4658      	mov	r0, fp
 8003dc4:	f014 fe1e 	bl	8018a04 <_ZN8touchgfx4LineC1Ev>
 8003dc8:	f508 7346 	add.w	r3, r8, #792	; 0x318
 8003dcc:	4621      	mov	r1, r4
 8003dce:	4618      	mov	r0, r3
 8003dd0:	9320      	str	r3, [sp, #128]	; 0x80
 8003dd2:	f7ff ff45 	bl	8003c60 <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE>
 8003dd6:	4650      	mov	r0, sl
 8003dd8:	f014 fe14 	bl	8018a04 <_ZN8touchgfx4LineC1Ev>
 8003ddc:	f508 7367 	add.w	r3, r8, #924	; 0x39c
 8003de0:	4621      	mov	r1, r4
 8003de2:	4618      	mov	r0, r3
 8003de4:	9321      	str	r3, [sp, #132]	; 0x84
 8003de6:	f7ff ff3b 	bl	8003c60 <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE>
 8003dea:	4648      	mov	r0, r9
 8003dec:	f014 fe0a 	bl	8018a04 <_ZN8touchgfx4LineC1Ev>
 8003df0:	f508 6384 	add.w	r3, r8, #1056	; 0x420
 8003df4:	4621      	mov	r1, r4
 8003df6:	4618      	mov	r0, r3
 8003df8:	9322      	str	r3, [sp, #136]	; 0x88
 8003dfa:	f7ff ff31 	bl	8003c60 <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE>
 8003dfe:	f208 4334 	addw	r3, r8, #1076	; 0x434
 8003e02:	4618      	mov	r0, r3
 8003e04:	ee0a 3a10 	vmov	s20, r3
 8003e08:	f014 fdfc 	bl	8018a04 <_ZN8touchgfx4LineC1Ev>
 8003e0c:	f208 43a4 	addw	r3, r8, #1188	; 0x4a4
 8003e10:	4621      	mov	r1, r4
 8003e12:	4618      	mov	r0, r3
 8003e14:	9323      	str	r3, [sp, #140]	; 0x8c
 8003e16:	f7ff ff23 	bl	8003c60 <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE>
 8003e1a:	f508 6397 	add.w	r3, r8, #1208	; 0x4b8
 8003e1e:	4618      	mov	r0, r3
 8003e20:	ee0a 3a90 	vmov	s21, r3
 8003e24:	f014 fdee 	bl	8018a04 <_ZN8touchgfx4LineC1Ev>
 8003e28:	f508 63a5 	add.w	r3, r8, #1320	; 0x528
 8003e2c:	4621      	mov	r1, r4
 8003e2e:	4618      	mov	r0, r3
 8003e30:	9324      	str	r3, [sp, #144]	; 0x90
 8003e32:	f7ff ff15 	bl	8003c60 <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE>
 8003e36:	f208 533c 	addw	r3, r8, #1340	; 0x53c
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	ee0b 3a10 	vmov	s22, r3
 8003e40:	f014 fde0 	bl	8018a04 <_ZN8touchgfx4LineC1Ev>
 8003e44:	f208 53ac 	addw	r3, r8, #1452	; 0x5ac
 8003e48:	4621      	mov	r1, r4
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	9325      	str	r3, [sp, #148]	; 0x94
 8003e4e:	f7ff ff07 	bl	8003c60 <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE>
 8003e52:	f508 63b8 	add.w	r3, r8, #1472	; 0x5c0
 8003e56:	4618      	mov	r0, r3
 8003e58:	ee0c 3a10 	vmov	s24, r3
 8003e5c:	f7ff ff0e 	bl	8003c7c <_ZN8touchgfx6ButtonC1Ev>
 8003e60:	f208 53f4 	addw	r3, r8, #1524	; 0x5f4
 8003e64:	4618      	mov	r0, r3
 8003e66:	ee0c 3a90 	vmov	s25, r3
 8003e6a:	f7ff ff07 	bl	8003c7c <_ZN8touchgfx6ButtonC1Ev>
 8003e6e:	f508 63c5 	add.w	r3, r8, #1576	; 0x628
 8003e72:	4618      	mov	r0, r3
 8003e74:	ee0d 3a10 	vmov	s26, r3
 8003e78:	f7ff ff00 	bl	8003c7c <_ZN8touchgfx6ButtonC1Ev>
 8003e7c:	f208 635c 	addw	r3, r8, #1628	; 0x65c
 8003e80:	4618      	mov	r0, r3
 8003e82:	ee0d 3a90 	vmov	s27, r3
 8003e86:	f7ff fef9 	bl	8003c7c <_ZN8touchgfx6ButtonC1Ev>
 8003e8a:	f508 63d2 	add.w	r3, r8, #1680	; 0x690
 8003e8e:	4618      	mov	r0, r3
 8003e90:	ee0e 3a10 	vmov	s28, r3
 8003e94:	f7ff fef2 	bl	8003c7c <_ZN8touchgfx6ButtonC1Ev>
 8003e98:	f208 63c4 	addw	r3, r8, #1732	; 0x6c4
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	ee0e 3a90 	vmov	s29, r3
 8003ea2:	f7ff feeb 	bl	8003c7c <_ZN8touchgfx6ButtonC1Ev>
 8003ea6:	f508 63df 	add.w	r3, r8, #1784	; 0x6f8
 8003eaa:	4618      	mov	r0, r3
 8003eac:	ee0f 3a10 	vmov	s30, r3
 8003eb0:	f7ff fee4 	bl	8003c7c <_ZN8touchgfx6ButtonC1Ev>
 8003eb4:	f208 732c 	addw	r3, r8, #1836	; 0x72c
 8003eb8:	4618      	mov	r0, r3
 8003eba:	ee0f 3a90 	vmov	s31, r3
 8003ebe:	f7ff fedd 	bl	8003c7c <_ZN8touchgfx6ButtonC1Ev>
 8003ec2:	f508 63ec 	add.w	r3, r8, #1888	; 0x760
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	9303      	str	r3, [sp, #12]
 8003eca:	f7ff fed7 	bl	8003c7c <_ZN8touchgfx6ButtonC1Ev>
 8003ece:	f208 7394 	addw	r3, r8, #1940	; 0x794
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	9304      	str	r3, [sp, #16]
 8003ed6:	f7ff fed1 	bl	8003c7c <_ZN8touchgfx6ButtonC1Ev>
 8003eda:	f508 63f9 	add.w	r3, r8, #1992	; 0x7c8
 8003ede:	4618      	mov	r0, r3
 8003ee0:	9305      	str	r3, [sp, #20]
 8003ee2:	f7ff fecb 	bl	8003c7c <_ZN8touchgfx6ButtonC1Ev>
 8003ee6:	f208 73fc 	addw	r3, r8, #2044	; 0x7fc
 8003eea:	4618      	mov	r0, r3
 8003eec:	9306      	str	r3, [sp, #24]
 8003eee:	f7ff fec5 	bl	8003c7c <_ZN8touchgfx6ButtonC1Ev>
 8003ef2:	f508 6303 	add.w	r3, r8, #2096	; 0x830
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	9307      	str	r3, [sp, #28]
 8003efa:	f7ff febf 	bl	8003c7c <_ZN8touchgfx6ButtonC1Ev>
 8003efe:	f608 0364 	addw	r3, r8, #2148	; 0x864
 8003f02:	4618      	mov	r0, r3
 8003f04:	9308      	str	r3, [sp, #32]
 8003f06:	f7ff feb9 	bl	8003c7c <_ZN8touchgfx6ButtonC1Ev>
 8003f0a:	f608 0398 	addw	r3, r8, #2200	; 0x898
 8003f0e:	4618      	mov	r0, r3
 8003f10:	9309      	str	r3, [sp, #36]	; 0x24
 8003f12:	f7ff feb3 	bl	8003c7c <_ZN8touchgfx6ButtonC1Ev>
 8003f16:	f608 03cc 	addw	r3, r8, #2252	; 0x8cc
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	930a      	str	r3, [sp, #40]	; 0x28
 8003f1e:	f7ff fead 	bl	8003c7c <_ZN8touchgfx6ButtonC1Ev>
 8003f22:	f508 6310 	add.w	r3, r8, #2304	; 0x900
 8003f26:	4618      	mov	r0, r3
 8003f28:	930b      	str	r3, [sp, #44]	; 0x2c
 8003f2a:	f7ff fea7 	bl	8003c7c <_ZN8touchgfx6ButtonC1Ev>
 8003f2e:	f608 1334 	addw	r3, r8, #2356	; 0x934
 8003f32:	4618      	mov	r0, r3
 8003f34:	930c      	str	r3, [sp, #48]	; 0x30
 8003f36:	f7ff fea1 	bl	8003c7c <_ZN8touchgfx6ButtonC1Ev>
 8003f3a:	f608 1368 	addw	r3, r8, #2408	; 0x968
 8003f3e:	4618      	mov	r0, r3
 8003f40:	930d      	str	r3, [sp, #52]	; 0x34
 8003f42:	f7ff fe9b 	bl	8003c7c <_ZN8touchgfx6ButtonC1Ev>
 8003f46:	f608 139c 	addw	r3, r8, #2460	; 0x99c
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	930e      	str	r3, [sp, #56]	; 0x38
 8003f4e:	f7ff fe95 	bl	8003c7c <_ZN8touchgfx6ButtonC1Ev>
 8003f52:	f508 631d 	add.w	r3, r8, #2512	; 0x9d0
 8003f56:	4618      	mov	r0, r3
 8003f58:	930f      	str	r3, [sp, #60]	; 0x3c
 8003f5a:	f7ff fe8f 	bl	8003c7c <_ZN8touchgfx6ButtonC1Ev>
 8003f5e:	f608 2304 	addw	r3, r8, #2564	; 0xa04
 8003f62:	4618      	mov	r0, r3
 8003f64:	9310      	str	r3, [sp, #64]	; 0x40
 8003f66:	f7ff fe89 	bl	8003c7c <_ZN8touchgfx6ButtonC1Ev>
 8003f6a:	f608 2338 	addw	r3, r8, #2616	; 0xa38
 8003f6e:	4618      	mov	r0, r3
 8003f70:	9311      	str	r3, [sp, #68]	; 0x44
 8003f72:	f7ff fe83 	bl	8003c7c <_ZN8touchgfx6ButtonC1Ev>
 8003f76:	f608 236c 	addw	r3, r8, #2668	; 0xa6c
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	9312      	str	r3, [sp, #72]	; 0x48
 8003f7e:	f7ff fe7d 	bl	8003c7c <_ZN8touchgfx6ButtonC1Ev>
 8003f82:	f508 632a 	add.w	r3, r8, #2720	; 0xaa0
 8003f86:	4618      	mov	r0, r3
 8003f88:	9313      	str	r3, [sp, #76]	; 0x4c
 8003f8a:	f7ff fe77 	bl	8003c7c <_ZN8touchgfx6ButtonC1Ev>
 8003f8e:	f608 23d4 	addw	r3, r8, #2772	; 0xad4
 8003f92:	4618      	mov	r0, r3
 8003f94:	9314      	str	r3, [sp, #80]	; 0x50
 8003f96:	f7ff fe71 	bl	8003c7c <_ZN8touchgfx6ButtonC1Ev>
 8003f9a:	f608 3308 	addw	r3, r8, #2824	; 0xb08
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	9315      	str	r3, [sp, #84]	; 0x54
 8003fa2:	f7ff fe6b 	bl	8003c7c <_ZN8touchgfx6ButtonC1Ev>
 8003fa6:	f608 333c 	addw	r3, r8, #2876	; 0xb3c
 8003faa:	4618      	mov	r0, r3
 8003fac:	9316      	str	r3, [sp, #88]	; 0x58
 8003fae:	f7ff fe65 	bl	8003c7c <_ZN8touchgfx6ButtonC1Ev>
 8003fb2:	f508 6337 	add.w	r3, r8, #2928	; 0xb70
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	9317      	str	r3, [sp, #92]	; 0x5c
 8003fba:	f7ff fe5f 	bl	8003c7c <_ZN8touchgfx6ButtonC1Ev>
 8003fbe:	f608 33a4 	addw	r3, r8, #2980	; 0xba4
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	9318      	str	r3, [sp, #96]	; 0x60
 8003fc6:	f7ff fe59 	bl	8003c7c <_ZN8touchgfx6ButtonC1Ev>
 8003fca:	f608 33d8 	addw	r3, r8, #3032	; 0xbd8
 8003fce:	4618      	mov	r0, r3
 8003fd0:	9319      	str	r3, [sp, #100]	; 0x64
 8003fd2:	f7ff fe53 	bl	8003c7c <_ZN8touchgfx6ButtonC1Ev>
 8003fd6:	f608 430c 	addw	r3, r8, #3084	; 0xc0c
 8003fda:	4618      	mov	r0, r3
 8003fdc:	931a      	str	r3, [sp, #104]	; 0x68
 8003fde:	f7ff fe4d 	bl	8003c7c <_ZN8touchgfx6ButtonC1Ev>
    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 8003fe2:	f508 6044 	add.w	r0, r8, #3136	; 0xc40
 8003fe6:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
 8003fea:	f016 f92f 	bl	801a24c <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>
    __background.setPosition(0, 0, 480, 272);
 8003fee:	4622      	mov	r2, r4
 8003ff0:	4621      	mov	r1, r4
 8003ff2:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8003ff4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003ff8:	9700      	str	r7, [sp, #0]
 8003ffa:	f7ff fdec 	bl	8003bd6 <_ZN8touchgfx8Drawable11setPositionEssss>
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
    {
        color = newColor;
 8003ffe:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
    background.setBitmap(touchgfx::Bitmap(BITMAP_BLUE_BACKGROUNDS_MAIN_BG_480X272PX_ID));
 8004002:	a927      	add	r1, sp, #156	; 0x9c
 8004004:	ee1b 0a90 	vmov	r0, s23
 8004008:	f8c8 3068 	str.w	r3, [r8, #104]	; 0x68
 800400c:	f8ad 609c 	strh.w	r6, [sp, #156]	; 0x9c
 8004010:	f015 fa2b 	bl	801946a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    background.setPosition(0, 0, 480, 272);
 8004014:	4622      	mov	r2, r4
 8004016:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800401a:	4621      	mov	r1, r4
 800401c:	ee1b 0a90 	vmov	r0, s23
 8004020:	9700      	str	r7, [sp, #0]
 8004022:	f7ff fdd8 	bl	8003bd6 <_ZN8touchgfx8Drawable11setPositionEssss>
    background.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
 8004026:	4621      	mov	r1, r4
 8004028:	ee1b 0a90 	vmov	r0, s23
 800402c:	f014 fee3 	bl	8018df6 <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>
    line1.setPosition(0, 66, 480, 5);
 8004030:	4621      	mov	r1, r4
 8004032:	ee18 0a10 	vmov	r0, s16
 8004036:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800403a:	2242      	movs	r2, #66	; 0x42
 800403c:	9500      	str	r5, [sp, #0]
 800403e:	f7ff fdca 	bl	8003bd6 <_ZN8touchgfx8Drawable11setPositionEssss>
 8004042:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
    line1.setStart(0, 0);
 8004046:	4622      	mov	r2, r4
 8004048:	4621      	mov	r1, r4
 800404a:	f8c8 3114 	str.w	r3, [r8, #276]	; 0x114
 800404e:	ee18 0a10 	vmov	r0, s16
     * @note If setPainter() is used to change the painter to a different painter, the area
     *       containing the CanvasWidget is not automatically invalidated.
     */
    void setPainter(const AbstractPainter& painter)
    {
        canvasPainter = &painter;
 8004052:	9b1c      	ldr	r3, [sp, #112]	; 0x70

    virtual void setColor(colortype color)
    {
        AbstractPainterColor::setColor(color);
        color565 = LCD16bpp::getNativeColor(painterColor);
 8004054:	f8a8 4118 	strh.w	r4, [r8, #280]	; 0x118
 8004058:	f8c8 30c0 	str.w	r3, [r8, #192]	; 0xc0
 800405c:	f7ff fe28 	bl	8003cb0 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line1.setEnd(480, 0);
 8004060:	4622      	mov	r2, r4
 8004062:	ee18 0a10 	vmov	r0, s16
 8004066:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 800406a:	f7ff fe25 	bl	8003cb8 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line1.setLineWidth(4);
 800406e:	4631      	mov	r1, r6
 8004070:	ee18 0a10 	vmov	r0, s16
 8004074:	f7ff fe24 	bl	8003cc0 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line1.setLineEndingStyle(touchgfx::Line::ROUND_CAP_ENDING);
 8004078:	ee18 0a10 	vmov	r0, s16
 800407c:	2101      	movs	r1, #1
 800407e:	f014 fded 	bl	8018c5c <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>
    line1_1.setPosition(0, 204, 480, 5);
 8004082:	4621      	mov	r1, r4
 8004084:	ee18 0a90 	vmov	r0, s17
 8004088:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800408c:	22cc      	movs	r2, #204	; 0xcc
 800408e:	9500      	str	r5, [sp, #0]
 8004090:	f7ff fda1 	bl	8003bd6 <_ZN8touchgfx8Drawable11setPositionEssss>
 8004094:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
    line1_1.setStart(0, 0);
 8004098:	4622      	mov	r2, r4
 800409a:	4621      	mov	r1, r4
 800409c:	f8c8 3198 	str.w	r3, [r8, #408]	; 0x198
 80040a0:	e004      	b.n	80040ac <_ZN18playscreenViewBaseC1Ev+0x3d0>
 80040a2:	bf00      	nop
 80040a4:	0802d830 	.word	0x0802d830
 80040a8:	0802fd78 	.word	0x0802fd78
 80040ac:	ee18 0a90 	vmov	r0, s17
 80040b0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80040b2:	f8a8 419c 	strh.w	r4, [r8, #412]	; 0x19c
 80040b6:	f8c8 3144 	str.w	r3, [r8, #324]	; 0x144
 80040ba:	f7ff fdf9 	bl	8003cb0 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line1_1.setEnd(480, 0);
 80040be:	4622      	mov	r2, r4
 80040c0:	ee18 0a90 	vmov	r0, s17
 80040c4:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80040c8:	f7ff fdf6 	bl	8003cb8 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line1_1.setLineWidth(4);
 80040cc:	4631      	mov	r1, r6
 80040ce:	ee18 0a90 	vmov	r0, s17
 80040d2:	f7ff fdf5 	bl	8003cc0 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line1_1.setLineEndingStyle(touchgfx::Line::ROUND_CAP_ENDING);
 80040d6:	ee18 0a90 	vmov	r0, s17
 80040da:	2101      	movs	r1, #1
 80040dc:	f014 fdbe 	bl	8018c5c <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>
    line1_2.setPosition(0, 134, 480, 5);
 80040e0:	4621      	mov	r1, r4
 80040e2:	ee19 0a10 	vmov	r0, s18
 80040e6:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80040ea:	2286      	movs	r2, #134	; 0x86
 80040ec:	9500      	str	r5, [sp, #0]
 80040ee:	f7ff fd72 	bl	8003bd6 <_ZN8touchgfx8Drawable11setPositionEssss>
 80040f2:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
    line1_2.setStart(0, 0);
 80040f6:	4622      	mov	r2, r4
 80040f8:	4621      	mov	r1, r4
 80040fa:	f8c8 321c 	str.w	r3, [r8, #540]	; 0x21c
 80040fe:	ee19 0a10 	vmov	r0, s18
 8004102:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004104:	f8a8 4220 	strh.w	r4, [r8, #544]	; 0x220
 8004108:	f8c8 31c8 	str.w	r3, [r8, #456]	; 0x1c8
 800410c:	f7ff fdd0 	bl	8003cb0 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line1_2.setEnd(480, 0);
 8004110:	4622      	mov	r2, r4
 8004112:	ee19 0a10 	vmov	r0, s18
 8004116:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 800411a:	f7ff fdcd 	bl	8003cb8 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line1_2.setLineWidth(4);
 800411e:	4631      	mov	r1, r6
 8004120:	ee19 0a10 	vmov	r0, s18
 8004124:	f7ff fdcc 	bl	8003cc0 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line1_2.setLineEndingStyle(touchgfx::Line::ROUND_CAP_ENDING);
 8004128:	ee19 0a10 	vmov	r0, s18
 800412c:	2101      	movs	r1, #1
 800412e:	f014 fd95 	bl	8018c5c <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>
    line2.setPosition(58, 0, 5, 272);
 8004132:	462b      	mov	r3, r5
 8004134:	4622      	mov	r2, r4
 8004136:	ee19 0a90 	vmov	r0, s19
 800413a:	213a      	movs	r1, #58	; 0x3a
 800413c:	9700      	str	r7, [sp, #0]
 800413e:	f7ff fd4a 	bl	8003bd6 <_ZN8touchgfx8Drawable11setPositionEssss>
 8004142:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
    line2.setStart(0, 0);
 8004146:	4622      	mov	r2, r4
 8004148:	4621      	mov	r1, r4
 800414a:	f8c8 32a0 	str.w	r3, [r8, #672]	; 0x2a0
 800414e:	ee19 0a90 	vmov	r0, s19
 8004152:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004154:	f8a8 42a4 	strh.w	r4, [r8, #676]	; 0x2a4
 8004158:	f8c8 324c 	str.w	r3, [r8, #588]	; 0x24c
 800415c:	f7ff fda8 	bl	8003cb0 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line2.setEnd(0, 272);
 8004160:	463a      	mov	r2, r7
 8004162:	4621      	mov	r1, r4
 8004164:	ee19 0a90 	vmov	r0, s19
 8004168:	f7ff fda6 	bl	8003cb8 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line2.setLineWidth(4);
 800416c:	4631      	mov	r1, r6
 800416e:	ee19 0a90 	vmov	r0, s19
 8004172:	f7ff fda5 	bl	8003cc0 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line2.setLineEndingStyle(touchgfx::Line::BUTT_CAP_ENDING);
 8004176:	4621      	mov	r1, r4
 8004178:	ee19 0a90 	vmov	r0, s19
 800417c:	f014 fd6e 	bl	8018c5c <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>
    line2_1.setPosition(118, 0, 5, 272);
 8004180:	462b      	mov	r3, r5
 8004182:	4622      	mov	r2, r4
 8004184:	4658      	mov	r0, fp
 8004186:	2176      	movs	r1, #118	; 0x76
 8004188:	9700      	str	r7, [sp, #0]
 800418a:	f7ff fd24 	bl	8003bd6 <_ZN8touchgfx8Drawable11setPositionEssss>
 800418e:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
    line2_1.setStart(0, 0);
 8004192:	4622      	mov	r2, r4
 8004194:	4621      	mov	r1, r4
 8004196:	f8c8 3324 	str.w	r3, [r8, #804]	; 0x324
 800419a:	4658      	mov	r0, fp
 800419c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800419e:	f8a8 4328 	strh.w	r4, [r8, #808]	; 0x328
 80041a2:	f8c8 32d0 	str.w	r3, [r8, #720]	; 0x2d0
 80041a6:	f7ff fd83 	bl	8003cb0 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line2_1.setEnd(0, 272);
 80041aa:	463a      	mov	r2, r7
 80041ac:	4621      	mov	r1, r4
 80041ae:	4658      	mov	r0, fp
 80041b0:	f7ff fd82 	bl	8003cb8 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line2_1.setLineWidth(4);
 80041b4:	4631      	mov	r1, r6
 80041b6:	4658      	mov	r0, fp
 80041b8:	f7ff fd82 	bl	8003cc0 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line2_1.setLineEndingStyle(touchgfx::Line::BUTT_CAP_ENDING);
 80041bc:	4621      	mov	r1, r4
 80041be:	4658      	mov	r0, fp
 80041c0:	f014 fd4c 	bl	8018c5c <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>
    line2_2.setPosition(178, 0, 5, 272);
 80041c4:	462b      	mov	r3, r5
 80041c6:	4622      	mov	r2, r4
 80041c8:	4650      	mov	r0, sl
 80041ca:	21b2      	movs	r1, #178	; 0xb2
 80041cc:	9700      	str	r7, [sp, #0]
 80041ce:	f7ff fd02 	bl	8003bd6 <_ZN8touchgfx8Drawable11setPositionEssss>
 80041d2:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
    line2_2.setStart(0, 0);
 80041d6:	4622      	mov	r2, r4
 80041d8:	4621      	mov	r1, r4
 80041da:	f8c8 33a8 	str.w	r3, [r8, #936]	; 0x3a8
 80041de:	4650      	mov	r0, sl
 80041e0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80041e2:	f8a8 43ac 	strh.w	r4, [r8, #940]	; 0x3ac
 80041e6:	f8c8 3354 	str.w	r3, [r8, #852]	; 0x354
 80041ea:	f7ff fd61 	bl	8003cb0 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line2_2.setEnd(0, 272);
 80041ee:	463a      	mov	r2, r7
 80041f0:	4621      	mov	r1, r4
 80041f2:	4650      	mov	r0, sl
 80041f4:	f7ff fd60 	bl	8003cb8 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line2_2.setLineWidth(4);
 80041f8:	4631      	mov	r1, r6
 80041fa:	4650      	mov	r0, sl
 80041fc:	f7ff fd60 	bl	8003cc0 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line2_2.setLineEndingStyle(touchgfx::Line::BUTT_CAP_ENDING);
 8004200:	4621      	mov	r1, r4
 8004202:	4650      	mov	r0, sl
 8004204:	f014 fd2a 	bl	8018c5c <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>
    line2_2_1.setPosition(238, 0, 5, 272);
 8004208:	462b      	mov	r3, r5
 800420a:	4622      	mov	r2, r4
 800420c:	4648      	mov	r0, r9
 800420e:	21ee      	movs	r1, #238	; 0xee
 8004210:	9700      	str	r7, [sp, #0]
 8004212:	f7ff fce0 	bl	8003bd6 <_ZN8touchgfx8Drawable11setPositionEssss>
 8004216:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
    line2_2_1.setStart(0, 0);
 800421a:	4622      	mov	r2, r4
 800421c:	4621      	mov	r1, r4
 800421e:	f8c8 342c 	str.w	r3, [r8, #1068]	; 0x42c
 8004222:	4648      	mov	r0, r9
 8004224:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004226:	f8a8 4430 	strh.w	r4, [r8, #1072]	; 0x430
 800422a:	f8c8 33d8 	str.w	r3, [r8, #984]	; 0x3d8
 800422e:	f7ff fd3f 	bl	8003cb0 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line2_2_1.setEnd(0, 272);
 8004232:	463a      	mov	r2, r7
 8004234:	4621      	mov	r1, r4
 8004236:	4648      	mov	r0, r9
 8004238:	f7ff fd3e 	bl	8003cb8 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line2_2_1.setLineWidth(4);
 800423c:	4631      	mov	r1, r6
 800423e:	4648      	mov	r0, r9
 8004240:	f7ff fd3e 	bl	8003cc0 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line2_2_1.setLineEndingStyle(touchgfx::Line::BUTT_CAP_ENDING);
 8004244:	4621      	mov	r1, r4
 8004246:	4648      	mov	r0, r9
 8004248:	f014 fd08 	bl	8018c5c <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>
    line2_2_1_1.setPosition(298, 0, 5, 272);
 800424c:	462b      	mov	r3, r5
 800424e:	4622      	mov	r2, r4
 8004250:	ee1a 0a10 	vmov	r0, s20
 8004254:	f44f 7195 	mov.w	r1, #298	; 0x12a
 8004258:	9700      	str	r7, [sp, #0]
 800425a:	f7ff fcbc 	bl	8003bd6 <_ZN8touchgfx8Drawable11setPositionEssss>
 800425e:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
    line2_2_1_1.setStart(0, 0);
 8004262:	4622      	mov	r2, r4
 8004264:	4621      	mov	r1, r4
 8004266:	f8c8 34b0 	str.w	r3, [r8, #1200]	; 0x4b0
 800426a:	ee1a 0a10 	vmov	r0, s20
 800426e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004270:	f8a8 44b4 	strh.w	r4, [r8, #1204]	; 0x4b4
 8004274:	f8c8 345c 	str.w	r3, [r8, #1116]	; 0x45c
 8004278:	f7ff fd1a 	bl	8003cb0 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line2_2_1_1.setEnd(0, 272);
 800427c:	463a      	mov	r2, r7
 800427e:	4621      	mov	r1, r4
 8004280:	ee1a 0a10 	vmov	r0, s20
 8004284:	f7ff fd18 	bl	8003cb8 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line2_2_1_1.setLineWidth(4);
 8004288:	4631      	mov	r1, r6
 800428a:	ee1a 0a10 	vmov	r0, s20
 800428e:	f7ff fd17 	bl	8003cc0 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line2_2_1_1.setLineEndingStyle(touchgfx::Line::BUTT_CAP_ENDING);
 8004292:	4621      	mov	r1, r4
 8004294:	ee1a 0a10 	vmov	r0, s20
 8004298:	f014 fce0 	bl	8018c5c <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>
    line2_2_1_1_1.setPosition(358, 0, 5, 272);
 800429c:	462b      	mov	r3, r5
 800429e:	4622      	mov	r2, r4
 80042a0:	ee1a 0a90 	vmov	r0, s21
 80042a4:	f44f 71b3 	mov.w	r1, #358	; 0x166
 80042a8:	9700      	str	r7, [sp, #0]
 80042aa:	f7ff fc94 	bl	8003bd6 <_ZN8touchgfx8Drawable11setPositionEssss>
 80042ae:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
    line2_2_1_1_1.setStart(0, 0);
 80042b2:	4622      	mov	r2, r4
 80042b4:	4621      	mov	r1, r4
 80042b6:	f8c8 3534 	str.w	r3, [r8, #1332]	; 0x534
 80042ba:	ee1a 0a90 	vmov	r0, s21
 80042be:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80042c0:	f8a8 4538 	strh.w	r4, [r8, #1336]	; 0x538
 80042c4:	f8c8 34e0 	str.w	r3, [r8, #1248]	; 0x4e0
 80042c8:	f7ff fcf2 	bl	8003cb0 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line2_2_1_1_1.setEnd(0, 272);
 80042cc:	463a      	mov	r2, r7
 80042ce:	4621      	mov	r1, r4
 80042d0:	ee1a 0a90 	vmov	r0, s21
 80042d4:	f7ff fcf0 	bl	8003cb8 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line2_2_1_1_1.setLineWidth(4);
 80042d8:	4631      	mov	r1, r6
 80042da:	ee1a 0a90 	vmov	r0, s21
 80042de:	f7ff fcef 	bl	8003cc0 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line2_2_1_1_1.setLineEndingStyle(touchgfx::Line::BUTT_CAP_ENDING);
 80042e2:	4621      	mov	r1, r4
 80042e4:	ee1a 0a90 	vmov	r0, s21
 80042e8:	f014 fcb8 	bl	8018c5c <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>
    line2_2_1_1_1_1.setPosition(418, 0, 5, 272);
 80042ec:	462b      	mov	r3, r5
 80042ee:	4622      	mov	r2, r4
 80042f0:	ee1b 0a10 	vmov	r0, s22
 80042f4:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 80042f8:	9700      	str	r7, [sp, #0]
 80042fa:	f7ff fc6c 	bl	8003bd6 <_ZN8touchgfx8Drawable11setPositionEssss>
 80042fe:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
    line2_2_1_1_1_1.setStart(0, 0);
 8004302:	4622      	mov	r2, r4
 8004304:	4621      	mov	r1, r4
 8004306:	f8c8 35b8 	str.w	r3, [r8, #1464]	; 0x5b8
 800430a:	ee1b 0a10 	vmov	r0, s22
 800430e:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8004310:	f8a8 45bc 	strh.w	r4, [r8, #1468]	; 0x5bc
 8004314:	f8c8 3564 	str.w	r3, [r8, #1380]	; 0x564
 8004318:	f7ff fcca 	bl	8003cb0 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line2_2_1_1_1_1.setEnd(0, 272);
 800431c:	463a      	mov	r2, r7
 800431e:	4621      	mov	r1, r4
 8004320:	ee1b 0a10 	vmov	r0, s22
 8004324:	f7ff fcc8 	bl	8003cb8 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line2_2_1_1_1_1.setLineWidth(4);
 8004328:	4631      	mov	r1, r6
 800432a:	ee1b 0a10 	vmov	r0, s22
 800432e:	f7ff fcc7 	bl	8003cc0 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line2_2_1_1_1_1.setLineEndingStyle(touchgfx::Line::BUTT_CAP_ENDING);
 8004332:	4621      	mov	r1, r4
 8004334:	ee1b 0a10 	vmov	r0, s22
 8004338:	f014 fc90 	bl	8018c5c <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>
    b1_1.setXY(0, 3);
 800433c:	4621      	mov	r1, r4
 800433e:	ee1c 0a10 	vmov	r0, s24
 8004342:	2203      	movs	r2, #3
 8004344:	f7ff fc3a 	bl	8003bbc <_ZN8touchgfx8Drawable5setXYEss>
    b1_1.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BA_ID));
 8004348:	aa27      	add	r2, sp, #156	; 0x9c
 800434a:	a926      	add	r1, sp, #152	; 0x98
 800434c:	ee1c 0a10 	vmov	r0, s24
 8004350:	f8ad 409c 	strh.w	r4, [sp, #156]	; 0x9c
 8004354:	f8ad 5098 	strh.w	r5, [sp, #152]	; 0x98
 8004358:	f014 ffba 	bl	80192d0 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    b1_2.setXY(60, 3);
 800435c:	ee1c 0a90 	vmov	r0, s25
 8004360:	2203      	movs	r2, #3
 8004362:	213c      	movs	r1, #60	; 0x3c
 8004364:	f7ff fc2a 	bl	8003bbc <_ZN8touchgfx8Drawable5setXYEss>
    b1_2.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BA_ID));
 8004368:	aa27      	add	r2, sp, #156	; 0x9c
 800436a:	a926      	add	r1, sp, #152	; 0x98
 800436c:	ee1c 0a90 	vmov	r0, s25
 8004370:	f8ad 409c 	strh.w	r4, [sp, #156]	; 0x9c
 8004374:	f8ad 5098 	strh.w	r5, [sp, #152]	; 0x98
 8004378:	f014 ffaa 	bl	80192d0 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    b1_3.setXY(120, 3);
 800437c:	ee1d 0a10 	vmov	r0, s26
 8004380:	2203      	movs	r2, #3
 8004382:	2178      	movs	r1, #120	; 0x78
 8004384:	f7ff fc1a 	bl	8003bbc <_ZN8touchgfx8Drawable5setXYEss>
    b1_3.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BA_ID));
 8004388:	aa27      	add	r2, sp, #156	; 0x9c
 800438a:	a926      	add	r1, sp, #152	; 0x98
 800438c:	ee1d 0a10 	vmov	r0, s26
 8004390:	f8ad 409c 	strh.w	r4, [sp, #156]	; 0x9c
 8004394:	f8ad 5098 	strh.w	r5, [sp, #152]	; 0x98
 8004398:	f014 ff9a 	bl	80192d0 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    b1_4.setXY(178, 3);
 800439c:	ee1d 0a90 	vmov	r0, s27
 80043a0:	2203      	movs	r2, #3
 80043a2:	21b2      	movs	r1, #178	; 0xb2
 80043a4:	f7ff fc0a 	bl	8003bbc <_ZN8touchgfx8Drawable5setXYEss>
    b1_4.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BA_ID));
 80043a8:	aa27      	add	r2, sp, #156	; 0x9c
 80043aa:	a926      	add	r1, sp, #152	; 0x98
 80043ac:	ee1d 0a90 	vmov	r0, s27
 80043b0:	f8ad 409c 	strh.w	r4, [sp, #156]	; 0x9c
 80043b4:	f8ad 5098 	strh.w	r5, [sp, #152]	; 0x98
 80043b8:	f014 ff8a 	bl	80192d0 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    b1_5.setXY(238, 3);
 80043bc:	ee1e 0a10 	vmov	r0, s28
 80043c0:	2203      	movs	r2, #3
 80043c2:	21ee      	movs	r1, #238	; 0xee
 80043c4:	f7ff fbfa 	bl	8003bbc <_ZN8touchgfx8Drawable5setXYEss>
    b1_5.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BA_ID));
 80043c8:	aa27      	add	r2, sp, #156	; 0x9c
 80043ca:	a926      	add	r1, sp, #152	; 0x98
 80043cc:	ee1e 0a10 	vmov	r0, s28
 80043d0:	f8ad 409c 	strh.w	r4, [sp, #156]	; 0x9c
 80043d4:	f8ad 5098 	strh.w	r5, [sp, #152]	; 0x98
 80043d8:	f014 ff7a 	bl	80192d0 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    b1_6.setXY(298, 3);
 80043dc:	ee1e 0a90 	vmov	r0, s29
 80043e0:	2203      	movs	r2, #3
 80043e2:	f44f 7195 	mov.w	r1, #298	; 0x12a
 80043e6:	f7ff fbe9 	bl	8003bbc <_ZN8touchgfx8Drawable5setXYEss>
    b1_6.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BA_ID));
 80043ea:	aa27      	add	r2, sp, #156	; 0x9c
 80043ec:	a926      	add	r1, sp, #152	; 0x98
 80043ee:	ee1e 0a90 	vmov	r0, s29
 80043f2:	f8ad 409c 	strh.w	r4, [sp, #156]	; 0x9c
 80043f6:	f8ad 5098 	strh.w	r5, [sp, #152]	; 0x98
 80043fa:	f014 ff69 	bl	80192d0 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    b1_7.setXY(358, 3);
 80043fe:	ee1f 0a10 	vmov	r0, s30
 8004402:	2203      	movs	r2, #3
 8004404:	f44f 71b3 	mov.w	r1, #358	; 0x166
 8004408:	f7ff fbd8 	bl	8003bbc <_ZN8touchgfx8Drawable5setXYEss>
    b1_7.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BA_ID));
 800440c:	aa27      	add	r2, sp, #156	; 0x9c
 800440e:	a926      	add	r1, sp, #152	; 0x98
 8004410:	ee1f 0a10 	vmov	r0, s30
 8004414:	f8ad 409c 	strh.w	r4, [sp, #156]	; 0x9c
 8004418:	f8ad 5098 	strh.w	r5, [sp, #152]	; 0x98
 800441c:	f014 ff58 	bl	80192d0 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    b1_8.setXY(418, 3);
 8004420:	ee1f 0a90 	vmov	r0, s31
 8004424:	2203      	movs	r2, #3
 8004426:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 800442a:	f7ff fbc7 	bl	8003bbc <_ZN8touchgfx8Drawable5setXYEss>
    b1_8.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BA_ID));
 800442e:	aa27      	add	r2, sp, #156	; 0x9c
 8004430:	a926      	add	r1, sp, #152	; 0x98
 8004432:	ee1f 0a90 	vmov	r0, s31
 8004436:	f8ad 409c 	strh.w	r4, [sp, #156]	; 0x9c
 800443a:	f8ad 5098 	strh.w	r5, [sp, #152]	; 0x98
 800443e:	f014 ff47 	bl	80192d0 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    b1_1_1.setXY(0, 71);
 8004442:	4621      	mov	r1, r4
 8004444:	9803      	ldr	r0, [sp, #12]
 8004446:	2247      	movs	r2, #71	; 0x47
 8004448:	f7ff fbb8 	bl	8003bbc <_ZN8touchgfx8Drawable5setXYEss>
    b1_1_1.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BA_ID));
 800444c:	aa27      	add	r2, sp, #156	; 0x9c
 800444e:	a926      	add	r1, sp, #152	; 0x98
 8004450:	9803      	ldr	r0, [sp, #12]
 8004452:	f8ad 409c 	strh.w	r4, [sp, #156]	; 0x9c
 8004456:	f8ad 5098 	strh.w	r5, [sp, #152]	; 0x98
 800445a:	f014 ff39 	bl	80192d0 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    b1_2_1.setXY(60, 71);
 800445e:	9804      	ldr	r0, [sp, #16]
 8004460:	2247      	movs	r2, #71	; 0x47
 8004462:	213c      	movs	r1, #60	; 0x3c
 8004464:	f7ff fbaa 	bl	8003bbc <_ZN8touchgfx8Drawable5setXYEss>
    b1_2_1.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BA_ID));
 8004468:	aa27      	add	r2, sp, #156	; 0x9c
 800446a:	a926      	add	r1, sp, #152	; 0x98
 800446c:	9804      	ldr	r0, [sp, #16]
 800446e:	f8ad 409c 	strh.w	r4, [sp, #156]	; 0x9c
 8004472:	f8ad 5098 	strh.w	r5, [sp, #152]	; 0x98
 8004476:	f014 ff2b 	bl	80192d0 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    b1_3_1.setXY(120, 71);
 800447a:	9805      	ldr	r0, [sp, #20]
 800447c:	2247      	movs	r2, #71	; 0x47
 800447e:	2178      	movs	r1, #120	; 0x78
 8004480:	f7ff fb9c 	bl	8003bbc <_ZN8touchgfx8Drawable5setXYEss>
    b1_3_1.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BA_ID));
 8004484:	aa27      	add	r2, sp, #156	; 0x9c
 8004486:	a926      	add	r1, sp, #152	; 0x98
 8004488:	9805      	ldr	r0, [sp, #20]
 800448a:	f8ad 409c 	strh.w	r4, [sp, #156]	; 0x9c
 800448e:	f8ad 5098 	strh.w	r5, [sp, #152]	; 0x98
 8004492:	f014 ff1d 	bl	80192d0 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    b1_4_1.setXY(178, 71);
 8004496:	9806      	ldr	r0, [sp, #24]
 8004498:	2247      	movs	r2, #71	; 0x47
 800449a:	21b2      	movs	r1, #178	; 0xb2
 800449c:	f7ff fb8e 	bl	8003bbc <_ZN8touchgfx8Drawable5setXYEss>
    b1_4_1.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BA_ID));
 80044a0:	aa27      	add	r2, sp, #156	; 0x9c
 80044a2:	a926      	add	r1, sp, #152	; 0x98
 80044a4:	9806      	ldr	r0, [sp, #24]
 80044a6:	f8ad 409c 	strh.w	r4, [sp, #156]	; 0x9c
 80044aa:	f8ad 5098 	strh.w	r5, [sp, #152]	; 0x98
 80044ae:	f014 ff0f 	bl	80192d0 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    b1_5_1.setXY(238, 71);
 80044b2:	9807      	ldr	r0, [sp, #28]
 80044b4:	2247      	movs	r2, #71	; 0x47
 80044b6:	21ee      	movs	r1, #238	; 0xee
 80044b8:	f7ff fb80 	bl	8003bbc <_ZN8touchgfx8Drawable5setXYEss>
    b1_5_1.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BA_ID));
 80044bc:	aa27      	add	r2, sp, #156	; 0x9c
 80044be:	a926      	add	r1, sp, #152	; 0x98
 80044c0:	9807      	ldr	r0, [sp, #28]
 80044c2:	f8ad 409c 	strh.w	r4, [sp, #156]	; 0x9c
 80044c6:	f8ad 5098 	strh.w	r5, [sp, #152]	; 0x98
 80044ca:	f014 ff01 	bl	80192d0 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    b1_6_1.setXY(298, 71);
 80044ce:	9808      	ldr	r0, [sp, #32]
 80044d0:	2247      	movs	r2, #71	; 0x47
 80044d2:	f44f 7195 	mov.w	r1, #298	; 0x12a
 80044d6:	f7ff fb71 	bl	8003bbc <_ZN8touchgfx8Drawable5setXYEss>
    b1_6_1.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BA_ID));
 80044da:	aa27      	add	r2, sp, #156	; 0x9c
 80044dc:	a926      	add	r1, sp, #152	; 0x98
 80044de:	9808      	ldr	r0, [sp, #32]
 80044e0:	f8ad 409c 	strh.w	r4, [sp, #156]	; 0x9c
 80044e4:	f8ad 5098 	strh.w	r5, [sp, #152]	; 0x98
 80044e8:	f014 fef2 	bl	80192d0 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    b1_7_1.setXY(358, 71);
 80044ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80044ee:	2247      	movs	r2, #71	; 0x47
 80044f0:	f44f 71b3 	mov.w	r1, #358	; 0x166
 80044f4:	f7ff fb62 	bl	8003bbc <_ZN8touchgfx8Drawable5setXYEss>
    b1_7_1.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BA_ID));
 80044f8:	aa27      	add	r2, sp, #156	; 0x9c
 80044fa:	a926      	add	r1, sp, #152	; 0x98
 80044fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80044fe:	f8ad 409c 	strh.w	r4, [sp, #156]	; 0x9c
 8004502:	f8ad 5098 	strh.w	r5, [sp, #152]	; 0x98
 8004506:	f014 fee3 	bl	80192d0 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    b1_8_1.setXY(418, 71);
 800450a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800450c:	2247      	movs	r2, #71	; 0x47
 800450e:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 8004512:	f7ff fb53 	bl	8003bbc <_ZN8touchgfx8Drawable5setXYEss>
    b1_8_1.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BA_ID));
 8004516:	aa27      	add	r2, sp, #156	; 0x9c
 8004518:	a926      	add	r1, sp, #152	; 0x98
 800451a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800451c:	f8ad 409c 	strh.w	r4, [sp, #156]	; 0x9c
 8004520:	f8ad 5098 	strh.w	r5, [sp, #152]	; 0x98
 8004524:	f014 fed4 	bl	80192d0 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    b1_1_2.setXY(1, 139);
 8004528:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800452a:	228b      	movs	r2, #139	; 0x8b
 800452c:	2101      	movs	r1, #1
 800452e:	f7ff fb45 	bl	8003bbc <_ZN8touchgfx8Drawable5setXYEss>
    b1_1_2.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BA_ID));
 8004532:	aa27      	add	r2, sp, #156	; 0x9c
 8004534:	a926      	add	r1, sp, #152	; 0x98
 8004536:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8004538:	f8ad 409c 	strh.w	r4, [sp, #156]	; 0x9c
 800453c:	f8ad 5098 	strh.w	r5, [sp, #152]	; 0x98
 8004540:	f014 fec6 	bl	80192d0 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    b1_2_2.setXY(61, 139);
 8004544:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004546:	228b      	movs	r2, #139	; 0x8b
 8004548:	213d      	movs	r1, #61	; 0x3d
 800454a:	f7ff fb37 	bl	8003bbc <_ZN8touchgfx8Drawable5setXYEss>
    b1_2_2.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BA_ID));
 800454e:	aa27      	add	r2, sp, #156	; 0x9c
 8004550:	a926      	add	r1, sp, #152	; 0x98
 8004552:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004554:	f8ad 409c 	strh.w	r4, [sp, #156]	; 0x9c
 8004558:	f8ad 5098 	strh.w	r5, [sp, #152]	; 0x98
 800455c:	f014 feb8 	bl	80192d0 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    b1_3_2.setXY(121, 139);
 8004560:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004562:	228b      	movs	r2, #139	; 0x8b
 8004564:	2179      	movs	r1, #121	; 0x79
 8004566:	f7ff fb29 	bl	8003bbc <_ZN8touchgfx8Drawable5setXYEss>
    b1_3_2.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BA_ID));
 800456a:	aa27      	add	r2, sp, #156	; 0x9c
 800456c:	a926      	add	r1, sp, #152	; 0x98
 800456e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004570:	f8ad 409c 	strh.w	r4, [sp, #156]	; 0x9c
 8004574:	f8ad 5098 	strh.w	r5, [sp, #152]	; 0x98
 8004578:	f014 feaa 	bl	80192d0 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    b1_4_2.setXY(179, 139);
 800457c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800457e:	228b      	movs	r2, #139	; 0x8b
 8004580:	21b3      	movs	r1, #179	; 0xb3
 8004582:	f7ff fb1b 	bl	8003bbc <_ZN8touchgfx8Drawable5setXYEss>
    b1_4_2.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BA_ID));
 8004586:	aa27      	add	r2, sp, #156	; 0x9c
 8004588:	a926      	add	r1, sp, #152	; 0x98
 800458a:	980e      	ldr	r0, [sp, #56]	; 0x38
 800458c:	f8ad 409c 	strh.w	r4, [sp, #156]	; 0x9c
 8004590:	f8ad 5098 	strh.w	r5, [sp, #152]	; 0x98
 8004594:	f014 fe9c 	bl	80192d0 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    b1_5_2.setXY(239, 139);
 8004598:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800459a:	228b      	movs	r2, #139	; 0x8b
 800459c:	21ef      	movs	r1, #239	; 0xef
 800459e:	f7ff fb0d 	bl	8003bbc <_ZN8touchgfx8Drawable5setXYEss>
    b1_5_2.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BA_ID));
 80045a2:	aa27      	add	r2, sp, #156	; 0x9c
 80045a4:	a926      	add	r1, sp, #152	; 0x98
 80045a6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80045a8:	f8ad 409c 	strh.w	r4, [sp, #156]	; 0x9c
 80045ac:	f8ad 5098 	strh.w	r5, [sp, #152]	; 0x98
 80045b0:	f014 fe8e 	bl	80192d0 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    b1_6_2.setXY(299, 139);
 80045b4:	9810      	ldr	r0, [sp, #64]	; 0x40
 80045b6:	228b      	movs	r2, #139	; 0x8b
 80045b8:	f240 112b 	movw	r1, #299	; 0x12b
 80045bc:	f7ff fafe 	bl	8003bbc <_ZN8touchgfx8Drawable5setXYEss>
    b1_6_2.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BA_ID));
 80045c0:	aa27      	add	r2, sp, #156	; 0x9c
 80045c2:	a926      	add	r1, sp, #152	; 0x98
 80045c4:	9810      	ldr	r0, [sp, #64]	; 0x40
 80045c6:	f8ad 409c 	strh.w	r4, [sp, #156]	; 0x9c
 80045ca:	f8ad 5098 	strh.w	r5, [sp, #152]	; 0x98
 80045ce:	f014 fe7f 	bl	80192d0 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    b1_7_2.setXY(359, 139);
 80045d2:	9811      	ldr	r0, [sp, #68]	; 0x44
 80045d4:	228b      	movs	r2, #139	; 0x8b
 80045d6:	f240 1167 	movw	r1, #359	; 0x167
 80045da:	f7ff faef 	bl	8003bbc <_ZN8touchgfx8Drawable5setXYEss>
    b1_7_2.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BA_ID));
 80045de:	aa27      	add	r2, sp, #156	; 0x9c
 80045e0:	a926      	add	r1, sp, #152	; 0x98
 80045e2:	9811      	ldr	r0, [sp, #68]	; 0x44
 80045e4:	f8ad 409c 	strh.w	r4, [sp, #156]	; 0x9c
 80045e8:	f8ad 5098 	strh.w	r5, [sp, #152]	; 0x98
 80045ec:	f014 fe70 	bl	80192d0 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    b1_8_2.setXY(419, 139);
 80045f0:	9812      	ldr	r0, [sp, #72]	; 0x48
 80045f2:	228b      	movs	r2, #139	; 0x8b
 80045f4:	f240 11a3 	movw	r1, #419	; 0x1a3
 80045f8:	f7ff fae0 	bl	8003bbc <_ZN8touchgfx8Drawable5setXYEss>
    b1_8_2.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BA_ID));
 80045fc:	aa27      	add	r2, sp, #156	; 0x9c
 80045fe:	a926      	add	r1, sp, #152	; 0x98
 8004600:	9812      	ldr	r0, [sp, #72]	; 0x48
 8004602:	f8ad 409c 	strh.w	r4, [sp, #156]	; 0x9c
 8004606:	f8ad 5098 	strh.w	r5, [sp, #152]	; 0x98
 800460a:	f014 fe61 	bl	80192d0 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    b1_1_5.setXY(1, 209);
 800460e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8004610:	22d1      	movs	r2, #209	; 0xd1
 8004612:	2101      	movs	r1, #1
 8004614:	f7ff fad2 	bl	8003bbc <_ZN8touchgfx8Drawable5setXYEss>
    b1_1_5.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BA_ID));
 8004618:	aa27      	add	r2, sp, #156	; 0x9c
 800461a:	a926      	add	r1, sp, #152	; 0x98
 800461c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800461e:	f8ad 409c 	strh.w	r4, [sp, #156]	; 0x9c
 8004622:	f8ad 5098 	strh.w	r5, [sp, #152]	; 0x98
 8004626:	f014 fe53 	bl	80192d0 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    b1_2_5.setXY(61, 209);
 800462a:	9814      	ldr	r0, [sp, #80]	; 0x50
 800462c:	22d1      	movs	r2, #209	; 0xd1
 800462e:	213d      	movs	r1, #61	; 0x3d
 8004630:	f7ff fac4 	bl	8003bbc <_ZN8touchgfx8Drawable5setXYEss>
    b1_2_5.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BA_ID));
 8004634:	aa27      	add	r2, sp, #156	; 0x9c
 8004636:	a926      	add	r1, sp, #152	; 0x98
 8004638:	9814      	ldr	r0, [sp, #80]	; 0x50
 800463a:	f8ad 409c 	strh.w	r4, [sp, #156]	; 0x9c
 800463e:	f8ad 5098 	strh.w	r5, [sp, #152]	; 0x98
 8004642:	f014 fe45 	bl	80192d0 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    b1_3_5.setXY(121, 209);
 8004646:	9815      	ldr	r0, [sp, #84]	; 0x54
 8004648:	22d1      	movs	r2, #209	; 0xd1
 800464a:	2179      	movs	r1, #121	; 0x79
 800464c:	f7ff fab6 	bl	8003bbc <_ZN8touchgfx8Drawable5setXYEss>
    b1_3_5.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BA_ID));
 8004650:	aa27      	add	r2, sp, #156	; 0x9c
 8004652:	a926      	add	r1, sp, #152	; 0x98
 8004654:	9815      	ldr	r0, [sp, #84]	; 0x54
 8004656:	f8ad 409c 	strh.w	r4, [sp, #156]	; 0x9c
 800465a:	f8ad 5098 	strh.w	r5, [sp, #152]	; 0x98
 800465e:	f014 fe37 	bl	80192d0 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    b1_4_5.setXY(179, 209);
 8004662:	9816      	ldr	r0, [sp, #88]	; 0x58
 8004664:	22d1      	movs	r2, #209	; 0xd1
 8004666:	21b3      	movs	r1, #179	; 0xb3
 8004668:	f7ff faa8 	bl	8003bbc <_ZN8touchgfx8Drawable5setXYEss>
    b1_4_5.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BA_ID));
 800466c:	aa27      	add	r2, sp, #156	; 0x9c
 800466e:	a926      	add	r1, sp, #152	; 0x98
 8004670:	9816      	ldr	r0, [sp, #88]	; 0x58
 8004672:	f8ad 409c 	strh.w	r4, [sp, #156]	; 0x9c
 8004676:	f8ad 5098 	strh.w	r5, [sp, #152]	; 0x98
 800467a:	f014 fe29 	bl	80192d0 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    b1_5_5.setXY(239, 209);
 800467e:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8004680:	22d1      	movs	r2, #209	; 0xd1
 8004682:	21ef      	movs	r1, #239	; 0xef
 8004684:	f7ff fa9a 	bl	8003bbc <_ZN8touchgfx8Drawable5setXYEss>
    b1_5_5.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BA_ID));
 8004688:	aa27      	add	r2, sp, #156	; 0x9c
 800468a:	a926      	add	r1, sp, #152	; 0x98
 800468c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800468e:	f8ad 409c 	strh.w	r4, [sp, #156]	; 0x9c
 8004692:	f8ad 5098 	strh.w	r5, [sp, #152]	; 0x98
 8004696:	f014 fe1b 	bl	80192d0 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    b1_6_5.setXY(299, 209);
 800469a:	9818      	ldr	r0, [sp, #96]	; 0x60
 800469c:	22d1      	movs	r2, #209	; 0xd1
 800469e:	f240 112b 	movw	r1, #299	; 0x12b
 80046a2:	f7ff fa8b 	bl	8003bbc <_ZN8touchgfx8Drawable5setXYEss>
    b1_6_5.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BA_ID));
 80046a6:	aa27      	add	r2, sp, #156	; 0x9c
 80046a8:	a926      	add	r1, sp, #152	; 0x98
 80046aa:	9818      	ldr	r0, [sp, #96]	; 0x60
 80046ac:	f8ad 409c 	strh.w	r4, [sp, #156]	; 0x9c
 80046b0:	f8ad 5098 	strh.w	r5, [sp, #152]	; 0x98
 80046b4:	f014 fe0c 	bl	80192d0 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    b1_7_5.setXY(359, 209);
 80046b8:	9819      	ldr	r0, [sp, #100]	; 0x64
 80046ba:	22d1      	movs	r2, #209	; 0xd1
 80046bc:	f240 1167 	movw	r1, #359	; 0x167
 80046c0:	f7ff fa7c 	bl	8003bbc <_ZN8touchgfx8Drawable5setXYEss>
    b1_7_5.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BA_ID));
 80046c4:	aa27      	add	r2, sp, #156	; 0x9c
 80046c6:	a926      	add	r1, sp, #152	; 0x98
 80046c8:	9819      	ldr	r0, [sp, #100]	; 0x64
 80046ca:	f8ad 409c 	strh.w	r4, [sp, #156]	; 0x9c
 80046ce:	f8ad 5098 	strh.w	r5, [sp, #152]	; 0x98
 80046d2:	f014 fdfd 	bl	80192d0 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    b1_8_5.setXY(419, 209);
 80046d6:	981a      	ldr	r0, [sp, #104]	; 0x68
 80046d8:	22d1      	movs	r2, #209	; 0xd1
 80046da:	f240 11a3 	movw	r1, #419	; 0x1a3
 80046de:	f7ff fa6d 	bl	8003bbc <_ZN8touchgfx8Drawable5setXYEss>
 80046e2:	f8ad 409c 	strh.w	r4, [sp, #156]	; 0x9c
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
 80046e6:	eb08 0406 	add.w	r4, r8, r6
    b1_8_5.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BA_ID));
 80046ea:	aa27      	add	r2, sp, #156	; 0x9c
 80046ec:	a926      	add	r1, sp, #152	; 0x98
 80046ee:	981a      	ldr	r0, [sp, #104]	; 0x68
 80046f0:	f8ad 5098 	strh.w	r5, [sp, #152]	; 0x98
 80046f4:	f014 fdec 	bl	80192d0 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 80046f8:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80046fa:	4620      	mov	r0, r4
 80046fc:	f012 fdbc 	bl	8017278 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8004700:	ee1b 1a90 	vmov	r1, s23
 8004704:	4620      	mov	r0, r4
 8004706:	f012 fdb7 	bl	8017278 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800470a:	ee18 1a10 	vmov	r1, s16
 800470e:	4620      	mov	r0, r4
 8004710:	f012 fdb2 	bl	8017278 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8004714:	ee18 1a90 	vmov	r1, s17
 8004718:	4620      	mov	r0, r4
 800471a:	f012 fdad 	bl	8017278 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800471e:	ee19 1a10 	vmov	r1, s18
 8004722:	4620      	mov	r0, r4
 8004724:	f012 fda8 	bl	8017278 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8004728:	ee19 1a90 	vmov	r1, s19
 800472c:	4620      	mov	r0, r4
 800472e:	f012 fda3 	bl	8017278 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8004732:	4659      	mov	r1, fp
 8004734:	4620      	mov	r0, r4
 8004736:	f012 fd9f 	bl	8017278 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800473a:	4651      	mov	r1, sl
 800473c:	4620      	mov	r0, r4
 800473e:	f012 fd9b 	bl	8017278 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8004742:	4649      	mov	r1, r9
 8004744:	4620      	mov	r0, r4
 8004746:	f012 fd97 	bl	8017278 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800474a:	ee1a 1a10 	vmov	r1, s20
 800474e:	4620      	mov	r0, r4
 8004750:	f012 fd92 	bl	8017278 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8004754:	ee1a 1a90 	vmov	r1, s21
 8004758:	4620      	mov	r0, r4
 800475a:	f012 fd8d 	bl	8017278 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800475e:	ee1b 1a10 	vmov	r1, s22
 8004762:	4620      	mov	r0, r4
 8004764:	f012 fd88 	bl	8017278 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8004768:	ee1c 1a10 	vmov	r1, s24
 800476c:	4620      	mov	r0, r4
 800476e:	f012 fd83 	bl	8017278 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8004772:	ee1c 1a90 	vmov	r1, s25
 8004776:	4620      	mov	r0, r4
 8004778:	f012 fd7e 	bl	8017278 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800477c:	ee1d 1a10 	vmov	r1, s26
 8004780:	4620      	mov	r0, r4
 8004782:	f012 fd79 	bl	8017278 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8004786:	ee1d 1a90 	vmov	r1, s27
 800478a:	4620      	mov	r0, r4
 800478c:	f012 fd74 	bl	8017278 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8004790:	ee1e 1a10 	vmov	r1, s28
 8004794:	4620      	mov	r0, r4
 8004796:	f012 fd6f 	bl	8017278 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800479a:	ee1e 1a90 	vmov	r1, s29
 800479e:	4620      	mov	r0, r4
 80047a0:	f012 fd6a 	bl	8017278 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80047a4:	ee1f 1a10 	vmov	r1, s30
 80047a8:	4620      	mov	r0, r4
 80047aa:	f012 fd65 	bl	8017278 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80047ae:	ee1f 1a90 	vmov	r1, s31
 80047b2:	4620      	mov	r0, r4
 80047b4:	f012 fd60 	bl	8017278 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80047b8:	9903      	ldr	r1, [sp, #12]
 80047ba:	4620      	mov	r0, r4
 80047bc:	f012 fd5c 	bl	8017278 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80047c0:	9904      	ldr	r1, [sp, #16]
 80047c2:	4620      	mov	r0, r4
 80047c4:	f012 fd58 	bl	8017278 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80047c8:	9905      	ldr	r1, [sp, #20]
 80047ca:	4620      	mov	r0, r4
 80047cc:	f012 fd54 	bl	8017278 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80047d0:	9906      	ldr	r1, [sp, #24]
 80047d2:	4620      	mov	r0, r4
 80047d4:	f012 fd50 	bl	8017278 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80047d8:	9907      	ldr	r1, [sp, #28]
 80047da:	4620      	mov	r0, r4
 80047dc:	f012 fd4c 	bl	8017278 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80047e0:	9908      	ldr	r1, [sp, #32]
 80047e2:	4620      	mov	r0, r4
 80047e4:	f012 fd48 	bl	8017278 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80047e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80047ea:	4620      	mov	r0, r4
 80047ec:	f012 fd44 	bl	8017278 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80047f0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80047f2:	4620      	mov	r0, r4
 80047f4:	f012 fd40 	bl	8017278 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80047f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80047fa:	4620      	mov	r0, r4
 80047fc:	f012 fd3c 	bl	8017278 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8004800:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004802:	4620      	mov	r0, r4
 8004804:	f012 fd38 	bl	8017278 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8004808:	990d      	ldr	r1, [sp, #52]	; 0x34
 800480a:	4620      	mov	r0, r4
 800480c:	f012 fd34 	bl	8017278 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8004810:	990e      	ldr	r1, [sp, #56]	; 0x38
 8004812:	4620      	mov	r0, r4
 8004814:	f012 fd30 	bl	8017278 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8004818:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800481a:	4620      	mov	r0, r4
 800481c:	f012 fd2c 	bl	8017278 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8004820:	9910      	ldr	r1, [sp, #64]	; 0x40
 8004822:	4620      	mov	r0, r4
 8004824:	f012 fd28 	bl	8017278 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8004828:	9911      	ldr	r1, [sp, #68]	; 0x44
 800482a:	4620      	mov	r0, r4
 800482c:	f012 fd24 	bl	8017278 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8004830:	9912      	ldr	r1, [sp, #72]	; 0x48
 8004832:	4620      	mov	r0, r4
 8004834:	f012 fd20 	bl	8017278 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8004838:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800483a:	4620      	mov	r0, r4
 800483c:	f012 fd1c 	bl	8017278 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8004840:	9914      	ldr	r1, [sp, #80]	; 0x50
 8004842:	4620      	mov	r0, r4
 8004844:	f012 fd18 	bl	8017278 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8004848:	9915      	ldr	r1, [sp, #84]	; 0x54
 800484a:	4620      	mov	r0, r4
 800484c:	f012 fd14 	bl	8017278 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8004850:	9916      	ldr	r1, [sp, #88]	; 0x58
 8004852:	4620      	mov	r0, r4
 8004854:	f012 fd10 	bl	8017278 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8004858:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800485a:	4620      	mov	r0, r4
 800485c:	f012 fd0c 	bl	8017278 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8004860:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004862:	4620      	mov	r0, r4
 8004864:	f012 fd08 	bl	8017278 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8004868:	9919      	ldr	r1, [sp, #100]	; 0x64
 800486a:	4620      	mov	r0, r4
 800486c:	f012 fd04 	bl	8017278 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8004870:	4620      	mov	r0, r4
 8004872:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004874:	f012 fd00 	bl	8017278 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8004878:	4640      	mov	r0, r8
 800487a:	b029      	add	sp, #164	; 0xa4
 800487c:	ecbd 8b10 	vpop	{d8-d15}
 8004880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004884 <_ZN12ruleViewBaseD1Ev>:

class ruleViewBase : public touchgfx::View<rulePresenter>
{
public:
    ruleViewBase();
    virtual ~ruleViewBase() {}
 8004884:	4770      	bx	lr

08004886 <_ZN12ruleViewBase11setupScreenEv>:
}

void ruleViewBase::setupScreen()
{

}
 8004886:	4770      	bx	lr

08004888 <_ZN8touchgfx8CallbackI12ruleViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8004888:	4770      	bx	lr

0800488a <_ZN8touchgfx8CallbackI12ruleViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 800488a:	b430      	push	{r4, r5}
        (pobject->*pmemfun)(t1);
 800488c:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 800488e:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 8004890:	68c2      	ldr	r2, [r0, #12]
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	1055      	asrs	r5, r2, #1
 8004896:	eb04 0062 	add.w	r0, r4, r2, asr #1
 800489a:	07d2      	lsls	r2, r2, #31
 800489c:	bf48      	it	mi
 800489e:	5962      	ldrmi	r2, [r4, r5]
    }
 80048a0:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun)(t1);
 80048a2:	bf48      	it	mi
 80048a4:	58d3      	ldrmi	r3, [r2, r3]
 80048a6:	4718      	bx	r3

080048a8 <_ZNK8touchgfx8CallbackI12ruleViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
        return (pobject != 0) && (pmemfun != 0);
 80048a8:	6843      	ldr	r3, [r0, #4]
 80048aa:	b12b      	cbz	r3, 80048b8 <_ZNK8touchgfx8CallbackI12ruleViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x10>
 80048ac:	6883      	ldr	r3, [r0, #8]
 80048ae:	b92b      	cbnz	r3, 80048bc <_ZNK8touchgfx8CallbackI12ruleViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x14>
 80048b0:	68c0      	ldr	r0, [r0, #12]
 80048b2:	f000 0001 	and.w	r0, r0, #1
 80048b6:	4770      	bx	lr
 80048b8:	4618      	mov	r0, r3
 80048ba:	4770      	bx	lr
 80048bc:	2001      	movs	r0, #1
    }
 80048be:	4770      	bx	lr

080048c0 <_ZN8touchgfx8CallbackI12ruleViewBaseRKNS_14AbstractButtonEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80048c0:	b510      	push	{r4, lr}
 80048c2:	4604      	mov	r4, r0
 80048c4:	2110      	movs	r1, #16
 80048c6:	f025 fbe7 	bl	802a098 <_ZdlPvj>
 80048ca:	4620      	mov	r0, r4
 80048cc:	bd10      	pop	{r4, pc}

080048ce <_ZN12ruleViewBaseD0Ev>:
 80048ce:	b510      	push	{r4, lr}
 80048d0:	4604      	mov	r4, r0
 80048d2:	21dc      	movs	r1, #220	; 0xdc
 80048d4:	f025 fbe0 	bl	802a098 <_ZdlPvj>
 80048d8:	4620      	mov	r0, r4
 80048da:	bd10      	pop	{r4, pc}

080048dc <_ZN12ruleViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void ruleViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &button1)
 80048dc:	306c      	adds	r0, #108	; 0x6c
 80048de:	4288      	cmp	r0, r1
{
 80048e0:	b508      	push	{r3, lr}
    if (&src == &button1)
 80048e2:	d105      	bne.n	80048f0 <_ZN12ruleViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x14>
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 80048e4:	f016 fd82 	bl	801b3ec <_ZN8touchgfx11Application11getInstanceEv>
        //Interaction1
        //When button1 clicked change screen to playscreen
        //Go to playscreen with no screen transition
        application().gotoplayscreenScreenNoTransition();
    }
}
 80048e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        application().gotoplayscreenScreenNoTransition();
 80048ec:	f7fe bf4e 	b.w	800378c <_ZN23FrontendApplicationBase32gotoplayscreenScreenNoTransitionEv>
}
 80048f0:	bd08      	pop	{r3, pc}
	...

080048f4 <_ZN12ruleViewBaseC1Ev>:
ruleViewBase::ruleViewBase() :
 80048f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80048f8:	4604      	mov	r4, r0
 80048fa:	b087      	sub	sp, #28
 80048fc:	f018 f89c 	bl	801ca38 <_ZN8touchgfx6ScreenC1Ev>
 8004900:	2500      	movs	r5, #0
    buttonCallback(this, &ruleViewBase::buttonCallbackHandler)
 8004902:	4627      	mov	r7, r4
 8004904:	4b42      	ldr	r3, [pc, #264]	; (8004a10 <_ZN12ruleViewBaseC1Ev+0x11c>)
 8004906:	63e5      	str	r5, [r4, #60]	; 0x3c
 8004908:	f104 06a0 	add.w	r6, r4, #160	; 0xa0
 800490c:	f847 3b40 	str.w	r3, [r7], #64
 8004910:	a905      	add	r1, sp, #20
        : Widget(), alpha(255), color(0)
 8004912:	4b40      	ldr	r3, [pc, #256]	; (8004a14 <_ZN12ruleViewBaseC1Ev+0x120>)
 8004914:	4630      	mov	r0, r6
 8004916:	6625      	str	r5, [r4, #96]	; 0x60
    __background.setPosition(0, 0, 480, 272);
 8004918:	f44f 7988 	mov.w	r9, #272	; 0x110
        : color(col)
 800491c:	66a5      	str	r5, [r4, #104]	; 0x68
    buttonCallback(this, &ruleViewBase::buttonCallbackHandler)
 800491e:	f104 086c 	add.w	r8, r4, #108	; 0x6c
 8004922:	f8c4 5094 	str.w	r5, [r4, #148]	; 0x94
 8004926:	f884 5098 	strb.w	r5, [r4, #152]	; 0x98
        : x(0), y(0), width(0), height(0)
 800492a:	e9c4 3510 	strd	r3, r5, [r4, #64]	; 0x40
 800492e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004932:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
 8004936:	23ff      	movs	r3, #255	; 0xff
 8004938:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
        touchable = touch;
 800493c:	f240 1301 	movw	r3, #257	; 0x101
 8004940:	f8a4 3090 	strh.w	r3, [r4, #144]	; 0x90
        : AbstractButton(), up(), down(), alpha(255)
 8004944:	4b34      	ldr	r3, [pc, #208]	; (8004a18 <_ZN12ruleViewBaseC1Ev+0x124>)
 8004946:	66e3      	str	r3, [r4, #108]	; 0x6c
 8004948:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800494c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004950:	f8a4 309a 	strh.w	r3, [r4, #154]	; 0x9a
 8004954:	f8a4 309c 	strh.w	r3, [r4, #156]	; 0x9c
 8004958:	f884 309e 	strb.w	r3, [r4, #158]	; 0x9e
 800495c:	f8ad 3014 	strh.w	r3, [sp, #20]
          visible(true)
 8004960:	e9c4 5514 	strd	r5, r5, [r4, #80]	; 0x50
 8004964:	e9c4 5516 	strd	r5, r5, [r4, #88]	; 0x58
 8004968:	e9c4 551c 	strd	r5, r5, [r4, #112]	; 0x70
 800496c:	e9c4 551e 	strd	r5, r5, [r4, #120]	; 0x78
 8004970:	e9c4 5520 	strd	r5, r5, [r4, #128]	; 0x80
 8004974:	e9c4 5522 	strd	r5, r5, [r4, #136]	; 0x88
 8004978:	f014 fa76 	bl	8018e68 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>
        : pobject(pObject), pmemfun(pmemfun_1)
 800497c:	4b27      	ldr	r3, [pc, #156]	; (8004a1c <_ZN12ruleViewBaseC1Ev+0x128>)
    __background.setPosition(0, 0, 480, 272);
 800497e:	462a      	mov	r2, r5
 8004980:	4629      	mov	r1, r5
 8004982:	4638      	mov	r0, r7
 8004984:	f8cd 9000 	str.w	r9, [sp]
 8004988:	e9c4 3433 	strd	r3, r4, [r4, #204]	; 0xcc
 800498c:	4b24      	ldr	r3, [pc, #144]	; (8004a20 <_ZN12ruleViewBaseC1Ev+0x12c>)
 800498e:	e9c4 3535 	strd	r3, r5, [r4, #212]	; 0xd4
 8004992:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8004996:	f7ff f91e 	bl	8003bd6 <_ZN8touchgfx8Drawable11setPositionEssss>
        color = newColor;
 800499a:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
    button1.setXY(0, 0);
 800499e:	462a      	mov	r2, r5
 80049a0:	4629      	mov	r1, r5
 80049a2:	4640      	mov	r0, r8
 80049a4:	66a3      	str	r3, [r4, #104]	; 0x68
 80049a6:	f7ff f909 	bl	8003bbc <_ZN8touchgfx8Drawable5setXYEss>
 80049aa:	2304      	movs	r3, #4
    button1.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BACKGROUNDS_MAIN_BG_480X272PX_ID), touchgfx::Bitmap(BITMAP_BLUE_BACKGROUNDS_MAIN_BG_480X272PX_ID));
 80049ac:	aa05      	add	r2, sp, #20
 80049ae:	a904      	add	r1, sp, #16
 80049b0:	4640      	mov	r0, r8
 80049b2:	f8ad 3010 	strh.w	r3, [sp, #16]
 80049b6:	f8ad 3014 	strh.w	r3, [sp, #20]
 80049ba:	f014 fc89 	bl	80192d0 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    button1.setAction(buttonCallback);
 80049be:	f104 03cc 	add.w	r3, r4, #204	; 0xcc
    scalableImage1.setBitmap(touchgfx::Bitmap(BITMAP_RULE_ID));
 80049c2:	a905      	add	r1, sp, #20
 80049c4:	4630      	mov	r0, r6
     *
     * @see GenericCallback, handleClickEvent, ClickEvent
     */
    void setAction(GenericCallback<const AbstractButton&>& callback)
    {
        action = &callback;
 80049c6:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 80049ca:	2310      	movs	r3, #16
 80049cc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80049d0:	f014 fd4b 	bl	801946a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    scalableImage1.setPosition(0, 0, 480, 272);
 80049d4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80049d8:	462a      	mov	r2, r5
 80049da:	4629      	mov	r1, r5
 80049dc:	4630      	mov	r0, r6
 80049de:	f8cd 9000 	str.w	r9, [sp]
 80049e2:	f7ff f8f8 	bl	8003bd6 <_ZN8touchgfx8Drawable11setPositionEssss>
    scalableImage1.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
 80049e6:	4629      	mov	r1, r5
 80049e8:	4630      	mov	r0, r6
 80049ea:	f014 fa04 	bl	8018df6 <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>
 80049ee:	1d20      	adds	r0, r4, #4
 80049f0:	4639      	mov	r1, r7
 80049f2:	9003      	str	r0, [sp, #12]
 80049f4:	f012 fc40 	bl	8017278 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80049f8:	4641      	mov	r1, r8
 80049fa:	9803      	ldr	r0, [sp, #12]
 80049fc:	f012 fc3c 	bl	8017278 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8004a00:	9803      	ldr	r0, [sp, #12]
 8004a02:	4631      	mov	r1, r6
 8004a04:	f012 fc38 	bl	8017278 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8004a08:	4620      	mov	r0, r4
 8004a0a:	b007      	add	sp, #28
 8004a0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004a10:	0802d87c 	.word	0x0802d87c
 8004a14:	0802fd78 	.word	0x0802fd78
 8004a18:	0802fde0 	.word	0x0802fde0
 8004a1c:	0802d864 	.word	0x0802d864
 8004a20:	080048dd 	.word	0x080048dd

08004a24 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8004a24:	4770      	bx	lr

08004a26 <_ZN19FrontendApplicationD0Ev>:
 8004a26:	b510      	push	{r4, lr}
 8004a28:	4604      	mov	r4, r0
 8004a2a:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8004a2e:	f025 fb33 	bl	802a098 <_ZdlPvj>
 8004a32:	4620      	mov	r0, r4
 8004a34:	bd10      	pop	{r4, pc}

08004a36 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8004a36:	b510      	push	{r4, lr}
 8004a38:	4604      	mov	r4, r0
    {
        model.tick();
 8004a3a:	f8d0 0154 	ldr.w	r0, [r0, #340]	; 0x154
 8004a3e:	f000 f812 	bl	8004a66 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8004a42:	4620      	mov	r0, r4
    }
 8004a44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FrontendApplicationBase::handleTickEvent();
 8004a48:	f016 bb7e 	b.w	801b148 <_ZN8touchgfx11Application15handleTickEventEv>

08004a4c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8004a4c:	b510      	push	{r4, lr}
 8004a4e:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
 8004a50:	f7fe fe60 	bl	8003714 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8004a54:	4b01      	ldr	r3, [pc, #4]	; (8004a5c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
{

}
 8004a56:	4620      	mov	r0, r4
    : FrontendApplicationBase(m, heap)
 8004a58:	6023      	str	r3, [r4, #0]
}
 8004a5a:	bd10      	pop	{r4, pc}
 8004a5c:	0802d8b0 	.word	0x0802d8b0

08004a60 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 8004a60:	2200      	movs	r2, #0
 8004a62:	6002      	str	r2, [r0, #0]
{

}
 8004a64:	4770      	bx	lr

08004a66 <_ZN5Model4tickEv>:

void Model::tick()
{

}
 8004a66:	4770      	bx	lr

08004a68 <_ZN19playscreenPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~playscreenPresenter() {};
 8004a68:	4770      	bx	lr

08004a6a <_ZThn4_N19playscreenPresenterD1Ev>:
 8004a6a:	3804      	subs	r0, #4
 8004a6c:	4770      	bx	lr

08004a6e <_ZN19playscreenPresenter10deactivateEv>:
}

void playscreenPresenter::activate()
{

}
 8004a6e:	4770      	bx	lr

08004a70 <_ZN19playscreenPresenterD0Ev>:
 8004a70:	b510      	push	{r4, lr}
 8004a72:	4604      	mov	r4, r0
 8004a74:	2110      	movs	r1, #16
 8004a76:	f025 fb0f 	bl	802a098 <_ZdlPvj>
 8004a7a:	4620      	mov	r0, r4
 8004a7c:	bd10      	pop	{r4, pc}

08004a7e <_ZThn4_N19playscreenPresenterD0Ev>:
 8004a7e:	f1a0 0004 	sub.w	r0, r0, #4
 8004a82:	e7f5      	b.n	8004a70 <_ZN19playscreenPresenterD0Ev>

08004a84 <_ZN19playscreenPresenterC1ER14playscreenView>:
    ModelListener() : model(0) {}
 8004a84:	2200      	movs	r2, #0
    : view(v)
 8004a86:	60c1      	str	r1, [r0, #12]
 8004a88:	6082      	str	r2, [r0, #8]
 8004a8a:	4a04      	ldr	r2, [pc, #16]	; (8004a9c <_ZN19playscreenPresenterC1ER14playscreenView+0x18>)
playscreenPresenter::playscreenPresenter(playscreenView& v)
 8004a8c:	b510      	push	{r4, lr}
    : view(v)
 8004a8e:	f102 0408 	add.w	r4, r2, #8
 8004a92:	3220      	adds	r2, #32
 8004a94:	6004      	str	r4, [r0, #0]
 8004a96:	6042      	str	r2, [r0, #4]
}
 8004a98:	bd10      	pop	{r4, pc}
 8004a9a:	bf00      	nop
 8004a9c:	0802d8f4 	.word	0x0802d8f4

08004aa0 <_ZN14playscreenViewD1Ev>:

class playscreenView : public playscreenViewBase
{
public:
    playscreenView();
    virtual ~playscreenView() {}
 8004aa0:	4770      	bx	lr

08004aa2 <_ZN14playscreenView14tearDownScreenEv>:
}

void playscreenView::tearDownScreen()
{
    playscreenViewBase::tearDownScreen();
}
 8004aa2:	4770      	bx	lr

08004aa4 <_ZN14playscreenView11setupScreenEv>:
{
 8004aa4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004aa6:	4604      	mov	r4, r0
    playscreenViewBase::setupScreen();
 8004aa8:	f7ff f878 	bl	8003b9c <_ZN18playscreenViewBase11setupScreenEv>
 8004aac:	2300      	movs	r3, #0
    b1_2.setBitmaps(0,0);
 8004aae:	aa03      	add	r2, sp, #12
 8004ab0:	f204 50f4 	addw	r0, r4, #1524	; 0x5f4
 8004ab4:	a902      	add	r1, sp, #8
 8004ab6:	f8ad 3008 	strh.w	r3, [sp, #8]
 8004aba:	9001      	str	r0, [sp, #4]
 8004abc:	f8ad 300c 	strh.w	r3, [sp, #12]
 8004ac0:	f014 fc06 	bl	80192d0 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    b1_2.invalidate();
 8004ac4:	9801      	ldr	r0, [sp, #4]
}
 8004ac6:	b004      	add	sp, #16
 8004ac8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b1_2.invalidate();
 8004acc:	f017 bc26 	b.w	801c31c <_ZNK8touchgfx8Drawable10invalidateEv>

08004ad0 <_ZN14playscreenViewD0Ev>:
 8004ad0:	b510      	push	{r4, lr}
 8004ad2:	4604      	mov	r4, r0
 8004ad4:	f642 0160 	movw	r1, #10336	; 0x2860
 8004ad8:	f025 fade 	bl	802a098 <_ZdlPvj>
 8004adc:	4620      	mov	r0, r4
 8004ade:	bd10      	pop	{r4, pc}

08004ae0 <_ZN14playscreenViewC1Ev>:
playscreenView::playscreenView()
 8004ae0:	b510      	push	{r4, lr}
 8004ae2:	4604      	mov	r4, r0
 8004ae4:	f7ff f8fa 	bl	8003cdc <_ZN18playscreenViewBaseC1Ev>
 8004ae8:	4b01      	ldr	r3, [pc, #4]	; (8004af0 <_ZN14playscreenViewC1Ev+0x10>)
}
 8004aea:	4620      	mov	r0, r4
playscreenView::playscreenView()
 8004aec:	6023      	str	r3, [r4, #0]
}
 8004aee:	bd10      	pop	{r4, pc}
 8004af0:	0802d924 	.word	0x0802d924

08004af4 <_ZN13rulePresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~rulePresenter() {};
 8004af4:	4770      	bx	lr

08004af6 <_ZThn4_N13rulePresenterD1Ev>:
 8004af6:	3804      	subs	r0, #4
 8004af8:	4770      	bx	lr

08004afa <_ZN13rulePresenter10deactivateEv>:
}

void rulePresenter::activate()
{

}
 8004afa:	4770      	bx	lr

08004afc <_ZN13rulePresenterD0Ev>:
 8004afc:	b510      	push	{r4, lr}
 8004afe:	4604      	mov	r4, r0
 8004b00:	2110      	movs	r1, #16
 8004b02:	f025 fac9 	bl	802a098 <_ZdlPvj>
 8004b06:	4620      	mov	r0, r4
 8004b08:	bd10      	pop	{r4, pc}

08004b0a <_ZThn4_N13rulePresenterD0Ev>:
 8004b0a:	f1a0 0004 	sub.w	r0, r0, #4
 8004b0e:	e7f5      	b.n	8004afc <_ZN13rulePresenterD0Ev>

08004b10 <_ZN13rulePresenterC1ER8ruleView>:
 8004b10:	2200      	movs	r2, #0
    : view(v)
 8004b12:	60c1      	str	r1, [r0, #12]
 8004b14:	6082      	str	r2, [r0, #8]
 8004b16:	4a04      	ldr	r2, [pc, #16]	; (8004b28 <_ZN13rulePresenterC1ER8ruleView+0x18>)
rulePresenter::rulePresenter(ruleView& v)
 8004b18:	b510      	push	{r4, lr}
    : view(v)
 8004b1a:	f102 0408 	add.w	r4, r2, #8
 8004b1e:	3220      	adds	r2, #32
 8004b20:	6004      	str	r4, [r0, #0]
 8004b22:	6042      	str	r2, [r0, #4]
}
 8004b24:	bd10      	pop	{r4, pc}
 8004b26:	bf00      	nop
 8004b28:	0802d950 	.word	0x0802d950

08004b2c <_ZN8ruleViewD1Ev>:

class ruleView : public ruleViewBase
{
public:
    ruleView();
    virtual ~ruleView() {}
 8004b2c:	4770      	bx	lr

08004b2e <_ZN8ruleView14tearDownScreenEv>:
}

void ruleView::tearDownScreen()
{
    ruleViewBase::tearDownScreen();
}
 8004b2e:	4770      	bx	lr

08004b30 <_ZN8ruleView11setupScreenEv>:
    ruleViewBase::setupScreen();
 8004b30:	f7ff bea9 	b.w	8004886 <_ZN12ruleViewBase11setupScreenEv>

08004b34 <_ZN8ruleViewD0Ev>:
 8004b34:	b510      	push	{r4, lr}
 8004b36:	4604      	mov	r4, r0
 8004b38:	21dc      	movs	r1, #220	; 0xdc
 8004b3a:	f025 faad 	bl	802a098 <_ZdlPvj>
 8004b3e:	4620      	mov	r0, r4
 8004b40:	bd10      	pop	{r4, pc}
	...

08004b44 <_ZN8ruleViewC1Ev>:
ruleView::ruleView()
 8004b44:	b510      	push	{r4, lr}
 8004b46:	4604      	mov	r4, r0
 8004b48:	f7ff fed4 	bl	80048f4 <_ZN12ruleViewBaseC1Ev>
 8004b4c:	4b01      	ldr	r3, [pc, #4]	; (8004b54 <_ZN8ruleViewC1Ev+0x10>)
}
 8004b4e:	4620      	mov	r0, r4
ruleView::ruleView()
 8004b50:	6023      	str	r3, [r4, #0]
}
 8004b52:	bd10      	pop	{r4, pc}
 8004b54:	0802d980 	.word	0x0802d980

08004b58 <QSPI_AutoPollingMemReady.constprop.0>:
  * @brief  This function read the SR of the memory and wait the EOP.
  * @param  hqspi: QSPI handle
  * @param  Timeout
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
 8004b58:	b500      	push	{lr}
{
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */  
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004b5a:	f44f 7280 	mov.w	r2, #256	; 0x100
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
 8004b5e:	b095      	sub	sp, #84	; 0x54
  s_command.Instruction       = READ_STATUS_REG_CMD;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode          = QSPI_DATA_1_LINE;
 8004b60:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
 8004b64:	4603      	mov	r3, r0
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004b66:	920c      	str	r2, [sp, #48]	; 0x30
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8004b68:	2205      	movs	r2, #5
  s_command.DataMode          = QSPI_DATA_1_LINE;
 8004b6a:	910f      	str	r1, [sp, #60]	; 0x3c
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  s_config.Match           = 0;
  s_config.Mask            = N25Q128A_SR_WIP;
 8004b6c:	2101      	movs	r1, #1
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8004b6e:	9206      	str	r2, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8004b70:	2200      	movs	r2, #0
  s_config.Mask            = N25Q128A_SR_WIP;
 8004b72:	9101      	str	r1, [sp, #4]
  s_command.DummyCycles       = 0;
 8004b74:	920b      	str	r2, [sp, #44]	; 0x2c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004b76:	9213      	str	r2, [sp, #76]	; 0x4c
  s_config.Match           = 0;
 8004b78:	9200      	str	r2, [sp, #0]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
  s_config.StatusBytesSize = 1;
  s_config.Interval        = 0x10;
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 8004b7a:	480b      	ldr	r0, [pc, #44]	; (8004ba8 <QSPI_AutoPollingMemReady.constprop.0+0x50>)
  s_config.StatusBytesSize = 1;
 8004b7c:	e9cd 1203 	strd	r1, r2, [sp, #12]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004b80:	e9cd 220d 	strd	r2, r2, [sp, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004b84:	e9cd 2211 	strd	r2, r2, [sp, #68]	; 0x44
  s_config.Interval        = 0x10;
 8004b88:	2210      	movs	r2, #16
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 8004b8a:	a906      	add	r1, sp, #24
  s_config.Interval        = 0x10;
 8004b8c:	9202      	str	r2, [sp, #8]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8004b8e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8004b92:	9205      	str	r2, [sp, #20]
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 8004b94:	466a      	mov	r2, sp
 8004b96:	f001 fda9 	bl	80066ec <HAL_QSPI_AutoPolling>
  {
    return QSPI_ERROR;
  }

  return QSPI_OK;
}
 8004b9a:	3800      	subs	r0, #0
 8004b9c:	bf18      	it	ne
 8004b9e:	2001      	movne	r0, #1
 8004ba0:	b015      	add	sp, #84	; 0x54
 8004ba2:	f85d fb04 	ldr.w	pc, [sp], #4
 8004ba6:	bf00      	nop
 8004ba8:	2000451c 	.word	0x2000451c

08004bac <QSPI_WriteEnable.constprop.0>:
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
 8004bac:	b500      	push	{lr}
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004bae:	f44f 7380 	mov.w	r3, #256	; 0x100
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
 8004bb2:	b095      	sub	sp, #84	; 0x54
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004bb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bb8:	4817      	ldr	r0, [pc, #92]	; (8004c18 <QSPI_WriteEnable.constprop.0+0x6c>)
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004bba:	930c      	str	r3, [sp, #48]	; 0x30
  s_command.Instruction       = WRITE_ENABLE_CMD;
 8004bbc:	2306      	movs	r3, #6
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004bbe:	a906      	add	r1, sp, #24
  s_command.Instruction       = WRITE_ENABLE_CMD;
 8004bc0:	9306      	str	r3, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8004bc2:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004bc4:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  s_command.DataMode          = QSPI_DATA_NONE;
 8004bc8:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.DummyCycles       = 0;
 8004bca:	930b      	str	r3, [sp, #44]	; 0x2c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004bcc:	9313      	str	r3, [sp, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004bce:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004bd2:	f001 fd48 	bl	8006666 <HAL_QSPI_Command>
 8004bd6:	b9e0      	cbnz	r0, 8004c12 <QSPI_WriteEnable.constprop.0+0x66>
  s_config.Match           = N25Q128A_SR_WREN;
 8004bd8:	2302      	movs	r3, #2
  s_config.Interval        = 0x10;
 8004bda:	2201      	movs	r2, #1
  s_command.Instruction    = READ_STATUS_REG_CMD;
 8004bdc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8004be0:	9004      	str	r0, [sp, #16]
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004be2:	480d      	ldr	r0, [pc, #52]	; (8004c18 <QSPI_WriteEnable.constprop.0+0x6c>)
  s_config.Mask            = N25Q128A_SR_WREN;
 8004be4:	e9cd 3300 	strd	r3, r3, [sp]
  s_config.Interval        = 0x10;
 8004be8:	2310      	movs	r3, #16
 8004bea:	e9cd 3202 	strd	r3, r2, [sp, #8]
  s_command.Instruction    = READ_STATUS_REG_CMD;
 8004bee:	2305      	movs	r3, #5
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004bf0:	466a      	mov	r2, sp
  s_command.Instruction    = READ_STATUS_REG_CMD;
 8004bf2:	e9cd 1305 	strd	r1, r3, [sp, #20]
  s_command.DataMode       = QSPI_DATA_1_LINE;
 8004bf6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004bfa:	a906      	add	r1, sp, #24
  s_command.DataMode       = QSPI_DATA_1_LINE;
 8004bfc:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004bfe:	f241 3388 	movw	r3, #5000	; 0x1388
 8004c02:	f001 fd73 	bl	80066ec <HAL_QSPI_AutoPolling>
    return QSPI_ERROR;
 8004c06:	3800      	subs	r0, #0
 8004c08:	bf18      	it	ne
 8004c0a:	2001      	movne	r0, #1
}
 8004c0c:	b015      	add	sp, #84	; 0x54
 8004c0e:	f85d fb04 	ldr.w	pc, [sp], #4
    return QSPI_ERROR;
 8004c12:	2001      	movs	r0, #1
 8004c14:	e7fa      	b.n	8004c0c <QSPI_WriteEnable.constprop.0+0x60>
 8004c16:	bf00      	nop
 8004c18:	2000451c 	.word	0x2000451c

08004c1c <BSP_QSPI_EnableMemoryMappedMode>:
{
 8004c1c:	b500      	push	{lr}
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004c1e:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 8004c22:	b091      	sub	sp, #68	; 0x44
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8004c24:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
  if (HAL_QSPI_MemoryMapped(&QSPIHandle, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8004c28:	480e      	ldr	r0, [pc, #56]	; (8004c64 <BSP_QSPI_EnableMemoryMappedMode+0x48>)
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004c2a:	9308      	str	r3, [sp, #32]
  s_command.Instruction       = QUAD_INOUT_FAST_READ_CMD;
 8004c2c:	23eb      	movs	r3, #235	; 0xeb
  if (HAL_QSPI_MemoryMapped(&QSPIHandle, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8004c2e:	a902      	add	r1, sp, #8
  s_command.Instruction       = QUAD_INOUT_FAST_READ_CMD;
 8004c30:	9302      	str	r3, [sp, #8]
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8004c32:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004c36:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 8004c38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004c3c:	9305      	str	r3, [sp, #20]
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
  s_command.DummyCycles       = N25Q128A_DUMMY_CYCLES_READ_QUAD;
 8004c44:	220a      	movs	r2, #10
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004c46:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.DummyCycles       = N25Q128A_DUMMY_CYCLES_READ_QUAD;
 8004c48:	9207      	str	r2, [sp, #28]
  if (HAL_QSPI_MemoryMapped(&QSPIHandle, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8004c4a:	466a      	mov	r2, sp
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004c4c:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8004c50:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_QSPI_MemoryMapped(&QSPIHandle, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8004c54:	f001 fd9a 	bl	800678c <HAL_QSPI_MemoryMapped>
}
 8004c58:	3800      	subs	r0, #0
 8004c5a:	bf18      	it	ne
 8004c5c:	2001      	movne	r0, #1
 8004c5e:	b011      	add	sp, #68	; 0x44
 8004c60:	f85d fb04 	ldr.w	pc, [sp], #4
 8004c64:	2000451c 	.word	0x2000451c

08004c68 <BSP_QSPI_MspInit>:
  QSPI_CLK_ENABLE();
 8004c68:	4b45      	ldr	r3, [pc, #276]	; (8004d80 <BSP_QSPI_MspInit+0x118>)
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8004c6a:	2101      	movs	r1, #1
  HAL_GPIO_Init(QSPI_CS_GPIO_PORT, &gpio_init_structure);
 8004c6c:	4845      	ldr	r0, [pc, #276]	; (8004d84 <BSP_QSPI_MspInit+0x11c>)
  QSPI_CLK_ENABLE();
 8004c6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c70:	f042 0202 	orr.w	r2, r2, #2
{
 8004c74:	b5f0      	push	{r4, r5, r6, r7, lr}
  QSPI_CLK_ENABLE();
 8004c76:	639a      	str	r2, [r3, #56]	; 0x38
{
 8004c78:	b08d      	sub	sp, #52	; 0x34
  QSPI_CLK_ENABLE();
 8004c7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8004c7c:	2409      	movs	r4, #9
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
 8004c7e:	2704      	movs	r7, #4
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8004c80:	2600      	movs	r6, #0
  QSPI_CLK_ENABLE();
 8004c82:	f002 0202 	and.w	r2, r2, #2
  HAL_GPIO_Init(QSPI_D0_GPIO_PORT, &gpio_init_structure);
 8004c86:	4d40      	ldr	r5, [pc, #256]	; (8004d88 <BSP_QSPI_MspInit+0x120>)
  QSPI_CLK_ENABLE();
 8004c88:	9200      	str	r2, [sp, #0]
 8004c8a:	9a00      	ldr	r2, [sp, #0]
  QSPI_FORCE_RESET();
 8004c8c:	699a      	ldr	r2, [r3, #24]
 8004c8e:	f042 0202 	orr.w	r2, r2, #2
 8004c92:	619a      	str	r2, [r3, #24]
  QSPI_RELEASE_RESET();
 8004c94:	699a      	ldr	r2, [r3, #24]
 8004c96:	f022 0202 	bic.w	r2, r2, #2
 8004c9a:	619a      	str	r2, [r3, #24]
  QSPI_CS_GPIO_CLK_ENABLE();
 8004c9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c9e:	f042 0202 	orr.w	r2, r2, #2
 8004ca2:	631a      	str	r2, [r3, #48]	; 0x30
 8004ca4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ca6:	f002 0202 	and.w	r2, r2, #2
 8004caa:	9201      	str	r2, [sp, #4]
 8004cac:	9a01      	ldr	r2, [sp, #4]
  QSPI_CLK_GPIO_CLK_ENABLE();
 8004cae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cb0:	f042 0202 	orr.w	r2, r2, #2
 8004cb4:	631a      	str	r2, [r3, #48]	; 0x30
 8004cb6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cb8:	f002 0202 	and.w	r2, r2, #2
 8004cbc:	9202      	str	r2, [sp, #8]
 8004cbe:	9a02      	ldr	r2, [sp, #8]
  QSPI_D0_GPIO_CLK_ENABLE();
 8004cc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cc2:	f042 0208 	orr.w	r2, r2, #8
 8004cc6:	631a      	str	r2, [r3, #48]	; 0x30
 8004cc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cca:	f002 0208 	and.w	r2, r2, #8
 8004cce:	9203      	str	r2, [sp, #12]
 8004cd0:	9a03      	ldr	r2, [sp, #12]
  QSPI_D1_GPIO_CLK_ENABLE();
 8004cd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cd4:	f042 0208 	orr.w	r2, r2, #8
 8004cd8:	631a      	str	r2, [r3, #48]	; 0x30
 8004cda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cdc:	f002 0208 	and.w	r2, r2, #8
 8004ce0:	9204      	str	r2, [sp, #16]
 8004ce2:	9a04      	ldr	r2, [sp, #16]
  QSPI_D2_GPIO_CLK_ENABLE();
 8004ce4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ce6:	f042 0210 	orr.w	r2, r2, #16
 8004cea:	631a      	str	r2, [r3, #48]	; 0x30
 8004cec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cee:	f002 0210 	and.w	r2, r2, #16
 8004cf2:	9205      	str	r2, [sp, #20]
 8004cf4:	9a05      	ldr	r2, [sp, #20]
  QSPI_D3_GPIO_CLK_ENABLE();
 8004cf6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cf8:	f042 0208 	orr.w	r2, r2, #8
 8004cfc:	631a      	str	r2, [r3, #48]	; 0x30
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8004cfe:	2240      	movs	r2, #64	; 0x40
  QSPI_D3_GPIO_CLK_ENABLE();
 8004d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d02:	f003 0308 	and.w	r3, r3, #8
 8004d06:	9306      	str	r3, [sp, #24]
 8004d08:	9b06      	ldr	r3, [sp, #24]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8004d0a:	2302      	movs	r3, #2
 8004d0c:	e9cd 2307 	strd	r2, r3, [sp, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8004d10:	2303      	movs	r3, #3
 8004d12:	e9cd 1309 	strd	r1, r3, [sp, #36]	; 0x24
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 8004d16:	230a      	movs	r3, #10
  HAL_GPIO_Init(QSPI_CS_GPIO_PORT, &gpio_init_structure);
 8004d18:	a907      	add	r1, sp, #28
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 8004d1a:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_GPIO_Init(QSPI_CS_GPIO_PORT, &gpio_init_structure);
 8004d1c:	f000 fc42 	bl	80055a4 <HAL_GPIO_Init>
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8004d20:	a907      	add	r1, sp, #28
 8004d22:	4818      	ldr	r0, [pc, #96]	; (8004d84 <BSP_QSPI_MspInit+0x11c>)
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
 8004d24:	9707      	str	r7, [sp, #28]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8004d26:	9609      	str	r6, [sp, #36]	; 0x24
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8004d28:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8004d2a:	f000 fc3b 	bl	80055a4 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = QSPI_D0_PIN;
 8004d2e:	f44f 6300 	mov.w	r3, #2048	; 0x800
  HAL_GPIO_Init(QSPI_D0_GPIO_PORT, &gpio_init_structure);
 8004d32:	a907      	add	r1, sp, #28
 8004d34:	4628      	mov	r0, r5
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8004d36:	940b      	str	r4, [sp, #44]	; 0x2c
  gpio_init_structure.Pin       = QSPI_D0_PIN;
 8004d38:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(QSPI_D0_GPIO_PORT, &gpio_init_structure);
 8004d3a:	f000 fc33 	bl	80055a4 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = QSPI_D1_PIN;
 8004d3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  HAL_GPIO_Init(QSPI_D1_GPIO_PORT, &gpio_init_structure);
 8004d42:	a907      	add	r1, sp, #28
 8004d44:	4628      	mov	r0, r5
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8004d46:	940b      	str	r4, [sp, #44]	; 0x2c
  gpio_init_structure.Pin       = QSPI_D1_PIN;
 8004d48:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(QSPI_D1_GPIO_PORT, &gpio_init_structure);
 8004d4a:	f000 fc2b 	bl	80055a4 <HAL_GPIO_Init>
  HAL_GPIO_Init(QSPI_D2_GPIO_PORT, &gpio_init_structure);
 8004d4e:	a907      	add	r1, sp, #28
 8004d50:	480e      	ldr	r0, [pc, #56]	; (8004d8c <BSP_QSPI_MspInit+0x124>)
  gpio_init_structure.Pin       = QSPI_D2_PIN;
 8004d52:	9707      	str	r7, [sp, #28]
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8004d54:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(QSPI_D2_GPIO_PORT, &gpio_init_structure);
 8004d56:	f000 fc25 	bl	80055a4 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = QSPI_D3_PIN;
 8004d5a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(QSPI_D3_GPIO_PORT, &gpio_init_structure);
 8004d5e:	a907      	add	r1, sp, #28
 8004d60:	4628      	mov	r0, r5
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8004d62:	940b      	str	r4, [sp, #44]	; 0x2c
  gpio_init_structure.Pin       = QSPI_D3_PIN;
 8004d64:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(QSPI_D3_GPIO_PORT, &gpio_init_structure);
 8004d66:	f000 fc1d 	bl	80055a4 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 8004d6a:	4632      	mov	r2, r6
 8004d6c:	210f      	movs	r1, #15
 8004d6e:	205c      	movs	r0, #92	; 0x5c
 8004d70:	f000 f9d8 	bl	8005124 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 8004d74:	205c      	movs	r0, #92	; 0x5c
 8004d76:	f000 fa07 	bl	8005188 <HAL_NVIC_EnableIRQ>
}
 8004d7a:	b00d      	add	sp, #52	; 0x34
 8004d7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d7e:	bf00      	nop
 8004d80:	40023800 	.word	0x40023800
 8004d84:	40020400 	.word	0x40020400
 8004d88:	40020c00 	.word	0x40020c00
 8004d8c:	40021000 	.word	0x40021000

08004d90 <BSP_QSPI_Init>:
{ 
 8004d90:	b5f0      	push	{r4, r5, r6, r7, lr}
  QSPIHandle.Instance = QUADSPI;
 8004d92:	4c49      	ldr	r4, [pc, #292]	; (8004eb8 <BSP_QSPI_Init+0x128>)
{ 
 8004d94:	b091      	sub	sp, #68	; 0x44
  QSPIHandle.Instance = QUADSPI;
 8004d96:	4b49      	ldr	r3, [pc, #292]	; (8004ebc <BSP_QSPI_Init+0x12c>)
  if (HAL_QSPI_DeInit(&QSPIHandle) != HAL_OK)
 8004d98:	4620      	mov	r0, r4
  QSPIHandle.Instance = QUADSPI;
 8004d9a:	6023      	str	r3, [r4, #0]
  if (HAL_QSPI_DeInit(&QSPIHandle) != HAL_OK)
 8004d9c:	f001 fc50 	bl	8006640 <HAL_QSPI_DeInit>
 8004da0:	4605      	mov	r5, r0
 8004da2:	b110      	cbz	r0, 8004daa <BSP_QSPI_Init+0x1a>
    return QSPI_ERROR;
 8004da4:	2001      	movs	r0, #1
}
 8004da6:	b011      	add	sp, #68	; 0x44
 8004da8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  BSP_QSPI_MspInit(&QSPIHandle, NULL);
 8004daa:	4601      	mov	r1, r0
 8004dac:	4620      	mov	r0, r4
 8004dae:	f7ff ff5b 	bl	8004c68 <BSP_QSPI_MspInit>
  QSPIHandle.Init.FifoThreshold      = 4;
 8004db2:	2601      	movs	r6, #1
 8004db4:	2304      	movs	r3, #4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004db6:	f04f 7780 	mov.w	r7, #16777216	; 0x1000000
 8004dba:	e9c4 6301 	strd	r6, r3, [r4, #4]
  QSPIHandle.Init.SampleShifting     = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8004dbe:	2310      	movs	r3, #16
 8004dc0:	60e3      	str	r3, [r4, #12]
 8004dc2:	fa97 f3a7 	rbit	r3, r7
  QSPIHandle.Init.FlashSize          = POSITION_VAL(N25Q128A_FLASH_SIZE) - 1;
 8004dc6:	fab3 f383 	clz	r3, r3
  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 8004dca:	4620      	mov	r0, r4
  QSPIHandle.Init.FlashSize          = POSITION_VAL(N25Q128A_FLASH_SIZE) - 1;
 8004dcc:	3b01      	subs	r3, #1
 8004dce:	6123      	str	r3, [r4, #16]
  QSPIHandle.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE; /* Min 50ns for nonRead */
 8004dd0:	f44f 63a0 	mov.w	r3, #1280	; 0x500
  QSPIHandle.Init.DualFlash          = QSPI_DUALFLASH_DISABLE;
 8004dd4:	e9c4 5507 	strd	r5, r5, [r4, #28]
  QSPIHandle.Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8004dd8:	e9c4 3505 	strd	r3, r5, [r4, #20]
  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 8004ddc:	f001 fbdc 	bl	8006598 <HAL_QSPI_Init>
 8004de0:	2800      	cmp	r0, #0
 8004de2:	d1df      	bne.n	8004da4 <BSP_QSPI_Init+0x14>
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004de4:	f44f 7580 	mov.w	r5, #256	; 0x100
  s_command.Instruction       = RESET_ENABLE_CMD;
 8004de8:	2366      	movs	r3, #102	; 0x66
  s_command.DataMode          = QSPI_DATA_NONE;
 8004dea:	900b      	str	r0, [sp, #44]	; 0x2c
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004dec:	f241 3288 	movw	r2, #5000	; 0x1388
  s_command.DummyCycles       = 0;
 8004df0:	9007      	str	r0, [sp, #28]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004df2:	a902      	add	r1, sp, #8
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004df4:	900f      	str	r0, [sp, #60]	; 0x3c
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004df6:	9508      	str	r5, [sp, #32]
  s_command.Instruction       = RESET_ENABLE_CMD;
 8004df8:	9302      	str	r3, [sp, #8]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004dfa:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004dfe:	e9cd 000d 	strd	r0, r0, [sp, #52]	; 0x34
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004e02:	4620      	mov	r0, r4
 8004e04:	f001 fc2f 	bl	8006666 <HAL_QSPI_Command>
 8004e08:	b108      	cbz	r0, 8004e0e <BSP_QSPI_Init+0x7e>
    return QSPI_NOT_SUPPORTED;
 8004e0a:	2004      	movs	r0, #4
 8004e0c:	e7cb      	b.n	8004da6 <BSP_QSPI_Init+0x16>
  s_command.Instruction = RESET_MEMORY_CMD;
 8004e0e:	2399      	movs	r3, #153	; 0x99
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004e10:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e14:	a902      	add	r1, sp, #8
 8004e16:	4620      	mov	r0, r4
  s_command.Instruction = RESET_MEMORY_CMD;
 8004e18:	9302      	str	r3, [sp, #8]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004e1a:	f001 fc24 	bl	8006666 <HAL_QSPI_Command>
 8004e1e:	2800      	cmp	r0, #0
 8004e20:	d1f3      	bne.n	8004e0a <BSP_QSPI_Init+0x7a>
  if (QSPI_AutoPollingMemReady(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8004e22:	f241 3088 	movw	r0, #5000	; 0x1388
 8004e26:	f7ff fe97 	bl	8004b58 <QSPI_AutoPollingMemReady.constprop.0>
 8004e2a:	2800      	cmp	r0, #0
 8004e2c:	d1ed      	bne.n	8004e0a <BSP_QSPI_Init+0x7a>
  s_command.Instruction       = READ_VOL_CFG_REG_CMD;
 8004e2e:	2385      	movs	r3, #133	; 0x85
  s_command.DummyCycles       = 0;
 8004e30:	9007      	str	r0, [sp, #28]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004e32:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e36:	a902      	add	r1, sp, #8
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004e38:	9508      	str	r5, [sp, #32]
  s_command.Instruction       = READ_VOL_CFG_REG_CMD;
 8004e3a:	9302      	str	r3, [sp, #8]
  s_command.DataMode          = QSPI_DATA_1_LINE;
 8004e3c:	970b      	str	r7, [sp, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004e3e:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8004e42:	e9cd 600c 	strd	r6, r0, [sp, #48]	; 0x30
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004e46:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004e4a:	4620      	mov	r0, r4
 8004e4c:	f001 fc0b 	bl	8006666 <HAL_QSPI_Command>
 8004e50:	2800      	cmp	r0, #0
 8004e52:	d1da      	bne.n	8004e0a <BSP_QSPI_Init+0x7a>
  if (HAL_QSPI_Receive(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004e54:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e58:	f10d 0107 	add.w	r1, sp, #7
 8004e5c:	4620      	mov	r0, r4
 8004e5e:	f001 fd75 	bl	800694c <HAL_QSPI_Receive>
 8004e62:	2800      	cmp	r0, #0
 8004e64:	d1d1      	bne.n	8004e0a <BSP_QSPI_Init+0x7a>
  if (QSPI_WriteEnable(hqspi) != QSPI_OK)
 8004e66:	f7ff fea1 	bl	8004bac <QSPI_WriteEnable.constprop.0>
 8004e6a:	2800      	cmp	r0, #0
 8004e6c:	d1cd      	bne.n	8004e0a <BSP_QSPI_Init+0x7a>
  s_command.Instruction = WRITE_VOL_CFG_REG_CMD;
 8004e6e:	2381      	movs	r3, #129	; 0x81
 8004e70:	22f0      	movs	r2, #240	; 0xf0
 8004e72:	9302      	str	r3, [sp, #8]
 8004e74:	fa92 f2a2 	rbit	r2, r2
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 8004e78:	210a      	movs	r1, #10
 8004e7a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004e7e:	fab2 f282 	clz	r2, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004e82:	4620      	mov	r0, r4
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 8004e84:	f003 030f 	and.w	r3, r3, #15
 8004e88:	fa01 f202 	lsl.w	r2, r1, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004e8c:	a902      	add	r1, sp, #8
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 8004e8e:	4313      	orrs	r3, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004e90:	f241 3288 	movw	r2, #5000	; 0x1388
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 8004e94:	f88d 3007 	strb.w	r3, [sp, #7]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004e98:	f001 fbe5 	bl	8006666 <HAL_QSPI_Command>
 8004e9c:	2800      	cmp	r0, #0
 8004e9e:	d1b4      	bne.n	8004e0a <BSP_QSPI_Init+0x7a>
  if (HAL_QSPI_Transmit(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004ea0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ea4:	f10d 0107 	add.w	r1, sp, #7
 8004ea8:	4620      	mov	r0, r4
 8004eaa:	f001 fcf3 	bl	8006894 <HAL_QSPI_Transmit>
 8004eae:	2800      	cmp	r0, #0
 8004eb0:	f43f af79 	beq.w	8004da6 <BSP_QSPI_Init+0x16>
 8004eb4:	e7a9      	b.n	8004e0a <BSP_QSPI_Init+0x7a>
 8004eb6:	bf00      	nop
 8004eb8:	2000451c 	.word	0x2000451c
 8004ebc:	a0001000 	.word	0xa0001000

08004ec0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004ec0:	490f      	ldr	r1, [pc, #60]	; (8004f00 <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004ec2:	2000      	movs	r0, #0
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004ec4:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004ec8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004ecc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 8004ed0:	4b0c      	ldr	r3, [pc, #48]	; (8004f04 <SystemInit+0x44>)
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	f042 0201 	orr.w	r2, r2, #1
 8004ed8:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8004eda:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8004ee2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004ee6:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8004ee8:	4a07      	ldr	r2, [pc, #28]	; (8004f08 <SystemInit+0x48>)
 8004eea:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004eec:	681a      	ldr	r2, [r3, #0]
 8004eee:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004ef2:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004ef4:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004ef6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004efa:	608b      	str	r3, [r1, #8]
#endif
}
 8004efc:	4770      	bx	lr
 8004efe:	bf00      	nop
 8004f00:	e000ed00 	.word	0xe000ed00
 8004f04:	40023800 	.word	0x40023800
 8004f08:	24003010 	.word	0x24003010

08004f0c <ft5336_Reset>:
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 8004f0c:	4770      	bx	lr

08004f0e <ft5336_TS_ITStatus>:
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
}
 8004f0e:	2000      	movs	r0, #0
 8004f10:	4770      	bx	lr
	...

08004f14 <ft5336_ReadID>:
  volatile uint8_t ucReadId = 0;
 8004f14:	2300      	movs	r3, #0
{
 8004f16:	b537      	push	{r0, r1, r2, r4, r5, lr}
  volatile uint8_t ucReadId = 0;
 8004f18:	f88d 3007 	strb.w	r3, [sp, #7]
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
  return(ft5336_handle.i2cInitialized);
 8004f1c:	4b0d      	ldr	r3, [pc, #52]	; (8004f54 <ft5336_ReadID+0x40>)
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8004f1e:	781a      	ldrb	r2, [r3, #0]
 8004f20:	b90a      	cbnz	r2, 8004f26 <ft5336_ReadID+0x12>
  {
    /* Initialize TS IO BUS layer (I2C) */
    //TS_IO_Init();

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8004f22:	2201      	movs	r2, #1
 8004f24:	701a      	strb	r2, [r3, #0]
{
 8004f26:	2403      	movs	r4, #3
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8004f28:	b2c5      	uxtb	r5, r0
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8004f2a:	3c01      	subs	r4, #1
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8004f2c:	21a8      	movs	r1, #168	; 0xa8
 8004f2e:	4628      	mov	r0, r5
 8004f30:	f7fc fdde 	bl	8001af0 <TS_IO_Read>
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8004f34:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8004f38:	f88d 0007 	strb.w	r0, [sp, #7]
    if(ucReadId == FT5336_ID_VALUE)
 8004f3c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004f40:	b2db      	uxtb	r3, r3
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8004f42:	d103      	bne.n	8004f4c <ft5336_ReadID+0x38>
  return (ucReadId);
 8004f44:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8004f48:	b003      	add	sp, #12
 8004f4a:	bd30      	pop	{r4, r5, pc}
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8004f4c:	2b51      	cmp	r3, #81	; 0x51
 8004f4e:	d1ec      	bne.n	8004f2a <ft5336_ReadID+0x16>
 8004f50:	e7f8      	b.n	8004f44 <ft5336_ReadID+0x30>
 8004f52:	bf00      	nop
 8004f54:	2000456a 	.word	0x2000456a

08004f58 <ft5336_TS_DetectTouch>:
{
 8004f58:	b513      	push	{r0, r1, r4, lr}
  volatile uint8_t nbTouch = 0;
 8004f5a:	2400      	movs	r4, #0
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 8004f5c:	2102      	movs	r1, #2
 8004f5e:	b2c0      	uxtb	r0, r0
  volatile uint8_t nbTouch = 0;
 8004f60:	f88d 4007 	strb.w	r4, [sp, #7]
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 8004f64:	f7fc fdc4 	bl	8001af0 <TS_IO_Read>
 8004f68:	f88d 0007 	strb.w	r0, [sp, #7]
  nbTouch &= FT5336_TD_STAT_MASK;
 8004f6c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004f70:	f003 030f 	and.w	r3, r3, #15
 8004f74:	f88d 3007 	strb.w	r3, [sp, #7]
  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 8004f78:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004f7c:	2b05      	cmp	r3, #5
 8004f7e:	d901      	bls.n	8004f84 <ft5336_TS_DetectTouch+0x2c>
    nbTouch = 0;
 8004f80:	f88d 4007 	strb.w	r4, [sp, #7]
  ft5336_handle.currActiveTouchNb = nbTouch;
 8004f84:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8004f88:	4b03      	ldr	r3, [pc, #12]	; (8004f98 <ft5336_TS_DetectTouch+0x40>)
  return(nbTouch);
 8004f8a:	f89d 0007 	ldrb.w	r0, [sp, #7]
  ft5336_handle.currActiveTouchNb = nbTouch;
 8004f8e:	705a      	strb	r2, [r3, #1]
  ft5336_handle.currActiveTouchIdx = 0;
 8004f90:	2200      	movs	r2, #0
 8004f92:	709a      	strb	r2, [r3, #2]
}
 8004f94:	b002      	add	sp, #8
 8004f96:	bd10      	pop	{r4, pc}
 8004f98:	2000456a 	.word	0x2000456a

08004f9c <ft5336_TS_GetXY>:
{
 8004f9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8004fa0:	4d2f      	ldr	r5, [pc, #188]	; (8005060 <ft5336_TS_GetXY+0xc4>)
{
 8004fa2:	4616      	mov	r6, r2
  volatile uint8_t ucReadData = 0;
 8004fa4:	2300      	movs	r3, #0
{
 8004fa6:	460f      	mov	r7, r1
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8004fa8:	78ac      	ldrb	r4, [r5, #2]
 8004faa:	786a      	ldrb	r2, [r5, #1]
  volatile uint8_t ucReadData = 0;
 8004fac:	f88d 3007 	strb.w	r3, [sp, #7]
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8004fb0:	42a2      	cmp	r2, r4
 8004fb2:	d94d      	bls.n	8005050 <ft5336_TS_GetXY+0xb4>
    switch(ft5336_handle.currActiveTouchIdx)
 8004fb4:	2c09      	cmp	r4, #9
 8004fb6:	d84e      	bhi.n	8005056 <ft5336_TS_GetXY+0xba>
 8004fb8:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8004fbc:	005b      	lsls	r3, r3, #1
 8004fbe:	b2db      	uxtb	r3, r3
 8004fc0:	1d19      	adds	r1, r3, #4
 8004fc2:	f103 0b03 	add.w	fp, r3, #3
 8004fc6:	f103 0a06 	add.w	sl, r3, #6
 8004fca:	3305      	adds	r3, #5
 8004fcc:	b2c9      	uxtb	r1, r1
 8004fce:	fa5f fb8b 	uxtb.w	fp, fp
 8004fd2:	fa5f fa8a 	uxtb.w	sl, sl
 8004fd6:	fa5f f883 	uxtb.w	r8, r3
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8004fda:	b2c4      	uxtb	r4, r0
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8004fdc:	f8df 9084 	ldr.w	r9, [pc, #132]	; 8005064 <ft5336_TS_GetXY+0xc8>
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8004fe0:	4620      	mov	r0, r4
 8004fe2:	f7fc fd85 	bl	8001af0 <TS_IO_Read>
 8004fe6:	f88d 0007 	strb.w	r0, [sp, #7]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8004fea:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8004fee:	4659      	mov	r1, fp
 8004ff0:	4620      	mov	r0, r4
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8004ff2:	f8a9 3000 	strh.w	r3, [r9]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8004ff6:	f7fc fd7b 	bl	8001af0 <TS_IO_Read>
 8004ffa:	f88d 0007 	strb.w	r0, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8004ffe:	4651      	mov	r1, sl
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8005000:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8005004:	4620      	mov	r0, r4
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8005006:	f8b9 2000 	ldrh.w	r2, [r9]
 800500a:	021b      	lsls	r3, r3, #8
 800500c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005010:	4313      	orrs	r3, r2
    *X = coord;
 8005012:	803b      	strh	r3, [r7, #0]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8005014:	f8a9 3000 	strh.w	r3, [r9]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8005018:	f7fc fd6a 	bl	8001af0 <TS_IO_Read>
 800501c:	f88d 0007 	strb.w	r0, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8005020:	4641      	mov	r1, r8
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8005022:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8005026:	4620      	mov	r0, r4
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8005028:	f8a9 3000 	strh.w	r3, [r9]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 800502c:	f7fc fd60 	bl	8001af0 <TS_IO_Read>
 8005030:	f88d 0007 	strb.w	r0, [sp, #7]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8005034:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005038:	f8b9 2000 	ldrh.w	r2, [r9]
 800503c:	021b      	lsls	r3, r3, #8
 800503e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005042:	4313      	orrs	r3, r2
 8005044:	f8a9 3000 	strh.w	r3, [r9]
    *Y = coord;
 8005048:	8033      	strh	r3, [r6, #0]
    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 800504a:	78ab      	ldrb	r3, [r5, #2]
 800504c:	3301      	adds	r3, #1
 800504e:	70ab      	strb	r3, [r5, #2]
}
 8005050:	b003      	add	sp, #12
 8005052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8005056:	4698      	mov	r8, r3
 8005058:	469a      	mov	sl, r3
 800505a:	469b      	mov	fp, r3
 800505c:	4619      	mov	r1, r3
 800505e:	e7bc      	b.n	8004fda <ft5336_TS_GetXY+0x3e>
 8005060:	2000456a 	.word	0x2000456a
 8005064:	20004568 	.word	0x20004568

08005068 <ft5336_TS_EnableIT>:
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8005068:	2201      	movs	r2, #1
 800506a:	21a4      	movs	r1, #164	; 0xa4
 800506c:	b2c0      	uxtb	r0, r0
 800506e:	f7fc bd25 	b.w	8001abc <TS_IO_Write>

08005072 <ft5336_TS_DisableIT>:
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8005072:	2200      	movs	r2, #0
 8005074:	21a4      	movs	r1, #164	; 0xa4
 8005076:	b2c0      	uxtb	r0, r0
 8005078:	f7fc bd20 	b.w	8001abc <TS_IO_Write>

0800507c <ft5336_TS_Start>:
  ft5336_TS_DisableIT(DeviceAddr);
 800507c:	f7ff bff9 	b.w	8005072 <ft5336_TS_DisableIT>

08005080 <ft5336_TS_ClearIT>:
 8005080:	4770      	bx	lr
	...

08005084 <ft5336_Init>:
  return(ft5336_handle.i2cInitialized);
 8005084:	4b02      	ldr	r3, [pc, #8]	; (8005090 <ft5336_Init+0xc>)
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8005086:	781a      	ldrb	r2, [r3, #0]
 8005088:	b90a      	cbnz	r2, 800508e <ft5336_Init+0xa>
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 800508a:	2201      	movs	r2, #1
 800508c:	701a      	strb	r2, [r3, #0]
}
 800508e:	4770      	bx	lr
 8005090:	2000456a 	.word	0x2000456a

08005094 <HAL_Init>:
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005094:	4a07      	ldr	r2, [pc, #28]	; (80050b4 <HAL_Init+0x20>)
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005096:	2003      	movs	r0, #3
{
 8005098:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800509a:	6813      	ldr	r3, [r2, #0]
 800509c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050a0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80050a2:	f000 f82d 	bl	8005100 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80050a6:	2000      	movs	r0, #0
 80050a8:	f7fc fbc2 	bl	8001830 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80050ac:	f7fc f964 	bl	8001378 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80050b0:	2000      	movs	r0, #0
 80050b2:	bd08      	pop	{r3, pc}
 80050b4:	40023c00 	.word	0x40023c00

080050b8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80050b8:	4a03      	ldr	r2, [pc, #12]	; (80050c8 <HAL_IncTick+0x10>)
 80050ba:	4b04      	ldr	r3, [pc, #16]	; (80050cc <HAL_IncTick+0x14>)
 80050bc:	6811      	ldr	r1, [r2, #0]
 80050be:	781b      	ldrb	r3, [r3, #0]
 80050c0:	440b      	add	r3, r1
 80050c2:	6013      	str	r3, [r2, #0]
}
 80050c4:	4770      	bx	lr
 80050c6:	bf00      	nop
 80050c8:	20004570 	.word	0x20004570
 80050cc:	20000038 	.word	0x20000038

080050d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80050d0:	4b01      	ldr	r3, [pc, #4]	; (80050d8 <HAL_GetTick+0x8>)
 80050d2:	6818      	ldr	r0, [r3, #0]
}
 80050d4:	4770      	bx	lr
 80050d6:	bf00      	nop
 80050d8:	20004570 	.word	0x20004570

080050dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80050dc:	b538      	push	{r3, r4, r5, lr}
 80050de:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80050e0:	f7ff fff6 	bl	80050d0 <HAL_GetTick>
 80050e4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80050e6:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80050e8:	bf1e      	ittt	ne
 80050ea:	4b04      	ldrne	r3, [pc, #16]	; (80050fc <HAL_Delay+0x20>)
 80050ec:	781b      	ldrbne	r3, [r3, #0]
 80050ee:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80050f0:	f7ff ffee 	bl	80050d0 <HAL_GetTick>
 80050f4:	1b43      	subs	r3, r0, r5
 80050f6:	42a3      	cmp	r3, r4
 80050f8:	d3fa      	bcc.n	80050f0 <HAL_Delay+0x14>
  {
  }
}
 80050fa:	bd38      	pop	{r3, r4, r5, pc}
 80050fc:	20000038 	.word	0x20000038

08005100 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005100:	4907      	ldr	r1, [pc, #28]	; (8005120 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005102:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005104:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005106:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800510a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800510e:	0412      	lsls	r2, r2, #16
 8005110:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005112:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005114:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005118:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800511c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800511e:	4770      	bx	lr
 8005120:	e000ed00 	.word	0xe000ed00

08005124 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005124:	4b16      	ldr	r3, [pc, #88]	; (8005180 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005126:	b530      	push	{r4, r5, lr}
 8005128:	68dc      	ldr	r4, [r3, #12]
 800512a:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800512e:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005132:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005134:	2d04      	cmp	r5, #4
 8005136:	bf28      	it	cs
 8005138:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800513a:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800513c:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005140:	bf8c      	ite	hi
 8005142:	3c03      	subhi	r4, #3
 8005144:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005146:	fa03 f505 	lsl.w	r5, r3, r5
  if ((int32_t)(IRQn) >= 0)
 800514a:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800514c:	fa03 f304 	lsl.w	r3, r3, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005150:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005154:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005158:	fa01 f104 	lsl.w	r1, r1, r4
 800515c:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005160:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8005164:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8005166:	db06      	blt.n	8005176 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005168:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800516c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8005170:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8005174:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005176:	f000 000f 	and.w	r0, r0, #15
 800517a:	4a02      	ldr	r2, [pc, #8]	; (8005184 <HAL_NVIC_SetPriority+0x60>)
 800517c:	5413      	strb	r3, [r2, r0]
 800517e:	e7f9      	b.n	8005174 <HAL_NVIC_SetPriority+0x50>
 8005180:	e000ed00 	.word	0xe000ed00
 8005184:	e000ed14 	.word	0xe000ed14

08005188 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8005188:	2800      	cmp	r0, #0
 800518a:	db08      	blt.n	800519e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800518c:	0942      	lsrs	r2, r0, #5
 800518e:	2301      	movs	r3, #1
 8005190:	f000 001f 	and.w	r0, r0, #31
 8005194:	fa03 f000 	lsl.w	r0, r3, r0
 8005198:	4b01      	ldr	r3, [pc, #4]	; (80051a0 <HAL_NVIC_EnableIRQ+0x18>)
 800519a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800519e:	4770      	bx	lr
 80051a0:	e000e100 	.word	0xe000e100

080051a4 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80051a4:	2800      	cmp	r0, #0
 80051a6:	db0d      	blt.n	80051c4 <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80051a8:	0943      	lsrs	r3, r0, #5
 80051aa:	2201      	movs	r2, #1
 80051ac:	f000 001f 	and.w	r0, r0, #31
 80051b0:	3320      	adds	r3, #32
 80051b2:	fa02 f000 	lsl.w	r0, r2, r0
 80051b6:	4a04      	ldr	r2, [pc, #16]	; (80051c8 <HAL_NVIC_DisableIRQ+0x24>)
 80051b8:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80051bc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80051c0:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 80051c4:	4770      	bx	lr
 80051c6:	bf00      	nop
 80051c8:	e000e100 	.word	0xe000e100

080051cc <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 80051cc:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80051d0:	4b04      	ldr	r3, [pc, #16]	; (80051e4 <HAL_MPU_Disable+0x18>)
 80051d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80051d4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80051d8:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80051da:	2200      	movs	r2, #0
 80051dc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 80051e0:	4770      	bx	lr
 80051e2:	bf00      	nop
 80051e4:	e000ed00 	.word	0xe000ed00

080051e8 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80051e8:	4b06      	ldr	r3, [pc, #24]	; (8005204 <HAL_MPU_Enable+0x1c>)
 80051ea:	f040 0001 	orr.w	r0, r0, #1
 80051ee:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80051f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80051f4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80051f8:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80051fa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80051fe:	f3bf 8f6f 	isb	sy
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8005202:	4770      	bx	lr
 8005204:	e000ed00 	.word	0xe000ed00

08005208 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8005208:	7843      	ldrb	r3, [r0, #1]
 800520a:	4a14      	ldr	r2, [pc, #80]	; (800525c <HAL_MPU_ConfigRegion+0x54>)
{
 800520c:	b510      	push	{r4, lr}
  MPU->RNR = MPU_Init->Number;
 800520e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  if ((MPU_Init->Enable) != RESET)
 8005212:	7801      	ldrb	r1, [r0, #0]
 8005214:	b1e9      	cbz	r1, 8005252 <HAL_MPU_ConfigRegion+0x4a>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8005216:	6843      	ldr	r3, [r0, #4]
 8005218:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800521c:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800521e:	7b04      	ldrb	r4, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8005220:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005222:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005226:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8005228:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800522a:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800522e:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005230:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8005234:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005236:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800523a:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800523c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8005240:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8005242:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005246:	7a01      	ldrb	r1, [r0, #8]
 8005248:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800524c:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8005250:	bd10      	pop	{r4, pc}
    MPU->RBAR = 0x00;
 8005252:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
    MPU->RASR = 0x00;
 8005256:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
}
 800525a:	e7f9      	b.n	8005250 <HAL_MPU_ConfigRegion+0x48>
 800525c:	e000ed00 	.word	0xe000ed00

08005260 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8005260:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8005262:	4604      	mov	r4, r0
 8005264:	b908      	cbnz	r0, 800526a <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 8005266:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8005268:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 800526a:	7f43      	ldrb	r3, [r0, #29]
 800526c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005270:	b913      	cbnz	r3, 8005278 <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 8005272:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8005274:	f7fc f89e 	bl	80013b4 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 8005278:	2302      	movs	r3, #2
 800527a:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800527c:	7923      	ldrb	r3, [r4, #4]
 800527e:	b9e3      	cbnz	r3, 80052ba <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8005280:	6823      	ldr	r3, [r4, #0]
 8005282:	4a13      	ldr	r2, [pc, #76]	; (80052d0 <HAL_CRC_Init+0x70>)
 8005284:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8005286:	689a      	ldr	r2, [r3, #8]
 8005288:	f022 0218 	bic.w	r2, r2, #24
 800528c:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800528e:	7962      	ldrb	r2, [r4, #5]
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8005290:	6823      	ldr	r3, [r4, #0]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8005292:	b9d2      	cbnz	r2, 80052ca <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8005294:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8005298:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 800529a:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800529c:	689a      	ldr	r2, [r3, #8]
 800529e:	6961      	ldr	r1, [r4, #20]
 80052a0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80052a4:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80052a6:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80052a8:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80052aa:	689a      	ldr	r2, [r3, #8]
 80052ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80052b0:	430a      	orrs	r2, r1
 80052b2:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 80052b4:	2301      	movs	r3, #1
 80052b6:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 80052b8:	e7d6      	b.n	8005268 <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80052ba:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 80052be:	4620      	mov	r0, r4
 80052c0:	f000 f808 	bl	80052d4 <HAL_CRCEx_Polynomial_Set>
 80052c4:	2800      	cmp	r0, #0
 80052c6:	d0e2      	beq.n	800528e <HAL_CRC_Init+0x2e>
 80052c8:	e7cd      	b.n	8005266 <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80052ca:	6922      	ldr	r2, [r4, #16]
 80052cc:	e7e4      	b.n	8005298 <HAL_CRC_Init+0x38>
 80052ce:	bf00      	nop
 80052d0:	04c11db7 	.word	0x04c11db7

080052d4 <HAL_CRCEx_Polynomial_Set>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80052d4:	231f      	movs	r3, #31
{
 80052d6:	b510      	push	{r4, lr}
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80052d8:	3b01      	subs	r3, #1
 80052da:	d31c      	bcc.n	8005316 <HAL_CRCEx_Polynomial_Set+0x42>
 80052dc:	fa21 f403 	lsr.w	r4, r1, r3
 80052e0:	07e4      	lsls	r4, r4, #31
 80052e2:	d5f9      	bpl.n	80052d8 <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 80052e4:	2a10      	cmp	r2, #16
 80052e6:	d012      	beq.n	800530e <HAL_CRCEx_Polynomial_Set+0x3a>
 80052e8:	d804      	bhi.n	80052f4 <HAL_CRCEx_Polynomial_Set+0x20>
 80052ea:	b13a      	cbz	r2, 80052fc <HAL_CRCEx_Polynomial_Set+0x28>
 80052ec:	2a08      	cmp	r2, #8
 80052ee:	d010      	beq.n	8005312 <HAL_CRCEx_Polynomial_Set+0x3e>
      }
      break;
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
      {
        status =   HAL_ERROR;
 80052f0:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 80052f2:	e00b      	b.n	800530c <HAL_CRCEx_Polynomial_Set+0x38>
  switch (PolyLength)
 80052f4:	2a18      	cmp	r2, #24
 80052f6:	d1fb      	bne.n	80052f0 <HAL_CRCEx_Polynomial_Set+0x1c>
      if (msb >= HAL_CRC_LENGTH_7B)
 80052f8:	2b06      	cmp	r3, #6
      if (msb >= HAL_CRC_LENGTH_16B)
 80052fa:	d8f9      	bhi.n	80052f0 <HAL_CRCEx_Polynomial_Set+0x1c>
    WRITE_REG(hcrc->Instance->POL, Pol);
 80052fc:	6800      	ldr	r0, [r0, #0]
 80052fe:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8005300:	6883      	ldr	r3, [r0, #8]
 8005302:	f023 0318 	bic.w	r3, r3, #24
 8005306:	431a      	orrs	r2, r3
 8005308:	6082      	str	r2, [r0, #8]
 800530a:	2000      	movs	r0, #0
}
 800530c:	bd10      	pop	{r4, pc}
      if (msb >= HAL_CRC_LENGTH_8B)
 800530e:	2b07      	cmp	r3, #7
 8005310:	e7f3      	b.n	80052fa <HAL_CRCEx_Polynomial_Set+0x26>
      if (msb >= HAL_CRC_LENGTH_16B)
 8005312:	2b0f      	cmp	r3, #15
 8005314:	e7f1      	b.n	80052fa <HAL_CRCEx_Polynomial_Set+0x26>
  switch (PolyLength)
 8005316:	2a00      	cmp	r2, #0
 8005318:	d1ea      	bne.n	80052f0 <HAL_CRCEx_Polynomial_Set+0x1c>
 800531a:	e7ef      	b.n	80052fc <HAL_CRCEx_Polynomial_Set+0x28>

0800531c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800531c:	b570      	push	{r4, r5, r6, lr}
 800531e:	4604      	mov	r4, r0
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005320:	6d86      	ldr	r6, [r0, #88]	; 0x58
  
  uint32_t tickstart = HAL_GetTick();
 8005322:	f7ff fed5 	bl	80050d0 <HAL_GetTick>
 8005326:	4605      	mov	r5, r0
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005328:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800532c:	2b02      	cmp	r3, #2
 800532e:	d006      	beq.n	800533e <HAL_DMA_Abort+0x22>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005330:	2380      	movs	r3, #128	; 0x80
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
    
    return HAL_ERROR;
 8005332:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005334:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8005336:	2300      	movs	r3, #0
 8005338:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
    
  }
  return HAL_OK;
}
 800533c:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800533e:	6823      	ldr	r3, [r4, #0]
 8005340:	681a      	ldr	r2, [r3, #0]
 8005342:	f022 0216 	bic.w	r2, r2, #22
 8005346:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005348:	695a      	ldr	r2, [r3, #20]
 800534a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800534e:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005350:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005352:	b90a      	cbnz	r2, 8005358 <HAL_DMA_Abort+0x3c>
 8005354:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8005356:	b11a      	cbz	r2, 8005360 <HAL_DMA_Abort+0x44>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005358:	681a      	ldr	r2, [r3, #0]
 800535a:	f022 0208 	bic.w	r2, r2, #8
 800535e:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	f022 0201 	bic.w	r2, r2, #1
 8005366:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005368:	6823      	ldr	r3, [r4, #0]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f013 0301 	ands.w	r3, r3, #1
 8005370:	d10a      	bne.n	8005388 <HAL_DMA_Abort+0x6c>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005372:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005374:	223f      	movs	r2, #63	; 0x3f
  return HAL_OK;
 8005376:	4618      	mov	r0, r3
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005378:	408a      	lsls	r2, r1
 800537a:	60b2      	str	r2, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 800537c:	2201      	movs	r2, #1
    __HAL_UNLOCK(hdma);
 800537e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 8005382:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  return HAL_OK;
 8005386:	e7d9      	b.n	800533c <HAL_DMA_Abort+0x20>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005388:	f7ff fea2 	bl	80050d0 <HAL_GetTick>
 800538c:	1b40      	subs	r0, r0, r5
 800538e:	2805      	cmp	r0, #5
 8005390:	d9ea      	bls.n	8005368 <HAL_DMA_Abort+0x4c>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005392:	2320      	movs	r3, #32
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005394:	2003      	movs	r0, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005396:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 8005398:	2300      	movs	r3, #0
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800539a:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 800539e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_TIMEOUT;
 80053a2:	e7cb      	b.n	800533c <HAL_DMA_Abort+0x20>

080053a4 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80053a4:	b510      	push	{r4, lr}
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80053a6:	4604      	mov	r4, r0
 80053a8:	b330      	cbz	r0, 80053f8 <HAL_DMA2D_Init+0x54>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80053aa:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80053ae:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80053b2:	b91b      	cbnz	r3, 80053bc <HAL_DMA2D_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80053b4:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80053b8:	f7fc f812 	bl	80013e0 <HAL_DMA2D_MspInit>

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80053bc:	6822      	ldr	r2, [r4, #0]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80053be:	2302      	movs	r3, #2
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80053c0:	6861      	ldr	r1, [r4, #4]
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80053c2:	2000      	movs	r0, #0
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80053c4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80053c8:	6813      	ldr	r3, [r2, #0]
 80053ca:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80053ce:	430b      	orrs	r3, r1
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80053d0:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80053d2:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80053d4:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80053d6:	f023 0307 	bic.w	r3, r3, #7
 80053da:	430b      	orrs	r3, r1
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80053dc:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80053de:	6353      	str	r3, [r2, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80053e0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80053e2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80053e6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80053ea:	430b      	orrs	r3, r1
 80053ec:	6413      	str	r3, [r2, #64]	; 0x40

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80053ee:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80053f0:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80053f2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  return HAL_OK;
}
 80053f6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80053f8:	2001      	movs	r0, #1
 80053fa:	e7fc      	b.n	80053f6 <HAL_DMA2D_Init+0x52>

080053fc <HAL_DMA2D_LineEventCallback>:
 80053fc:	4770      	bx	lr

080053fe <HAL_DMA2D_CLUTLoadingCpltCallback>:
 80053fe:	4770      	bx	lr

08005400 <HAL_DMA2D_IRQHandler>:
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8005400:	6803      	ldr	r3, [r0, #0]
{
 8005402:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8005404:	685e      	ldr	r6, [r3, #4]
{
 8005406:	4604      	mov	r4, r0
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8005408:	681d      	ldr	r5, [r3, #0]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800540a:	07f2      	lsls	r2, r6, #31
 800540c:	d514      	bpl.n	8005438 <HAL_DMA2D_IRQHandler+0x38>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800540e:	05e9      	lsls	r1, r5, #23
 8005410:	d512      	bpl.n	8005438 <HAL_DMA2D_IRQHandler+0x38>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005418:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800541a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800541c:	f042 0201 	orr.w	r2, r2, #1
 8005420:	63c2      	str	r2, [r0, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8005422:	2201      	movs	r2, #1
 8005424:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005426:	2304      	movs	r3, #4
 8005428:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800542c:	2300      	movs	r3, #0
 800542e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005432:	6943      	ldr	r3, [r0, #20]
 8005434:	b103      	cbz	r3, 8005438 <HAL_DMA2D_IRQHandler+0x38>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005436:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005438:	06b2      	lsls	r2, r6, #26
 800543a:	d516      	bpl.n	800546a <HAL_DMA2D_IRQHandler+0x6a>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800543c:	04ab      	lsls	r3, r5, #18
 800543e:	d514      	bpl.n	800546a <HAL_DMA2D_IRQHandler+0x6a>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8005440:	6823      	ldr	r3, [r4, #0]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005448:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800544a:	2220      	movs	r2, #32
 800544c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800544e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005450:	f043 0302 	orr.w	r3, r3, #2
 8005454:	63e3      	str	r3, [r4, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005456:	2304      	movs	r3, #4
 8005458:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800545c:	2300      	movs	r3, #0
 800545e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005462:	6963      	ldr	r3, [r4, #20]
 8005464:	b10b      	cbz	r3, 800546a <HAL_DMA2D_IRQHandler+0x6a>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005466:	4620      	mov	r0, r4
 8005468:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800546a:	0730      	lsls	r0, r6, #28
 800546c:	d516      	bpl.n	800549c <HAL_DMA2D_IRQHandler+0x9c>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800546e:	0529      	lsls	r1, r5, #20
 8005470:	d514      	bpl.n	800549c <HAL_DMA2D_IRQHandler+0x9c>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8005472:	6823      	ldr	r3, [r4, #0]
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800547a:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800547c:	2208      	movs	r2, #8
 800547e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005480:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005482:	f043 0304 	orr.w	r3, r3, #4
 8005486:	63e3      	str	r3, [r4, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005488:	2304      	movs	r3, #4
 800548a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800548e:	2300      	movs	r3, #0
 8005490:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005494:	6963      	ldr	r3, [r4, #20]
 8005496:	b10b      	cbz	r3, 800549c <HAL_DMA2D_IRQHandler+0x9c>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005498:	4620      	mov	r0, r4
 800549a:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800549c:	0772      	lsls	r2, r6, #29
 800549e:	d50b      	bpl.n	80054b8 <HAL_DMA2D_IRQHandler+0xb8>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80054a0:	056b      	lsls	r3, r5, #21
 80054a2:	d509      	bpl.n	80054b8 <HAL_DMA2D_IRQHandler+0xb8>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80054a4:	6823      	ldr	r3, [r4, #0]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80054a6:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054ae:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80054b0:	2204      	movs	r2, #4
 80054b2:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 80054b4:	f7ff ffa2 	bl	80053fc <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80054b8:	07b0      	lsls	r0, r6, #30
 80054ba:	d514      	bpl.n	80054e6 <HAL_DMA2D_IRQHandler+0xe6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80054bc:	05a9      	lsls	r1, r5, #22
 80054be:	d512      	bpl.n	80054e6 <HAL_DMA2D_IRQHandler+0xe6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80054c0:	6823      	ldr	r3, [r4, #0]
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80054c8:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80054ca:	2202      	movs	r2, #2
 80054cc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80054ce:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80054d0:	63e3      	str	r3, [r4, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80054d2:	2301      	movs	r3, #1
 80054d4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80054d8:	2300      	movs	r3, #0
 80054da:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 80054de:	6923      	ldr	r3, [r4, #16]
 80054e0:	b10b      	cbz	r3, 80054e6 <HAL_DMA2D_IRQHandler+0xe6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80054e2:	4620      	mov	r0, r4
 80054e4:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80054e6:	06f2      	lsls	r2, r6, #27
 80054e8:	d513      	bpl.n	8005512 <HAL_DMA2D_IRQHandler+0x112>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80054ea:	04eb      	lsls	r3, r5, #19
 80054ec:	d511      	bpl.n	8005512 <HAL_DMA2D_IRQHandler+0x112>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80054ee:	6823      	ldr	r3, [r4, #0]

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80054f0:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80054f2:	681a      	ldr	r2, [r3, #0]
 80054f4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80054f8:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80054fa:	2210      	movs	r2, #16
 80054fc:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80054fe:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005500:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8005502:	2301      	movs	r3, #1
 8005504:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8005508:	2300      	movs	r3, #0
 800550a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800550e:	f7ff ff76 	bl	80053fe <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8005512:	bd70      	pop	{r4, r5, r6, pc}

08005514 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005514:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005516:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800551a:	2b01      	cmp	r3, #1
 800551c:	f04f 0302 	mov.w	r3, #2
 8005520:	d02b      	beq.n	800557a <HAL_DMA2D_ConfigLayer+0x66>

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005522:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_LOCK(hdma2d);
 8005526:	2201      	movs	r2, #1
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8005528:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 800552c:	4f1c      	ldr	r7, [pc, #112]	; (80055a0 <HAL_DMA2D_ConfigLayer+0x8c>)
  __HAL_LOCK(hdma2d);
 800552e:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8005532:	010e      	lsls	r6, r1, #4
 8005534:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8005536:	e9d3 4207 	ldrd	r4, r2, [r3, #28]
 800553a:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800553e:	3c09      	subs	r4, #9
 8005540:	2c01      	cmp	r4, #1
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8005542:	bf96      	itet	ls
 8005544:	f005 437f 	andls.w	r3, r5, #4278190080	; 0xff000000
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8005548:	ea42 6205 	orrhi.w	r2, r2, r5, lsl #24
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800554c:	431a      	orrls	r2, r3

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800554e:	6803      	ldr	r3, [r0, #0]
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8005550:	b9a9      	cbnz	r1, 800557e <HAL_DMA2D_ConfigLayer+0x6a>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005552:	6a59      	ldr	r1, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005554:	2c01      	cmp	r4, #1
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005556:	ea01 0107 	and.w	r1, r1, r7
 800555a:	ea42 0201 	orr.w	r2, r2, r1
 800555e:	625a      	str	r2, [r3, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005560:	6982      	ldr	r2, [r0, #24]
 8005562:	619a      	str	r2, [r3, #24]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005564:	d803      	bhi.n	800556e <HAL_DMA2D_ConfigLayer+0x5a>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8005566:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8005568:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800556c:	629a      	str	r2, [r3, #40]	; 0x28
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800556e:	2301      	movs	r3, #1
 8005570:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005574:	2300      	movs	r3, #0
 8005576:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(hdma2d);
 800557a:	4618      	mov	r0, r3

  return HAL_OK;
}
 800557c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800557e:	69d9      	ldr	r1, [r3, #28]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005580:	2c01      	cmp	r4, #1
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005582:	ea01 0107 	and.w	r1, r1, r7
 8005586:	ea42 0201 	orr.w	r2, r2, r1
 800558a:	61da      	str	r2, [r3, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800558c:	eb00 0206 	add.w	r2, r0, r6
 8005590:	6992      	ldr	r2, [r2, #24]
 8005592:	611a      	str	r2, [r3, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005594:	d8eb      	bhi.n	800556e <HAL_DMA2D_ConfigLayer+0x5a>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8005596:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 800559a:	621d      	str	r5, [r3, #32]
 800559c:	e7e7      	b.n	800556e <HAL_DMA2D_ConfigLayer+0x5a>
 800559e:	bf00      	nop
 80055a0:	00fcfff0 	.word	0x00fcfff0

080055a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80055a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80055a8:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80055aa:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 8005768 <HAL_GPIO_Init+0x1c4>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80055ae:	4a6c      	ldr	r2, [pc, #432]	; (8005760 <HAL_GPIO_Init+0x1bc>)
    ioposition = ((uint32_t)0x01) << position;
 80055b0:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80055b2:	680d      	ldr	r5, [r1, #0]
    ioposition = ((uint32_t)0x01) << position;
 80055b4:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80055b6:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 80055ba:	43ac      	bics	r4, r5
 80055bc:	f040 80b6 	bne.w	800572c <HAL_GPIO_Init+0x188>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80055c0:	684d      	ldr	r5, [r1, #4]
 80055c2:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80055c6:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80055c8:	f005 0403 	and.w	r4, r5, #3
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80055cc:	fa06 f608 	lsl.w	r6, r6, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80055d0:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80055d2:	43f6      	mvns	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80055d4:	2f01      	cmp	r7, #1
 80055d6:	d834      	bhi.n	8005642 <HAL_GPIO_Init+0x9e>
        temp = GPIOx->OSPEEDR; 
 80055d8:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80055da:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2));
 80055de:	68cf      	ldr	r7, [r1, #12]
 80055e0:	fa07 f708 	lsl.w	r7, r7, r8
 80055e4:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 80055e8:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80055ea:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80055ec:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80055f0:	f3c5 1700 	ubfx	r7, r5, #4, #1
 80055f4:	409f      	lsls	r7, r3
 80055f6:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80055fa:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 80055fc:	68c7      	ldr	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80055fe:	2c02      	cmp	r4, #2
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005600:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8005604:	688f      	ldr	r7, [r1, #8]
 8005606:	fa07 f708 	lsl.w	r7, r7, r8
 800560a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->PUPDR = temp;
 800560e:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005610:	d119      	bne.n	8005646 <HAL_GPIO_Init+0xa2>
        temp = GPIOx->AFR[position >> 3];
 8005612:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005616:	f003 0b07 	and.w	fp, r3, #7
 800561a:	f04f 0e0f 	mov.w	lr, #15
 800561e:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8005622:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8005626:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800562a:	fa0e fe0b 	lsl.w	lr, lr, fp
 800562e:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005632:	690f      	ldr	r7, [r1, #16]
 8005634:	fa07 f70b 	lsl.w	r7, r7, fp
 8005638:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3] = temp;
 800563c:	f8ca 7020 	str.w	r7, [sl, #32]
 8005640:	e001      	b.n	8005646 <HAL_GPIO_Init+0xa2>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005642:	2c03      	cmp	r4, #3
 8005644:	d1da      	bne.n	80055fc <HAL_GPIO_Init+0x58>
      temp = GPIOx->MODER;
 8005646:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005648:	fa04 f408 	lsl.w	r4, r4, r8
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800564c:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005650:	ea06 0607 	and.w	r6, r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005654:	ea46 0604 	orr.w	r6, r6, r4
      GPIOx->MODER = temp;
 8005658:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800565a:	d067      	beq.n	800572c <HAL_GPIO_Init+0x188>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800565c:	f8d9 4044 	ldr.w	r4, [r9, #68]	; 0x44
 8005660:	f023 0603 	bic.w	r6, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005664:	f003 0703 	and.w	r7, r3, #3
 8005668:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800566c:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8005670:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005674:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005676:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
 800567a:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
 800567e:	f8d9 4044 	ldr.w	r4, [r9, #68]	; 0x44
 8005682:	f404 4480 	and.w	r4, r4, #16384	; 0x4000
 8005686:	9401      	str	r4, [sp, #4]
 8005688:	9c01      	ldr	r4, [sp, #4]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800568a:	fa0e f407 	lsl.w	r4, lr, r7
        temp = SYSCFG->EXTICR[position >> 2];
 800568e:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005692:	ea28 0e04 	bic.w	lr, r8, r4
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005696:	4c33      	ldr	r4, [pc, #204]	; (8005764 <HAL_GPIO_Init+0x1c0>)
 8005698:	42a0      	cmp	r0, r4
 800569a:	d04e      	beq.n	800573a <HAL_GPIO_Init+0x196>
 800569c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80056a0:	42a0      	cmp	r0, r4
 80056a2:	d04c      	beq.n	800573e <HAL_GPIO_Init+0x19a>
 80056a4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80056a8:	42a0      	cmp	r0, r4
 80056aa:	d04a      	beq.n	8005742 <HAL_GPIO_Init+0x19e>
 80056ac:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80056b0:	42a0      	cmp	r0, r4
 80056b2:	d048      	beq.n	8005746 <HAL_GPIO_Init+0x1a2>
 80056b4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80056b8:	42a0      	cmp	r0, r4
 80056ba:	d046      	beq.n	800574a <HAL_GPIO_Init+0x1a6>
 80056bc:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80056c0:	42a0      	cmp	r0, r4
 80056c2:	d044      	beq.n	800574e <HAL_GPIO_Init+0x1aa>
 80056c4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80056c8:	42a0      	cmp	r0, r4
 80056ca:	d042      	beq.n	8005752 <HAL_GPIO_Init+0x1ae>
 80056cc:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80056d0:	42a0      	cmp	r0, r4
 80056d2:	d040      	beq.n	8005756 <HAL_GPIO_Init+0x1b2>
 80056d4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80056d8:	42a0      	cmp	r0, r4
 80056da:	d03e      	beq.n	800575a <HAL_GPIO_Init+0x1b6>
 80056dc:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80056e0:	42a0      	cmp	r0, r4
 80056e2:	bf0c      	ite	eq
 80056e4:	2409      	moveq	r4, #9
 80056e6:	240a      	movne	r4, #10
 80056e8:	40bc      	lsls	r4, r7
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80056ea:	02ef      	lsls	r7, r5, #11
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80056ec:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 80056f0:	60b4      	str	r4, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 80056f2:	ea6f 060c 	mvn.w	r6, ip
        temp = EXTI->RTSR;
 80056f6:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 80056f8:	bf54      	ite	pl
 80056fa:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80056fc:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005700:	02af      	lsls	r7, r5, #10
        EXTI->RTSR = temp;
 8005702:	6094      	str	r4, [r2, #8]
        temp = EXTI->FTSR;
 8005704:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8005706:	bf54      	ite	pl
 8005708:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 800570a:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800570e:	03af      	lsls	r7, r5, #14
        EXTI->FTSR = temp;
 8005710:	60d4      	str	r4, [r2, #12]
        temp = EXTI->EMR;
 8005712:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8005714:	bf54      	ite	pl
 8005716:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8005718:	ea4c 0404 	orrmi.w	r4, ip, r4
        EXTI->EMR = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800571c:	03ed      	lsls	r5, r5, #15
        EXTI->EMR = temp;
 800571e:	6054      	str	r4, [r2, #4]
        temp = EXTI->IMR;
 8005720:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8005722:	bf54      	ite	pl
 8005724:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8005726:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 800572a:	6014      	str	r4, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800572c:	3301      	adds	r3, #1
 800572e:	2b10      	cmp	r3, #16
 8005730:	f47f af3e 	bne.w	80055b0 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 8005734:	b003      	add	sp, #12
 8005736:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800573a:	2400      	movs	r4, #0
 800573c:	e7d4      	b.n	80056e8 <HAL_GPIO_Init+0x144>
 800573e:	2401      	movs	r4, #1
 8005740:	e7d2      	b.n	80056e8 <HAL_GPIO_Init+0x144>
 8005742:	2402      	movs	r4, #2
 8005744:	e7d0      	b.n	80056e8 <HAL_GPIO_Init+0x144>
 8005746:	2403      	movs	r4, #3
 8005748:	e7ce      	b.n	80056e8 <HAL_GPIO_Init+0x144>
 800574a:	2404      	movs	r4, #4
 800574c:	e7cc      	b.n	80056e8 <HAL_GPIO_Init+0x144>
 800574e:	2405      	movs	r4, #5
 8005750:	e7ca      	b.n	80056e8 <HAL_GPIO_Init+0x144>
 8005752:	2406      	movs	r4, #6
 8005754:	e7c8      	b.n	80056e8 <HAL_GPIO_Init+0x144>
 8005756:	2407      	movs	r4, #7
 8005758:	e7c6      	b.n	80056e8 <HAL_GPIO_Init+0x144>
 800575a:	2408      	movs	r4, #8
 800575c:	e7c4      	b.n	80056e8 <HAL_GPIO_Init+0x144>
 800575e:	bf00      	nop
 8005760:	40013c00 	.word	0x40013c00
 8005764:	40020000 	.word	0x40020000
 8005768:	40023800 	.word	0x40023800

0800576c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800576c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005770:	2200      	movs	r2, #0
      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005772:	4c4a      	ldr	r4, [pc, #296]	; (800589c <HAL_GPIO_DeInit+0x130>)
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8005774:	f8df 912c 	ldr.w	r9, [pc, #300]	; 80058a4 <HAL_GPIO_DeInit+0x138>
 8005778:	f8df a12c 	ldr.w	sl, [pc, #300]	; 80058a8 <HAL_GPIO_DeInit+0x13c>
 800577c:	f8df b12c 	ldr.w	fp, [pc, #300]	; 80058ac <HAL_GPIO_DeInit+0x140>
    ioposition = ((uint32_t)0x01) << position;
 8005780:	2301      	movs	r3, #1
 8005782:	fa03 fe02 	lsl.w	lr, r3, r2
    if(iocurrent == ioposition)
 8005786:	ea3e 0301 	bics.w	r3, lr, r1
    iocurrent = (GPIO_Pin) & ioposition;
 800578a:	ea0e 0701 	and.w	r7, lr, r1
    if(iocurrent == ioposition)
 800578e:	d16e      	bne.n	800586e <HAL_GPIO_DeInit+0x102>
      tmp = SYSCFG->EXTICR[position >> 2];
 8005790:	f022 0503 	bic.w	r5, r2, #3
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005794:	f002 0c03 	and.w	ip, r2, #3
 8005798:	260f      	movs	r6, #15
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800579a:	4b41      	ldr	r3, [pc, #260]	; (80058a0 <HAL_GPIO_DeInit+0x134>)
 800579c:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80057a0:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80057a4:	4298      	cmp	r0, r3
 80057a6:	f505 359c 	add.w	r5, r5, #79872	; 0x13800
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80057aa:	fa06 f60c 	lsl.w	r6, r6, ip
      tmp = SYSCFG->EXTICR[position >> 2];
 80057ae:	f8d5 8008 	ldr.w	r8, [r5, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80057b2:	ea06 0808 	and.w	r8, r6, r8
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80057b6:	d05f      	beq.n	8005878 <HAL_GPIO_DeInit+0x10c>
 80057b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80057bc:	4298      	cmp	r0, r3
 80057be:	d05d      	beq.n	800587c <HAL_GPIO_DeInit+0x110>
 80057c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80057c4:	4298      	cmp	r0, r3
 80057c6:	d05b      	beq.n	8005880 <HAL_GPIO_DeInit+0x114>
 80057c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80057cc:	4298      	cmp	r0, r3
 80057ce:	d059      	beq.n	8005884 <HAL_GPIO_DeInit+0x118>
 80057d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80057d4:	4298      	cmp	r0, r3
 80057d6:	d057      	beq.n	8005888 <HAL_GPIO_DeInit+0x11c>
 80057d8:	4548      	cmp	r0, r9
 80057da:	d057      	beq.n	800588c <HAL_GPIO_DeInit+0x120>
 80057dc:	4550      	cmp	r0, sl
 80057de:	d057      	beq.n	8005890 <HAL_GPIO_DeInit+0x124>
 80057e0:	4558      	cmp	r0, fp
 80057e2:	d057      	beq.n	8005894 <HAL_GPIO_DeInit+0x128>
 80057e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057e8:	4298      	cmp	r0, r3
 80057ea:	d055      	beq.n	8005898 <HAL_GPIO_DeInit+0x12c>
 80057ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80057f0:	4298      	cmp	r0, r3
 80057f2:	bf0c      	ite	eq
 80057f4:	2309      	moveq	r3, #9
 80057f6:	230a      	movne	r3, #10
 80057f8:	fa03 f30c 	lsl.w	r3, r3, ip
 80057fc:	4543      	cmp	r3, r8
 80057fe:	d113      	bne.n	8005828 <HAL_GPIO_DeInit+0xbc>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005800:	6823      	ldr	r3, [r4, #0]
 8005802:	ea23 0307 	bic.w	r3, r3, r7
 8005806:	6023      	str	r3, [r4, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005808:	6863      	ldr	r3, [r4, #4]
 800580a:	ea23 0307 	bic.w	r3, r3, r7
 800580e:	6063      	str	r3, [r4, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005810:	68e3      	ldr	r3, [r4, #12]
 8005812:	ea23 0307 	bic.w	r3, r3, r7
 8005816:	60e3      	str	r3, [r4, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005818:	68a3      	ldr	r3, [r4, #8]
 800581a:	ea23 0307 	bic.w	r3, r3, r7
 800581e:	60a3      	str	r3, [r4, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8005820:	68ab      	ldr	r3, [r5, #8]
 8005822:	ea23 0306 	bic.w	r3, r3, r6
 8005826:	60ab      	str	r3, [r5, #8]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005828:	2603      	movs	r6, #3
 800582a:	0053      	lsls	r3, r2, #1
 800582c:	6805      	ldr	r5, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800582e:	f002 0c07 	and.w	ip, r2, #7
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005832:	fa06 f303 	lsl.w	r3, r6, r3
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005836:	270f      	movs	r7, #15
 8005838:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800583c:	ea25 0503 	bic.w	r5, r5, r3
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005840:	fa07 f70c 	lsl.w	r7, r7, ip
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005844:	6005      	str	r5, [r0, #0]
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005846:	fa22 f506 	lsr.w	r5, r2, r6
 800584a:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800584e:	6a2e      	ldr	r6, [r5, #32]
 8005850:	ea26 0707 	bic.w	r7, r6, r7
 8005854:	622f      	str	r7, [r5, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005856:	68c5      	ldr	r5, [r0, #12]
 8005858:	ea25 0503 	bic.w	r5, r5, r3
 800585c:	60c5      	str	r5, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800585e:	6845      	ldr	r5, [r0, #4]
 8005860:	ea25 050e 	bic.w	r5, r5, lr
 8005864:	6045      	str	r5, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005866:	6885      	ldr	r5, [r0, #8]
 8005868:	ea25 0303 	bic.w	r3, r5, r3
 800586c:	6083      	str	r3, [r0, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 800586e:	3201      	adds	r2, #1
 8005870:	2a10      	cmp	r2, #16
 8005872:	d185      	bne.n	8005780 <HAL_GPIO_DeInit+0x14>
    }
  }
}
 8005874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8005878:	2300      	movs	r3, #0
 800587a:	e7bd      	b.n	80057f8 <HAL_GPIO_DeInit+0x8c>
 800587c:	2301      	movs	r3, #1
 800587e:	e7bb      	b.n	80057f8 <HAL_GPIO_DeInit+0x8c>
 8005880:	2302      	movs	r3, #2
 8005882:	e7b9      	b.n	80057f8 <HAL_GPIO_DeInit+0x8c>
 8005884:	2303      	movs	r3, #3
 8005886:	e7b7      	b.n	80057f8 <HAL_GPIO_DeInit+0x8c>
 8005888:	2304      	movs	r3, #4
 800588a:	e7b5      	b.n	80057f8 <HAL_GPIO_DeInit+0x8c>
 800588c:	2305      	movs	r3, #5
 800588e:	e7b3      	b.n	80057f8 <HAL_GPIO_DeInit+0x8c>
 8005890:	2306      	movs	r3, #6
 8005892:	e7b1      	b.n	80057f8 <HAL_GPIO_DeInit+0x8c>
 8005894:	2307      	movs	r3, #7
 8005896:	e7af      	b.n	80057f8 <HAL_GPIO_DeInit+0x8c>
 8005898:	2308      	movs	r3, #8
 800589a:	e7ad      	b.n	80057f8 <HAL_GPIO_DeInit+0x8c>
 800589c:	40013c00 	.word	0x40013c00
 80058a0:	40020000 	.word	0x40020000
 80058a4:	40021400 	.word	0x40021400
 80058a8:	40021800 	.word	0x40021800
 80058ac:	40021c00 	.word	0x40021c00

080058b0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80058b0:	b10a      	cbz	r2, 80058b6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80058b2:	6181      	str	r1, [r0, #24]
  }
}
 80058b4:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80058b6:	0409      	lsls	r1, r1, #16
 80058b8:	e7fb      	b.n	80058b2 <HAL_GPIO_WritePin+0x2>

080058ba <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80058ba:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80058bc:	ea01 0203 	and.w	r2, r1, r3
 80058c0:	ea21 0103 	bic.w	r1, r1, r3
 80058c4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80058c8:	6181      	str	r1, [r0, #24]
}
 80058ca:	4770      	bx	lr

080058cc <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80058cc:	6803      	ldr	r3, [r0, #0]
 80058ce:	699a      	ldr	r2, [r3, #24]
 80058d0:	0791      	lsls	r1, r2, #30
 80058d2:	d501      	bpl.n	80058d8 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 80058d4:	2200      	movs	r2, #0
 80058d6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80058d8:	699a      	ldr	r2, [r3, #24]
 80058da:	07d2      	lsls	r2, r2, #31
 80058dc:	d403      	bmi.n	80058e6 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80058de:	699a      	ldr	r2, [r3, #24]
 80058e0:	f042 0201 	orr.w	r2, r2, #1
 80058e4:	619a      	str	r2, [r3, #24]
  }
}
 80058e6:	4770      	bx	lr

080058e8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80058e8:	b530      	push	{r4, r5, lr}
 80058ea:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80058ec:	f3c1 0109 	ubfx	r1, r1, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80058f0:	6804      	ldr	r4, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80058f2:	432b      	orrs	r3, r5
  MODIFY_REG(hi2c->Instance->CR2, \
 80058f4:	6860      	ldr	r0, [r4, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80058f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 80058fa:	4a05      	ldr	r2, [pc, #20]	; (8005910 <I2C_TransferConfig+0x28>)
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80058fc:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 80058fe:	ea42 5255 	orr.w	r2, r2, r5, lsr #21
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005902:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 8005906:	ea20 0002 	bic.w	r0, r0, r2
 800590a:	4303      	orrs	r3, r0
 800590c:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800590e:	bd30      	pop	{r4, r5, pc}
 8005910:	03ff63ff 	.word	0x03ff63ff

08005914 <I2C_IsErrorOccurred>:
{
 8005914:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 8005918:	6803      	ldr	r3, [r0, #0]
{
 800591a:	4605      	mov	r5, r0
 800591c:	4688      	mov	r8, r1
 800591e:	4617      	mov	r7, r2
  uint32_t itflag   = hi2c->Instance->ISR;
 8005920:	699c      	ldr	r4, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005922:	f014 0410 	ands.w	r4, r4, #16
 8005926:	d079      	beq.n	8005a1c <I2C_IsErrorOccurred+0x108>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005928:	2210      	movs	r2, #16
  HAL_StatusTypeDef status = HAL_OK;
 800592a:	2600      	movs	r6, #0
              hi2c->State = HAL_I2C_STATE_READY;
 800592c:	f04f 0920 	mov.w	r9, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005930:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005932:	682b      	ldr	r3, [r5, #0]
 8005934:	699a      	ldr	r2, [r3, #24]
 8005936:	0694      	lsls	r4, r2, #26
 8005938:	d436      	bmi.n	80059a8 <I2C_IsErrorOccurred+0x94>
 800593a:	b10e      	cbz	r6, 8005940 <I2C_IsErrorOccurred+0x2c>
    error_code |= HAL_I2C_ERROR_AF;
 800593c:	2404      	movs	r4, #4
 800593e:	e039      	b.n	80059b4 <I2C_IsErrorOccurred+0xa0>
      if (Timeout != HAL_MAX_DELAY)
 8005940:	f1b8 3fff 	cmp.w	r8, #4294967295
 8005944:	d0f6      	beq.n	8005934 <I2C_IsErrorOccurred+0x20>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005946:	f7ff fbc3 	bl	80050d0 <HAL_GetTick>
 800594a:	1bc0      	subs	r0, r0, r7
 800594c:	4540      	cmp	r0, r8
 800594e:	d802      	bhi.n	8005956 <I2C_IsErrorOccurred+0x42>
 8005950:	f1b8 0f00 	cmp.w	r8, #0
 8005954:	d1ed      	bne.n	8005932 <I2C_IsErrorOccurred+0x1e>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005956:	682b      	ldr	r3, [r5, #0]
 8005958:	6859      	ldr	r1, [r3, #4]
          tmp2 = hi2c->Mode;
 800595a:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800595e:	6998      	ldr	r0, [r3, #24]
          tmp2 = hi2c->Mode;
 8005960:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005962:	0400      	lsls	r0, r0, #16
 8005964:	d50a      	bpl.n	800597c <I2C_IsErrorOccurred+0x68>
 8005966:	0449      	lsls	r1, r1, #17
 8005968:	d408      	bmi.n	800597c <I2C_IsErrorOccurred+0x68>
              (tmp1 != I2C_CR2_STOP) && \
 800596a:	2a20      	cmp	r2, #32
 800596c:	d006      	beq.n	800597c <I2C_IsErrorOccurred+0x68>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800596e:	685a      	ldr	r2, [r3, #4]
 8005970:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005974:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8005976:	f7ff fbab 	bl	80050d0 <HAL_GetTick>
 800597a:	4607      	mov	r7, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800597c:	682b      	ldr	r3, [r5, #0]
 800597e:	699c      	ldr	r4, [r3, #24]
 8005980:	f014 0420 	ands.w	r4, r4, #32
 8005984:	d1d5      	bne.n	8005932 <I2C_IsErrorOccurred+0x1e>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005986:	f7ff fba3 	bl	80050d0 <HAL_GetTick>
 800598a:	1bc0      	subs	r0, r0, r7
 800598c:	2819      	cmp	r0, #25
 800598e:	d9f5      	bls.n	800597c <I2C_IsErrorOccurred+0x68>
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005990:	6c6b      	ldr	r3, [r5, #68]	; 0x44
              status = HAL_ERROR;
 8005992:	2601      	movs	r6, #1
              __HAL_UNLOCK(hi2c);
 8005994:	f885 4040 	strb.w	r4, [r5, #64]	; 0x40
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005998:	f043 0320 	orr.w	r3, r3, #32
 800599c:	646b      	str	r3, [r5, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800599e:	f885 9041 	strb.w	r9, [r5, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80059a2:	f885 4042 	strb.w	r4, [r5, #66]	; 0x42
              status = HAL_ERROR;
 80059a6:	e7e9      	b.n	800597c <I2C_IsErrorOccurred+0x68>
    if (status == HAL_OK)
 80059a8:	2e00      	cmp	r6, #0
 80059aa:	d1c7      	bne.n	800593c <I2C_IsErrorOccurred+0x28>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80059ac:	2220      	movs	r2, #32
    error_code |= HAL_I2C_ERROR_AF;
 80059ae:	2404      	movs	r4, #4
    status = HAL_ERROR;
 80059b0:	2601      	movs	r6, #1
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80059b2:	61da      	str	r2, [r3, #28]
  itflag = hi2c->Instance->ISR;
 80059b4:	682b      	ldr	r3, [r5, #0]
 80059b6:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80059b8:	05d0      	lsls	r0, r2, #23
 80059ba:	d505      	bpl.n	80059c8 <I2C_IsErrorOccurred+0xb4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80059bc:	f44f 7180 	mov.w	r1, #256	; 0x100
    error_code |= HAL_I2C_ERROR_BERR;
 80059c0:	f044 0401 	orr.w	r4, r4, #1
    status = HAL_ERROR;
 80059c4:	2601      	movs	r6, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80059c6:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80059c8:	0551      	lsls	r1, r2, #21
 80059ca:	d505      	bpl.n	80059d8 <I2C_IsErrorOccurred+0xc4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80059cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 80059d0:	f044 0408 	orr.w	r4, r4, #8
    status = HAL_ERROR;
 80059d4:	2601      	movs	r6, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80059d6:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80059d8:	0592      	lsls	r2, r2, #22
 80059da:	d521      	bpl.n	8005a20 <I2C_IsErrorOccurred+0x10c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80059dc:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 80059e0:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80059e4:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 80059e6:	4628      	mov	r0, r5
    __HAL_UNLOCK(hi2c);
 80059e8:	2601      	movs	r6, #1
    I2C_Flush_TXDR(hi2c);
 80059ea:	f7ff ff6f 	bl	80058cc <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80059ee:	682a      	ldr	r2, [r5, #0]
 80059f0:	6853      	ldr	r3, [r2, #4]
 80059f2:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80059f6:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80059fa:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80059fe:	f023 0301 	bic.w	r3, r3, #1
 8005a02:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 8005a04:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8005a06:	431c      	orrs	r4, r3
    hi2c->State = HAL_I2C_STATE_READY;
 8005a08:	2320      	movs	r3, #32
    hi2c->ErrorCode |= error_code;
 8005a0a:	646c      	str	r4, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005a0c:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a10:	2300      	movs	r3, #0
 8005a12:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8005a16:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
 8005a1a:	e003      	b.n	8005a24 <I2C_IsErrorOccurred+0x110>
  HAL_StatusTypeDef status = HAL_OK;
 8005a1c:	4626      	mov	r6, r4
 8005a1e:	e7c9      	b.n	80059b4 <I2C_IsErrorOccurred+0xa0>
  if (status != HAL_OK)
 8005a20:	2e00      	cmp	r6, #0
 8005a22:	d1e0      	bne.n	80059e6 <I2C_IsErrorOccurred+0xd2>
}
 8005a24:	4630      	mov	r0, r6
 8005a26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08005a2a <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8005a2a:	b570      	push	{r4, r5, r6, lr}
 8005a2c:	4604      	mov	r4, r0
 8005a2e:	460d      	mov	r5, r1
 8005a30:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005a32:	6823      	ldr	r3, [r4, #0]
 8005a34:	699b      	ldr	r3, [r3, #24]
 8005a36:	079b      	lsls	r3, r3, #30
 8005a38:	d501      	bpl.n	8005a3e <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8005a3a:	2000      	movs	r0, #0
}
 8005a3c:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a3e:	4632      	mov	r2, r6
 8005a40:	4629      	mov	r1, r5
 8005a42:	4620      	mov	r0, r4
 8005a44:	f7ff ff66 	bl	8005914 <I2C_IsErrorOccurred>
 8005a48:	b9a0      	cbnz	r0, 8005a74 <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8005a4a:	1c6a      	adds	r2, r5, #1
 8005a4c:	d0f1      	beq.n	8005a32 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a4e:	f7ff fb3f 	bl	80050d0 <HAL_GetTick>
 8005a52:	1b80      	subs	r0, r0, r6
 8005a54:	42a8      	cmp	r0, r5
 8005a56:	d801      	bhi.n	8005a5c <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8005a58:	2d00      	cmp	r5, #0
 8005a5a:	d1ea      	bne.n	8005a32 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005a5c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005a5e:	f043 0320 	orr.w	r3, r3, #32
 8005a62:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005a64:	2320      	movs	r3, #32
 8005a66:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8005a70:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8005a74:	2001      	movs	r0, #1
 8005a76:	e7e1      	b.n	8005a3c <I2C_WaitOnTXISFlagUntilTimeout+0x12>

08005a78 <I2C_WaitOnFlagUntilTimeout>:
{
 8005a78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a7c:	9f06      	ldr	r7, [sp, #24]
 8005a7e:	4604      	mov	r4, r0
 8005a80:	4688      	mov	r8, r1
 8005a82:	4616      	mov	r6, r2
 8005a84:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005a86:	6822      	ldr	r2, [r4, #0]
 8005a88:	6993      	ldr	r3, [r2, #24]
 8005a8a:	ea38 0303 	bics.w	r3, r8, r3
 8005a8e:	bf0c      	ite	eq
 8005a90:	2301      	moveq	r3, #1
 8005a92:	2300      	movne	r3, #0
 8005a94:	42b3      	cmp	r3, r6
 8005a96:	d001      	beq.n	8005a9c <I2C_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 8005a98:	2000      	movs	r0, #0
 8005a9a:	e015      	b.n	8005ac8 <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8005a9c:	1c6b      	adds	r3, r5, #1
 8005a9e:	d0f3      	beq.n	8005a88 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005aa0:	f7ff fb16 	bl	80050d0 <HAL_GetTick>
 8005aa4:	1bc0      	subs	r0, r0, r7
 8005aa6:	42a8      	cmp	r0, r5
 8005aa8:	d801      	bhi.n	8005aae <I2C_WaitOnFlagUntilTimeout+0x36>
 8005aaa:	2d00      	cmp	r5, #0
 8005aac:	d1eb      	bne.n	8005a86 <I2C_WaitOnFlagUntilTimeout+0xe>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005aae:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8005ab0:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005ab2:	f043 0320 	orr.w	r3, r3, #32
 8005ab6:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005ab8:	2320      	movs	r3, #32
 8005aba:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8005ac4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8005ac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005acc <I2C_RequestMemoryWrite>:
{
 8005acc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005ad0:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005ad2:	4b18      	ldr	r3, [pc, #96]	; (8005b34 <I2C_RequestMemoryWrite+0x68>)
{
 8005ad4:	4605      	mov	r5, r0
 8005ad6:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005ad8:	9300      	str	r3, [sp, #0]
 8005ada:	b2f2      	uxtb	r2, r6
 8005adc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
{
 8005ae0:	e9dd 7808 	ldrd	r7, r8, [sp, #32]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005ae4:	f7ff ff00 	bl	80058e8 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ae8:	4628      	mov	r0, r5
 8005aea:	4642      	mov	r2, r8
 8005aec:	4639      	mov	r1, r7
 8005aee:	f7ff ff9c 	bl	8005a2a <I2C_WaitOnTXISFlagUntilTimeout>
 8005af2:	b118      	cbz	r0, 8005afc <I2C_RequestMemoryWrite+0x30>
    return HAL_ERROR;
 8005af4:	2001      	movs	r0, #1
}
 8005af6:	b002      	add	sp, #8
 8005af8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005afc:	2e01      	cmp	r6, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005afe:	682b      	ldr	r3, [r5, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005b00:	d10d      	bne.n	8005b1e <I2C_RequestMemoryWrite+0x52>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005b02:	b2e4      	uxtb	r4, r4
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005b04:	2200      	movs	r2, #0
 8005b06:	2180      	movs	r1, #128	; 0x80
 8005b08:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005b0a:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005b0c:	463b      	mov	r3, r7
 8005b0e:	f8cd 8000 	str.w	r8, [sp]
 8005b12:	f7ff ffb1 	bl	8005a78 <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 8005b16:	3800      	subs	r0, #0
 8005b18:	bf18      	it	ne
 8005b1a:	2001      	movne	r0, #1
 8005b1c:	e7eb      	b.n	8005af6 <I2C_RequestMemoryWrite+0x2a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005b1e:	0a22      	lsrs	r2, r4, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b20:	4639      	mov	r1, r7
 8005b22:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005b24:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b26:	4642      	mov	r2, r8
 8005b28:	f7ff ff7f 	bl	8005a2a <I2C_WaitOnTXISFlagUntilTimeout>
 8005b2c:	2800      	cmp	r0, #0
 8005b2e:	d1e1      	bne.n	8005af4 <I2C_RequestMemoryWrite+0x28>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005b30:	682b      	ldr	r3, [r5, #0]
 8005b32:	e7e6      	b.n	8005b02 <I2C_RequestMemoryWrite+0x36>
 8005b34:	80002000 	.word	0x80002000

08005b38 <I2C_RequestMemoryRead>:
{
 8005b38:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005b3c:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005b3e:	4b18      	ldr	r3, [pc, #96]	; (8005ba0 <I2C_RequestMemoryRead+0x68>)
{
 8005b40:	4605      	mov	r5, r0
 8005b42:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005b44:	9300      	str	r3, [sp, #0]
 8005b46:	b2f2      	uxtb	r2, r6
 8005b48:	2300      	movs	r3, #0
{
 8005b4a:	e9dd 7808 	ldrd	r7, r8, [sp, #32]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005b4e:	f7ff fecb 	bl	80058e8 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b52:	4628      	mov	r0, r5
 8005b54:	4642      	mov	r2, r8
 8005b56:	4639      	mov	r1, r7
 8005b58:	f7ff ff67 	bl	8005a2a <I2C_WaitOnTXISFlagUntilTimeout>
 8005b5c:	b118      	cbz	r0, 8005b66 <I2C_RequestMemoryRead+0x2e>
    return HAL_ERROR;
 8005b5e:	2001      	movs	r0, #1
}
 8005b60:	b002      	add	sp, #8
 8005b62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005b66:	2e01      	cmp	r6, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005b68:	682b      	ldr	r3, [r5, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005b6a:	d10d      	bne.n	8005b88 <I2C_RequestMemoryRead+0x50>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005b6c:	b2e4      	uxtb	r4, r4
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005b6e:	2200      	movs	r2, #0
 8005b70:	2140      	movs	r1, #64	; 0x40
 8005b72:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005b74:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005b76:	463b      	mov	r3, r7
 8005b78:	f8cd 8000 	str.w	r8, [sp]
 8005b7c:	f7ff ff7c 	bl	8005a78 <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 8005b80:	3800      	subs	r0, #0
 8005b82:	bf18      	it	ne
 8005b84:	2001      	movne	r0, #1
 8005b86:	e7eb      	b.n	8005b60 <I2C_RequestMemoryRead+0x28>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005b88:	0a22      	lsrs	r2, r4, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b8a:	4639      	mov	r1, r7
 8005b8c:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005b8e:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b90:	4642      	mov	r2, r8
 8005b92:	f7ff ff4a 	bl	8005a2a <I2C_WaitOnTXISFlagUntilTimeout>
 8005b96:	2800      	cmp	r0, #0
 8005b98:	d1e1      	bne.n	8005b5e <I2C_RequestMemoryRead+0x26>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005b9a:	682b      	ldr	r3, [r5, #0]
 8005b9c:	e7e6      	b.n	8005b6c <I2C_RequestMemoryRead+0x34>
 8005b9e:	bf00      	nop
 8005ba0:	80002000 	.word	0x80002000

08005ba4 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8005ba4:	b570      	push	{r4, r5, r6, lr}
 8005ba6:	4604      	mov	r4, r0
 8005ba8:	460d      	mov	r5, r1
 8005baa:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005bac:	6823      	ldr	r3, [r4, #0]
 8005bae:	699b      	ldr	r3, [r3, #24]
 8005bb0:	069b      	lsls	r3, r3, #26
 8005bb2:	d501      	bpl.n	8005bb8 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8005bb4:	2000      	movs	r0, #0
}
 8005bb6:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005bb8:	4632      	mov	r2, r6
 8005bba:	4629      	mov	r1, r5
 8005bbc:	4620      	mov	r0, r4
 8005bbe:	f7ff fea9 	bl	8005914 <I2C_IsErrorOccurred>
 8005bc2:	b990      	cbnz	r0, 8005bea <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bc4:	f7ff fa84 	bl	80050d0 <HAL_GetTick>
 8005bc8:	1b80      	subs	r0, r0, r6
 8005bca:	42a8      	cmp	r0, r5
 8005bcc:	d801      	bhi.n	8005bd2 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8005bce:	2d00      	cmp	r5, #0
 8005bd0:	d1ec      	bne.n	8005bac <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005bd2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005bd4:	f043 0320 	orr.w	r3, r3, #32
 8005bd8:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005bda:	2320      	movs	r3, #32
 8005bdc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005be0:	2300      	movs	r3, #0
 8005be2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8005be6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8005bea:	2001      	movs	r0, #1
 8005bec:	e7e3      	b.n	8005bb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x12>

08005bee <HAL_I2C_Init>:
{
 8005bee:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8005bf0:	4604      	mov	r4, r0
 8005bf2:	2800      	cmp	r0, #0
 8005bf4:	d04a      	beq.n	8005c8c <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005bf6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005bfa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005bfe:	b91b      	cbnz	r3, 8005c08 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8005c00:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8005c04:	f7fb fc0c 	bl	8001420 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8005c08:	2324      	movs	r3, #36	; 0x24
 8005c0a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8005c0e:	6823      	ldr	r3, [r4, #0]
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	f022 0201 	bic.w	r2, r2, #1
 8005c16:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005c18:	6862      	ldr	r2, [r4, #4]
 8005c1a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005c1e:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005c20:	689a      	ldr	r2, [r3, #8]
 8005c22:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005c26:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005c28:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005c2c:	2901      	cmp	r1, #1
 8005c2e:	d124      	bne.n	8005c7a <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005c30:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005c34:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005c36:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c38:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005c3a:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8005c3e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005c42:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005c44:	68da      	ldr	r2, [r3, #12]
 8005c46:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005c4a:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005c4c:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 8005c50:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005c52:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005c54:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005c58:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005c5a:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 8005c5e:	430a      	orrs	r2, r1
 8005c60:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	f042 0201 	orr.w	r2, r2, #1
 8005c68:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8005c6a:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c6c:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005c6e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005c72:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c74:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8005c78:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005c7a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005c7e:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005c80:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005c82:	d1d8      	bne.n	8005c36 <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005c84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c88:	605a      	str	r2, [r3, #4]
 8005c8a:	e7d4      	b.n	8005c36 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8005c8c:	2001      	movs	r0, #1
 8005c8e:	e7f3      	b.n	8005c78 <HAL_I2C_Init+0x8a>

08005c90 <HAL_I2C_DeInit>:
{
 8005c90:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8005c92:	4604      	mov	r4, r0
 8005c94:	b198      	cbz	r0, 8005cbe <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 8005c96:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8005c98:	2324      	movs	r3, #36	; 0x24
 8005c9a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8005c9e:	6813      	ldr	r3, [r2, #0]
 8005ca0:	f023 0301 	bic.w	r3, r3, #1
 8005ca4:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8005ca6:	f7fb fbff 	bl	80014a8 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005caa:	2000      	movs	r0, #0
 8005cac:	6460      	str	r0, [r4, #68]	; 0x44
  __HAL_UNLOCK(hi2c);
 8005cae:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 8005cb2:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005cb6:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cb8:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8005cbc:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005cbe:	2001      	movs	r0, #1
 8005cc0:	e7fc      	b.n	8005cbc <HAL_I2C_DeInit+0x2c>

08005cc2 <HAL_I2C_Mem_Write>:
{
 8005cc2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cc6:	b085      	sub	sp, #20
 8005cc8:	469b      	mov	fp, r3
 8005cca:	4604      	mov	r4, r0
 8005ccc:	460f      	mov	r7, r1
 8005cce:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8005cd2:	4692      	mov	sl, r2
 8005cd4:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
 8005cd8:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005cda:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005cde:	2b20      	cmp	r3, #32
 8005ce0:	f040 80a3 	bne.w	8005e2a <HAL_I2C_Mem_Write+0x168>
    if ((pData == NULL) || (Size == 0U))
 8005ce4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ce6:	b10b      	cbz	r3, 8005cec <HAL_I2C_Mem_Write+0x2a>
 8005ce8:	9b03      	ldr	r3, [sp, #12]
 8005cea:	b933      	cbnz	r3, 8005cfa <HAL_I2C_Mem_Write+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005cec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005cf0:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8005cf2:	2001      	movs	r0, #1
}
 8005cf4:	b005      	add	sp, #20
 8005cf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8005cfa:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8005cfe:	2b01      	cmp	r3, #1
 8005d00:	f000 8093 	beq.w	8005e2a <HAL_I2C_Mem_Write+0x168>
 8005d04:	2501      	movs	r5, #1
 8005d06:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8005d0a:	f7ff f9e1 	bl	80050d0 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005d0e:	2319      	movs	r3, #25
 8005d10:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8005d12:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005d14:	462a      	mov	r2, r5
 8005d16:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005d1a:	4620      	mov	r0, r4
 8005d1c:	f7ff feac 	bl	8005a78 <I2C_WaitOnFlagUntilTimeout>
 8005d20:	4680      	mov	r8, r0
 8005d22:	2800      	cmp	r0, #0
 8005d24:	d1e5      	bne.n	8005cf2 <HAL_I2C_Mem_Write+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005d26:	2321      	movs	r3, #33	; 0x21
    hi2c->XferISR   = NULL;
 8005d28:	6360      	str	r0, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005d2a:	4652      	mov	r2, sl
 8005d2c:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005d2e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005d32:	2340      	movs	r3, #64	; 0x40
 8005d34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8005d38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d3a:	6460      	str	r0, [r4, #68]	; 0x44
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005d3c:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8005d3e:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8005d40:	9b03      	ldr	r3, [sp, #12]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005d42:	e9cd 9600 	strd	r9, r6, [sp]
    hi2c->XferCount = Size;
 8005d46:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005d48:	465b      	mov	r3, fp
 8005d4a:	f7ff febf 	bl	8005acc <I2C_RequestMemoryWrite>
 8005d4e:	b110      	cbz	r0, 8005d56 <HAL_I2C_Mem_Write+0x94>
      __HAL_UNLOCK(hi2c);
 8005d50:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      return HAL_ERROR;
 8005d54:	e7cd      	b.n	8005cf2 <HAL_I2C_Mem_Write+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005d56:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005d58:	b29b      	uxth	r3, r3
 8005d5a:	2bff      	cmp	r3, #255	; 0xff
 8005d5c:	d955      	bls.n	8005e0a <HAL_I2C_Mem_Write+0x148>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005d5e:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005d60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005d64:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005d66:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005d68:	4639      	mov	r1, r7
 8005d6a:	4620      	mov	r0, r4
 8005d6c:	f7ff fdbc 	bl	80058e8 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d70:	4632      	mov	r2, r6
 8005d72:	4649      	mov	r1, r9
 8005d74:	4620      	mov	r0, r4
 8005d76:	f7ff fe58 	bl	8005a2a <I2C_WaitOnTXISFlagUntilTimeout>
 8005d7a:	2800      	cmp	r0, #0
 8005d7c:	d1b9      	bne.n	8005cf2 <HAL_I2C_Mem_Write+0x30>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005d7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d80:	6822      	ldr	r2, [r4, #0]
 8005d82:	f813 1b01 	ldrb.w	r1, [r3], #1
 8005d86:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8005d88:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8005d8a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8005d8c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8005d8e:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8005d90:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8005d92:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8005d94:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8005d96:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005d98:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8005d9a:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005d9c:	b29b      	uxth	r3, r3
 8005d9e:	b1ab      	cbz	r3, 8005dcc <HAL_I2C_Mem_Write+0x10a>
 8005da0:	b9a2      	cbnz	r2, 8005dcc <HAL_I2C_Mem_Write+0x10a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005da2:	464b      	mov	r3, r9
 8005da4:	2180      	movs	r1, #128	; 0x80
 8005da6:	4620      	mov	r0, r4
 8005da8:	9600      	str	r6, [sp, #0]
 8005daa:	f7ff fe65 	bl	8005a78 <I2C_WaitOnFlagUntilTimeout>
 8005dae:	2800      	cmp	r0, #0
 8005db0:	d19f      	bne.n	8005cf2 <HAL_I2C_Mem_Write+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005db2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005db4:	b29b      	uxth	r3, r3
 8005db6:	2bff      	cmp	r3, #255	; 0xff
 8005db8:	d92f      	bls.n	8005e1a <HAL_I2C_Mem_Write+0x158>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005dba:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005dbc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005dc0:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005dc2:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005dc4:	4639      	mov	r1, r7
 8005dc6:	4620      	mov	r0, r4
 8005dc8:	f7ff fd8e 	bl	80058e8 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8005dcc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005dce:	b29b      	uxth	r3, r3
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d1cd      	bne.n	8005d70 <HAL_I2C_Mem_Write+0xae>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005dd4:	4632      	mov	r2, r6
 8005dd6:	4649      	mov	r1, r9
 8005dd8:	4620      	mov	r0, r4
 8005dda:	f7ff fee3 	bl	8005ba4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005dde:	2800      	cmp	r0, #0
 8005de0:	d187      	bne.n	8005cf2 <HAL_I2C_Mem_Write+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005de2:	6823      	ldr	r3, [r4, #0]
 8005de4:	2120      	movs	r1, #32
 8005de6:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8005de8:	685a      	ldr	r2, [r3, #4]
 8005dea:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8005dee:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8005df2:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8005df6:	f022 0201 	bic.w	r2, r2, #1
 8005dfa:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005dfc:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8005e00:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005e04:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8005e08:	e774      	b.n	8005cf4 <HAL_I2C_Mem_Write+0x32>
      hi2c->XferSize = hi2c->XferCount;
 8005e0a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005e0c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005e10:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8005e12:	b292      	uxth	r2, r2
 8005e14:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005e16:	b2d2      	uxtb	r2, r2
 8005e18:	e7a6      	b.n	8005d68 <HAL_I2C_Mem_Write+0xa6>
          hi2c->XferSize = hi2c->XferCount;
 8005e1a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005e1c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005e20:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8005e22:	b292      	uxth	r2, r2
 8005e24:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005e26:	b2d2      	uxtb	r2, r2
 8005e28:	e7cc      	b.n	8005dc4 <HAL_I2C_Mem_Write+0x102>
    return HAL_BUSY;
 8005e2a:	2002      	movs	r0, #2
 8005e2c:	e762      	b.n	8005cf4 <HAL_I2C_Mem_Write+0x32>
	...

08005e30 <HAL_I2C_Mem_Read>:
{
 8005e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e34:	b085      	sub	sp, #20
 8005e36:	469b      	mov	fp, r3
 8005e38:	4604      	mov	r4, r0
 8005e3a:	460f      	mov	r7, r1
 8005e3c:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8005e40:	4692      	mov	sl, r2
 8005e42:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
 8005e46:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e48:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005e4c:	2b20      	cmp	r3, #32
 8005e4e:	f040 80a7 	bne.w	8005fa0 <HAL_I2C_Mem_Read+0x170>
    if ((pData == NULL) || (Size == 0U))
 8005e52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e54:	b10b      	cbz	r3, 8005e5a <HAL_I2C_Mem_Read+0x2a>
 8005e56:	9b03      	ldr	r3, [sp, #12]
 8005e58:	b933      	cbnz	r3, 8005e68 <HAL_I2C_Mem_Read+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005e5a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e5e:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8005e60:	2001      	movs	r0, #1
}
 8005e62:	b005      	add	sp, #20
 8005e64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8005e68:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	f000 8097 	beq.w	8005fa0 <HAL_I2C_Mem_Read+0x170>
 8005e72:	2501      	movs	r5, #1
 8005e74:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8005e78:	f7ff f92a 	bl	80050d0 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005e7c:	2319      	movs	r3, #25
 8005e7e:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8005e80:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005e82:	462a      	mov	r2, r5
 8005e84:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005e88:	4620      	mov	r0, r4
 8005e8a:	f7ff fdf5 	bl	8005a78 <I2C_WaitOnFlagUntilTimeout>
 8005e8e:	4680      	mov	r8, r0
 8005e90:	2800      	cmp	r0, #0
 8005e92:	d1e5      	bne.n	8005e60 <HAL_I2C_Mem_Read+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005e94:	2322      	movs	r3, #34	; 0x22
    hi2c->XferISR   = NULL;
 8005e96:	6360      	str	r0, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005e98:	4652      	mov	r2, sl
 8005e9a:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005e9c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005ea0:	2340      	movs	r3, #64	; 0x40
 8005ea2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8005ea6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ea8:	6460      	str	r0, [r4, #68]	; 0x44
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005eaa:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8005eac:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8005eae:	9b03      	ldr	r3, [sp, #12]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005eb0:	e9cd 9600 	strd	r9, r6, [sp]
    hi2c->XferCount = Size;
 8005eb4:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005eb6:	465b      	mov	r3, fp
 8005eb8:	f7ff fe3e 	bl	8005b38 <I2C_RequestMemoryRead>
 8005ebc:	b110      	cbz	r0, 8005ec4 <HAL_I2C_Mem_Read+0x94>
      __HAL_UNLOCK(hi2c);
 8005ebe:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      return HAL_ERROR;
 8005ec2:	e7cd      	b.n	8005e60 <HAL_I2C_Mem_Read+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ec4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005ec6:	b29b      	uxth	r3, r3
 8005ec8:	2bff      	cmp	r3, #255	; 0xff
 8005eca:	4b36      	ldr	r3, [pc, #216]	; (8005fa4 <HAL_I2C_Mem_Read+0x174>)
 8005ecc:	d958      	bls.n	8005f80 <HAL_I2C_Mem_Read+0x150>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005ece:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005ed0:	9300      	str	r3, [sp, #0]
 8005ed2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005ed6:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005ed8:	4639      	mov	r1, r7
 8005eda:	4620      	mov	r0, r4
 8005edc:	f7ff fd04 	bl	80058e8 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005ee0:	464b      	mov	r3, r9
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	2104      	movs	r1, #4
 8005ee6:	4620      	mov	r0, r4
 8005ee8:	9600      	str	r6, [sp, #0]
 8005eea:	f7ff fdc5 	bl	8005a78 <I2C_WaitOnFlagUntilTimeout>
 8005eee:	2800      	cmp	r0, #0
 8005ef0:	d1b6      	bne.n	8005e60 <HAL_I2C_Mem_Read+0x30>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005ef2:	6823      	ldr	r3, [r4, #0]
 8005ef4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ef6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ef8:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8005efa:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8005efc:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8005efe:	3301      	adds	r3, #1
      hi2c->XferSize--;
 8005f00:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 8005f02:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8005f04:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8005f06:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8005f08:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8005f0a:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8005f0c:	b29b      	uxth	r3, r3
 8005f0e:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005f10:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005f12:	b29b      	uxth	r3, r3
 8005f14:	b1ab      	cbz	r3, 8005f42 <HAL_I2C_Mem_Read+0x112>
 8005f16:	b9a2      	cbnz	r2, 8005f42 <HAL_I2C_Mem_Read+0x112>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005f18:	464b      	mov	r3, r9
 8005f1a:	2180      	movs	r1, #128	; 0x80
 8005f1c:	4620      	mov	r0, r4
 8005f1e:	9600      	str	r6, [sp, #0]
 8005f20:	f7ff fdaa 	bl	8005a78 <I2C_WaitOnFlagUntilTimeout>
 8005f24:	2800      	cmp	r0, #0
 8005f26:	d19b      	bne.n	8005e60 <HAL_I2C_Mem_Read+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f28:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005f2a:	b29b      	uxth	r3, r3
 8005f2c:	2bff      	cmp	r3, #255	; 0xff
 8005f2e:	d92f      	bls.n	8005f90 <HAL_I2C_Mem_Read+0x160>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005f30:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005f32:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005f36:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005f38:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005f3a:	4639      	mov	r1, r7
 8005f3c:	4620      	mov	r0, r4
 8005f3e:	f7ff fcd3 	bl	80058e8 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8005f42:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005f44:	b29b      	uxth	r3, r3
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d1ca      	bne.n	8005ee0 <HAL_I2C_Mem_Read+0xb0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f4a:	4632      	mov	r2, r6
 8005f4c:	4649      	mov	r1, r9
 8005f4e:	4620      	mov	r0, r4
 8005f50:	f7ff fe28 	bl	8005ba4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005f54:	2800      	cmp	r0, #0
 8005f56:	d183      	bne.n	8005e60 <HAL_I2C_Mem_Read+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f58:	6823      	ldr	r3, [r4, #0]
 8005f5a:	2120      	movs	r1, #32
 8005f5c:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8005f5e:	685a      	ldr	r2, [r3, #4]
 8005f60:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8005f64:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8005f68:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8005f6c:	f022 0201 	bic.w	r2, r2, #1
 8005f70:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005f72:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8005f76:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005f7a:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8005f7e:	e770      	b.n	8005e62 <HAL_I2C_Mem_Read+0x32>
      hi2c->XferSize = hi2c->XferCount;
 8005f80:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005f82:	9300      	str	r3, [sp, #0]
 8005f84:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 8005f88:	b292      	uxth	r2, r2
 8005f8a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005f8c:	b2d2      	uxtb	r2, r2
 8005f8e:	e7a3      	b.n	8005ed8 <HAL_I2C_Mem_Read+0xa8>
          hi2c->XferSize = hi2c->XferCount;
 8005f90:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005f92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005f96:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8005f98:	b292      	uxth	r2, r2
 8005f9a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005f9c:	b2d2      	uxtb	r2, r2
 8005f9e:	e7cc      	b.n	8005f3a <HAL_I2C_Mem_Read+0x10a>
    return HAL_BUSY;
 8005fa0:	2002      	movs	r0, #2
 8005fa2:	e75e      	b.n	8005e62 <HAL_I2C_Mem_Read+0x32>
 8005fa4:	80002400 	.word	0x80002400

08005fa8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005fa8:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005faa:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005fae:	2b20      	cmp	r3, #32
 8005fb0:	b2dc      	uxtb	r4, r3
 8005fb2:	d11d      	bne.n	8005ff0 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005fb4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	d019      	beq.n	8005ff0 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005fbc:	2324      	movs	r3, #36	; 0x24
 8005fbe:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005fc2:	6803      	ldr	r3, [r0, #0]
 8005fc4:	681a      	ldr	r2, [r3, #0]
 8005fc6:	f022 0201 	bic.w	r2, r2, #1
 8005fca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005fcc:	681a      	ldr	r2, [r3, #0]
 8005fce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005fd2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005fd4:	681a      	ldr	r2, [r3, #0]
 8005fd6:	4311      	orrs	r1, r2
 8005fd8:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005fda:	681a      	ldr	r2, [r3, #0]
 8005fdc:	f042 0201 	orr.w	r2, r2, #1
 8005fe0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005fe2:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8005fe4:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8005fe8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8005fec:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8005fee:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8005ff0:	2002      	movs	r0, #2
 8005ff2:	e7fc      	b.n	8005fee <HAL_I2CEx_ConfigAnalogFilter+0x46>

08005ff4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005ff4:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ff6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005ffa:	2b20      	cmp	r3, #32
 8005ffc:	b2dc      	uxtb	r4, r3
 8005ffe:	d11c      	bne.n	800603a <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006000:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8006004:	2b01      	cmp	r3, #1
 8006006:	d018      	beq.n	800603a <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006008:	2324      	movs	r3, #36	; 0x24
 800600a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800600e:	6803      	ldr	r3, [r0, #0]
 8006010:	681a      	ldr	r2, [r3, #0]
 8006012:	f022 0201 	bic.w	r2, r2, #1
 8006016:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006018:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800601a:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800601e:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006022:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006024:	681a      	ldr	r2, [r3, #0]
 8006026:	f042 0201 	orr.w	r2, r2, #1
 800602a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800602c:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800602e:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8006032:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8006036:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8006038:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 800603a:	2002      	movs	r0, #2
 800603c:	e7fc      	b.n	8006038 <HAL_I2CEx_ConfigDigitalFilter+0x44>

0800603e <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800603e:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006040:	6800      	ldr	r0, [r0, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006042:	f8d1 c000 	ldr.w	ip, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006046:	3284      	adds	r2, #132	; 0x84
 8006048:	1883      	adds	r3, r0, r2
{
 800604a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800604e:	68c6      	ldr	r6, [r0, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006050:	f10c 0701 	add.w	r7, ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006054:	685d      	ldr	r5, [r3, #4]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8006056:	f04f 0e00 	mov.w	lr, #0
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800605a:	684c      	ldr	r4, [r1, #4]
 800605c:	f3c6 460b 	ubfx	r6, r6, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006060:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006064:	f8d1 9018 	ldr.w	r9, [r1, #24]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006068:	4426      	add	r6, r4
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800606a:	605d      	str	r5, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800606c:	68c5      	ldr	r5, [r0, #12]
 800606e:	f3c5 450b 	ubfx	r5, r5, #16, #12
 8006072:	443d      	add	r5, r7
 8006074:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006078:	68ce      	ldr	r6, [r1, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800607a:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800607c:	68c5      	ldr	r5, [r0, #12]
 800607e:	f3c5 050a 	ubfx	r5, r5, #0, #11
 8006082:	442e      	add	r6, r5
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006084:	689d      	ldr	r5, [r3, #8]
 8006086:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
 800608a:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800608c:	688d      	ldr	r5, [r1, #8]
 800608e:	68c7      	ldr	r7, [r0, #12]
 8006090:	3501      	adds	r5, #1
 8006092:	f3c7 070a 	ubfx	r7, r7, #0, #11
 8006096:	443d      	add	r5, r7
 8006098:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800609c:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800609e:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80060a0:	691d      	ldr	r5, [r3, #16]
 80060a2:	f025 0507 	bic.w	r5, r5, #7
 80060a6:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80060a8:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80060aa:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80060ac:	f891 7032 	ldrb.w	r7, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80060b0:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80060b4:	f8c3 e018 	str.w	lr, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80060b8:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 80060bc:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 80060c0:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 80060c4:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
 80060c8:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80060ca:	695d      	ldr	r5, [r3, #20]
 80060cc:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 80060d0:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80060d2:	694d      	ldr	r5, [r1, #20]
 80060d4:	615d      	str	r5, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80060d6:	69dd      	ldr	r5, [r3, #28]
 80060d8:	f425 65e0 	bic.w	r5, r5, #1792	; 0x700
 80060dc:	f025 0507 	bic.w	r5, r5, #7
 80060e0:	61dd      	str	r5, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80060e2:	e9d1 5707 	ldrd	r5, r7, [r1, #28]
 80060e6:	433d      	orrs	r5, r7
 80060e8:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80060ea:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80060ec:	6a4d      	ldr	r5, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80060ee:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80060f2:	629d      	str	r5, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80060f4:	b31e      	cbz	r6, 800613e <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80060f6:	2e01      	cmp	r6, #1
 80060f8:	d023      	beq.n	8006142 <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80060fa:	1eb5      	subs	r5, r6, #2
 80060fc:	2d02      	cmp	r5, #2
 80060fe:	d922      	bls.n	8006146 <LTDC_SetConfig+0x108>
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 8006100:	2e07      	cmp	r6, #7
 8006102:	bf0c      	ite	eq
 8006104:	2502      	moveq	r5, #2
 8006106:	2501      	movne	r5, #1
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006108:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800610a:	eba4 040c 	sub.w	r4, r4, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800610e:	f006 26e0 	and.w	r6, r6, #3758153728	; 0xe000e000
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006112:	436c      	muls	r4, r5
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006114:	62de      	str	r6, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006116:	3403      	adds	r4, #3
 8006118:	6a8e      	ldr	r6, [r1, #40]	; 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800611a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800611c:	436e      	muls	r6, r5
 800611e:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8006122:	62dc      	str	r4, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006124:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8006126:	f424 64ff 	bic.w	r4, r4, #2040	; 0x7f8
 800612a:	f024 0407 	bic.w	r4, r4, #7
 800612e:	631c      	str	r4, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006130:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006132:	5883      	ldr	r3, [r0, r2]
 8006134:	f043 0301 	orr.w	r3, r3, #1
 8006138:	5083      	str	r3, [r0, r2]
}
 800613a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 800613e:	2504      	movs	r5, #4
 8006140:	e7e2      	b.n	8006108 <LTDC_SetConfig+0xca>
    tmp = 3U;
 8006142:	2503      	movs	r5, #3
 8006144:	e7e0      	b.n	8006108 <LTDC_SetConfig+0xca>
    tmp = 2U;
 8006146:	2502      	movs	r5, #2
 8006148:	e7de      	b.n	8006108 <LTDC_SetConfig+0xca>
	...

0800614c <HAL_LTDC_Init>:
{
 800614c:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 800614e:	4604      	mov	r4, r0
 8006150:	2800      	cmp	r0, #0
 8006152:	d063      	beq.n	800621c <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8006154:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8006158:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800615c:	b91b      	cbnz	r3, 8006166 <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 800615e:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 8006162:	f7fb f9bd 	bl	80014e0 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006166:	2302      	movs	r3, #2
 8006168:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800616c:	6823      	ldr	r3, [r4, #0]
 800616e:	699a      	ldr	r2, [r3, #24]
 8006170:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8006174:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006176:	6999      	ldr	r1, [r3, #24]
 8006178:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 800617c:	4302      	orrs	r2, r0
 800617e:	68e0      	ldr	r0, [r4, #12]
 8006180:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006182:	6920      	ldr	r0, [r4, #16]
 8006184:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006186:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006188:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800618a:	4925      	ldr	r1, [pc, #148]	; (8006220 <HAL_LTDC_Init+0xd4>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800618c:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800618e:	689a      	ldr	r2, [r3, #8]
 8006190:	400a      	ands	r2, r1
 8006192:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006194:	689a      	ldr	r2, [r3, #8]
 8006196:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800619a:	69a0      	ldr	r0, [r4, #24]
 800619c:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800619e:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80061a0:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80061a2:	68da      	ldr	r2, [r3, #12]
 80061a4:	400a      	ands	r2, r1
 80061a6:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80061a8:	68da      	ldr	r2, [r3, #12]
 80061aa:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80061ae:	6a20      	ldr	r0, [r4, #32]
 80061b0:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80061b2:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80061b4:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80061b6:	691a      	ldr	r2, [r3, #16]
 80061b8:	400a      	ands	r2, r1
 80061ba:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80061bc:	691a      	ldr	r2, [r3, #16]
 80061be:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80061c2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80061c4:	4302      	orrs	r2, r0
 80061c6:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80061c8:	695a      	ldr	r2, [r3, #20]
 80061ca:	4011      	ands	r1, r2
 80061cc:	6159      	str	r1, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80061ce:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80061d0:	695a      	ldr	r2, [r3, #20]
 80061d2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80061d6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80061d8:	430a      	orrs	r2, r1
 80061da:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80061dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80061de:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80061e2:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80061e6:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80061ea:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80061ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80061ee:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 80061f2:	430a      	orrs	r2, r1
 80061f4:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 80061f8:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80061fc:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80061fe:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006200:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006202:	f042 0206 	orr.w	r2, r2, #6
 8006206:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8006208:	699a      	ldr	r2, [r3, #24]
 800620a:	f042 0201 	orr.w	r2, r2, #1
 800620e:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 8006210:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006212:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8006216:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 800621a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800621c:	2001      	movs	r0, #1
 800621e:	e7fc      	b.n	800621a <HAL_LTDC_Init+0xce>
 8006220:	f000f800 	.word	0xf000f800

08006224 <HAL_LTDC_ErrorCallback>:
 8006224:	4770      	bx	lr

08006226 <HAL_LTDC_ReloadEventCallback>:
 8006226:	4770      	bx	lr

08006228 <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8006228:	6803      	ldr	r3, [r0, #0]
{
 800622a:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800622c:	6b9e      	ldr	r6, [r3, #56]	; 0x38
{
 800622e:	4604      	mov	r4, r0
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8006230:	6b5d      	ldr	r5, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8006232:	0772      	lsls	r2, r6, #29
 8006234:	d514      	bpl.n	8006260 <HAL_LTDC_IRQHandler+0x38>
 8006236:	0769      	lsls	r1, r5, #29
 8006238:	d512      	bpl.n	8006260 <HAL_LTDC_IRQHandler+0x38>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800623a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800623c:	f022 0204 	bic.w	r2, r2, #4
 8006240:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8006242:	2204      	movs	r2, #4
 8006244:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8006246:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 800624a:	f043 0301 	orr.w	r3, r3, #1
 800624e:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
 8006252:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006254:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8006258:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 800625c:	f7ff ffe2 	bl	8006224 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8006260:	07b2      	lsls	r2, r6, #30
 8006262:	d516      	bpl.n	8006292 <HAL_LTDC_IRQHandler+0x6a>
 8006264:	07ab      	lsls	r3, r5, #30
 8006266:	d514      	bpl.n	8006292 <HAL_LTDC_IRQHandler+0x6a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8006268:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ErrorCallback(hltdc);
 800626a:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800626c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800626e:	f022 0202 	bic.w	r2, r2, #2
 8006272:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8006274:	2202      	movs	r2, #2
 8006276:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8006278:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 800627c:	4313      	orrs	r3, r2
 800627e:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006282:	2304      	movs	r3, #4
 8006284:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8006288:	2300      	movs	r3, #0
 800628a:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 800628e:	f7ff ffc9 	bl	8006224 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8006292:	07f0      	lsls	r0, r6, #31
 8006294:	d510      	bpl.n	80062b8 <HAL_LTDC_IRQHandler+0x90>
 8006296:	07e9      	lsls	r1, r5, #31
 8006298:	d50e      	bpl.n	80062b8 <HAL_LTDC_IRQHandler+0x90>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800629a:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_LineEventCallback(hltdc);
 800629c:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800629e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062a0:	f022 0201 	bic.w	r2, r2, #1
 80062a4:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80062a6:	2201      	movs	r2, #1
 80062a8:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_UNLOCK(hltdc);
 80062aa:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 80062ac:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 80062b0:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 80062b4:	f7fc ff1c 	bl	80030f0 <HAL_LTDC_LineEventCallback>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80062b8:	0732      	lsls	r2, r6, #28
 80062ba:	d511      	bpl.n	80062e0 <HAL_LTDC_IRQHandler+0xb8>
 80062bc:	072b      	lsls	r3, r5, #28
 80062be:	d50f      	bpl.n	80062e0 <HAL_LTDC_IRQHandler+0xb8>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80062c0:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ReloadEventCallback(hltdc);
 80062c2:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80062c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062c6:	f022 0208 	bic.w	r2, r2, #8
 80062ca:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80062cc:	2208      	movs	r2, #8
 80062ce:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 80062d0:	2301      	movs	r3, #1
 80062d2:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 80062d6:	2300      	movs	r3, #0
 80062d8:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 80062dc:	f7ff ffa3 	bl	8006226 <HAL_LTDC_ReloadEventCallback>
}
 80062e0:	bd70      	pop	{r4, r5, r6, pc}

080062e2 <HAL_LTDC_ConfigLayer>:
{
 80062e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 80062e6:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
{
 80062ea:	4606      	mov	r6, r0
 80062ec:	460f      	mov	r7, r1
 80062ee:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 80062f0:	2b01      	cmp	r3, #1
 80062f2:	f04f 0002 	mov.w	r0, #2
 80062f6:	d01f      	beq.n	8006338 <HAL_LTDC_ConfigLayer+0x56>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80062f8:	2434      	movs	r4, #52	; 0x34
  __HAL_LOCK(hltdc);
 80062fa:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80062fe:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006300:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006304:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 8006308:	f886 80a0 	strb.w	r8, [r6, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800630c:	3438      	adds	r4, #56	; 0x38
 800630e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006310:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006312:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006314:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006316:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006318:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800631a:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800631c:	4630      	mov	r0, r6
 800631e:	4662      	mov	r2, ip
 8006320:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006322:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006324:	f7ff fe8b 	bl	800603e <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006328:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 800632a:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800632c:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006330:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8006334:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 8006338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800633c <HAL_LTDC_ProgramLineEvent>:
  __HAL_LOCK(hltdc);
 800633c:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8006340:	2b01      	cmp	r3, #1
 8006342:	f04f 0302 	mov.w	r3, #2
 8006346:	d012      	beq.n	800636e <HAL_LTDC_ProgramLineEvent+0x32>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006348:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800634c:	6803      	ldr	r3, [r0, #0]
 800634e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006350:	f022 0201 	bic.w	r2, r2, #1
 8006354:	635a      	str	r2, [r3, #52]	; 0x34
  LTDC->LIPCR = (uint32_t)Line;
 8006356:	4a07      	ldr	r2, [pc, #28]	; (8006374 <HAL_LTDC_ProgramLineEvent+0x38>)
 8006358:	6411      	str	r1, [r2, #64]	; 0x40
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 800635a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800635c:	f042 0201 	orr.w	r2, r2, #1
 8006360:	635a      	str	r2, [r3, #52]	; 0x34
  hltdc->State = HAL_LTDC_STATE_READY;
 8006362:	2301      	movs	r3, #1
 8006364:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8006368:	2300      	movs	r3, #0
 800636a:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  __HAL_LOCK(hltdc);
 800636e:	4618      	mov	r0, r3
}
 8006370:	4770      	bx	lr
 8006372:	bf00      	nop
 8006374:	40016800 	.word	0x40016800

08006378 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8006378:	4b19      	ldr	r3, [pc, #100]	; (80063e0 <HAL_PWREx_EnableOverDrive+0x68>)
{
 800637a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 800637c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800637e:	4c19      	ldr	r4, [pc, #100]	; (80063e4 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8006380:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006384:	641a      	str	r2, [r3, #64]	; 0x40
 8006386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006388:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800638c:	9301      	str	r3, [sp, #4]
 800638e:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006390:	6823      	ldr	r3, [r4, #0]
 8006392:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006396:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006398:	f7fe fe9a 	bl	80050d0 <HAL_GetTick>
 800639c:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800639e:	6863      	ldr	r3, [r4, #4]
 80063a0:	03da      	lsls	r2, r3, #15
 80063a2:	d50c      	bpl.n	80063be <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80063a4:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80063a6:	4d0f      	ldr	r5, [pc, #60]	; (80063e4 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80063a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063ac:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80063ae:	f7fe fe8f 	bl	80050d0 <HAL_GetTick>
 80063b2:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80063b4:	686b      	ldr	r3, [r5, #4]
 80063b6:	039b      	lsls	r3, r3, #14
 80063b8:	d50a      	bpl.n	80063d0 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 80063ba:	2000      	movs	r0, #0
 80063bc:	e006      	b.n	80063cc <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80063be:	f7fe fe87 	bl	80050d0 <HAL_GetTick>
 80063c2:	1b40      	subs	r0, r0, r5
 80063c4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80063c8:	d9e9      	bls.n	800639e <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 80063ca:	2003      	movs	r0, #3
}
 80063cc:	b003      	add	sp, #12
 80063ce:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80063d0:	f7fe fe7e 	bl	80050d0 <HAL_GetTick>
 80063d4:	1b00      	subs	r0, r0, r4
 80063d6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80063da:	d9eb      	bls.n	80063b4 <HAL_PWREx_EnableOverDrive+0x3c>
 80063dc:	e7f5      	b.n	80063ca <HAL_PWREx_EnableOverDrive+0x52>
 80063de:	bf00      	nop
 80063e0:	40023800 	.word	0x40023800
 80063e4:	40007000 	.word	0x40007000

080063e8 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 80063e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 80063ec:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 80063ee:	b136      	cbz	r6, 80063fe <QSPI_Config+0x16>
 80063f0:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
 80063f4:	d003      	beq.n	80063fe <QSPI_Config+0x16>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 80063f6:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 80063f8:	6804      	ldr	r4, [r0, #0]
 80063fa:	3b01      	subs	r3, #1
 80063fc:	6123      	str	r3, [r4, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 80063fe:	f8d1 9018 	ldr.w	r9, [r1, #24]
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8006402:	e9d1 7507 	ldrd	r7, r5, [r1, #28]
  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8006406:	f1b9 0f00 	cmp.w	r9, #0
 800640a:	d04f      	beq.n	80064ac <QSPI_Config+0xc4>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800640c:	694b      	ldr	r3, [r1, #20]
 800640e:	ea46 0909 	orr.w	r9, r6, r9
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8006412:	6800      	ldr	r0, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006414:	f8d1 a000 	ldr.w	sl, [r1]
 8006418:	ea4f 4c83 	mov.w	ip, r3, lsl #18
 800641c:	f8d1 e034 	ldr.w	lr, [r1, #52]	; 0x34
 8006420:	ea49 0902 	orr.w	r9, r9, r2
 8006424:	e9d1 480b 	ldrd	r4, r8, [r1, #44]	; 0x2c
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8006428:	b335      	cbz	r5, 8006478 <QSPI_Config+0x90>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800642a:	688b      	ldr	r3, [r1, #8]
 800642c:	ea49 0505 	orr.w	r5, r9, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006430:	690e      	ldr	r6, [r1, #16]
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8006432:	61c3      	str	r3, [r0, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8006434:	b19f      	cbz	r7, 800645e <QSPI_Config+0x76>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006436:	ea4a 0307 	orr.w	r3, sl, r7
 800643a:	4323      	orrs	r3, r4
 800643c:	68cc      	ldr	r4, [r1, #12]
 800643e:	ea43 0308 	orr.w	r3, r3, r8
 8006442:	ea43 030e 	orr.w	r3, r3, lr
 8006446:	4333      	orrs	r3, r6
 8006448:	4323      	orrs	r3, r4
 800644a:	ea43 030c 	orr.w	r3, r3, ip
 800644e:	432b      	orrs	r3, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateByteMode | cmd->AddressSize |
                                         cmd->AddressMode | cmd->InstructionMode | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8006450:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006454:	6143      	str	r3, [r0, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8006456:	d00d      	beq.n	8006474 <QSPI_Config+0x8c>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8006458:	684b      	ldr	r3, [r1, #4]
 800645a:	6183      	str	r3, [r0, #24]
 800645c:	e00a      	b.n	8006474 <QSPI_Config+0x8c>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800645e:	ea4a 0304 	orr.w	r3, sl, r4
 8006462:	ea43 0308 	orr.w	r3, r3, r8
 8006466:	ea43 030e 	orr.w	r3, r3, lr
 800646a:	4333      	orrs	r3, r6
 800646c:	ea43 030c 	orr.w	r3, r3, ip
 8006470:	432b      	orrs	r3, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006472:	6143      	str	r3, [r0, #20]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8006474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8006478:	b16f      	cbz	r7, 8006496 <QSPI_Config+0xae>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800647a:	ea4a 0307 	orr.w	r3, sl, r7
 800647e:	4323      	orrs	r3, r4
 8006480:	68cc      	ldr	r4, [r1, #12]
 8006482:	ea43 0308 	orr.w	r3, r3, r8
 8006486:	ea43 030e 	orr.w	r3, r3, lr
 800648a:	4323      	orrs	r3, r4
 800648c:	ea43 030c 	orr.w	r3, r3, ip
 8006490:	ea43 0309 	orr.w	r3, r3, r9
 8006494:	e7dc      	b.n	8006450 <QSPI_Config+0x68>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006496:	ea4a 0304 	orr.w	r3, sl, r4
 800649a:	ea43 0308 	orr.w	r3, r3, r8
 800649e:	ea43 030e 	orr.w	r3, r3, lr
 80064a2:	ea43 030c 	orr.w	r3, r3, ip
 80064a6:	ea43 0309 	orr.w	r3, r3, r9
 80064aa:	e7e2      	b.n	8006472 <QSPI_Config+0x8a>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80064ac:	b365      	cbz	r5, 8006508 <QSPI_Config+0x120>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80064ae:	6804      	ldr	r4, [r0, #0]
 80064b0:	688b      	ldr	r3, [r1, #8]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80064b2:	6908      	ldr	r0, [r1, #16]
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80064b4:	61e3      	str	r3, [r4, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80064b6:	ea46 0305 	orr.w	r3, r6, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80064ba:	694e      	ldr	r6, [r1, #20]
 80064bc:	ea43 0502 	orr.w	r5, r3, r2
 80064c0:	f8d1 c034 	ldr.w	ip, [r1, #52]	; 0x34
 80064c4:	04b6      	lsls	r6, r6, #18
 80064c6:	e9d1 830b 	ldrd	r8, r3, [r1, #44]	; 0x2c
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80064ca:	b1a7      	cbz	r7, 80064f6 <QSPI_Config+0x10e>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80064cc:	4338      	orrs	r0, r7
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80064ce:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80064d2:	ea40 0008 	orr.w	r0, r0, r8
 80064d6:	ea43 0300 	orr.w	r3, r3, r0
 80064da:	68c8      	ldr	r0, [r1, #12]
 80064dc:	ea43 030c 	orr.w	r3, r3, ip
 80064e0:	ea43 0300 	orr.w	r3, r3, r0
 80064e4:	ea43 0306 	orr.w	r3, r3, r6
 80064e8:	ea43 0305 	orr.w	r3, r3, r5
 80064ec:	6163      	str	r3, [r4, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80064ee:	d0c1      	beq.n	8006474 <QSPI_Config+0x8c>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80064f0:	684b      	ldr	r3, [r1, #4]
 80064f2:	61a3      	str	r3, [r4, #24]
 80064f4:	e7be      	b.n	8006474 <QSPI_Config+0x8c>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80064f6:	ea40 0008 	orr.w	r0, r0, r8
 80064fa:	4303      	orrs	r3, r0
 80064fc:	ea43 030c 	orr.w	r3, r3, ip
 8006500:	4333      	orrs	r3, r6
 8006502:	432b      	orrs	r3, r5
 8006504:	6163      	str	r3, [r4, #20]
 8006506:	e7b5      	b.n	8006474 <QSPI_Config+0x8c>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8006508:	b17f      	cbz	r7, 800652a <QSPI_Config+0x142>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800650a:	ea46 0307 	orr.w	r3, r6, r7
 800650e:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8006510:	6800      	ldr	r0, [r0, #0]
 8006512:	4313      	orrs	r3, r2
 8006514:	4323      	orrs	r3, r4
 8006516:	6b0c      	ldr	r4, [r1, #48]	; 0x30
 8006518:	4323      	orrs	r3, r4
 800651a:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 800651c:	4323      	orrs	r3, r4
 800651e:	68cc      	ldr	r4, [r1, #12]
 8006520:	4323      	orrs	r3, r4
 8006522:	694c      	ldr	r4, [r1, #20]
 8006524:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 8006528:	e792      	b.n	8006450 <QSPI_Config+0x68>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800652a:	2e00      	cmp	r6, #0
 800652c:	d0a2      	beq.n	8006474 <QSPI_Config+0x8c>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800652e:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8006530:	6800      	ldr	r0, [r0, #0]
 8006532:	4333      	orrs	r3, r6
 8006534:	6b0e      	ldr	r6, [r1, #48]	; 0x30
 8006536:	431a      	orrs	r2, r3
 8006538:	694b      	ldr	r3, [r1, #20]
 800653a:	4332      	orrs	r2, r6
 800653c:	6b4e      	ldr	r6, [r1, #52]	; 0x34
 800653e:	4332      	orrs	r2, r6
 8006540:	ea42 4283 	orr.w	r2, r2, r3, lsl #18
 8006544:	6142      	str	r2, [r0, #20]
}
 8006546:	e795      	b.n	8006474 <QSPI_Config+0x8c>

08006548 <QSPI_WaitFlagStateUntilTimeout>:
{
 8006548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800654c:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8006550:	4604      	mov	r4, r0
 8006552:	460e      	mov	r6, r1
 8006554:	4615      	mov	r5, r2
 8006556:	461f      	mov	r7, r3
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006558:	6822      	ldr	r2, [r4, #0]
 800655a:	6893      	ldr	r3, [r2, #8]
 800655c:	4233      	tst	r3, r6
 800655e:	bf14      	ite	ne
 8006560:	2301      	movne	r3, #1
 8006562:	2300      	moveq	r3, #0
 8006564:	42ab      	cmp	r3, r5
 8006566:	d101      	bne.n	800656c <QSPI_WaitFlagStateUntilTimeout+0x24>
  return HAL_OK;
 8006568:	2000      	movs	r0, #0
 800656a:	e012      	b.n	8006592 <QSPI_WaitFlagStateUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 800656c:	f1b8 3fff 	cmp.w	r8, #4294967295
 8006570:	d0f3      	beq.n	800655a <QSPI_WaitFlagStateUntilTimeout+0x12>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006572:	f7fe fdad 	bl	80050d0 <HAL_GetTick>
 8006576:	1bc0      	subs	r0, r0, r7
 8006578:	4540      	cmp	r0, r8
 800657a:	d802      	bhi.n	8006582 <QSPI_WaitFlagStateUntilTimeout+0x3a>
 800657c:	f1b8 0f00 	cmp.w	r8, #0
 8006580:	d1ea      	bne.n	8006558 <QSPI_WaitFlagStateUntilTimeout+0x10>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8006582:	2304      	movs	r3, #4
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8006584:	2001      	movs	r0, #1
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8006586:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800658a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800658c:	f043 0301 	orr.w	r3, r3, #1
 8006590:	6463      	str	r3, [r4, #68]	; 0x44
}
 8006592:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08006598 <HAL_QSPI_Init>:
{
 8006598:	b530      	push	{r4, r5, lr}
 800659a:	4604      	mov	r4, r0
 800659c:	b085      	sub	sp, #20
  uint32_t tickstart = HAL_GetTick();
 800659e:	f7fe fd97 	bl	80050d0 <HAL_GetTick>
 80065a2:	4603      	mov	r3, r0
  if(hqspi == NULL)
 80065a4:	2c00      	cmp	r4, #0
 80065a6:	d047      	beq.n	8006638 <HAL_QSPI_Init+0xa0>
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80065a8:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 80065ac:	f002 01ff 	and.w	r1, r2, #255	; 0xff
 80065b0:	b94a      	cbnz	r2, 80065c6 <HAL_QSPI_Init+0x2e>
 80065b2:	9003      	str	r0, [sp, #12]
    HAL_QSPI_MspInit(hqspi);
 80065b4:	4620      	mov	r0, r4
    hqspi->Lock = HAL_UNLOCKED;
 80065b6:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    HAL_QSPI_MspInit(hqspi);
 80065ba:	f7fb f83f 	bl	800163c <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 80065be:	f241 3288 	movw	r2, #5000	; 0x1388
 80065c2:	9b03      	ldr	r3, [sp, #12]
 80065c4:	64a2      	str	r2, [r4, #72]	; 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80065c6:	6820      	ldr	r0, [r4, #0]
 80065c8:	68a1      	ldr	r1, [r4, #8]
 80065ca:	6802      	ldr	r2, [r0, #0]
 80065cc:	3901      	subs	r1, #1
 80065ce:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 80065d2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80065d6:	2120      	movs	r1, #32
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80065d8:	6002      	str	r2, [r0, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80065da:	4620      	mov	r0, r4
 80065dc:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80065de:	9200      	str	r2, [sp, #0]
 80065e0:	2200      	movs	r2, #0
 80065e2:	f7ff ffb1 	bl	8006548 <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 80065e6:	bb10      	cbnz	r0, 800662e <HAL_QSPI_Init+0x96>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 80065e8:	6822      	ldr	r2, [r4, #0]
 80065ea:	69e5      	ldr	r5, [r4, #28]
 80065ec:	68e3      	ldr	r3, [r4, #12]
 80065ee:	6811      	ldr	r1, [r2, #0]
 80065f0:	432b      	orrs	r3, r5
 80065f2:	6a25      	ldr	r5, [r4, #32]
 80065f4:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80065f8:	432b      	orrs	r3, r5
 80065fa:	6865      	ldr	r5, [r4, #4]
 80065fc:	f021 01d0 	bic.w	r1, r1, #208	; 0xd0
 8006600:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8006604:	430b      	orrs	r3, r1
 8006606:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8006608:	6855      	ldr	r5, [r2, #4]
 800660a:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 800660e:	430b      	orrs	r3, r1
 8006610:	6921      	ldr	r1, [r4, #16]
 8006612:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8006616:	4909      	ldr	r1, [pc, #36]	; (800663c <HAL_QSPI_Init+0xa4>)
 8006618:	4029      	ands	r1, r5
 800661a:	430b      	orrs	r3, r1
 800661c:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 800661e:	6813      	ldr	r3, [r2, #0]
 8006620:	f043 0301 	orr.w	r3, r3, #1
 8006624:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 8006626:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006628:	6460      	str	r0, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 800662a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 800662e:	2300      	movs	r3, #0
 8006630:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8006634:	b005      	add	sp, #20
 8006636:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8006638:	2001      	movs	r0, #1
 800663a:	e7fb      	b.n	8006634 <HAL_QSPI_Init+0x9c>
 800663c:	ffe0f8fe 	.word	0xffe0f8fe

08006640 <HAL_QSPI_DeInit>:
{
 8006640:	b510      	push	{r4, lr}
  if(hqspi == NULL)
 8006642:	4604      	mov	r4, r0
 8006644:	b168      	cbz	r0, 8006662 <HAL_QSPI_DeInit+0x22>
  __HAL_QSPI_DISABLE(hqspi);
 8006646:	6802      	ldr	r2, [r0, #0]
 8006648:	6813      	ldr	r3, [r2, #0]
 800664a:	f023 0301 	bic.w	r3, r3, #1
 800664e:	6013      	str	r3, [r2, #0]
  HAL_QSPI_MspDeInit(hqspi);
 8006650:	f7fb f862 	bl	8001718 <HAL_QSPI_MspDeInit>
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006654:	2000      	movs	r0, #0
 8006656:	6460      	str	r0, [r4, #68]	; 0x44
  hqspi->State = HAL_QSPI_STATE_RESET;
 8006658:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 800665c:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 8006660:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8006662:	2001      	movs	r0, #1
 8006664:	e7fc      	b.n	8006660 <HAL_QSPI_DeInit+0x20>

08006666 <HAL_QSPI_Command>:
{
 8006666:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800666a:	4604      	mov	r4, r0
 800666c:	b085      	sub	sp, #20
 800666e:	4617      	mov	r7, r2
 8006670:	4689      	mov	r9, r1
  uint32_t tickstart = HAL_GetTick();
 8006672:	f7fe fd2d 	bl	80050d0 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8006676:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 800667a:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 800667c:	2a01      	cmp	r2, #1
 800667e:	d033      	beq.n	80066e8 <HAL_QSPI_Command+0x82>
 8006680:	2201      	movs	r2, #1
 8006682:	2602      	movs	r6, #2
 8006684:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8006688:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800668c:	2a01      	cmp	r2, #1
 800668e:	fa5f f882 	uxtb.w	r8, r2
 8006692:	d127      	bne.n	80066e4 <HAL_QSPI_Command+0x7e>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006694:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8006696:	9003      	str	r0, [sp, #12]
 8006698:	2120      	movs	r1, #32
 800669a:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800669c:	6462      	str	r2, [r4, #68]	; 0x44
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800669e:	9700      	str	r7, [sp, #0]
    hqspi->State = HAL_QSPI_STATE_BUSY;
 80066a0:	f884 6041 	strb.w	r6, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80066a4:	f7ff ff50 	bl	8006548 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 80066a8:	4605      	mov	r5, r0
 80066aa:	b9a0      	cbnz	r0, 80066d6 <HAL_QSPI_Command+0x70>
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80066ac:	4602      	mov	r2, r0
 80066ae:	4649      	mov	r1, r9
 80066b0:	4620      	mov	r0, r4
 80066b2:	f7ff fe99 	bl	80063e8 <QSPI_Config>
      if (cmd->DataMode == QSPI_DATA_NONE)
 80066b6:	f8d9 2024 	ldr.w	r2, [r9, #36]	; 0x24
 80066ba:	9b03      	ldr	r3, [sp, #12]
 80066bc:	b94a      	cbnz	r2, 80066d2 <HAL_QSPI_Command+0x6c>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80066be:	4642      	mov	r2, r8
 80066c0:	4631      	mov	r1, r6
 80066c2:	4620      	mov	r0, r4
 80066c4:	9700      	str	r7, [sp, #0]
 80066c6:	f7ff ff3f 	bl	8006548 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 80066ca:	4605      	mov	r5, r0
 80066cc:	b918      	cbnz	r0, 80066d6 <HAL_QSPI_Command+0x70>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80066ce:	6823      	ldr	r3, [r4, #0]
 80066d0:	60de      	str	r6, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 80066d2:	f884 8041 	strb.w	r8, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 80066d6:	2300      	movs	r3, #0
 80066d8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 80066dc:	4628      	mov	r0, r5
 80066de:	b005      	add	sp, #20
 80066e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    status = HAL_BUSY;
 80066e4:	4635      	mov	r5, r6
 80066e6:	e7f6      	b.n	80066d6 <HAL_QSPI_Command+0x70>
  __HAL_LOCK(hqspi);
 80066e8:	2502      	movs	r5, #2
 80066ea:	e7f7      	b.n	80066dc <HAL_QSPI_Command+0x76>

080066ec <HAL_QSPI_AutoPolling>:
{
 80066ec:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80066f0:	4604      	mov	r4, r0
 80066f2:	4615      	mov	r5, r2
 80066f4:	461e      	mov	r6, r3
 80066f6:	4688      	mov	r8, r1
  uint32_t tickstart = HAL_GetTick();
 80066f8:	f7fe fcea 	bl	80050d0 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 80066fc:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8006700:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 8006702:	2a01      	cmp	r2, #1
 8006704:	d040      	beq.n	8006788 <HAL_QSPI_AutoPolling+0x9c>
 8006706:	2201      	movs	r2, #1
 8006708:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800670c:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8006710:	2a01      	cmp	r2, #1
 8006712:	b2d7      	uxtb	r7, r2
 8006714:	d136      	bne.n	8006784 <HAL_QSPI_AutoPolling+0x98>
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8006716:	2142      	movs	r1, #66	; 0x42
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006718:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800671a:	9003      	str	r0, [sp, #12]
 800671c:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800671e:	6462      	str	r2, [r4, #68]	; 0x44
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8006720:	9600      	str	r6, [sp, #0]
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8006722:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8006726:	2120      	movs	r1, #32
 8006728:	f7ff ff0e 	bl	8006548 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800672c:	bb20      	cbnz	r0, 8006778 <HAL_QSPI_AutoPolling+0x8c>
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800672e:	6821      	ldr	r1, [r4, #0]
 8006730:	682a      	ldr	r2, [r5, #0]
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8006732:	6928      	ldr	r0, [r5, #16]
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8006734:	628a      	str	r2, [r1, #40]	; 0x28
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8006736:	686a      	ldr	r2, [r5, #4]
 8006738:	624a      	str	r2, [r1, #36]	; 0x24
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800673a:	68aa      	ldr	r2, [r5, #8]
 800673c:	62ca      	str	r2, [r1, #44]	; 0x2c
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800673e:	680a      	ldr	r2, [r1, #0]
 8006740:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8006744:	4302      	orrs	r2, r0
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8006746:	4620      	mov	r0, r4
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8006748:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800674c:	600a      	str	r2, [r1, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800674e:	4641      	mov	r1, r8
      cmd->NbData = cfg->StatusBytesSize;
 8006750:	68ea      	ldr	r2, [r5, #12]
 8006752:	f8c8 2028 	str.w	r2, [r8, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8006756:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800675a:	f7ff fe45 	bl	80063e8 <QSPI_Config>
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800675e:	9b03      	ldr	r3, [sp, #12]
 8006760:	463a      	mov	r2, r7
 8006762:	2108      	movs	r1, #8
 8006764:	4620      	mov	r0, r4
 8006766:	9600      	str	r6, [sp, #0]
 8006768:	f7ff feee 	bl	8006548 <QSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 800676c:	b920      	cbnz	r0, 8006778 <HAL_QSPI_AutoPolling+0x8c>
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 800676e:	6823      	ldr	r3, [r4, #0]
 8006770:	2208      	movs	r2, #8
 8006772:	60da      	str	r2, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 8006774:	f884 7041 	strb.w	r7, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8006778:	2300      	movs	r3, #0
 800677a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800677e:	b004      	add	sp, #16
 8006780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    status = HAL_BUSY;
 8006784:	2002      	movs	r0, #2
 8006786:	e7f7      	b.n	8006778 <HAL_QSPI_AutoPolling+0x8c>
  __HAL_LOCK(hqspi);
 8006788:	2002      	movs	r0, #2
 800678a:	e7f8      	b.n	800677e <HAL_QSPI_AutoPolling+0x92>

0800678c <HAL_QSPI_MemoryMapped>:
{
 800678c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800678e:	4604      	mov	r4, r0
 8006790:	4616      	mov	r6, r2
 8006792:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 8006794:	f7fe fc9c 	bl	80050d0 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8006798:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 800679c:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 800679e:	2a01      	cmp	r2, #1
 80067a0:	d033      	beq.n	800680a <HAL_QSPI_MemoryMapped+0x7e>
 80067a2:	2201      	movs	r2, #1
 80067a4:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 80067a8:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 80067ac:	2a01      	cmp	r2, #1
 80067ae:	d12a      	bne.n	8006806 <HAL_QSPI_MemoryMapped+0x7a>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80067b0:	2200      	movs	r2, #0
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 80067b2:	2182      	movs	r1, #130	; 0x82
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80067b4:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80067b6:	6462      	str	r2, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 80067b8:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80067bc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80067be:	9100      	str	r1, [sp, #0]
 80067c0:	2120      	movs	r1, #32
 80067c2:	f7ff fec1 	bl	8006548 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 80067c6:	4605      	mov	r5, r0
 80067c8:	b9b8      	cbnz	r0, 80067fa <HAL_QSPI_MemoryMapped+0x6e>
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 80067ca:	6823      	ldr	r3, [r4, #0]
 80067cc:	6872      	ldr	r2, [r6, #4]
 80067ce:	6818      	ldr	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 80067d0:	2a08      	cmp	r2, #8
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 80067d2:	f020 0008 	bic.w	r0, r0, #8
 80067d6:	ea40 0002 	orr.w	r0, r0, r2
 80067da:	6018      	str	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 80067dc:	d107      	bne.n	80067ee <HAL_QSPI_MemoryMapped+0x62>
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 80067de:	6832      	ldr	r2, [r6, #0]
 80067e0:	631a      	str	r2, [r3, #48]	; 0x30
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 80067e2:	2210      	movs	r2, #16
 80067e4:	60da      	str	r2, [r3, #12]
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 80067e6:	681a      	ldr	r2, [r3, #0]
 80067e8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80067ec:	601a      	str	r2, [r3, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 80067ee:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80067f2:	4639      	mov	r1, r7
 80067f4:	4620      	mov	r0, r4
 80067f6:	f7ff fdf7 	bl	80063e8 <QSPI_Config>
  __HAL_UNLOCK(hqspi);
 80067fa:	2300      	movs	r3, #0
 80067fc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8006800:	4628      	mov	r0, r5
 8006802:	b003      	add	sp, #12
 8006804:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_BUSY;
 8006806:	2502      	movs	r5, #2
 8006808:	e7f7      	b.n	80067fa <HAL_QSPI_MemoryMapped+0x6e>
  __HAL_LOCK(hqspi);
 800680a:	2502      	movs	r5, #2
 800680c:	e7f8      	b.n	8006800 <HAL_QSPI_MemoryMapped+0x74>

0800680e <HAL_QSPI_Abort>:
{
 800680e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006810:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8006812:	f7fe fc5d 	bl	80050d0 <HAL_GetTick>
 8006816:	4603      	mov	r3, r0
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 8006818:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800681c:	f012 0002 	ands.w	r0, r2, #2
 8006820:	d036      	beq.n	8006890 <HAL_QSPI_Abort+0x82>
    __HAL_UNLOCK(hqspi);
 8006822:	2200      	movs	r2, #0
 8006824:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8006828:	6822      	ldr	r2, [r4, #0]
 800682a:	6811      	ldr	r1, [r2, #0]
 800682c:	0749      	lsls	r1, r1, #29
 800682e:	d50d      	bpl.n	800684c <HAL_QSPI_Abort+0x3e>
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8006830:	6811      	ldr	r1, [r2, #0]
      status = HAL_DMA_Abort(hqspi->hdma);
 8006832:	6be0      	ldr	r0, [r4, #60]	; 0x3c
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8006834:	f021 0104 	bic.w	r1, r1, #4
 8006838:	9303      	str	r3, [sp, #12]
 800683a:	6011      	str	r1, [r2, #0]
      status = HAL_DMA_Abort(hqspi->hdma);
 800683c:	f7fe fd6e 	bl	800531c <HAL_DMA_Abort>
      if(status != HAL_OK)
 8006840:	9b03      	ldr	r3, [sp, #12]
 8006842:	b118      	cbz	r0, 800684c <HAL_QSPI_Abort+0x3e>
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 8006844:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8006846:	f042 0204 	orr.w	r2, r2, #4
 800684a:	6462      	str	r2, [r4, #68]	; 0x44
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 800684c:	6821      	ldr	r1, [r4, #0]
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 800684e:	4620      	mov	r0, r4
 8006850:	9303      	str	r3, [sp, #12]
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8006852:	680a      	ldr	r2, [r1, #0]
 8006854:	f042 0202 	orr.w	r2, r2, #2
 8006858:	600a      	str	r2, [r1, #0]
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 800685a:	2102      	movs	r1, #2
 800685c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800685e:	9200      	str	r2, [sp, #0]
 8006860:	2201      	movs	r2, #1
 8006862:	f7ff fe71 	bl	8006548 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8006866:	9b03      	ldr	r3, [sp, #12]
 8006868:	b990      	cbnz	r0, 8006890 <HAL_QSPI_Abort+0x82>
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800686a:	6822      	ldr	r2, [r4, #0]
 800686c:	2102      	movs	r1, #2
 800686e:	60d1      	str	r1, [r2, #12]
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8006870:	2120      	movs	r1, #32
 8006872:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8006874:	9200      	str	r2, [sp, #0]
 8006876:	4602      	mov	r2, r0
 8006878:	4620      	mov	r0, r4
 800687a:	f7ff fe65 	bl	8006548 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800687e:	b938      	cbnz	r0, 8006890 <HAL_QSPI_Abort+0x82>
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8006880:	6822      	ldr	r2, [r4, #0]
 8006882:	6953      	ldr	r3, [r2, #20]
 8006884:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8006888:	6153      	str	r3, [r2, #20]
      hqspi->State = HAL_QSPI_STATE_READY;
 800688a:	2301      	movs	r3, #1
 800688c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
}
 8006890:	b004      	add	sp, #16
 8006892:	bd10      	pop	{r4, pc}

08006894 <HAL_QSPI_Transmit>:
{
 8006894:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006896:	4604      	mov	r4, r0
 8006898:	b085      	sub	sp, #20
 800689a:	4616      	mov	r6, r2
 800689c:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 800689e:	f7fe fc17 	bl	80050d0 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 80068a2:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 80068a6:	4603      	mov	r3, r0
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 80068a8:	6825      	ldr	r5, [r4, #0]
  __HAL_LOCK(hqspi);
 80068aa:	2a01      	cmp	r2, #1
 80068ac:	d04c      	beq.n	8006948 <HAL_QSPI_Transmit+0xb4>
 80068ae:	2201      	movs	r2, #1
 80068b0:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 80068b4:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 80068b8:	2a01      	cmp	r2, #1
 80068ba:	b2d0      	uxtb	r0, r2
 80068bc:	d142      	bne.n	8006944 <HAL_QSPI_Transmit+0xb0>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80068be:	2200      	movs	r2, #0
 80068c0:	6462      	str	r2, [r4, #68]	; 0x44
    if(pData != NULL )
 80068c2:	2f00      	cmp	r7, #0
 80068c4:	d039      	beq.n	800693a <HAL_QSPI_Transmit+0xa6>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 80068c6:	2212      	movs	r2, #18
 80068c8:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 80068cc:	692a      	ldr	r2, [r5, #16]
 80068ce:	3201      	adds	r2, #1
 80068d0:	62e2      	str	r2, [r4, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80068d2:	692a      	ldr	r2, [r5, #16]
      hqspi->pTxBuffPtr = pData;
 80068d4:	6267      	str	r7, [r4, #36]	; 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80068d6:	3201      	adds	r2, #1
 80068d8:	62a2      	str	r2, [r4, #40]	; 0x28
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80068da:	696a      	ldr	r2, [r5, #20]
 80068dc:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80068e0:	616a      	str	r2, [r5, #20]
      while(hqspi->TxXferCount > 0U)
 80068e2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80068e4:	b9a2      	cbnz	r2, 8006910 <HAL_QSPI_Transmit+0x7c>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80068e6:	2201      	movs	r2, #1
 80068e8:	2102      	movs	r1, #2
 80068ea:	4620      	mov	r0, r4
 80068ec:	9600      	str	r6, [sp, #0]
 80068ee:	f7ff fe2b 	bl	8006548 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 80068f2:	b928      	cbnz	r0, 8006900 <HAL_QSPI_Transmit+0x6c>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80068f4:	6823      	ldr	r3, [r4, #0]
 80068f6:	2202      	movs	r2, #2
          status = HAL_QSPI_Abort(hqspi);
 80068f8:	4620      	mov	r0, r4
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80068fa:	60da      	str	r2, [r3, #12]
          status = HAL_QSPI_Abort(hqspi);
 80068fc:	f7ff ff87 	bl	800680e <HAL_QSPI_Abort>
      hqspi->State = HAL_QSPI_STATE_READY;
 8006900:	2301      	movs	r3, #1
 8006902:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8006906:	2300      	movs	r3, #0
 8006908:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800690c:	b005      	add	sp, #20
 800690e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8006910:	2201      	movs	r2, #1
 8006912:	2104      	movs	r1, #4
 8006914:	4620      	mov	r0, r4
 8006916:	9600      	str	r6, [sp, #0]
 8006918:	9303      	str	r3, [sp, #12]
 800691a:	f7ff fe15 	bl	8006548 <QSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 800691e:	2800      	cmp	r0, #0
 8006920:	d1ee      	bne.n	8006900 <HAL_QSPI_Transmit+0x6c>
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8006922:	6a62      	ldr	r2, [r4, #36]	; 0x24
        hqspi->TxXferCount--;
 8006924:	9b03      	ldr	r3, [sp, #12]
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8006926:	7812      	ldrb	r2, [r2, #0]
 8006928:	f885 2020 	strb.w	r2, [r5, #32]
        hqspi->pTxBuffPtr++;
 800692c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800692e:	3201      	adds	r2, #1
 8006930:	6262      	str	r2, [r4, #36]	; 0x24
        hqspi->TxXferCount--;
 8006932:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006934:	3a01      	subs	r2, #1
 8006936:	62e2      	str	r2, [r4, #44]	; 0x2c
 8006938:	e7d3      	b.n	80068e2 <HAL_QSPI_Transmit+0x4e>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800693a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800693c:	f043 0308 	orr.w	r3, r3, #8
 8006940:	6463      	str	r3, [r4, #68]	; 0x44
      status = HAL_ERROR;
 8006942:	e7e0      	b.n	8006906 <HAL_QSPI_Transmit+0x72>
    status = HAL_BUSY;
 8006944:	2002      	movs	r0, #2
 8006946:	e7de      	b.n	8006906 <HAL_QSPI_Transmit+0x72>
  __HAL_LOCK(hqspi);
 8006948:	2002      	movs	r0, #2
 800694a:	e7df      	b.n	800690c <HAL_QSPI_Transmit+0x78>

0800694c <HAL_QSPI_Receive>:
{
 800694c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800694e:	4604      	mov	r4, r0
 8006950:	b085      	sub	sp, #20
 8006952:	4616      	mov	r6, r2
 8006954:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 8006956:	f7fe fbbb 	bl	80050d0 <HAL_GetTick>
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800695a:	6825      	ldr	r5, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
 800695c:	4603      	mov	r3, r0
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800695e:	f8d5 c018 	ldr.w	ip, [r5, #24]
  __HAL_LOCK(hqspi);
 8006962:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 8006966:	2a01      	cmp	r2, #1
 8006968:	d050      	beq.n	8006a0c <HAL_QSPI_Receive+0xc0>
 800696a:	2201      	movs	r2, #1
 800696c:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8006970:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8006974:	2a01      	cmp	r2, #1
 8006976:	b2d0      	uxtb	r0, r2
 8006978:	d146      	bne.n	8006a08 <HAL_QSPI_Receive+0xbc>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800697a:	2200      	movs	r2, #0
 800697c:	6462      	str	r2, [r4, #68]	; 0x44
    if(pData != NULL )
 800697e:	2f00      	cmp	r7, #0
 8006980:	d03d      	beq.n	80069fe <HAL_QSPI_Receive+0xb2>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8006982:	2222      	movs	r2, #34	; 0x22
 8006984:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8006988:	692a      	ldr	r2, [r5, #16]
 800698a:	3201      	adds	r2, #1
 800698c:	63a2      	str	r2, [r4, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800698e:	692a      	ldr	r2, [r5, #16]
      hqspi->pRxBuffPtr = pData;
 8006990:	6327      	str	r7, [r4, #48]	; 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8006992:	3201      	adds	r2, #1
 8006994:	6362      	str	r2, [r4, #52]	; 0x34
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8006996:	6969      	ldr	r1, [r5, #20]
 8006998:	f021 6140 	bic.w	r1, r1, #201326592	; 0xc000000
 800699c:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 80069a0:	6169      	str	r1, [r5, #20]
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 80069a2:	f8c5 c018 	str.w	ip, [r5, #24]
      while(hqspi->RxXferCount > 0U)
 80069a6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80069a8:	b9a2      	cbnz	r2, 80069d4 <HAL_QSPI_Receive+0x88>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80069aa:	2201      	movs	r2, #1
 80069ac:	2102      	movs	r1, #2
 80069ae:	4620      	mov	r0, r4
 80069b0:	9600      	str	r6, [sp, #0]
 80069b2:	f7ff fdc9 	bl	8006548 <QSPI_WaitFlagStateUntilTimeout>
        if  (status == HAL_OK)
 80069b6:	b928      	cbnz	r0, 80069c4 <HAL_QSPI_Receive+0x78>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80069b8:	6823      	ldr	r3, [r4, #0]
 80069ba:	2202      	movs	r2, #2
          status = HAL_QSPI_Abort(hqspi);
 80069bc:	4620      	mov	r0, r4
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80069be:	60da      	str	r2, [r3, #12]
          status = HAL_QSPI_Abort(hqspi);
 80069c0:	f7ff ff25 	bl	800680e <HAL_QSPI_Abort>
      hqspi->State = HAL_QSPI_STATE_READY;
 80069c4:	2301      	movs	r3, #1
 80069c6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 80069ca:	2300      	movs	r3, #0
 80069cc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 80069d0:	b005      	add	sp, #20
 80069d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 80069d4:	2201      	movs	r2, #1
 80069d6:	2106      	movs	r1, #6
 80069d8:	4620      	mov	r0, r4
 80069da:	9600      	str	r6, [sp, #0]
 80069dc:	9303      	str	r3, [sp, #12]
 80069de:	f7ff fdb3 	bl	8006548 <QSPI_WaitFlagStateUntilTimeout>
        if  (status != HAL_OK)
 80069e2:	2800      	cmp	r0, #0
 80069e4:	d1ee      	bne.n	80069c4 <HAL_QSPI_Receive+0x78>
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 80069e6:	f895 1020 	ldrb.w	r1, [r5, #32]
 80069ea:	6b22      	ldr	r2, [r4, #48]	; 0x30
        hqspi->RxXferCount--;
 80069ec:	9b03      	ldr	r3, [sp, #12]
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 80069ee:	7011      	strb	r1, [r2, #0]
        hqspi->pRxBuffPtr++;
 80069f0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80069f2:	3201      	adds	r2, #1
 80069f4:	6322      	str	r2, [r4, #48]	; 0x30
        hqspi->RxXferCount--;
 80069f6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80069f8:	3a01      	subs	r2, #1
 80069fa:	63a2      	str	r2, [r4, #56]	; 0x38
 80069fc:	e7d3      	b.n	80069a6 <HAL_QSPI_Receive+0x5a>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80069fe:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006a00:	f043 0308 	orr.w	r3, r3, #8
 8006a04:	6463      	str	r3, [r4, #68]	; 0x44
      status = HAL_ERROR;
 8006a06:	e7e0      	b.n	80069ca <HAL_QSPI_Receive+0x7e>
    status = HAL_BUSY;
 8006a08:	2002      	movs	r0, #2
 8006a0a:	e7de      	b.n	80069ca <HAL_QSPI_Receive+0x7e>
  __HAL_LOCK(hqspi);
 8006a0c:	2002      	movs	r0, #2
 8006a0e:	e7df      	b.n	80069d0 <HAL_QSPI_Receive+0x84>

08006a10 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006a10:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006a14:	4604      	mov	r4, r0
 8006a16:	b340      	cbz	r0, 8006a6a <HAL_RCC_OscConfig+0x5a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a18:	6803      	ldr	r3, [r0, #0]
 8006a1a:	07db      	lsls	r3, r3, #31
 8006a1c:	d410      	bmi.n	8006a40 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006a1e:	6823      	ldr	r3, [r4, #0]
 8006a20:	079f      	lsls	r7, r3, #30
 8006a22:	d464      	bmi.n	8006aee <HAL_RCC_OscConfig+0xde>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006a24:	6823      	ldr	r3, [r4, #0]
 8006a26:	0719      	lsls	r1, r3, #28
 8006a28:	f100 80aa 	bmi.w	8006b80 <HAL_RCC_OscConfig+0x170>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a2c:	6823      	ldr	r3, [r4, #0]
 8006a2e:	075a      	lsls	r2, r3, #29
 8006a30:	f100 80cb 	bmi.w	8006bca <HAL_RCC_OscConfig+0x1ba>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006a34:	69a2      	ldr	r2, [r4, #24]
 8006a36:	2a00      	cmp	r2, #0
 8006a38:	f040 8134 	bne.w	8006ca4 <HAL_RCC_OscConfig+0x294>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8006a3c:	2000      	movs	r0, #0
 8006a3e:	e02b      	b.n	8006a98 <HAL_RCC_OscConfig+0x88>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006a40:	4b96      	ldr	r3, [pc, #600]	; (8006c9c <HAL_RCC_OscConfig+0x28c>)
 8006a42:	689a      	ldr	r2, [r3, #8]
 8006a44:	f002 020c 	and.w	r2, r2, #12
 8006a48:	2a04      	cmp	r2, #4
 8006a4a:	d007      	beq.n	8006a5c <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006a4c:	689a      	ldr	r2, [r3, #8]
 8006a4e:	f002 020c 	and.w	r2, r2, #12
 8006a52:	2a08      	cmp	r2, #8
 8006a54:	d10b      	bne.n	8006a6e <HAL_RCC_OscConfig+0x5e>
 8006a56:	685a      	ldr	r2, [r3, #4]
 8006a58:	0256      	lsls	r6, r2, #9
 8006a5a:	d508      	bpl.n	8006a6e <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a5c:	4b8f      	ldr	r3, [pc, #572]	; (8006c9c <HAL_RCC_OscConfig+0x28c>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	039d      	lsls	r5, r3, #14
 8006a62:	d5dc      	bpl.n	8006a1e <HAL_RCC_OscConfig+0xe>
 8006a64:	6863      	ldr	r3, [r4, #4]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d1d9      	bne.n	8006a1e <HAL_RCC_OscConfig+0xe>
        return HAL_ERROR;
 8006a6a:	2001      	movs	r0, #1
 8006a6c:	e014      	b.n	8006a98 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a6e:	6862      	ldr	r2, [r4, #4]
 8006a70:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8006a74:	d113      	bne.n	8006a9e <HAL_RCC_OscConfig+0x8e>
 8006a76:	681a      	ldr	r2, [r3, #0]
 8006a78:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006a7c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006a7e:	f7fe fb27 	bl	80050d0 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a82:	4e86      	ldr	r6, [pc, #536]	; (8006c9c <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8006a84:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a86:	6833      	ldr	r3, [r6, #0]
 8006a88:	0398      	lsls	r0, r3, #14
 8006a8a:	d4c8      	bmi.n	8006a1e <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a8c:	f7fe fb20 	bl	80050d0 <HAL_GetTick>
 8006a90:	1b40      	subs	r0, r0, r5
 8006a92:	2864      	cmp	r0, #100	; 0x64
 8006a94:	d9f7      	bls.n	8006a86 <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
 8006a96:	2003      	movs	r0, #3
}
 8006a98:	b002      	add	sp, #8
 8006a9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a9e:	4d7f      	ldr	r5, [pc, #508]	; (8006c9c <HAL_RCC_OscConfig+0x28c>)
 8006aa0:	682b      	ldr	r3, [r5, #0]
 8006aa2:	b992      	cbnz	r2, 8006aca <HAL_RCC_OscConfig+0xba>
 8006aa4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006aa8:	602b      	str	r3, [r5, #0]
 8006aaa:	682b      	ldr	r3, [r5, #0]
 8006aac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006ab0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8006ab2:	f7fe fb0d 	bl	80050d0 <HAL_GetTick>
 8006ab6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006ab8:	682b      	ldr	r3, [r5, #0]
 8006aba:	0399      	lsls	r1, r3, #14
 8006abc:	d5af      	bpl.n	8006a1e <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006abe:	f7fe fb07 	bl	80050d0 <HAL_GetTick>
 8006ac2:	1b80      	subs	r0, r0, r6
 8006ac4:	2864      	cmp	r0, #100	; 0x64
 8006ac6:	d9f7      	bls.n	8006ab8 <HAL_RCC_OscConfig+0xa8>
 8006ac8:	e7e5      	b.n	8006a96 <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006aca:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8006ace:	d107      	bne.n	8006ae0 <HAL_RCC_OscConfig+0xd0>
 8006ad0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006ad4:	602b      	str	r3, [r5, #0]
 8006ad6:	682b      	ldr	r3, [r5, #0]
 8006ad8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006adc:	602b      	str	r3, [r5, #0]
 8006ade:	e7ce      	b.n	8006a7e <HAL_RCC_OscConfig+0x6e>
 8006ae0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ae4:	602b      	str	r3, [r5, #0]
 8006ae6:	682b      	ldr	r3, [r5, #0]
 8006ae8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006aec:	e7f6      	b.n	8006adc <HAL_RCC_OscConfig+0xcc>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006aee:	4b6b      	ldr	r3, [pc, #428]	; (8006c9c <HAL_RCC_OscConfig+0x28c>)
 8006af0:	689a      	ldr	r2, [r3, #8]
 8006af2:	f012 0f0c 	tst.w	r2, #12
 8006af6:	d007      	beq.n	8006b08 <HAL_RCC_OscConfig+0xf8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006af8:	689a      	ldr	r2, [r3, #8]
 8006afa:	f002 020c 	and.w	r2, r2, #12
 8006afe:	2a08      	cmp	r2, #8
 8006b00:	d111      	bne.n	8006b26 <HAL_RCC_OscConfig+0x116>
 8006b02:	685a      	ldr	r2, [r3, #4]
 8006b04:	0252      	lsls	r2, r2, #9
 8006b06:	d40e      	bmi.n	8006b26 <HAL_RCC_OscConfig+0x116>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b08:	4a64      	ldr	r2, [pc, #400]	; (8006c9c <HAL_RCC_OscConfig+0x28c>)
 8006b0a:	6813      	ldr	r3, [r2, #0]
 8006b0c:	079b      	lsls	r3, r3, #30
 8006b0e:	d502      	bpl.n	8006b16 <HAL_RCC_OscConfig+0x106>
 8006b10:	68e3      	ldr	r3, [r4, #12]
 8006b12:	2b01      	cmp	r3, #1
 8006b14:	d1a9      	bne.n	8006a6a <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b16:	6813      	ldr	r3, [r2, #0]
 8006b18:	6921      	ldr	r1, [r4, #16]
 8006b1a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006b1e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8006b22:	6013      	str	r3, [r2, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b24:	e77e      	b.n	8006a24 <HAL_RCC_OscConfig+0x14>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006b26:	68e2      	ldr	r2, [r4, #12]
 8006b28:	b1c2      	cbz	r2, 8006b5c <HAL_RCC_OscConfig+0x14c>
        __HAL_RCC_HSI_ENABLE();
 8006b2a:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b2c:	4d5b      	ldr	r5, [pc, #364]	; (8006c9c <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_ENABLE();
 8006b2e:	f042 0201 	orr.w	r2, r2, #1
 8006b32:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006b34:	f7fe facc 	bl	80050d0 <HAL_GetTick>
 8006b38:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b3a:	682b      	ldr	r3, [r5, #0]
 8006b3c:	079f      	lsls	r7, r3, #30
 8006b3e:	d507      	bpl.n	8006b50 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b40:	682b      	ldr	r3, [r5, #0]
 8006b42:	6922      	ldr	r2, [r4, #16]
 8006b44:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006b48:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8006b4c:	602b      	str	r3, [r5, #0]
 8006b4e:	e769      	b.n	8006a24 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b50:	f7fe fabe 	bl	80050d0 <HAL_GetTick>
 8006b54:	1b80      	subs	r0, r0, r6
 8006b56:	2802      	cmp	r0, #2
 8006b58:	d9ef      	bls.n	8006b3a <HAL_RCC_OscConfig+0x12a>
 8006b5a:	e79c      	b.n	8006a96 <HAL_RCC_OscConfig+0x86>
        __HAL_RCC_HSI_DISABLE();
 8006b5c:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b5e:	4e4f      	ldr	r6, [pc, #316]	; (8006c9c <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_DISABLE();
 8006b60:	f022 0201 	bic.w	r2, r2, #1
 8006b64:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006b66:	f7fe fab3 	bl	80050d0 <HAL_GetTick>
 8006b6a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b6c:	6833      	ldr	r3, [r6, #0]
 8006b6e:	0798      	lsls	r0, r3, #30
 8006b70:	f57f af58 	bpl.w	8006a24 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b74:	f7fe faac 	bl	80050d0 <HAL_GetTick>
 8006b78:	1b40      	subs	r0, r0, r5
 8006b7a:	2802      	cmp	r0, #2
 8006b7c:	d9f6      	bls.n	8006b6c <HAL_RCC_OscConfig+0x15c>
 8006b7e:	e78a      	b.n	8006a96 <HAL_RCC_OscConfig+0x86>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006b80:	6963      	ldr	r3, [r4, #20]
 8006b82:	4d46      	ldr	r5, [pc, #280]	; (8006c9c <HAL_RCC_OscConfig+0x28c>)
 8006b84:	b183      	cbz	r3, 8006ba8 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_LSI_ENABLE();
 8006b86:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8006b88:	f043 0301 	orr.w	r3, r3, #1
 8006b8c:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8006b8e:	f7fe fa9f 	bl	80050d0 <HAL_GetTick>
 8006b92:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b94:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8006b96:	079b      	lsls	r3, r3, #30
 8006b98:	f53f af48 	bmi.w	8006a2c <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b9c:	f7fe fa98 	bl	80050d0 <HAL_GetTick>
 8006ba0:	1b80      	subs	r0, r0, r6
 8006ba2:	2802      	cmp	r0, #2
 8006ba4:	d9f6      	bls.n	8006b94 <HAL_RCC_OscConfig+0x184>
 8006ba6:	e776      	b.n	8006a96 <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
 8006ba8:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8006baa:	f023 0301 	bic.w	r3, r3, #1
 8006bae:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8006bb0:	f7fe fa8e 	bl	80050d0 <HAL_GetTick>
 8006bb4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006bb6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8006bb8:	079f      	lsls	r7, r3, #30
 8006bba:	f57f af37 	bpl.w	8006a2c <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006bbe:	f7fe fa87 	bl	80050d0 <HAL_GetTick>
 8006bc2:	1b80      	subs	r0, r0, r6
 8006bc4:	2802      	cmp	r0, #2
 8006bc6:	d9f6      	bls.n	8006bb6 <HAL_RCC_OscConfig+0x1a6>
 8006bc8:	e765      	b.n	8006a96 <HAL_RCC_OscConfig+0x86>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006bca:	4b34      	ldr	r3, [pc, #208]	; (8006c9c <HAL_RCC_OscConfig+0x28c>)
 8006bcc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006bce:	00d0      	lsls	r0, r2, #3
 8006bd0:	d427      	bmi.n	8006c22 <HAL_RCC_OscConfig+0x212>
      __HAL_RCC_PWR_CLK_ENABLE();
 8006bd2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 8006bd4:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8006bd6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006bda:	641a      	str	r2, [r3, #64]	; 0x40
 8006bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006be2:	9301      	str	r3, [sp, #4]
 8006be4:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006be6:	4d2e      	ldr	r5, [pc, #184]	; (8006ca0 <HAL_RCC_OscConfig+0x290>)
 8006be8:	682b      	ldr	r3, [r5, #0]
 8006bea:	05d9      	lsls	r1, r3, #23
 8006bec:	d51b      	bpl.n	8006c26 <HAL_RCC_OscConfig+0x216>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006bee:	68a3      	ldr	r3, [r4, #8]
 8006bf0:	4d2a      	ldr	r5, [pc, #168]	; (8006c9c <HAL_RCC_OscConfig+0x28c>)
 8006bf2:	2b01      	cmp	r3, #1
 8006bf4:	d127      	bne.n	8006c46 <HAL_RCC_OscConfig+0x236>
 8006bf6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8006bf8:	f043 0301 	orr.w	r3, r3, #1
 8006bfc:	672b      	str	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006bfe:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8006c02:	f7fe fa65 	bl	80050d0 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c06:	4e25      	ldr	r6, [pc, #148]	; (8006c9c <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8006c08:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c0a:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8006c0c:	079b      	lsls	r3, r3, #30
 8006c0e:	d53f      	bpl.n	8006c90 <HAL_RCC_OscConfig+0x280>
    if (pwrclkchanged == SET)
 8006c10:	2f00      	cmp	r7, #0
 8006c12:	f43f af0f 	beq.w	8006a34 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c16:	4a21      	ldr	r2, [pc, #132]	; (8006c9c <HAL_RCC_OscConfig+0x28c>)
 8006c18:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8006c1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c1e:	6413      	str	r3, [r2, #64]	; 0x40
 8006c20:	e708      	b.n	8006a34 <HAL_RCC_OscConfig+0x24>
  FlagStatus pwrclkchanged = RESET;
 8006c22:	2700      	movs	r7, #0
 8006c24:	e7df      	b.n	8006be6 <HAL_RCC_OscConfig+0x1d6>
      PWR->CR1 |= PWR_CR1_DBP;
 8006c26:	682b      	ldr	r3, [r5, #0]
 8006c28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c2c:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8006c2e:	f7fe fa4f 	bl	80050d0 <HAL_GetTick>
 8006c32:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006c34:	682b      	ldr	r3, [r5, #0]
 8006c36:	05da      	lsls	r2, r3, #23
 8006c38:	d4d9      	bmi.n	8006bee <HAL_RCC_OscConfig+0x1de>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c3a:	f7fe fa49 	bl	80050d0 <HAL_GetTick>
 8006c3e:	1b80      	subs	r0, r0, r6
 8006c40:	2864      	cmp	r0, #100	; 0x64
 8006c42:	d9f7      	bls.n	8006c34 <HAL_RCC_OscConfig+0x224>
 8006c44:	e727      	b.n	8006a96 <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c46:	b9ab      	cbnz	r3, 8006c74 <HAL_RCC_OscConfig+0x264>
 8006c48:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c4a:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c4e:	f023 0301 	bic.w	r3, r3, #1
 8006c52:	672b      	str	r3, [r5, #112]	; 0x70
 8006c54:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8006c56:	f023 0304 	bic.w	r3, r3, #4
 8006c5a:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8006c5c:	f7fe fa38 	bl	80050d0 <HAL_GetTick>
 8006c60:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c62:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8006c64:	0798      	lsls	r0, r3, #30
 8006c66:	d5d3      	bpl.n	8006c10 <HAL_RCC_OscConfig+0x200>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c68:	f7fe fa32 	bl	80050d0 <HAL_GetTick>
 8006c6c:	1b80      	subs	r0, r0, r6
 8006c6e:	4540      	cmp	r0, r8
 8006c70:	d9f7      	bls.n	8006c62 <HAL_RCC_OscConfig+0x252>
 8006c72:	e710      	b.n	8006a96 <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c74:	2b05      	cmp	r3, #5
 8006c76:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8006c78:	d103      	bne.n	8006c82 <HAL_RCC_OscConfig+0x272>
 8006c7a:	f043 0304 	orr.w	r3, r3, #4
 8006c7e:	672b      	str	r3, [r5, #112]	; 0x70
 8006c80:	e7b9      	b.n	8006bf6 <HAL_RCC_OscConfig+0x1e6>
 8006c82:	f023 0301 	bic.w	r3, r3, #1
 8006c86:	672b      	str	r3, [r5, #112]	; 0x70
 8006c88:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8006c8a:	f023 0304 	bic.w	r3, r3, #4
 8006c8e:	e7b5      	b.n	8006bfc <HAL_RCC_OscConfig+0x1ec>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c90:	f7fe fa1e 	bl	80050d0 <HAL_GetTick>
 8006c94:	1b40      	subs	r0, r0, r5
 8006c96:	4540      	cmp	r0, r8
 8006c98:	d9b7      	bls.n	8006c0a <HAL_RCC_OscConfig+0x1fa>
 8006c9a:	e6fc      	b.n	8006a96 <HAL_RCC_OscConfig+0x86>
 8006c9c:	40023800 	.word	0x40023800
 8006ca0:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006ca4:	4d38      	ldr	r5, [pc, #224]	; (8006d88 <HAL_RCC_OscConfig+0x378>)
 8006ca6:	68ab      	ldr	r3, [r5, #8]
 8006ca8:	f003 030c 	and.w	r3, r3, #12
 8006cac:	2b08      	cmp	r3, #8
 8006cae:	d041      	beq.n	8006d34 <HAL_RCC_OscConfig+0x324>
        __HAL_RCC_PLL_DISABLE();
 8006cb0:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006cb2:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8006cb4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006cb8:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006cba:	d12e      	bne.n	8006d1a <HAL_RCC_OscConfig+0x30a>
        tickstart = HAL_GetTick();
 8006cbc:	f7fe fa08 	bl	80050d0 <HAL_GetTick>
 8006cc0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006cc2:	682b      	ldr	r3, [r5, #0]
 8006cc4:	0199      	lsls	r1, r3, #6
 8006cc6:	d422      	bmi.n	8006d0e <HAL_RCC_OscConfig+0x2fe>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006cc8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006cca:	085b      	lsrs	r3, r3, #1
 8006ccc:	1e5a      	subs	r2, r3, #1
 8006cce:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 8006cd2:	430b      	orrs	r3, r1
 8006cd4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006cd8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006cda:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8006cde:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006ce0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006ce4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006ce8:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8006cea:	682b      	ldr	r3, [r5, #0]
 8006cec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006cf0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8006cf2:	f7fe f9ed 	bl	80050d0 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006cf6:	4d24      	ldr	r5, [pc, #144]	; (8006d88 <HAL_RCC_OscConfig+0x378>)
        tickstart = HAL_GetTick();
 8006cf8:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006cfa:	682b      	ldr	r3, [r5, #0]
 8006cfc:	019a      	lsls	r2, r3, #6
 8006cfe:	f53f ae9d 	bmi.w	8006a3c <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d02:	f7fe f9e5 	bl	80050d0 <HAL_GetTick>
 8006d06:	1b00      	subs	r0, r0, r4
 8006d08:	2802      	cmp	r0, #2
 8006d0a:	d9f6      	bls.n	8006cfa <HAL_RCC_OscConfig+0x2ea>
 8006d0c:	e6c3      	b.n	8006a96 <HAL_RCC_OscConfig+0x86>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d0e:	f7fe f9df 	bl	80050d0 <HAL_GetTick>
 8006d12:	1b80      	subs	r0, r0, r6
 8006d14:	2802      	cmp	r0, #2
 8006d16:	d9d4      	bls.n	8006cc2 <HAL_RCC_OscConfig+0x2b2>
 8006d18:	e6bd      	b.n	8006a96 <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 8006d1a:	f7fe f9d9 	bl	80050d0 <HAL_GetTick>
 8006d1e:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d20:	682b      	ldr	r3, [r5, #0]
 8006d22:	019b      	lsls	r3, r3, #6
 8006d24:	f57f ae8a 	bpl.w	8006a3c <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d28:	f7fe f9d2 	bl	80050d0 <HAL_GetTick>
 8006d2c:	1b00      	subs	r0, r0, r4
 8006d2e:	2802      	cmp	r0, #2
 8006d30:	d9f6      	bls.n	8006d20 <HAL_RCC_OscConfig+0x310>
 8006d32:	e6b0      	b.n	8006a96 <HAL_RCC_OscConfig+0x86>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d34:	2a01      	cmp	r2, #1
      pll_config = RCC->PLLCFGR;
 8006d36:	686b      	ldr	r3, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d38:	f43f ae97 	beq.w	8006a6a <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d3c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d40:	69e1      	ldr	r1, [r4, #28]
 8006d42:	428a      	cmp	r2, r1
 8006d44:	f47f ae91 	bne.w	8006a6a <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006d48:	f003 023f 	and.w	r2, r3, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d4c:	6a21      	ldr	r1, [r4, #32]
 8006d4e:	428a      	cmp	r2, r1
 8006d50:	f47f ae8b 	bne.w	8006a6a <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006d54:	f647 72c0 	movw	r2, #32704	; 0x7fc0
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006d58:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006d5a:	401a      	ands	r2, r3
 8006d5c:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8006d60:	f47f ae83 	bne.w	8006a6a <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006d64:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8006d66:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8006d6a:	0852      	lsrs	r2, r2, #1
 8006d6c:	3a01      	subs	r2, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006d6e:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8006d72:	f47f ae7a 	bne.w	8006a6a <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006d76:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8006d7a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006d7c:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8006d80:	f43f ae5c 	beq.w	8006a3c <HAL_RCC_OscConfig+0x2c>
 8006d84:	e671      	b.n	8006a6a <HAL_RCC_OscConfig+0x5a>
 8006d86:	bf00      	nop
 8006d88:	40023800 	.word	0x40023800

08006d8c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006d8c:	4913      	ldr	r1, [pc, #76]	; (8006ddc <HAL_RCC_GetSysClockFreq+0x50>)
{
 8006d8e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006d90:	688b      	ldr	r3, [r1, #8]
 8006d92:	f003 030c 	and.w	r3, r3, #12
 8006d96:	2b04      	cmp	r3, #4
 8006d98:	d01b      	beq.n	8006dd2 <HAL_RCC_GetSysClockFreq+0x46>
 8006d9a:	2b08      	cmp	r3, #8
 8006d9c:	d11b      	bne.n	8006dd6 <HAL_RCC_GetSysClockFreq+0x4a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006d9e:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006da0:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006da2:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006da4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006da8:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006dac:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8006db0:	bf1a      	itte	ne
 8006db2:	480b      	ldrne	r0, [pc, #44]	; (8006de0 <HAL_RCC_GetSysClockFreq+0x54>)
 8006db4:	2300      	movne	r3, #0
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006db6:	480b      	ldreq	r0, [pc, #44]	; (8006de4 <HAL_RCC_GetSysClockFreq+0x58>)
 8006db8:	fba1 0100 	umull	r0, r1, r1, r0
 8006dbc:	f7f9 fe96 	bl	8000aec <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006dc0:	4b06      	ldr	r3, [pc, #24]	; (8006ddc <HAL_RCC_GetSysClockFreq+0x50>)
 8006dc2:	685b      	ldr	r3, [r3, #4]
 8006dc4:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8006dc8:	3301      	adds	r3, #1
 8006dca:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8006dcc:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8006dd0:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006dd2:	4803      	ldr	r0, [pc, #12]	; (8006de0 <HAL_RCC_GetSysClockFreq+0x54>)
 8006dd4:	e7fc      	b.n	8006dd0 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSI_VALUE;
 8006dd6:	4803      	ldr	r0, [pc, #12]	; (8006de4 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8006dd8:	e7fa      	b.n	8006dd0 <HAL_RCC_GetSysClockFreq+0x44>
 8006dda:	bf00      	nop
 8006ddc:	40023800 	.word	0x40023800
 8006de0:	017d7840 	.word	0x017d7840
 8006de4:	00f42400 	.word	0x00f42400

08006de8 <HAL_RCC_ClockConfig>:
{
 8006de8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006dec:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8006dee:	4604      	mov	r4, r0
 8006df0:	b910      	cbnz	r0, 8006df8 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8006df2:	2001      	movs	r0, #1
}
 8006df4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006df8:	4a46      	ldr	r2, [pc, #280]	; (8006f14 <HAL_RCC_ClockConfig+0x12c>)
 8006dfa:	6813      	ldr	r3, [r2, #0]
 8006dfc:	f003 030f 	and.w	r3, r3, #15
 8006e00:	428b      	cmp	r3, r1
 8006e02:	d328      	bcc.n	8006e56 <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e04:	6822      	ldr	r2, [r4, #0]
 8006e06:	0797      	lsls	r7, r2, #30
 8006e08:	d430      	bmi.n	8006e6c <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006e0a:	07d0      	lsls	r0, r2, #31
 8006e0c:	d444      	bmi.n	8006e98 <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006e0e:	4a41      	ldr	r2, [pc, #260]	; (8006f14 <HAL_RCC_ClockConfig+0x12c>)
 8006e10:	6813      	ldr	r3, [r2, #0]
 8006e12:	f003 030f 	and.w	r3, r3, #15
 8006e16:	42ab      	cmp	r3, r5
 8006e18:	d867      	bhi.n	8006eea <HAL_RCC_ClockConfig+0x102>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e1a:	6822      	ldr	r2, [r4, #0]
 8006e1c:	0751      	lsls	r1, r2, #29
 8006e1e:	d470      	bmi.n	8006f02 <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e20:	0713      	lsls	r3, r2, #28
 8006e22:	d507      	bpl.n	8006e34 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006e24:	4a3c      	ldr	r2, [pc, #240]	; (8006f18 <HAL_RCC_ClockConfig+0x130>)
 8006e26:	6921      	ldr	r1, [r4, #16]
 8006e28:	6893      	ldr	r3, [r2, #8]
 8006e2a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8006e2e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8006e32:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006e34:	f7ff ffaa 	bl	8006d8c <HAL_RCC_GetSysClockFreq>
 8006e38:	4b37      	ldr	r3, [pc, #220]	; (8006f18 <HAL_RCC_ClockConfig+0x130>)
 8006e3a:	4a38      	ldr	r2, [pc, #224]	; (8006f1c <HAL_RCC_ClockConfig+0x134>)
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8006e42:	5cd3      	ldrb	r3, [r2, r3]
 8006e44:	40d8      	lsrs	r0, r3
 8006e46:	4b36      	ldr	r3, [pc, #216]	; (8006f20 <HAL_RCC_ClockConfig+0x138>)
 8006e48:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8006e4a:	4b36      	ldr	r3, [pc, #216]	; (8006f24 <HAL_RCC_ClockConfig+0x13c>)
 8006e4c:	6818      	ldr	r0, [r3, #0]
 8006e4e:	f7fa fcef 	bl	8001830 <HAL_InitTick>
  return HAL_OK;
 8006e52:	2000      	movs	r0, #0
 8006e54:	e7ce      	b.n	8006df4 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e56:	6813      	ldr	r3, [r2, #0]
 8006e58:	f023 030f 	bic.w	r3, r3, #15
 8006e5c:	430b      	orrs	r3, r1
 8006e5e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e60:	6813      	ldr	r3, [r2, #0]
 8006e62:	f003 030f 	and.w	r3, r3, #15
 8006e66:	428b      	cmp	r3, r1
 8006e68:	d1c3      	bne.n	8006df2 <HAL_RCC_ClockConfig+0xa>
 8006e6a:	e7cb      	b.n	8006e04 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e6c:	f012 0f04 	tst.w	r2, #4
 8006e70:	4b29      	ldr	r3, [pc, #164]	; (8006f18 <HAL_RCC_ClockConfig+0x130>)
 8006e72:	d003      	beq.n	8006e7c <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006e74:	6899      	ldr	r1, [r3, #8]
 8006e76:	f441 51e0 	orr.w	r1, r1, #7168	; 0x1c00
 8006e7a:	6099      	str	r1, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e7c:	0716      	lsls	r6, r2, #28
 8006e7e:	d503      	bpl.n	8006e88 <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006e80:	6899      	ldr	r1, [r3, #8]
 8006e82:	f441 4160 	orr.w	r1, r1, #57344	; 0xe000
 8006e86:	6099      	str	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e88:	4923      	ldr	r1, [pc, #140]	; (8006f18 <HAL_RCC_ClockConfig+0x130>)
 8006e8a:	68a0      	ldr	r0, [r4, #8]
 8006e8c:	688b      	ldr	r3, [r1, #8]
 8006e8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e92:	4303      	orrs	r3, r0
 8006e94:	608b      	str	r3, [r1, #8]
 8006e96:	e7b8      	b.n	8006e0a <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e98:	6861      	ldr	r1, [r4, #4]
 8006e9a:	4b1f      	ldr	r3, [pc, #124]	; (8006f18 <HAL_RCC_ClockConfig+0x130>)
 8006e9c:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e9e:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006ea0:	d11b      	bne.n	8006eda <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ea2:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ea6:	d0a4      	beq.n	8006df2 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006ea8:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006eaa:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006eae:	4f1a      	ldr	r7, [pc, #104]	; (8006f18 <HAL_RCC_ClockConfig+0x130>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006eb0:	f022 0203 	bic.w	r2, r2, #3
 8006eb4:	430a      	orrs	r2, r1
 8006eb6:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8006eb8:	f7fe f90a 	bl	80050d0 <HAL_GetTick>
 8006ebc:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	6862      	ldr	r2, [r4, #4]
 8006ec2:	f003 030c 	and.w	r3, r3, #12
 8006ec6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8006eca:	d0a0      	beq.n	8006e0e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ecc:	f7fe f900 	bl	80050d0 <HAL_GetTick>
 8006ed0:	1b80      	subs	r0, r0, r6
 8006ed2:	4540      	cmp	r0, r8
 8006ed4:	d9f3      	bls.n	8006ebe <HAL_RCC_ClockConfig+0xd6>
        return HAL_TIMEOUT;
 8006ed6:	2003      	movs	r0, #3
 8006ed8:	e78c      	b.n	8006df4 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006eda:	2902      	cmp	r1, #2
 8006edc:	d102      	bne.n	8006ee4 <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ede:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8006ee2:	e7e0      	b.n	8006ea6 <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ee4:	f012 0f02 	tst.w	r2, #2
 8006ee8:	e7dd      	b.n	8006ea6 <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006eea:	6813      	ldr	r3, [r2, #0]
 8006eec:	f023 030f 	bic.w	r3, r3, #15
 8006ef0:	432b      	orrs	r3, r5
 8006ef2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ef4:	6813      	ldr	r3, [r2, #0]
 8006ef6:	f003 030f 	and.w	r3, r3, #15
 8006efa:	42ab      	cmp	r3, r5
 8006efc:	f47f af79 	bne.w	8006df2 <HAL_RCC_ClockConfig+0xa>
 8006f00:	e78b      	b.n	8006e1a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006f02:	4905      	ldr	r1, [pc, #20]	; (8006f18 <HAL_RCC_ClockConfig+0x130>)
 8006f04:	68e0      	ldr	r0, [r4, #12]
 8006f06:	688b      	ldr	r3, [r1, #8]
 8006f08:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8006f0c:	4303      	orrs	r3, r0
 8006f0e:	608b      	str	r3, [r1, #8]
 8006f10:	e786      	b.n	8006e20 <HAL_RCC_ClockConfig+0x38>
 8006f12:	bf00      	nop
 8006f14:	40023c00 	.word	0x40023c00
 8006f18:	40023800 	.word	0x40023800
 8006f1c:	0802d9ac 	.word	0x0802d9ac
 8006f20:	2000000c 	.word	0x2000000c
 8006f24:	2000003c 	.word	0x2000003c

08006f28 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006f28:	4b04      	ldr	r3, [pc, #16]	; (8006f3c <HAL_RCC_GetPCLK1Freq+0x14>)
 8006f2a:	4a05      	ldr	r2, [pc, #20]	; (8006f40 <HAL_RCC_GetPCLK1Freq+0x18>)
 8006f2c:	689b      	ldr	r3, [r3, #8]
 8006f2e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8006f32:	5cd3      	ldrb	r3, [r2, r3]
 8006f34:	4a03      	ldr	r2, [pc, #12]	; (8006f44 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8006f36:	6810      	ldr	r0, [r2, #0]
}
 8006f38:	40d8      	lsrs	r0, r3
 8006f3a:	4770      	bx	lr
 8006f3c:	40023800 	.word	0x40023800
 8006f40:	0802d9bc 	.word	0x0802d9bc
 8006f44:	2000000c 	.word	0x2000000c

08006f48 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006f48:	230f      	movs	r3, #15
 8006f4a:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006f4c:	4b0b      	ldr	r3, [pc, #44]	; (8006f7c <HAL_RCC_GetClockConfig+0x34>)
 8006f4e:	689a      	ldr	r2, [r3, #8]
 8006f50:	f002 0203 	and.w	r2, r2, #3
 8006f54:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006f56:	689a      	ldr	r2, [r3, #8]
 8006f58:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8006f5c:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006f5e:	689a      	ldr	r2, [r3, #8]
 8006f60:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8006f64:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8006f66:	689b      	ldr	r3, [r3, #8]
 8006f68:	08db      	lsrs	r3, r3, #3
 8006f6a:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8006f6e:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006f70:	4b03      	ldr	r3, [pc, #12]	; (8006f80 <HAL_RCC_GetClockConfig+0x38>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f003 030f 	and.w	r3, r3, #15
 8006f78:	600b      	str	r3, [r1, #0]
}
 8006f7a:	4770      	bx	lr
 8006f7c:	40023800 	.word	0x40023800
 8006f80:	40023c00 	.word	0x40023c00

08006f84 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006f84:	6803      	ldr	r3, [r0, #0]
{
 8006f86:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006f8a:	f013 0601 	ands.w	r6, r3, #1
{
 8006f8e:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006f90:	d00b      	beq.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006f92:	4aaa      	ldr	r2, [pc, #680]	; (800723c <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006f94:	6891      	ldr	r1, [r2, #8]
 8006f96:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 8006f9a:	6091      	str	r1, [r2, #8]
 8006f9c:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8006f9e:	6891      	ldr	r1, [r2, #8]
 8006fa0:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006fa2:	fab6 f686 	clz	r6, r6
 8006fa6:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006fa8:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006faa:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 8006fae:	d012      	beq.n	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006fb0:	49a2      	ldr	r1, [pc, #648]	; (800723c <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006fb2:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8006fb4:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006fb8:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006fbc:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
    {
      plli2sused = 1;
 8006fc0:	bf08      	it	eq
 8006fc2:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006fc4:	ea42 0205 	orr.w	r2, r2, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006fc8:	bf16      	itet	ne
 8006fca:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 8006fce:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006fd0:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006fd2:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006fd6:	02d8      	lsls	r0, r3, #11
 8006fd8:	d510      	bpl.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006fda:	4898      	ldr	r0, [pc, #608]	; (800723c <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006fdc:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006fde:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006fe2:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006fe6:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8006fea:	ea42 0201 	orr.w	r2, r2, r1
 8006fee:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006ff2:	f000 8184 	beq.w	80072fe <HAL_RCCEx_PeriphCLKConfig+0x37a>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 8006ff6:	2900      	cmp	r1, #0
 8006ff8:	bf08      	it	eq
 8006ffa:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 8006ffc:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8007000:	bf18      	it	ne
 8007002:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007004:	0699      	lsls	r1, r3, #26
 8007006:	d531      	bpl.n	800706c <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007008:	4b8c      	ldr	r3, [pc, #560]	; (800723c <HAL_RCCEx_PeriphCLKConfig+0x2b8>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800700a:	4f8d      	ldr	r7, [pc, #564]	; (8007240 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
    __HAL_RCC_PWR_CLK_ENABLE();
 800700c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800700e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007012:	641a      	str	r2, [r3, #64]	; 0x40
 8007014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007016:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800701a:	9301      	str	r3, [sp, #4]
 800701c:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007024:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007026:	f7fe f853 	bl	80050d0 <HAL_GetTick>
 800702a:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	05da      	lsls	r2, r3, #23
 8007030:	f140 8167 	bpl.w	8007302 <HAL_RCCEx_PeriphCLKConfig+0x37e>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007034:	4f81      	ldr	r7, [pc, #516]	; (800723c <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8007036:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007038:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800703c:	f040 816c 	bne.w	8007318 <HAL_RCCEx_PeriphCLKConfig+0x394>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007040:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007042:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8007046:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800704a:	4a7c      	ldr	r2, [pc, #496]	; (800723c <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800704c:	f040 818a 	bne.w	8007364 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007050:	6891      	ldr	r1, [r2, #8]
 8007052:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8007056:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 800705a:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 800705e:	4301      	orrs	r1, r0
 8007060:	6091      	str	r1, [r2, #8]
 8007062:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007066:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8007068:	430b      	orrs	r3, r1
 800706a:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800706c:	6823      	ldr	r3, [r4, #0]
 800706e:	06d9      	lsls	r1, r3, #27
 8007070:	d50c      	bpl.n	800708c <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007072:	4a72      	ldr	r2, [pc, #456]	; (800723c <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8007074:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8007078:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 800707c:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 8007080:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8007084:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8007086:	4301      	orrs	r1, r0
 8007088:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800708c:	045a      	lsls	r2, r3, #17
 800708e:	d508      	bpl.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007090:	496a      	ldr	r1, [pc, #424]	; (800723c <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8007092:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8007094:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8007098:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800709c:	4302      	orrs	r2, r0
 800709e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80070a2:	041f      	lsls	r7, r3, #16
 80070a4:	d508      	bpl.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80070a6:	4965      	ldr	r1, [pc, #404]	; (800723c <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80070a8:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 80070aa:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80070ae:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 80070b2:	4302      	orrs	r2, r0
 80070b4:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80070b8:	03d8      	lsls	r0, r3, #15
 80070ba:	d508      	bpl.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80070bc:	495f      	ldr	r1, [pc, #380]	; (800723c <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80070be:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80070c0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80070c4:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80070c8:	4302      	orrs	r2, r0
 80070ca:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80070ce:	0399      	lsls	r1, r3, #14
 80070d0:	d508      	bpl.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80070d2:	495a      	ldr	r1, [pc, #360]	; (800723c <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80070d4:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80070d6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80070da:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 80070de:	4302      	orrs	r2, r0
 80070e0:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80070e4:	065a      	lsls	r2, r3, #25
 80070e6:	d508      	bpl.n	80070fa <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80070e8:	4954      	ldr	r1, [pc, #336]	; (800723c <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80070ea:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80070ec:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80070f0:	f022 0203 	bic.w	r2, r2, #3
 80070f4:	4302      	orrs	r2, r0
 80070f6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80070fa:	061f      	lsls	r7, r3, #24
 80070fc:	d508      	bpl.n	8007110 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80070fe:	494f      	ldr	r1, [pc, #316]	; (800723c <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8007100:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8007102:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8007106:	f022 020c 	bic.w	r2, r2, #12
 800710a:	4302      	orrs	r2, r0
 800710c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007110:	05d8      	lsls	r0, r3, #23
 8007112:	d508      	bpl.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007114:	4949      	ldr	r1, [pc, #292]	; (800723c <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8007116:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8007118:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800711c:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8007120:	4302      	orrs	r2, r0
 8007122:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007126:	0599      	lsls	r1, r3, #22
 8007128:	d508      	bpl.n	800713c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800712a:	4944      	ldr	r1, [pc, #272]	; (800723c <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800712c:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800712e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8007132:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8007136:	4302      	orrs	r2, r0
 8007138:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800713c:	055a      	lsls	r2, r3, #21
 800713e:	d508      	bpl.n	8007152 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007140:	493e      	ldr	r1, [pc, #248]	; (800723c <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8007142:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007144:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8007148:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800714c:	4302      	orrs	r2, r0
 800714e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007152:	051f      	lsls	r7, r3, #20
 8007154:	d508      	bpl.n	8007168 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007156:	4939      	ldr	r1, [pc, #228]	; (800723c <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8007158:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800715a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800715e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007162:	4302      	orrs	r2, r0
 8007164:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007168:	04d8      	lsls	r0, r3, #19
 800716a:	d508      	bpl.n	800717e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800716c:	4933      	ldr	r1, [pc, #204]	; (800723c <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800716e:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8007170:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8007174:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8007178:	4302      	orrs	r2, r0
 800717a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800717e:	0499      	lsls	r1, r3, #18
 8007180:	d508      	bpl.n	8007194 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007182:	492e      	ldr	r1, [pc, #184]	; (800723c <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8007184:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8007186:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800718a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800718e:	4302      	orrs	r2, r0
 8007190:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007194:	025a      	lsls	r2, r3, #9
 8007196:	d508      	bpl.n	80071aa <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007198:	4928      	ldr	r1, [pc, #160]	; (800723c <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800719a:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800719c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80071a0:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 80071a4:	4302      	orrs	r2, r0
 80071a6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80071aa:	029f      	lsls	r7, r3, #10
 80071ac:	d50c      	bpl.n	80071c8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80071ae:	4823      	ldr	r0, [pc, #140]	; (800723c <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80071b0:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 80071b2:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 80071b6:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80071ba:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 80071be:	bf08      	it	eq
 80071c0:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80071c2:	430a      	orrs	r2, r1
 80071c4:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 80071c8:	f013 0f08 	tst.w	r3, #8
 80071cc:	bf18      	it	ne
 80071ce:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80071d0:	0358      	lsls	r0, r3, #13
 80071d2:	d508      	bpl.n	80071e6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80071d4:	4919      	ldr	r1, [pc, #100]	; (800723c <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80071d6:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80071d8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80071dc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80071e0:	4302      	orrs	r2, r0
 80071e2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80071e6:	0219      	lsls	r1, r3, #8
 80071e8:	d509      	bpl.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80071ea:	4914      	ldr	r1, [pc, #80]	; (800723c <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80071ec:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 80071f0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80071f4:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80071f8:	4302      	orrs	r2, r0
 80071fa:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80071fe:	2e01      	cmp	r6, #1
 8007200:	f000 80b4 	beq.w	800736c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8007204:	019a      	lsls	r2, r3, #6
 8007206:	f100 80b1 	bmi.w	800736c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800720a:	2d01      	cmp	r5, #1
 800720c:	d175      	bne.n	80072fa <HAL_RCCEx_PeriphCLKConfig+0x376>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800720e:	4d0b      	ldr	r5, [pc, #44]	; (800723c <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8007210:	682b      	ldr	r3, [r5, #0]
 8007212:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007216:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007218:	f7fd ff5a 	bl	80050d0 <HAL_GetTick>
 800721c:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800721e:	682b      	ldr	r3, [r5, #0]
 8007220:	009f      	lsls	r7, r3, #2
 8007222:	f100 8127 	bmi.w	8007474 <HAL_RCCEx_PeriphCLKConfig+0x4f0>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007226:	6822      	ldr	r2, [r4, #0]
 8007228:	0316      	lsls	r6, r2, #12
 800722a:	d501      	bpl.n	8007230 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800722c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800722e:	b14b      	cbz	r3, 8007244 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8007230:	02d0      	lsls	r0, r2, #11
 8007232:	d522      	bpl.n	800727a <HAL_RCCEx_PeriphCLKConfig+0x2f6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007234:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007236:	bb03      	cbnz	r3, 800727a <HAL_RCCEx_PeriphCLKConfig+0x2f6>
 8007238:	e004      	b.n	8007244 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 800723a:	bf00      	nop
 800723c:	40023800 	.word	0x40023800
 8007240:	40007000 	.word	0x40007000
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007244:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007248:	f8d5 1088 	ldr.w	r1, [r5, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800724c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007250:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8007254:	430b      	orrs	r3, r1
 8007256:	6961      	ldr	r1, [r4, #20]
 8007258:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 800725c:	69a1      	ldr	r1, [r4, #24]
 800725e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8007262:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007266:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 800726a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800726c:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8007270:	3901      	subs	r1, #1
 8007272:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8007276:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800727a:	0291      	lsls	r1, r2, #10
 800727c:	d515      	bpl.n	80072aa <HAL_RCCEx_PeriphCLKConfig+0x326>
 800727e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8007280:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007284:	d111      	bne.n	80072aa <HAL_RCCEx_PeriphCLKConfig+0x326>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007286:	4982      	ldr	r1, [pc, #520]	; (8007490 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007288:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800728c:	f8d1 0088 	ldr.w	r0, [r1, #136]	; 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007290:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8007294:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8007298:	4303      	orrs	r3, r0
 800729a:	6960      	ldr	r0, [r4, #20]
 800729c:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80072a0:	6a20      	ldr	r0, [r4, #32]
 80072a2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80072a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80072aa:	0712      	lsls	r2, r2, #28
 80072ac:	d519      	bpl.n	80072e2 <HAL_RCCEx_PeriphCLKConfig+0x35e>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80072ae:	4a78      	ldr	r2, [pc, #480]	; (8007490 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80072b0:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80072b4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80072b8:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 80072bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80072c0:	430b      	orrs	r3, r1
 80072c2:	6961      	ldr	r1, [r4, #20]
 80072c4:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 80072c8:	69e1      	ldr	r1, [r4, #28]
 80072ca:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 80072ce:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80072d2:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80072d6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80072d8:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80072dc:	430b      	orrs	r3, r1
 80072de:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80072e2:	4c6b      	ldr	r4, [pc, #428]	; (8007490 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80072e4:	6823      	ldr	r3, [r4, #0]
 80072e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80072ea:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80072ec:	f7fd fef0 	bl	80050d0 <HAL_GetTick>
 80072f0:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80072f2:	6823      	ldr	r3, [r4, #0]
 80072f4:	009b      	lsls	r3, r3, #2
 80072f6:	f140 80c4 	bpl.w	8007482 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80072fa:	2000      	movs	r0, #0
 80072fc:	e009      	b.n	8007312 <HAL_RCCEx_PeriphCLKConfig+0x38e>
      plli2sused = 1;
 80072fe:	2601      	movs	r6, #1
 8007300:	e67c      	b.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007302:	f7fd fee5 	bl	80050d0 <HAL_GetTick>
 8007306:	eba0 0008 	sub.w	r0, r0, r8
 800730a:	2864      	cmp	r0, #100	; 0x64
 800730c:	f67f ae8e 	bls.w	800702c <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 8007310:	2003      	movs	r0, #3
}
 8007312:	b003      	add	sp, #12
 8007314:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007318:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800731a:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800731e:	4293      	cmp	r3, r2
 8007320:	f43f ae8e 	beq.w	8007040 <HAL_RCCEx_PeriphCLKConfig+0xbc>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007324:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8007326:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007328:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 800732c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007330:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007332:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007334:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007338:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 800733a:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800733c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800733e:	07db      	lsls	r3, r3, #31
 8007340:	f57f ae7e 	bpl.w	8007040 <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 8007344:	f7fd fec4 	bl	80050d0 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007348:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800734c:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800734e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007350:	0798      	lsls	r0, r3, #30
 8007352:	f53f ae75 	bmi.w	8007040 <HAL_RCCEx_PeriphCLKConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007356:	f7fd febb 	bl	80050d0 <HAL_GetTick>
 800735a:	eba0 0008 	sub.w	r0, r0, r8
 800735e:	4548      	cmp	r0, r9
 8007360:	d9f5      	bls.n	800734e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
 8007362:	e7d5      	b.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007364:	6891      	ldr	r1, [r2, #8]
 8007366:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 800736a:	e679      	b.n	8007060 <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_PLLI2S_DISABLE();
 800736c:	4e48      	ldr	r6, [pc, #288]	; (8007490 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800736e:	6833      	ldr	r3, [r6, #0]
 8007370:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007374:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8007376:	f7fd feab 	bl	80050d0 <HAL_GetTick>
 800737a:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800737c:	6833      	ldr	r3, [r6, #0]
 800737e:	011b      	lsls	r3, r3, #4
 8007380:	d472      	bmi.n	8007468 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007382:	6822      	ldr	r2, [r4, #0]
 8007384:	07d7      	lsls	r7, r2, #31
 8007386:	d512      	bpl.n	80073ae <HAL_RCCEx_PeriphCLKConfig+0x42a>
 8007388:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800738a:	b983      	cbnz	r3, 80073ae <HAL_RCCEx_PeriphCLKConfig+0x42a>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800738c:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007390:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007394:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007398:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 800739c:	430b      	orrs	r3, r1
 800739e:	6861      	ldr	r1, [r4, #4]
 80073a0:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 80073a4:	68a1      	ldr	r1, [r4, #8]
 80073a6:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 80073aa:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80073ae:	0316      	lsls	r6, r2, #12
 80073b0:	d503      	bpl.n	80073ba <HAL_RCCEx_PeriphCLKConfig+0x436>
 80073b2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80073b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80073b8:	d005      	beq.n	80073c6 <HAL_RCCEx_PeriphCLKConfig+0x442>
 80073ba:	02d0      	lsls	r0, r2, #11
 80073bc:	d51e      	bpl.n	80073fc <HAL_RCCEx_PeriphCLKConfig+0x478>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80073be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80073c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80073c4:	d11a      	bne.n	80073fc <HAL_RCCEx_PeriphCLKConfig+0x478>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80073c6:	4932      	ldr	r1, [pc, #200]	; (8007490 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80073c8:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80073cc:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80073d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80073d4:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 80073d8:	4303      	orrs	r3, r0
 80073da:	6860      	ldr	r0, [r4, #4]
 80073dc:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80073e0:	68e0      	ldr	r0, [r4, #12]
 80073e2:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80073e6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80073ea:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 80073ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80073f0:	f020 001f 	bic.w	r0, r0, #31
 80073f4:	3b01      	subs	r3, #1
 80073f6:	4303      	orrs	r3, r0
 80073f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80073fc:	01d1      	lsls	r1, r2, #7
 80073fe:	d511      	bpl.n	8007424 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007400:	4923      	ldr	r1, [pc, #140]	; (8007490 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007402:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007406:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800740a:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 800740e:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8007412:	4303      	orrs	r3, r0
 8007414:	6860      	ldr	r0, [r4, #4]
 8007416:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800741a:	6920      	ldr	r0, [r4, #16]
 800741c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007420:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007424:	0192      	lsls	r2, r2, #6
 8007426:	d50d      	bpl.n	8007444 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007428:	6923      	ldr	r3, [r4, #16]
 800742a:	6862      	ldr	r2, [r4, #4]
 800742c:	041b      	lsls	r3, r3, #16
 800742e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8007432:	68e2      	ldr	r2, [r4, #12]
 8007434:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8007438:	68a2      	ldr	r2, [r4, #8]
 800743a:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 800743e:	4a14      	ldr	r2, [pc, #80]	; (8007490 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007440:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8007444:	4e12      	ldr	r6, [pc, #72]	; (8007490 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8007446:	6833      	ldr	r3, [r6, #0]
 8007448:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800744c:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800744e:	f7fd fe3f 	bl	80050d0 <HAL_GetTick>
 8007452:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007454:	6833      	ldr	r3, [r6, #0]
 8007456:	011b      	lsls	r3, r3, #4
 8007458:	f53f aed7 	bmi.w	800720a <HAL_RCCEx_PeriphCLKConfig+0x286>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800745c:	f7fd fe38 	bl	80050d0 <HAL_GetTick>
 8007460:	1bc0      	subs	r0, r0, r7
 8007462:	2864      	cmp	r0, #100	; 0x64
 8007464:	d9f6      	bls.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8007466:	e753      	b.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0x38c>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007468:	f7fd fe32 	bl	80050d0 <HAL_GetTick>
 800746c:	1bc0      	subs	r0, r0, r7
 800746e:	2864      	cmp	r0, #100	; 0x64
 8007470:	d984      	bls.n	800737c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8007472:	e74d      	b.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0x38c>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007474:	f7fd fe2c 	bl	80050d0 <HAL_GetTick>
 8007478:	1b80      	subs	r0, r0, r6
 800747a:	2864      	cmp	r0, #100	; 0x64
 800747c:	f67f aecf 	bls.w	800721e <HAL_RCCEx_PeriphCLKConfig+0x29a>
 8007480:	e746      	b.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0x38c>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007482:	f7fd fe25 	bl	80050d0 <HAL_GetTick>
 8007486:	1b40      	subs	r0, r0, r5
 8007488:	2864      	cmp	r0, #100	; 0x64
 800748a:	f67f af32 	bls.w	80072f2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800748e:	e73f      	b.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0x38c>
 8007490:	40023800 	.word	0x40023800

08007494 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8007494:	b538      	push	{r3, r4, r5, lr}
 8007496:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8007498:	4604      	mov	r4, r0
 800749a:	b1c8      	cbz	r0, 80074d0 <HAL_SDRAM_Init+0x3c>
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800749c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80074a0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80074a4:	b91b      	cbnz	r3, 80074ae <HAL_SDRAM_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80074a6:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80074aa:	f7fa f959 	bl	8001760 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80074ae:	2302      	movs	r3, #2

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80074b0:	1d21      	adds	r1, r4, #4
 80074b2:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80074b4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80074b8:	f000 f9cf 	bl	800785a <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80074bc:	6862      	ldr	r2, [r4, #4]
 80074be:	4629      	mov	r1, r5
 80074c0:	6820      	ldr	r0, [r4, #0]
 80074c2:	f000 fa05 	bl	80078d0 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80074c6:	2301      	movs	r3, #1

  return HAL_OK;
 80074c8:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 80074ca:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 80074ce:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80074d0:	2001      	movs	r0, #1
 80074d2:	e7fc      	b.n	80074ce <HAL_SDRAM_Init+0x3a>

080074d4 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 80074d4:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80074d6:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 80074da:	4605      	mov	r5, r0
 80074dc:	460e      	mov	r6, r1

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 80074de:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80074e0:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 80074e2:	d010      	beq.n	8007506 <HAL_SDRAM_SendCommand+0x32>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 80074e4:	f000 04fb 	and.w	r4, r0, #251	; 0xfb
 80074e8:	2c01      	cmp	r4, #1
 80074ea:	d110      	bne.n	800750e <HAL_SDRAM_SendCommand+0x3a>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80074ec:	2302      	movs	r3, #2

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80074ee:	6828      	ldr	r0, [r5, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80074f0:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80074f4:	f000 fa22 	bl	800793c <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80074f8:	6833      	ldr	r3, [r6, #0]
 80074fa:	2b02      	cmp	r3, #2
 80074fc:	d104      	bne.n	8007508 <HAL_SDRAM_SendCommand+0x34>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80074fe:	2305      	movs	r3, #5
 8007500:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8007504:	2000      	movs	r0, #0
}
 8007506:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_READY;
 8007508:	f885 402c 	strb.w	r4, [r5, #44]	; 0x2c
 800750c:	e7fa      	b.n	8007504 <HAL_SDRAM_SendCommand+0x30>
    return HAL_ERROR;
 800750e:	2001      	movs	r0, #1
 8007510:	e7f9      	b.n	8007506 <HAL_SDRAM_SendCommand+0x32>

08007512 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8007512:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8007514:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 8007518:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800751a:	2b02      	cmp	r3, #2
 800751c:	b2d8      	uxtb	r0, r3
 800751e:	d00d      	beq.n	800753c <HAL_SDRAM_ProgramRefreshRate+0x2a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8007520:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8007524:	2b01      	cmp	r3, #1
 8007526:	b2dd      	uxtb	r5, r3
 8007528:	d109      	bne.n	800753e <HAL_SDRAM_ProgramRefreshRate+0x2c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800752a:	2302      	movs	r3, #2

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800752c:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800752e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8007532:	f000 fa15 	bl	8007960 <FMC_SDRAM_ProgramRefreshRate>
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8007536:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 8007538:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
 800753c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800753e:	2001      	movs	r0, #1
 8007540:	e7fc      	b.n	800753c <HAL_SDRAM_ProgramRefreshRate+0x2a>

08007542 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007542:	4770      	bx	lr

08007544 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007544:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8007548:	2b01      	cmp	r3, #1
 800754a:	d133      	bne.n	80075b4 <HAL_TIM_Base_Start_IT+0x70>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800754c:	2302      	movs	r3, #2
 800754e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007552:	6803      	ldr	r3, [r0, #0]
 8007554:	68da      	ldr	r2, [r3, #12]
 8007556:	f042 0201 	orr.w	r2, r2, #1
 800755a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800755c:	4a16      	ldr	r2, [pc, #88]	; (80075b8 <HAL_TIM_Base_Start_IT+0x74>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d01a      	beq.n	8007598 <HAL_TIM_Base_Start_IT+0x54>
 8007562:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007566:	d017      	beq.n	8007598 <HAL_TIM_Base_Start_IT+0x54>
 8007568:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800756c:	4293      	cmp	r3, r2
 800756e:	d013      	beq.n	8007598 <HAL_TIM_Base_Start_IT+0x54>
 8007570:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007574:	4293      	cmp	r3, r2
 8007576:	d00f      	beq.n	8007598 <HAL_TIM_Base_Start_IT+0x54>
 8007578:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800757c:	4293      	cmp	r3, r2
 800757e:	d00b      	beq.n	8007598 <HAL_TIM_Base_Start_IT+0x54>
 8007580:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8007584:	4293      	cmp	r3, r2
 8007586:	d007      	beq.n	8007598 <HAL_TIM_Base_Start_IT+0x54>
 8007588:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800758c:	4293      	cmp	r3, r2
 800758e:	d003      	beq.n	8007598 <HAL_TIM_Base_Start_IT+0x54>
 8007590:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8007594:	4293      	cmp	r3, r2
 8007596:	d107      	bne.n	80075a8 <HAL_TIM_Base_Start_IT+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007598:	6899      	ldr	r1, [r3, #8]
 800759a:	4a08      	ldr	r2, [pc, #32]	; (80075bc <HAL_TIM_Base_Start_IT+0x78>)
 800759c:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800759e:	2a06      	cmp	r2, #6
 80075a0:	d006      	beq.n	80075b0 <HAL_TIM_Base_Start_IT+0x6c>
 80075a2:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80075a6:	d003      	beq.n	80075b0 <HAL_TIM_Base_Start_IT+0x6c>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80075a8:	681a      	ldr	r2, [r3, #0]
 80075aa:	f042 0201 	orr.w	r2, r2, #1
 80075ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80075b0:	2000      	movs	r0, #0
}
 80075b2:	4770      	bx	lr
    return HAL_ERROR;
 80075b4:	2001      	movs	r0, #1
 80075b6:	4770      	bx	lr
 80075b8:	40010000 	.word	0x40010000
 80075bc:	00010007 	.word	0x00010007

080075c0 <HAL_TIM_OC_DelayElapsedCallback>:
 80075c0:	4770      	bx	lr

080075c2 <HAL_TIM_IC_CaptureCallback>:
 80075c2:	4770      	bx	lr

080075c4 <HAL_TIM_PWM_PulseFinishedCallback>:
 80075c4:	4770      	bx	lr

080075c6 <HAL_TIM_TriggerCallback>:
 80075c6:	4770      	bx	lr

080075c8 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80075c8:	6803      	ldr	r3, [r0, #0]
 80075ca:	691a      	ldr	r2, [r3, #16]
 80075cc:	0791      	lsls	r1, r2, #30
{
 80075ce:	b510      	push	{r4, lr}
 80075d0:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80075d2:	d50f      	bpl.n	80075f4 <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80075d4:	68da      	ldr	r2, [r3, #12]
 80075d6:	0792      	lsls	r2, r2, #30
 80075d8:	d50c      	bpl.n	80075f4 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80075da:	f06f 0202 	mvn.w	r2, #2
 80075de:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80075e0:	2201      	movs	r2, #1
 80075e2:	7702      	strb	r2, [r0, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80075e4:	699b      	ldr	r3, [r3, #24]
 80075e6:	0799      	lsls	r1, r3, #30
 80075e8:	f000 8085 	beq.w	80076f6 <HAL_TIM_IRQHandler+0x12e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80075ec:	f7ff ffe9 	bl	80075c2 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075f0:	2300      	movs	r3, #0
 80075f2:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80075f4:	6823      	ldr	r3, [r4, #0]
 80075f6:	691a      	ldr	r2, [r3, #16]
 80075f8:	0752      	lsls	r2, r2, #29
 80075fa:	d510      	bpl.n	800761e <HAL_TIM_IRQHandler+0x56>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80075fc:	68da      	ldr	r2, [r3, #12]
 80075fe:	0750      	lsls	r0, r2, #29
 8007600:	d50d      	bpl.n	800761e <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007602:	f06f 0204 	mvn.w	r2, #4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007606:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007608:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800760a:	2202      	movs	r2, #2
 800760c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800760e:	699b      	ldr	r3, [r3, #24]
 8007610:	f413 7f40 	tst.w	r3, #768	; 0x300
 8007614:	d075      	beq.n	8007702 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 8007616:	f7ff ffd4 	bl	80075c2 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800761a:	2300      	movs	r3, #0
 800761c:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800761e:	6823      	ldr	r3, [r4, #0]
 8007620:	691a      	ldr	r2, [r3, #16]
 8007622:	0711      	lsls	r1, r2, #28
 8007624:	d50f      	bpl.n	8007646 <HAL_TIM_IRQHandler+0x7e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007626:	68da      	ldr	r2, [r3, #12]
 8007628:	0712      	lsls	r2, r2, #28
 800762a:	d50c      	bpl.n	8007646 <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800762c:	f06f 0208 	mvn.w	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007630:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007632:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007634:	2204      	movs	r2, #4
 8007636:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007638:	69db      	ldr	r3, [r3, #28]
 800763a:	079b      	lsls	r3, r3, #30
 800763c:	d067      	beq.n	800770e <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 800763e:	f7ff ffc0 	bl	80075c2 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007642:	2300      	movs	r3, #0
 8007644:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007646:	6823      	ldr	r3, [r4, #0]
 8007648:	691a      	ldr	r2, [r3, #16]
 800764a:	06d0      	lsls	r0, r2, #27
 800764c:	d510      	bpl.n	8007670 <HAL_TIM_IRQHandler+0xa8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800764e:	68da      	ldr	r2, [r3, #12]
 8007650:	06d1      	lsls	r1, r2, #27
 8007652:	d50d      	bpl.n	8007670 <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007654:	f06f 0210 	mvn.w	r2, #16
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007658:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800765a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800765c:	2208      	movs	r2, #8
 800765e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007660:	69db      	ldr	r3, [r3, #28]
 8007662:	f413 7f40 	tst.w	r3, #768	; 0x300
 8007666:	d058      	beq.n	800771a <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8007668:	f7ff ffab 	bl	80075c2 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800766c:	2300      	movs	r3, #0
 800766e:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007670:	6823      	ldr	r3, [r4, #0]
 8007672:	691a      	ldr	r2, [r3, #16]
 8007674:	07d2      	lsls	r2, r2, #31
 8007676:	d508      	bpl.n	800768a <HAL_TIM_IRQHandler+0xc2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007678:	68da      	ldr	r2, [r3, #12]
 800767a:	07d0      	lsls	r0, r2, #31
 800767c:	d505      	bpl.n	800768a <HAL_TIM_IRQHandler+0xc2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800767e:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007682:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007684:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8007686:	f7f9 fe6b 	bl	8001360 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800768a:	6823      	ldr	r3, [r4, #0]
 800768c:	691a      	ldr	r2, [r3, #16]
 800768e:	0611      	lsls	r1, r2, #24
 8007690:	d508      	bpl.n	80076a4 <HAL_TIM_IRQHandler+0xdc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007692:	68da      	ldr	r2, [r3, #12]
 8007694:	0612      	lsls	r2, r2, #24
 8007696:	d505      	bpl.n	80076a4 <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007698:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800769c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800769e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80076a0:	f000 f8d9 	bl	8007856 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80076a4:	6823      	ldr	r3, [r4, #0]
 80076a6:	691a      	ldr	r2, [r3, #16]
 80076a8:	05d0      	lsls	r0, r2, #23
 80076aa:	d508      	bpl.n	80076be <HAL_TIM_IRQHandler+0xf6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80076ac:	68da      	ldr	r2, [r3, #12]
 80076ae:	0611      	lsls	r1, r2, #24
 80076b0:	d505      	bpl.n	80076be <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80076b2:	f46f 7280 	mvn.w	r2, #256	; 0x100
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80076b6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80076b8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80076ba:	f000 f8cd 	bl	8007858 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80076be:	6823      	ldr	r3, [r4, #0]
 80076c0:	691a      	ldr	r2, [r3, #16]
 80076c2:	0652      	lsls	r2, r2, #25
 80076c4:	d508      	bpl.n	80076d8 <HAL_TIM_IRQHandler+0x110>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80076c6:	68da      	ldr	r2, [r3, #12]
 80076c8:	0650      	lsls	r0, r2, #25
 80076ca:	d505      	bpl.n	80076d8 <HAL_TIM_IRQHandler+0x110>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80076cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80076d0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80076d2:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80076d4:	f7ff ff77 	bl	80075c6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80076d8:	6823      	ldr	r3, [r4, #0]
 80076da:	691a      	ldr	r2, [r3, #16]
 80076dc:	0691      	lsls	r1, r2, #26
 80076de:	d522      	bpl.n	8007726 <HAL_TIM_IRQHandler+0x15e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80076e0:	68da      	ldr	r2, [r3, #12]
 80076e2:	0692      	lsls	r2, r2, #26
 80076e4:	d51f      	bpl.n	8007726 <HAL_TIM_IRQHandler+0x15e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80076e6:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80076ea:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80076ec:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80076ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 80076f2:	f000 b8af 	b.w	8007854 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80076f6:	f7ff ff63 	bl	80075c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076fa:	4620      	mov	r0, r4
 80076fc:	f7ff ff62 	bl	80075c4 <HAL_TIM_PWM_PulseFinishedCallback>
 8007700:	e776      	b.n	80075f0 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007702:	f7ff ff5d 	bl	80075c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007706:	4620      	mov	r0, r4
 8007708:	f7ff ff5c 	bl	80075c4 <HAL_TIM_PWM_PulseFinishedCallback>
 800770c:	e785      	b.n	800761a <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800770e:	f7ff ff57 	bl	80075c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007712:	4620      	mov	r0, r4
 8007714:	f7ff ff56 	bl	80075c4 <HAL_TIM_PWM_PulseFinishedCallback>
 8007718:	e793      	b.n	8007642 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800771a:	f7ff ff51 	bl	80075c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800771e:	4620      	mov	r0, r4
 8007720:	f7ff ff50 	bl	80075c4 <HAL_TIM_PWM_PulseFinishedCallback>
 8007724:	e7a2      	b.n	800766c <HAL_TIM_IRQHandler+0xa4>
}
 8007726:	bd10      	pop	{r4, pc}

08007728 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007728:	4a30      	ldr	r2, [pc, #192]	; (80077ec <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 800772a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800772c:	4290      	cmp	r0, r2
 800772e:	d012      	beq.n	8007756 <TIM_Base_SetConfig+0x2e>
 8007730:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8007734:	d00f      	beq.n	8007756 <TIM_Base_SetConfig+0x2e>
 8007736:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800773a:	4290      	cmp	r0, r2
 800773c:	d00b      	beq.n	8007756 <TIM_Base_SetConfig+0x2e>
 800773e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007742:	4290      	cmp	r0, r2
 8007744:	d007      	beq.n	8007756 <TIM_Base_SetConfig+0x2e>
 8007746:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800774a:	4290      	cmp	r0, r2
 800774c:	d003      	beq.n	8007756 <TIM_Base_SetConfig+0x2e>
 800774e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8007752:	4290      	cmp	r0, r2
 8007754:	d119      	bne.n	800778a <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8007756:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007758:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800775c:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800775e:	4a23      	ldr	r2, [pc, #140]	; (80077ec <TIM_Base_SetConfig+0xc4>)
 8007760:	4290      	cmp	r0, r2
 8007762:	d029      	beq.n	80077b8 <TIM_Base_SetConfig+0x90>
 8007764:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8007768:	d026      	beq.n	80077b8 <TIM_Base_SetConfig+0x90>
 800776a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800776e:	4290      	cmp	r0, r2
 8007770:	d022      	beq.n	80077b8 <TIM_Base_SetConfig+0x90>
 8007772:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007776:	4290      	cmp	r0, r2
 8007778:	d01e      	beq.n	80077b8 <TIM_Base_SetConfig+0x90>
 800777a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800777e:	4290      	cmp	r0, r2
 8007780:	d01a      	beq.n	80077b8 <TIM_Base_SetConfig+0x90>
 8007782:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8007786:	4290      	cmp	r0, r2
 8007788:	d016      	beq.n	80077b8 <TIM_Base_SetConfig+0x90>
 800778a:	4a19      	ldr	r2, [pc, #100]	; (80077f0 <TIM_Base_SetConfig+0xc8>)
 800778c:	4290      	cmp	r0, r2
 800778e:	d013      	beq.n	80077b8 <TIM_Base_SetConfig+0x90>
 8007790:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007794:	4290      	cmp	r0, r2
 8007796:	d00f      	beq.n	80077b8 <TIM_Base_SetConfig+0x90>
 8007798:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800779c:	4290      	cmp	r0, r2
 800779e:	d00b      	beq.n	80077b8 <TIM_Base_SetConfig+0x90>
 80077a0:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80077a4:	4290      	cmp	r0, r2
 80077a6:	d007      	beq.n	80077b8 <TIM_Base_SetConfig+0x90>
 80077a8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80077ac:	4290      	cmp	r0, r2
 80077ae:	d003      	beq.n	80077b8 <TIM_Base_SetConfig+0x90>
 80077b0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80077b4:	4290      	cmp	r0, r2
 80077b6:	d103      	bne.n	80077c0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80077b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80077bc:	68ca      	ldr	r2, [r1, #12]
 80077be:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80077c0:	694a      	ldr	r2, [r1, #20]
 80077c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077c6:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80077c8:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80077ca:	688b      	ldr	r3, [r1, #8]
 80077cc:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80077ce:	680b      	ldr	r3, [r1, #0]
 80077d0:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80077d2:	4b06      	ldr	r3, [pc, #24]	; (80077ec <TIM_Base_SetConfig+0xc4>)
 80077d4:	4298      	cmp	r0, r3
 80077d6:	d003      	beq.n	80077e0 <TIM_Base_SetConfig+0xb8>
 80077d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80077dc:	4298      	cmp	r0, r3
 80077de:	d101      	bne.n	80077e4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80077e0:	690b      	ldr	r3, [r1, #16]
 80077e2:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80077e4:	2301      	movs	r3, #1
 80077e6:	6143      	str	r3, [r0, #20]
}
 80077e8:	4770      	bx	lr
 80077ea:	bf00      	nop
 80077ec:	40010000 	.word	0x40010000
 80077f0:	40014000 	.word	0x40014000

080077f4 <HAL_TIM_Base_Init>:
{
 80077f4:	b510      	push	{r4, lr}
  if (htim == NULL)
 80077f6:	4604      	mov	r4, r0
 80077f8:	b350      	cbz	r0, 8007850 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 80077fa:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80077fe:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007802:	b91b      	cbnz	r3, 800780c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8007804:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8007808:	f7ff fe9b 	bl	8007542 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800780c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800780e:	6820      	ldr	r0, [r4, #0]
 8007810:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 8007812:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007816:	f7ff ff87 	bl	8007728 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800781a:	2301      	movs	r3, #1
  return HAL_OK;
 800781c:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800781e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007822:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8007826:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800782a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800782e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8007832:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007836:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800783a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800783e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007842:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8007846:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800784a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800784e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8007850:	2001      	movs	r0, #1
 8007852:	e7fc      	b.n	800784e <HAL_TIM_Base_Init+0x5a>

08007854 <HAL_TIMEx_CommutCallback>:
 8007854:	4770      	bx	lr

08007856 <HAL_TIMEx_BreakCallback>:
 8007856:	4770      	bx	lr

08007858 <HAL_TIMEx_Break2Callback>:
 8007858:	4770      	bx	lr

0800785a <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800785a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800785e:	680a      	ldr	r2, [r1, #0]
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8007860:	f8d1 9024 	ldr.w	r9, [r1, #36]	; 0x24
 8007864:	e9d1 4307 	ldrd	r4, r3, [r1, #28]
 8007868:	e9d1 5801 	ldrd	r5, r8, [r1, #4]
 800786c:	e9d1 ec03 	ldrd	lr, ip, [r1, #12]
 8007870:	e9d1 7605 	ldrd	r7, r6, [r1, #20]
 8007874:	4323      	orrs	r3, r4
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8007876:	b9a2      	cbnz	r2, 80078a2 <FMC_SDRAM_Init+0x48>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8007878:	ea43 0209 	orr.w	r2, r3, r9
 800787c:	6801      	ldr	r1, [r0, #0]
 800787e:	432a      	orrs	r2, r5
 8007880:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 8007884:	ea42 0308 	orr.w	r3, r2, r8
 8007888:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 800788c:	ea43 030e 	orr.w	r3, r3, lr
 8007890:	ea43 030c 	orr.w	r3, r3, ip
 8007894:	433b      	orrs	r3, r7
 8007896:	4333      	orrs	r3, r6
 8007898:	430b      	orrs	r3, r1
 800789a:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 800789c:	2000      	movs	r0, #0
 800789e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80078a2:	6802      	ldr	r2, [r0, #0]
 80078a4:	ea43 0309 	orr.w	r3, r3, r9
 80078a8:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80078ac:	4313      	orrs	r3, r2
 80078ae:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80078b0:	ea45 0308 	orr.w	r3, r5, r8
 80078b4:	6842      	ldr	r2, [r0, #4]
 80078b6:	ea43 030e 	orr.w	r3, r3, lr
 80078ba:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 80078be:	ea43 030c 	orr.w	r3, r3, ip
 80078c2:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 80078c6:	433b      	orrs	r3, r7
 80078c8:	4333      	orrs	r3, r6
 80078ca:	4313      	orrs	r3, r2
 80078cc:	6043      	str	r3, [r0, #4]
 80078ce:	e7e5      	b.n	800789c <FMC_SDRAM_Init+0x42>

080078d0 <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80078d0:	68cb      	ldr	r3, [r1, #12]
 80078d2:	f103 3cff 	add.w	ip, r3, #4294967295
 80078d6:	694b      	ldr	r3, [r1, #20]
{
 80078d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80078da:	3b01      	subs	r3, #1
 80078dc:	680f      	ldr	r7, [r1, #0]
 80078de:	684c      	ldr	r4, [r1, #4]
 80078e0:	688e      	ldr	r6, [r1, #8]
 80078e2:	051b      	lsls	r3, r3, #20
 80078e4:	690d      	ldr	r5, [r1, #16]
 80078e6:	3c01      	subs	r4, #1
 80078e8:	6989      	ldr	r1, [r1, #24]
 80078ea:	3e01      	subs	r6, #1
 80078ec:	3d01      	subs	r5, #1
 80078ee:	3f01      	subs	r7, #1
 80078f0:	3901      	subs	r1, #1
 80078f2:	0124      	lsls	r4, r4, #4
 80078f4:	0236      	lsls	r6, r6, #8
 80078f6:	042d      	lsls	r5, r5, #16
 80078f8:	0609      	lsls	r1, r1, #24
 80078fa:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  if (Bank == FMC_SDRAM_BANK1)
 80078fe:	b95a      	cbnz	r2, 8007918 <FMC_SDRAM_Timing_Init+0x48>
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8007900:	433b      	orrs	r3, r7
 8007902:	6882      	ldr	r2, [r0, #8]
 8007904:	4323      	orrs	r3, r4
 8007906:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 800790a:	4333      	orrs	r3, r6
 800790c:	432b      	orrs	r3, r5
 800790e:	430b      	orrs	r3, r1
 8007910:	4313      	orrs	r3, r2
 8007912:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
}
 8007914:	2000      	movs	r0, #0
 8007916:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8007918:	6882      	ldr	r2, [r0, #8]
 800791a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800791e:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 8007922:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8007924:	ea44 0306 	orr.w	r3, r4, r6
 8007928:	433b      	orrs	r3, r7
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800792a:	6082      	str	r2, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800792c:	68c2      	ldr	r2, [r0, #12]
 800792e:	432b      	orrs	r3, r5
 8007930:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 8007934:	430b      	orrs	r3, r1
 8007936:	4313      	orrs	r3, r2
 8007938:	60c3      	str	r3, [r0, #12]
 800793a:	e7eb      	b.n	8007914 <FMC_SDRAM_Timing_Init+0x44>

0800793c <FMC_SDRAM_SendCommand>:
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800793c:	6902      	ldr	r2, [r0, #16]
{
 800793e:	b510      	push	{r4, lr}
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8007940:	e9d1 3400 	ldrd	r3, r4, [r1]
 8007944:	0d92      	lsrs	r2, r2, #22
 8007946:	4323      	orrs	r3, r4
 8007948:	68cc      	ldr	r4, [r1, #12]
 800794a:	0592      	lsls	r2, r2, #22
 800794c:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
 8007950:	4313      	orrs	r3, r2
 8007952:	688a      	ldr	r2, [r1, #8]
 8007954:	3a01      	subs	r2, #1
 8007956:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 800795a:	6103      	str	r3, [r0, #16]
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 800795c:	2000      	movs	r0, #0
 800795e:	bd10      	pop	{r4, pc}

08007960 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8007960:	6943      	ldr	r3, [r0, #20]
 8007962:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8007966:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 800796a:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 800796e:	6141      	str	r1, [r0, #20]

  return HAL_OK;
}
 8007970:	2000      	movs	r0, #0
 8007972:	4770      	bx	lr

08007974 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007974:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8007978:	b113      	cbz	r3, 8007980 <osKernelInitialize+0xc>
    stat = osErrorISR;
 800797a:	f06f 0005 	mvn.w	r0, #5
 800797e:	4770      	bx	lr
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007980:	f3ef 8210 	mrs	r2, PRIMASK
  return(result);
 8007984:	4b07      	ldr	r3, [pc, #28]	; (80079a4 <osKernelInitialize+0x30>)
  if (IS_IRQ()) {
 8007986:	b912      	cbnz	r2, 800798e <osKernelInitialize+0x1a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007988:	f3ef 8211 	mrs	r2, BASEPRI
 800798c:	b112      	cbz	r2, 8007994 <osKernelInitialize+0x20>
 800798e:	681a      	ldr	r2, [r3, #0]
 8007990:	2a02      	cmp	r2, #2
 8007992:	d0f2      	beq.n	800797a <osKernelInitialize+0x6>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007994:	6818      	ldr	r0, [r3, #0]
 8007996:	b910      	cbnz	r0, 800799e <osKernelInitialize+0x2a>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007998:	2201      	movs	r2, #1
 800799a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800799c:	4770      	bx	lr
    } else {
      stat = osError;
 800799e:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 80079a2:	4770      	bx	lr
 80079a4:	200047d4 	.word	0x200047d4

080079a8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80079a8:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80079aa:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 80079ae:	b113      	cbz	r3, 80079b6 <osKernelStart+0xe>
    stat = osErrorISR;
 80079b0:	f06f 0005 	mvn.w	r0, #5
      stat = osError;
    }
  }

  return (stat);
}
 80079b4:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80079b6:	f3ef 8210 	mrs	r2, PRIMASK
  return(result);
 80079ba:	4b0a      	ldr	r3, [pc, #40]	; (80079e4 <osKernelStart+0x3c>)
  if (IS_IRQ()) {
 80079bc:	b912      	cbnz	r2, 80079c4 <osKernelStart+0x1c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80079be:	f3ef 8211 	mrs	r2, BASEPRI
 80079c2:	b112      	cbz	r2, 80079ca <osKernelStart+0x22>
 80079c4:	681a      	ldr	r2, [r3, #0]
 80079c6:	2a02      	cmp	r2, #2
 80079c8:	d0f2      	beq.n	80079b0 <osKernelStart+0x8>
    if (KernelState == osKernelReady) {
 80079ca:	681a      	ldr	r2, [r3, #0]
 80079cc:	2a01      	cmp	r2, #1
 80079ce:	d105      	bne.n	80079dc <osKernelStart+0x34>
      KernelState = osKernelRunning;
 80079d0:	2202      	movs	r2, #2
 80079d2:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80079d4:	f001 fe7c 	bl	80096d0 <vTaskStartScheduler>
      stat = osOK;
 80079d8:	2000      	movs	r0, #0
 80079da:	e7eb      	b.n	80079b4 <osKernelStart+0xc>
      stat = osError;
 80079dc:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 80079e0:	e7e8      	b.n	80079b4 <osKernelStart+0xc>
 80079e2:	bf00      	nop
 80079e4:	200047d4 	.word	0x200047d4

080079e8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80079e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079ea:	4614      	mov	r4, r2
 80079ec:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80079ee:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80079f0:	460b      	mov	r3, r1
  hTask = NULL;
 80079f2:	9205      	str	r2, [sp, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80079f4:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 80079f8:	bb22      	cbnz	r2, 8007a44 <osThreadNew+0x5c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80079fa:	f3ef 8210 	mrs	r2, PRIMASK
 80079fe:	b912      	cbnz	r2, 8007a06 <osThreadNew+0x1e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007a00:	f3ef 8211 	mrs	r2, BASEPRI
 8007a04:	b11a      	cbz	r2, 8007a0e <osThreadNew+0x26>
 8007a06:	4a22      	ldr	r2, [pc, #136]	; (8007a90 <osThreadNew+0xa8>)
 8007a08:	6812      	ldr	r2, [r2, #0]
 8007a0a:	2a02      	cmp	r2, #2
 8007a0c:	d01a      	beq.n	8007a44 <osThreadNew+0x5c>
 8007a0e:	b1c8      	cbz	r0, 8007a44 <osThreadNew+0x5c>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 8007a10:	2c00      	cmp	r4, #0
 8007a12:	d02f      	beq.n	8007a74 <osThreadNew+0x8c>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8007a14:	69a5      	ldr	r5, [r4, #24]
 8007a16:	2d00      	cmp	r5, #0
 8007a18:	bf08      	it	eq
 8007a1a:	2518      	moveq	r5, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007a1c:	1e6a      	subs	r2, r5, #1
 8007a1e:	46ac      	mov	ip, r5
 8007a20:	2a37      	cmp	r2, #55	; 0x37
 8007a22:	d82b      	bhi.n	8007a7c <osThreadNew+0x94>
 8007a24:	6862      	ldr	r2, [r4, #4]
 8007a26:	07d2      	lsls	r2, r2, #31
 8007a28:	d428      	bmi.n	8007a7c <osThreadNew+0x94>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 8007a2a:	6966      	ldr	r6, [r4, #20]
 8007a2c:	b16e      	cbz	r6, 8007a4a <osThreadNew+0x62>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007a2e:	08b2      	lsrs	r2, r6, #2
      if (attr->name != NULL) {
 8007a30:	6821      	ldr	r1, [r4, #0]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007a32:	e9d4 7e02 	ldrd	r7, lr, [r4, #8]
 8007a36:	b157      	cbz	r7, 8007a4e <osThreadNew+0x66>
 8007a38:	f1be 0f5f 	cmp.w	lr, #95	; 0x5f
 8007a3c:	d902      	bls.n	8007a44 <osThreadNew+0x5c>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007a3e:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007a40:	b104      	cbz	r4, 8007a44 <osThreadNew+0x5c>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007a42:	b9ee      	cbnz	r6, 8007a80 <osThreadNew+0x98>
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007a44:	9805      	ldr	r0, [sp, #20]
}
 8007a46:	b007      	add	sp, #28
 8007a48:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 8007a4a:	2280      	movs	r2, #128	; 0x80
 8007a4c:	e7f0      	b.n	8007a30 <osThreadNew+0x48>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007a4e:	f1be 0f00 	cmp.w	lr, #0
 8007a52:	d1f7      	bne.n	8007a44 <osThreadNew+0x5c>
      if (mem == 0) {
 8007a54:	6924      	ldr	r4, [r4, #16]
 8007a56:	2c00      	cmp	r4, #0
 8007a58:	d1f4      	bne.n	8007a44 <osThreadNew+0x5c>
 8007a5a:	460c      	mov	r4, r1
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007a5c:	a905      	add	r1, sp, #20
 8007a5e:	b292      	uxth	r2, r2
 8007a60:	e9cd c100 	strd	ip, r1, [sp]
 8007a64:	4621      	mov	r1, r4
 8007a66:	f001 fca8 	bl	80093ba <xTaskCreate>
 8007a6a:	2801      	cmp	r0, #1
          hTask = NULL;
 8007a6c:	bf1c      	itt	ne
 8007a6e:	2300      	movne	r3, #0
 8007a70:	9305      	strne	r3, [sp, #20]
 8007a72:	e7e7      	b.n	8007a44 <osThreadNew+0x5c>
    prio  = (UBaseType_t)osPriorityNormal;
 8007a74:	f04f 0c18 	mov.w	ip, #24
    stack = configMINIMAL_STACK_SIZE;
 8007a78:	2280      	movs	r2, #128	; 0x80
 8007a7a:	e7ef      	b.n	8007a5c <osThreadNew+0x74>
        return (NULL);
 8007a7c:	2000      	movs	r0, #0
 8007a7e:	e7e2      	b.n	8007a46 <osThreadNew+0x5e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007a80:	e9cd 4701 	strd	r4, r7, [sp, #4]
 8007a84:	9500      	str	r5, [sp, #0]
 8007a86:	f001 fc5a 	bl	800933e <xTaskCreateStatic>
 8007a8a:	9005      	str	r0, [sp, #20]
 8007a8c:	e7da      	b.n	8007a44 <osThreadNew+0x5c>
 8007a8e:	bf00      	nop
 8007a90:	200047d4 	.word	0x200047d4

08007a94 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8007a94:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a96:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8007a9a:	b113      	cbz	r3, 8007aa2 <osDelay+0xe>
    stat = osErrorISR;
 8007a9c:	f06f 0005 	mvn.w	r0, #5
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 8007aa0:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007aa2:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 8007aa6:	b913      	cbnz	r3, 8007aae <osDelay+0x1a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007aa8:	f3ef 8311 	mrs	r3, BASEPRI
 8007aac:	b11b      	cbz	r3, 8007ab6 <osDelay+0x22>
 8007aae:	4b05      	ldr	r3, [pc, #20]	; (8007ac4 <osDelay+0x30>)
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	2b02      	cmp	r3, #2
 8007ab4:	d0f2      	beq.n	8007a9c <osDelay+0x8>
    if (ticks != 0U) {
 8007ab6:	2800      	cmp	r0, #0
 8007ab8:	d0f2      	beq.n	8007aa0 <osDelay+0xc>
      vTaskDelay(ticks);
 8007aba:	f001 fdc7 	bl	800964c <vTaskDelay>
    stat = osOK;
 8007abe:	2000      	movs	r0, #0
 8007ac0:	e7ee      	b.n	8007aa0 <osDelay+0xc>
 8007ac2:	bf00      	nop
 8007ac4:	200047d4 	.word	0x200047d4

08007ac8 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8007ac8:	b570      	push	{r4, r5, r6, lr}
 8007aca:	4605      	mov	r5, r0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007acc:	f3ef 8605 	mrs	r6, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 8007ad0:	b116      	cbz	r6, 8007ad8 <osMutexNew+0x10>
  hMutex = NULL;
 8007ad2:	2400      	movs	r4, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 8007ad4:	4620      	mov	r0, r4
 8007ad6:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ad8:	f3ef 8210 	mrs	r2, PRIMASK
  if (!IS_IRQ()) {
 8007adc:	b912      	cbnz	r2, 8007ae4 <osMutexNew+0x1c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007ade:	f3ef 8211 	mrs	r2, BASEPRI
 8007ae2:	b11a      	cbz	r2, 8007aec <osMutexNew+0x24>
 8007ae4:	4a18      	ldr	r2, [pc, #96]	; (8007b48 <osMutexNew+0x80>)
 8007ae6:	6812      	ldr	r2, [r2, #0]
 8007ae8:	2a02      	cmp	r2, #2
 8007aea:	d0f2      	beq.n	8007ad2 <osMutexNew+0xa>
    if (attr != NULL) {
 8007aec:	b115      	cbz	r5, 8007af4 <osMutexNew+0x2c>
      type = attr->attr_bits;
 8007aee:	686e      	ldr	r6, [r5, #4]
    if ((type & osMutexRobust) != osMutexRobust) {
 8007af0:	0733      	lsls	r3, r6, #28
 8007af2:	d4ee      	bmi.n	8007ad2 <osMutexNew+0xa>
    if ((type & osMutexRecursive) == osMutexRecursive) {
 8007af4:	f006 0601 	and.w	r6, r6, #1
      if (attr != NULL) {
 8007af8:	b17d      	cbz	r5, 8007b1a <osMutexNew+0x52>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007afa:	e9d5 1302 	ldrd	r1, r3, [r5, #8]
 8007afe:	b151      	cbz	r1, 8007b16 <osMutexNew+0x4e>
 8007b00:	2b4f      	cmp	r3, #79	; 0x4f
 8007b02:	d9e6      	bls.n	8007ad2 <osMutexNew+0xa>
        if (rmtx != 0U) {
 8007b04:	b1de      	cbz	r6, 8007b3e <osMutexNew+0x76>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8007b06:	2004      	movs	r0, #4
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8007b08:	f000 ff50 	bl	80089ac <xQueueCreateMutexStatic>
 8007b0c:	4604      	mov	r4, r0
      if (hMutex != NULL) {
 8007b0e:	2800      	cmp	r0, #0
 8007b10:	d0df      	beq.n	8007ad2 <osMutexNew+0xa>
          name = attr->name;
 8007b12:	682d      	ldr	r5, [r5, #0]
 8007b14:	e00a      	b.n	8007b2c <osMutexNew+0x64>
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d1db      	bne.n	8007ad2 <osMutexNew+0xa>
          if (rmtx != 0U) {
 8007b1a:	b196      	cbz	r6, 8007b42 <osMutexNew+0x7a>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8007b1c:	2004      	movs	r0, #4
            hMutex = xSemaphoreCreateMutex ();
 8007b1e:	f000 ff7a 	bl	8008a16 <xQueueCreateMutex>
 8007b22:	4604      	mov	r4, r0
      if (hMutex != NULL) {
 8007b24:	2800      	cmp	r0, #0
 8007b26:	d0d4      	beq.n	8007ad2 <osMutexNew+0xa>
        if (attr != NULL) {
 8007b28:	2d00      	cmp	r5, #0
 8007b2a:	d1f2      	bne.n	8007b12 <osMutexNew+0x4a>
        vQueueAddToRegistry (hMutex, name);
 8007b2c:	4629      	mov	r1, r5
 8007b2e:	4620      	mov	r0, r4
 8007b30:	f001 fa3c 	bl	8008fac <vQueueAddToRegistry>
      if ((hMutex != NULL) && (rmtx != 0U)) {
 8007b34:	2e00      	cmp	r6, #0
 8007b36:	d0cd      	beq.n	8007ad4 <osMutexNew+0xc>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8007b38:	f044 0401 	orr.w	r4, r4, #1
  return ((osMutexId_t)hMutex);
 8007b3c:	e7ca      	b.n	8007ad4 <osMutexNew+0xc>
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8007b3e:	2001      	movs	r0, #1
 8007b40:	e7e2      	b.n	8007b08 <osMutexNew+0x40>
            hMutex = xSemaphoreCreateMutex ();
 8007b42:	2001      	movs	r0, #1
 8007b44:	e7eb      	b.n	8007b1e <osMutexNew+0x56>
 8007b46:	bf00      	nop
 8007b48:	200047d4 	.word	0x200047d4

08007b4c <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8007b4c:	4603      	mov	r3, r0
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8007b4e:	f020 0001 	bic.w	r0, r0, #1
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8007b52:	b510      	push	{r4, lr}

  rmtx = (uint32_t)mutex_id & 1U;
 8007b54:	f003 0301 	and.w	r3, r3, #1
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8007b58:	460c      	mov	r4, r1
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007b5a:	f3ef 8205 	mrs	r2, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 8007b5e:	b112      	cbz	r2, 8007b66 <osMutexAcquire+0x1a>
    stat = osErrorISR;
 8007b60:	f06f 0005 	mvn.w	r0, #5
      }
    }
  }

  return (stat);
}
 8007b64:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b66:	f3ef 8210 	mrs	r2, PRIMASK
  if (IS_IRQ()) {
 8007b6a:	b912      	cbnz	r2, 8007b72 <osMutexAcquire+0x26>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007b6c:	f3ef 8211 	mrs	r2, BASEPRI
 8007b70:	b11a      	cbz	r2, 8007b7a <osMutexAcquire+0x2e>
 8007b72:	4a0d      	ldr	r2, [pc, #52]	; (8007ba8 <osMutexAcquire+0x5c>)
 8007b74:	6812      	ldr	r2, [r2, #0]
 8007b76:	2a02      	cmp	r2, #2
 8007b78:	d0f2      	beq.n	8007b60 <osMutexAcquire+0x14>
  else if (hMutex == NULL) {
 8007b7a:	b188      	cbz	r0, 8007ba0 <osMutexAcquire+0x54>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8007b7c:	4621      	mov	r1, r4
    if (rmtx != 0U) {
 8007b7e:	b163      	cbz	r3, 8007b9a <osMutexAcquire+0x4e>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8007b80:	f001 f99b 	bl	8008eba <xQueueTakeMutexRecursive>
 8007b84:	2801      	cmp	r0, #1
 8007b86:	d101      	bne.n	8007b8c <osMutexAcquire+0x40>
  stat = osOK;
 8007b88:	2000      	movs	r0, #0
 8007b8a:	e7eb      	b.n	8007b64 <osMutexAcquire+0x18>
          stat = osErrorResource;
 8007b8c:	2c00      	cmp	r4, #0
 8007b8e:	bf14      	ite	ne
 8007b90:	f06f 0001 	mvnne.w	r0, #1
 8007b94:	f06f 0002 	mvneq.w	r0, #2
 8007b98:	e7e4      	b.n	8007b64 <osMutexAcquire+0x18>
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8007b9a:	f001 f8c3 	bl	8008d24 <xQueueSemaphoreTake>
 8007b9e:	e7f1      	b.n	8007b84 <osMutexAcquire+0x38>
    stat = osErrorParameter;
 8007ba0:	f06f 0003 	mvn.w	r0, #3
 8007ba4:	e7de      	b.n	8007b64 <osMutexAcquire+0x18>
 8007ba6:	bf00      	nop
 8007ba8:	200047d4 	.word	0x200047d4

08007bac <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8007bac:	b508      	push	{r3, lr}
 8007bae:	4603      	mov	r3, r0
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8007bb0:	f020 0001 	bic.w	r0, r0, #1

  rmtx = (uint32_t)mutex_id & 1U;
 8007bb4:	f003 0301 	and.w	r3, r3, #1
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007bb8:	f3ef 8205 	mrs	r2, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 8007bbc:	b112      	cbz	r2, 8007bc4 <osMutexRelease+0x18>
    stat = osErrorISR;
 8007bbe:	f06f 0005 	mvn.w	r0, #5
      }
    }
  }

  return (stat);
}
 8007bc2:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007bc4:	f3ef 8210 	mrs	r2, PRIMASK
  if (IS_IRQ()) {
 8007bc8:	b912      	cbnz	r2, 8007bd0 <osMutexRelease+0x24>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007bca:	f3ef 8211 	mrs	r2, BASEPRI
 8007bce:	b11a      	cbz	r2, 8007bd8 <osMutexRelease+0x2c>
 8007bd0:	4a0a      	ldr	r2, [pc, #40]	; (8007bfc <osMutexRelease+0x50>)
 8007bd2:	6812      	ldr	r2, [r2, #0]
 8007bd4:	2a02      	cmp	r2, #2
 8007bd6:	d0f2      	beq.n	8007bbe <osMutexRelease+0x12>
  else if (hMutex == NULL) {
 8007bd8:	b168      	cbz	r0, 8007bf6 <osMutexRelease+0x4a>
    if (rmtx != 0U) {
 8007bda:	b13b      	cbz	r3, 8007bec <osMutexRelease+0x40>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8007bdc:	f000 fefb 	bl	80089d6 <xQueueGiveMutexRecursive>
 8007be0:	2801      	cmp	r0, #1
  stat = osOK;
 8007be2:	bf0c      	ite	eq
 8007be4:	2000      	moveq	r0, #0
        stat = osErrorResource;
 8007be6:	f06f 0002 	mvnne.w	r0, #2
 8007bea:	e7ea      	b.n	8007bc2 <osMutexRelease+0x16>
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8007bec:	461a      	mov	r2, r3
 8007bee:	4619      	mov	r1, r3
 8007bf0:	f000 fe21 	bl	8008836 <xQueueGenericSend>
 8007bf4:	e7f4      	b.n	8007be0 <osMutexRelease+0x34>
    stat = osErrorParameter;
 8007bf6:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 8007bfa:	e7e2      	b.n	8007bc2 <osMutexRelease+0x16>
 8007bfc:	200047d4 	.word	0x200047d4

08007c00 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8007c00:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007c02:	460e      	mov	r6, r1
 8007c04:	4615      	mov	r5, r2
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c06:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8007c0a:	b11b      	cbz	r3, 8007c14 <osSemaphoreNew+0x14>
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
            vSemaphoreDelete (hSemaphore);
            hSemaphore = NULL;
 8007c0c:	2400      	movs	r4, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 8007c0e:	4620      	mov	r0, r4
 8007c10:	b002      	add	sp, #8
 8007c12:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c14:	f3ef 8310 	mrs	r3, PRIMASK
  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8007c18:	b913      	cbnz	r3, 8007c20 <osSemaphoreNew+0x20>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007c1a:	f3ef 8311 	mrs	r3, BASEPRI
 8007c1e:	b11b      	cbz	r3, 8007c28 <osSemaphoreNew+0x28>
 8007c20:	4b21      	ldr	r3, [pc, #132]	; (8007ca8 <osSemaphoreNew+0xa8>)
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	2b02      	cmp	r3, #2
 8007c26:	d0f1      	beq.n	8007c0c <osSemaphoreNew+0xc>
 8007c28:	2800      	cmp	r0, #0
 8007c2a:	d0ef      	beq.n	8007c0c <osSemaphoreNew+0xc>
 8007c2c:	42b0      	cmp	r0, r6
 8007c2e:	d3ed      	bcc.n	8007c0c <osSemaphoreNew+0xc>
    if (attr != NULL) {
 8007c30:	b1ed      	cbz	r5, 8007c6e <osSemaphoreNew+0x6e>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007c32:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
 8007c36:	b1c3      	cbz	r3, 8007c6a <osSemaphoreNew+0x6a>
 8007c38:	2a4f      	cmp	r2, #79	; 0x4f
 8007c3a:	d9e7      	bls.n	8007c0c <osSemaphoreNew+0xc>
      if (max_count == 1U) {
 8007c3c:	2801      	cmp	r0, #1
 8007c3e:	d129      	bne.n	8007c94 <osSemaphoreNew+0x94>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8007c40:	2203      	movs	r2, #3
 8007c42:	9200      	str	r2, [sp, #0]
 8007c44:	2200      	movs	r2, #0
 8007c46:	4611      	mov	r1, r2
 8007c48:	f000 fd70 	bl	800872c <xQueueGenericCreateStatic>
          hSemaphore = xSemaphoreCreateBinary();
 8007c4c:	4604      	mov	r4, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8007c4e:	2800      	cmp	r0, #0
 8007c50:	d0dc      	beq.n	8007c0c <osSemaphoreNew+0xc>
 8007c52:	b1ce      	cbz	r6, 8007c88 <osSemaphoreNew+0x88>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007c54:	2300      	movs	r3, #0
 8007c56:	461a      	mov	r2, r3
 8007c58:	4619      	mov	r1, r3
 8007c5a:	f000 fdec 	bl	8008836 <xQueueGenericSend>
 8007c5e:	2801      	cmp	r0, #1
 8007c60:	d012      	beq.n	8007c88 <osSemaphoreNew+0x88>
            vSemaphoreDelete (hSemaphore);
 8007c62:	4620      	mov	r0, r4
 8007c64:	f001 f9c8 	bl	8008ff8 <vQueueDelete>
 8007c68:	e7d0      	b.n	8007c0c <osSemaphoreNew+0xc>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007c6a:	2a00      	cmp	r2, #0
 8007c6c:	d1ce      	bne.n	8007c0c <osSemaphoreNew+0xc>
      if (max_count == 1U) {
 8007c6e:	2801      	cmp	r0, #1
 8007c70:	d104      	bne.n	8007c7c <osSemaphoreNew+0x7c>
          hSemaphore = xSemaphoreCreateBinary();
 8007c72:	2203      	movs	r2, #3
 8007c74:	2100      	movs	r1, #0
 8007c76:	f000 fd6d 	bl	8008754 <xQueueGenericCreate>
 8007c7a:	e7e7      	b.n	8007c4c <osSemaphoreNew+0x4c>
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8007c7c:	4631      	mov	r1, r6
 8007c7e:	f000 fdb8 	bl	80087f2 <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 8007c82:	4604      	mov	r4, r0
 8007c84:	2800      	cmp	r0, #0
 8007c86:	d0c1      	beq.n	8007c0c <osSemaphoreNew+0xc>
        if (attr != NULL) {
 8007c88:	b95d      	cbnz	r5, 8007ca2 <osSemaphoreNew+0xa2>
        vQueueAddToRegistry (hSemaphore, name);
 8007c8a:	4629      	mov	r1, r5
 8007c8c:	4620      	mov	r0, r4
 8007c8e:	f001 f98d 	bl	8008fac <vQueueAddToRegistry>
  return ((osSemaphoreId_t)hSemaphore);
 8007c92:	e7bc      	b.n	8007c0e <osSemaphoreNew+0xe>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8007c94:	461a      	mov	r2, r3
 8007c96:	4631      	mov	r1, r6
 8007c98:	f000 fd85 	bl	80087a6 <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
 8007c9c:	4604      	mov	r4, r0
 8007c9e:	2800      	cmp	r0, #0
 8007ca0:	d0b4      	beq.n	8007c0c <osSemaphoreNew+0xc>
          name = attr->name;
 8007ca2:	682d      	ldr	r5, [r5, #0]
 8007ca4:	e7f1      	b.n	8007c8a <osSemaphoreNew+0x8a>
 8007ca6:	bf00      	nop
 8007ca8:	200047d4 	.word	0x200047d4

08007cac <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8007cac:	b513      	push	{r0, r1, r4, lr}
 8007cae:	460c      	mov	r4, r1
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8007cb0:	b918      	cbnz	r0, 8007cba <osSemaphoreAcquire+0xe>
    stat = osErrorParameter;
 8007cb2:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 8007cb6:	b002      	add	sp, #8
 8007cb8:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007cba:	f3ef 8305 	mrs	r3, IPSR
  else if (IS_IRQ()) {
 8007cbe:	b163      	cbz	r3, 8007cda <osSemaphoreAcquire+0x2e>
    if (timeout != 0U) {
 8007cc0:	2c00      	cmp	r4, #0
 8007cc2:	d1f6      	bne.n	8007cb2 <osSemaphoreAcquire+0x6>
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8007cc4:	aa01      	add	r2, sp, #4
 8007cc6:	4621      	mov	r1, r4
      yield = pdFALSE;
 8007cc8:	9401      	str	r4, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8007cca:	f001 f91a 	bl	8008f02 <xQueueReceiveFromISR>
 8007cce:	2801      	cmp	r0, #1
 8007cd0:	d113      	bne.n	8007cfa <osSemaphoreAcquire+0x4e>
        portYIELD_FROM_ISR (yield);
 8007cd2:	9b01      	ldr	r3, [sp, #4]
 8007cd4:	b9a3      	cbnz	r3, 8007d00 <osSemaphoreAcquire+0x54>
  stat = osOK;
 8007cd6:	2000      	movs	r0, #0
 8007cd8:	e7ed      	b.n	8007cb6 <osSemaphoreAcquire+0xa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007cda:	f3ef 8310 	mrs	r3, PRIMASK
  else if (IS_IRQ()) {
 8007cde:	b913      	cbnz	r3, 8007ce6 <osSemaphoreAcquire+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007ce0:	f3ef 8311 	mrs	r3, BASEPRI
 8007ce4:	b11b      	cbz	r3, 8007cee <osSemaphoreAcquire+0x42>
 8007ce6:	4b0d      	ldr	r3, [pc, #52]	; (8007d1c <osSemaphoreAcquire+0x70>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	2b02      	cmp	r3, #2
 8007cec:	d0e8      	beq.n	8007cc0 <osSemaphoreAcquire+0x14>
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8007cee:	4621      	mov	r1, r4
 8007cf0:	f001 f818 	bl	8008d24 <xQueueSemaphoreTake>
 8007cf4:	2801      	cmp	r0, #1
 8007cf6:	d0ee      	beq.n	8007cd6 <osSemaphoreAcquire+0x2a>
      if (timeout != 0U) {
 8007cf8:	b96c      	cbnz	r4, 8007d16 <osSemaphoreAcquire+0x6a>
        stat = osErrorResource;
 8007cfa:	f06f 0002 	mvn.w	r0, #2
 8007cfe:	e7da      	b.n	8007cb6 <osSemaphoreAcquire+0xa>
        portYIELD_FROM_ISR (yield);
 8007d00:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007d04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d08:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007d0c:	f3bf 8f4f 	dsb	sy
 8007d10:	f3bf 8f6f 	isb	sy
 8007d14:	e7df      	b.n	8007cd6 <osSemaphoreAcquire+0x2a>
        stat = osErrorTimeout;
 8007d16:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 8007d1a:	e7cc      	b.n	8007cb6 <osSemaphoreAcquire+0xa>
 8007d1c:	200047d4 	.word	0x200047d4

08007d20 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8007d20:	b513      	push	{r0, r1, r4, lr}
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8007d22:	b370      	cbz	r0, 8007d82 <osSemaphoreRelease+0x62>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d24:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 8007d28:	b14b      	cbz	r3, 8007d3e <osSemaphoreRelease+0x1e>
    yield = pdFALSE;
 8007d2a:	2400      	movs	r4, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007d2c:	a901      	add	r1, sp, #4
    yield = pdFALSE;
 8007d2e:	9401      	str	r4, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007d30:	f000 fef7 	bl	8008b22 <xQueueGiveFromISR>
 8007d34:	2801      	cmp	r0, #1
 8007d36:	d014      	beq.n	8007d62 <osSemaphoreRelease+0x42>
      portYIELD_FROM_ISR (yield);
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
      stat = osErrorResource;
 8007d38:	f06f 0002 	mvn.w	r0, #2
 8007d3c:	e014      	b.n	8007d68 <osSemaphoreRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d3e:	f3ef 8310 	mrs	r3, PRIMASK
  else if (IS_IRQ()) {
 8007d42:	b913      	cbnz	r3, 8007d4a <osSemaphoreRelease+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007d44:	f3ef 8311 	mrs	r3, BASEPRI
 8007d48:	b11b      	cbz	r3, 8007d52 <osSemaphoreRelease+0x32>
 8007d4a:	4b0f      	ldr	r3, [pc, #60]	; (8007d88 <osSemaphoreRelease+0x68>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	2b02      	cmp	r3, #2
 8007d50:	d0eb      	beq.n	8007d2a <osSemaphoreRelease+0xa>
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007d52:	2300      	movs	r3, #0
 8007d54:	461a      	mov	r2, r3
 8007d56:	4619      	mov	r1, r3
 8007d58:	f000 fd6d 	bl	8008836 <xQueueGenericSend>
 8007d5c:	2801      	cmp	r0, #1
 8007d5e:	d002      	beq.n	8007d66 <osSemaphoreRelease+0x46>
 8007d60:	e7ea      	b.n	8007d38 <osSemaphoreRelease+0x18>
      portYIELD_FROM_ISR (yield);
 8007d62:	9b01      	ldr	r3, [sp, #4]
 8007d64:	b913      	cbnz	r3, 8007d6c <osSemaphoreRelease+0x4c>
  stat = osOK;
 8007d66:	2000      	movs	r0, #0
    }
  }

  return (stat);
}
 8007d68:	b002      	add	sp, #8
 8007d6a:	bd10      	pop	{r4, pc}
      portYIELD_FROM_ISR (yield);
 8007d6c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007d70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d74:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007d78:	f3bf 8f4f 	dsb	sy
 8007d7c:	f3bf 8f6f 	isb	sy
 8007d80:	e7f1      	b.n	8007d66 <osSemaphoreRelease+0x46>
    stat = osErrorParameter;
 8007d82:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 8007d86:	e7ef      	b.n	8007d68 <osSemaphoreRelease+0x48>
 8007d88:	200047d4 	.word	0x200047d4

08007d8c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8007d8c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007d8e:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d90:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8007d94:	b11b      	cbz	r3, 8007d9e <osMessageQueueNew+0x12>
  hQueue = NULL;
 8007d96:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 8007d98:	4628      	mov	r0, r5
 8007d9a:	b002      	add	sp, #8
 8007d9c:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d9e:	f3ef 8310 	mrs	r3, PRIMASK
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8007da2:	b913      	cbnz	r3, 8007daa <osMessageQueueNew+0x1e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007da4:	f3ef 8311 	mrs	r3, BASEPRI
 8007da8:	b11b      	cbz	r3, 8007db2 <osMessageQueueNew+0x26>
 8007daa:	4b1a      	ldr	r3, [pc, #104]	; (8007e14 <osMessageQueueNew+0x88>)
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	2b02      	cmp	r3, #2
 8007db0:	d0f1      	beq.n	8007d96 <osMessageQueueNew+0xa>
 8007db2:	2800      	cmp	r0, #0
 8007db4:	d0ef      	beq.n	8007d96 <osMessageQueueNew+0xa>
 8007db6:	2900      	cmp	r1, #0
 8007db8:	d0ed      	beq.n	8007d96 <osMessageQueueNew+0xa>
    if (attr != NULL) {
 8007dba:	b1ec      	cbz	r4, 8007df8 <osMessageQueueNew+0x6c>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007dbc:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 8007dc0:	b193      	cbz	r3, 8007de8 <osMessageQueueNew+0x5c>
 8007dc2:	2a4f      	cmp	r2, #79	; 0x4f
 8007dc4:	d9e7      	bls.n	8007d96 <osMessageQueueNew+0xa>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007dc6:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007dc8:	2a00      	cmp	r2, #0
 8007dca:	d0e4      	beq.n	8007d96 <osMessageQueueNew+0xa>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007dcc:	fb01 f500 	mul.w	r5, r1, r0
 8007dd0:	6966      	ldr	r6, [r4, #20]
 8007dd2:	42ae      	cmp	r6, r5
 8007dd4:	d3df      	bcc.n	8007d96 <osMessageQueueNew+0xa>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8007dd6:	2500      	movs	r5, #0
 8007dd8:	9500      	str	r5, [sp, #0]
 8007dda:	f000 fca7 	bl	800872c <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 8007dde:	4605      	mov	r5, r0
 8007de0:	2800      	cmp	r0, #0
 8007de2:	d0d8      	beq.n	8007d96 <osMessageQueueNew+0xa>
        name = attr->name;
 8007de4:	6824      	ldr	r4, [r4, #0]
 8007de6:	e00f      	b.n	8007e08 <osMessageQueueNew+0x7c>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007de8:	2a00      	cmp	r2, #0
 8007dea:	d1d4      	bne.n	8007d96 <osMessageQueueNew+0xa>
 8007dec:	6923      	ldr	r3, [r4, #16]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d1d1      	bne.n	8007d96 <osMessageQueueNew+0xa>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007df2:	6963      	ldr	r3, [r4, #20]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d1ce      	bne.n	8007d96 <osMessageQueueNew+0xa>
        hQueue = xQueueCreate (msg_count, msg_size);
 8007df8:	2200      	movs	r2, #0
 8007dfa:	f000 fcab 	bl	8008754 <xQueueGenericCreate>
    if (hQueue != NULL) {
 8007dfe:	4605      	mov	r5, r0
 8007e00:	2800      	cmp	r0, #0
 8007e02:	d0c8      	beq.n	8007d96 <osMessageQueueNew+0xa>
      if (attr != NULL) {
 8007e04:	2c00      	cmp	r4, #0
 8007e06:	d1ed      	bne.n	8007de4 <osMessageQueueNew+0x58>
      vQueueAddToRegistry (hQueue, name);
 8007e08:	4621      	mov	r1, r4
 8007e0a:	4628      	mov	r0, r5
 8007e0c:	f001 f8ce 	bl	8008fac <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 8007e10:	e7c2      	b.n	8007d98 <osMessageQueueNew+0xc>
 8007e12:	bf00      	nop
 8007e14:	200047d4 	.word	0x200047d4

08007e18 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8007e18:	b513      	push	{r0, r1, r4, lr}
 8007e1a:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e1c:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8007e20:	b123      	cbz	r3, 8007e2c <osMessageQueuePut+0x14>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007e22:	b9d8      	cbnz	r0, 8007e5c <osMessageQueuePut+0x44>
      stat = osErrorParameter;
 8007e24:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 8007e28:	b002      	add	sp, #8
 8007e2a:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e2c:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 8007e30:	b913      	cbnz	r3, 8007e38 <osMessageQueuePut+0x20>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007e32:	f3ef 8311 	mrs	r3, BASEPRI
 8007e36:	b11b      	cbz	r3, 8007e40 <osMessageQueuePut+0x28>
 8007e38:	4b17      	ldr	r3, [pc, #92]	; (8007e98 <osMessageQueuePut+0x80>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	2b02      	cmp	r3, #2
 8007e3e:	d0f0      	beq.n	8007e22 <osMessageQueuePut+0xa>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007e40:	2800      	cmp	r0, #0
 8007e42:	d0ef      	beq.n	8007e24 <osMessageQueuePut+0xc>
 8007e44:	2900      	cmp	r1, #0
 8007e46:	d0ed      	beq.n	8007e24 <osMessageQueuePut+0xc>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007e48:	2300      	movs	r3, #0
 8007e4a:	4622      	mov	r2, r4
 8007e4c:	f000 fcf3 	bl	8008836 <xQueueGenericSend>
 8007e50:	2801      	cmp	r0, #1
 8007e52:	d010      	beq.n	8007e76 <osMessageQueuePut+0x5e>
        if (timeout != 0U) {
 8007e54:	b9e4      	cbnz	r4, 8007e90 <osMessageQueuePut+0x78>
          stat = osErrorResource;
 8007e56:	f06f 0002 	mvn.w	r0, #2
 8007e5a:	e7e5      	b.n	8007e28 <osMessageQueuePut+0x10>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007e5c:	2900      	cmp	r1, #0
 8007e5e:	d0e1      	beq.n	8007e24 <osMessageQueuePut+0xc>
 8007e60:	2c00      	cmp	r4, #0
 8007e62:	d1df      	bne.n	8007e24 <osMessageQueuePut+0xc>
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8007e64:	4623      	mov	r3, r4
 8007e66:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 8007e68:	9401      	str	r4, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8007e6a:	f000 fdf1 	bl	8008a50 <xQueueGenericSendFromISR>
 8007e6e:	2801      	cmp	r0, #1
 8007e70:	d1f1      	bne.n	8007e56 <osMessageQueuePut+0x3e>
        portYIELD_FROM_ISR (yield);
 8007e72:	9b01      	ldr	r3, [sp, #4]
 8007e74:	b90b      	cbnz	r3, 8007e7a <osMessageQueuePut+0x62>
  stat = osOK;
 8007e76:	2000      	movs	r0, #0
 8007e78:	e7d6      	b.n	8007e28 <osMessageQueuePut+0x10>
        portYIELD_FROM_ISR (yield);
 8007e7a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007e7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e82:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007e86:	f3bf 8f4f 	dsb	sy
 8007e8a:	f3bf 8f6f 	isb	sy
 8007e8e:	e7f2      	b.n	8007e76 <osMessageQueuePut+0x5e>
          stat = osErrorTimeout;
 8007e90:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 8007e94:	e7c8      	b.n	8007e28 <osMessageQueuePut+0x10>
 8007e96:	bf00      	nop
 8007e98:	200047d4 	.word	0x200047d4

08007e9c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8007e9c:	b513      	push	{r0, r1, r4, lr}
 8007e9e:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ea0:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8007ea4:	b123      	cbz	r3, 8007eb0 <osMessageQueueGet+0x14>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007ea6:	b9d0      	cbnz	r0, 8007ede <osMessageQueueGet+0x42>
      stat = osErrorParameter;
 8007ea8:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 8007eac:	b002      	add	sp, #8
 8007eae:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007eb0:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 8007eb4:	b913      	cbnz	r3, 8007ebc <osMessageQueueGet+0x20>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007eb6:	f3ef 8311 	mrs	r3, BASEPRI
 8007eba:	b11b      	cbz	r3, 8007ec4 <osMessageQueueGet+0x28>
 8007ebc:	4b16      	ldr	r3, [pc, #88]	; (8007f18 <osMessageQueueGet+0x7c>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	2b02      	cmp	r3, #2
 8007ec2:	d0f0      	beq.n	8007ea6 <osMessageQueueGet+0xa>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007ec4:	2800      	cmp	r0, #0
 8007ec6:	d0ef      	beq.n	8007ea8 <osMessageQueueGet+0xc>
 8007ec8:	2900      	cmp	r1, #0
 8007eca:	d0ed      	beq.n	8007ea8 <osMessageQueueGet+0xc>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007ecc:	4622      	mov	r2, r4
 8007ece:	f000 fe84 	bl	8008bda <xQueueReceive>
 8007ed2:	2801      	cmp	r0, #1
 8007ed4:	d00f      	beq.n	8007ef6 <osMessageQueueGet+0x5a>
        if (timeout != 0U) {
 8007ed6:	b9dc      	cbnz	r4, 8007f10 <osMessageQueueGet+0x74>
          stat = osErrorResource;
 8007ed8:	f06f 0002 	mvn.w	r0, #2
 8007edc:	e7e6      	b.n	8007eac <osMessageQueueGet+0x10>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007ede:	2900      	cmp	r1, #0
 8007ee0:	d0e2      	beq.n	8007ea8 <osMessageQueueGet+0xc>
 8007ee2:	2c00      	cmp	r4, #0
 8007ee4:	d1e0      	bne.n	8007ea8 <osMessageQueueGet+0xc>
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8007ee6:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 8007ee8:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8007eea:	f001 f80a 	bl	8008f02 <xQueueReceiveFromISR>
 8007eee:	2801      	cmp	r0, #1
 8007ef0:	d1f2      	bne.n	8007ed8 <osMessageQueueGet+0x3c>
        portYIELD_FROM_ISR (yield);
 8007ef2:	9b01      	ldr	r3, [sp, #4]
 8007ef4:	b90b      	cbnz	r3, 8007efa <osMessageQueueGet+0x5e>
  stat = osOK;
 8007ef6:	2000      	movs	r0, #0
 8007ef8:	e7d8      	b.n	8007eac <osMessageQueueGet+0x10>
        portYIELD_FROM_ISR (yield);
 8007efa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007efe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f02:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007f06:	f3bf 8f4f 	dsb	sy
 8007f0a:	f3bf 8f6f 	isb	sy
 8007f0e:	e7f2      	b.n	8007ef6 <osMessageQueueGet+0x5a>
          stat = osErrorTimeout;
 8007f10:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 8007f14:	e7ca      	b.n	8007eac <osMessageQueueGet+0x10>
 8007f16:	bf00      	nop
 8007f18:	200047d4 	.word	0x200047d4

08007f1c <vApplicationGetIdleTaskMemory>:
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007f1c:	4b03      	ldr	r3, [pc, #12]	; (8007f2c <vApplicationGetIdleTaskMemory+0x10>)
 8007f1e:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007f20:	4b03      	ldr	r3, [pc, #12]	; (8007f30 <vApplicationGetIdleTaskMemory+0x14>)
 8007f22:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007f24:	2380      	movs	r3, #128	; 0x80
 8007f26:	6013      	str	r3, [r2, #0]
}
 8007f28:	4770      	bx	lr
 8007f2a:	bf00      	nop
 8007f2c:	20004774 	.word	0x20004774
 8007f30:	20004574 	.word	0x20004574

08007f34 <vApplicationGetTimerTaskMemory>:
/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007f34:	4b03      	ldr	r3, [pc, #12]	; (8007f44 <vApplicationGetTimerTaskMemory+0x10>)
 8007f36:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007f38:	4b03      	ldr	r3, [pc, #12]	; (8007f48 <vApplicationGetTimerTaskMemory+0x14>)
 8007f3a:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007f3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007f40:	6013      	str	r3, [r2, #0]
}
 8007f42:	4770      	bx	lr
 8007f44:	20004bd8 	.word	0x20004bd8
 8007f48:	200047d8 	.word	0x200047d8

08007f4c <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007f4c:	4b0f      	ldr	r3, [pc, #60]	; (8007f8c <prvInsertBlockIntoFreeList+0x40>)
{
 8007f4e:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007f50:	461a      	mov	r2, r3
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	4283      	cmp	r3, r0
 8007f56:	d3fb      	bcc.n	8007f50 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007f58:	6854      	ldr	r4, [r2, #4]
 8007f5a:	1911      	adds	r1, r2, r4
 8007f5c:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007f5e:	bf01      	itttt	eq
 8007f60:	6841      	ldreq	r1, [r0, #4]
 8007f62:	4610      	moveq	r0, r2
 8007f64:	1909      	addeq	r1, r1, r4
 8007f66:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007f68:	6844      	ldr	r4, [r0, #4]
 8007f6a:	1901      	adds	r1, r0, r4
 8007f6c:	428b      	cmp	r3, r1
 8007f6e:	d107      	bne.n	8007f80 <prvInsertBlockIntoFreeList+0x34>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007f70:	4907      	ldr	r1, [pc, #28]	; (8007f90 <prvInsertBlockIntoFreeList+0x44>)
 8007f72:	6809      	ldr	r1, [r1, #0]
 8007f74:	428b      	cmp	r3, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007f76:	bf1f      	itttt	ne
 8007f78:	6859      	ldrne	r1, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007f7a:	681b      	ldrne	r3, [r3, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007f7c:	1909      	addne	r1, r1, r4
 8007f7e:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007f80:	4290      	cmp	r0, r2
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007f82:	6003      	str	r3, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007f84:	bf18      	it	ne
 8007f86:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007f88:	bd10      	pop	{r4, pc}
 8007f8a:	bf00      	nop
 8007f8c:	20017140 	.word	0x20017140
 8007f90:	20004c38 	.word	0x20004c38

08007f94 <pvPortMalloc>:
{
 8007f94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxEnd == NULL )
 8007f98:	4f41      	ldr	r7, [pc, #260]	; (80080a0 <pvPortMalloc+0x10c>)
{
 8007f9a:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8007f9c:	f001 fa3a 	bl	8009414 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8007fa0:	4840      	ldr	r0, [pc, #256]	; (80080a4 <pvPortMalloc+0x110>)
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	b9f3      	cbnz	r3, 8007fe4 <pvPortMalloc+0x50>
	uxAddress = ( size_t ) ucHeap;
 8007fa6:	4940      	ldr	r1, [pc, #256]	; (80080a8 <pvPortMalloc+0x114>)
	xStart.xBlockSize = ( size_t ) 0;
 8007fa8:	2300      	movs	r3, #0
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007faa:	074d      	lsls	r5, r1, #29
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007fac:	4d3f      	ldr	r5, [pc, #252]	; (80080ac <pvPortMalloc+0x118>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007fae:	bf1b      	ittet	ne
 8007fb0:	3107      	addne	r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007fb2:	4a3f      	ldrne	r2, [pc, #252]	; (80080b0 <pvPortMalloc+0x11c>)
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007fb4:	4a3f      	ldreq	r2, [pc, #252]	; (80080b4 <pvPortMalloc+0x120>)
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007fb6:	f021 0107 	bicne.w	r1, r1, #7
	xStart.xBlockSize = ( size_t ) 0;
 8007fba:	606b      	str	r3, [r5, #4]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007fbc:	bf18      	it	ne
 8007fbe:	1a52      	subne	r2, r2, r1
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007fc0:	6029      	str	r1, [r5, #0]
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007fc2:	440a      	add	r2, r1
	uxAddress -= xHeapStructSize;
 8007fc4:	3a08      	subs	r2, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007fc6:	f022 0207 	bic.w	r2, r2, #7
	pxEnd->pxNextFreeBlock = NULL;
 8007fca:	e9c2 3300 	strd	r3, r3, [r2]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007fce:	1a53      	subs	r3, r2, r1
	pxEnd = ( void * ) uxAddress;
 8007fd0:	603a      	str	r2, [r7, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007fd2:	e9c1 2300 	strd	r2, r3, [r1]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007fd6:	4a38      	ldr	r2, [pc, #224]	; (80080b8 <pvPortMalloc+0x124>)
 8007fd8:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007fda:	4a38      	ldr	r2, [pc, #224]	; (80080bc <pvPortMalloc+0x128>)
 8007fdc:	6013      	str	r3, [r2, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007fde:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007fe2:	6003      	str	r3, [r0, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007fe4:	f8d0 8000 	ldr.w	r8, [r0]
 8007fe8:	ea18 0f04 	tst.w	r8, r4
 8007fec:	d152      	bne.n	8008094 <pvPortMalloc+0x100>
			if( xWantedSize > 0 )
 8007fee:	2c00      	cmp	r4, #0
 8007ff0:	d041      	beq.n	8008076 <pvPortMalloc+0xe2>
				xWantedSize += xHeapStructSize;
 8007ff2:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007ff6:	0761      	lsls	r1, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007ff8:	bf1c      	itt	ne
 8007ffa:	f023 0307 	bicne.w	r3, r3, #7
 8007ffe:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008000:	2b00      	cmp	r3, #0
 8008002:	d047      	beq.n	8008094 <pvPortMalloc+0x100>
 8008004:	4c2d      	ldr	r4, [pc, #180]	; (80080bc <pvPortMalloc+0x128>)
 8008006:	6826      	ldr	r6, [r4, #0]
 8008008:	429e      	cmp	r6, r3
 800800a:	d343      	bcc.n	8008094 <pvPortMalloc+0x100>
				pxBlock = xStart.pxNextFreeBlock;
 800800c:	4a27      	ldr	r2, [pc, #156]	; (80080ac <pvPortMalloc+0x118>)
 800800e:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008010:	6869      	ldr	r1, [r5, #4]
 8008012:	4299      	cmp	r1, r3
 8008014:	d201      	bcs.n	800801a <pvPortMalloc+0x86>
 8008016:	6828      	ldr	r0, [r5, #0]
 8008018:	b9b0      	cbnz	r0, 8008048 <pvPortMalloc+0xb4>
				if( pxBlock != pxEnd )
 800801a:	6838      	ldr	r0, [r7, #0]
 800801c:	42a8      	cmp	r0, r5
 800801e:	d039      	beq.n	8008094 <pvPortMalloc+0x100>
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008020:	1ac9      	subs	r1, r1, r3
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008022:	6828      	ldr	r0, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008024:	6817      	ldr	r7, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008026:	2910      	cmp	r1, #16
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008028:	6010      	str	r0, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800802a:	d914      	bls.n	8008056 <pvPortMalloc+0xc2>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800802c:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800802e:	0742      	lsls	r2, r0, #29
 8008030:	d00d      	beq.n	800804e <pvPortMalloc+0xba>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008036:	b672      	cpsid	i
 8008038:	f383 8811 	msr	BASEPRI, r3
 800803c:	f3bf 8f6f 	isb	sy
 8008040:	f3bf 8f4f 	dsb	sy
 8008044:	b662      	cpsie	i
 8008046:	e7fe      	b.n	8008046 <pvPortMalloc+0xb2>
 8008048:	462a      	mov	r2, r5
 800804a:	4605      	mov	r5, r0
 800804c:	e7e0      	b.n	8008010 <pvPortMalloc+0x7c>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800804e:	6041      	str	r1, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008050:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008052:	f7ff ff7b 	bl	8007f4c <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008056:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008058:	4917      	ldr	r1, [pc, #92]	; (80080b8 <pvPortMalloc+0x124>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800805a:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800805c:	ea48 0303 	orr.w	r3, r8, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008060:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008062:	6026      	str	r6, [r4, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008064:	f107 0408 	add.w	r4, r7, #8
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008068:	4286      	cmp	r6, r0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800806a:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800806c:	f04f 0300 	mov.w	r3, #0
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008070:	bf38      	it	cc
 8008072:	600e      	strcc	r6, [r1, #0]
					pxBlock->pxNextFreeBlock = NULL;
 8008074:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8008076:	f001 fa73 	bl	8009560 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800807a:	0763      	lsls	r3, r4, #29
 800807c:	d00c      	beq.n	8008098 <pvPortMalloc+0x104>
 800807e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008082:	b672      	cpsid	i
 8008084:	f383 8811 	msr	BASEPRI, r3
 8008088:	f3bf 8f6f 	isb	sy
 800808c:	f3bf 8f4f 	dsb	sy
 8008090:	b662      	cpsie	i
 8008092:	e7fe      	b.n	8008092 <pvPortMalloc+0xfe>
void *pvReturn = NULL;
 8008094:	2400      	movs	r4, #0
 8008096:	e7ee      	b.n	8008076 <pvPortMalloc+0xe2>
}
 8008098:	4620      	mov	r0, r4
 800809a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800809e:	bf00      	nop
 80080a0:	20004c38 	.word	0x20004c38
 80080a4:	20017134 	.word	0x20017134
 80080a8:	20004c3c 	.word	0x20004c3c
 80080ac:	20017140 	.word	0x20017140
 80080b0:	20017134 	.word	0x20017134
 80080b4:	000124f8 	.word	0x000124f8
 80080b8:	2001713c 	.word	0x2001713c
 80080bc:	20017138 	.word	0x20017138

080080c0 <vPortFree>:
{
 80080c0:	b510      	push	{r4, lr}
	if( pv != NULL )
 80080c2:	4604      	mov	r4, r0
 80080c4:	2800      	cmp	r0, #0
 80080c6:	d032      	beq.n	800812e <vPortFree+0x6e>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80080c8:	4a19      	ldr	r2, [pc, #100]	; (8008130 <vPortFree+0x70>)
 80080ca:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80080ce:	6812      	ldr	r2, [r2, #0]
 80080d0:	4213      	tst	r3, r2
 80080d2:	d10a      	bne.n	80080ea <vPortFree+0x2a>
 80080d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d8:	b672      	cpsid	i
 80080da:	f383 8811 	msr	BASEPRI, r3
 80080de:	f3bf 8f6f 	isb	sy
 80080e2:	f3bf 8f4f 	dsb	sy
 80080e6:	b662      	cpsie	i
 80080e8:	e7fe      	b.n	80080e8 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80080ea:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80080ee:	b151      	cbz	r1, 8008106 <vPortFree+0x46>
 80080f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080f4:	b672      	cpsid	i
 80080f6:	f383 8811 	msr	BASEPRI, r3
 80080fa:	f3bf 8f6f 	isb	sy
 80080fe:	f3bf 8f4f 	dsb	sy
 8008102:	b662      	cpsie	i
 8008104:	e7fe      	b.n	8008104 <vPortFree+0x44>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008106:	ea23 0302 	bic.w	r3, r3, r2
 800810a:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800810e:	f001 f981 	bl	8009414 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008112:	4a08      	ldr	r2, [pc, #32]	; (8008134 <vPortFree+0x74>)
 8008114:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008118:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800811c:	6811      	ldr	r1, [r2, #0]
 800811e:	440b      	add	r3, r1
 8008120:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008122:	f7ff ff13 	bl	8007f4c <prvInsertBlockIntoFreeList>
}
 8008126:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 800812a:	f001 ba19 	b.w	8009560 <xTaskResumeAll>
}
 800812e:	bd10      	pop	{r4, pc}
 8008130:	20017134 	.word	0x20017134
 8008134:	20017138 	.word	0x20017138

08008138 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008138:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800813c:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008140:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008142:	6103      	str	r3, [r0, #16]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008144:	e9c0 2302 	strd	r2, r3, [r0, #8]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008148:	2300      	movs	r3, #0
 800814a:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800814c:	4770      	bx	lr

0800814e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800814e:	2300      	movs	r3, #0
 8008150:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008152:	4770      	bx	lr

08008154 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8008154:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008156:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8008158:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800815a:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800815c:	689a      	ldr	r2, [r3, #8]
 800815e:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008160:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8008162:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8008164:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8008166:	3301      	adds	r3, #1
 8008168:	6003      	str	r3, [r0, #0]
}
 800816a:	4770      	bx	lr

0800816c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800816c:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800816e:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008170:	1c63      	adds	r3, r4, #1
 8008172:	d10a      	bne.n	800818a <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008174:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008176:	685a      	ldr	r2, [r3, #4]
 8008178:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800817a:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800817c:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800817e:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8008180:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8008182:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8008184:	3301      	adds	r3, #1
 8008186:	6003      	str	r3, [r0, #0]
}
 8008188:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800818a:	f100 0208 	add.w	r2, r0, #8
 800818e:	4613      	mov	r3, r2
 8008190:	6852      	ldr	r2, [r2, #4]
 8008192:	6815      	ldr	r5, [r2, #0]
 8008194:	42a5      	cmp	r5, r4
 8008196:	d9fa      	bls.n	800818e <vListInsert+0x22>
 8008198:	e7ed      	b.n	8008176 <vListInsert+0xa>

0800819a <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800819a:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800819c:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 80081a0:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80081a2:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80081a4:	6859      	ldr	r1, [r3, #4]
 80081a6:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80081a8:	bf08      	it	eq
 80081aa:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80081ac:	2200      	movs	r2, #0
 80081ae:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80081b0:	681a      	ldr	r2, [r3, #0]
 80081b2:	3a01      	subs	r2, #1
 80081b4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80081b6:	6818      	ldr	r0, [r3, #0]
}
 80081b8:	4770      	bx	lr
	...

080081bc <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80081bc:	4808      	ldr	r0, [pc, #32]	; (80081e0 <prvPortStartFirstTask+0x24>)
 80081be:	6800      	ldr	r0, [r0, #0]
 80081c0:	6800      	ldr	r0, [r0, #0]
 80081c2:	f380 8808 	msr	MSP, r0
 80081c6:	f04f 0000 	mov.w	r0, #0
 80081ca:	f380 8814 	msr	CONTROL, r0
 80081ce:	b662      	cpsie	i
 80081d0:	b661      	cpsie	f
 80081d2:	f3bf 8f4f 	dsb	sy
 80081d6:	f3bf 8f6f 	isb	sy
 80081da:	df00      	svc	0
 80081dc:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80081de:	0000      	.short	0x0000
 80081e0:	e000ed08 	.word	0xe000ed08

080081e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80081e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80081f4 <vPortEnableVFP+0x10>
 80081e8:	6801      	ldr	r1, [r0, #0]
 80081ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80081ee:	6001      	str	r1, [r0, #0]
 80081f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80081f2:	0000      	.short	0x0000
 80081f4:	e000ed88 	.word	0xe000ed88

080081f8 <prvTaskExitError>:
volatile uint32_t ulDummy = 0;
 80081f8:	2300      	movs	r3, #0
{
 80081fa:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 80081fc:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 80081fe:	4b0f      	ldr	r3, [pc, #60]	; (800823c <prvTaskExitError+0x44>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	3301      	adds	r3, #1
 8008204:	d00a      	beq.n	800821c <prvTaskExitError+0x24>
 8008206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800820a:	b672      	cpsid	i
 800820c:	f383 8811 	msr	BASEPRI, r3
 8008210:	f3bf 8f6f 	isb	sy
 8008214:	f3bf 8f4f 	dsb	sy
 8008218:	b662      	cpsie	i
 800821a:	e7fe      	b.n	800821a <prvTaskExitError+0x22>
 800821c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008220:	b672      	cpsid	i
 8008222:	f383 8811 	msr	BASEPRI, r3
 8008226:	f3bf 8f6f 	isb	sy
 800822a:	f3bf 8f4f 	dsb	sy
 800822e:	b662      	cpsie	i
	while( ulDummy == 0 )
 8008230:	9b01      	ldr	r3, [sp, #4]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d0fc      	beq.n	8008230 <prvTaskExitError+0x38>
}
 8008236:	b002      	add	sp, #8
 8008238:	4770      	bx	lr
 800823a:	bf00      	nop
 800823c:	20000040 	.word	0x20000040

08008240 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008240:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008244:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008248:	f840 2c20 	str.w	r2, [r0, #-32]
}
 800824c:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800824e:	6403      	str	r3, [r0, #64]	; 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008250:	4b03      	ldr	r3, [pc, #12]	; (8008260 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008252:	63c1      	str	r1, [r0, #60]	; 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008254:	6383      	str	r3, [r0, #56]	; 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008256:	f06f 0302 	mvn.w	r3, #2
 800825a:	6203      	str	r3, [r0, #32]
}
 800825c:	4770      	bx	lr
 800825e:	bf00      	nop
 8008260:	080081f9 	.word	0x080081f9
	...

08008270 <SVC_Handler>:
	__asm volatile (
 8008270:	4b07      	ldr	r3, [pc, #28]	; (8008290 <pxCurrentTCBConst2>)
 8008272:	6819      	ldr	r1, [r3, #0]
 8008274:	6808      	ldr	r0, [r1, #0]
 8008276:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800827a:	f380 8809 	msr	PSP, r0
 800827e:	f3bf 8f6f 	isb	sy
 8008282:	f04f 0000 	mov.w	r0, #0
 8008286:	f380 8811 	msr	BASEPRI, r0
 800828a:	4770      	bx	lr
 800828c:	f3af 8000 	nop.w

08008290 <pxCurrentTCBConst2>:
 8008290:	20017190 	.word	0x20017190

08008294 <vPortEnterCritical>:
 8008294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008298:	b672      	cpsid	i
 800829a:	f383 8811 	msr	BASEPRI, r3
 800829e:	f3bf 8f6f 	isb	sy
 80082a2:	f3bf 8f4f 	dsb	sy
 80082a6:	b662      	cpsie	i
	uxCriticalNesting++;
 80082a8:	4a0b      	ldr	r2, [pc, #44]	; (80082d8 <vPortEnterCritical+0x44>)
 80082aa:	6813      	ldr	r3, [r2, #0]
 80082ac:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 80082ae:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 80082b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80082b2:	d110      	bne.n	80082d6 <vPortEnterCritical+0x42>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80082b4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80082b8:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 80082bc:	b2db      	uxtb	r3, r3
 80082be:	b153      	cbz	r3, 80082d6 <vPortEnterCritical+0x42>
 80082c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082c4:	b672      	cpsid	i
 80082c6:	f383 8811 	msr	BASEPRI, r3
 80082ca:	f3bf 8f6f 	isb	sy
 80082ce:	f3bf 8f4f 	dsb	sy
 80082d2:	b662      	cpsie	i
 80082d4:	e7fe      	b.n	80082d4 <vPortEnterCritical+0x40>
}
 80082d6:	4770      	bx	lr
 80082d8:	20000040 	.word	0x20000040

080082dc <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 80082dc:	4a09      	ldr	r2, [pc, #36]	; (8008304 <vPortExitCritical+0x28>)
 80082de:	6813      	ldr	r3, [r2, #0]
 80082e0:	b953      	cbnz	r3, 80082f8 <vPortExitCritical+0x1c>
 80082e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082e6:	b672      	cpsid	i
 80082e8:	f383 8811 	msr	BASEPRI, r3
 80082ec:	f3bf 8f6f 	isb	sy
 80082f0:	f3bf 8f4f 	dsb	sy
 80082f4:	b662      	cpsie	i
 80082f6:	e7fe      	b.n	80082f6 <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 80082f8:	3b01      	subs	r3, #1
 80082fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80082fc:	b90b      	cbnz	r3, 8008302 <vPortExitCritical+0x26>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80082fe:	f383 8811 	msr	BASEPRI, r3
}
 8008302:	4770      	bx	lr
 8008304:	20000040 	.word	0x20000040
	...

08008310 <PendSV_Handler>:
	__asm volatile
 8008310:	f3ef 8009 	mrs	r0, PSP
 8008314:	f3bf 8f6f 	isb	sy
 8008318:	4b15      	ldr	r3, [pc, #84]	; (8008370 <pxCurrentTCBConst>)
 800831a:	681a      	ldr	r2, [r3, #0]
 800831c:	f01e 0f10 	tst.w	lr, #16
 8008320:	bf08      	it	eq
 8008322:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008326:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800832a:	6010      	str	r0, [r2, #0]
 800832c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008330:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008334:	b672      	cpsid	i
 8008336:	f380 8811 	msr	BASEPRI, r0
 800833a:	f3bf 8f4f 	dsb	sy
 800833e:	f3bf 8f6f 	isb	sy
 8008342:	b662      	cpsie	i
 8008344:	f001 fa16 	bl	8009774 <vTaskSwitchContext>
 8008348:	f04f 0000 	mov.w	r0, #0
 800834c:	f380 8811 	msr	BASEPRI, r0
 8008350:	bc09      	pop	{r0, r3}
 8008352:	6819      	ldr	r1, [r3, #0]
 8008354:	6808      	ldr	r0, [r1, #0]
 8008356:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800835a:	f01e 0f10 	tst.w	lr, #16
 800835e:	bf08      	it	eq
 8008360:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008364:	f380 8809 	msr	PSP, r0
 8008368:	f3bf 8f6f 	isb	sy
 800836c:	4770      	bx	lr
 800836e:	bf00      	nop

08008370 <pxCurrentTCBConst>:
 8008370:	20017190 	.word	0x20017190

08008374 <SysTick_Handler>:
{
 8008374:	b508      	push	{r3, lr}
	__asm volatile
 8008376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800837a:	b672      	cpsid	i
 800837c:	f383 8811 	msr	BASEPRI, r3
 8008380:	f3bf 8f6f 	isb	sy
 8008384:	f3bf 8f4f 	dsb	sy
 8008388:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 800838a:	f001 f851 	bl	8009430 <xTaskIncrementTick>
 800838e:	b128      	cbz	r0, 800839c <SysTick_Handler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008390:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008394:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008398:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 800839c:	2300      	movs	r3, #0
 800839e:	f383 8811 	msr	BASEPRI, r3
}
 80083a2:	bd08      	pop	{r3, pc}

080083a4 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80083a4:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 80083a8:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80083aa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80083ae:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80083b0:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80083b2:	4b04      	ldr	r3, [pc, #16]	; (80083c4 <vPortSetupTimerInterrupt+0x20>)
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80083ba:	3b01      	subs	r3, #1
 80083bc:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80083be:	2307      	movs	r3, #7
 80083c0:	6113      	str	r3, [r2, #16]
}
 80083c2:	4770      	bx	lr
 80083c4:	2000000c 	.word	0x2000000c

080083c8 <xPortStartScheduler>:
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80083c8:	4b2e      	ldr	r3, [pc, #184]	; (8008484 <xPortStartScheduler+0xbc>)
{
 80083ca:	b537      	push	{r0, r1, r2, r4, r5, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80083cc:	781a      	ldrb	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80083ce:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80083d0:	b2d2      	uxtb	r2, r2
 80083d2:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80083d4:	22ff      	movs	r2, #255	; 0xff
 80083d6:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80083d8:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80083da:	4a2b      	ldr	r2, [pc, #172]	; (8008488 <xPortStartScheduler+0xc0>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80083dc:	b2db      	uxtb	r3, r3
 80083de:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80083e2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80083e6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80083ea:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80083ec:	2307      	movs	r3, #7
 80083ee:	4a27      	ldr	r2, [pc, #156]	; (800848c <xPortStartScheduler+0xc4>)
 80083f0:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80083f2:	f89d 0003 	ldrb.w	r0, [sp, #3]
 80083f6:	1e5c      	subs	r4, r3, #1
 80083f8:	0600      	lsls	r0, r0, #24
 80083fa:	d40e      	bmi.n	800841a <xPortStartScheduler+0x52>
 80083fc:	b111      	cbz	r1, 8008404 <xPortStartScheduler+0x3c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80083fe:	2b03      	cmp	r3, #3
 8008400:	6013      	str	r3, [r2, #0]
 8008402:	d013      	beq.n	800842c <xPortStartScheduler+0x64>
	__asm volatile
 8008404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008408:	b672      	cpsid	i
 800840a:	f383 8811 	msr	BASEPRI, r3
 800840e:	f3bf 8f6f 	isb	sy
 8008412:	f3bf 8f4f 	dsb	sy
 8008416:	b662      	cpsie	i
 8008418:	e7fe      	b.n	8008418 <xPortStartScheduler+0x50>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800841a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800841e:	2101      	movs	r1, #1
 8008420:	005b      	lsls	r3, r3, #1
 8008422:	b2db      	uxtb	r3, r3
 8008424:	f88d 3003 	strb.w	r3, [sp, #3]
 8008428:	4623      	mov	r3, r4
 800842a:	e7e2      	b.n	80083f2 <xPortStartScheduler+0x2a>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800842c:	f44f 7340 	mov.w	r3, #768	; 0x300
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008430:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
	uxCriticalNesting = 0;
 8008434:	2500      	movs	r5, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008436:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008438:	9b01      	ldr	r3, [sp, #4]
 800843a:	4a12      	ldr	r2, [pc, #72]	; (8008484 <xPortStartScheduler+0xbc>)
 800843c:	b2db      	uxtb	r3, r3
 800843e:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008440:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8008444:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008448:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800844c:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8008450:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008454:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 8008458:	f7ff ffa4 	bl	80083a4 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800845c:	4b0c      	ldr	r3, [pc, #48]	; (8008490 <xPortStartScheduler+0xc8>)
 800845e:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 8008460:	f7ff fec0 	bl	80081e4 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008464:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 8008468:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800846c:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
 8008470:	f7ff fea4 	bl	80081bc <prvPortStartFirstTask>
	vTaskSwitchContext();
 8008474:	f001 f97e 	bl	8009774 <vTaskSwitchContext>
}
 8008478:	4628      	mov	r0, r5
	prvTaskExitError();
 800847a:	f7ff febd 	bl	80081f8 <prvTaskExitError>
}
 800847e:	b003      	add	sp, #12
 8008480:	bd30      	pop	{r4, r5, pc}
 8008482:	bf00      	nop
 8008484:	e000e400 	.word	0xe000e400
 8008488:	20017148 	.word	0x20017148
 800848c:	2001714c 	.word	0x2001714c
 8008490:	20000040 	.word	0x20000040

08008494 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008494:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008498:	2b0f      	cmp	r3, #15
 800849a:	d910      	bls.n	80084be <vPortValidateInterruptPriority+0x2a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800849c:	4a13      	ldr	r2, [pc, #76]	; (80084ec <vPortValidateInterruptPriority+0x58>)
 800849e:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80084a0:	4a13      	ldr	r2, [pc, #76]	; (80084f0 <vPortValidateInterruptPriority+0x5c>)
 80084a2:	7812      	ldrb	r2, [r2, #0]
 80084a4:	429a      	cmp	r2, r3
 80084a6:	d90a      	bls.n	80084be <vPortValidateInterruptPriority+0x2a>
 80084a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ac:	b672      	cpsid	i
 80084ae:	f383 8811 	msr	BASEPRI, r3
 80084b2:	f3bf 8f6f 	isb	sy
 80084b6:	f3bf 8f4f 	dsb	sy
 80084ba:	b662      	cpsie	i
 80084bc:	e7fe      	b.n	80084bc <vPortValidateInterruptPriority+0x28>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80084be:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80084c2:	4a0c      	ldr	r2, [pc, #48]	; (80084f4 <vPortValidateInterruptPriority+0x60>)
 80084c4:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 80084c8:	6812      	ldr	r2, [r2, #0]
 80084ca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d90a      	bls.n	80084e8 <vPortValidateInterruptPriority+0x54>
 80084d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084d6:	b672      	cpsid	i
 80084d8:	f383 8811 	msr	BASEPRI, r3
 80084dc:	f3bf 8f6f 	isb	sy
 80084e0:	f3bf 8f4f 	dsb	sy
 80084e4:	b662      	cpsie	i
 80084e6:	e7fe      	b.n	80084e6 <vPortValidateInterruptPriority+0x52>
	}
 80084e8:	4770      	bx	lr
 80084ea:	bf00      	nop
 80084ec:	e000e3f0 	.word	0xe000e3f0
 80084f0:	20017148 	.word	0x20017148
 80084f4:	2001714c 	.word	0x2001714c

080084f8 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80084f8:	b510      	push	{r4, lr}
 80084fa:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80084fc:	f7ff feca 	bl	8008294 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008500:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8008502:	f7ff feeb 	bl	80082dc <vPortExitCritical>

	return xReturn;
}
 8008506:	fab4 f084 	clz	r0, r4
 800850a:	0940      	lsrs	r0, r0, #5
 800850c:	bd10      	pop	{r4, pc}

0800850e <prvCopyDataToQueue>:
{
 800850e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008510:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008512:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 8008514:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008516:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008518:	b952      	cbnz	r2, 8008530 <prvCopyDataToQueue+0x22>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800851a:	6807      	ldr	r7, [r0, #0]
 800851c:	bb47      	cbnz	r7, 8008570 <prvCopyDataToQueue+0x62>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800851e:	6880      	ldr	r0, [r0, #8]
 8008520:	f001 fa98 	bl	8009a54 <xTaskPriorityDisinherit>
 8008524:	4605      	mov	r5, r0
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008526:	60a7      	str	r7, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008528:	3601      	adds	r6, #1
}
 800852a:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800852c:	63a6      	str	r6, [r4, #56]	; 0x38
}
 800852e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8008530:	b965      	cbnz	r5, 800854c <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008532:	6840      	ldr	r0, [r0, #4]
 8008534:	f021 fe60 	bl	802a1f8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008538:	6863      	ldr	r3, [r4, #4]
 800853a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800853c:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800853e:	68a2      	ldr	r2, [r4, #8]
 8008540:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008542:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008544:	d3f0      	bcc.n	8008528 <prvCopyDataToQueue+0x1a>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008546:	6823      	ldr	r3, [r4, #0]
 8008548:	6063      	str	r3, [r4, #4]
 800854a:	e7ed      	b.n	8008528 <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800854c:	68c0      	ldr	r0, [r0, #12]
 800854e:	f021 fe53 	bl	802a1f8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008552:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008554:	68e3      	ldr	r3, [r4, #12]
 8008556:	4251      	negs	r1, r2
 8008558:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800855a:	6822      	ldr	r2, [r4, #0]
 800855c:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800855e:	60e3      	str	r3, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008560:	bf3e      	ittt	cc
 8008562:	68a3      	ldrcc	r3, [r4, #8]
 8008564:	185b      	addcc	r3, r3, r1
 8008566:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8008568:	2d02      	cmp	r5, #2
 800856a:	d101      	bne.n	8008570 <prvCopyDataToQueue+0x62>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800856c:	b116      	cbz	r6, 8008574 <prvCopyDataToQueue+0x66>
				--uxMessagesWaiting;
 800856e:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 8008570:	2500      	movs	r5, #0
 8008572:	e7d9      	b.n	8008528 <prvCopyDataToQueue+0x1a>
 8008574:	4635      	mov	r5, r6
 8008576:	e7d7      	b.n	8008528 <prvCopyDataToQueue+0x1a>

08008578 <prvCopyDataFromQueue>:
{
 8008578:	4603      	mov	r3, r0
 800857a:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800857c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 800857e:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008580:	b162      	cbz	r2, 800859c <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008582:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008584:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008586:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008588:	428c      	cmp	r4, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800858a:	60dc      	str	r4, [r3, #12]
}
 800858c:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008590:	bf24      	itt	cs
 8008592:	6819      	ldrcs	r1, [r3, #0]
 8008594:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008596:	68d9      	ldr	r1, [r3, #12]
 8008598:	f021 be2e 	b.w	802a1f8 <memcpy>
}
 800859c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80085a0:	4770      	bx	lr

080085a2 <prvUnlockQueue>:
{
 80085a2:	b570      	push	{r4, r5, r6, lr}
 80085a4:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80085a6:	f7ff fe75 	bl	8008294 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80085aa:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80085ae:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 80085b2:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80085b4:	2d00      	cmp	r5, #0
 80085b6:	dc14      	bgt.n	80085e2 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 80085b8:	23ff      	movs	r3, #255	; 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80085ba:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 80085be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 80085c2:	f7ff fe8b 	bl	80082dc <vPortExitCritical>
	taskENTER_CRITICAL();
 80085c6:	f7ff fe65 	bl	8008294 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80085ca:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 80085ce:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80085d0:	2d00      	cmp	r5, #0
 80085d2:	dc12      	bgt.n	80085fa <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 80085d4:	23ff      	movs	r3, #255	; 0xff
 80085d6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 80085da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 80085de:	f7ff be7d 	b.w	80082dc <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80085e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d0e7      	beq.n	80085b8 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80085e8:	4630      	mov	r0, r6
 80085ea:	f001 f945 	bl	8009878 <xTaskRemoveFromEventList>
 80085ee:	b108      	cbz	r0, 80085f4 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 80085f0:	f001 f9d4 	bl	800999c <vTaskMissedYield>
			--cTxLock;
 80085f4:	3d01      	subs	r5, #1
 80085f6:	b26d      	sxtb	r5, r5
 80085f8:	e7dc      	b.n	80085b4 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80085fa:	6923      	ldr	r3, [r4, #16]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d0e9      	beq.n	80085d4 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008600:	4630      	mov	r0, r6
 8008602:	f001 f939 	bl	8009878 <xTaskRemoveFromEventList>
 8008606:	b108      	cbz	r0, 800860c <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8008608:	f001 f9c8 	bl	800999c <vTaskMissedYield>
				--cRxLock;
 800860c:	3d01      	subs	r5, #1
 800860e:	b26d      	sxtb	r5, r5
 8008610:	e7de      	b.n	80085d0 <prvUnlockQueue+0x2e>

08008612 <xQueueGenericReset>:
{
 8008612:	b538      	push	{r3, r4, r5, lr}
 8008614:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8008616:	4604      	mov	r4, r0
 8008618:	b950      	cbnz	r0, 8008630 <xQueueGenericReset+0x1e>
 800861a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800861e:	b672      	cpsid	i
 8008620:	f383 8811 	msr	BASEPRI, r3
 8008624:	f3bf 8f6f 	isb	sy
 8008628:	f3bf 8f4f 	dsb	sy
 800862c:	b662      	cpsie	i
 800862e:	e7fe      	b.n	800862e <xQueueGenericReset+0x1c>
	taskENTER_CRITICAL();
 8008630:	f7ff fe30 	bl	8008294 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008634:	6822      	ldr	r2, [r4, #0]
 8008636:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800863a:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800863c:	434b      	muls	r3, r1
 800863e:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008640:	1a5b      	subs	r3, r3, r1
 8008642:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008644:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008646:	2000      	movs	r0, #0
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008648:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800864a:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800864c:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 800864e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008652:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8008656:	b9a5      	cbnz	r5, 8008682 <xQueueGenericReset+0x70>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008658:	6923      	ldr	r3, [r4, #16]
 800865a:	b173      	cbz	r3, 800867a <xQueueGenericReset+0x68>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800865c:	f104 0010 	add.w	r0, r4, #16
 8008660:	f001 f90a 	bl	8009878 <xTaskRemoveFromEventList>
 8008664:	b148      	cbz	r0, 800867a <xQueueGenericReset+0x68>
					queueYIELD_IF_USING_PREEMPTION();
 8008666:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800866a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800866e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008672:	f3bf 8f4f 	dsb	sy
 8008676:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 800867a:	f7ff fe2f 	bl	80082dc <vPortExitCritical>
}
 800867e:	2001      	movs	r0, #1
 8008680:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008682:	f104 0010 	add.w	r0, r4, #16
 8008686:	f7ff fd57 	bl	8008138 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800868a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800868e:	f7ff fd53 	bl	8008138 <vListInitialise>
 8008692:	e7f2      	b.n	800867a <xQueueGenericReset+0x68>

08008694 <xQueueGenericCreateStatic.part.0>:
	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
 8008694:	b513      	push	{r0, r1, r4, lr}
		configASSERT( pxStaticQueue != NULL );
 8008696:	461c      	mov	r4, r3
 8008698:	b953      	cbnz	r3, 80086b0 <xQueueGenericCreateStatic.part.0+0x1c>
 800869a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800869e:	b672      	cpsid	i
 80086a0:	f383 8811 	msr	BASEPRI, r3
 80086a4:	f3bf 8f6f 	isb	sy
 80086a8:	f3bf 8f4f 	dsb	sy
 80086ac:	b662      	cpsie	i
 80086ae:	e7fe      	b.n	80086ae <xQueueGenericCreateStatic.part.0+0x1a>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80086b0:	b15a      	cbz	r2, 80086ca <xQueueGenericCreateStatic.part.0+0x36>
 80086b2:	b9b1      	cbnz	r1, 80086e2 <xQueueGenericCreateStatic.part.0+0x4e>
 80086b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086b8:	b672      	cpsid	i
 80086ba:	f383 8811 	msr	BASEPRI, r3
 80086be:	f3bf 8f6f 	isb	sy
 80086c2:	f3bf 8f4f 	dsb	sy
 80086c6:	b662      	cpsie	i
 80086c8:	e7fe      	b.n	80086c8 <xQueueGenericCreateStatic.part.0+0x34>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80086ca:	b151      	cbz	r1, 80086e2 <xQueueGenericCreateStatic.part.0+0x4e>
 80086cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086d0:	b672      	cpsid	i
 80086d2:	f383 8811 	msr	BASEPRI, r3
 80086d6:	f3bf 8f6f 	isb	sy
 80086da:	f3bf 8f4f 	dsb	sy
 80086de:	b662      	cpsie	i
 80086e0:	e7fe      	b.n	80086e0 <xQueueGenericCreateStatic.part.0+0x4c>
			volatile size_t xSize = sizeof( StaticQueue_t );
 80086e2:	2350      	movs	r3, #80	; 0x50
 80086e4:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 80086e6:	9b01      	ldr	r3, [sp, #4]
 80086e8:	2b50      	cmp	r3, #80	; 0x50
 80086ea:	d00a      	beq.n	8008702 <xQueueGenericCreateStatic.part.0+0x6e>
 80086ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086f0:	b672      	cpsid	i
 80086f2:	f383 8811 	msr	BASEPRI, r3
 80086f6:	f3bf 8f6f 	isb	sy
 80086fa:	f3bf 8f4f 	dsb	sy
 80086fe:	b662      	cpsie	i
 8008700:	e7fe      	b.n	8008700 <xQueueGenericCreateStatic.part.0+0x6c>
	if( uxItemSize == ( UBaseType_t ) 0 )
 8008702:	2900      	cmp	r1, #0
 8008704:	bf08      	it	eq
 8008706:	4622      	moveq	r2, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008708:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800870a:	2301      	movs	r3, #1
 800870c:	6022      	str	r2, [r4, #0]
 800870e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 8008712:	e9c4 010f 	strd	r0, r1, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008716:	4619      	mov	r1, r3
 8008718:	4620      	mov	r0, r4
 800871a:	f7ff ff7a 	bl	8008612 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800871e:	f89d 3010 	ldrb.w	r3, [sp, #16]
	}
 8008722:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 8008724:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
	}
 8008728:	b002      	add	sp, #8
 800872a:	bd10      	pop	{r4, pc}

0800872c <xQueueGenericCreateStatic>:
	{
 800872c:	b410      	push	{r4}
 800872e:	f89d 4004 	ldrb.w	r4, [sp, #4]
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008732:	b950      	cbnz	r0, 800874a <xQueueGenericCreateStatic+0x1e>
 8008734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008738:	b672      	cpsid	i
 800873a:	f383 8811 	msr	BASEPRI, r3
 800873e:	f3bf 8f6f 	isb	sy
 8008742:	f3bf 8f4f 	dsb	sy
 8008746:	b662      	cpsie	i
 8008748:	e7fe      	b.n	8008748 <xQueueGenericCreateStatic+0x1c>
 800874a:	9401      	str	r4, [sp, #4]
	}
 800874c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008750:	f7ff bfa0 	b.w	8008694 <xQueueGenericCreateStatic.part.0>

08008754 <xQueueGenericCreate>:
	{
 8008754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008756:	460d      	mov	r5, r1
 8008758:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800875a:	4606      	mov	r6, r0
 800875c:	b950      	cbnz	r0, 8008774 <xQueueGenericCreate+0x20>
 800875e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008762:	b672      	cpsid	i
 8008764:	f383 8811 	msr	BASEPRI, r3
 8008768:	f3bf 8f6f 	isb	sy
 800876c:	f3bf 8f4f 	dsb	sy
 8008770:	b662      	cpsie	i
 8008772:	e7fe      	b.n	8008772 <xQueueGenericCreate+0x1e>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008774:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008776:	3050      	adds	r0, #80	; 0x50
 8008778:	f7ff fc0c 	bl	8007f94 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800877c:	4604      	mov	r4, r0
 800877e:	b170      	cbz	r0, 800879e <xQueueGenericCreate+0x4a>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008780:	2300      	movs	r3, #0
 8008782:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 8008786:	b165      	cbz	r5, 80087a2 <xQueueGenericCreate+0x4e>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008788:	f100 0350 	add.w	r3, r0, #80	; 0x50
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800878c:	2101      	movs	r1, #1
 800878e:	4620      	mov	r0, r4
 8008790:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 8008792:	e9c4 650f 	strd	r6, r5, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008796:	f7ff ff3c 	bl	8008612 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800879a:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
	}
 800879e:	4620      	mov	r0, r4
 80087a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087a2:	4603      	mov	r3, r0
 80087a4:	e7f2      	b.n	800878c <xQueueGenericCreate+0x38>

080087a6 <xQueueCreateCountingSemaphoreStatic>:
	{
 80087a6:	b513      	push	{r0, r1, r4, lr}
 80087a8:	4613      	mov	r3, r2
 80087aa:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 80087ac:	b950      	cbnz	r0, 80087c4 <xQueueCreateCountingSemaphoreStatic+0x1e>
 80087ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087b2:	b672      	cpsid	i
 80087b4:	f383 8811 	msr	BASEPRI, r3
 80087b8:	f3bf 8f6f 	isb	sy
 80087bc:	f3bf 8f4f 	dsb	sy
 80087c0:	b662      	cpsie	i
 80087c2:	e7fe      	b.n	80087c2 <xQueueCreateCountingSemaphoreStatic+0x1c>
		configASSERT( uxInitialCount <= uxMaxCount );
 80087c4:	4288      	cmp	r0, r1
 80087c6:	d20a      	bcs.n	80087de <xQueueCreateCountingSemaphoreStatic+0x38>
 80087c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087cc:	b672      	cpsid	i
 80087ce:	f383 8811 	msr	BASEPRI, r3
 80087d2:	f3bf 8f6f 	isb	sy
 80087d6:	f3bf 8f4f 	dsb	sy
 80087da:	b662      	cpsie	i
 80087dc:	e7fe      	b.n	80087dc <xQueueCreateCountingSemaphoreStatic+0x36>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80087de:	2202      	movs	r2, #2
 80087e0:	9200      	str	r2, [sp, #0]
 80087e2:	2200      	movs	r2, #0
 80087e4:	4611      	mov	r1, r2
 80087e6:	f7ff ffa1 	bl	800872c <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 80087ea:	b100      	cbz	r0, 80087ee <xQueueCreateCountingSemaphoreStatic+0x48>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80087ec:	6384      	str	r4, [r0, #56]	; 0x38
	}
 80087ee:	b002      	add	sp, #8
 80087f0:	bd10      	pop	{r4, pc}

080087f2 <xQueueCreateCountingSemaphore>:
	{
 80087f2:	b510      	push	{r4, lr}
 80087f4:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 80087f6:	b950      	cbnz	r0, 800880e <xQueueCreateCountingSemaphore+0x1c>
 80087f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087fc:	b672      	cpsid	i
 80087fe:	f383 8811 	msr	BASEPRI, r3
 8008802:	f3bf 8f6f 	isb	sy
 8008806:	f3bf 8f4f 	dsb	sy
 800880a:	b662      	cpsie	i
 800880c:	e7fe      	b.n	800880c <xQueueCreateCountingSemaphore+0x1a>
		configASSERT( uxInitialCount <= uxMaxCount );
 800880e:	4288      	cmp	r0, r1
 8008810:	d20a      	bcs.n	8008828 <xQueueCreateCountingSemaphore+0x36>
 8008812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008816:	b672      	cpsid	i
 8008818:	f383 8811 	msr	BASEPRI, r3
 800881c:	f3bf 8f6f 	isb	sy
 8008820:	f3bf 8f4f 	dsb	sy
 8008824:	b662      	cpsie	i
 8008826:	e7fe      	b.n	8008826 <xQueueCreateCountingSemaphore+0x34>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008828:	2202      	movs	r2, #2
 800882a:	2100      	movs	r1, #0
 800882c:	f7ff ff92 	bl	8008754 <xQueueGenericCreate>
		if( xHandle != NULL )
 8008830:	b100      	cbz	r0, 8008834 <xQueueCreateCountingSemaphore+0x42>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008832:	6384      	str	r4, [r0, #56]	; 0x38
	}
 8008834:	bd10      	pop	{r4, pc}

08008836 <xQueueGenericSend>:
{
 8008836:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800883a:	b085      	sub	sp, #20
 800883c:	4688      	mov	r8, r1
 800883e:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8008840:	4604      	mov	r4, r0
{
 8008842:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8008844:	b950      	cbnz	r0, 800885c <xQueueGenericSend+0x26>
 8008846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800884a:	b672      	cpsid	i
 800884c:	f383 8811 	msr	BASEPRI, r3
 8008850:	f3bf 8f6f 	isb	sy
 8008854:	f3bf 8f4f 	dsb	sy
 8008858:	b662      	cpsie	i
 800885a:	e7fe      	b.n	800885a <xQueueGenericSend+0x24>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800885c:	b961      	cbnz	r1, 8008878 <xQueueGenericSend+0x42>
 800885e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8008860:	b153      	cbz	r3, 8008878 <xQueueGenericSend+0x42>
 8008862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008866:	b672      	cpsid	i
 8008868:	f383 8811 	msr	BASEPRI, r3
 800886c:	f3bf 8f6f 	isb	sy
 8008870:	f3bf 8f4f 	dsb	sy
 8008874:	b662      	cpsie	i
 8008876:	e7fe      	b.n	8008876 <xQueueGenericSend+0x40>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008878:	2f02      	cmp	r7, #2
 800887a:	d10d      	bne.n	8008898 <xQueueGenericSend+0x62>
 800887c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800887e:	2b01      	cmp	r3, #1
 8008880:	d00a      	beq.n	8008898 <xQueueGenericSend+0x62>
 8008882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008886:	b672      	cpsid	i
 8008888:	f383 8811 	msr	BASEPRI, r3
 800888c:	f3bf 8f6f 	isb	sy
 8008890:	f3bf 8f4f 	dsb	sy
 8008894:	b662      	cpsie	i
 8008896:	e7fe      	b.n	8008896 <xQueueGenericSend+0x60>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008898:	f001 f88c 	bl	80099b4 <xTaskGetSchedulerState>
 800889c:	4606      	mov	r6, r0
 800889e:	b960      	cbnz	r0, 80088ba <xQueueGenericSend+0x84>
 80088a0:	9b01      	ldr	r3, [sp, #4]
 80088a2:	b15b      	cbz	r3, 80088bc <xQueueGenericSend+0x86>
 80088a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088a8:	b672      	cpsid	i
 80088aa:	f383 8811 	msr	BASEPRI, r3
 80088ae:	f3bf 8f6f 	isb	sy
 80088b2:	f3bf 8f4f 	dsb	sy
 80088b6:	b662      	cpsie	i
 80088b8:	e7fe      	b.n	80088b8 <xQueueGenericSend+0x82>
 80088ba:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 80088bc:	f04f 0900 	mov.w	r9, #0
 80088c0:	e037      	b.n	8008932 <xQueueGenericSend+0xfc>
				if( xTicksToWait == ( TickType_t ) 0 )
 80088c2:	9d01      	ldr	r5, [sp, #4]
 80088c4:	b91d      	cbnz	r5, 80088ce <xQueueGenericSend+0x98>
					taskEXIT_CRITICAL();
 80088c6:	f7ff fd09 	bl	80082dc <vPortExitCritical>
			return errQUEUE_FULL;
 80088ca:	2000      	movs	r0, #0
 80088cc:	e052      	b.n	8008974 <xQueueGenericSend+0x13e>
				else if( xEntryTimeSet == pdFALSE )
 80088ce:	b916      	cbnz	r6, 80088d6 <xQueueGenericSend+0xa0>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80088d0:	a802      	add	r0, sp, #8
 80088d2:	f001 f817 	bl	8009904 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 80088d6:	f7ff fd01 	bl	80082dc <vPortExitCritical>
		vTaskSuspendAll();
 80088da:	f000 fd9b 	bl	8009414 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80088de:	f7ff fcd9 	bl	8008294 <vPortEnterCritical>
 80088e2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80088e6:	2bff      	cmp	r3, #255	; 0xff
 80088e8:	d101      	bne.n	80088ee <xQueueGenericSend+0xb8>
 80088ea:	f884 9044 	strb.w	r9, [r4, #68]	; 0x44
 80088ee:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80088f2:	2bff      	cmp	r3, #255	; 0xff
 80088f4:	d101      	bne.n	80088fa <xQueueGenericSend+0xc4>
 80088f6:	f884 9045 	strb.w	r9, [r4, #69]	; 0x45
 80088fa:	f7ff fcef 	bl	80082dc <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80088fe:	a901      	add	r1, sp, #4
 8008900:	a802      	add	r0, sp, #8
 8008902:	f001 f80b 	bl	800991c <xTaskCheckForTimeOut>
 8008906:	2800      	cmp	r0, #0
 8008908:	d14a      	bne.n	80089a0 <xQueueGenericSend+0x16a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800890a:	f7ff fcc3 	bl	8008294 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800890e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008910:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008912:	429a      	cmp	r2, r3
 8008914:	d131      	bne.n	800897a <xQueueGenericSend+0x144>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8008916:	f7ff fce1 	bl	80082dc <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800891a:	9901      	ldr	r1, [sp, #4]
 800891c:	f104 0010 	add.w	r0, r4, #16
 8008920:	f000 ff6e 	bl	8009800 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008924:	4620      	mov	r0, r4
 8008926:	f7ff fe3c 	bl	80085a2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800892a:	f000 fe19 	bl	8009560 <xTaskResumeAll>
 800892e:	b360      	cbz	r0, 800898a <xQueueGenericSend+0x154>
 8008930:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8008932:	f7ff fcaf 	bl	8008294 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008936:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008938:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800893a:	429a      	cmp	r2, r3
 800893c:	d301      	bcc.n	8008942 <xQueueGenericSend+0x10c>
 800893e:	2f02      	cmp	r7, #2
 8008940:	d1bf      	bne.n	80088c2 <xQueueGenericSend+0x8c>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008942:	463a      	mov	r2, r7
 8008944:	4641      	mov	r1, r8
 8008946:	4620      	mov	r0, r4
 8008948:	f7ff fde1 	bl	800850e <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800894c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800894e:	b11b      	cbz	r3, 8008958 <xQueueGenericSend+0x122>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008950:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008954:	f000 ff90 	bl	8009878 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8008958:	b148      	cbz	r0, 800896e <xQueueGenericSend+0x138>
						queueYIELD_IF_USING_PREEMPTION();
 800895a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800895e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008962:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008966:	f3bf 8f4f 	dsb	sy
 800896a:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800896e:	f7ff fcb5 	bl	80082dc <vPortExitCritical>
				return pdPASS;
 8008972:	2001      	movs	r0, #1
}
 8008974:	b005      	add	sp, #20
 8008976:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	taskEXIT_CRITICAL();
 800897a:	f7ff fcaf 	bl	80082dc <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800897e:	4620      	mov	r0, r4
 8008980:	f7ff fe0f 	bl	80085a2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008984:	f000 fdec 	bl	8009560 <xTaskResumeAll>
 8008988:	e7d2      	b.n	8008930 <xQueueGenericSend+0xfa>
					portYIELD_WITHIN_API();
 800898a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800898e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008992:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008996:	f3bf 8f4f 	dsb	sy
 800899a:	f3bf 8f6f 	isb	sy
 800899e:	e7c7      	b.n	8008930 <xQueueGenericSend+0xfa>
			prvUnlockQueue( pxQueue );
 80089a0:	4620      	mov	r0, r4
 80089a2:	f7ff fdfe 	bl	80085a2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80089a6:	f000 fddb 	bl	8009560 <xTaskResumeAll>
 80089aa:	e78e      	b.n	80088ca <xQueueGenericSend+0x94>

080089ac <xQueueCreateMutexStatic>:
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80089ac:	2200      	movs	r2, #0
	{
 80089ae:	460b      	mov	r3, r1
 80089b0:	b513      	push	{r0, r1, r4, lr}
 80089b2:	4611      	mov	r1, r2
 80089b4:	9000      	str	r0, [sp, #0]
 80089b6:	2001      	movs	r0, #1
 80089b8:	f7ff fe6c 	bl	8008694 <xQueueGenericCreateStatic.part.0>
		if( pxNewQueue != NULL )
 80089bc:	4604      	mov	r4, r0
 80089be:	b138      	cbz	r0, 80089d0 <xQueueCreateMutexStatic+0x24>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80089c0:	2300      	movs	r3, #0
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80089c2:	461a      	mov	r2, r3
 80089c4:	4619      	mov	r1, r3
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80089c6:	6083      	str	r3, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80089c8:	6003      	str	r3, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80089ca:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80089cc:	f7ff ff33 	bl	8008836 <xQueueGenericSend>
	}
 80089d0:	4620      	mov	r0, r4
 80089d2:	b002      	add	sp, #8
 80089d4:	bd10      	pop	{r4, pc}

080089d6 <xQueueGiveMutexRecursive>:
	{
 80089d6:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 80089d8:	4604      	mov	r4, r0
 80089da:	b950      	cbnz	r0, 80089f2 <xQueueGiveMutexRecursive+0x1c>
 80089dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089e0:	b672      	cpsid	i
 80089e2:	f383 8811 	msr	BASEPRI, r3
 80089e6:	f3bf 8f6f 	isb	sy
 80089ea:	f3bf 8f4f 	dsb	sy
 80089ee:	b662      	cpsie	i
 80089f0:	e7fe      	b.n	80089f0 <xQueueGiveMutexRecursive+0x1a>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80089f2:	6885      	ldr	r5, [r0, #8]
 80089f4:	f000 ffd8 	bl	80099a8 <xTaskGetCurrentTaskHandle>
 80089f8:	4285      	cmp	r5, r0
 80089fa:	d10a      	bne.n	8008a12 <xQueueGiveMutexRecursive+0x3c>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80089fc:	68e3      	ldr	r3, [r4, #12]
 80089fe:	3b01      	subs	r3, #1
 8008a00:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8008a02:	b923      	cbnz	r3, 8008a0e <xQueueGiveMutexRecursive+0x38>
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8008a04:	461a      	mov	r2, r3
 8008a06:	4619      	mov	r1, r3
 8008a08:	4620      	mov	r0, r4
 8008a0a:	f7ff ff14 	bl	8008836 <xQueueGenericSend>
			xReturn = pdPASS;
 8008a0e:	2001      	movs	r0, #1
		return xReturn;
 8008a10:	e000      	b.n	8008a14 <xQueueGiveMutexRecursive+0x3e>
			xReturn = pdFAIL;
 8008a12:	2000      	movs	r0, #0
	}
 8008a14:	bd38      	pop	{r3, r4, r5, pc}

08008a16 <xQueueCreateMutex>:
	{
 8008a16:	b570      	push	{r4, r5, r6, lr}
 8008a18:	4606      	mov	r6, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008a1a:	2050      	movs	r0, #80	; 0x50
 8008a1c:	f7ff faba 	bl	8007f94 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8008a20:	4604      	mov	r4, r0
 8008a22:	b198      	cbz	r0, 8008a4c <xQueueCreateMutex+0x36>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008a24:	2500      	movs	r5, #0
	pxNewQueue->uxLength = uxQueueLength;
 8008a26:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008a28:	6000      	str	r0, [r0, #0]
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008a2a:	f880 5046 	strb.w	r5, [r0, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 8008a2e:	e9c0 150f 	strd	r1, r5, [r0, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008a32:	f7ff fdee 	bl	8008612 <xQueueGenericReset>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008a36:	462b      	mov	r3, r5
 8008a38:	462a      	mov	r2, r5
 8008a3a:	4629      	mov	r1, r5
 8008a3c:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 8008a3e:	f884 604c 	strb.w	r6, [r4, #76]	; 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8008a42:	60a5      	str	r5, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8008a44:	6025      	str	r5, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8008a46:	60e5      	str	r5, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008a48:	f7ff fef5 	bl	8008836 <xQueueGenericSend>
	}
 8008a4c:	4620      	mov	r0, r4
 8008a4e:	bd70      	pop	{r4, r5, r6, pc}

08008a50 <xQueueGenericSendFromISR>:
{
 8008a50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a54:	4689      	mov	r9, r1
 8008a56:	4690      	mov	r8, r2
 8008a58:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8008a5a:	4604      	mov	r4, r0
 8008a5c:	b950      	cbnz	r0, 8008a74 <xQueueGenericSendFromISR+0x24>
 8008a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a62:	b672      	cpsid	i
 8008a64:	f383 8811 	msr	BASEPRI, r3
 8008a68:	f3bf 8f6f 	isb	sy
 8008a6c:	f3bf 8f4f 	dsb	sy
 8008a70:	b662      	cpsie	i
 8008a72:	e7fe      	b.n	8008a72 <xQueueGenericSendFromISR+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008a74:	b961      	cbnz	r1, 8008a90 <xQueueGenericSendFromISR+0x40>
 8008a76:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8008a78:	b153      	cbz	r3, 8008a90 <xQueueGenericSendFromISR+0x40>
 8008a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a7e:	b672      	cpsid	i
 8008a80:	f383 8811 	msr	BASEPRI, r3
 8008a84:	f3bf 8f6f 	isb	sy
 8008a88:	f3bf 8f4f 	dsb	sy
 8008a8c:	b662      	cpsie	i
 8008a8e:	e7fe      	b.n	8008a8e <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008a90:	2f02      	cmp	r7, #2
 8008a92:	d10d      	bne.n	8008ab0 <xQueueGenericSendFromISR+0x60>
 8008a94:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008a96:	2b01      	cmp	r3, #1
 8008a98:	d00a      	beq.n	8008ab0 <xQueueGenericSendFromISR+0x60>
 8008a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a9e:	b672      	cpsid	i
 8008aa0:	f383 8811 	msr	BASEPRI, r3
 8008aa4:	f3bf 8f6f 	isb	sy
 8008aa8:	f3bf 8f4f 	dsb	sy
 8008aac:	b662      	cpsie	i
 8008aae:	e7fe      	b.n	8008aae <xQueueGenericSendFromISR+0x5e>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008ab0:	f7ff fcf0 	bl	8008494 <vPortValidateInterruptPriority>
	__asm volatile
 8008ab4:	f3ef 8611 	mrs	r6, BASEPRI
 8008ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008abc:	b672      	cpsid	i
 8008abe:	f383 8811 	msr	BASEPRI, r3
 8008ac2:	f3bf 8f6f 	isb	sy
 8008ac6:	f3bf 8f4f 	dsb	sy
 8008aca:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008acc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008ace:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008ad0:	429a      	cmp	r2, r3
 8008ad2:	d301      	bcc.n	8008ad8 <xQueueGenericSendFromISR+0x88>
 8008ad4:	2f02      	cmp	r7, #2
 8008ad6:	d122      	bne.n	8008b1e <xQueueGenericSendFromISR+0xce>
			const int8_t cTxLock = pxQueue->cTxLock;
 8008ad8:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008adc:	463a      	mov	r2, r7
 8008ade:	4649      	mov	r1, r9
 8008ae0:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 8008ae2:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008ae4:	f7ff fd13 	bl	800850e <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8008ae8:	1c6b      	adds	r3, r5, #1
 8008aea:	d113      	bne.n	8008b14 <xQueueGenericSendFromISR+0xc4>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008aec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008aee:	b90b      	cbnz	r3, 8008af4 <xQueueGenericSendFromISR+0xa4>
			xReturn = pdPASS;
 8008af0:	2001      	movs	r0, #1
 8008af2:	e00b      	b.n	8008b0c <xQueueGenericSendFromISR+0xbc>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008af4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008af8:	f000 febe 	bl	8009878 <xTaskRemoveFromEventList>
 8008afc:	2800      	cmp	r0, #0
 8008afe:	d0f7      	beq.n	8008af0 <xQueueGenericSendFromISR+0xa0>
							if( pxHigherPriorityTaskWoken != NULL )
 8008b00:	f1b8 0f00 	cmp.w	r8, #0
 8008b04:	d0f4      	beq.n	8008af0 <xQueueGenericSendFromISR+0xa0>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008b06:	2001      	movs	r0, #1
 8008b08:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 8008b0c:	f386 8811 	msr	BASEPRI, r6
}
 8008b10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008b14:	3501      	adds	r5, #1
 8008b16:	b26d      	sxtb	r5, r5
 8008b18:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 8008b1c:	e7e8      	b.n	8008af0 <xQueueGenericSendFromISR+0xa0>
			xReturn = errQUEUE_FULL;
 8008b1e:	2000      	movs	r0, #0
 8008b20:	e7f4      	b.n	8008b0c <xQueueGenericSendFromISR+0xbc>

08008b22 <xQueueGiveFromISR>:
{
 8008b22:	b570      	push	{r4, r5, r6, lr}
 8008b24:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8008b26:	4604      	mov	r4, r0
 8008b28:	b950      	cbnz	r0, 8008b40 <xQueueGiveFromISR+0x1e>
	__asm volatile
 8008b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b2e:	b672      	cpsid	i
 8008b30:	f383 8811 	msr	BASEPRI, r3
 8008b34:	f3bf 8f6f 	isb	sy
 8008b38:	f3bf 8f4f 	dsb	sy
 8008b3c:	b662      	cpsie	i
 8008b3e:	e7fe      	b.n	8008b3e <xQueueGiveFromISR+0x1c>
	configASSERT( pxQueue->uxItemSize == 0 );
 8008b40:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8008b42:	b153      	cbz	r3, 8008b5a <xQueueGiveFromISR+0x38>
 8008b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b48:	b672      	cpsid	i
 8008b4a:	f383 8811 	msr	BASEPRI, r3
 8008b4e:	f3bf 8f6f 	isb	sy
 8008b52:	f3bf 8f4f 	dsb	sy
 8008b56:	b662      	cpsie	i
 8008b58:	e7fe      	b.n	8008b58 <xQueueGiveFromISR+0x36>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8008b5a:	6803      	ldr	r3, [r0, #0]
 8008b5c:	b963      	cbnz	r3, 8008b78 <xQueueGiveFromISR+0x56>
 8008b5e:	6883      	ldr	r3, [r0, #8]
 8008b60:	b153      	cbz	r3, 8008b78 <xQueueGiveFromISR+0x56>
 8008b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b66:	b672      	cpsid	i
 8008b68:	f383 8811 	msr	BASEPRI, r3
 8008b6c:	f3bf 8f6f 	isb	sy
 8008b70:	f3bf 8f4f 	dsb	sy
 8008b74:	b662      	cpsie	i
 8008b76:	e7fe      	b.n	8008b76 <xQueueGiveFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008b78:	f7ff fc8c 	bl	8008494 <vPortValidateInterruptPriority>
	__asm volatile
 8008b7c:	f3ef 8611 	mrs	r6, BASEPRI
 8008b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b84:	b672      	cpsid	i
 8008b86:	f383 8811 	msr	BASEPRI, r3
 8008b8a:	f3bf 8f6f 	isb	sy
 8008b8e:	f3bf 8f4f 	dsb	sy
 8008b92:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008b94:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008b96:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	d91c      	bls.n	8008bd6 <xQueueGiveFromISR+0xb4>
			const int8_t cTxLock = pxQueue->cTxLock;
 8008b9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008ba0:	3201      	adds	r2, #1
			if( cTxLock == queueUNLOCKED )
 8008ba2:	29ff      	cmp	r1, #255	; 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
 8008ba4:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008ba6:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 8008ba8:	d110      	bne.n	8008bcc <xQueueGiveFromISR+0xaa>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008baa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008bac:	b90b      	cbnz	r3, 8008bb2 <xQueueGiveFromISR+0x90>
			xReturn = pdPASS;
 8008bae:	2001      	movs	r0, #1
 8008bb0:	e009      	b.n	8008bc6 <xQueueGiveFromISR+0xa4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008bb2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008bb6:	f000 fe5f 	bl	8009878 <xTaskRemoveFromEventList>
 8008bba:	2800      	cmp	r0, #0
 8008bbc:	d0f7      	beq.n	8008bae <xQueueGiveFromISR+0x8c>
							if( pxHigherPriorityTaskWoken != NULL )
 8008bbe:	2d00      	cmp	r5, #0
 8008bc0:	d0f5      	beq.n	8008bae <xQueueGiveFromISR+0x8c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008bc2:	2001      	movs	r0, #1
 8008bc4:	6028      	str	r0, [r5, #0]
	__asm volatile
 8008bc6:	f386 8811 	msr	BASEPRI, r6
}
 8008bca:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008bcc:	3301      	adds	r3, #1
 8008bce:	b25b      	sxtb	r3, r3
 8008bd0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008bd4:	e7eb      	b.n	8008bae <xQueueGiveFromISR+0x8c>
			xReturn = errQUEUE_FULL;
 8008bd6:	2000      	movs	r0, #0
 8008bd8:	e7f5      	b.n	8008bc6 <xQueueGiveFromISR+0xa4>

08008bda <xQueueReceive>:
{
 8008bda:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8008bde:	460f      	mov	r7, r1
	configASSERT( ( pxQueue ) );
 8008be0:	4604      	mov	r4, r0
{
 8008be2:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8008be4:	b950      	cbnz	r0, 8008bfc <xQueueReceive+0x22>
	__asm volatile
 8008be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bea:	b672      	cpsid	i
 8008bec:	f383 8811 	msr	BASEPRI, r3
 8008bf0:	f3bf 8f6f 	isb	sy
 8008bf4:	f3bf 8f4f 	dsb	sy
 8008bf8:	b662      	cpsie	i
 8008bfa:	e7fe      	b.n	8008bfa <xQueueReceive+0x20>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008bfc:	b961      	cbnz	r1, 8008c18 <xQueueReceive+0x3e>
 8008bfe:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8008c00:	b153      	cbz	r3, 8008c18 <xQueueReceive+0x3e>
 8008c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c06:	b672      	cpsid	i
 8008c08:	f383 8811 	msr	BASEPRI, r3
 8008c0c:	f3bf 8f6f 	isb	sy
 8008c10:	f3bf 8f4f 	dsb	sy
 8008c14:	b662      	cpsie	i
 8008c16:	e7fe      	b.n	8008c16 <xQueueReceive+0x3c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008c18:	f000 fecc 	bl	80099b4 <xTaskGetSchedulerState>
 8008c1c:	4606      	mov	r6, r0
 8008c1e:	b960      	cbnz	r0, 8008c3a <xQueueReceive+0x60>
 8008c20:	9b01      	ldr	r3, [sp, #4]
 8008c22:	b15b      	cbz	r3, 8008c3c <xQueueReceive+0x62>
 8008c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c28:	b672      	cpsid	i
 8008c2a:	f383 8811 	msr	BASEPRI, r3
 8008c2e:	f3bf 8f6f 	isb	sy
 8008c32:	f3bf 8f4f 	dsb	sy
 8008c36:	b662      	cpsie	i
 8008c38:	e7fe      	b.n	8008c38 <xQueueReceive+0x5e>
 8008c3a:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8008c3c:	f04f 0800 	mov.w	r8, #0
 8008c40:	e03d      	b.n	8008cbe <xQueueReceive+0xe4>
				if( xTicksToWait == ( TickType_t ) 0 )
 8008c42:	9d01      	ldr	r5, [sp, #4]
 8008c44:	b91d      	cbnz	r5, 8008c4e <xQueueReceive+0x74>
					taskEXIT_CRITICAL();
 8008c46:	f7ff fb49 	bl	80082dc <vPortExitCritical>
				return errQUEUE_EMPTY;
 8008c4a:	2000      	movs	r0, #0
 8008c4c:	e056      	b.n	8008cfc <xQueueReceive+0x122>
				else if( xEntryTimeSet == pdFALSE )
 8008c4e:	b916      	cbnz	r6, 8008c56 <xQueueReceive+0x7c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008c50:	a802      	add	r0, sp, #8
 8008c52:	f000 fe57 	bl	8009904 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8008c56:	f7ff fb41 	bl	80082dc <vPortExitCritical>
		vTaskSuspendAll();
 8008c5a:	f000 fbdb 	bl	8009414 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008c5e:	f7ff fb19 	bl	8008294 <vPortEnterCritical>
 8008c62:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008c66:	2bff      	cmp	r3, #255	; 0xff
 8008c68:	d101      	bne.n	8008c6e <xQueueReceive+0x94>
 8008c6a:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
 8008c6e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008c72:	2bff      	cmp	r3, #255	; 0xff
 8008c74:	d101      	bne.n	8008c7a <xQueueReceive+0xa0>
 8008c76:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
 8008c7a:	f7ff fb2f 	bl	80082dc <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008c7e:	a901      	add	r1, sp, #4
 8008c80:	a802      	add	r0, sp, #8
 8008c82:	f000 fe4b 	bl	800991c <xTaskCheckForTimeOut>
 8008c86:	2800      	cmp	r0, #0
 8008c88:	d141      	bne.n	8008d0e <xQueueReceive+0x134>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008c8a:	4620      	mov	r0, r4
 8008c8c:	f7ff fc34 	bl	80084f8 <prvIsQueueEmpty>
 8008c90:	b3b8      	cbz	r0, 8008d02 <xQueueReceive+0x128>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008c92:	9901      	ldr	r1, [sp, #4]
 8008c94:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008c98:	f000 fdb2 	bl	8009800 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008c9c:	4620      	mov	r0, r4
 8008c9e:	f7ff fc80 	bl	80085a2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008ca2:	f000 fc5d 	bl	8009560 <xTaskResumeAll>
 8008ca6:	b948      	cbnz	r0, 8008cbc <xQueueReceive+0xe2>
					portYIELD_WITHIN_API();
 8008ca8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008cac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cb0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008cb4:	f3bf 8f4f 	dsb	sy
 8008cb8:	f3bf 8f6f 	isb	sy
 8008cbc:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8008cbe:	f7ff fae9 	bl	8008294 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008cc2:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008cc4:	2d00      	cmp	r5, #0
 8008cc6:	d0bc      	beq.n	8008c42 <xQueueReceive+0x68>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008cc8:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008cca:	4639      	mov	r1, r7
 8008ccc:	4620      	mov	r0, r4
 8008cce:	f7ff fc53 	bl	8008578 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008cd2:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008cd4:	6923      	ldr	r3, [r4, #16]
 8008cd6:	b173      	cbz	r3, 8008cf6 <xQueueReceive+0x11c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008cd8:	f104 0010 	add.w	r0, r4, #16
 8008cdc:	f000 fdcc 	bl	8009878 <xTaskRemoveFromEventList>
 8008ce0:	b148      	cbz	r0, 8008cf6 <xQueueReceive+0x11c>
						queueYIELD_IF_USING_PREEMPTION();
 8008ce2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008ce6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cea:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008cee:	f3bf 8f4f 	dsb	sy
 8008cf2:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8008cf6:	f7ff faf1 	bl	80082dc <vPortExitCritical>
				return pdPASS;
 8008cfa:	2001      	movs	r0, #1
}
 8008cfc:	b004      	add	sp, #16
 8008cfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				prvUnlockQueue( pxQueue );
 8008d02:	4620      	mov	r0, r4
 8008d04:	f7ff fc4d 	bl	80085a2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008d08:	f000 fc2a 	bl	8009560 <xTaskResumeAll>
 8008d0c:	e7d6      	b.n	8008cbc <xQueueReceive+0xe2>
			prvUnlockQueue( pxQueue );
 8008d0e:	4620      	mov	r0, r4
 8008d10:	f7ff fc47 	bl	80085a2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008d14:	f000 fc24 	bl	8009560 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008d18:	4620      	mov	r0, r4
 8008d1a:	f7ff fbed 	bl	80084f8 <prvIsQueueEmpty>
 8008d1e:	2800      	cmp	r0, #0
 8008d20:	d0cc      	beq.n	8008cbc <xQueueReceive+0xe2>
 8008d22:	e792      	b.n	8008c4a <xQueueReceive+0x70>

08008d24 <xQueueSemaphoreTake>:
{
 8008d24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d26:	b085      	sub	sp, #20
	configASSERT( ( pxQueue ) );
 8008d28:	4604      	mov	r4, r0
{
 8008d2a:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8008d2c:	b950      	cbnz	r0, 8008d44 <xQueueSemaphoreTake+0x20>
 8008d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d32:	b672      	cpsid	i
 8008d34:	f383 8811 	msr	BASEPRI, r3
 8008d38:	f3bf 8f6f 	isb	sy
 8008d3c:	f3bf 8f4f 	dsb	sy
 8008d40:	b662      	cpsie	i
 8008d42:	e7fe      	b.n	8008d42 <xQueueSemaphoreTake+0x1e>
	configASSERT( pxQueue->uxItemSize == 0 );
 8008d44:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8008d46:	b155      	cbz	r5, 8008d5e <xQueueSemaphoreTake+0x3a>
 8008d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d4c:	b672      	cpsid	i
 8008d4e:	f383 8811 	msr	BASEPRI, r3
 8008d52:	f3bf 8f6f 	isb	sy
 8008d56:	f3bf 8f4f 	dsb	sy
 8008d5a:	b662      	cpsie	i
 8008d5c:	e7fe      	b.n	8008d5c <xQueueSemaphoreTake+0x38>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008d5e:	f000 fe29 	bl	80099b4 <xTaskGetSchedulerState>
 8008d62:	4606      	mov	r6, r0
 8008d64:	b960      	cbnz	r0, 8008d80 <xQueueSemaphoreTake+0x5c>
 8008d66:	9b01      	ldr	r3, [sp, #4]
 8008d68:	b16b      	cbz	r3, 8008d86 <xQueueSemaphoreTake+0x62>
 8008d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d6e:	b672      	cpsid	i
 8008d70:	f383 8811 	msr	BASEPRI, r3
 8008d74:	f3bf 8f6f 	isb	sy
 8008d78:	f3bf 8f4f 	dsb	sy
 8008d7c:	b662      	cpsie	i
 8008d7e:	e7fe      	b.n	8008d7e <xQueueSemaphoreTake+0x5a>
 8008d80:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 8008d82:	2700      	movs	r7, #0
 8008d84:	e055      	b.n	8008e32 <xQueueSemaphoreTake+0x10e>
 8008d86:	4605      	mov	r5, r0
 8008d88:	e7fb      	b.n	8008d82 <xQueueSemaphoreTake+0x5e>
				if( xTicksToWait == ( TickType_t ) 0 )
 8008d8a:	9b01      	ldr	r3, [sp, #4]
 8008d8c:	b973      	cbnz	r3, 8008dac <xQueueSemaphoreTake+0x88>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008d8e:	b155      	cbz	r5, 8008da6 <xQueueSemaphoreTake+0x82>
 8008d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d94:	b672      	cpsid	i
 8008d96:	f383 8811 	msr	BASEPRI, r3
 8008d9a:	f3bf 8f6f 	isb	sy
 8008d9e:	f3bf 8f4f 	dsb	sy
 8008da2:	b662      	cpsie	i
 8008da4:	e7fe      	b.n	8008da4 <xQueueSemaphoreTake+0x80>
					taskEXIT_CRITICAL();
 8008da6:	f7ff fa99 	bl	80082dc <vPortExitCritical>
					return errQUEUE_EMPTY;
 8008daa:	e062      	b.n	8008e72 <xQueueSemaphoreTake+0x14e>
				else if( xEntryTimeSet == pdFALSE )
 8008dac:	b916      	cbnz	r6, 8008db4 <xQueueSemaphoreTake+0x90>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008dae:	a802      	add	r0, sp, #8
 8008db0:	f000 fda8 	bl	8009904 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8008db4:	f7ff fa92 	bl	80082dc <vPortExitCritical>
		vTaskSuspendAll();
 8008db8:	f000 fb2c 	bl	8009414 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008dbc:	f7ff fa6a 	bl	8008294 <vPortEnterCritical>
 8008dc0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008dc4:	2bff      	cmp	r3, #255	; 0xff
 8008dc6:	d101      	bne.n	8008dcc <xQueueSemaphoreTake+0xa8>
 8008dc8:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 8008dcc:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008dd0:	2bff      	cmp	r3, #255	; 0xff
 8008dd2:	d101      	bne.n	8008dd8 <xQueueSemaphoreTake+0xb4>
 8008dd4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008dd8:	f7ff fa80 	bl	80082dc <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008ddc:	a901      	add	r1, sp, #4
 8008dde:	a802      	add	r0, sp, #8
 8008de0:	f000 fd9c 	bl	800991c <xTaskCheckForTimeOut>
 8008de4:	2800      	cmp	r0, #0
 8008de6:	d14d      	bne.n	8008e84 <xQueueSemaphoreTake+0x160>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008de8:	4620      	mov	r0, r4
 8008dea:	f7ff fb85 	bl	80084f8 <prvIsQueueEmpty>
 8008dee:	2800      	cmp	r0, #0
 8008df0:	d042      	beq.n	8008e78 <xQueueSemaphoreTake+0x154>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008df2:	6823      	ldr	r3, [r4, #0]
 8008df4:	b93b      	cbnz	r3, 8008e06 <xQueueSemaphoreTake+0xe2>
						taskENTER_CRITICAL();
 8008df6:	f7ff fa4d 	bl	8008294 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008dfa:	68a0      	ldr	r0, [r4, #8]
 8008dfc:	f000 fdea 	bl	80099d4 <xTaskPriorityInherit>
 8008e00:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 8008e02:	f7ff fa6b 	bl	80082dc <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008e06:	9901      	ldr	r1, [sp, #4]
 8008e08:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008e0c:	f000 fcf8 	bl	8009800 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008e10:	4620      	mov	r0, r4
 8008e12:	f7ff fbc6 	bl	80085a2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008e16:	f000 fba3 	bl	8009560 <xTaskResumeAll>
 8008e1a:	b948      	cbnz	r0, 8008e30 <xQueueSemaphoreTake+0x10c>
					portYIELD_WITHIN_API();
 8008e1c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008e20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e24:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008e28:	f3bf 8f4f 	dsb	sy
 8008e2c:	f3bf 8f6f 	isb	sy
 8008e30:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8008e32:	f7ff fa2f 	bl	8008294 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008e36:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d0a6      	beq.n	8008d8a <xQueueSemaphoreTake+0x66>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008e3c:	3b01      	subs	r3, #1
 8008e3e:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008e40:	6823      	ldr	r3, [r4, #0]
 8008e42:	b913      	cbnz	r3, 8008e4a <xQueueSemaphoreTake+0x126>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008e44:	f000 fea4 	bl	8009b90 <pvTaskIncrementMutexHeldCount>
 8008e48:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008e4a:	6923      	ldr	r3, [r4, #16]
 8008e4c:	b173      	cbz	r3, 8008e6c <xQueueSemaphoreTake+0x148>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008e4e:	f104 0010 	add.w	r0, r4, #16
 8008e52:	f000 fd11 	bl	8009878 <xTaskRemoveFromEventList>
 8008e56:	b148      	cbz	r0, 8008e6c <xQueueSemaphoreTake+0x148>
						queueYIELD_IF_USING_PREEMPTION();
 8008e58:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008e5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e60:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008e64:	f3bf 8f4f 	dsb	sy
 8008e68:	f3bf 8f6f 	isb	sy
				return pdPASS;
 8008e6c:	2501      	movs	r5, #1
				taskEXIT_CRITICAL();
 8008e6e:	f7ff fa35 	bl	80082dc <vPortExitCritical>
}
 8008e72:	4628      	mov	r0, r5
 8008e74:	b005      	add	sp, #20
 8008e76:	bdf0      	pop	{r4, r5, r6, r7, pc}
				prvUnlockQueue( pxQueue );
 8008e78:	4620      	mov	r0, r4
 8008e7a:	f7ff fb92 	bl	80085a2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008e7e:	f000 fb6f 	bl	8009560 <xTaskResumeAll>
 8008e82:	e7d5      	b.n	8008e30 <xQueueSemaphoreTake+0x10c>
			prvUnlockQueue( pxQueue );
 8008e84:	4620      	mov	r0, r4
 8008e86:	f7ff fb8c 	bl	80085a2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008e8a:	f000 fb69 	bl	8009560 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008e8e:	4620      	mov	r0, r4
 8008e90:	f7ff fb32 	bl	80084f8 <prvIsQueueEmpty>
 8008e94:	2800      	cmp	r0, #0
 8008e96:	d0cb      	beq.n	8008e30 <xQueueSemaphoreTake+0x10c>
					if( xInheritanceOccurred != pdFALSE )
 8008e98:	2d00      	cmp	r5, #0
 8008e9a:	d0ea      	beq.n	8008e72 <xQueueSemaphoreTake+0x14e>
						taskENTER_CRITICAL();
 8008e9c:	f7ff f9fa 	bl	8008294 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008ea0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008ea2:	b119      	cbz	r1, 8008eac <xQueueSemaphoreTake+0x188>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008ea4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008ea6:	6819      	ldr	r1, [r3, #0]
 8008ea8:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008eac:	68a0      	ldr	r0, [r4, #8]
				return errQUEUE_EMPTY;
 8008eae:	2500      	movs	r5, #0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008eb0:	f000 fe18 	bl	8009ae4 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 8008eb4:	f7ff fa12 	bl	80082dc <vPortExitCritical>
 8008eb8:	e7db      	b.n	8008e72 <xQueueSemaphoreTake+0x14e>

08008eba <xQueueTakeMutexRecursive>:
	{
 8008eba:	b537      	push	{r0, r1, r2, r4, r5, lr}
		configASSERT( pxMutex );
 8008ebc:	4604      	mov	r4, r0
 8008ebe:	b950      	cbnz	r0, 8008ed6 <xQueueTakeMutexRecursive+0x1c>
 8008ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ec4:	b672      	cpsid	i
 8008ec6:	f383 8811 	msr	BASEPRI, r3
 8008eca:	f3bf 8f6f 	isb	sy
 8008ece:	f3bf 8f4f 	dsb	sy
 8008ed2:	b662      	cpsie	i
 8008ed4:	e7fe      	b.n	8008ed4 <xQueueTakeMutexRecursive+0x1a>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8008ed6:	6885      	ldr	r5, [r0, #8]
 8008ed8:	9101      	str	r1, [sp, #4]
 8008eda:	f000 fd65 	bl	80099a8 <xTaskGetCurrentTaskHandle>
 8008ede:	4285      	cmp	r5, r0
 8008ee0:	9901      	ldr	r1, [sp, #4]
 8008ee2:	d105      	bne.n	8008ef0 <xQueueTakeMutexRecursive+0x36>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8008ee4:	68e3      	ldr	r3, [r4, #12]
			xReturn = pdPASS;
 8008ee6:	2001      	movs	r0, #1
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8008ee8:	3301      	adds	r3, #1
 8008eea:	60e3      	str	r3, [r4, #12]
	}
 8008eec:	b003      	add	sp, #12
 8008eee:	bd30      	pop	{r4, r5, pc}
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8008ef0:	4620      	mov	r0, r4
 8008ef2:	f7ff ff17 	bl	8008d24 <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 8008ef6:	2800      	cmp	r0, #0
 8008ef8:	d0f8      	beq.n	8008eec <xQueueTakeMutexRecursive+0x32>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8008efa:	68e3      	ldr	r3, [r4, #12]
 8008efc:	3301      	adds	r3, #1
 8008efe:	60e3      	str	r3, [r4, #12]
		return xReturn;
 8008f00:	e7f4      	b.n	8008eec <xQueueTakeMutexRecursive+0x32>

08008f02 <xQueueReceiveFromISR>:
{
 8008f02:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f06:	4689      	mov	r9, r1
 8008f08:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 8008f0a:	4605      	mov	r5, r0
 8008f0c:	b950      	cbnz	r0, 8008f24 <xQueueReceiveFromISR+0x22>
 8008f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f12:	b672      	cpsid	i
 8008f14:	f383 8811 	msr	BASEPRI, r3
 8008f18:	f3bf 8f6f 	isb	sy
 8008f1c:	f3bf 8f4f 	dsb	sy
 8008f20:	b662      	cpsie	i
 8008f22:	e7fe      	b.n	8008f22 <xQueueReceiveFromISR+0x20>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008f24:	b961      	cbnz	r1, 8008f40 <xQueueReceiveFromISR+0x3e>
 8008f26:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8008f28:	b153      	cbz	r3, 8008f40 <xQueueReceiveFromISR+0x3e>
 8008f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f2e:	b672      	cpsid	i
 8008f30:	f383 8811 	msr	BASEPRI, r3
 8008f34:	f3bf 8f6f 	isb	sy
 8008f38:	f3bf 8f4f 	dsb	sy
 8008f3c:	b662      	cpsie	i
 8008f3e:	e7fe      	b.n	8008f3e <xQueueReceiveFromISR+0x3c>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008f40:	f7ff faa8 	bl	8008494 <vPortValidateInterruptPriority>
	__asm volatile
 8008f44:	f3ef 8711 	mrs	r7, BASEPRI
 8008f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f4c:	b672      	cpsid	i
 8008f4e:	f383 8811 	msr	BASEPRI, r3
 8008f52:	f3bf 8f6f 	isb	sy
 8008f56:	f3bf 8f4f 	dsb	sy
 8008f5a:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008f5c:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008f5e:	b31c      	cbz	r4, 8008fa8 <xQueueReceiveFromISR+0xa6>
			const int8_t cRxLock = pxQueue->cRxLock;
 8008f60:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008f64:	4649      	mov	r1, r9
 8008f66:	4628      	mov	r0, r5
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008f68:	3c01      	subs	r4, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 8008f6a:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008f6c:	f7ff fb04 	bl	8008578 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008f70:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8008f72:	1c73      	adds	r3, r6, #1
 8008f74:	d113      	bne.n	8008f9e <xQueueReceiveFromISR+0x9c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008f76:	692b      	ldr	r3, [r5, #16]
 8008f78:	b90b      	cbnz	r3, 8008f7e <xQueueReceiveFromISR+0x7c>
			xReturn = pdPASS;
 8008f7a:	2001      	movs	r0, #1
 8008f7c:	e00b      	b.n	8008f96 <xQueueReceiveFromISR+0x94>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008f7e:	f105 0010 	add.w	r0, r5, #16
 8008f82:	f000 fc79 	bl	8009878 <xTaskRemoveFromEventList>
 8008f86:	2800      	cmp	r0, #0
 8008f88:	d0f7      	beq.n	8008f7a <xQueueReceiveFromISR+0x78>
						if( pxHigherPriorityTaskWoken != NULL )
 8008f8a:	f1b8 0f00 	cmp.w	r8, #0
 8008f8e:	d0f4      	beq.n	8008f7a <xQueueReceiveFromISR+0x78>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008f90:	2001      	movs	r0, #1
 8008f92:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 8008f96:	f387 8811 	msr	BASEPRI, r7
}
 8008f9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008f9e:	3601      	adds	r6, #1
 8008fa0:	b276      	sxtb	r6, r6
 8008fa2:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
 8008fa6:	e7e8      	b.n	8008f7a <xQueueReceiveFromISR+0x78>
			xReturn = pdFAIL;
 8008fa8:	4620      	mov	r0, r4
 8008faa:	e7f4      	b.n	8008f96 <xQueueReceiveFromISR+0x94>

08008fac <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008fac:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008fae:	4a07      	ldr	r2, [pc, #28]	; (8008fcc <vQueueAddToRegistry+0x20>)
	{
 8008fb0:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008fb2:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 8008fb6:	b92c      	cbnz	r4, 8008fc4 <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008fb8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008fbc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008fc0:	6058      	str	r0, [r3, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008fc2:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008fc4:	3301      	adds	r3, #1
 8008fc6:	2b08      	cmp	r3, #8
 8008fc8:	d1f3      	bne.n	8008fb2 <vQueueAddToRegistry+0x6>
 8008fca:	e7fa      	b.n	8008fc2 <vQueueAddToRegistry+0x16>
 8008fcc:	20017150 	.word	0x20017150

08008fd0 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008fd0:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8008fd2:	4a08      	ldr	r2, [pc, #32]	; (8008ff4 <vQueueUnregisterQueue+0x24>)
	{
 8008fd4:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8008fd6:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8008fda:	684c      	ldr	r4, [r1, #4]
 8008fdc:	4284      	cmp	r4, r0
 8008fde:	d104      	bne.n	8008fea <vQueueUnregisterQueue+0x1a>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8008fe0:	2000      	movs	r0, #0
 8008fe2:	f842 0033 	str.w	r0, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008fe6:	6048      	str	r0, [r1, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8008fe8:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008fea:	3301      	adds	r3, #1
 8008fec:	2b08      	cmp	r3, #8
 8008fee:	d1f2      	bne.n	8008fd6 <vQueueUnregisterQueue+0x6>
 8008ff0:	e7fa      	b.n	8008fe8 <vQueueUnregisterQueue+0x18>
 8008ff2:	bf00      	nop
 8008ff4:	20017150 	.word	0x20017150

08008ff8 <vQueueDelete>:
{
 8008ff8:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 8008ffa:	4604      	mov	r4, r0
 8008ffc:	b950      	cbnz	r0, 8009014 <vQueueDelete+0x1c>
	__asm volatile
 8008ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009002:	b672      	cpsid	i
 8009004:	f383 8811 	msr	BASEPRI, r3
 8009008:	f3bf 8f6f 	isb	sy
 800900c:	f3bf 8f4f 	dsb	sy
 8009010:	b662      	cpsie	i
 8009012:	e7fe      	b.n	8009012 <vQueueDelete+0x1a>
		vQueueUnregisterQueue( pxQueue );
 8009014:	f7ff ffdc 	bl	8008fd0 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009018:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800901c:	b923      	cbnz	r3, 8009028 <vQueueDelete+0x30>
			vPortFree( pxQueue );
 800901e:	4620      	mov	r0, r4
}
 8009020:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			vPortFree( pxQueue );
 8009024:	f7ff b84c 	b.w	80080c0 <vPortFree>
}
 8009028:	bd10      	pop	{r4, pc}

0800902a <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800902a:	b570      	push	{r4, r5, r6, lr}
 800902c:	4604      	mov	r4, r0
 800902e:	460d      	mov	r5, r1
 8009030:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009032:	f7ff f92f 	bl	8008294 <vPortEnterCritical>
 8009036:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800903a:	2bff      	cmp	r3, #255	; 0xff
 800903c:	d102      	bne.n	8009044 <vQueueWaitForMessageRestricted+0x1a>
 800903e:	2300      	movs	r3, #0
 8009040:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8009044:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8009048:	2bff      	cmp	r3, #255	; 0xff
 800904a:	d102      	bne.n	8009052 <vQueueWaitForMessageRestricted+0x28>
 800904c:	2300      	movs	r3, #0
 800904e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009052:	f7ff f943 	bl	80082dc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009056:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009058:	b92b      	cbnz	r3, 8009066 <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800905a:	4632      	mov	r2, r6
 800905c:	4629      	mov	r1, r5
 800905e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009062:	f000 fbe9 	bl	8009838 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009066:	4620      	mov	r0, r4
	}
 8009068:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 800906c:	f7ff ba99 	b.w	80085a2 <prvUnlockQueue>

08009070 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009074:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009076:	f7ff f90d 	bl	8008294 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800907a:	4b2f      	ldr	r3, [pc, #188]	; (8009138 <prvAddNewTaskToReadyList+0xc8>)
		if( pxCurrentTCB == NULL )
 800907c:	4e2f      	ldr	r6, [pc, #188]	; (800913c <prvAddNewTaskToReadyList+0xcc>)
		uxCurrentNumberOfTasks++;
 800907e:	681a      	ldr	r2, [r3, #0]
 8009080:	4f2f      	ldr	r7, [pc, #188]	; (8009140 <prvAddNewTaskToReadyList+0xd0>)
 8009082:	3201      	adds	r2, #1
 8009084:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8009086:	6835      	ldr	r5, [r6, #0]
 8009088:	2d00      	cmp	r5, #0
 800908a:	d14a      	bne.n	8009122 <prvAddNewTaskToReadyList+0xb2>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800908c:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	2b01      	cmp	r3, #1
 8009092:	d11f      	bne.n	80090d4 <prvAddNewTaskToReadyList+0x64>
 8009094:	46b8      	mov	r8, r7

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009096:	3501      	adds	r5, #1
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009098:	4640      	mov	r0, r8
 800909a:	f7ff f84d 	bl	8008138 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800909e:	f108 0814 	add.w	r8, r8, #20
 80090a2:	2d38      	cmp	r5, #56	; 0x38
 80090a4:	d1f7      	bne.n	8009096 <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 80090a6:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8009168 <prvAddNewTaskToReadyList+0xf8>
	vListInitialise( &xDelayedTaskList2 );
 80090aa:	4d26      	ldr	r5, [pc, #152]	; (8009144 <prvAddNewTaskToReadyList+0xd4>)
	vListInitialise( &xDelayedTaskList1 );
 80090ac:	4640      	mov	r0, r8
 80090ae:	f7ff f843 	bl	8008138 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80090b2:	4628      	mov	r0, r5
 80090b4:	f7ff f840 	bl	8008138 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80090b8:	4823      	ldr	r0, [pc, #140]	; (8009148 <prvAddNewTaskToReadyList+0xd8>)
 80090ba:	f7ff f83d 	bl	8008138 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80090be:	4823      	ldr	r0, [pc, #140]	; (800914c <prvAddNewTaskToReadyList+0xdc>)
 80090c0:	f7ff f83a 	bl	8008138 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80090c4:	4822      	ldr	r0, [pc, #136]	; (8009150 <prvAddNewTaskToReadyList+0xe0>)
 80090c6:	f7ff f837 	bl	8008138 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80090ca:	4b22      	ldr	r3, [pc, #136]	; (8009154 <prvAddNewTaskToReadyList+0xe4>)
 80090cc:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80090d0:	4b21      	ldr	r3, [pc, #132]	; (8009158 <prvAddNewTaskToReadyList+0xe8>)
 80090d2:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 80090d4:	4a21      	ldr	r2, [pc, #132]	; (800915c <prvAddNewTaskToReadyList+0xec>)
 80090d6:	6813      	ldr	r3, [r2, #0]
 80090d8:	3301      	adds	r3, #1
 80090da:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80090dc:	4a20      	ldr	r2, [pc, #128]	; (8009160 <prvAddNewTaskToReadyList+0xf0>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80090de:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 80090e0:	6811      	ldr	r1, [r2, #0]
 80090e2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80090e4:	428b      	cmp	r3, r1
 80090e6:	d900      	bls.n	80090ea <prvAddNewTaskToReadyList+0x7a>
 80090e8:	6013      	str	r3, [r2, #0]
 80090ea:	2014      	movs	r0, #20
 80090ec:	1d21      	adds	r1, r4, #4
 80090ee:	fb00 7003 	mla	r0, r0, r3, r7
 80090f2:	f7ff f82f 	bl	8008154 <vListInsertEnd>
	taskEXIT_CRITICAL();
 80090f6:	f7ff f8f1 	bl	80082dc <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80090fa:	4b1a      	ldr	r3, [pc, #104]	; (8009164 <prvAddNewTaskToReadyList+0xf4>)
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	b173      	cbz	r3, 800911e <prvAddNewTaskToReadyList+0xae>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009100:	6833      	ldr	r3, [r6, #0]
 8009102:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009104:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009106:	429a      	cmp	r2, r3
 8009108:	d209      	bcs.n	800911e <prvAddNewTaskToReadyList+0xae>
			taskYIELD_IF_USING_PREEMPTION();
 800910a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800910e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009112:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009116:	f3bf 8f4f 	dsb	sy
 800911a:	f3bf 8f6f 	isb	sy
}
 800911e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 8009122:	4b10      	ldr	r3, [pc, #64]	; (8009164 <prvAddNewTaskToReadyList+0xf4>)
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d1d4      	bne.n	80090d4 <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800912a:	6833      	ldr	r3, [r6, #0]
 800912c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800912e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009130:	429a      	cmp	r2, r3
 8009132:	d8cf      	bhi.n	80090d4 <prvAddNewTaskToReadyList+0x64>
					pxCurrentTCB = pxNewTCB;
 8009134:	6034      	str	r4, [r6, #0]
 8009136:	e7cd      	b.n	80090d4 <prvAddNewTaskToReadyList+0x64>
 8009138:	200175fc 	.word	0x200175fc
 800913c:	20017190 	.word	0x20017190
 8009140:	2001719c 	.word	0x2001719c
 8009144:	20017628 	.word	0x20017628
 8009148:	20017644 	.word	0x20017644
 800914c:	20017670 	.word	0x20017670
 8009150:	2001765c 	.word	0x2001765c
 8009154:	20017194 	.word	0x20017194
 8009158:	20017198 	.word	0x20017198
 800915c:	2001760c 	.word	0x2001760c
 8009160:	20017610 	.word	0x20017610
 8009164:	20017658 	.word	0x20017658
 8009168:	20017614 	.word	0x20017614

0800916c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800916c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800916e:	4b15      	ldr	r3, [pc, #84]	; (80091c4 <prvAddCurrentTaskToDelayedList+0x58>)
{
 8009170:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009172:	4e15      	ldr	r6, [pc, #84]	; (80091c8 <prvAddCurrentTaskToDelayedList+0x5c>)
{
 8009174:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 8009176:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009178:	6830      	ldr	r0, [r6, #0]
 800917a:	3004      	adds	r0, #4
 800917c:	f7ff f80d 	bl	800819a <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009180:	1c63      	adds	r3, r4, #1
 8009182:	d107      	bne.n	8009194 <prvAddCurrentTaskToDelayedList+0x28>
 8009184:	b137      	cbz	r7, 8009194 <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009186:	6831      	ldr	r1, [r6, #0]
 8009188:	4810      	ldr	r0, [pc, #64]	; (80091cc <prvAddCurrentTaskToDelayedList+0x60>)
 800918a:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800918c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009190:	f7fe bfe0 	b.w	8008154 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009194:	192c      	adds	r4, r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009196:	6833      	ldr	r3, [r6, #0]
 8009198:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800919a:	d307      	bcc.n	80091ac <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800919c:	4b0c      	ldr	r3, [pc, #48]	; (80091d0 <prvAddCurrentTaskToDelayedList+0x64>)
 800919e:	6818      	ldr	r0, [r3, #0]
 80091a0:	6831      	ldr	r1, [r6, #0]
}
 80091a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80091a6:	3104      	adds	r1, #4
 80091a8:	f7fe bfe0 	b.w	800816c <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80091ac:	4b09      	ldr	r3, [pc, #36]	; (80091d4 <prvAddCurrentTaskToDelayedList+0x68>)
 80091ae:	6818      	ldr	r0, [r3, #0]
 80091b0:	6831      	ldr	r1, [r6, #0]
 80091b2:	3104      	adds	r1, #4
 80091b4:	f7fe ffda 	bl	800816c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80091b8:	4b07      	ldr	r3, [pc, #28]	; (80091d8 <prvAddCurrentTaskToDelayedList+0x6c>)
 80091ba:	681a      	ldr	r2, [r3, #0]
 80091bc:	42a2      	cmp	r2, r4
 80091be:	d900      	bls.n	80091c2 <prvAddCurrentTaskToDelayedList+0x56>
					xNextTaskUnblockTime = xTimeToWake;
 80091c0:	601c      	str	r4, [r3, #0]
}
 80091c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091c4:	20017684 	.word	0x20017684
 80091c8:	20017190 	.word	0x20017190
 80091cc:	2001765c 	.word	0x2001765c
 80091d0:	20017198 	.word	0x20017198
 80091d4:	20017194 	.word	0x20017194
 80091d8:	2001763c 	.word	0x2001763c

080091dc <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80091dc:	4a06      	ldr	r2, [pc, #24]	; (80091f8 <prvResetNextTaskUnblockTime+0x1c>)
 80091de:	6813      	ldr	r3, [r2, #0]
 80091e0:	6819      	ldr	r1, [r3, #0]
 80091e2:	4b06      	ldr	r3, [pc, #24]	; (80091fc <prvResetNextTaskUnblockTime+0x20>)
 80091e4:	b919      	cbnz	r1, 80091ee <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 80091e6:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80091ea:	601a      	str	r2, [r3, #0]
}
 80091ec:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091ee:	6812      	ldr	r2, [r2, #0]
 80091f0:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80091f2:	68d2      	ldr	r2, [r2, #12]
 80091f4:	6852      	ldr	r2, [r2, #4]
 80091f6:	e7f8      	b.n	80091ea <prvResetNextTaskUnblockTime+0xe>
 80091f8:	20017194 	.word	0x20017194
 80091fc:	2001763c 	.word	0x2001763c

08009200 <prvDeleteTCB>:
	{
 8009200:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009202:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
	{
 8009206:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009208:	b93b      	cbnz	r3, 800921a <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 800920a:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800920c:	f7fe ff58 	bl	80080c0 <vPortFree>
				vPortFree( pxTCB );
 8009210:	4620      	mov	r0, r4
	}
 8009212:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8009216:	f7fe bf53 	b.w	80080c0 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800921a:	2b01      	cmp	r3, #1
 800921c:	d0f9      	beq.n	8009212 <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800921e:	2b02      	cmp	r3, #2
 8009220:	d00a      	beq.n	8009238 <prvDeleteTCB+0x38>
 8009222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009226:	b672      	cpsid	i
 8009228:	f383 8811 	msr	BASEPRI, r3
 800922c:	f3bf 8f6f 	isb	sy
 8009230:	f3bf 8f4f 	dsb	sy
 8009234:	b662      	cpsie	i
 8009236:	e7fe      	b.n	8009236 <prvDeleteTCB+0x36>
	}
 8009238:	bd10      	pop	{r4, pc}
	...

0800923c <prvIdleTask>:
{
 800923c:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800923e:	4c14      	ldr	r4, [pc, #80]	; (8009290 <prvIdleTask+0x54>)
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009240:	4f14      	ldr	r7, [pc, #80]	; (8009294 <prvIdleTask+0x58>)
				--uxCurrentNumberOfTasks;
 8009242:	4d15      	ldr	r5, [pc, #84]	; (8009298 <prvIdleTask+0x5c>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009244:	6823      	ldr	r3, [r4, #0]
 8009246:	b983      	cbnz	r3, 800926a <prvIdleTask+0x2e>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009248:	4b14      	ldr	r3, [pc, #80]	; (800929c <prvIdleTask+0x60>)
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	2b01      	cmp	r3, #1
 800924e:	d909      	bls.n	8009264 <prvIdleTask+0x28>
				taskYIELD();
 8009250:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009254:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009258:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800925c:	f3bf 8f4f 	dsb	sy
 8009260:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 8009264:	f7f7 fdc4 	bl	8000df0 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8009268:	e7eb      	b.n	8009242 <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 800926a:	f7ff f813 	bl	8008294 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009272:	1d30      	adds	r0, r6, #4
 8009274:	f7fe ff91 	bl	800819a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009278:	682b      	ldr	r3, [r5, #0]
 800927a:	3b01      	subs	r3, #1
 800927c:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 800927e:	6823      	ldr	r3, [r4, #0]
 8009280:	3b01      	subs	r3, #1
 8009282:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8009284:	f7ff f82a 	bl	80082dc <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8009288:	4630      	mov	r0, r6
 800928a:	f7ff ffb9 	bl	8009200 <prvDeleteTCB>
 800928e:	e7d9      	b.n	8009244 <prvIdleTask+0x8>
 8009290:	20017600 	.word	0x20017600
 8009294:	20017670 	.word	0x20017670
 8009298:	200175fc 	.word	0x200175fc
 800929c:	2001719c 	.word	0x2001719c

080092a0 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80092a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80092a4:	ea4f 0982 	mov.w	r9, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80092a8:	4606      	mov	r6, r0
 80092aa:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80092ac:	21a5      	movs	r1, #165	; 0xa5
 80092ae:	464a      	mov	r2, r9
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80092b0:	461f      	mov	r7, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80092b2:	f1a9 0904 	sub.w	r9, r9, #4
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80092b6:	e9dd 8409 	ldrd	r8, r4, [sp, #36]	; 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80092ba:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80092bc:	f020 ffaa 	bl	802a214 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80092c0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80092c2:	4491      	add	r9, r2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80092c4:	f029 0907 	bic.w	r9, r9, #7
	if( pcName != NULL )
 80092c8:	b3b5      	cbz	r5, 8009338 <prvInitialiseNewTask.constprop.0+0x98>
 80092ca:	1e6b      	subs	r3, r5, #1
 80092cc:	f104 0234 	add.w	r2, r4, #52	; 0x34
 80092d0:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80092d2:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 80092d6:	f802 0b01 	strb.w	r0, [r2], #1
			if( pcName[ x ] == ( char ) 0x00 )
 80092da:	b108      	cbz	r0, 80092e0 <prvInitialiseNewTask.constprop.0+0x40>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80092dc:	42ab      	cmp	r3, r5
 80092de:	d1f8      	bne.n	80092d2 <prvInitialiseNewTask.constprop.0+0x32>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80092e0:	2300      	movs	r3, #0
 80092e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80092e6:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 80092e8:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80092ec:	1d20      	adds	r0, r4, #4
 80092ee:	2d37      	cmp	r5, #55	; 0x37
		pxNewTCB->uxMutexesHeld = 0;
 80092f0:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
 80092f4:	bf28      	it	cs
 80092f6:	2537      	movcs	r5, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 80092f8:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 80092fa:	64e5      	str	r5, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80092fc:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009300:	f7fe ff25 	bl	800814e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009304:	f104 0018 	add.w	r0, r4, #24
 8009308:	f7fe ff21 	bl	800814e <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 800930c:	f8c4 a058 	str.w	sl, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009310:	463a      	mov	r2, r7
 8009312:	4631      	mov	r1, r6
 8009314:	4648      	mov	r0, r9
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009316:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009318:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800931a:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTaskTag = NULL;
 800931c:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009320:	f884 a05c 	strb.w	sl, [r4, #92]	; 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009324:	f7fe ff8c 	bl	8008240 <pxPortInitialiseStack>
 8009328:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 800932a:	f1b8 0f00 	cmp.w	r8, #0
 800932e:	d001      	beq.n	8009334 <prvInitialiseNewTask.constprop.0+0x94>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009330:	f8c8 4000 	str.w	r4, [r8]
}
 8009334:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009338:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 800933c:	e7d3      	b.n	80092e6 <prvInitialiseNewTask.constprop.0+0x46>

0800933e <xTaskCreateStatic>:
	{
 800933e:	b570      	push	{r4, r5, r6, lr}
 8009340:	b086      	sub	sp, #24
 8009342:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 8009346:	b955      	cbnz	r5, 800935e <xTaskCreateStatic+0x20>
 8009348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800934c:	b672      	cpsid	i
 800934e:	f383 8811 	msr	BASEPRI, r3
 8009352:	f3bf 8f6f 	isb	sy
 8009356:	f3bf 8f4f 	dsb	sy
 800935a:	b662      	cpsie	i
 800935c:	e7fe      	b.n	800935c <xTaskCreateStatic+0x1e>
		configASSERT( pxTaskBuffer != NULL );
 800935e:	b954      	cbnz	r4, 8009376 <xTaskCreateStatic+0x38>
 8009360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009364:	b672      	cpsid	i
 8009366:	f383 8811 	msr	BASEPRI, r3
 800936a:	f3bf 8f6f 	isb	sy
 800936e:	f3bf 8f4f 	dsb	sy
 8009372:	b662      	cpsie	i
 8009374:	e7fe      	b.n	8009374 <xTaskCreateStatic+0x36>
			volatile size_t xSize = sizeof( StaticTask_t );
 8009376:	2660      	movs	r6, #96	; 0x60
 8009378:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800937a:	9e05      	ldr	r6, [sp, #20]
 800937c:	2e60      	cmp	r6, #96	; 0x60
 800937e:	d00a      	beq.n	8009396 <xTaskCreateStatic+0x58>
 8009380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009384:	b672      	cpsid	i
 8009386:	f383 8811 	msr	BASEPRI, r3
 800938a:	f3bf 8f6f 	isb	sy
 800938e:	f3bf 8f4f 	dsb	sy
 8009392:	b662      	cpsie	i
 8009394:	e7fe      	b.n	8009394 <xTaskCreateStatic+0x56>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009396:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009398:	2502      	movs	r5, #2
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800939a:	9e05      	ldr	r6, [sp, #20]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800939c:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80093a0:	ad04      	add	r5, sp, #16
 80093a2:	9402      	str	r4, [sp, #8]
 80093a4:	9501      	str	r5, [sp, #4]
 80093a6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80093a8:	9500      	str	r5, [sp, #0]
 80093aa:	f7ff ff79 	bl	80092a0 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 80093ae:	4620      	mov	r0, r4
 80093b0:	f7ff fe5e 	bl	8009070 <prvAddNewTaskToReadyList>
	}
 80093b4:	9804      	ldr	r0, [sp, #16]
 80093b6:	b006      	add	sp, #24
 80093b8:	bd70      	pop	{r4, r5, r6, pc}

080093ba <xTaskCreate>:
	{
 80093ba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80093be:	4607      	mov	r7, r0
 80093c0:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80093c2:	0090      	lsls	r0, r2, #2
	{
 80093c4:	4688      	mov	r8, r1
 80093c6:	4616      	mov	r6, r2
 80093c8:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80093ca:	f7fe fde3 	bl	8007f94 <pvPortMalloc>
			if( pxStack != NULL )
 80093ce:	4605      	mov	r5, r0
 80093d0:	b1e8      	cbz	r0, 800940e <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80093d2:	2060      	movs	r0, #96	; 0x60
 80093d4:	f7fe fdde 	bl	8007f94 <pvPortMalloc>
				if( pxNewTCB != NULL )
 80093d8:	4604      	mov	r4, r0
 80093da:	b1a8      	cbz	r0, 8009408 <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80093dc:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 80093de:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80093e0:	4632      	mov	r2, r6
 80093e2:	4641      	mov	r1, r8
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80093e4:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80093e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80093ea:	9002      	str	r0, [sp, #8]
 80093ec:	4638      	mov	r0, r7
 80093ee:	9301      	str	r3, [sp, #4]
 80093f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80093f2:	9300      	str	r3, [sp, #0]
 80093f4:	464b      	mov	r3, r9
 80093f6:	f7ff ff53 	bl	80092a0 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 80093fa:	4620      	mov	r0, r4
 80093fc:	f7ff fe38 	bl	8009070 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009400:	2001      	movs	r0, #1
	}
 8009402:	b005      	add	sp, #20
 8009404:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8009408:	4628      	mov	r0, r5
 800940a:	f7fe fe59 	bl	80080c0 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800940e:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 8009412:	e7f6      	b.n	8009402 <xTaskCreate+0x48>

08009414 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8009414:	4a02      	ldr	r2, [pc, #8]	; (8009420 <vTaskSuspendAll+0xc>)
 8009416:	6813      	ldr	r3, [r2, #0]
 8009418:	3301      	adds	r3, #1
 800941a:	6013      	str	r3, [r2, #0]
}
 800941c:	4770      	bx	lr
 800941e:	bf00      	nop
 8009420:	20017608 	.word	0x20017608

08009424 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8009424:	4b01      	ldr	r3, [pc, #4]	; (800942c <xTaskGetTickCount+0x8>)
 8009426:	6818      	ldr	r0, [r3, #0]
}
 8009428:	4770      	bx	lr
 800942a:	bf00      	nop
 800942c:	20017684 	.word	0x20017684

08009430 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009430:	4b40      	ldr	r3, [pc, #256]	; (8009534 <xTaskIncrementTick+0x104>)
 8009432:	681b      	ldr	r3, [r3, #0]
{
 8009434:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009438:	2b00      	cmp	r3, #0
 800943a:	d174      	bne.n	8009526 <xTaskIncrementTick+0xf6>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800943c:	4b3e      	ldr	r3, [pc, #248]	; (8009538 <xTaskIncrementTick+0x108>)
 800943e:	681d      	ldr	r5, [r3, #0]
 8009440:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8009442:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009444:	b9cd      	cbnz	r5, 800947a <xTaskIncrementTick+0x4a>
			taskSWITCH_DELAYED_LISTS();
 8009446:	4b3d      	ldr	r3, [pc, #244]	; (800953c <xTaskIncrementTick+0x10c>)
 8009448:	681a      	ldr	r2, [r3, #0]
 800944a:	6812      	ldr	r2, [r2, #0]
 800944c:	b152      	cbz	r2, 8009464 <xTaskIncrementTick+0x34>
 800944e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009452:	b672      	cpsid	i
 8009454:	f383 8811 	msr	BASEPRI, r3
 8009458:	f3bf 8f6f 	isb	sy
 800945c:	f3bf 8f4f 	dsb	sy
 8009460:	b662      	cpsie	i
 8009462:	e7fe      	b.n	8009462 <xTaskIncrementTick+0x32>
 8009464:	4a36      	ldr	r2, [pc, #216]	; (8009540 <xTaskIncrementTick+0x110>)
 8009466:	6819      	ldr	r1, [r3, #0]
 8009468:	6810      	ldr	r0, [r2, #0]
 800946a:	6018      	str	r0, [r3, #0]
 800946c:	6011      	str	r1, [r2, #0]
 800946e:	4a35      	ldr	r2, [pc, #212]	; (8009544 <xTaskIncrementTick+0x114>)
 8009470:	6813      	ldr	r3, [r2, #0]
 8009472:	3301      	adds	r3, #1
 8009474:	6013      	str	r3, [r2, #0]
 8009476:	f7ff feb1 	bl	80091dc <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800947a:	4e33      	ldr	r6, [pc, #204]	; (8009548 <xTaskIncrementTick+0x118>)
BaseType_t xSwitchRequired = pdFALSE;
 800947c:	2400      	movs	r4, #0
 800947e:	4f33      	ldr	r7, [pc, #204]	; (800954c <xTaskIncrementTick+0x11c>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009480:	6833      	ldr	r3, [r6, #0]
 8009482:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8009558 <xTaskIncrementTick+0x128>
 8009486:	42ab      	cmp	r3, r5
 8009488:	d911      	bls.n	80094ae <xTaskIncrementTick+0x7e>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800948a:	f8d8 3000 	ldr.w	r3, [r8]
 800948e:	2214      	movs	r2, #20
 8009490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009492:	4353      	muls	r3, r2
 8009494:	58fb      	ldr	r3, [r7, r3]
				xSwitchRequired = pdTRUE;
 8009496:	2b02      	cmp	r3, #2
 8009498:	bf28      	it	cs
 800949a:	2401      	movcs	r4, #1
		if( xYieldPending != pdFALSE )
 800949c:	4b2c      	ldr	r3, [pc, #176]	; (8009550 <xTaskIncrementTick+0x120>)
 800949e:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 80094a0:	2b00      	cmp	r3, #0
}
 80094a2:	bf0c      	ite	eq
 80094a4:	4620      	moveq	r0, r4
 80094a6:	2001      	movne	r0, #1
 80094a8:	b003      	add	sp, #12
 80094aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80094ae:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800953c <xTaskIncrementTick+0x10c>
					prvAddTaskToReadyList( pxTCB );
 80094b2:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 800955c <xTaskIncrementTick+0x12c>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80094b6:	f8d9 3000 	ldr.w	r3, [r9]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	b91b      	cbnz	r3, 80094c6 <xTaskIncrementTick+0x96>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80094be:	f04f 33ff 	mov.w	r3, #4294967295
 80094c2:	6033      	str	r3, [r6, #0]
					break;
 80094c4:	e7e1      	b.n	800948a <xTaskIncrementTick+0x5a>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094c6:	f8d9 3000 	ldr.w	r3, [r9]
 80094ca:	68db      	ldr	r3, [r3, #12]
 80094cc:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80094d0:	f8db 2004 	ldr.w	r2, [fp, #4]
					if( xConstTickCount < xItemValue )
 80094d4:	4295      	cmp	r5, r2
 80094d6:	d201      	bcs.n	80094dc <xTaskIncrementTick+0xac>
						xNextTaskUnblockTime = xItemValue;
 80094d8:	6032      	str	r2, [r6, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80094da:	e7d6      	b.n	800948a <xTaskIncrementTick+0x5a>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80094dc:	f10b 0104 	add.w	r1, fp, #4
 80094e0:	4608      	mov	r0, r1
 80094e2:	9101      	str	r1, [sp, #4]
 80094e4:	f7fe fe59 	bl	800819a <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80094e8:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
 80094ec:	9901      	ldr	r1, [sp, #4]
 80094ee:	b122      	cbz	r2, 80094fa <xTaskIncrementTick+0xca>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80094f0:	f10b 0018 	add.w	r0, fp, #24
 80094f4:	f7fe fe51 	bl	800819a <uxListRemove>
 80094f8:	9901      	ldr	r1, [sp, #4]
					prvAddTaskToReadyList( pxTCB );
 80094fa:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
 80094fe:	f8da 2000 	ldr.w	r2, [sl]
 8009502:	4290      	cmp	r0, r2
 8009504:	d901      	bls.n	800950a <xTaskIncrementTick+0xda>
 8009506:	f8ca 0000 	str.w	r0, [sl]
 800950a:	2314      	movs	r3, #20
 800950c:	fb03 7000 	mla	r0, r3, r0, r7
 8009510:	f7fe fe20 	bl	8008154 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009514:	f8d8 1000 	ldr.w	r1, [r8]
 8009518:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 800951c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 800951e:	429a      	cmp	r2, r3
 8009520:	bf28      	it	cs
 8009522:	2401      	movcs	r4, #1
 8009524:	e7c7      	b.n	80094b6 <xTaskIncrementTick+0x86>
		++uxPendedTicks;
 8009526:	4a0b      	ldr	r2, [pc, #44]	; (8009554 <xTaskIncrementTick+0x124>)
BaseType_t xSwitchRequired = pdFALSE;
 8009528:	2400      	movs	r4, #0
		++uxPendedTicks;
 800952a:	6813      	ldr	r3, [r2, #0]
 800952c:	3301      	adds	r3, #1
 800952e:	6013      	str	r3, [r2, #0]
 8009530:	e7b4      	b.n	800949c <xTaskIncrementTick+0x6c>
 8009532:	bf00      	nop
 8009534:	20017608 	.word	0x20017608
 8009538:	20017684 	.word	0x20017684
 800953c:	20017194 	.word	0x20017194
 8009540:	20017198 	.word	0x20017198
 8009544:	20017640 	.word	0x20017640
 8009548:	2001763c 	.word	0x2001763c
 800954c:	2001719c 	.word	0x2001719c
 8009550:	20017688 	.word	0x20017688
 8009554:	20017604 	.word	0x20017604
 8009558:	20017190 	.word	0x20017190
 800955c:	20017610 	.word	0x20017610

08009560 <xTaskResumeAll>:
{
 8009560:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
 8009562:	4c32      	ldr	r4, [pc, #200]	; (800962c <xTaskResumeAll+0xcc>)
 8009564:	6823      	ldr	r3, [r4, #0]
 8009566:	b953      	cbnz	r3, 800957e <xTaskResumeAll+0x1e>
 8009568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800956c:	b672      	cpsid	i
 800956e:	f383 8811 	msr	BASEPRI, r3
 8009572:	f3bf 8f6f 	isb	sy
 8009576:	f3bf 8f4f 	dsb	sy
 800957a:	b662      	cpsie	i
 800957c:	e7fe      	b.n	800957c <xTaskResumeAll+0x1c>
	taskENTER_CRITICAL();
 800957e:	f7fe fe89 	bl	8008294 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8009582:	6823      	ldr	r3, [r4, #0]
 8009584:	3b01      	subs	r3, #1
 8009586:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009588:	6824      	ldr	r4, [r4, #0]
 800958a:	b12c      	cbz	r4, 8009598 <xTaskResumeAll+0x38>
BaseType_t xAlreadyYielded = pdFALSE;
 800958c:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800958e:	f7fe fea5 	bl	80082dc <vPortExitCritical>
}
 8009592:	4620      	mov	r0, r4
 8009594:	b003      	add	sp, #12
 8009596:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009598:	4b25      	ldr	r3, [pc, #148]	; (8009630 <xTaskResumeAll+0xd0>)
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d0f5      	beq.n	800958c <xTaskResumeAll+0x2c>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80095a0:	4d24      	ldr	r5, [pc, #144]	; (8009634 <xTaskResumeAll+0xd4>)
					prvAddTaskToReadyList( pxTCB );
 80095a2:	4e25      	ldr	r6, [pc, #148]	; (8009638 <xTaskResumeAll+0xd8>)
 80095a4:	4f25      	ldr	r7, [pc, #148]	; (800963c <xTaskResumeAll+0xdc>)
 80095a6:	e01e      	b.n	80095e6 <xTaskResumeAll+0x86>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095a8:	68eb      	ldr	r3, [r5, #12]
 80095aa:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80095ac:	f104 0018 	add.w	r0, r4, #24
 80095b0:	f7fe fdf3 	bl	800819a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80095b4:	1d21      	adds	r1, r4, #4
 80095b6:	4608      	mov	r0, r1
 80095b8:	9101      	str	r1, [sp, #4]
 80095ba:	f7fe fdee 	bl	800819a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80095be:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80095c0:	6832      	ldr	r2, [r6, #0]
 80095c2:	9901      	ldr	r1, [sp, #4]
 80095c4:	4293      	cmp	r3, r2
 80095c6:	d900      	bls.n	80095ca <xTaskResumeAll+0x6a>
 80095c8:	6033      	str	r3, [r6, #0]
 80095ca:	2014      	movs	r0, #20
 80095cc:	fb00 7003 	mla	r0, r0, r3, r7
 80095d0:	f7fe fdc0 	bl	8008154 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80095d4:	4b1a      	ldr	r3, [pc, #104]	; (8009640 <xTaskResumeAll+0xe0>)
 80095d6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095dc:	429a      	cmp	r2, r3
 80095de:	d302      	bcc.n	80095e6 <xTaskResumeAll+0x86>
						xYieldPending = pdTRUE;
 80095e0:	4b18      	ldr	r3, [pc, #96]	; (8009644 <xTaskResumeAll+0xe4>)
 80095e2:	2201      	movs	r2, #1
 80095e4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80095e6:	682b      	ldr	r3, [r5, #0]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d1dd      	bne.n	80095a8 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 80095ec:	b10c      	cbz	r4, 80095f2 <xTaskResumeAll+0x92>
					prvResetNextTaskUnblockTime();
 80095ee:	f7ff fdf5 	bl	80091dc <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80095f2:	4d15      	ldr	r5, [pc, #84]	; (8009648 <xTaskResumeAll+0xe8>)
 80095f4:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80095f6:	b144      	cbz	r4, 800960a <xTaskResumeAll+0xaa>
								xYieldPending = pdTRUE;
 80095f8:	4e12      	ldr	r6, [pc, #72]	; (8009644 <xTaskResumeAll+0xe4>)
 80095fa:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 80095fc:	f7ff ff18 	bl	8009430 <xTaskIncrementTick>
 8009600:	b100      	cbz	r0, 8009604 <xTaskResumeAll+0xa4>
								xYieldPending = pdTRUE;
 8009602:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009604:	3c01      	subs	r4, #1
 8009606:	d1f9      	bne.n	80095fc <xTaskResumeAll+0x9c>
						uxPendedTicks = 0;
 8009608:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 800960a:	4b0e      	ldr	r3, [pc, #56]	; (8009644 <xTaskResumeAll+0xe4>)
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d0bc      	beq.n	800958c <xTaskResumeAll+0x2c>
					taskYIELD_IF_USING_PREEMPTION();
 8009612:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009616:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800961a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800961e:	f3bf 8f4f 	dsb	sy
 8009622:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8009626:	2401      	movs	r4, #1
 8009628:	e7b1      	b.n	800958e <xTaskResumeAll+0x2e>
 800962a:	bf00      	nop
 800962c:	20017608 	.word	0x20017608
 8009630:	200175fc 	.word	0x200175fc
 8009634:	20017644 	.word	0x20017644
 8009638:	20017610 	.word	0x20017610
 800963c:	2001719c 	.word	0x2001719c
 8009640:	20017190 	.word	0x20017190
 8009644:	20017688 	.word	0x20017688
 8009648:	20017604 	.word	0x20017604

0800964c <vTaskDelay>:
	{
 800964c:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800964e:	b950      	cbnz	r0, 8009666 <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 8009650:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009654:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009658:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800965c:	f3bf 8f4f 	dsb	sy
 8009660:	f3bf 8f6f 	isb	sy
	}
 8009664:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8009666:	4b0b      	ldr	r3, [pc, #44]	; (8009694 <vTaskDelay+0x48>)
 8009668:	6819      	ldr	r1, [r3, #0]
 800966a:	b151      	cbz	r1, 8009682 <vTaskDelay+0x36>
 800966c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009670:	b672      	cpsid	i
 8009672:	f383 8811 	msr	BASEPRI, r3
 8009676:	f3bf 8f6f 	isb	sy
 800967a:	f3bf 8f4f 	dsb	sy
 800967e:	b662      	cpsie	i
 8009680:	e7fe      	b.n	8009680 <vTaskDelay+0x34>
			vTaskSuspendAll();
 8009682:	f7ff fec7 	bl	8009414 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009686:	f7ff fd71 	bl	800916c <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800968a:	f7ff ff69 	bl	8009560 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800968e:	2800      	cmp	r0, #0
 8009690:	d0de      	beq.n	8009650 <vTaskDelay+0x4>
 8009692:	e7e7      	b.n	8009664 <vTaskDelay+0x18>
 8009694:	20017608 	.word	0x20017608

08009698 <vTaskSetApplicationTaskTag>:
	{
 8009698:	b538      	push	{r3, r4, r5, lr}
 800969a:	460d      	mov	r5, r1
		if( xTask == NULL )
 800969c:	4604      	mov	r4, r0
 800969e:	b908      	cbnz	r0, 80096a4 <vTaskSetApplicationTaskTag+0xc>
			xTCB = ( TCB_t * ) pxCurrentTCB;
 80096a0:	4b04      	ldr	r3, [pc, #16]	; (80096b4 <vTaskSetApplicationTaskTag+0x1c>)
 80096a2:	681c      	ldr	r4, [r3, #0]
		taskENTER_CRITICAL();
 80096a4:	f7fe fdf6 	bl	8008294 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
 80096a8:	6565      	str	r5, [r4, #84]	; 0x54
	}
 80096aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		taskEXIT_CRITICAL();
 80096ae:	f7fe be15 	b.w	80082dc <vPortExitCritical>
 80096b2:	bf00      	nop
 80096b4:	20017190 	.word	0x20017190

080096b8 <xTaskCallApplicationTaskHook>:
	{
 80096b8:	4603      	mov	r3, r0
 80096ba:	4608      	mov	r0, r1
		if( xTask == NULL )
 80096bc:	b90b      	cbnz	r3, 80096c2 <xTaskCallApplicationTaskHook+0xa>
			xTCB = pxCurrentTCB;
 80096be:	4b03      	ldr	r3, [pc, #12]	; (80096cc <xTaskCallApplicationTaskHook+0x14>)
 80096c0:	681b      	ldr	r3, [r3, #0]
		if( xTCB->pxTaskTag != NULL )
 80096c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096c4:	b103      	cbz	r3, 80096c8 <xTaskCallApplicationTaskHook+0x10>
			xReturn = xTCB->pxTaskTag( pvParameter );
 80096c6:	4718      	bx	r3
	}
 80096c8:	4618      	mov	r0, r3
 80096ca:	4770      	bx	lr
 80096cc:	20017190 	.word	0x20017190

080096d0 <vTaskStartScheduler>:
{
 80096d0:	b510      	push	{r4, lr}
 80096d2:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80096d4:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80096d6:	aa07      	add	r2, sp, #28
 80096d8:	a906      	add	r1, sp, #24
 80096da:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80096dc:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80096e0:	f7fe fc1c 	bl	8007f1c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80096e4:	9b05      	ldr	r3, [sp, #20]
 80096e6:	9a07      	ldr	r2, [sp, #28]
 80096e8:	9302      	str	r3, [sp, #8]
 80096ea:	9b06      	ldr	r3, [sp, #24]
 80096ec:	491b      	ldr	r1, [pc, #108]	; (800975c <vTaskStartScheduler+0x8c>)
 80096ee:	481c      	ldr	r0, [pc, #112]	; (8009760 <vTaskStartScheduler+0x90>)
 80096f0:	e9cd 4300 	strd	r4, r3, [sp]
 80096f4:	4623      	mov	r3, r4
 80096f6:	f7ff fe22 	bl	800933e <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 80096fa:	b360      	cbz	r0, 8009756 <vTaskStartScheduler+0x86>
			xReturn = xTimerCreateTimerTask();
 80096fc:	f000 faa6 	bl	8009c4c <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8009700:	2801      	cmp	r0, #1
 8009702:	d11b      	bne.n	800973c <vTaskStartScheduler+0x6c>
 8009704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009708:	b672      	cpsid	i
 800970a:	f383 8811 	msr	BASEPRI, r3
 800970e:	f3bf 8f6f 	isb	sy
 8009712:	f3bf 8f4f 	dsb	sy
 8009716:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
 8009718:	f04f 32ff 	mov.w	r2, #4294967295
 800971c:	4b11      	ldr	r3, [pc, #68]	; (8009764 <vTaskStartScheduler+0x94>)
		traceTASK_SWITCHED_IN();
 800971e:	4621      	mov	r1, r4
		xNextTaskUnblockTime = portMAX_DELAY;
 8009720:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009722:	4b11      	ldr	r3, [pc, #68]	; (8009768 <vTaskStartScheduler+0x98>)
 8009724:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009726:	4b11      	ldr	r3, [pc, #68]	; (800976c <vTaskStartScheduler+0x9c>)
 8009728:	601c      	str	r4, [r3, #0]
		traceTASK_SWITCHED_IN();
 800972a:	4b11      	ldr	r3, [pc, #68]	; (8009770 <vTaskStartScheduler+0xa0>)
 800972c:	6818      	ldr	r0, [r3, #0]
 800972e:	f7ff ffc3 	bl	80096b8 <xTaskCallApplicationTaskHook>
}
 8009732:	b008      	add	sp, #32
 8009734:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8009738:	f7fe be46 	b.w	80083c8 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800973c:	3001      	adds	r0, #1
 800973e:	d10a      	bne.n	8009756 <vTaskStartScheduler+0x86>
 8009740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009744:	b672      	cpsid	i
 8009746:	f383 8811 	msr	BASEPRI, r3
 800974a:	f3bf 8f6f 	isb	sy
 800974e:	f3bf 8f4f 	dsb	sy
 8009752:	b662      	cpsie	i
 8009754:	e7fe      	b.n	8009754 <vTaskStartScheduler+0x84>
}
 8009756:	b008      	add	sp, #32
 8009758:	bd10      	pop	{r4, pc}
 800975a:	bf00      	nop
 800975c:	0802d9c4 	.word	0x0802d9c4
 8009760:	0800923d 	.word	0x0800923d
 8009764:	2001763c 	.word	0x2001763c
 8009768:	20017658 	.word	0x20017658
 800976c:	20017684 	.word	0x20017684
 8009770:	20017190 	.word	0x20017190

08009774 <vTaskSwitchContext>:
{
 8009774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009776:	4b1d      	ldr	r3, [pc, #116]	; (80097ec <vTaskSwitchContext+0x78>)
 8009778:	681a      	ldr	r2, [r3, #0]
 800977a:	4b1d      	ldr	r3, [pc, #116]	; (80097f0 <vTaskSwitchContext+0x7c>)
 800977c:	b112      	cbz	r2, 8009784 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800977e:	2201      	movs	r2, #1
 8009780:	601a      	str	r2, [r3, #0]
}
 8009782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		traceTASK_SWITCHED_OUT();
 8009784:	4c1b      	ldr	r4, [pc, #108]	; (80097f4 <vTaskSwitchContext+0x80>)
 8009786:	2101      	movs	r1, #1
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009788:	4e1b      	ldr	r6, [pc, #108]	; (80097f8 <vTaskSwitchContext+0x84>)
 800978a:	2714      	movs	r7, #20
		xYieldPending = pdFALSE;
 800978c:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 800978e:	6820      	ldr	r0, [r4, #0]
 8009790:	f7ff ff92 	bl	80096b8 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009794:	6832      	ldr	r2, [r6, #0]
 8009796:	4919      	ldr	r1, [pc, #100]	; (80097fc <vTaskSwitchContext+0x88>)
 8009798:	fb07 f302 	mul.w	r3, r7, r2
 800979c:	58cd      	ldr	r5, [r1, r3]
 800979e:	18c8      	adds	r0, r1, r3
 80097a0:	b1ad      	cbz	r5, 80097ce <vTaskSwitchContext+0x5a>
 80097a2:	6845      	ldr	r5, [r0, #4]
 80097a4:	3308      	adds	r3, #8
 80097a6:	686d      	ldr	r5, [r5, #4]
 80097a8:	440b      	add	r3, r1
 80097aa:	429d      	cmp	r5, r3
 80097ac:	6045      	str	r5, [r0, #4]
 80097ae:	bf04      	itt	eq
 80097b0:	686b      	ldreq	r3, [r5, #4]
 80097b2:	6043      	streq	r3, [r0, #4]
 80097b4:	2314      	movs	r3, #20
 80097b6:	fb03 1102 	mla	r1, r3, r2, r1
 80097ba:	684b      	ldr	r3, [r1, #4]
		traceTASK_SWITCHED_IN();
 80097bc:	2100      	movs	r1, #0
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097be:	68db      	ldr	r3, [r3, #12]
 80097c0:	6023      	str	r3, [r4, #0]
 80097c2:	6032      	str	r2, [r6, #0]
		traceTASK_SWITCHED_IN();
 80097c4:	6820      	ldr	r0, [r4, #0]
}
 80097c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		traceTASK_SWITCHED_IN();
 80097ca:	f7ff bf75 	b.w	80096b8 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097ce:	b952      	cbnz	r2, 80097e6 <vTaskSwitchContext+0x72>
 80097d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097d4:	b672      	cpsid	i
 80097d6:	f383 8811 	msr	BASEPRI, r3
 80097da:	f3bf 8f6f 	isb	sy
 80097de:	f3bf 8f4f 	dsb	sy
 80097e2:	b662      	cpsie	i
 80097e4:	e7fe      	b.n	80097e4 <vTaskSwitchContext+0x70>
 80097e6:	3a01      	subs	r2, #1
 80097e8:	e7d6      	b.n	8009798 <vTaskSwitchContext+0x24>
 80097ea:	bf00      	nop
 80097ec:	20017608 	.word	0x20017608
 80097f0:	20017688 	.word	0x20017688
 80097f4:	20017190 	.word	0x20017190
 80097f8:	20017610 	.word	0x20017610
 80097fc:	2001719c 	.word	0x2001719c

08009800 <vTaskPlaceOnEventList>:
{
 8009800:	b510      	push	{r4, lr}
 8009802:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8009804:	b950      	cbnz	r0, 800981c <vTaskPlaceOnEventList+0x1c>
 8009806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800980a:	b672      	cpsid	i
 800980c:	f383 8811 	msr	BASEPRI, r3
 8009810:	f3bf 8f6f 	isb	sy
 8009814:	f3bf 8f4f 	dsb	sy
 8009818:	b662      	cpsie	i
 800981a:	e7fe      	b.n	800981a <vTaskPlaceOnEventList+0x1a>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800981c:	4b05      	ldr	r3, [pc, #20]	; (8009834 <vTaskPlaceOnEventList+0x34>)
 800981e:	6819      	ldr	r1, [r3, #0]
 8009820:	3118      	adds	r1, #24
 8009822:	f7fe fca3 	bl	800816c <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009826:	4620      	mov	r0, r4
 8009828:	2101      	movs	r1, #1
}
 800982a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800982e:	f7ff bc9d 	b.w	800916c <prvAddCurrentTaskToDelayedList>
 8009832:	bf00      	nop
 8009834:	20017190 	.word	0x20017190

08009838 <vTaskPlaceOnEventListRestricted>:
	{
 8009838:	b538      	push	{r3, r4, r5, lr}
 800983a:	460d      	mov	r5, r1
 800983c:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 800983e:	b950      	cbnz	r0, 8009856 <vTaskPlaceOnEventListRestricted+0x1e>
 8009840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009844:	b672      	cpsid	i
 8009846:	f383 8811 	msr	BASEPRI, r3
 800984a:	f3bf 8f6f 	isb	sy
 800984e:	f3bf 8f4f 	dsb	sy
 8009852:	b662      	cpsie	i
 8009854:	e7fe      	b.n	8009854 <vTaskPlaceOnEventListRestricted+0x1c>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009856:	4b07      	ldr	r3, [pc, #28]	; (8009874 <vTaskPlaceOnEventListRestricted+0x3c>)
 8009858:	6819      	ldr	r1, [r3, #0]
 800985a:	3118      	adds	r1, #24
 800985c:	f7fe fc7a 	bl	8008154 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 8009860:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009862:	4621      	mov	r1, r4
 8009864:	bf0c      	ite	eq
 8009866:	4628      	moveq	r0, r5
 8009868:	f04f 30ff 	movne.w	r0, #4294967295
	}
 800986c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009870:	f7ff bc7c 	b.w	800916c <prvAddCurrentTaskToDelayedList>
 8009874:	20017190 	.word	0x20017190

08009878 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009878:	68c3      	ldr	r3, [r0, #12]
{
 800987a:	b513      	push	{r0, r1, r4, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800987c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800987e:	b954      	cbnz	r4, 8009896 <xTaskRemoveFromEventList+0x1e>
 8009880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009884:	b672      	cpsid	i
 8009886:	f383 8811 	msr	BASEPRI, r3
 800988a:	f3bf 8f6f 	isb	sy
 800988e:	f3bf 8f4f 	dsb	sy
 8009892:	b662      	cpsie	i
 8009894:	e7fe      	b.n	8009894 <xTaskRemoveFromEventList+0x1c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009896:	f104 0118 	add.w	r1, r4, #24
 800989a:	4608      	mov	r0, r1
 800989c:	9101      	str	r1, [sp, #4]
 800989e:	f7fe fc7c 	bl	800819a <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80098a2:	4b12      	ldr	r3, [pc, #72]	; (80098ec <xTaskRemoveFromEventList+0x74>)
 80098a4:	9901      	ldr	r1, [sp, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	b9e3      	cbnz	r3, 80098e4 <xTaskRemoveFromEventList+0x6c>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80098aa:	1d21      	adds	r1, r4, #4
 80098ac:	4608      	mov	r0, r1
 80098ae:	9101      	str	r1, [sp, #4]
 80098b0:	f7fe fc73 	bl	800819a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80098b4:	4a0e      	ldr	r2, [pc, #56]	; (80098f0 <xTaskRemoveFromEventList+0x78>)
 80098b6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80098b8:	6810      	ldr	r0, [r2, #0]
 80098ba:	9901      	ldr	r1, [sp, #4]
 80098bc:	4283      	cmp	r3, r0
 80098be:	d900      	bls.n	80098c2 <xTaskRemoveFromEventList+0x4a>
 80098c0:	6013      	str	r3, [r2, #0]
 80098c2:	4a0c      	ldr	r2, [pc, #48]	; (80098f4 <xTaskRemoveFromEventList+0x7c>)
 80098c4:	2014      	movs	r0, #20
 80098c6:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80098ca:	f7fe fc43 	bl	8008154 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80098ce:	4b0a      	ldr	r3, [pc, #40]	; (80098f8 <xTaskRemoveFromEventList+0x80>)
 80098d0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098d6:	429a      	cmp	r2, r3
 80098d8:	d906      	bls.n	80098e8 <xTaskRemoveFromEventList+0x70>
		xYieldPending = pdTRUE;
 80098da:	2001      	movs	r0, #1
 80098dc:	4b07      	ldr	r3, [pc, #28]	; (80098fc <xTaskRemoveFromEventList+0x84>)
 80098de:	6018      	str	r0, [r3, #0]
}
 80098e0:	b002      	add	sp, #8
 80098e2:	bd10      	pop	{r4, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80098e4:	4806      	ldr	r0, [pc, #24]	; (8009900 <xTaskRemoveFromEventList+0x88>)
 80098e6:	e7f0      	b.n	80098ca <xTaskRemoveFromEventList+0x52>
		xReturn = pdFALSE;
 80098e8:	2000      	movs	r0, #0
	return xReturn;
 80098ea:	e7f9      	b.n	80098e0 <xTaskRemoveFromEventList+0x68>
 80098ec:	20017608 	.word	0x20017608
 80098f0:	20017610 	.word	0x20017610
 80098f4:	2001719c 	.word	0x2001719c
 80098f8:	20017190 	.word	0x20017190
 80098fc:	20017688 	.word	0x20017688
 8009900:	20017644 	.word	0x20017644

08009904 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009904:	4b03      	ldr	r3, [pc, #12]	; (8009914 <vTaskInternalSetTimeOutState+0x10>)
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800990a:	4b03      	ldr	r3, [pc, #12]	; (8009918 <vTaskInternalSetTimeOutState+0x14>)
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	6043      	str	r3, [r0, #4]
}
 8009910:	4770      	bx	lr
 8009912:	bf00      	nop
 8009914:	20017640 	.word	0x20017640
 8009918:	20017684 	.word	0x20017684

0800991c <xTaskCheckForTimeOut>:
{
 800991c:	b570      	push	{r4, r5, r6, lr}
 800991e:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 8009920:	4605      	mov	r5, r0
 8009922:	b950      	cbnz	r0, 800993a <xTaskCheckForTimeOut+0x1e>
 8009924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009928:	b672      	cpsid	i
 800992a:	f383 8811 	msr	BASEPRI, r3
 800992e:	f3bf 8f6f 	isb	sy
 8009932:	f3bf 8f4f 	dsb	sy
 8009936:	b662      	cpsie	i
 8009938:	e7fe      	b.n	8009938 <xTaskCheckForTimeOut+0x1c>
	configASSERT( pxTicksToWait );
 800993a:	b951      	cbnz	r1, 8009952 <xTaskCheckForTimeOut+0x36>
 800993c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009940:	b672      	cpsid	i
 8009942:	f383 8811 	msr	BASEPRI, r3
 8009946:	f3bf 8f6f 	isb	sy
 800994a:	f3bf 8f4f 	dsb	sy
 800994e:	b662      	cpsie	i
 8009950:	e7fe      	b.n	8009950 <xTaskCheckForTimeOut+0x34>
	taskENTER_CRITICAL();
 8009952:	f7fe fc9f 	bl	8008294 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8009956:	4b0f      	ldr	r3, [pc, #60]	; (8009994 <xTaskCheckForTimeOut+0x78>)
 8009958:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800995a:	6823      	ldr	r3, [r4, #0]
 800995c:	1c5a      	adds	r2, r3, #1
 800995e:	d010      	beq.n	8009982 <xTaskCheckForTimeOut+0x66>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009960:	480d      	ldr	r0, [pc, #52]	; (8009998 <xTaskCheckForTimeOut+0x7c>)
 8009962:	682e      	ldr	r6, [r5, #0]
 8009964:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009966:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009968:	4286      	cmp	r6, r0
 800996a:	d001      	beq.n	8009970 <xTaskCheckForTimeOut+0x54>
 800996c:	428a      	cmp	r2, r1
 800996e:	d90f      	bls.n	8009990 <xTaskCheckForTimeOut+0x74>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009970:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009972:	4283      	cmp	r3, r0
 8009974:	d90a      	bls.n	800998c <xTaskCheckForTimeOut+0x70>
			*pxTicksToWait -= xElapsedTime;
 8009976:	1a5b      	subs	r3, r3, r1
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009978:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 800997a:	4413      	add	r3, r2
 800997c:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800997e:	f7ff ffc1 	bl	8009904 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 8009982:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8009984:	f7fe fcaa 	bl	80082dc <vPortExitCritical>
}
 8009988:	4620      	mov	r0, r4
 800998a:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 800998c:	2300      	movs	r3, #0
 800998e:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8009990:	2401      	movs	r4, #1
 8009992:	e7f7      	b.n	8009984 <xTaskCheckForTimeOut+0x68>
 8009994:	20017684 	.word	0x20017684
 8009998:	20017640 	.word	0x20017640

0800999c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800999c:	4b01      	ldr	r3, [pc, #4]	; (80099a4 <vTaskMissedYield+0x8>)
 800999e:	2201      	movs	r2, #1
 80099a0:	601a      	str	r2, [r3, #0]
}
 80099a2:	4770      	bx	lr
 80099a4:	20017688 	.word	0x20017688

080099a8 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 80099a8:	4b01      	ldr	r3, [pc, #4]	; (80099b0 <xTaskGetCurrentTaskHandle+0x8>)
 80099aa:	6818      	ldr	r0, [r3, #0]
	}
 80099ac:	4770      	bx	lr
 80099ae:	bf00      	nop
 80099b0:	20017190 	.word	0x20017190

080099b4 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80099b4:	4b05      	ldr	r3, [pc, #20]	; (80099cc <xTaskGetSchedulerState+0x18>)
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	b133      	cbz	r3, 80099c8 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80099ba:	4b05      	ldr	r3, [pc, #20]	; (80099d0 <xTaskGetSchedulerState+0x1c>)
 80099bc:	681b      	ldr	r3, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 80099be:	2b00      	cmp	r3, #0
 80099c0:	bf0c      	ite	eq
 80099c2:	2002      	moveq	r0, #2
 80099c4:	2000      	movne	r0, #0
 80099c6:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 80099c8:	2001      	movs	r0, #1
	}
 80099ca:	4770      	bx	lr
 80099cc:	20017658 	.word	0x20017658
 80099d0:	20017608 	.word	0x20017608

080099d4 <xTaskPriorityInherit>:
	{
 80099d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 80099d6:	4604      	mov	r4, r0
 80099d8:	b340      	cbz	r0, 8009a2c <xTaskPriorityInherit+0x58>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80099da:	4d1b      	ldr	r5, [pc, #108]	; (8009a48 <xTaskPriorityInherit+0x74>)
 80099dc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80099de:	682a      	ldr	r2, [r5, #0]
 80099e0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80099e2:	4293      	cmp	r3, r2
 80099e4:	d228      	bcs.n	8009a38 <xTaskPriorityInherit+0x64>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80099e6:	6982      	ldr	r2, [r0, #24]
 80099e8:	2a00      	cmp	r2, #0
 80099ea:	db04      	blt.n	80099f6 <xTaskPriorityInherit+0x22>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80099ec:	682a      	ldr	r2, [r5, #0]
 80099ee:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80099f0:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 80099f4:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80099f6:	2214      	movs	r2, #20
 80099f8:	4e14      	ldr	r6, [pc, #80]	; (8009a4c <xTaskPriorityInherit+0x78>)
 80099fa:	fb02 6303 	mla	r3, r2, r3, r6
 80099fe:	6962      	ldr	r2, [r4, #20]
 8009a00:	429a      	cmp	r2, r3
 8009a02:	d115      	bne.n	8009a30 <xTaskPriorityInherit+0x5c>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009a04:	1d21      	adds	r1, r4, #4
 8009a06:	4608      	mov	r0, r1
 8009a08:	9101      	str	r1, [sp, #4]
 8009a0a:	f7fe fbc6 	bl	800819a <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009a0e:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009a10:	4a0f      	ldr	r2, [pc, #60]	; (8009a50 <xTaskPriorityInherit+0x7c>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009a14:	6810      	ldr	r0, [r2, #0]
 8009a16:	9901      	ldr	r1, [sp, #4]
 8009a18:	4283      	cmp	r3, r0
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009a1a:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009a1c:	d900      	bls.n	8009a20 <xTaskPriorityInherit+0x4c>
 8009a1e:	6013      	str	r3, [r2, #0]
 8009a20:	2014      	movs	r0, #20
 8009a22:	fb00 6003 	mla	r0, r0, r3, r6
 8009a26:	f7fe fb95 	bl	8008154 <vListInsertEnd>
				xReturn = pdTRUE;
 8009a2a:	2001      	movs	r0, #1
	}
 8009a2c:	b002      	add	sp, #8
 8009a2e:	bd70      	pop	{r4, r5, r6, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009a30:	682b      	ldr	r3, [r5, #0]
 8009a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a34:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009a36:	e7f8      	b.n	8009a2a <xTaskPriorityInherit+0x56>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009a38:	682b      	ldr	r3, [r5, #0]
 8009a3a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8009a3c:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8009a3e:	42a0      	cmp	r0, r4
 8009a40:	bf2c      	ite	cs
 8009a42:	2000      	movcs	r0, #0
 8009a44:	2001      	movcc	r0, #1
 8009a46:	e7f1      	b.n	8009a2c <xTaskPriorityInherit+0x58>
 8009a48:	20017190 	.word	0x20017190
 8009a4c:	2001719c 	.word	0x2001719c
 8009a50:	20017610 	.word	0x20017610

08009a54 <xTaskPriorityDisinherit>:
	{
 8009a54:	b513      	push	{r0, r1, r4, lr}
		if( pxMutexHolder != NULL )
 8009a56:	b910      	cbnz	r0, 8009a5e <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 8009a58:	2000      	movs	r0, #0
	}
 8009a5a:	b002      	add	sp, #8
 8009a5c:	bd10      	pop	{r4, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8009a5e:	4b1e      	ldr	r3, [pc, #120]	; (8009ad8 <xTaskPriorityDisinherit+0x84>)
 8009a60:	681c      	ldr	r4, [r3, #0]
 8009a62:	4284      	cmp	r4, r0
 8009a64:	d00a      	beq.n	8009a7c <xTaskPriorityDisinherit+0x28>
 8009a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a6a:	b672      	cpsid	i
 8009a6c:	f383 8811 	msr	BASEPRI, r3
 8009a70:	f3bf 8f6f 	isb	sy
 8009a74:	f3bf 8f4f 	dsb	sy
 8009a78:	b662      	cpsie	i
 8009a7a:	e7fe      	b.n	8009a7a <xTaskPriorityDisinherit+0x26>
			configASSERT( pxTCB->uxMutexesHeld );
 8009a7c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009a7e:	b953      	cbnz	r3, 8009a96 <xTaskPriorityDisinherit+0x42>
 8009a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a84:	b672      	cpsid	i
 8009a86:	f383 8811 	msr	BASEPRI, r3
 8009a8a:	f3bf 8f6f 	isb	sy
 8009a8e:	f3bf 8f4f 	dsb	sy
 8009a92:	b662      	cpsie	i
 8009a94:	e7fe      	b.n	8009a94 <xTaskPriorityDisinherit+0x40>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009a96:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 8009a98:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009a9a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 8009a9c:	6523      	str	r3, [r4, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009a9e:	4291      	cmp	r1, r2
 8009aa0:	d0da      	beq.n	8009a58 <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d1d8      	bne.n	8009a58 <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009aa6:	1d21      	adds	r1, r4, #4
 8009aa8:	4608      	mov	r0, r1
 8009aaa:	9101      	str	r1, [sp, #4]
 8009aac:	f7fe fb75 	bl	800819a <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009ab0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
					prvAddTaskToReadyList( pxTCB );
 8009ab2:	9901      	ldr	r1, [sp, #4]
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ab4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009ab8:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009aba:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8009abc:	4a07      	ldr	r2, [pc, #28]	; (8009adc <xTaskPriorityDisinherit+0x88>)
 8009abe:	6810      	ldr	r0, [r2, #0]
 8009ac0:	4283      	cmp	r3, r0
 8009ac2:	d900      	bls.n	8009ac6 <xTaskPriorityDisinherit+0x72>
 8009ac4:	6013      	str	r3, [r2, #0]
 8009ac6:	4a06      	ldr	r2, [pc, #24]	; (8009ae0 <xTaskPriorityDisinherit+0x8c>)
 8009ac8:	2014      	movs	r0, #20
 8009aca:	fb00 2003 	mla	r0, r0, r3, r2
 8009ace:	f7fe fb41 	bl	8008154 <vListInsertEnd>
					xReturn = pdTRUE;
 8009ad2:	2001      	movs	r0, #1
		return xReturn;
 8009ad4:	e7c1      	b.n	8009a5a <xTaskPriorityDisinherit+0x6>
 8009ad6:	bf00      	nop
 8009ad8:	20017190 	.word	0x20017190
 8009adc:	20017610 	.word	0x20017610
 8009ae0:	2001719c 	.word	0x2001719c

08009ae4 <vTaskPriorityDisinheritAfterTimeout>:
	{
 8009ae4:	b537      	push	{r0, r1, r2, r4, r5, lr}
		if( pxMutexHolder != NULL )
 8009ae6:	4604      	mov	r4, r0
 8009ae8:	2800      	cmp	r0, #0
 8009aea:	d048      	beq.n	8009b7e <vTaskPriorityDisinheritAfterTimeout+0x9a>
			configASSERT( pxTCB->uxMutexesHeld );
 8009aec:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8009aee:	b952      	cbnz	r2, 8009b06 <vTaskPriorityDisinheritAfterTimeout+0x22>
 8009af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009af4:	b672      	cpsid	i
 8009af6:	f383 8811 	msr	BASEPRI, r3
 8009afa:	f3bf 8f6f 	isb	sy
 8009afe:	f3bf 8f4f 	dsb	sy
 8009b02:	b662      	cpsie	i
 8009b04:	e7fe      	b.n	8009b04 <vTaskPriorityDisinheritAfterTimeout+0x20>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009b06:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8009b08:	4299      	cmp	r1, r3
 8009b0a:	bf38      	it	cc
 8009b0c:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009b0e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8009b10:	428b      	cmp	r3, r1
 8009b12:	d034      	beq.n	8009b7e <vTaskPriorityDisinheritAfterTimeout+0x9a>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009b14:	2a01      	cmp	r2, #1
 8009b16:	d132      	bne.n	8009b7e <vTaskPriorityDisinheritAfterTimeout+0x9a>
					configASSERT( pxTCB != pxCurrentTCB );
 8009b18:	4a1a      	ldr	r2, [pc, #104]	; (8009b84 <vTaskPriorityDisinheritAfterTimeout+0xa0>)
 8009b1a:	6812      	ldr	r2, [r2, #0]
 8009b1c:	4282      	cmp	r2, r0
 8009b1e:	d10a      	bne.n	8009b36 <vTaskPriorityDisinheritAfterTimeout+0x52>
 8009b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b24:	b672      	cpsid	i
 8009b26:	f383 8811 	msr	BASEPRI, r3
 8009b2a:	f3bf 8f6f 	isb	sy
 8009b2e:	f3bf 8f4f 	dsb	sy
 8009b32:	b662      	cpsie	i
 8009b34:	e7fe      	b.n	8009b34 <vTaskPriorityDisinheritAfterTimeout+0x50>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009b36:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009b38:	4d13      	ldr	r5, [pc, #76]	; (8009b88 <vTaskPriorityDisinheritAfterTimeout+0xa4>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009b3a:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009b3c:	f04f 0214 	mov.w	r2, #20
					pxTCB->uxPriority = uxPriorityToUse;
 8009b40:	62c1      	str	r1, [r0, #44]	; 0x2c
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009b42:	fb02 5303 	mla	r3, r2, r3, r5
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b46:	bfa8      	it	ge
 8009b48:	f1c1 0138 	rsbge	r1, r1, #56	; 0x38
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009b4c:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b4e:	bfa8      	it	ge
 8009b50:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009b52:	429a      	cmp	r2, r3
 8009b54:	d113      	bne.n	8009b7e <vTaskPriorityDisinheritAfterTimeout+0x9a>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009b56:	1d01      	adds	r1, r0, #4
 8009b58:	4608      	mov	r0, r1
 8009b5a:	9101      	str	r1, [sp, #4]
 8009b5c:	f7fe fb1d 	bl	800819a <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 8009b60:	4a0a      	ldr	r2, [pc, #40]	; (8009b8c <vTaskPriorityDisinheritAfterTimeout+0xa8>)
 8009b62:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009b64:	6810      	ldr	r0, [r2, #0]
 8009b66:	9901      	ldr	r1, [sp, #4]
 8009b68:	4283      	cmp	r3, r0
 8009b6a:	d900      	bls.n	8009b6e <vTaskPriorityDisinheritAfterTimeout+0x8a>
 8009b6c:	6013      	str	r3, [r2, #0]
 8009b6e:	2014      	movs	r0, #20
 8009b70:	fb00 5003 	mla	r0, r0, r3, r5
	}
 8009b74:	b003      	add	sp, #12
 8009b76:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
						prvAddTaskToReadyList( pxTCB );
 8009b7a:	f7fe baeb 	b.w	8008154 <vListInsertEnd>
	}
 8009b7e:	b003      	add	sp, #12
 8009b80:	bd30      	pop	{r4, r5, pc}
 8009b82:	bf00      	nop
 8009b84:	20017190 	.word	0x20017190
 8009b88:	2001719c 	.word	0x2001719c
 8009b8c:	20017610 	.word	0x20017610

08009b90 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8009b90:	4b04      	ldr	r3, [pc, #16]	; (8009ba4 <pvTaskIncrementMutexHeldCount+0x14>)
 8009b92:	681a      	ldr	r2, [r3, #0]
 8009b94:	b11a      	cbz	r2, 8009b9e <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 8009b96:	6819      	ldr	r1, [r3, #0]
 8009b98:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8009b9a:	3201      	adds	r2, #1
 8009b9c:	650a      	str	r2, [r1, #80]	; 0x50
		return pxCurrentTCB;
 8009b9e:	6818      	ldr	r0, [r3, #0]
	}
 8009ba0:	4770      	bx	lr
 8009ba2:	bf00      	nop
 8009ba4:	20017190 	.word	0x20017190

08009ba8 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009ba8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 8009baa:	4c11      	ldr	r4, [pc, #68]	; (8009bf0 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 8009bac:	f7fe fb72 	bl	8008294 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8009bb0:	6825      	ldr	r5, [r4, #0]
 8009bb2:	b9bd      	cbnz	r5, 8009be4 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 8009bb4:	4f0f      	ldr	r7, [pc, #60]	; (8009bf4 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 8009bb6:	4e10      	ldr	r6, [pc, #64]	; (8009bf8 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 8009bb8:	4638      	mov	r0, r7
 8009bba:	f7fe fabd 	bl	8008138 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009bbe:	4630      	mov	r0, r6
 8009bc0:	f7fe faba 	bl	8008138 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009bc4:	4b0d      	ldr	r3, [pc, #52]	; (8009bfc <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009bc6:	4a0e      	ldr	r2, [pc, #56]	; (8009c00 <prvCheckForValidListAndQueue+0x58>)
 8009bc8:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 8009bca:	601f      	str	r7, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009bcc:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 8009bce:	4b0d      	ldr	r3, [pc, #52]	; (8009c04 <prvCheckForValidListAndQueue+0x5c>)
 8009bd0:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009bd2:	4b0d      	ldr	r3, [pc, #52]	; (8009c08 <prvCheckForValidListAndQueue+0x60>)
 8009bd4:	9500      	str	r5, [sp, #0]
 8009bd6:	f7fe fda9 	bl	800872c <xQueueGenericCreateStatic>
 8009bda:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009bdc:	b110      	cbz	r0, 8009be4 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009bde:	490b      	ldr	r1, [pc, #44]	; (8009c0c <prvCheckForValidListAndQueue+0x64>)
 8009be0:	f7ff f9e4 	bl	8008fac <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 8009be4:	b003      	add	sp, #12
 8009be6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 8009bea:	f7fe bb77 	b.w	80082dc <vPortExitCritical>
 8009bee:	bf00      	nop
 8009bf0:	200177b0 	.word	0x200177b0
 8009bf4:	20017734 	.word	0x20017734
 8009bf8:	20017748 	.word	0x20017748
 8009bfc:	2001768c 	.word	0x2001768c
 8009c00:	20017694 	.word	0x20017694
 8009c04:	20017690 	.word	0x20017690
 8009c08:	20017760 	.word	0x20017760
 8009c0c:	0802d9c9 	.word	0x0802d9c9

08009c10 <prvInsertTimerInActiveList>:
	if( xNextExpiryTime <= xTimeNow )
 8009c10:	4291      	cmp	r1, r2
{
 8009c12:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009c14:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009c16:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 8009c18:	d80a      	bhi.n	8009c30 <prvInsertTimerInActiveList+0x20>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c1a:	1ad2      	subs	r2, r2, r3
 8009c1c:	6983      	ldr	r3, [r0, #24]
 8009c1e:	429a      	cmp	r2, r3
 8009c20:	d20d      	bcs.n	8009c3e <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009c22:	1d01      	adds	r1, r0, #4
 8009c24:	4b07      	ldr	r3, [pc, #28]	; (8009c44 <prvInsertTimerInActiveList+0x34>)
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009c26:	6818      	ldr	r0, [r3, #0]
 8009c28:	f7fe faa0 	bl	800816c <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8009c2c:	2000      	movs	r0, #0
}
 8009c2e:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009c30:	429a      	cmp	r2, r3
 8009c32:	d201      	bcs.n	8009c38 <prvInsertTimerInActiveList+0x28>
 8009c34:	4299      	cmp	r1, r3
 8009c36:	d202      	bcs.n	8009c3e <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009c38:	1d01      	adds	r1, r0, #4
 8009c3a:	4b03      	ldr	r3, [pc, #12]	; (8009c48 <prvInsertTimerInActiveList+0x38>)
 8009c3c:	e7f3      	b.n	8009c26 <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 8009c3e:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8009c40:	e7f5      	b.n	8009c2e <prvInsertTimerInActiveList+0x1e>
 8009c42:	bf00      	nop
 8009c44:	20017690 	.word	0x20017690
 8009c48:	2001768c 	.word	0x2001768c

08009c4c <xTimerCreateTimerTask>:
{
 8009c4c:	b510      	push	{r4, lr}
 8009c4e:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8009c50:	f7ff ffaa 	bl	8009ba8 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8009c54:	4b13      	ldr	r3, [pc, #76]	; (8009ca4 <xTimerCreateTimerTask+0x58>)
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	b1b3      	cbz	r3, 8009c88 <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009c5a:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009c5c:	aa07      	add	r2, sp, #28
 8009c5e:	a906      	add	r1, sp, #24
 8009c60:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009c62:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009c66:	f7fe f965 	bl	8007f34 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009c6a:	9b05      	ldr	r3, [sp, #20]
 8009c6c:	9a07      	ldr	r2, [sp, #28]
 8009c6e:	9302      	str	r3, [sp, #8]
 8009c70:	9b06      	ldr	r3, [sp, #24]
 8009c72:	490d      	ldr	r1, [pc, #52]	; (8009ca8 <xTimerCreateTimerTask+0x5c>)
 8009c74:	9301      	str	r3, [sp, #4]
 8009c76:	2302      	movs	r3, #2
 8009c78:	480c      	ldr	r0, [pc, #48]	; (8009cac <xTimerCreateTimerTask+0x60>)
 8009c7a:	9300      	str	r3, [sp, #0]
 8009c7c:	4623      	mov	r3, r4
 8009c7e:	f7ff fb5e 	bl	800933e <xTaskCreateStatic>
 8009c82:	4b0b      	ldr	r3, [pc, #44]	; (8009cb0 <xTimerCreateTimerTask+0x64>)
 8009c84:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8009c86:	b950      	cbnz	r0, 8009c9e <xTimerCreateTimerTask+0x52>
 8009c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c8c:	b672      	cpsid	i
 8009c8e:	f383 8811 	msr	BASEPRI, r3
 8009c92:	f3bf 8f6f 	isb	sy
 8009c96:	f3bf 8f4f 	dsb	sy
 8009c9a:	b662      	cpsie	i
	configASSERT( xReturn );
 8009c9c:	e7fe      	b.n	8009c9c <xTimerCreateTimerTask+0x50>
}
 8009c9e:	2001      	movs	r0, #1
 8009ca0:	b008      	add	sp, #32
 8009ca2:	bd10      	pop	{r4, pc}
 8009ca4:	200177b0 	.word	0x200177b0
 8009ca8:	0802d9ce 	.word	0x0802d9ce
 8009cac:	08009dbd 	.word	0x08009dbd
 8009cb0:	200177b4 	.word	0x200177b4

08009cb4 <xTimerGenericCommand>:
{
 8009cb4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8009cb6:	4616      	mov	r6, r2
	configASSERT( xTimer );
 8009cb8:	4604      	mov	r4, r0
{
 8009cba:	461a      	mov	r2, r3
	configASSERT( xTimer );
 8009cbc:	b950      	cbnz	r0, 8009cd4 <xTimerGenericCommand+0x20>
 8009cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cc2:	b672      	cpsid	i
 8009cc4:	f383 8811 	msr	BASEPRI, r3
 8009cc8:	f3bf 8f6f 	isb	sy
 8009ccc:	f3bf 8f4f 	dsb	sy
 8009cd0:	b662      	cpsie	i
 8009cd2:	e7fe      	b.n	8009cd2 <xTimerGenericCommand+0x1e>
	if( xTimerQueue != NULL )
 8009cd4:	4d0c      	ldr	r5, [pc, #48]	; (8009d08 <xTimerGenericCommand+0x54>)
 8009cd6:	6828      	ldr	r0, [r5, #0]
 8009cd8:	b178      	cbz	r0, 8009cfa <xTimerGenericCommand+0x46>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009cda:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009cdc:	9402      	str	r4, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009cde:	e9cd 1600 	strd	r1, r6, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009ce2:	dc0c      	bgt.n	8009cfe <xTimerGenericCommand+0x4a>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009ce4:	f7ff fe66 	bl	80099b4 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009ce8:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009cea:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009cec:	4669      	mov	r1, sp
 8009cee:	6828      	ldr	r0, [r5, #0]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009cf0:	bf0c      	ite	eq
 8009cf2:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009cf4:	461a      	movne	r2, r3
 8009cf6:	f7fe fd9e 	bl	8008836 <xQueueGenericSend>
}
 8009cfa:	b004      	add	sp, #16
 8009cfc:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009cfe:	2300      	movs	r3, #0
 8009d00:	4669      	mov	r1, sp
 8009d02:	f7fe fea5 	bl	8008a50 <xQueueGenericSendFromISR>
 8009d06:	e7f8      	b.n	8009cfa <xTimerGenericCommand+0x46>
 8009d08:	200177b0 	.word	0x200177b0

08009d0c <prvSampleTimeNow>:
{
 8009d0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	if( xTimeNow < xLastTime )
 8009d10:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8009db8 <prvSampleTimeNow+0xac>
{
 8009d14:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 8009d16:	f7ff fb85 	bl	8009424 <xTaskGetTickCount>
 8009d1a:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 8009d1c:	f8d8 3000 	ldr.w	r3, [r8]
 8009d20:	4283      	cmp	r3, r0
 8009d22:	d942      	bls.n	8009daa <prvSampleTimeNow+0x9e>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009d24:	4f22      	ldr	r7, [pc, #136]	; (8009db0 <prvSampleTimeNow+0xa4>)
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009d26:	f04f 0900 	mov.w	r9, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009d2a:	683b      	ldr	r3, [r7, #0]
 8009d2c:	681a      	ldr	r2, [r3, #0]
 8009d2e:	b95a      	cbnz	r2, 8009d48 <prvSampleTimeNow+0x3c>
	pxCurrentTimerList = pxOverflowTimerList;
 8009d30:	4a20      	ldr	r2, [pc, #128]	; (8009db4 <prvSampleTimeNow+0xa8>)
 8009d32:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009d34:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 8009d36:	2301      	movs	r3, #1
	pxCurrentTimerList = pxOverflowTimerList;
 8009d38:	6039      	str	r1, [r7, #0]
}
 8009d3a:	4628      	mov	r0, r5
		*pxTimerListsWereSwitched = pdFALSE;
 8009d3c:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 8009d3e:	f8c8 5000 	str.w	r5, [r8]
}
 8009d42:	b004      	add	sp, #16
 8009d44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009d48:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d4a:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009d4c:	f8d3 a000 	ldr.w	sl, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009d50:	1d21      	adds	r1, r4, #4
 8009d52:	4608      	mov	r0, r1
 8009d54:	9103      	str	r1, [sp, #12]
 8009d56:	f7fe fa20 	bl	800819a <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009d5a:	6a23      	ldr	r3, [r4, #32]
 8009d5c:	4620      	mov	r0, r4
 8009d5e:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009d60:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8009d64:	9903      	ldr	r1, [sp, #12]
 8009d66:	f013 0f04 	tst.w	r3, #4
 8009d6a:	d0de      	beq.n	8009d2a <prvSampleTimeNow+0x1e>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009d6c:	69a3      	ldr	r3, [r4, #24]
 8009d6e:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
 8009d70:	459a      	cmp	sl, r3
 8009d72:	d205      	bcs.n	8009d80 <prvSampleTimeNow+0x74>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009d74:	6838      	ldr	r0, [r7, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009d76:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009d78:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009d7a:	f7fe f9f7 	bl	800816c <vListInsert>
 8009d7e:	e7d4      	b.n	8009d2a <prvSampleTimeNow+0x1e>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009d80:	2300      	movs	r3, #0
 8009d82:	4652      	mov	r2, sl
 8009d84:	4620      	mov	r0, r4
 8009d86:	f8cd 9000 	str.w	r9, [sp]
 8009d8a:	4619      	mov	r1, r3
 8009d8c:	f7ff ff92 	bl	8009cb4 <xTimerGenericCommand>
				configASSERT( xResult );
 8009d90:	2800      	cmp	r0, #0
 8009d92:	d1ca      	bne.n	8009d2a <prvSampleTimeNow+0x1e>
 8009d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d98:	b672      	cpsid	i
 8009d9a:	f383 8811 	msr	BASEPRI, r3
 8009d9e:	f3bf 8f6f 	isb	sy
 8009da2:	f3bf 8f4f 	dsb	sy
 8009da6:	b662      	cpsie	i
 8009da8:	e7fe      	b.n	8009da8 <prvSampleTimeNow+0x9c>
		*pxTimerListsWereSwitched = pdFALSE;
 8009daa:	2300      	movs	r3, #0
 8009dac:	e7c5      	b.n	8009d3a <prvSampleTimeNow+0x2e>
 8009dae:	bf00      	nop
 8009db0:	2001768c 	.word	0x2001768c
 8009db4:	20017690 	.word	0x20017690
 8009db8:	2001775c 	.word	0x2001775c

08009dbc <prvTimerTask>:
{
 8009dbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009dc0:	4d71      	ldr	r5, [pc, #452]	; (8009f88 <prvTimerTask+0x1cc>)
{
 8009dc2:	b089      	sub	sp, #36	; 0x24
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009dc4:	4e71      	ldr	r6, [pc, #452]	; (8009f8c <prvTimerTask+0x1d0>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009dc6:	682b      	ldr	r3, [r5, #0]
 8009dc8:	f8d3 8000 	ldr.w	r8, [r3]
 8009dcc:	f1b8 0f00 	cmp.w	r8, #0
 8009dd0:	d037      	beq.n	8009e42 <prvTimerTask+0x86>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009dd2:	68db      	ldr	r3, [r3, #12]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009dd4:	2400      	movs	r4, #0
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009dd6:	f8d3 8000 	ldr.w	r8, [r3]
	vTaskSuspendAll();
 8009dda:	f7ff fb1b 	bl	8009414 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009dde:	a804      	add	r0, sp, #16
 8009de0:	f7ff ff94 	bl	8009d0c <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 8009de4:	9b04      	ldr	r3, [sp, #16]
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009de6:	4681      	mov	r9, r0
		if( xTimerListsWereSwitched == pdFALSE )
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d16b      	bne.n	8009ec4 <prvTimerTask+0x108>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009dec:	2c00      	cmp	r4, #0
 8009dee:	d14e      	bne.n	8009e8e <prvTimerTask+0xd2>
 8009df0:	4540      	cmp	r0, r8
 8009df2:	d352      	bcc.n	8009e9a <prvTimerTask+0xde>
				( void ) xTaskResumeAll();
 8009df4:	f7ff fbb4 	bl	8009560 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009df8:	682b      	ldr	r3, [r5, #0]
 8009dfa:	68db      	ldr	r3, [r3, #12]
 8009dfc:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009dfe:	1d38      	adds	r0, r7, #4
 8009e00:	f7fe f9cb 	bl	800819a <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009e04:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009e08:	0758      	lsls	r0, r3, #29
 8009e0a:	d51c      	bpl.n	8009e46 <prvTimerTask+0x8a>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009e0c:	69b9      	ldr	r1, [r7, #24]
 8009e0e:	4643      	mov	r3, r8
 8009e10:	464a      	mov	r2, r9
 8009e12:	4638      	mov	r0, r7
 8009e14:	4441      	add	r1, r8
 8009e16:	f7ff fefb 	bl	8009c10 <prvInsertTimerInActiveList>
 8009e1a:	b1c0      	cbz	r0, 8009e4e <prvTimerTask+0x92>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009e1c:	4623      	mov	r3, r4
 8009e1e:	4642      	mov	r2, r8
 8009e20:	4621      	mov	r1, r4
 8009e22:	4638      	mov	r0, r7
 8009e24:	9400      	str	r4, [sp, #0]
 8009e26:	f7ff ff45 	bl	8009cb4 <xTimerGenericCommand>
			configASSERT( xResult );
 8009e2a:	b980      	cbnz	r0, 8009e4e <prvTimerTask+0x92>
 8009e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e30:	b672      	cpsid	i
 8009e32:	f383 8811 	msr	BASEPRI, r3
 8009e36:	f3bf 8f6f 	isb	sy
 8009e3a:	f3bf 8f4f 	dsb	sy
 8009e3e:	b662      	cpsie	i
 8009e40:	e7fe      	b.n	8009e40 <prvTimerTask+0x84>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009e42:	2401      	movs	r4, #1
 8009e44:	e7c9      	b.n	8009dda <prvTimerTask+0x1e>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009e46:	f023 0301 	bic.w	r3, r3, #1
 8009e4a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009e4e:	6a3b      	ldr	r3, [r7, #32]
 8009e50:	4638      	mov	r0, r7
 8009e52:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009e54:	2200      	movs	r2, #0
 8009e56:	a904      	add	r1, sp, #16
 8009e58:	6830      	ldr	r0, [r6, #0]
 8009e5a:	f7fe febe 	bl	8008bda <xQueueReceive>
 8009e5e:	2800      	cmp	r0, #0
 8009e60:	d0b1      	beq.n	8009dc6 <prvTimerTask+0xa>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009e62:	9b04      	ldr	r3, [sp, #16]
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009e64:	9806      	ldr	r0, [sp, #24]
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	db2f      	blt.n	8009eca <prvTimerTask+0x10e>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009e6a:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009e6c:	6963      	ldr	r3, [r4, #20]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d132      	bne.n	8009ed8 <prvTimerTask+0x11c>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009e72:	a803      	add	r0, sp, #12
 8009e74:	f7ff ff4a 	bl	8009d0c <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 8009e78:	9b04      	ldr	r3, [sp, #16]
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009e7a:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 8009e7c:	2b09      	cmp	r3, #9
 8009e7e:	d8e9      	bhi.n	8009e54 <prvTimerTask+0x98>
 8009e80:	e8df f003 	tbb	[pc, r3]
 8009e84:	592e2e2e 	.word	0x592e2e2e
 8009e88:	2e2e7a60 	.word	0x2e2e7a60
 8009e8c:	6059      	.short	0x6059
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009e8e:	4b40      	ldr	r3, [pc, #256]	; (8009f90 <prvTimerTask+0x1d4>)
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	681c      	ldr	r4, [r3, #0]
 8009e94:	fab4 f484 	clz	r4, r4
 8009e98:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009e9a:	4622      	mov	r2, r4
 8009e9c:	eba8 0109 	sub.w	r1, r8, r9
 8009ea0:	6830      	ldr	r0, [r6, #0]
 8009ea2:	f7ff f8c2 	bl	800902a <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009ea6:	f7ff fb5b 	bl	8009560 <xTaskResumeAll>
 8009eaa:	2800      	cmp	r0, #0
 8009eac:	d1d2      	bne.n	8009e54 <prvTimerTask+0x98>
					portYIELD_WITHIN_API();
 8009eae:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009eb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009eb6:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009eba:	f3bf 8f4f 	dsb	sy
 8009ebe:	f3bf 8f6f 	isb	sy
 8009ec2:	e7c7      	b.n	8009e54 <prvTimerTask+0x98>
			( void ) xTaskResumeAll();
 8009ec4:	f7ff fb4c 	bl	8009560 <xTaskResumeAll>
}
 8009ec8:	e7c4      	b.n	8009e54 <prvTimerTask+0x98>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009eca:	9b05      	ldr	r3, [sp, #20]
 8009ecc:	9907      	ldr	r1, [sp, #28]
 8009ece:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009ed0:	9b04      	ldr	r3, [sp, #16]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	dbbe      	blt.n	8009e54 <prvTimerTask+0x98>
 8009ed6:	e7c8      	b.n	8009e6a <prvTimerTask+0xae>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009ed8:	1d20      	adds	r0, r4, #4
 8009eda:	f7fe f95e 	bl	800819a <uxListRemove>
 8009ede:	e7c8      	b.n	8009e72 <prvTimerTask+0xb6>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009ee0:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009ee4:	4620      	mov	r0, r4
 8009ee6:	69a1      	ldr	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009ee8:	f043 0301 	orr.w	r3, r3, #1
 8009eec:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009ef0:	9b05      	ldr	r3, [sp, #20]
 8009ef2:	4419      	add	r1, r3
 8009ef4:	f7ff fe8c 	bl	8009c10 <prvInsertTimerInActiveList>
 8009ef8:	2800      	cmp	r0, #0
 8009efa:	d0ab      	beq.n	8009e54 <prvTimerTask+0x98>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009efc:	6a23      	ldr	r3, [r4, #32]
 8009efe:	4620      	mov	r0, r4
 8009f00:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009f02:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8009f06:	0759      	lsls	r1, r3, #29
 8009f08:	d5a4      	bpl.n	8009e54 <prvTimerTask+0x98>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009f0a:	69a2      	ldr	r2, [r4, #24]
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	9905      	ldr	r1, [sp, #20]
 8009f10:	4620      	mov	r0, r4
 8009f12:	9300      	str	r3, [sp, #0]
 8009f14:	440a      	add	r2, r1
 8009f16:	4619      	mov	r1, r3
 8009f18:	f7ff fecc 	bl	8009cb4 <xTimerGenericCommand>
							configASSERT( xResult );
 8009f1c:	2800      	cmp	r0, #0
 8009f1e:	d199      	bne.n	8009e54 <prvTimerTask+0x98>
 8009f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f24:	b672      	cpsid	i
 8009f26:	f383 8811 	msr	BASEPRI, r3
 8009f2a:	f3bf 8f6f 	isb	sy
 8009f2e:	f3bf 8f4f 	dsb	sy
 8009f32:	b662      	cpsie	i
 8009f34:	e7fe      	b.n	8009f34 <prvTimerTask+0x178>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009f36:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009f3a:	f023 0301 	bic.w	r3, r3, #1
 8009f3e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 8009f42:	e787      	b.n	8009e54 <prvTimerTask+0x98>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009f44:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8009f48:	f043 0301 	orr.w	r3, r3, #1
 8009f4c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009f50:	9905      	ldr	r1, [sp, #20]
 8009f52:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009f54:	b951      	cbnz	r1, 8009f6c <prvTimerTask+0x1b0>
 8009f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f5a:	b672      	cpsid	i
 8009f5c:	f383 8811 	msr	BASEPRI, r3
 8009f60:	f3bf 8f6f 	isb	sy
 8009f64:	f3bf 8f4f 	dsb	sy
 8009f68:	b662      	cpsie	i
 8009f6a:	e7fe      	b.n	8009f6a <prvTimerTask+0x1ae>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009f6c:	4603      	mov	r3, r0
 8009f6e:	4401      	add	r1, r0
 8009f70:	4620      	mov	r0, r4
 8009f72:	f7ff fe4d 	bl	8009c10 <prvInsertTimerInActiveList>
					break;
 8009f76:	e76d      	b.n	8009e54 <prvTimerTask+0x98>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009f78:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8009f7c:	079a      	lsls	r2, r3, #30
 8009f7e:	d4dc      	bmi.n	8009f3a <prvTimerTask+0x17e>
							vPortFree( pxTimer );
 8009f80:	4620      	mov	r0, r4
 8009f82:	f7fe f89d 	bl	80080c0 <vPortFree>
 8009f86:	e765      	b.n	8009e54 <prvTimerTask+0x98>
 8009f88:	2001768c 	.word	0x2001768c
 8009f8c:	200177b0 	.word	0x200177b0
 8009f90:	20017690 	.word	0x20017690

08009f94 <jpeg_abort>:
jpeg_abort (j_common_ptr cinfo)
{
  int pool;

  /* Do nothing if called on a not-initialized or destroyed JPEG object. */
  if (cinfo->mem == NULL)
 8009f94:	6843      	ldr	r3, [r0, #4]
{
 8009f96:	b510      	push	{r4, lr}
 8009f98:	4604      	mov	r4, r0
  if (cinfo->mem == NULL)
 8009f9a:	b14b      	cbz	r3, 8009fb0 <jpeg_abort+0x1c>

  /* Releasing pools in reverse order might help avoid fragmentation
   * with some (brain-damaged) malloc libraries.
   */
  for (pool = JPOOL_NUMPOOLS-1; pool > JPOOL_PERMANENT; pool--) {
    (*cinfo->mem->free_pool) (cinfo, pool);
 8009f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f9e:	2101      	movs	r1, #1
 8009fa0:	4798      	blx	r3
  }

  /* Reset overall state for possible reuse of object */
  if (cinfo->is_decompressor) {
 8009fa2:	6923      	ldr	r3, [r4, #16]
 8009fa4:	b12b      	cbz	r3, 8009fb2 <jpeg_abort+0x1e>
    cinfo->global_state = DSTATE_START;
 8009fa6:	23c8      	movs	r3, #200	; 0xc8
 8009fa8:	6163      	str	r3, [r4, #20]
    /* Try to keep application from accessing now-deleted marker list.
     * A bit kludgy to do it here, but this is the most central place.
     */
    ((j_decompress_ptr) cinfo)->marker_list = NULL;
 8009faa:	2300      	movs	r3, #0
 8009fac:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
  } else {
    cinfo->global_state = CSTATE_START;
  }
}
 8009fb0:	bd10      	pop	{r4, pc}
    cinfo->global_state = CSTATE_START;
 8009fb2:	2364      	movs	r3, #100	; 0x64
 8009fb4:	6163      	str	r3, [r4, #20]
 8009fb6:	e7fb      	b.n	8009fb0 <jpeg_abort+0x1c>

08009fb8 <jpeg_destroy>:
GLOBAL(void)
jpeg_destroy (j_common_ptr cinfo)
{
  /* We need only tell the memory manager to release everything. */
  /* NB: mem pointer is NULL if memory mgr failed to initialize. */
  if (cinfo->mem != NULL)
 8009fb8:	6843      	ldr	r3, [r0, #4]
{
 8009fba:	b510      	push	{r4, lr}
 8009fbc:	4604      	mov	r4, r0
  if (cinfo->mem != NULL)
 8009fbe:	b10b      	cbz	r3, 8009fc4 <jpeg_destroy+0xc>
    (*cinfo->mem->self_destruct) (cinfo);
 8009fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fc2:	4798      	blx	r3
  cinfo->mem = NULL;		/* be safe if jpeg_destroy is called twice */
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	6063      	str	r3, [r4, #4]
  cinfo->global_state = 0;	/* mark it destroyed */
 8009fc8:	6163      	str	r3, [r4, #20]
}
 8009fca:	bd10      	pop	{r4, pc}

08009fcc <jpeg_alloc_quant_table>:
 * (Would jutils.c be a more reasonable place to put these?)
 */

GLOBAL(JQUANT_TBL *)
jpeg_alloc_quant_table (j_common_ptr cinfo)
{
 8009fcc:	b508      	push	{r3, lr}
  JQUANT_TBL *tbl;

  tbl = (JQUANT_TBL *)
    (*cinfo->mem->alloc_small) (cinfo, JPOOL_PERMANENT, SIZEOF(JQUANT_TBL));
 8009fce:	6843      	ldr	r3, [r0, #4]
 8009fd0:	2284      	movs	r2, #132	; 0x84
 8009fd2:	2100      	movs	r1, #0
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	4798      	blx	r3
  tbl->sent_table = FALSE;	/* make sure this is false in any new table */
 8009fd8:	2200      	movs	r2, #0
 8009fda:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
  return tbl;
}
 8009fde:	bd08      	pop	{r3, pc}

08009fe0 <jpeg_alloc_huff_table>:


GLOBAL(JHUFF_TBL *)
jpeg_alloc_huff_table (j_common_ptr cinfo)
{
 8009fe0:	b508      	push	{r3, lr}
  JHUFF_TBL *tbl;

  tbl = (JHUFF_TBL *)
    (*cinfo->mem->alloc_small) (cinfo, JPOOL_PERMANENT, SIZEOF(JHUFF_TBL));
 8009fe2:	6843      	ldr	r3, [r0, #4]
 8009fe4:	f44f 728c 	mov.w	r2, #280	; 0x118
 8009fe8:	2100      	movs	r1, #0
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	4798      	blx	r3
  tbl->sent_table = FALSE;	/* make sure this is false in any new table */
 8009fee:	2200      	movs	r2, #0
 8009ff0:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
  return tbl;
}
 8009ff4:	bd08      	pop	{r3, pc}

08009ff6 <jpeg_CreateDecompress>:
jpeg_CreateDecompress (j_decompress_ptr cinfo, int version, size_t structsize)
{
  int i;

  /* Guard against version mismatches between library and caller. */
  cinfo->mem = NULL;		/* so jpeg_destroy knows mem mgr not called */
 8009ff6:	2300      	movs	r3, #0
  if (version != JPEG_LIB_VERSION)
 8009ff8:	2950      	cmp	r1, #80	; 0x50
{
 8009ffa:	b570      	push	{r4, r5, r6, lr}
 8009ffc:	4604      	mov	r4, r0
 8009ffe:	4615      	mov	r5, r2
  cinfo->mem = NULL;		/* so jpeg_destroy knows mem mgr not called */
 800a000:	6043      	str	r3, [r0, #4]
  if (version != JPEG_LIB_VERSION)
 800a002:	d007      	beq.n	800a014 <jpeg_CreateDecompress+0x1e>
    ERREXIT2(cinfo, JERR_BAD_LIB_VERSION, JPEG_LIB_VERSION, version);
 800a004:	6803      	ldr	r3, [r0, #0]
 800a006:	260d      	movs	r6, #13
 800a008:	2250      	movs	r2, #80	; 0x50
 800a00a:	61d9      	str	r1, [r3, #28]
 800a00c:	e9c3 6205 	strd	r6, r2, [r3, #20]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	4798      	blx	r3
  if (structsize != SIZEOF(struct jpeg_decompress_struct))
 800a014:	f5b5 7ff4 	cmp.w	r5, #488	; 0x1e8
 800a018:	d009      	beq.n	800a02e <jpeg_CreateDecompress+0x38>
    ERREXIT2(cinfo, JERR_BAD_STRUCT_SIZE, 
 800a01a:	6823      	ldr	r3, [r4, #0]
 800a01c:	2116      	movs	r1, #22
 800a01e:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800a022:	4620      	mov	r0, r4
 800a024:	61dd      	str	r5, [r3, #28]
 800a026:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	4798      	blx	r3
   * complain here.
   */
  {
    struct jpeg_error_mgr * err = cinfo->err;
    void * client_data = cinfo->client_data; /* ignore Purify complaint here */
    MEMZERO(cinfo, SIZEOF(struct jpeg_decompress_struct));
 800a02e:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800a032:	2100      	movs	r1, #0
 800a034:	4620      	mov	r0, r4
    struct jpeg_error_mgr * err = cinfo->err;
 800a036:	6826      	ldr	r6, [r4, #0]
    void * client_data = cinfo->client_data; /* ignore Purify complaint here */
 800a038:	68e5      	ldr	r5, [r4, #12]
    MEMZERO(cinfo, SIZEOF(struct jpeg_decompress_struct));
 800a03a:	f020 f8eb 	bl	802a214 <memset>
    cinfo->err = err;
    cinfo->client_data = client_data;
  }
  cinfo->is_decompressor = TRUE;
 800a03e:	2301      	movs	r3, #1

  /* Initialize a memory manager instance for this object */
  jinit_memory_mgr((j_common_ptr) cinfo);
 800a040:	4620      	mov	r0, r4
    cinfo->err = err;
 800a042:	6026      	str	r6, [r4, #0]
  cinfo->is_decompressor = TRUE;
 800a044:	6123      	str	r3, [r4, #16]
    cinfo->client_data = client_data;
 800a046:	60e5      	str	r5, [r4, #12]
  jinit_memory_mgr((j_common_ptr) cinfo);
 800a048:	f00b feac 	bl	8015da4 <jinit_memory_mgr>

  /* Zero out pointers to permanent structures. */
  cinfo->progress = NULL;
 800a04c:	2300      	movs	r3, #0

  /* Initialize marker processor so application can override methods
   * for COM, APPn markers before calling jpeg_read_header.
   */
  cinfo->marker_list = NULL;
  jinit_marker_reader(cinfo);
 800a04e:	4620      	mov	r0, r4
  cinfo->progress = NULL;
 800a050:	60a3      	str	r3, [r4, #8]
  cinfo->src = NULL;
 800a052:	61a3      	str	r3, [r4, #24]
    cinfo->dc_huff_tbl_ptrs[i] = NULL;
 800a054:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
    cinfo->ac_huff_tbl_ptrs[i] = NULL;
 800a058:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
    cinfo->dc_huff_tbl_ptrs[i] = NULL;
 800a05c:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
    cinfo->ac_huff_tbl_ptrs[i] = NULL;
 800a060:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
    cinfo->dc_huff_tbl_ptrs[i] = NULL;
 800a064:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
    cinfo->ac_huff_tbl_ptrs[i] = NULL;
 800a068:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
    cinfo->dc_huff_tbl_ptrs[i] = NULL;
 800a06c:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
    cinfo->ac_huff_tbl_ptrs[i] = NULL;
 800a070:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
  cinfo->marker_list = NULL;
 800a074:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
    cinfo->quant_tbl_ptrs[i] = NULL;
 800a078:	e9c4 3329 	strd	r3, r3, [r4, #164]	; 0xa4
 800a07c:	e9c4 332b 	strd	r3, r3, [r4, #172]	; 0xac
  jinit_marker_reader(cinfo);
 800a080:	f005 f8ba 	bl	800f1f8 <jinit_marker_reader>

  /* And initialize the overall input controller. */
  jinit_input_controller(cinfo);
 800a084:	4620      	mov	r0, r4
 800a086:	f003 fdbd 	bl	800dc04 <jinit_input_controller>

  /* OK, I'm ready */
  cinfo->global_state = DSTATE_START;
 800a08a:	23c8      	movs	r3, #200	; 0xc8
 800a08c:	6163      	str	r3, [r4, #20]
}
 800a08e:	bd70      	pop	{r4, r5, r6, pc}

0800a090 <jpeg_destroy_decompress>:
 */

GLOBAL(void)
jpeg_destroy_decompress (j_decompress_ptr cinfo)
{
  jpeg_destroy((j_common_ptr) cinfo); /* use common routine */
 800a090:	f7ff bf92 	b.w	8009fb8 <jpeg_destroy>

0800a094 <jpeg_consume_input>:
jpeg_consume_input (j_decompress_ptr cinfo)
{
  int retcode = JPEG_SUSPENDED;

  /* NB: every possible DSTATE value should be listed in this switch */
  switch (cinfo->global_state) {
 800a094:	6942      	ldr	r2, [r0, #20]
 800a096:	f1a2 03c8 	sub.w	r3, r2, #200	; 0xc8
{
 800a09a:	b570      	push	{r4, r5, r6, lr}
 800a09c:	4604      	mov	r4, r0
  switch (cinfo->global_state) {
 800a09e:	2b0a      	cmp	r3, #10
 800a0a0:	f200 80a5 	bhi.w	800a1ee <jpeg_consume_input+0x15a>
 800a0a4:	e8df f003 	tbb	[pc, r3]
 800a0a8:	9dab1006 	.word	0x9dab1006
 800a0ac:	9d9d9d9d 	.word	0x9d9d9d9d
 800a0b0:	a39d      	.short	0xa39d
 800a0b2:	9d          	.byte	0x9d
 800a0b3:	00          	.byte	0x00
  case DSTATE_START:
    /* Start-of-datastream actions: reset appropriate modules */
    (*cinfo->inputctl->reset_input_controller) (cinfo);
 800a0b4:	f8d0 31c8 	ldr.w	r3, [r0, #456]	; 0x1c8
 800a0b8:	685b      	ldr	r3, [r3, #4]
 800a0ba:	4798      	blx	r3
    /* Initialize application's data source module */
    (*cinfo->src->init_source) (cinfo);
 800a0bc:	69a3      	ldr	r3, [r4, #24]
 800a0be:	4620      	mov	r0, r4
 800a0c0:	689b      	ldr	r3, [r3, #8]
 800a0c2:	4798      	blx	r3
    cinfo->global_state = DSTATE_INHEADER;
 800a0c4:	23c9      	movs	r3, #201	; 0xc9
 800a0c6:	6163      	str	r3, [r4, #20]
    /*FALLTHROUGH*/
  case DSTATE_INHEADER:
    retcode = (*cinfo->inputctl->consume_input) (cinfo);
 800a0c8:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 800a0cc:	4620      	mov	r0, r4
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	4798      	blx	r3
    if (retcode == JPEG_REACHED_SOS) { /* Found SOS, prepare to decompress */
 800a0d2:	2801      	cmp	r0, #1
    retcode = (*cinfo->inputctl->consume_input) (cinfo);
 800a0d4:	4606      	mov	r6, r0
    if (retcode == JPEG_REACHED_SOS) { /* Found SOS, prepare to decompress */
 800a0d6:	d146      	bne.n	800a166 <jpeg_consume_input+0xd2>
  switch (cinfo->num_components) {
 800a0d8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a0da:	2d03      	cmp	r5, #3
 800a0dc:	d007      	beq.n	800a0ee <jpeg_consume_input+0x5a>
 800a0de:	2d04      	cmp	r5, #4
 800a0e0:	d064      	beq.n	800a1ac <jpeg_consume_input+0x118>
 800a0e2:	2d01      	cmp	r5, #1
 800a0e4:	d17b      	bne.n	800a1de <jpeg_consume_input+0x14a>
    cinfo->jpeg_color_space = JCS_GRAYSCALE;
 800a0e6:	f240 1301 	movw	r3, #257	; 0x101
    cinfo->jpeg_color_space = JCS_UNKNOWN;
 800a0ea:	8523      	strh	r3, [r4, #40]	; 0x28
    break;
 800a0ec:	e01c      	b.n	800a128 <jpeg_consume_input+0x94>
    if (cinfo->saw_JFIF_marker) {
 800a0ee:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
 800a0f2:	b10b      	cbz	r3, 800a0f8 <jpeg_consume_input+0x64>
	cinfo->jpeg_color_space = JCS_YCbCr; /* assume it's YCbCr */
 800a0f4:	2303      	movs	r3, #3
 800a0f6:	e056      	b.n	800a1a6 <jpeg_consume_input+0x112>
    } else if (cinfo->saw_Adobe_marker) {
 800a0f8:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d034      	beq.n	800a16a <jpeg_consume_input+0xd6>
      switch (cinfo->Adobe_transform) {
 800a100:	f894 212c 	ldrb.w	r2, [r4, #300]	; 0x12c
 800a104:	2a00      	cmp	r2, #0
 800a106:	d04d      	beq.n	800a1a4 <jpeg_consume_input+0x110>
 800a108:	2a01      	cmp	r2, #1
 800a10a:	d008      	beq.n	800a11e <jpeg_consume_input+0x8a>
	WARNMS1(cinfo, JWRN_ADOBE_XFORM, cinfo->Adobe_transform);
 800a10c:	6823      	ldr	r3, [r4, #0]
 800a10e:	2174      	movs	r1, #116	; 0x74
 800a110:	4620      	mov	r0, r4
      switch (cinfo->Adobe_transform) {
 800a112:	e9c3 1205 	strd	r1, r2, [r3, #20]
	WARNMS1(cinfo, JWRN_ADOBE_XFORM, cinfo->Adobe_transform);
 800a116:	685b      	ldr	r3, [r3, #4]
 800a118:	f04f 31ff 	mov.w	r1, #4294967295
 800a11c:	4798      	blx	r3
	cinfo->jpeg_color_space = JCS_YCbCr; /* assume it's YCbCr */
 800a11e:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
    cinfo->out_color_space = JCS_RGB;
 800a122:	2302      	movs	r3, #2
    cinfo->out_color_space = JCS_CMYK;
 800a124:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
  cinfo->scale_num = cinfo->block_size;		/* 1:1 scaling */
 800a128:	f8d4 31a8 	ldr.w	r3, [r4, #424]	; 0x1a8
  cinfo->output_gamma = 1.0;
 800a12c:	2200      	movs	r2, #0
  cinfo->dither_mode = JDITHER_FS;
 800a12e:	2102      	movs	r1, #2
  cinfo->scale_denom = cinfo->block_size;
 800a130:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
  cinfo->output_gamma = 1.0;
 800a134:	4b33      	ldr	r3, [pc, #204]	; (800a204 <jpeg_consume_input+0x170>)
  cinfo->dither_mode = JDITHER_FS;
 800a136:	f884 1058 	strb.w	r1, [r4, #88]	; 0x58
  cinfo->output_gamma = 1.0;
 800a13a:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
  cinfo->buffered_image = FALSE;
 800a13e:	2300      	movs	r3, #0
  cinfo->do_fancy_upsampling = TRUE;
 800a140:	2201      	movs	r2, #1
  cinfo->raw_data_out = FALSE;
 800a142:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  cinfo->dct_method = JDCT_DEFAULT;
 800a146:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  cinfo->quantize_colors = FALSE;
 800a14a:	6563      	str	r3, [r4, #84]	; 0x54
  cinfo->two_pass_quantize = TRUE;
 800a14c:	65e2      	str	r2, [r4, #92]	; 0x5c
  cinfo->colormap = NULL;
 800a14e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  cinfo->enable_2pass_quant = FALSE;
 800a152:	66e3      	str	r3, [r4, #108]	; 0x6c
  cinfo->do_block_smoothing = TRUE;
 800a154:	e9c4 2213 	strd	r2, r2, [r4, #76]	; 0x4c
  cinfo->enable_external_quant = FALSE;
 800a158:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
  cinfo->desired_number_of_colors = 256;
 800a15c:	f44f 7280 	mov.w	r2, #256	; 0x100
      /* Set up default parameters based on header data */
      default_decompress_parms(cinfo);
      /* Set global state: ready for start_decompress */
      cinfo->global_state = DSTATE_READY;
 800a160:	23ca      	movs	r3, #202	; 0xca
  cinfo->desired_number_of_colors = 256;
 800a162:	6622      	str	r2, [r4, #96]	; 0x60
      cinfo->global_state = DSTATE_READY;
 800a164:	6163      	str	r3, [r4, #20]
    break;
  default:
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
  }
  return retcode;
}
 800a166:	4630      	mov	r0, r6
 800a168:	bd70      	pop	{r4, r5, r6, pc}
      int cid0 = cinfo->comp_info[0].component_id;
 800a16a:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 800a16e:	6818      	ldr	r0, [r3, #0]
      int cid1 = cinfo->comp_info[1].component_id;
 800a170:	6d99      	ldr	r1, [r3, #88]	; 0x58
      if (cid0 == 1 && cid1 == 2 && cid2 == 3)
 800a172:	2801      	cmp	r0, #1
      int cid2 = cinfo->comp_info[2].component_id;
 800a174:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
      if (cid0 == 1 && cid1 == 2 && cid2 == 3)
 800a178:	d10e      	bne.n	800a198 <jpeg_consume_input+0x104>
 800a17a:	2902      	cmp	r1, #2
 800a17c:	d101      	bne.n	800a182 <jpeg_consume_input+0xee>
 800a17e:	2a03      	cmp	r2, #3
 800a180:	d0b8      	beq.n	800a0f4 <jpeg_consume_input+0x60>
	TRACEMS3(cinfo, 1, JTRC_UNKNOWN_IDS, cid0, cid1, cid2);
 800a182:	6823      	ldr	r3, [r4, #0]
 800a184:	621a      	str	r2, [r3, #32]
 800a186:	2271      	movs	r2, #113	; 0x71
 800a188:	e9c3 0106 	strd	r0, r1, [r3, #24]
 800a18c:	615a      	str	r2, [r3, #20]
 800a18e:	2101      	movs	r1, #1
 800a190:	685b      	ldr	r3, [r3, #4]
 800a192:	4620      	mov	r0, r4
 800a194:	4798      	blx	r3
 800a196:	e7ad      	b.n	800a0f4 <jpeg_consume_input+0x60>
      else if (cid0 == 82 && cid1 == 71 && cid2 == 66)
 800a198:	2852      	cmp	r0, #82	; 0x52
 800a19a:	d1f2      	bne.n	800a182 <jpeg_consume_input+0xee>
 800a19c:	2947      	cmp	r1, #71	; 0x47
 800a19e:	d1f0      	bne.n	800a182 <jpeg_consume_input+0xee>
 800a1a0:	2a42      	cmp	r2, #66	; 0x42
 800a1a2:	d1ee      	bne.n	800a182 <jpeg_consume_input+0xee>
	cinfo->jpeg_color_space = JCS_RGB; /* ASCII 'R', 'G', 'B' */
 800a1a4:	2302      	movs	r3, #2
	cinfo->jpeg_color_space = JCS_YCbCr; /* assume it's YCbCr */
 800a1a6:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 800a1aa:	e7ba      	b.n	800a122 <jpeg_consume_input+0x8e>
    if (cinfo->saw_Adobe_marker) {
 800a1ac:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 800a1b0:	b193      	cbz	r3, 800a1d8 <jpeg_consume_input+0x144>
      switch (cinfo->Adobe_transform) {
 800a1b2:	f894 212c 	ldrb.w	r2, [r4, #300]	; 0x12c
 800a1b6:	b17a      	cbz	r2, 800a1d8 <jpeg_consume_input+0x144>
 800a1b8:	2a02      	cmp	r2, #2
 800a1ba:	d008      	beq.n	800a1ce <jpeg_consume_input+0x13a>
	WARNMS1(cinfo, JWRN_ADOBE_XFORM, cinfo->Adobe_transform);
 800a1bc:	6823      	ldr	r3, [r4, #0]
 800a1be:	2174      	movs	r1, #116	; 0x74
 800a1c0:	4620      	mov	r0, r4
      switch (cinfo->Adobe_transform) {
 800a1c2:	e9c3 1205 	strd	r1, r2, [r3, #20]
	WARNMS1(cinfo, JWRN_ADOBE_XFORM, cinfo->Adobe_transform);
 800a1c6:	685b      	ldr	r3, [r3, #4]
 800a1c8:	f04f 31ff 	mov.w	r1, #4294967295
 800a1cc:	4798      	blx	r3
	cinfo->jpeg_color_space = JCS_YCCK; /* assume it's YCCK */
 800a1ce:	2305      	movs	r3, #5
 800a1d0:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    cinfo->out_color_space = JCS_CMYK;
 800a1d4:	2304      	movs	r3, #4
 800a1d6:	e7a5      	b.n	800a124 <jpeg_consume_input+0x90>
      cinfo->jpeg_color_space = JCS_CMYK;
 800a1d8:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
 800a1dc:	e7fa      	b.n	800a1d4 <jpeg_consume_input+0x140>
    cinfo->jpeg_color_space = JCS_UNKNOWN;
 800a1de:	2300      	movs	r3, #0
 800a1e0:	e783      	b.n	800a0ea <jpeg_consume_input+0x56>
    retcode = (*cinfo->inputctl->consume_input) (cinfo);
 800a1e2:	f8d0 31c8 	ldr.w	r3, [r0, #456]	; 0x1c8
}
 800a1e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    retcode = (*cinfo->inputctl->consume_input) (cinfo);
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	4718      	bx	r3
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 800a1ee:	6803      	ldr	r3, [r0, #0]
 800a1f0:	2115      	movs	r1, #21
  int retcode = JPEG_SUSPENDED;
 800a1f2:	2600      	movs	r6, #0
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 800a1f4:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	4798      	blx	r3
 800a1fc:	e7b3      	b.n	800a166 <jpeg_consume_input+0xd2>
  switch (cinfo->global_state) {
 800a1fe:	2601      	movs	r6, #1
  return retcode;
 800a200:	e7b1      	b.n	800a166 <jpeg_consume_input+0xd2>
 800a202:	bf00      	nop
 800a204:	3ff00000 	.word	0x3ff00000

0800a208 <jpeg_read_header>:
  if (cinfo->global_state != DSTATE_START &&
 800a208:	6942      	ldr	r2, [r0, #20]
 800a20a:	f1a2 03c8 	sub.w	r3, r2, #200	; 0xc8
 800a20e:	2b01      	cmp	r3, #1
{
 800a210:	b570      	push	{r4, r5, r6, lr}
 800a212:	4604      	mov	r4, r0
 800a214:	460e      	mov	r6, r1
  if (cinfo->global_state != DSTATE_START &&
 800a216:	d905      	bls.n	800a224 <jpeg_read_header+0x1c>
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 800a218:	6803      	ldr	r3, [r0, #0]
 800a21a:	2115      	movs	r1, #21
 800a21c:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	4798      	blx	r3
  retcode = jpeg_consume_input(cinfo);
 800a224:	4620      	mov	r0, r4
 800a226:	f7ff ff35 	bl	800a094 <jpeg_consume_input>
  switch (retcode) {
 800a22a:	2801      	cmp	r0, #1
  retcode = jpeg_consume_input(cinfo);
 800a22c:	4605      	mov	r5, r0
  switch (retcode) {
 800a22e:	d00b      	beq.n	800a248 <jpeg_read_header+0x40>
 800a230:	2802      	cmp	r0, #2
 800a232:	d109      	bne.n	800a248 <jpeg_read_header+0x40>
    if (require_image)		/* Complain if application wanted an image */
 800a234:	b12e      	cbz	r6, 800a242 <jpeg_read_header+0x3a>
      ERREXIT(cinfo, JERR_NO_IMAGE);
 800a236:	6823      	ldr	r3, [r4, #0]
 800a238:	2235      	movs	r2, #53	; 0x35
 800a23a:	4620      	mov	r0, r4
 800a23c:	615a      	str	r2, [r3, #20]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	4798      	blx	r3
    jpeg_abort((j_common_ptr) cinfo); /* sets state = DSTATE_START */
 800a242:	4620      	mov	r0, r4
 800a244:	f7ff fea6 	bl	8009f94 <jpeg_abort>
}
 800a248:	4628      	mov	r0, r5
 800a24a:	bd70      	pop	{r4, r5, r6, pc}

0800a24c <jpeg_finish_decompress>:
 */

GLOBAL(boolean)
jpeg_finish_decompress (j_decompress_ptr cinfo)
{
  if ((cinfo->global_state == DSTATE_SCANNING ||
 800a24c:	6943      	ldr	r3, [r0, #20]
 800a24e:	f1a3 02cd 	sub.w	r2, r3, #205	; 0xcd
 800a252:	2a01      	cmp	r2, #1
{
 800a254:	b510      	push	{r4, lr}
 800a256:	4604      	mov	r4, r0
  if ((cinfo->global_state == DSTATE_SCANNING ||
 800a258:	d81f      	bhi.n	800a29a <jpeg_finish_decompress+0x4e>
       cinfo->global_state == DSTATE_RAW_OK) && ! cinfo->buffered_image) {
 800a25a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800a25c:	bb0a      	cbnz	r2, 800a2a2 <jpeg_finish_decompress+0x56>
    /* Terminate final pass of non-buffered mode */
    if (cinfo->output_scanline < cinfo->output_height)
 800a25e:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 800a262:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800a264:	429a      	cmp	r2, r3
 800a266:	d204      	bcs.n	800a272 <jpeg_finish_decompress+0x26>
      ERREXIT(cinfo, JERR_TOO_LITTLE_DATA);
 800a268:	6803      	ldr	r3, [r0, #0]
 800a26a:	2245      	movs	r2, #69	; 0x45
 800a26c:	615a      	str	r2, [r3, #20]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	4798      	blx	r3
    (*cinfo->master->finish_output_pass) (cinfo);
 800a272:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
 800a276:	4620      	mov	r0, r4
 800a278:	685b      	ldr	r3, [r3, #4]
 800a27a:	4798      	blx	r3
    cinfo->global_state = DSTATE_STOPPING;
  } else if (cinfo->global_state == DSTATE_BUFIMAGE) {
    /* Finishing after a buffered-image operation */
    cinfo->global_state = DSTATE_STOPPING;
 800a27c:	23d2      	movs	r3, #210	; 0xd2
 800a27e:	6163      	str	r3, [r4, #20]
  } else if (cinfo->global_state != DSTATE_STOPPING) {
    /* STOPPING = repeat call after a suspension, anything else is error */
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
  }
  /* Read until EOI */
  while (! cinfo->inputctl->eoi_reached) {
 800a280:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 800a284:	695a      	ldr	r2, [r3, #20]
 800a286:	b1a2      	cbz	r2, 800a2b2 <jpeg_finish_decompress+0x66>
    if ((*cinfo->inputctl->consume_input) (cinfo) == JPEG_SUSPENDED)
      return FALSE;		/* Suspend, come back later */
  }
  /* Do final cleanup */
  (*cinfo->src->term_source) (cinfo);
 800a288:	69a3      	ldr	r3, [r4, #24]
 800a28a:	4620      	mov	r0, r4
 800a28c:	699b      	ldr	r3, [r3, #24]
 800a28e:	4798      	blx	r3
  /* We can use jpeg_abort to release memory and reset global_state */
  jpeg_abort((j_common_ptr) cinfo);
 800a290:	4620      	mov	r0, r4
 800a292:	f7ff fe7f 	bl	8009f94 <jpeg_abort>
  return TRUE;
 800a296:	2001      	movs	r0, #1
 800a298:	e010      	b.n	800a2bc <jpeg_finish_decompress+0x70>
  } else if (cinfo->global_state == DSTATE_BUFIMAGE) {
 800a29a:	2bcf      	cmp	r3, #207	; 0xcf
 800a29c:	d0ee      	beq.n	800a27c <jpeg_finish_decompress+0x30>
  } else if (cinfo->global_state != DSTATE_STOPPING) {
 800a29e:	2bd2      	cmp	r3, #210	; 0xd2
 800a2a0:	d0ee      	beq.n	800a280 <jpeg_finish_decompress+0x34>
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 800a2a2:	6822      	ldr	r2, [r4, #0]
 800a2a4:	2115      	movs	r1, #21
 800a2a6:	4620      	mov	r0, r4
 800a2a8:	e9c2 1305 	strd	r1, r3, [r2, #20]
 800a2ac:	6813      	ldr	r3, [r2, #0]
 800a2ae:	4798      	blx	r3
 800a2b0:	e7e6      	b.n	800a280 <jpeg_finish_decompress+0x34>
    if ((*cinfo->inputctl->consume_input) (cinfo) == JPEG_SUSPENDED)
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	4620      	mov	r0, r4
 800a2b6:	4798      	blx	r3
 800a2b8:	2800      	cmp	r0, #0
 800a2ba:	d1e1      	bne.n	800a280 <jpeg_finish_decompress+0x34>
}
 800a2bc:	bd10      	pop	{r4, pc}

0800a2be <output_pass_setup>:
 */

LOCAL(boolean)
output_pass_setup (j_decompress_ptr cinfo)
{
  if (cinfo->global_state != DSTATE_PRESCAN) {
 800a2be:	6943      	ldr	r3, [r0, #20]
 800a2c0:	2bcc      	cmp	r3, #204	; 0xcc
{
 800a2c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2c6:	4604      	mov	r4, r0
  if (cinfo->global_state != DSTATE_PRESCAN) {
 800a2c8:	d008      	beq.n	800a2dc <output_pass_setup+0x1e>
    /* First call: do pass setup */
    (*cinfo->master->prepare_for_output_pass) (cinfo);
 800a2ca:	f8d0 31b8 	ldr.w	r3, [r0, #440]	; 0x1b8
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	4798      	blx	r3
    cinfo->output_scanline = 0;
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    cinfo->global_state = DSTATE_PRESCAN;
 800a2d8:	23cc      	movs	r3, #204	; 0xcc
 800a2da:	6163      	str	r3, [r4, #20]
	cinfo->progress->pass_limit = (long) cinfo->output_height;
	(*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
      }
      /* Process some data */
      last_scanline = cinfo->output_scanline;
      (*cinfo->main->process_data) (cinfo, (JSAMPARRAY) NULL,
 800a2dc:	f104 058c 	add.w	r5, r4, #140	; 0x8c
 800a2e0:	2600      	movs	r6, #0
  while (cinfo->master->is_dummy_pass) {
 800a2e2:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
 800a2e6:	689b      	ldr	r3, [r3, #8]
 800a2e8:	b9f3      	cbnz	r3, 800a328 <output_pass_setup+0x6a>
#endif /* QUANT_2PASS_SUPPORTED */
  }
  /* Ready for application to drive output pass through
   * jpeg_read_scanlines or jpeg_read_raw_data.
   */
  cinfo->global_state = cinfo->raw_data_out ? DSTATE_RAW_OK : DSTATE_SCANNING;
 800a2ea:	6c63      	ldr	r3, [r4, #68]	; 0x44
  return TRUE;
 800a2ec:	2001      	movs	r0, #1
  cinfo->global_state = cinfo->raw_data_out ? DSTATE_RAW_OK : DSTATE_SCANNING;
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	bf14      	ite	ne
 800a2f2:	23ce      	movne	r3, #206	; 0xce
 800a2f4:	23cd      	moveq	r3, #205	; 0xcd
 800a2f6:	6163      	str	r3, [r4, #20]
}
 800a2f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (cinfo->progress != NULL) {
 800a2fc:	68a3      	ldr	r3, [r4, #8]
 800a2fe:	b123      	cbz	r3, 800a30a <output_pass_setup+0x4c>
	(*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
 800a300:	4620      	mov	r0, r4
	cinfo->progress->pass_limit = (long) cinfo->output_height;
 800a302:	e9c3 1201 	strd	r1, r2, [r3, #4]
	(*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	4798      	blx	r3
      (*cinfo->main->process_data) (cinfo, (JSAMPARRAY) NULL,
 800a30a:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
 800a30e:	462a      	mov	r2, r5
 800a310:	4620      	mov	r0, r4
      last_scanline = cinfo->output_scanline;
 800a312:	f8d4 708c 	ldr.w	r7, [r4, #140]	; 0x8c
      (*cinfo->main->process_data) (cinfo, (JSAMPARRAY) NULL,
 800a316:	f8d3 8004 	ldr.w	r8, [r3, #4]
 800a31a:	2300      	movs	r3, #0
 800a31c:	4619      	mov	r1, r3
 800a31e:	47c0      	blx	r8
      if (cinfo->output_scanline == last_scanline)
 800a320:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800a324:	42bb      	cmp	r3, r7
 800a326:	d011      	beq.n	800a34c <output_pass_setup+0x8e>
    while (cinfo->output_scanline < cinfo->output_height) {
 800a328:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800a32c:	6f62      	ldr	r2, [r4, #116]	; 0x74
 800a32e:	4291      	cmp	r1, r2
 800a330:	d3e4      	bcc.n	800a2fc <output_pass_setup+0x3e>
    (*cinfo->master->finish_output_pass) (cinfo);
 800a332:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
 800a336:	4620      	mov	r0, r4
 800a338:	685b      	ldr	r3, [r3, #4]
 800a33a:	4798      	blx	r3
    (*cinfo->master->prepare_for_output_pass) (cinfo);
 800a33c:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
 800a340:	4620      	mov	r0, r4
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	4798      	blx	r3
    cinfo->output_scanline = 0;
 800a346:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
 800a34a:	e7ca      	b.n	800a2e2 <output_pass_setup+0x24>
	return FALSE;		/* No progress made, must suspend */
 800a34c:	2000      	movs	r0, #0
 800a34e:	e7d3      	b.n	800a2f8 <output_pass_setup+0x3a>

0800a350 <jpeg_start_decompress>:
  if (cinfo->global_state == DSTATE_READY) {
 800a350:	6943      	ldr	r3, [r0, #20]
 800a352:	2bca      	cmp	r3, #202	; 0xca
{
 800a354:	b510      	push	{r4, lr}
 800a356:	4604      	mov	r4, r0
  if (cinfo->global_state == DSTATE_READY) {
 800a358:	d109      	bne.n	800a36e <jpeg_start_decompress+0x1e>
    jinit_master_decompress(cinfo);
 800a35a:	f005 f8f7 	bl	800f54c <jinit_master_decompress>
    if (cinfo->buffered_image) {
 800a35e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a360:	b11b      	cbz	r3, 800a36a <jpeg_start_decompress+0x1a>
      cinfo->global_state = DSTATE_BUFIMAGE;
 800a362:	23cf      	movs	r3, #207	; 0xcf
      return TRUE;
 800a364:	2001      	movs	r0, #1
      cinfo->global_state = DSTATE_BUFIMAGE;
 800a366:	6163      	str	r3, [r4, #20]
}
 800a368:	bd10      	pop	{r4, pc}
    cinfo->global_state = DSTATE_PRELOAD;
 800a36a:	23cb      	movs	r3, #203	; 0xcb
 800a36c:	6163      	str	r3, [r4, #20]
  if (cinfo->global_state == DSTATE_PRELOAD) {
 800a36e:	6962      	ldr	r2, [r4, #20]
 800a370:	2acb      	cmp	r2, #203	; 0xcb
 800a372:	d12c      	bne.n	800a3ce <jpeg_start_decompress+0x7e>
    if (cinfo->inputctl->has_multiple_scans) {
 800a374:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 800a378:	691b      	ldr	r3, [r3, #16]
 800a37a:	b1fb      	cbz	r3, 800a3bc <jpeg_start_decompress+0x6c>
	if (cinfo->progress != NULL)
 800a37c:	68a3      	ldr	r3, [r4, #8]
 800a37e:	b113      	cbz	r3, 800a386 <jpeg_start_decompress+0x36>
	  (*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	4620      	mov	r0, r4
 800a384:	4798      	blx	r3
	retcode = (*cinfo->inputctl->consume_input) (cinfo);
 800a386:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 800a38a:	4620      	mov	r0, r4
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	4798      	blx	r3
	if (retcode == JPEG_SUSPENDED)
 800a390:	2800      	cmp	r0, #0
 800a392:	d0e9      	beq.n	800a368 <jpeg_start_decompress+0x18>
	if (retcode == JPEG_REACHED_EOI)
 800a394:	2802      	cmp	r0, #2
 800a396:	d011      	beq.n	800a3bc <jpeg_start_decompress+0x6c>
	if (cinfo->progress != NULL &&
 800a398:	68a3      	ldr	r3, [r4, #8]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d0ee      	beq.n	800a37c <jpeg_start_decompress+0x2c>
	    (retcode == JPEG_ROW_COMPLETED || retcode == JPEG_REACHED_SOS)) {
 800a39e:	f020 0002 	bic.w	r0, r0, #2
 800a3a2:	2801      	cmp	r0, #1
 800a3a4:	d1ea      	bne.n	800a37c <jpeg_start_decompress+0x2c>
	  if (++cinfo->progress->pass_counter >= cinfo->progress->pass_limit) {
 800a3a6:	685a      	ldr	r2, [r3, #4]
 800a3a8:	6899      	ldr	r1, [r3, #8]
 800a3aa:	3201      	adds	r2, #1
 800a3ac:	428a      	cmp	r2, r1
 800a3ae:	605a      	str	r2, [r3, #4]
 800a3b0:	dbe4      	blt.n	800a37c <jpeg_start_decompress+0x2c>
	    cinfo->progress->pass_limit += (long) cinfo->total_iMCU_rows;
 800a3b2:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
 800a3b6:	440a      	add	r2, r1
 800a3b8:	609a      	str	r2, [r3, #8]
 800a3ba:	e7df      	b.n	800a37c <jpeg_start_decompress+0x2c>
    cinfo->output_scan_number = cinfo->input_scan_number;
 800a3bc:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800a3c0:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
  return output_pass_setup(cinfo);
 800a3c4:	4620      	mov	r0, r4
}
 800a3c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return output_pass_setup(cinfo);
 800a3ca:	f7ff bf78 	b.w	800a2be <output_pass_setup>
  } else if (cinfo->global_state != DSTATE_PRESCAN)
 800a3ce:	2acc      	cmp	r2, #204	; 0xcc
 800a3d0:	d0f8      	beq.n	800a3c4 <jpeg_start_decompress+0x74>
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 800a3d2:	6823      	ldr	r3, [r4, #0]
 800a3d4:	2115      	movs	r1, #21
 800a3d6:	4620      	mov	r0, r4
 800a3d8:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	4798      	blx	r3
 800a3e0:	e7f0      	b.n	800a3c4 <jpeg_start_decompress+0x74>

0800a3e2 <jpeg_read_scanlines>:
 */

GLOBAL(JDIMENSION)
jpeg_read_scanlines (j_decompress_ptr cinfo, JSAMPARRAY scanlines,
		     JDIMENSION max_lines)
{
 800a3e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a3e4:	4616      	mov	r6, r2
  JDIMENSION row_ctr;

  if (cinfo->global_state != DSTATE_SCANNING)
 800a3e6:	6942      	ldr	r2, [r0, #20]
{
 800a3e8:	4604      	mov	r4, r0
 800a3ea:	460d      	mov	r5, r1
  if (cinfo->global_state != DSTATE_SCANNING)
 800a3ec:	2acd      	cmp	r2, #205	; 0xcd
 800a3ee:	d005      	beq.n	800a3fc <jpeg_read_scanlines+0x1a>
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 800a3f0:	6803      	ldr	r3, [r0, #0]
 800a3f2:	2115      	movs	r1, #21
 800a3f4:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	4798      	blx	r3
  if (cinfo->output_scanline >= cinfo->output_height) {
 800a3fc:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800a400:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800a402:	429a      	cmp	r2, r3
 800a404:	d30a      	bcc.n	800a41c <jpeg_read_scanlines+0x3a>
    WARNMS(cinfo, JWRN_TOO_MUCH_DATA);
 800a406:	6823      	ldr	r3, [r4, #0]
 800a408:	227e      	movs	r2, #126	; 0x7e
 800a40a:	4620      	mov	r0, r4
 800a40c:	f04f 31ff 	mov.w	r1, #4294967295
 800a410:	615a      	str	r2, [r3, #20]
 800a412:	685b      	ldr	r3, [r3, #4]
 800a414:	4798      	blx	r3
    return 0;
 800a416:	2000      	movs	r0, #0
  /* Process some data */
  row_ctr = 0;
  (*cinfo->main->process_data) (cinfo, scanlines, &row_ctr, max_lines);
  cinfo->output_scanline += row_ctr;
  return row_ctr;
}
 800a418:	b003      	add	sp, #12
 800a41a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (cinfo->progress != NULL) {
 800a41c:	68a0      	ldr	r0, [r4, #8]
 800a41e:	b120      	cbz	r0, 800a42a <jpeg_read_scanlines+0x48>
    cinfo->progress->pass_limit = (long) cinfo->output_height;
 800a420:	e9c0 2301 	strd	r2, r3, [r0, #4]
    (*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
 800a424:	6803      	ldr	r3, [r0, #0]
 800a426:	4620      	mov	r0, r4
 800a428:	4798      	blx	r3
  row_ctr = 0;
 800a42a:	2300      	movs	r3, #0
  (*cinfo->main->process_data) (cinfo, scanlines, &row_ctr, max_lines);
 800a42c:	4620      	mov	r0, r4
 800a42e:	aa01      	add	r2, sp, #4
 800a430:	4629      	mov	r1, r5
  row_ctr = 0;
 800a432:	9301      	str	r3, [sp, #4]
  (*cinfo->main->process_data) (cinfo, scanlines, &row_ctr, max_lines);
 800a434:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
 800a438:	685f      	ldr	r7, [r3, #4]
 800a43a:	4633      	mov	r3, r6
 800a43c:	47b8      	blx	r7
  cinfo->output_scanline += row_ctr;
 800a43e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800a442:	9801      	ldr	r0, [sp, #4]
 800a444:	4403      	add	r3, r0
 800a446:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  return row_ctr;
 800a44a:	e7e5      	b.n	800a418 <jpeg_read_scanlines+0x36>

0800a44c <get_byte>:


LOCAL(int)
get_byte (j_decompress_ptr cinfo)
/* Read next input byte; we do not support suspension in this module. */
{
 800a44c:	b538      	push	{r3, r4, r5, lr}
  struct jpeg_source_mgr * src = cinfo->src;
 800a44e:	6984      	ldr	r4, [r0, #24]
{
 800a450:	4605      	mov	r5, r0

  if (src->bytes_in_buffer == 0)
 800a452:	6863      	ldr	r3, [r4, #4]
 800a454:	b943      	cbnz	r3, 800a468 <get_byte+0x1c>
    if (! (*src->fill_input_buffer) (cinfo))
 800a456:	68e3      	ldr	r3, [r4, #12]
 800a458:	4798      	blx	r3
 800a45a:	b928      	cbnz	r0, 800a468 <get_byte+0x1c>
      ERREXIT(cinfo, JERR_CANT_SUSPEND);
 800a45c:	682b      	ldr	r3, [r5, #0]
 800a45e:	2219      	movs	r2, #25
 800a460:	4628      	mov	r0, r5
 800a462:	615a      	str	r2, [r3, #20]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	4798      	blx	r3
  src->bytes_in_buffer--;
 800a468:	6863      	ldr	r3, [r4, #4]
 800a46a:	3b01      	subs	r3, #1
 800a46c:	6063      	str	r3, [r4, #4]
  return GETJOCTET(*src->next_input_byte++);
 800a46e:	6823      	ldr	r3, [r4, #0]
 800a470:	1c5a      	adds	r2, r3, #1
 800a472:	6022      	str	r2, [r4, #0]
}
 800a474:	7818      	ldrb	r0, [r3, #0]
 800a476:	bd38      	pop	{r3, r4, r5, pc}

0800a478 <arith_decode>:
 * derived from Markus Kuhn's JBIG implementation.
 */

LOCAL(int)
arith_decode (j_decompress_ptr cinfo, unsigned char *st)
{
 800a478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a47c:	4680      	mov	r8, r0
 800a47e:	460e      	mov	r6, r1
  register arith_entropy_ptr e = (arith_entropy_ptr) cinfo->entropy;
 800a480:	f8d0 41d0 	ldr.w	r4, [r0, #464]	; 0x1d0
      e->c = (e->c << 8) | data; /* insert data into C register */
      if ((e->ct += 8) < 0)	 /* update bit shift counter */
	/* Need more initial bytes */
	if (++e->ct == 0)
	  /* Got 2 initial bytes -> re-init A and exit loop */
	  e->a = 0x8000L; /* => e->a = 0x10000L after loop exit */
 800a484:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    if (--e->ct < 0) {
 800a488:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
  while (e->a < 0x8000L) {
 800a48c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800a490:	db20      	blt.n	800a4d4 <arith_decode+0x5c>
  }

  /* Fetch values from our compact representation of Table D.3(D.2):
   * Qe values and probability estimation state machine
   */
  sv = *st;
 800a492:	7830      	ldrb	r0, [r6, #0]
  qe = jpeg_aritab[sv & 0x7F];	/* => Qe_Value */
 800a494:	4b2e      	ldr	r3, [pc, #184]	; (800a550 <arith_decode+0xd8>)
 800a496:	f000 057f 	and.w	r5, r0, #127	; 0x7f
 800a49a:	f853 7025 	ldr.w	r7, [r3, r5, lsl #2]

  /* Decode & estimation procedures per sections D.2.4 & D.2.5 */
  temp = e->a - qe;
  e->a = temp;
  temp <<= e->ct;
  if (e->c >= temp) {
 800a49e:	68a5      	ldr	r5, [r4, #8]
  temp = e->a - qe;
 800a4a0:	eba2 4227 	sub.w	r2, r2, r7, asr #16
  nl = qe & 0xFF; qe >>= 8;	/* Next_Index_LPS + Switch_MPS */
 800a4a4:	ea4f 2e27 	mov.w	lr, r7, asr #8
  temp <<= e->ct;
 800a4a8:	fa02 f101 	lsl.w	r1, r2, r1
  nm = qe & 0xFF; qe >>= 8;	/* Next_Index_MPS */
 800a4ac:	ea4f 4c27 	mov.w	ip, r7, asr #16
  e->a = temp;
 800a4b0:	60e2      	str	r2, [r4, #12]
  if (e->c >= temp) {
 800a4b2:	428d      	cmp	r5, r1
 800a4b4:	db3c      	blt.n	800a530 <arith_decode+0xb8>
    e->c -= temp;
 800a4b6:	1a69      	subs	r1, r5, r1
    /* Conditional LPS (less probable symbol) exchange */
    if (e->a < qe) {
 800a4b8:	4594      	cmp	ip, r2
      e->a = qe;
      *st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
 800a4ba:	f020 057f 	bic.w	r5, r0, #127	; 0x7f
      e->a = qe;
 800a4be:	f8c4 c00c 	str.w	ip, [r4, #12]
    e->c -= temp;
 800a4c2:	60a1      	str	r1, [r4, #8]
      *st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
 800a4c4:	b26d      	sxtb	r5, r5
    if (e->a < qe) {
 800a4c6:	dd2e      	ble.n	800a526 <arith_decode+0xae>
      *st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
 800a4c8:	ea85 050e 	eor.w	r5, r5, lr
 800a4cc:	7035      	strb	r5, [r6, #0]
      *st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
    }
  }

  return sv >> 7;
}
 800a4ce:	09c0      	lsrs	r0, r0, #7
 800a4d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (--e->ct < 0) {
 800a4d4:	3901      	subs	r1, #1
 800a4d6:	2900      	cmp	r1, #0
 800a4d8:	6121      	str	r1, [r4, #16]
 800a4da:	da1a      	bge.n	800a512 <arith_decode+0x9a>
      if (cinfo->unread_marker)
 800a4dc:	f8d8 31b4 	ldr.w	r3, [r8, #436]	; 0x1b4
 800a4e0:	b96b      	cbnz	r3, 800a4fe <arith_decode+0x86>
	data = get_byte(cinfo);	/* read next input byte */
 800a4e2:	4640      	mov	r0, r8
 800a4e4:	f7ff ffb2 	bl	800a44c <get_byte>
	if (data == 0xFF) {	/* zero stuff or marker code */
 800a4e8:	28ff      	cmp	r0, #255	; 0xff
	data = get_byte(cinfo);	/* read next input byte */
 800a4ea:	4605      	mov	r5, r0
	if (data == 0xFF) {	/* zero stuff or marker code */
 800a4ec:	d108      	bne.n	800a500 <arith_decode+0x88>
	  do data = get_byte(cinfo);
 800a4ee:	4640      	mov	r0, r8
 800a4f0:	f7ff ffac 	bl	800a44c <get_byte>
	  while (data == 0xFF);	/* swallow extra 0xFF bytes */
 800a4f4:	28ff      	cmp	r0, #255	; 0xff
 800a4f6:	d0fa      	beq.n	800a4ee <arith_decode+0x76>
	  if (data == 0)
 800a4f8:	b110      	cbz	r0, 800a500 <arith_decode+0x88>
	    cinfo->unread_marker = data;
 800a4fa:	f8c8 01b4 	str.w	r0, [r8, #436]	; 0x1b4
	data = 0;		/* stuff zero data */
 800a4fe:	2500      	movs	r5, #0
      e->c = (e->c << 8) | data; /* insert data into C register */
 800a500:	68a0      	ldr	r0, [r4, #8]
      if ((e->ct += 8) < 0)	 /* update bit shift counter */
 800a502:	6923      	ldr	r3, [r4, #16]
      e->c = (e->c << 8) | data; /* insert data into C register */
 800a504:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
      if ((e->ct += 8) < 0)	 /* update bit shift counter */
 800a508:	f113 0208 	adds.w	r2, r3, #8
      e->c = (e->c << 8) | data; /* insert data into C register */
 800a50c:	60a5      	str	r5, [r4, #8]
      if ((e->ct += 8) < 0)	 /* update bit shift counter */
 800a50e:	d404      	bmi.n	800a51a <arith_decode+0xa2>
 800a510:	6122      	str	r2, [r4, #16]
    e->a <<= 1;
 800a512:	68e3      	ldr	r3, [r4, #12]
 800a514:	005b      	lsls	r3, r3, #1
 800a516:	60e3      	str	r3, [r4, #12]
 800a518:	e7b6      	b.n	800a488 <arith_decode+0x10>
	if (++e->ct == 0)
 800a51a:	3309      	adds	r3, #9
 800a51c:	6123      	str	r3, [r4, #16]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d1f7      	bne.n	800a512 <arith_decode+0x9a>
	  e->a = 0x8000L; /* => e->a = 0x10000L after loop exit */
 800a522:	60e7      	str	r7, [r4, #12]
 800a524:	e7f5      	b.n	800a512 <arith_decode+0x9a>
      *st = (sv & 0x80) ^ nl;	/* Estimate_after_LPS */
 800a526:	407d      	eors	r5, r7
 800a528:	7035      	strb	r5, [r6, #0]
      sv ^= 0x80;		/* Exchange LPS/MPS */
 800a52a:	f080 0080 	eor.w	r0, r0, #128	; 0x80
 800a52e:	e7ce      	b.n	800a4ce <arith_decode+0x56>
  } else if (e->a < 0x8000L) {
 800a530:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800a534:	dacb      	bge.n	800a4ce <arith_decode+0x56>
      *st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
 800a536:	f020 037f 	bic.w	r3, r0, #127	; 0x7f
    if (e->a < qe) {
 800a53a:	4594      	cmp	ip, r2
      *st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
 800a53c:	b25b      	sxtb	r3, r3
    if (e->a < qe) {
 800a53e:	dd02      	ble.n	800a546 <arith_decode+0xce>
      *st = (sv & 0x80) ^ nl;	/* Estimate_after_LPS */
 800a540:	407b      	eors	r3, r7
 800a542:	7033      	strb	r3, [r6, #0]
 800a544:	e7f1      	b.n	800a52a <arith_decode+0xb2>
      *st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
 800a546:	ea83 030e 	eor.w	r3, r3, lr
 800a54a:	7033      	strb	r3, [r6, #0]
 800a54c:	e7bf      	b.n	800a4ce <arith_decode+0x56>
 800a54e:	bf00      	nop
 800a550:	0802d9d8 	.word	0x0802d9d8

0800a554 <start_pass>:
 * Initialize for an arithmetic-compressed scan.
 */

METHODDEF(void)
start_pass (j_decompress_ptr cinfo)
{
 800a554:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
  int ci, tbl;
  jpeg_component_info * compptr;

  if (cinfo->progressive_mode) {
 800a558:	f8d0 30e0 	ldr.w	r3, [r0, #224]	; 0xe0
 800a55c:	f500 71aa 	add.w	r1, r0, #340	; 0x154
{
 800a560:	4604      	mov	r4, r0
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 800a562:	f8d0 51d0 	ldr.w	r5, [r0, #464]	; 0x1d0
    /* Validate progressive scan parameters */
    if (cinfo->Ss == 0) {
 800a566:	f8d0 2198 	ldr.w	r2, [r0, #408]	; 0x198
 800a56a:	9101      	str	r1, [sp, #4]
  if (cinfo->progressive_mode) {
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	f000 808a 	beq.w	800a686 <start_pass+0x132>
    if (cinfo->Ss == 0) {
 800a572:	e9d0 1767 	ldrd	r1, r7, [r0, #412]	; 0x19c
 800a576:	f8d0 01a4 	ldr.w	r0, [r0, #420]	; 0x1a4
 800a57a:	b95a      	cbnz	r2, 800a594 <start_pass+0x40>
      if (cinfo->Se != 0)
 800a57c:	b1a1      	cbz	r1, 800a5a8 <start_pass+0x54>
      if (cinfo->Ah-1 != cinfo->Al)
	goto bad;
    }
    if (cinfo->Al > 13) {	/* need not check for < 0 */
      bad:
      ERREXIT4(cinfo, JERR_BAD_PROGRESSION,
 800a57e:	6823      	ldr	r3, [r4, #0]
 800a580:	2611      	movs	r6, #17
 800a582:	e9c3 1707 	strd	r1, r7, [r3, #28]
 800a586:	e9c3 6205 	strd	r6, r2, [r3, #20]
 800a58a:	6258      	str	r0, [r3, #36]	; 0x24
 800a58c:	4620      	mov	r0, r4
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	4798      	blx	r3
 800a592:	e00f      	b.n	800a5b4 <start_pass+0x60>
      if (cinfo->Se < cinfo->Ss || cinfo->Se > cinfo->lim_Se)
 800a594:	428a      	cmp	r2, r1
 800a596:	dcf2      	bgt.n	800a57e <start_pass+0x2a>
 800a598:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 800a59c:	428b      	cmp	r3, r1
 800a59e:	dbee      	blt.n	800a57e <start_pass+0x2a>
      if (cinfo->comps_in_scan != 1)
 800a5a0:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800a5a4:	2b01      	cmp	r3, #1
 800a5a6:	d1ea      	bne.n	800a57e <start_pass+0x2a>
    if (cinfo->Ah != 0) {
 800a5a8:	b117      	cbz	r7, 800a5b0 <start_pass+0x5c>
      if (cinfo->Ah-1 != cinfo->Al)
 800a5aa:	1e7b      	subs	r3, r7, #1
 800a5ac:	4283      	cmp	r3, r0
 800a5ae:	d1e6      	bne.n	800a57e <start_pass+0x2a>
    if (cinfo->Al > 13) {	/* need not check for < 0 */
 800a5b0:	280d      	cmp	r0, #13
 800a5b2:	dce4      	bgt.n	800a57e <start_pass+0x2a>
 800a5b4:	f8dd a004 	ldr.w	sl, [sp, #4]
{
 800a5b8:	f04f 0900 	mov.w	r9, #0
     */
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
      int coefi, cindex = cinfo->cur_comp_info[ci]->component_index;
      int *coef_bit_ptr = & cinfo->coef_bits[cindex][0];
      if (cinfo->Ss && coef_bit_ptr[0] < 0) /* AC without prior DC scan */
	WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, 0);
 800a5bc:	f04f 0b76 	mov.w	fp, #118	; 0x76
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800a5c0:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
      if (cinfo->Ss && coef_bit_ptr[0] < 0) /* AC without prior DC scan */
 800a5c4:	f8d4 2198 	ldr.w	r2, [r4, #408]	; 0x198
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800a5c8:	454b      	cmp	r3, r9
 800a5ca:	dc1d      	bgt.n	800a608 <start_pass+0xb4>
	  WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, coefi);
	coef_bit_ptr[coefi] = cinfo->Al;
      }
    }
    /* Select MCU decoding routine */
    if (cinfo->Ah == 0) {
 800a5cc:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d153      	bne.n	800a67c <start_pass+0x128>
      if (cinfo->Ss == 0)
 800a5d4:	2a00      	cmp	r2, #0
 800a5d6:	d14f      	bne.n	800a678 <start_pass+0x124>
	entropy->pub.decode_mcu = decode_mcu_DC_first;
 800a5d8:	4b63      	ldr	r3, [pc, #396]	; (800a768 <start_pass+0x214>)
{
 800a5da:	f04f 0800 	mov.w	r8, #0
 800a5de:	f105 0914 	add.w	r9, r5, #20
 800a5e2:	9e01      	ldr	r6, [sp, #4]
      if (tbl < 0 || tbl >= NUM_ARITH_TBLS)
	ERREXIT1(cinfo, JERR_NO_ARITH_TABLE, tbl);
      if (entropy->ac_stats[tbl] == NULL)
	entropy->ac_stats[tbl] = (unsigned char *) (*cinfo->mem->alloc_small)
	  ((j_common_ptr) cinfo, JPOOL_IMAGE, AC_STAT_BINS);
      MEMZERO(entropy->ac_stats[tbl], AC_STAT_BINS);
 800a5e4:	46c2      	mov	sl, r8
    entropy->pub.decode_mcu = decode_mcu;
 800a5e6:	606b      	str	r3, [r5, #4]
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800a5e8:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800a5ec:	4543      	cmp	r3, r8
 800a5ee:	dc63      	bgt.n	800a6b8 <start_pass+0x164>
    }
  }

  /* Initialize arithmetic decoding variables */
  entropy->c = 0;
 800a5f0:	2300      	movs	r3, #0
  entropy->a = 0;
 800a5f2:	e9c5 3302 	strd	r3, r3, [r5, #8]
  entropy->ct = -16;	/* force reading 2 initial bytes to fill C */
 800a5f6:	f06f 030f 	mvn.w	r3, #15
 800a5fa:	612b      	str	r3, [r5, #16]

  /* Initialize restart counter */
  entropy->restarts_to_go = cinfo->restart_interval;
 800a5fc:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
 800a600:	636b      	str	r3, [r5, #52]	; 0x34
}
 800a602:	b003      	add	sp, #12
 800a604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      int coefi, cindex = cinfo->cur_comp_info[ci]->component_index;
 800a608:	f85a 3b04 	ldr.w	r3, [sl], #4
      int *coef_bit_ptr = & cinfo->coef_bits[cindex][0];
 800a60c:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
      int coefi, cindex = cinfo->cur_comp_info[ci]->component_index;
 800a610:	685e      	ldr	r6, [r3, #4]
      int *coef_bit_ptr = & cinfo->coef_bits[cindex][0];
 800a612:	0230      	lsls	r0, r6, #8
 800a614:	eb01 2806 	add.w	r8, r1, r6, lsl #8
      if (cinfo->Ss && coef_bit_ptr[0] < 0) /* AC without prior DC scan */
 800a618:	b162      	cbz	r2, 800a634 <start_pass+0xe0>
 800a61a:	580a      	ldr	r2, [r1, r0]
 800a61c:	2a00      	cmp	r2, #0
 800a61e:	da09      	bge.n	800a634 <start_pass+0xe0>
	WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, 0);
 800a620:	6822      	ldr	r2, [r4, #0]
 800a622:	2300      	movs	r3, #0
 800a624:	f04f 31ff 	mov.w	r1, #4294967295
 800a628:	4620      	mov	r0, r4
 800a62a:	61d3      	str	r3, [r2, #28]
 800a62c:	e9c2 b605 	strd	fp, r6, [r2, #20]
 800a630:	6852      	ldr	r2, [r2, #4]
 800a632:	4790      	blx	r2
      for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
 800a634:	f8d4 7198 	ldr.w	r7, [r4, #408]	; 0x198
 800a638:	eb08 0887 	add.w	r8, r8, r7, lsl #2
 800a63c:	f8d4 219c 	ldr.w	r2, [r4, #412]	; 0x19c
 800a640:	42ba      	cmp	r2, r7
 800a642:	da02      	bge.n	800a64a <start_pass+0xf6>
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800a644:	f109 0901 	add.w	r9, r9, #1
 800a648:	e7ba      	b.n	800a5c0 <start_pass+0x6c>
	int expected = (coef_bit_ptr[coefi] < 0) ? 0 : coef_bit_ptr[coefi];
 800a64a:	f8d8 2000 	ldr.w	r2, [r8]
	if (cinfo->Ah != expected)
 800a64e:	f8d4 11a0 	ldr.w	r1, [r4, #416]	; 0x1a0
	int expected = (coef_bit_ptr[coefi] < 0) ? 0 : coef_bit_ptr[coefi];
 800a652:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
	if (cinfo->Ah != expected)
 800a656:	4291      	cmp	r1, r2
 800a658:	d008      	beq.n	800a66c <start_pass+0x118>
	  WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, coefi);
 800a65a:	6822      	ldr	r2, [r4, #0]
 800a65c:	f04f 31ff 	mov.w	r1, #4294967295
 800a660:	4620      	mov	r0, r4
 800a662:	61d7      	str	r7, [r2, #28]
 800a664:	e9c2 b605 	strd	fp, r6, [r2, #20]
 800a668:	6852      	ldr	r2, [r2, #4]
 800a66a:	4790      	blx	r2
	coef_bit_ptr[coefi] = cinfo->Al;
 800a66c:	f8d4 21a4 	ldr.w	r2, [r4, #420]	; 0x1a4
      for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
 800a670:	3701      	adds	r7, #1
	coef_bit_ptr[coefi] = cinfo->Al;
 800a672:	f848 2b04 	str.w	r2, [r8], #4
      for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
 800a676:	e7e1      	b.n	800a63c <start_pass+0xe8>
	entropy->pub.decode_mcu = decode_mcu_AC_first;
 800a678:	4b3c      	ldr	r3, [pc, #240]	; (800a76c <start_pass+0x218>)
 800a67a:	e7ae      	b.n	800a5da <start_pass+0x86>
      if (cinfo->Ss == 0)
 800a67c:	b90a      	cbnz	r2, 800a682 <start_pass+0x12e>
	entropy->pub.decode_mcu = decode_mcu_DC_refine;
 800a67e:	4b3c      	ldr	r3, [pc, #240]	; (800a770 <start_pass+0x21c>)
 800a680:	e7ab      	b.n	800a5da <start_pass+0x86>
	entropy->pub.decode_mcu = decode_mcu_AC_refine;
 800a682:	4b3c      	ldr	r3, [pc, #240]	; (800a774 <start_pass+0x220>)
 800a684:	e7a9      	b.n	800a5da <start_pass+0x86>
    if (cinfo->Ss != 0 || cinfo->Ah != 0 || cinfo->Al != 0 ||
 800a686:	b96a      	cbnz	r2, 800a6a4 <start_pass+0x150>
 800a688:	f8d0 31a0 	ldr.w	r3, [r0, #416]	; 0x1a0
 800a68c:	b953      	cbnz	r3, 800a6a4 <start_pass+0x150>
 800a68e:	f8d0 31a4 	ldr.w	r3, [r0, #420]	; 0x1a4
 800a692:	b93b      	cbnz	r3, 800a6a4 <start_pass+0x150>
	(cinfo->Se < DCTSIZE2 && cinfo->Se != cinfo->lim_Se))
 800a694:	f8d0 319c 	ldr.w	r3, [r0, #412]	; 0x19c
    if (cinfo->Ss != 0 || cinfo->Ah != 0 || cinfo->Al != 0 ||
 800a698:	2b3f      	cmp	r3, #63	; 0x3f
 800a69a:	dc0b      	bgt.n	800a6b4 <start_pass+0x160>
	(cinfo->Se < DCTSIZE2 && cinfo->Se != cinfo->lim_Se))
 800a69c:	f8d0 21b0 	ldr.w	r2, [r0, #432]	; 0x1b0
 800a6a0:	4293      	cmp	r3, r2
 800a6a2:	d007      	beq.n	800a6b4 <start_pass+0x160>
      WARNMS(cinfo, JWRN_NOT_SEQUENTIAL);
 800a6a4:	6823      	ldr	r3, [r4, #0]
 800a6a6:	227d      	movs	r2, #125	; 0x7d
 800a6a8:	f04f 31ff 	mov.w	r1, #4294967295
 800a6ac:	4620      	mov	r0, r4
 800a6ae:	615a      	str	r2, [r3, #20]
 800a6b0:	685b      	ldr	r3, [r3, #4]
 800a6b2:	4798      	blx	r3
    entropy->pub.decode_mcu = decode_mcu;
 800a6b4:	4b30      	ldr	r3, [pc, #192]	; (800a778 <start_pass+0x224>)
 800a6b6:	e790      	b.n	800a5da <start_pass+0x86>
    if (! cinfo->progressive_mode || (cinfo->Ss == 0 && cinfo->Ah == 0)) {
 800a6b8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    compptr = cinfo->cur_comp_info[ci];
 800a6bc:	f856 bb04 	ldr.w	fp, [r6], #4
    if (! cinfo->progressive_mode || (cinfo->Ss == 0 && cinfo->Ah == 0)) {
 800a6c0:	b133      	cbz	r3, 800a6d0 <start_pass+0x17c>
 800a6c2:	f8d4 3198 	ldr.w	r3, [r4, #408]	; 0x198
 800a6c6:	bb43      	cbnz	r3, 800a71a <start_pass+0x1c6>
 800a6c8:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d13a      	bne.n	800a746 <start_pass+0x1f2>
      tbl = compptr->dc_tbl_no;
 800a6d0:	f8db 7014 	ldr.w	r7, [fp, #20]
      if (tbl < 0 || tbl >= NUM_ARITH_TBLS)
 800a6d4:	2f0f      	cmp	r7, #15
 800a6d6:	d906      	bls.n	800a6e6 <start_pass+0x192>
	ERREXIT1(cinfo, JERR_NO_ARITH_TABLE, tbl);
 800a6d8:	6823      	ldr	r3, [r4, #0]
 800a6da:	2232      	movs	r2, #50	; 0x32
 800a6dc:	4620      	mov	r0, r4
 800a6de:	e9c3 2705 	strd	r2, r7, [r3, #20]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	4798      	blx	r3
      if (entropy->dc_stats[tbl] == NULL)
 800a6e6:	eb05 0787 	add.w	r7, r5, r7, lsl #2
 800a6ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6ec:	b933      	cbnz	r3, 800a6fc <start_pass+0x1a8>
	entropy->dc_stats[tbl] = (unsigned char *) (*cinfo->mem->alloc_small)
 800a6ee:	6863      	ldr	r3, [r4, #4]
 800a6f0:	2240      	movs	r2, #64	; 0x40
 800a6f2:	2101      	movs	r1, #1
 800a6f4:	4620      	mov	r0, r4
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	4798      	blx	r3
 800a6fa:	63b8      	str	r0, [r7, #56]	; 0x38
      MEMZERO(entropy->dc_stats[tbl], DC_STAT_BINS);
 800a6fc:	2240      	movs	r2, #64	; 0x40
 800a6fe:	2100      	movs	r1, #0
 800a700:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a702:	f01f fd87 	bl	802a214 <memset>
      entropy->last_dc_val[ci] = 0;
 800a706:	f8c9 a000 	str.w	sl, [r9]
      entropy->dc_context[ci] = 0;
 800a70a:	f8c9 a010 	str.w	sl, [r9, #16]
    if ((! cinfo->progressive_mode && cinfo->lim_Se) ||
 800a70e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800a712:	b9eb      	cbnz	r3, 800a750 <start_pass+0x1fc>
 800a714:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 800a718:	b1ab      	cbz	r3, 800a746 <start_pass+0x1f2>
      tbl = compptr->ac_tbl_no;
 800a71a:	f8db 7018 	ldr.w	r7, [fp, #24]
      if (tbl < 0 || tbl >= NUM_ARITH_TBLS)
 800a71e:	2f0f      	cmp	r7, #15
 800a720:	d819      	bhi.n	800a756 <start_pass+0x202>
      if (entropy->ac_stats[tbl] == NULL)
 800a722:	eb05 0787 	add.w	r7, r5, r7, lsl #2
 800a726:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a728:	b93b      	cbnz	r3, 800a73a <start_pass+0x1e6>
	entropy->ac_stats[tbl] = (unsigned char *) (*cinfo->mem->alloc_small)
 800a72a:	6863      	ldr	r3, [r4, #4]
 800a72c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a730:	2101      	movs	r1, #1
 800a732:	4620      	mov	r0, r4
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	4798      	blx	r3
 800a738:	67b8      	str	r0, [r7, #120]	; 0x78
      MEMZERO(entropy->ac_stats[tbl], AC_STAT_BINS);
 800a73a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a73e:	2100      	movs	r1, #0
 800a740:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800a742:	f01f fd67 	bl	802a214 <memset>
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800a746:	f108 0801 	add.w	r8, r8, #1
 800a74a:	f109 0904 	add.w	r9, r9, #4
 800a74e:	e74b      	b.n	800a5e8 <start_pass+0x94>
	(cinfo->progressive_mode && cinfo->Ss)) {
 800a750:	f8d4 3198 	ldr.w	r3, [r4, #408]	; 0x198
 800a754:	e7e0      	b.n	800a718 <start_pass+0x1c4>
	ERREXIT1(cinfo, JERR_NO_ARITH_TABLE, tbl);
 800a756:	6823      	ldr	r3, [r4, #0]
 800a758:	2232      	movs	r2, #50	; 0x32
 800a75a:	4620      	mov	r0, r4
 800a75c:	e9c3 2705 	strd	r2, r7, [r3, #20]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	4798      	blx	r3
 800a764:	e7dd      	b.n	800a722 <start_pass+0x1ce>
 800a766:	bf00      	nop
 800a768:	0800ad1f 	.word	0x0800ad1f
 800a76c:	0800abeb 	.word	0x0800abeb
 800a770:	0800ab99 	.word	0x0800ab99
 800a774:	0800aa73 	.word	0x0800aa73
 800a778:	0800a81f 	.word	0x0800a81f

0800a77c <process_restart>:
{
 800a77c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (! (*cinfo->marker->read_restart_marker) (cinfo))
 800a780:	e9d0 3573 	ldrd	r3, r5, [r0, #460]	; 0x1cc
{
 800a784:	4604      	mov	r4, r0
  if (! (*cinfo->marker->read_restart_marker) (cinfo))
 800a786:	689b      	ldr	r3, [r3, #8]
 800a788:	4798      	blx	r3
 800a78a:	b928      	cbnz	r0, 800a798 <process_restart+0x1c>
    ERREXIT(cinfo, JERR_CANT_SUSPEND);
 800a78c:	6823      	ldr	r3, [r4, #0]
 800a78e:	2219      	movs	r2, #25
 800a790:	4620      	mov	r0, r4
 800a792:	615a      	str	r2, [r3, #20]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	4798      	blx	r3
{
 800a798:	2600      	movs	r6, #0
 800a79a:	f105 0714 	add.w	r7, r5, #20
 800a79e:	f504 78aa 	add.w	r8, r4, #340	; 0x154
      MEMZERO(entropy->ac_stats[compptr->ac_tbl_no], AC_STAT_BINS);
 800a7a2:	46b1      	mov	r9, r6
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800a7a4:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800a7a8:	42b3      	cmp	r3, r6
 800a7aa:	dc0a      	bgt.n	800a7c2 <process_restart+0x46>
  entropy->c = 0;
 800a7ac:	2300      	movs	r3, #0
  entropy->a = 0;
 800a7ae:	e9c5 3302 	strd	r3, r3, [r5, #8]
  entropy->ct = -16;	/* force reading 2 initial bytes to fill C */
 800a7b2:	f06f 030f 	mvn.w	r3, #15
 800a7b6:	612b      	str	r3, [r5, #16]
  entropy->restarts_to_go = cinfo->restart_interval;
 800a7b8:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
 800a7bc:	636b      	str	r3, [r5, #52]	; 0x34
}
 800a7be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (! cinfo->progressive_mode || (cinfo->Ss == 0 && cinfo->Ah == 0)) {
 800a7c2:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    compptr = cinfo->cur_comp_info[ci];
 800a7c6:	f858 ab04 	ldr.w	sl, [r8], #4
    if (! cinfo->progressive_mode || (cinfo->Ss == 0 && cinfo->Ah == 0)) {
 800a7ca:	b12b      	cbz	r3, 800a7d8 <process_restart+0x5c>
 800a7cc:	f8d4 3198 	ldr.w	r3, [r4, #408]	; 0x198
 800a7d0:	b9ab      	cbnz	r3, 800a7fe <process_restart+0x82>
 800a7d2:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
 800a7d6:	b9e3      	cbnz	r3, 800a812 <process_restart+0x96>
      MEMZERO(entropy->dc_stats[compptr->dc_tbl_no], DC_STAT_BINS);
 800a7d8:	f8da 3014 	ldr.w	r3, [sl, #20]
 800a7dc:	2240      	movs	r2, #64	; 0x40
 800a7de:	2100      	movs	r1, #0
 800a7e0:	330e      	adds	r3, #14
 800a7e2:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 800a7e6:	f01f fd15 	bl	802a214 <memset>
      entropy->last_dc_val[ci] = 0;
 800a7ea:	f8c7 9000 	str.w	r9, [r7]
      entropy->dc_context[ci] = 0;
 800a7ee:	f8c7 9010 	str.w	r9, [r7, #16]
    if ((! cinfo->progressive_mode && cinfo->lim_Se) ||
 800a7f2:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800a7f6:	b97b      	cbnz	r3, 800a818 <process_restart+0x9c>
 800a7f8:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 800a7fc:	b14b      	cbz	r3, 800a812 <process_restart+0x96>
      MEMZERO(entropy->ac_stats[compptr->ac_tbl_no], AC_STAT_BINS);
 800a7fe:	f8da 3018 	ldr.w	r3, [sl, #24]
 800a802:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a806:	2100      	movs	r1, #0
 800a808:	331e      	adds	r3, #30
 800a80a:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 800a80e:	f01f fd01 	bl	802a214 <memset>
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800a812:	3601      	adds	r6, #1
 800a814:	3704      	adds	r7, #4
 800a816:	e7c5      	b.n	800a7a4 <process_restart+0x28>
	(cinfo->progressive_mode && cinfo->Ss)) {
 800a818:	f8d4 3198 	ldr.w	r3, [r4, #408]	; 0x198
 800a81c:	e7ee      	b.n	800a7fc <process_restart+0x80>

0800a81e <decode_mcu>:
{
 800a81e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (cinfo->restart_interval) {
 800a822:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{
 800a826:	4604      	mov	r4, r0
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 800a828:	f8d0 51d0 	ldr.w	r5, [r0, #464]	; 0x1d0
{
 800a82c:	ed2d 8b02 	vpush	{d8}
 800a830:	b087      	sub	sp, #28
 800a832:	9105      	str	r1, [sp, #20]
  if (cinfo->restart_interval) {
 800a834:	b133      	cbz	r3, 800a844 <decode_mcu+0x26>
    if (entropy->restarts_to_go == 0)
 800a836:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800a838:	b90b      	cbnz	r3, 800a83e <decode_mcu+0x20>
      process_restart(cinfo);
 800a83a:	f7ff ff9f 	bl	800a77c <process_restart>
    entropy->restarts_to_go--;
 800a83e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800a840:	3b01      	subs	r3, #1
 800a842:	636b      	str	r3, [r5, #52]	; 0x34
  if (entropy->ct == -1) return TRUE;	/* if error do nothing */
 800a844:	692b      	ldr	r3, [r5, #16]
 800a846:	3301      	adds	r3, #1
 800a848:	f000 809f 	beq.w	800a98a <decode_mcu+0x16c>
  natural_order = cinfo->natural_order;
 800a84c:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800a850:	2700      	movs	r7, #0
  natural_order = cinfo->natural_order;
 800a852:	9304      	str	r3, [sp, #16]
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800a854:	f504 73b8 	add.w	r3, r4, #368	; 0x170
 800a858:	9303      	str	r3, [sp, #12]
      sign = arith_decode(cinfo, entropy->fixed_bin);
 800a85a:	f105 03b8 	add.w	r3, r5, #184	; 0xb8
 800a85e:	ee08 3a10 	vmov	s16, r3
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800a862:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
 800a866:	42bb      	cmp	r3, r7
 800a868:	f340 808f 	ble.w	800a98a <decode_mcu+0x16c>
    block = MCU_data[blkn];
 800a86c:	9b05      	ldr	r3, [sp, #20]
    if (arith_decode(cinfo, st) == 0)
 800a86e:	4620      	mov	r0, r4
    ci = cinfo->MCU_membership[blkn];
 800a870:	9a03      	ldr	r2, [sp, #12]
    block = MCU_data[blkn];
 800a872:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
 800a876:	9300      	str	r3, [sp, #0]
    ci = cinfo->MCU_membership[blkn];
 800a878:	f852 3b04 	ldr.w	r3, [r2], #4
 800a87c:	9203      	str	r2, [sp, #12]
    compptr = cinfo->cur_comp_info[ci];
 800a87e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800a882:	eb05 0b83 	add.w	fp, r5, r3, lsl #2
 800a886:	f8d2 2154 	ldr.w	r2, [r2, #340]	; 0x154
    st = entropy->dc_stats[tbl] + entropy->dc_context[ci];
 800a88a:	f8db 1024 	ldr.w	r1, [fp, #36]	; 0x24
    compptr = cinfo->cur_comp_info[ci];
 800a88e:	9201      	str	r2, [sp, #4]
    tbl = compptr->dc_tbl_no;
 800a890:	6952      	ldr	r2, [r2, #20]
 800a892:	eb05 0982 	add.w	r9, r5, r2, lsl #2
 800a896:	9202      	str	r2, [sp, #8]
    st = entropy->dc_stats[tbl] + entropy->dc_context[ci];
 800a898:	f8d9 6038 	ldr.w	r6, [r9, #56]	; 0x38
 800a89c:	440e      	add	r6, r1
    if (arith_decode(cinfo, st) == 0)
 800a89e:	4631      	mov	r1, r6
 800a8a0:	f7ff fdea 	bl	800a478 <arith_decode>
 800a8a4:	bb68      	cbnz	r0, 800a902 <decode_mcu+0xe4>
      entropy->dc_context[ci] = 0;
 800a8a6:	f8cb 0024 	str.w	r0, [fp, #36]	; 0x24
    (*block)[0] = (JCOEF) entropy->last_dc_val[ci];
 800a8aa:	f8db 3014 	ldr.w	r3, [fp, #20]
 800a8ae:	9a00      	ldr	r2, [sp, #0]
 800a8b0:	8013      	strh	r3, [r2, #0]
    if (cinfo->lim_Se == 0) continue;
 800a8b2:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	f000 80c4 	beq.w	800aa44 <decode_mcu+0x226>
    tbl = compptr->ac_tbl_no;
 800a8bc:	9b01      	ldr	r3, [sp, #4]
    k = 0;
 800a8be:	2600      	movs	r6, #0
    tbl = compptr->ac_tbl_no;
 800a8c0:	699b      	ldr	r3, [r3, #24]
    k = 0;
 800a8c2:	eb05 0b83 	add.w	fp, r5, r3, lsl #2
	       (k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
 800a8c6:	eb04 0a03 	add.w	sl, r4, r3
      st = entropy->ac_stats[tbl] + 3 * k;
 800a8ca:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 800a8ce:	f8db 3078 	ldr.w	r3, [fp, #120]	; 0x78
      if (arith_decode(cinfo, st)) break;	/* EOB flag */
 800a8d2:	4620      	mov	r0, r4
      st = entropy->ac_stats[tbl] + 3 * k;
 800a8d4:	eb03 0901 	add.w	r9, r3, r1
      if (arith_decode(cinfo, st)) break;	/* EOB flag */
 800a8d8:	4649      	mov	r1, r9
 800a8da:	f7ff fdcd 	bl	800a478 <arith_decode>
 800a8de:	2800      	cmp	r0, #0
 800a8e0:	f040 80b0 	bne.w	800aa44 <decode_mcu+0x226>
	if (arith_decode(cinfo, st + 1)) break;
 800a8e4:	f109 0101 	add.w	r1, r9, #1
 800a8e8:	4620      	mov	r0, r4
	k++;
 800a8ea:	3601      	adds	r6, #1
	if (arith_decode(cinfo, st + 1)) break;
 800a8ec:	f7ff fdc4 	bl	800a478 <arith_decode>
 800a8f0:	2800      	cmp	r0, #0
 800a8f2:	d16e      	bne.n	800a9d2 <decode_mcu+0x1b4>
	if (k >= cinfo->lim_Se) {
 800a8f4:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
	st += 3;
 800a8f8:	f109 0903 	add.w	r9, r9, #3
	if (k >= cinfo->lim_Se) {
 800a8fc:	42b2      	cmp	r2, r6
 800a8fe:	dcf1      	bgt.n	800a8e4 <decode_mcu+0xc6>
 800a900:	e038      	b.n	800a974 <decode_mcu+0x156>
      sign = arith_decode(cinfo, st + 1);
 800a902:	1c71      	adds	r1, r6, #1
 800a904:	4620      	mov	r0, r4
 800a906:	f7ff fdb7 	bl	800a478 <arith_decode>
      st += 2; st += sign;
 800a90a:	1c81      	adds	r1, r0, #2
      sign = arith_decode(cinfo, st + 1);
 800a90c:	4680      	mov	r8, r0
      if ((m = arith_decode(cinfo, st)) != 0) {
 800a90e:	4620      	mov	r0, r4
      st += 2; st += sign;
 800a910:	eb06 0a01 	add.w	sl, r6, r1
      if ((m = arith_decode(cinfo, st)) != 0) {
 800a914:	4651      	mov	r1, sl
 800a916:	f7ff fdaf 	bl	800a478 <arith_decode>
 800a91a:	4606      	mov	r6, r0
 800a91c:	b140      	cbz	r0, 800a930 <decode_mcu+0x112>
	st = entropy->dc_stats[tbl] + 20;	/* Table F.4: X1 = 20 */
 800a91e:	f8d9 1038 	ldr.w	r1, [r9, #56]	; 0x38
 800a922:	f101 0a14 	add.w	sl, r1, #20
	while (arith_decode(cinfo, st)) {
 800a926:	4651      	mov	r1, sl
 800a928:	4620      	mov	r0, r4
 800a92a:	f7ff fda5 	bl	800a478 <arith_decode>
 800a92e:	b9e8      	cbnz	r0, 800a96c <decode_mcu+0x14e>
      if (m < (int) ((1L << cinfo->arith_dc_L[tbl]) >> 1))
 800a930:	9b02      	ldr	r3, [sp, #8]
 800a932:	4423      	add	r3, r4
 800a934:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
 800a938:	4699      	mov	r9, r3
 800a93a:	2301      	movs	r3, #1
 800a93c:	fa03 f202 	lsl.w	r2, r3, r2
 800a940:	ebb6 0f62 	cmp.w	r6, r2, asr #1
 800a944:	da2a      	bge.n	800a99c <decode_mcu+0x17e>
	entropy->dc_context[ci] = 0;		   /* zero diff category */
 800a946:	2200      	movs	r2, #0
      st += 14;
 800a948:	f10a 010e 	add.w	r1, sl, #14
      while (m >>= 1)
 800a94c:	46b1      	mov	r9, r6
	entropy->dc_context[ci] = 4 + (sign * 4);  /* small diff category */
 800a94e:	f8cb 2024 	str.w	r2, [fp, #36]	; 0x24
      while (m >>= 1)
 800a952:	1076      	asrs	r6, r6, #1
 800a954:	d130      	bne.n	800a9b8 <decode_mcu+0x19a>
      v += 1; if (sign) v = -v;
 800a956:	f1b8 0f00 	cmp.w	r8, #0
 800a95a:	d137      	bne.n	800a9cc <decode_mcu+0x1ae>
 800a95c:	f109 0901 	add.w	r9, r9, #1
      entropy->last_dc_val[ci] += v;
 800a960:	f8db 2014 	ldr.w	r2, [fp, #20]
 800a964:	444a      	add	r2, r9
 800a966:	f8cb 2014 	str.w	r2, [fp, #20]
 800a96a:	e79e      	b.n	800a8aa <decode_mcu+0x8c>
	  if ((m <<= 1) == 0x8000) {
 800a96c:	0076      	lsls	r6, r6, #1
 800a96e:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
 800a972:	d110      	bne.n	800a996 <decode_mcu+0x178>
	      WARNMS(cinfo, JWRN_ARITH_BAD_CODE);
 800a974:	6823      	ldr	r3, [r4, #0]
 800a976:	2275      	movs	r2, #117	; 0x75
 800a978:	f04f 31ff 	mov.w	r1, #4294967295
 800a97c:	4620      	mov	r0, r4
 800a97e:	615a      	str	r2, [r3, #20]
 800a980:	685b      	ldr	r3, [r3, #4]
 800a982:	4798      	blx	r3
	      entropy->ct = -1;			/* magnitude overflow */
 800a984:	f04f 33ff 	mov.w	r3, #4294967295
 800a988:	612b      	str	r3, [r5, #16]
}
 800a98a:	2001      	movs	r0, #1
 800a98c:	b007      	add	sp, #28
 800a98e:	ecbd 8b02 	vpop	{d8}
 800a992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  st += 1;
 800a996:	f10a 0a01 	add.w	sl, sl, #1
 800a99a:	e7c4      	b.n	800a926 <decode_mcu+0x108>
      else if (m > (int) ((1L << cinfo->arith_dc_U[tbl]) >> 1))
 800a99c:	f899 20f8 	ldrb.w	r2, [r9, #248]	; 0xf8
 800a9a0:	2301      	movs	r3, #1
 800a9a2:	fa03 f202 	lsl.w	r2, r3, r2
 800a9a6:	ebb6 0f62 	cmp.w	r6, r2, asr #1
	entropy->dc_context[ci] = 12 + (sign * 4); /* large diff category */
 800a9aa:	bfcc      	ite	gt
 800a9ac:	f108 0203 	addgt.w	r2, r8, #3
	entropy->dc_context[ci] = 4 + (sign * 4);  /* small diff category */
 800a9b0:	f108 0201 	addle.w	r2, r8, #1
 800a9b4:	0092      	lsls	r2, r2, #2
 800a9b6:	e7c7      	b.n	800a948 <decode_mcu+0x12a>
	if (arith_decode(cinfo, st)) v |= m;
 800a9b8:	4620      	mov	r0, r4
 800a9ba:	9102      	str	r1, [sp, #8]
 800a9bc:	f7ff fd5c 	bl	800a478 <arith_decode>
 800a9c0:	9902      	ldr	r1, [sp, #8]
 800a9c2:	2800      	cmp	r0, #0
 800a9c4:	d0c5      	beq.n	800a952 <decode_mcu+0x134>
 800a9c6:	ea49 0906 	orr.w	r9, r9, r6
 800a9ca:	e7c2      	b.n	800a952 <decode_mcu+0x134>
      v += 1; if (sign) v = -v;
 800a9cc:	ea6f 0909 	mvn.w	r9, r9
 800a9d0:	e7c6      	b.n	800a960 <decode_mcu+0x142>
      st += 2;
 800a9d2:	f109 0902 	add.w	r9, r9, #2
      sign = arith_decode(cinfo, entropy->fixed_bin);
 800a9d6:	ee18 1a10 	vmov	r1, s16
 800a9da:	4620      	mov	r0, r4
 800a9dc:	f7ff fd4c 	bl	800a478 <arith_decode>
      if ((m = arith_decode(cinfo, st)) != 0) {
 800a9e0:	4649      	mov	r1, r9
      sign = arith_decode(cinfo, entropy->fixed_bin);
 800a9e2:	9001      	str	r0, [sp, #4]
      if ((m = arith_decode(cinfo, st)) != 0) {
 800a9e4:	4620      	mov	r0, r4
 800a9e6:	f7ff fd47 	bl	800a478 <arith_decode>
 800a9ea:	4680      	mov	r8, r0
 800a9ec:	b1a8      	cbz	r0, 800aa1a <decode_mcu+0x1fc>
	if (arith_decode(cinfo, st)) {
 800a9ee:	4649      	mov	r1, r9
 800a9f0:	4620      	mov	r0, r4
 800a9f2:	f7ff fd41 	bl	800a478 <arith_decode>
 800a9f6:	b180      	cbz	r0, 800aa1a <decode_mcu+0x1fc>
	       (k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
 800a9f8:	f89a 1108 	ldrb.w	r1, [sl, #264]	; 0x108
	  m <<= 1;
 800a9fc:	ea4f 0848 	mov.w	r8, r8, lsl #1
	  st = entropy->ac_stats[tbl] +
 800aa00:	f8db 2078 	ldr.w	r2, [fp, #120]	; 0x78
	       (k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
 800aa04:	42b1      	cmp	r1, r6
 800aa06:	bfac      	ite	ge
 800aa08:	21bd      	movge	r1, #189	; 0xbd
 800aa0a:	21d9      	movlt	r1, #217	; 0xd9
	  st = entropy->ac_stats[tbl] +
 800aa0c:	eb02 0901 	add.w	r9, r2, r1
	  while (arith_decode(cinfo, st)) {
 800aa10:	4649      	mov	r1, r9
 800aa12:	4620      	mov	r0, r4
 800aa14:	f7ff fd30 	bl	800a478 <arith_decode>
 800aa18:	b9b0      	cbnz	r0, 800aa48 <decode_mcu+0x22a>
      st += 14;
 800aa1a:	f109 010e 	add.w	r1, r9, #14
      v = m;
 800aa1e:	46c1      	mov	r9, r8
      while (m >>= 1)
 800aa20:	ea5f 0868 	movs.w	r8, r8, asr #1
 800aa24:	d118      	bne.n	800aa58 <decode_mcu+0x23a>
      v += 1; if (sign) v = -v;
 800aa26:	9b01      	ldr	r3, [sp, #4]
 800aa28:	bb03      	cbnz	r3, 800aa6c <decode_mcu+0x24e>
 800aa2a:	f109 0201 	add.w	r2, r9, #1
      (*block)[natural_order[k]] = (JCOEF) v;
 800aa2e:	9b04      	ldr	r3, [sp, #16]
 800aa30:	9900      	ldr	r1, [sp, #0]
 800aa32:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 800aa36:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    } while (k < cinfo->lim_Se);
 800aa3a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 800aa3e:	42b3      	cmp	r3, r6
 800aa40:	f73f af43 	bgt.w	800a8ca <decode_mcu+0xac>
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800aa44:	3701      	adds	r7, #1
 800aa46:	e70c      	b.n	800a862 <decode_mcu+0x44>
	    if ((m <<= 1) == 0x8000) {
 800aa48:	ea4f 0848 	mov.w	r8, r8, lsl #1
 800aa4c:	f5b8 4f00 	cmp.w	r8, #32768	; 0x8000
 800aa50:	d090      	beq.n	800a974 <decode_mcu+0x156>
	    st += 1;
 800aa52:	f109 0901 	add.w	r9, r9, #1
 800aa56:	e7db      	b.n	800aa10 <decode_mcu+0x1f2>
	if (arith_decode(cinfo, st)) v |= m;
 800aa58:	4620      	mov	r0, r4
 800aa5a:	9102      	str	r1, [sp, #8]
 800aa5c:	f7ff fd0c 	bl	800a478 <arith_decode>
 800aa60:	9902      	ldr	r1, [sp, #8]
 800aa62:	2800      	cmp	r0, #0
 800aa64:	d0dc      	beq.n	800aa20 <decode_mcu+0x202>
 800aa66:	ea49 0908 	orr.w	r9, r9, r8
 800aa6a:	e7d9      	b.n	800aa20 <decode_mcu+0x202>
      v += 1; if (sign) v = -v;
 800aa6c:	ea6f 0209 	mvn.w	r2, r9
 800aa70:	e7dd      	b.n	800aa2e <decode_mcu+0x210>

0800aa72 <decode_mcu_AC_refine>:
  if (cinfo->restart_interval) {
 800aa72:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{
 800aa76:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa7a:	4604      	mov	r4, r0
 800aa7c:	460d      	mov	r5, r1
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 800aa7e:	f8d0 61d0 	ldr.w	r6, [r0, #464]	; 0x1d0
{
 800aa82:	ed2d 8b02 	vpush	{d8}
 800aa86:	b085      	sub	sp, #20
  if (cinfo->restart_interval) {
 800aa88:	b133      	cbz	r3, 800aa98 <decode_mcu_AC_refine+0x26>
    if (entropy->restarts_to_go == 0)
 800aa8a:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800aa8c:	b90b      	cbnz	r3, 800aa92 <decode_mcu_AC_refine+0x20>
      process_restart(cinfo);
 800aa8e:	f7ff fe75 	bl	800a77c <process_restart>
    entropy->restarts_to_go--;
 800aa92:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800aa94:	3b01      	subs	r3, #1
 800aa96:	6373      	str	r3, [r6, #52]	; 0x34
  if (entropy->ct == -1) return TRUE;	/* if error do nothing */
 800aa98:	6933      	ldr	r3, [r6, #16]
 800aa9a:	3301      	adds	r3, #1
 800aa9c:	d076      	beq.n	800ab8c <decode_mcu_AC_refine+0x11a>
  tbl = cinfo->cur_comp_info[0]->ac_tbl_no;
 800aa9e:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
  p1 = 1 << cinfo->Al;		/* 1 in the bit position being coded */
 800aaa2:	2101      	movs	r1, #1
  m1 = (-1) << cinfo->Al;	/* -1 in the bit position being coded */
 800aaa4:	f04f 38ff 	mov.w	r8, #4294967295
  natural_order = cinfo->natural_order;
 800aaa8:	f8d4 b1ac 	ldr.w	fp, [r4, #428]	; 0x1ac
  tbl = cinfo->cur_comp_info[0]->ac_tbl_no;
 800aaac:	699a      	ldr	r2, [r3, #24]
  p1 = 1 << cinfo->Al;		/* 1 in the bit position being coded */
 800aaae:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
  block = MCU_data[0];
 800aab2:	f8d5 9000 	ldr.w	r9, [r5]
  p1 = 1 << cinfo->Al;		/* 1 in the bit position being coded */
 800aab6:	4099      	lsls	r1, r3
  for (kex = cinfo->Se; kex > 0; kex--)
 800aab8:	f8d4 719c 	ldr.w	r7, [r4, #412]	; 0x19c
  m1 = (-1) << cinfo->Al;	/* -1 in the bit position being coded */
 800aabc:	fa08 f303 	lsl.w	r3, r8, r3
  p1 = 1 << cinfo->Al;		/* 1 in the bit position being coded */
 800aac0:	9101      	str	r1, [sp, #4]
  m1 = (-1) << cinfo->Al;	/* -1 in the bit position being coded */
 800aac2:	9302      	str	r3, [sp, #8]
  for (kex = cinfo->Se; kex > 0; kex--)
 800aac4:	2f00      	cmp	r7, #0
 800aac6:	dc37      	bgt.n	800ab38 <decode_mcu_AC_refine+0xc6>
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 800aac8:	f102 031e 	add.w	r3, r2, #30
  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 800aacc:	f8d4 5198 	ldr.w	r5, [r4, #408]	; 0x198
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 800aad0:	9303      	str	r3, [sp, #12]
	if (arith_decode(cinfo, entropy->fixed_bin))
 800aad2:	f106 03b8 	add.w	r3, r6, #184	; 0xb8
 800aad6:	ee08 3a10 	vmov	s16, r3
  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 800aada:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
 800aade:	42ab      	cmp	r3, r5
 800aae0:	db54      	blt.n	800ab8c <decode_mcu_AC_refine+0x11a>
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 800aae2:	1e6b      	subs	r3, r5, #1
 800aae4:	9a03      	ldr	r2, [sp, #12]
    if (k > kex)
 800aae6:	42bd      	cmp	r5, r7
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 800aae8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800aaec:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 800aaf0:	eb02 0a03 	add.w	sl, r2, r3
    if (k > kex)
 800aaf4:	dd05      	ble.n	800ab02 <decode_mcu_AC_refine+0x90>
      if (arith_decode(cinfo, st)) break;	/* EOB flag */
 800aaf6:	4651      	mov	r1, sl
 800aaf8:	4620      	mov	r0, r4
 800aafa:	f7ff fcbd 	bl	800a478 <arith_decode>
 800aafe:	2800      	cmp	r0, #0
 800ab00:	d144      	bne.n	800ab8c <decode_mcu_AC_refine+0x11a>
      thiscoef = *block + natural_order[k];
 800ab02:	f85b 1025 	ldr.w	r1, [fp, r5, lsl #2]
      st += 3; k++;
 800ab06:	3501      	adds	r5, #1
      thiscoef = *block + natural_order[k];
 800ab08:	eb09 0841 	add.w	r8, r9, r1, lsl #1
      if (*thiscoef) {				/* previously nonzero coef */
 800ab0c:	f939 1011 	ldrsh.w	r1, [r9, r1, lsl #1]
 800ab10:	b1d1      	cbz	r1, 800ab48 <decode_mcu_AC_refine+0xd6>
	if (arith_decode(cinfo, st + 2)) {
 800ab12:	f10a 0102 	add.w	r1, sl, #2
 800ab16:	4620      	mov	r0, r4
 800ab18:	f7ff fcae 	bl	800a478 <arith_decode>
 800ab1c:	2800      	cmp	r0, #0
 800ab1e:	d0dc      	beq.n	800aada <decode_mcu_AC_refine+0x68>
	  if (*thiscoef < 0)
 800ab20:	f9b8 1000 	ldrsh.w	r1, [r8]
	    *thiscoef += m1;
 800ab24:	f8b8 3000 	ldrh.w	r3, [r8]
	  if (*thiscoef < 0)
 800ab28:	2900      	cmp	r1, #0
	    *thiscoef += m1;
 800ab2a:	bfb4      	ite	lt
 800ab2c:	9a02      	ldrlt	r2, [sp, #8]
	    *thiscoef += p1;
 800ab2e:	9a01      	ldrge	r2, [sp, #4]
 800ab30:	4413      	add	r3, r2
 800ab32:	f8a8 3000 	strh.w	r3, [r8]
 800ab36:	e7d0      	b.n	800aada <decode_mcu_AC_refine+0x68>
    if ((*block)[natural_order[kex]]) break;
 800ab38:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 800ab3c:	f939 3013 	ldrsh.w	r3, [r9, r3, lsl #1]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d1c1      	bne.n	800aac8 <decode_mcu_AC_refine+0x56>
  for (kex = cinfo->Se; kex > 0; kex--)
 800ab44:	3f01      	subs	r7, #1
 800ab46:	e7bd      	b.n	800aac4 <decode_mcu_AC_refine+0x52>
      if (arith_decode(cinfo, st + 1)) {	/* newly nonzero coef */
 800ab48:	f10a 0101 	add.w	r1, sl, #1
 800ab4c:	4620      	mov	r0, r4
 800ab4e:	f7ff fc93 	bl	800a478 <arith_decode>
 800ab52:	b150      	cbz	r0, 800ab6a <decode_mcu_AC_refine+0xf8>
	if (arith_decode(cinfo, entropy->fixed_bin))
 800ab54:	ee18 1a10 	vmov	r1, s16
 800ab58:	4620      	mov	r0, r4
 800ab5a:	f7ff fc8d 	bl	800a478 <arith_decode>
	  *thiscoef = m1;
 800ab5e:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
 800ab62:	2800      	cmp	r0, #0
 800ab64:	bf18      	it	ne
 800ab66:	4613      	movne	r3, r2
 800ab68:	e7e3      	b.n	800ab32 <decode_mcu_AC_refine+0xc0>
      if (k > cinfo->Se) {
 800ab6a:	f8d4 219c 	ldr.w	r2, [r4, #412]	; 0x19c
      st += 3; k++;
 800ab6e:	f10a 0a03 	add.w	sl, sl, #3
      if (k > cinfo->Se) {
 800ab72:	42aa      	cmp	r2, r5
 800ab74:	dac5      	bge.n	800ab02 <decode_mcu_AC_refine+0x90>
	WARNMS(cinfo, JWRN_ARITH_BAD_CODE);
 800ab76:	6823      	ldr	r3, [r4, #0]
 800ab78:	2275      	movs	r2, #117	; 0x75
 800ab7a:	f04f 31ff 	mov.w	r1, #4294967295
 800ab7e:	4620      	mov	r0, r4
 800ab80:	615a      	str	r2, [r3, #20]
 800ab82:	685b      	ldr	r3, [r3, #4]
 800ab84:	4798      	blx	r3
	entropy->ct = -1;			/* spectral overflow */
 800ab86:	f04f 33ff 	mov.w	r3, #4294967295
 800ab8a:	6133      	str	r3, [r6, #16]
}
 800ab8c:	2001      	movs	r0, #1
 800ab8e:	b005      	add	sp, #20
 800ab90:	ecbd 8b02 	vpop	{d8}
 800ab94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ab98 <decode_mcu_DC_refine>:
  if (cinfo->restart_interval) {
 800ab98:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{
 800ab9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aba0:	4604      	mov	r4, r0
 800aba2:	4688      	mov	r8, r1
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 800aba4:	f8d0 61d0 	ldr.w	r6, [r0, #464]	; 0x1d0
  if (cinfo->restart_interval) {
 800aba8:	b133      	cbz	r3, 800abb8 <decode_mcu_DC_refine+0x20>
    if (entropy->restarts_to_go == 0)
 800abaa:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800abac:	b90b      	cbnz	r3, 800abb2 <decode_mcu_DC_refine+0x1a>
      process_restart(cinfo);
 800abae:	f7ff fde5 	bl	800a77c <process_restart>
    entropy->restarts_to_go--;
 800abb2:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800abb4:	3b01      	subs	r3, #1
 800abb6:	6373      	str	r3, [r6, #52]	; 0x34
  p1 = 1 << cinfo->Al;		/* 1 in the bit position being coded */
 800abb8:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
 800abbc:	2701      	movs	r7, #1
  st = entropy->fixed_bin;	/* use fixed probability estimation */
 800abbe:	36b8      	adds	r6, #184	; 0xb8
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800abc0:	2500      	movs	r5, #0
  p1 = 1 << cinfo->Al;		/* 1 in the bit position being coded */
 800abc2:	409f      	lsls	r7, r3
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800abc4:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
 800abc8:	42ab      	cmp	r3, r5
 800abca:	dc02      	bgt.n	800abd2 <decode_mcu_DC_refine+0x3a>
}
 800abcc:	2001      	movs	r0, #1
 800abce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (arith_decode(cinfo, st))
 800abd2:	4631      	mov	r1, r6
 800abd4:	4620      	mov	r0, r4
 800abd6:	f7ff fc4f 	bl	800a478 <arith_decode>
 800abda:	b120      	cbz	r0, 800abe6 <decode_mcu_DC_refine+0x4e>
      MCU_data[blkn][0][0] |= p1;
 800abdc:	f858 2025 	ldr.w	r2, [r8, r5, lsl #2]
 800abe0:	8813      	ldrh	r3, [r2, #0]
 800abe2:	433b      	orrs	r3, r7
 800abe4:	8013      	strh	r3, [r2, #0]
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800abe6:	3501      	adds	r5, #1
 800abe8:	e7ec      	b.n	800abc4 <decode_mcu_DC_refine+0x2c>

0800abea <decode_mcu_AC_first>:
  if (cinfo->restart_interval) {
 800abea:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{
 800abee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abf2:	4604      	mov	r4, r0
 800abf4:	b087      	sub	sp, #28
 800abf6:	460d      	mov	r5, r1
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 800abf8:	f8d0 61d0 	ldr.w	r6, [r0, #464]	; 0x1d0
  if (cinfo->restart_interval) {
 800abfc:	b133      	cbz	r3, 800ac0c <decode_mcu_AC_first+0x22>
    if (entropy->restarts_to_go == 0)
 800abfe:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800ac00:	b90b      	cbnz	r3, 800ac06 <decode_mcu_AC_first+0x1c>
      process_restart(cinfo);
 800ac02:	f7ff fdbb 	bl	800a77c <process_restart>
    entropy->restarts_to_go--;
 800ac06:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800ac08:	3b01      	subs	r3, #1
 800ac0a:	6373      	str	r3, [r6, #52]	; 0x34
  if (entropy->ct == -1) return TRUE;	/* if error do nothing */
 800ac0c:	6933      	ldr	r3, [r6, #16]
 800ac0e:	3301      	adds	r3, #1
 800ac10:	d01d      	beq.n	800ac4e <decode_mcu_AC_first+0x64>
  block = MCU_data[0];
 800ac12:	682b      	ldr	r3, [r5, #0]
    sign = arith_decode(cinfo, entropy->fixed_bin);
 800ac14:	f106 0bb8 	add.w	fp, r6, #184	; 0xb8
  natural_order = cinfo->natural_order;
 800ac18:	f8d4 a1ac 	ldr.w	sl, [r4, #428]	; 0x1ac
  block = MCU_data[0];
 800ac1c:	9302      	str	r3, [sp, #8]
  tbl = cinfo->cur_comp_info[0]->ac_tbl_no;
 800ac1e:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 800ac22:	f8d4 5198 	ldr.w	r5, [r4, #408]	; 0x198
  tbl = cinfo->cur_comp_info[0]->ac_tbl_no;
 800ac26:	699b      	ldr	r3, [r3, #24]
 800ac28:	eb06 0983 	add.w	r9, r6, r3, lsl #2
 800ac2c:	9301      	str	r3, [sp, #4]
  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 800ac2e:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
 800ac32:	42ab      	cmp	r3, r5
 800ac34:	db0b      	blt.n	800ac4e <decode_mcu_AC_first+0x64>
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 800ac36:	1e69      	subs	r1, r5, #1
 800ac38:	f8d9 3078 	ldr.w	r3, [r9, #120]	; 0x78
    if (arith_decode(cinfo, st)) break;		/* EOB flag */
 800ac3c:	4620      	mov	r0, r4
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 800ac3e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800ac42:	eb03 0801 	add.w	r8, r3, r1
    if (arith_decode(cinfo, st)) break;		/* EOB flag */
 800ac46:	4641      	mov	r1, r8
 800ac48:	f7ff fc16 	bl	800a478 <arith_decode>
 800ac4c:	b1b0      	cbz	r0, 800ac7c <decode_mcu_AC_first+0x92>
}
 800ac4e:	2001      	movs	r0, #1
 800ac50:	b007      	add	sp, #28
 800ac52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      st += 3; k++;
 800ac56:	3501      	adds	r5, #1
      if (k > cinfo->Se) {
 800ac58:	f8d4 219c 	ldr.w	r2, [r4, #412]	; 0x19c
      st += 3; k++;
 800ac5c:	f108 0803 	add.w	r8, r8, #3
      if (k > cinfo->Se) {
 800ac60:	42aa      	cmp	r2, r5
 800ac62:	da0b      	bge.n	800ac7c <decode_mcu_AC_first+0x92>
	    WARNMS(cinfo, JWRN_ARITH_BAD_CODE);
 800ac64:	6823      	ldr	r3, [r4, #0]
 800ac66:	2275      	movs	r2, #117	; 0x75
 800ac68:	f04f 31ff 	mov.w	r1, #4294967295
 800ac6c:	4620      	mov	r0, r4
 800ac6e:	615a      	str	r2, [r3, #20]
 800ac70:	685b      	ldr	r3, [r3, #4]
 800ac72:	4798      	blx	r3
	    entropy->ct = -1;			/* magnitude overflow */
 800ac74:	f04f 33ff 	mov.w	r3, #4294967295
 800ac78:	6133      	str	r3, [r6, #16]
	    return TRUE;
 800ac7a:	e7e8      	b.n	800ac4e <decode_mcu_AC_first+0x64>
    while (arith_decode(cinfo, st + 1) == 0) {
 800ac7c:	f108 0101 	add.w	r1, r8, #1
 800ac80:	4620      	mov	r0, r4
 800ac82:	f7ff fbf9 	bl	800a478 <arith_decode>
 800ac86:	2800      	cmp	r0, #0
 800ac88:	d0e5      	beq.n	800ac56 <decode_mcu_AC_first+0x6c>
    st += 2;
 800ac8a:	f108 0802 	add.w	r8, r8, #2
    sign = arith_decode(cinfo, entropy->fixed_bin);
 800ac8e:	4659      	mov	r1, fp
 800ac90:	4620      	mov	r0, r4
 800ac92:	f7ff fbf1 	bl	800a478 <arith_decode>
    if ((m = arith_decode(cinfo, st)) != 0) {
 800ac96:	4641      	mov	r1, r8
    sign = arith_decode(cinfo, entropy->fixed_bin);
 800ac98:	9003      	str	r0, [sp, #12]
    if ((m = arith_decode(cinfo, st)) != 0) {
 800ac9a:	4620      	mov	r0, r4
 800ac9c:	f7ff fbec 	bl	800a478 <arith_decode>
 800aca0:	4607      	mov	r7, r0
 800aca2:	b1b0      	cbz	r0, 800acd2 <decode_mcu_AC_first+0xe8>
      if (arith_decode(cinfo, st)) {
 800aca4:	4641      	mov	r1, r8
 800aca6:	4620      	mov	r0, r4
 800aca8:	f7ff fbe6 	bl	800a478 <arith_decode>
 800acac:	b188      	cbz	r0, 800acd2 <decode_mcu_AC_first+0xe8>
	     (k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
 800acae:	9b01      	ldr	r3, [sp, #4]
	m <<= 1;
 800acb0:	007f      	lsls	r7, r7, #1
	st = entropy->ac_stats[tbl] +
 800acb2:	f8d9 2078 	ldr.w	r2, [r9, #120]	; 0x78
	     (k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
 800acb6:	18e1      	adds	r1, r4, r3
 800acb8:	f891 1108 	ldrb.w	r1, [r1, #264]	; 0x108
 800acbc:	42a9      	cmp	r1, r5
 800acbe:	bfac      	ite	ge
 800acc0:	21bd      	movge	r1, #189	; 0xbd
 800acc2:	21d9      	movlt	r1, #217	; 0xd9
	st = entropy->ac_stats[tbl] +
 800acc4:	eb02 0801 	add.w	r8, r2, r1
	while (arith_decode(cinfo, st)) {
 800acc8:	4641      	mov	r1, r8
 800acca:	4620      	mov	r0, r4
 800accc:	f7ff fbd4 	bl	800a478 <arith_decode>
 800acd0:	b988      	cbnz	r0, 800acf6 <decode_mcu_AC_first+0x10c>
    st += 14;
 800acd2:	f108 010e 	add.w	r1, r8, #14
    v = m;
 800acd6:	463a      	mov	r2, r7
    while (m >>= 1)
 800acd8:	107f      	asrs	r7, r7, #1
 800acda:	d113      	bne.n	800ad04 <decode_mcu_AC_first+0x11a>
    v += 1; if (sign) v = -v;
 800acdc:	9b03      	ldr	r3, [sp, #12]
 800acde:	b9e3      	cbnz	r3, 800ad1a <decode_mcu_AC_first+0x130>
 800ace0:	3201      	adds	r2, #1
    (*block)[natural_order[k]] = (JCOEF) (v << cinfo->Al);
 800ace2:	f8d4 11a4 	ldr.w	r1, [r4, #420]	; 0x1a4
 800ace6:	f85a 3025 	ldr.w	r3, [sl, r5, lsl #2]
  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 800acea:	3501      	adds	r5, #1
    (*block)[natural_order[k]] = (JCOEF) (v << cinfo->Al);
 800acec:	408a      	lsls	r2, r1
 800acee:	9902      	ldr	r1, [sp, #8]
 800acf0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 800acf4:	e79b      	b.n	800ac2e <decode_mcu_AC_first+0x44>
	  if ((m <<= 1) == 0x8000) {
 800acf6:	007f      	lsls	r7, r7, #1
 800acf8:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
 800acfc:	d0b2      	beq.n	800ac64 <decode_mcu_AC_first+0x7a>
	  st += 1;
 800acfe:	f108 0801 	add.w	r8, r8, #1
 800ad02:	e7e1      	b.n	800acc8 <decode_mcu_AC_first+0xde>
      if (arith_decode(cinfo, st)) v |= m;
 800ad04:	4620      	mov	r0, r4
 800ad06:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800ad0a:	f7ff fbb5 	bl	800a478 <arith_decode>
 800ad0e:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 800ad12:	2800      	cmp	r0, #0
 800ad14:	d0e0      	beq.n	800acd8 <decode_mcu_AC_first+0xee>
 800ad16:	433a      	orrs	r2, r7
 800ad18:	e7de      	b.n	800acd8 <decode_mcu_AC_first+0xee>
    v += 1; if (sign) v = -v;
 800ad1a:	43d2      	mvns	r2, r2
 800ad1c:	e7e1      	b.n	800ace2 <decode_mcu_AC_first+0xf8>

0800ad1e <decode_mcu_DC_first>:
{
 800ad1e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (cinfo->restart_interval) {
 800ad22:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{
 800ad26:	b085      	sub	sp, #20
 800ad28:	4604      	mov	r4, r0
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 800ad2a:	f8d0 61d0 	ldr.w	r6, [r0, #464]	; 0x1d0
{
 800ad2e:	9103      	str	r1, [sp, #12]
  if (cinfo->restart_interval) {
 800ad30:	b133      	cbz	r3, 800ad40 <decode_mcu_DC_first+0x22>
    if (entropy->restarts_to_go == 0)
 800ad32:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800ad34:	b90b      	cbnz	r3, 800ad3a <decode_mcu_DC_first+0x1c>
      process_restart(cinfo);
 800ad36:	f7ff fd21 	bl	800a77c <process_restart>
    entropy->restarts_to_go--;
 800ad3a:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800ad3c:	3b01      	subs	r3, #1
 800ad3e:	6373      	str	r3, [r6, #52]	; 0x34
  if (entropy->ct == -1) return TRUE;	/* if error do nothing */
 800ad40:	6933      	ldr	r3, [r6, #16]
 800ad42:	3301      	adds	r3, #1
 800ad44:	d073      	beq.n	800ae2e <decode_mcu_DC_first+0x110>
 800ad46:	f504 73b8 	add.w	r3, r4, #368	; 0x170
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800ad4a:	f04f 0800 	mov.w	r8, #0
 800ad4e:	9301      	str	r3, [sp, #4]
 800ad50:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
 800ad54:	4543      	cmp	r3, r8
 800ad56:	dd6a      	ble.n	800ae2e <decode_mcu_DC_first+0x110>
    block = MCU_data[blkn];
 800ad58:	9b03      	ldr	r3, [sp, #12]
    if (arith_decode(cinfo, st) == 0)
 800ad5a:	4620      	mov	r0, r4
    ci = cinfo->MCU_membership[blkn];
 800ad5c:	9a01      	ldr	r2, [sp, #4]
    block = MCU_data[blkn];
 800ad5e:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800ad62:	9302      	str	r3, [sp, #8]
    ci = cinfo->MCU_membership[blkn];
 800ad64:	f852 3b04 	ldr.w	r3, [r2], #4
 800ad68:	9201      	str	r2, [sp, #4]
    tbl = cinfo->cur_comp_info[ci]->dc_tbl_no;
 800ad6a:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800ad6e:	eb06 0a83 	add.w	sl, r6, r3, lsl #2
 800ad72:	f8d2 2154 	ldr.w	r2, [r2, #340]	; 0x154
    st = entropy->dc_stats[tbl] + entropy->dc_context[ci];
 800ad76:	f8da 1024 	ldr.w	r1, [sl, #36]	; 0x24
    tbl = cinfo->cur_comp_info[ci]->dc_tbl_no;
 800ad7a:	6952      	ldr	r2, [r2, #20]
 800ad7c:	eb06 0982 	add.w	r9, r6, r2, lsl #2
 800ad80:	9200      	str	r2, [sp, #0]
    st = entropy->dc_stats[tbl] + entropy->dc_context[ci];
 800ad82:	f8d9 5038 	ldr.w	r5, [r9, #56]	; 0x38
 800ad86:	440d      	add	r5, r1
    if (arith_decode(cinfo, st) == 0)
 800ad88:	4629      	mov	r1, r5
 800ad8a:	f7ff fb75 	bl	800a478 <arith_decode>
 800ad8e:	b958      	cbnz	r0, 800ada8 <decode_mcu_DC_first+0x8a>
      entropy->dc_context[ci] = 0;
 800ad90:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
    (*block)[0] = (JCOEF) (entropy->last_dc_val[ci] << cinfo->Al);
 800ad94:	f8d4 21a4 	ldr.w	r2, [r4, #420]	; 0x1a4
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800ad98:	f108 0801 	add.w	r8, r8, #1
    (*block)[0] = (JCOEF) (entropy->last_dc_val[ci] << cinfo->Al);
 800ad9c:	f8da 3014 	ldr.w	r3, [sl, #20]
 800ada0:	4093      	lsls	r3, r2
 800ada2:	9a02      	ldr	r2, [sp, #8]
 800ada4:	8013      	strh	r3, [r2, #0]
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800ada6:	e7d3      	b.n	800ad50 <decode_mcu_DC_first+0x32>
      sign = arith_decode(cinfo, st + 1);
 800ada8:	1c69      	adds	r1, r5, #1
 800adaa:	4620      	mov	r0, r4
 800adac:	f7ff fb64 	bl	800a478 <arith_decode>
      st += 2; st += sign;
 800adb0:	1c81      	adds	r1, r0, #2
      sign = arith_decode(cinfo, st + 1);
 800adb2:	4607      	mov	r7, r0
      if ((m = arith_decode(cinfo, st)) != 0) {
 800adb4:	4620      	mov	r0, r4
      st += 2; st += sign;
 800adb6:	eb05 0b01 	add.w	fp, r5, r1
      if ((m = arith_decode(cinfo, st)) != 0) {
 800adba:	4659      	mov	r1, fp
 800adbc:	f7ff fb5c 	bl	800a478 <arith_decode>
 800adc0:	4605      	mov	r5, r0
 800adc2:	b140      	cbz	r0, 800add6 <decode_mcu_DC_first+0xb8>
	st = entropy->dc_stats[tbl] + 20;	/* Table F.4: X1 = 20 */
 800adc4:	f8d9 1038 	ldr.w	r1, [r9, #56]	; 0x38
 800adc8:	f101 0b14 	add.w	fp, r1, #20
	while (arith_decode(cinfo, st)) {
 800adcc:	4659      	mov	r1, fp
 800adce:	4620      	mov	r0, r4
 800add0:	f7ff fb52 	bl	800a478 <arith_decode>
 800add4:	b9e0      	cbnz	r0, 800ae10 <decode_mcu_DC_first+0xf2>
      if (m < (int) ((1L << cinfo->arith_dc_L[tbl]) >> 1))
 800add6:	9b00      	ldr	r3, [sp, #0]
 800add8:	4423      	add	r3, r4
 800adda:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
 800adde:	4699      	mov	r9, r3
 800ade0:	2301      	movs	r3, #1
 800ade2:	fa03 f202 	lsl.w	r2, r3, r2
 800ade6:	ebb5 0f62 	cmp.w	r5, r2, asr #1
 800adea:	da27      	bge.n	800ae3c <decode_mcu_DC_first+0x11e>
	entropy->dc_context[ci] = 0;		   /* zero diff category */
 800adec:	2300      	movs	r3, #0
 800adee:	f8ca 3024 	str.w	r3, [sl, #36]	; 0x24
      st += 14;
 800adf2:	f10b 010e 	add.w	r1, fp, #14
      while (m >>= 1)
 800adf6:	46a9      	mov	r9, r5
 800adf8:	106d      	asrs	r5, r5, #1
 800adfa:	d12d      	bne.n	800ae58 <decode_mcu_DC_first+0x13a>
      v += 1; if (sign) v = -v;
 800adfc:	2f00      	cmp	r7, #0
 800adfe:	d135      	bne.n	800ae6c <decode_mcu_DC_first+0x14e>
 800ae00:	f109 0901 	add.w	r9, r9, #1
      entropy->last_dc_val[ci] += v;
 800ae04:	f8da 2014 	ldr.w	r2, [sl, #20]
 800ae08:	444a      	add	r2, r9
 800ae0a:	f8ca 2014 	str.w	r2, [sl, #20]
 800ae0e:	e7c1      	b.n	800ad94 <decode_mcu_DC_first+0x76>
	  if ((m <<= 1) == 0x8000) {
 800ae10:	006d      	lsls	r5, r5, #1
 800ae12:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
 800ae16:	d10e      	bne.n	800ae36 <decode_mcu_DC_first+0x118>
	    WARNMS(cinfo, JWRN_ARITH_BAD_CODE);
 800ae18:	6823      	ldr	r3, [r4, #0]
 800ae1a:	2275      	movs	r2, #117	; 0x75
 800ae1c:	f04f 31ff 	mov.w	r1, #4294967295
 800ae20:	4620      	mov	r0, r4
 800ae22:	615a      	str	r2, [r3, #20]
 800ae24:	685b      	ldr	r3, [r3, #4]
 800ae26:	4798      	blx	r3
	    entropy->ct = -1;			/* magnitude overflow */
 800ae28:	f04f 33ff 	mov.w	r3, #4294967295
 800ae2c:	6133      	str	r3, [r6, #16]
}
 800ae2e:	2001      	movs	r0, #1
 800ae30:	b005      	add	sp, #20
 800ae32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  st += 1;
 800ae36:	f10b 0b01 	add.w	fp, fp, #1
 800ae3a:	e7c7      	b.n	800adcc <decode_mcu_DC_first+0xae>
      else if (m > (int) ((1L << cinfo->arith_dc_U[tbl]) >> 1))
 800ae3c:	f899 20f8 	ldrb.w	r2, [r9, #248]	; 0xf8
 800ae40:	2301      	movs	r3, #1
 800ae42:	fa03 f202 	lsl.w	r2, r3, r2
 800ae46:	ebb5 0f62 	cmp.w	r5, r2, asr #1
	entropy->dc_context[ci] = 12 + (sign * 4); /* large diff category */
 800ae4a:	bfcc      	ite	gt
 800ae4c:	1cfa      	addgt	r2, r7, #3
	entropy->dc_context[ci] = 4 + (sign * 4);  /* small diff category */
 800ae4e:	1c7a      	addle	r2, r7, #1
 800ae50:	0092      	lsls	r2, r2, #2
 800ae52:	f8ca 2024 	str.w	r2, [sl, #36]	; 0x24
 800ae56:	e7cc      	b.n	800adf2 <decode_mcu_DC_first+0xd4>
	if (arith_decode(cinfo, st)) v |= m;
 800ae58:	4620      	mov	r0, r4
 800ae5a:	9100      	str	r1, [sp, #0]
 800ae5c:	f7ff fb0c 	bl	800a478 <arith_decode>
 800ae60:	9900      	ldr	r1, [sp, #0]
 800ae62:	2800      	cmp	r0, #0
 800ae64:	d0c8      	beq.n	800adf8 <decode_mcu_DC_first+0xda>
 800ae66:	ea49 0905 	orr.w	r9, r9, r5
 800ae6a:	e7c5      	b.n	800adf8 <decode_mcu_DC_first+0xda>
      v += 1; if (sign) v = -v;
 800ae6c:	ea6f 0909 	mvn.w	r9, r9
 800ae70:	e7c8      	b.n	800ae04 <decode_mcu_DC_first+0xe6>
	...

0800ae74 <jinit_arith_decoder>:
{
  arith_entropy_ptr entropy;
  int i;

  entropy = (arith_entropy_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ae74:	6843      	ldr	r3, [r0, #4]
 800ae76:	22bc      	movs	r2, #188	; 0xbc
 800ae78:	2101      	movs	r1, #1
 800ae7a:	681b      	ldr	r3, [r3, #0]
{
 800ae7c:	b570      	push	{r4, r5, r6, lr}
 800ae7e:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ae80:	4798      	blx	r3
				SIZEOF(arith_entropy_decoder));
  cinfo->entropy = (struct jpeg_entropy_decoder *) entropy;
  entropy->pub.start_pass = start_pass;
 800ae82:	4b14      	ldr	r3, [pc, #80]	; (800aed4 <jinit_arith_decoder+0x60>)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ae84:	4605      	mov	r5, r0
  cinfo->entropy = (struct jpeg_entropy_decoder *) entropy;
 800ae86:	f8c4 01d0 	str.w	r0, [r4, #464]	; 0x1d0

  /* Mark tables unallocated */
  for (i = 0; i < NUM_ARITH_TBLS; i++) {
    entropy->dc_stats[i] = NULL;
 800ae8a:	2280      	movs	r2, #128	; 0x80
  entropy->pub.start_pass = start_pass;
 800ae8c:	f840 3b38 	str.w	r3, [r0], #56
    entropy->dc_stats[i] = NULL;
 800ae90:	2100      	movs	r1, #0
 800ae92:	f01f f9bf 	bl	802a214 <memset>
    entropy->ac_stats[i] = NULL;
  }

  /* Initialize index for fixed probability estimation */
  entropy->fixed_bin[0] = 113;
 800ae96:	2371      	movs	r3, #113	; 0x71
 800ae98:	f885 30b8 	strb.w	r3, [r5, #184]	; 0xb8

  if (cinfo->progressive_mode) {
 800ae9c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800aea0:	b17b      	cbz	r3, 800aec2 <jinit_arith_decoder+0x4e>
    /* Create progression status table */
    int *coef_bit_ptr, ci;
    cinfo->coef_bits = (int (*)[DCTSIZE2])
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800aea2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800aea4:	2101      	movs	r1, #1
 800aea6:	6863      	ldr	r3, [r4, #4]
 800aea8:	4620      	mov	r0, r4
 800aeaa:	0212      	lsls	r2, r2, #8
				  cinfo->num_components*DCTSIZE2*SIZEOF(int));
    coef_bit_ptr = & cinfo->coef_bits[0][0];
    for (ci = 0; ci < cinfo->num_components; ci++) 
 800aeac:	2500      	movs	r5, #0
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	4798      	blx	r3
 800aeb2:	4606      	mov	r6, r0
    cinfo->coef_bits = (int (*)[DCTSIZE2])
 800aeb4:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
    for (ci = 0; ci < cinfo->num_components; ci++) 
 800aeb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aeba:	eb06 2005 	add.w	r0, r6, r5, lsl #8
 800aebe:	42ab      	cmp	r3, r5
 800aec0:	dc00      	bgt.n	800aec4 <jinit_arith_decoder+0x50>
      for (i = 0; i < DCTSIZE2; i++)
	*coef_bit_ptr++ = -1;
  }
}
 800aec2:	bd70      	pop	{r4, r5, r6, pc}
	*coef_bit_ptr++ = -1;
 800aec4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800aec8:	21ff      	movs	r1, #255	; 0xff
    for (ci = 0; ci < cinfo->num_components; ci++) 
 800aeca:	3501      	adds	r5, #1
	*coef_bit_ptr++ = -1;
 800aecc:	f01f f9a2 	bl	802a214 <memset>
    for (ci = 0; ci < cinfo->num_components; ci++) 
 800aed0:	e7f2      	b.n	800aeb8 <jinit_arith_decoder+0x44>
 800aed2:	bf00      	nop
 800aed4:	0800a555 	.word	0x0800a555

0800aed8 <init_mem_source>:

METHODDEF(void)
init_mem_source (j_decompress_ptr cinfo)
{
  /* no work necessary here */
}
 800aed8:	4770      	bx	lr
	...

0800aedc <fill_mem_input_buffer>:

  /* The whole JPEG data is expected to reside in the supplied memory
   * buffer, so any request for more data beyond the given buffer size
   * is treated as an error.
   */
  WARNMS(cinfo, JWRN_JPEG_EOF);
 800aedc:	6803      	ldr	r3, [r0, #0]
 800aede:	227b      	movs	r2, #123	; 0x7b
 800aee0:	f04f 31ff 	mov.w	r1, #4294967295
{
 800aee4:	b510      	push	{r4, lr}
 800aee6:	4604      	mov	r4, r0
  WARNMS(cinfo, JWRN_JPEG_EOF);
 800aee8:	615a      	str	r2, [r3, #20]
 800aeea:	685b      	ldr	r3, [r3, #4]
 800aeec:	4798      	blx	r3

  /* Insert a fake EOI marker */

  cinfo->src->next_input_byte = mybuffer;
 800aeee:	69a3      	ldr	r3, [r4, #24]
 800aef0:	4a02      	ldr	r2, [pc, #8]	; (800aefc <fill_mem_input_buffer+0x20>)
  cinfo->src->bytes_in_buffer = 2;

  return TRUE;
}
 800aef2:	2001      	movs	r0, #1
  cinfo->src->next_input_byte = mybuffer;
 800aef4:	601a      	str	r2, [r3, #0]
  cinfo->src->bytes_in_buffer = 2;
 800aef6:	2202      	movs	r2, #2
 800aef8:	605a      	str	r2, [r3, #4]
}
 800aefa:	bd10      	pop	{r4, pc}
 800aefc:	0802dba0 	.word	0x0802dba0

0800af00 <skip_input_data>:
 * buffer is the application writer's problem.
 */

METHODDEF(void)
skip_input_data (j_decompress_ptr cinfo, long num_bytes)
{
 800af00:	b570      	push	{r4, r5, r6, lr}

  /* Just a dumb implementation for now.  Could use fseek() except
   * it doesn't work on pipes.  Not clear that being smart is worth
   * any trouble anyway --- large skips are infrequent.
   */
  if (num_bytes > 0) {
 800af02:	1e0c      	subs	r4, r1, #0
{
 800af04:	4606      	mov	r6, r0
  if (num_bytes > 0) {
 800af06:	dd08      	ble.n	800af1a <skip_input_data+0x1a>
  struct jpeg_source_mgr * src = cinfo->src;
 800af08:	6985      	ldr	r5, [r0, #24]
    while (num_bytes > (long) src->bytes_in_buffer) {
 800af0a:	6869      	ldr	r1, [r5, #4]
 800af0c:	42a1      	cmp	r1, r4
 800af0e:	db05      	blt.n	800af1c <skip_input_data+0x1c>
      (void) (*src->fill_input_buffer) (cinfo);
      /* note we assume that fill_input_buffer will never return FALSE,
       * so suspension need not be handled.
       */
    }
    src->next_input_byte += (size_t) num_bytes;
 800af10:	682b      	ldr	r3, [r5, #0]
    src->bytes_in_buffer -= (size_t) num_bytes;
 800af12:	1b09      	subs	r1, r1, r4
    src->next_input_byte += (size_t) num_bytes;
 800af14:	4423      	add	r3, r4
    src->bytes_in_buffer -= (size_t) num_bytes;
 800af16:	6069      	str	r1, [r5, #4]
    src->next_input_byte += (size_t) num_bytes;
 800af18:	602b      	str	r3, [r5, #0]
  }
}
 800af1a:	bd70      	pop	{r4, r5, r6, pc}
      (void) (*src->fill_input_buffer) (cinfo);
 800af1c:	68eb      	ldr	r3, [r5, #12]
 800af1e:	4630      	mov	r0, r6
      num_bytes -= (long) src->bytes_in_buffer;
 800af20:	1a64      	subs	r4, r4, r1
      (void) (*src->fill_input_buffer) (cinfo);
 800af22:	4798      	blx	r3
 800af24:	e7f1      	b.n	800af0a <skip_input_data+0xa>

0800af26 <term_source>:
 800af26:	4770      	bx	lr

0800af28 <jpeg_mem_src>:
 */

GLOBAL(void)
jpeg_mem_src (j_decompress_ptr cinfo,
	      unsigned char * inbuffer, unsigned long insize)
{
 800af28:	b570      	push	{r4, r5, r6, lr}
 800af2a:	4604      	mov	r4, r0
 800af2c:	4616      	mov	r6, r2
  struct jpeg_source_mgr * src;

  if (inbuffer == NULL || insize == 0)	/* Treat empty input as fatal error */
 800af2e:	460d      	mov	r5, r1
 800af30:	b101      	cbz	r1, 800af34 <jpeg_mem_src+0xc>
 800af32:	b92a      	cbnz	r2, 800af40 <jpeg_mem_src+0x18>
    ERREXIT(cinfo, JERR_INPUT_EMPTY);
 800af34:	6823      	ldr	r3, [r4, #0]
 800af36:	222b      	movs	r2, #43	; 0x2b
 800af38:	4620      	mov	r0, r4
 800af3a:	615a      	str	r2, [r3, #20]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	4798      	blx	r3

  /* The source object is made permanent so that a series of JPEG images
   * can be read from the same buffer by calling jpeg_mem_src only before
   * the first one.
   */
  if (cinfo->src == NULL) {	/* first time for this JPEG object? */
 800af40:	69a1      	ldr	r1, [r4, #24]
 800af42:	b929      	cbnz	r1, 800af50 <jpeg_mem_src+0x28>
    cinfo->src = (struct jpeg_source_mgr *)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 800af44:	6863      	ldr	r3, [r4, #4]
 800af46:	221c      	movs	r2, #28
 800af48:	4620      	mov	r0, r4
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	4798      	blx	r3
    cinfo->src = (struct jpeg_source_mgr *)
 800af4e:	61a0      	str	r0, [r4, #24]
				  SIZEOF(struct jpeg_source_mgr));
  }

  src = cinfo->src;
 800af50:	69a3      	ldr	r3, [r4, #24]
  src->init_source = init_mem_source;
 800af52:	4a06      	ldr	r2, [pc, #24]	; (800af6c <jpeg_mem_src+0x44>)
 800af54:	609a      	str	r2, [r3, #8]
  src->fill_input_buffer = fill_mem_input_buffer;
 800af56:	4a06      	ldr	r2, [pc, #24]	; (800af70 <jpeg_mem_src+0x48>)
 800af58:	60da      	str	r2, [r3, #12]
  src->skip_input_data = skip_input_data;
 800af5a:	4a06      	ldr	r2, [pc, #24]	; (800af74 <jpeg_mem_src+0x4c>)
 800af5c:	611a      	str	r2, [r3, #16]
  src->resync_to_restart = jpeg_resync_to_restart; /* use default method */
 800af5e:	4a06      	ldr	r2, [pc, #24]	; (800af78 <jpeg_mem_src+0x50>)
 800af60:	615a      	str	r2, [r3, #20]
  src->term_source = term_source;
 800af62:	4a06      	ldr	r2, [pc, #24]	; (800af7c <jpeg_mem_src+0x54>)
  src->bytes_in_buffer = (size_t) insize;
  src->next_input_byte = (JOCTET *) inbuffer;
 800af64:	e9c3 5600 	strd	r5, r6, [r3]
  src->term_source = term_source;
 800af68:	619a      	str	r2, [r3, #24]
}
 800af6a:	bd70      	pop	{r4, r5, r6, pc}
 800af6c:	0800aed9 	.word	0x0800aed9
 800af70:	0800aedd 	.word	0x0800aedd
 800af74:	0800af01 	.word	0x0800af01
 800af78:	0800f159 	.word	0x0800f159
 800af7c:	0800af27 	.word	0x0800af27

0800af80 <start_iMCU_row>:

  /* In an interleaved scan, an MCU row is the same as an iMCU row.
   * In a noninterleaved scan, an iMCU row has v_samp_factor MCU rows.
   * But at the bottom of the image, process only what's left.
   */
  if (cinfo->comps_in_scan > 1) {
 800af80:	f8d0 2150 	ldr.w	r2, [r0, #336]	; 0x150
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 800af84:	f8d0 31c0 	ldr.w	r3, [r0, #448]	; 0x1c0
  if (cinfo->comps_in_scan > 1) {
 800af88:	2a01      	cmp	r2, #1
 800af8a:	dd05      	ble.n	800af98 <start_iMCU_row+0x18>
    coef->MCU_rows_per_iMCU_row = 1;
 800af8c:	2201      	movs	r2, #1
  } else {
    if (cinfo->input_iMCU_row < (cinfo->total_iMCU_rows-1))
      coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->v_samp_factor;
    else
      coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->last_row_height;
 800af8e:	61da      	str	r2, [r3, #28]
  }

  coef->MCU_ctr = 0;
 800af90:	2200      	movs	r2, #0
  coef->MCU_vert_offset = 0;
 800af92:	e9c3 2205 	strd	r2, r2, [r3, #20]
}
 800af96:	4770      	bx	lr
    if (cinfo->input_iMCU_row < (cinfo->total_iMCU_rows-1))
 800af98:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
      coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->v_samp_factor;
 800af9c:	f8d0 1154 	ldr.w	r1, [r0, #340]	; 0x154
    if (cinfo->input_iMCU_row < (cinfo->total_iMCU_rows-1))
 800afa0:	3a01      	subs	r2, #1
 800afa2:	f8d0 0094 	ldr.w	r0, [r0, #148]	; 0x94
 800afa6:	4290      	cmp	r0, r2
      coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->v_samp_factor;
 800afa8:	bf34      	ite	cc
 800afaa:	68ca      	ldrcc	r2, [r1, #12]
      coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->last_row_height;
 800afac:	6cca      	ldrcs	r2, [r1, #76]	; 0x4c
 800afae:	e7ee      	b.n	800af8e <start_iMCU_row+0xe>

0800afb0 <start_input_pass>:
 */

METHODDEF(void)
start_input_pass (j_decompress_ptr cinfo)
{
  cinfo->input_iMCU_row = 0;
 800afb0:	2200      	movs	r2, #0
 800afb2:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
  start_iMCU_row(cinfo);
 800afb6:	f7ff bfe3 	b.w	800af80 <start_iMCU_row>

0800afba <dummy_consume_data>:

METHODDEF(int)
dummy_consume_data (j_decompress_ptr cinfo)
{
  return JPEG_SUSPENDED;	/* Always indicate nothing was done */
}
 800afba:	2000      	movs	r0, #0
 800afbc:	4770      	bx	lr

0800afbe <consume_data>:
 * Return value is JPEG_ROW_COMPLETED, JPEG_SCAN_COMPLETED, or JPEG_SUSPENDED.
 */

METHODDEF(int)
consume_data (j_decompress_ptr cinfo)
{
 800afbe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afc2:	f500 7baa 	add.w	fp, r0, #340	; 0x154
 800afc6:	b08f      	sub	sp, #60	; 0x3c
 800afc8:	4604      	mov	r4, r0
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 800afca:	f8d0 51c0 	ldr.w	r5, [r0, #448]	; 0x1c0
  JBLOCKARRAY buffer[MAX_COMPS_IN_SCAN];
  JBLOCKROW buffer_ptr;
  jpeg_component_info *compptr;

  /* Align the virtual buffers for the components used in this scan. */
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800afce:	465f      	mov	r7, fp
 800afd0:	2600      	movs	r6, #0
    compptr = cinfo->cur_comp_info[ci];
    buffer[ci] = (*cinfo->mem->access_virt_barray)
 800afd2:	f04f 0801 	mov.w	r8, #1
 800afd6:	f10d 0928 	add.w	r9, sp, #40	; 0x28
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800afda:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800afde:	42b3      	cmp	r3, r6
 800afe0:	dc13      	bgt.n	800b00a <consume_data+0x4c>
     * because we requested a pre-zeroed array.
     */
  }

  /* Loop to process one whole iMCU row */
  for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
 800afe2:	69ae      	ldr	r6, [r5, #24]
      blkn = 0;			/* index of current DCT block within MCU */
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
	compptr = cinfo->cur_comp_info[ci];
	start_col = MCU_col_num * compptr->MCU_width;
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
	  buffer_ptr = buffer[ci][yindex+yoffset] + start_col;
 800afe4:	f10d 0928 	add.w	r9, sp, #40	; 0x28
  for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
 800afe8:	69eb      	ldr	r3, [r5, #28]
 800afea:	42b3      	cmp	r3, r6
 800afec:	dc22      	bgt.n	800b034 <consume_data+0x76>
    }
    /* Completed an MCU row, but perhaps not an iMCU row */
    coef->MCU_ctr = 0;
  }
  /* Completed the iMCU row, advance counters for next one */
  if (++(cinfo->input_iMCU_row) < cinfo->total_iMCU_rows) {
 800afee:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800aff2:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
 800aff6:	3301      	adds	r3, #1
 800aff8:	4293      	cmp	r3, r2
 800affa:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 800affe:	d270      	bcs.n	800b0e2 <consume_data+0x124>
    start_iMCU_row(cinfo);
 800b000:	4620      	mov	r0, r4
 800b002:	f7ff ffbd 	bl	800af80 <start_iMCU_row>
    return JPEG_ROW_COMPLETED;
 800b006:	2003      	movs	r0, #3
 800b008:	e044      	b.n	800b094 <consume_data+0xd6>
    compptr = cinfo->cur_comp_info[ci];
 800b00a:	f857 1b04 	ldr.w	r1, [r7], #4
    buffer[ci] = (*cinfo->mem->access_virt_barray)
 800b00e:	6860      	ldr	r0, [r4, #4]
       cinfo->input_iMCU_row * compptr->v_samp_factor,
 800b010:	68cb      	ldr	r3, [r1, #12]
    buffer[ci] = (*cinfo->mem->access_virt_barray)
 800b012:	6849      	ldr	r1, [r1, #4]
 800b014:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 800b018:	3112      	adds	r1, #18
 800b01a:	f8cd 8000 	str.w	r8, [sp]
 800b01e:	435a      	muls	r2, r3
 800b020:	f8d0 a020 	ldr.w	sl, [r0, #32]
 800b024:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 800b028:	4620      	mov	r0, r4
 800b02a:	47d0      	blx	sl
 800b02c:	f849 0026 	str.w	r0, [r9, r6, lsl #2]
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800b030:	3601      	adds	r6, #1
 800b032:	e7d2      	b.n	800afda <consume_data+0x1c>
    for (MCU_col_num = coef->MCU_ctr; MCU_col_num < cinfo->MCUs_per_row;
 800b034:	00b3      	lsls	r3, r6, #2
 800b036:	696f      	ldr	r7, [r5, #20]
 800b038:	9308      	str	r3, [sp, #32]
 800b03a:	f8d4 3164 	ldr.w	r3, [r4, #356]	; 0x164
 800b03e:	42bb      	cmp	r3, r7
 800b040:	f04f 0300 	mov.w	r3, #0
 800b044:	d94a      	bls.n	800b0dc <consume_data+0x11e>
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800b046:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
 800b04a:	46da      	mov	sl, fp
      blkn = 0;			/* index of current DCT block within MCU */
 800b04c:	9303      	str	r3, [sp, #12]
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800b04e:	9206      	str	r2, [sp, #24]
 800b050:	e013      	b.n	800b07a <consume_data+0xbc>
	compptr = cinfo->cur_comp_info[ci];
 800b052:	f85a 2b04 	ldr.w	r2, [sl], #4
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 800b056:	f04f 0c00 	mov.w	ip, #0
 800b05a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b05e:	e9d2 e20e 	ldrd	lr, r2, [r2, #56]	; 0x38
 800b062:	9205      	str	r2, [sp, #20]
	  buffer_ptr = buffer[ci][yindex+yoffset] + start_col;
 800b064:	fb07 f20e 	mul.w	r2, r7, lr
 800b068:	01d2      	lsls	r2, r2, #7
 800b06a:	9204      	str	r2, [sp, #16]
 800b06c:	ea2e 72ee 	bic.w	r2, lr, lr, asr #31
 800b070:	9209      	str	r2, [sp, #36]	; 0x24
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 800b072:	9a05      	ldr	r2, [sp, #20]
 800b074:	4562      	cmp	r2, ip
 800b076:	dc10      	bgt.n	800b09a <consume_data+0xdc>
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800b078:	3301      	adds	r3, #1
 800b07a:	9a06      	ldr	r2, [sp, #24]
 800b07c:	429a      	cmp	r2, r3
 800b07e:	dce8      	bgt.n	800b052 <consume_data+0x94>
      if (! (*cinfo->entropy->decode_mcu) (cinfo, coef->MCU_buffer)) {
 800b080:	f8d4 31d0 	ldr.w	r3, [r4, #464]	; 0x1d0
 800b084:	f105 0120 	add.w	r1, r5, #32
 800b088:	4620      	mov	r0, r4
 800b08a:	685b      	ldr	r3, [r3, #4]
 800b08c:	4798      	blx	r3
 800b08e:	bb18      	cbnz	r0, 800b0d8 <consume_data+0x11a>
	coef->MCU_ctr = MCU_col_num;
 800b090:	e9c5 7605 	strd	r7, r6, [r5, #20]
  }
  /* Completed the scan */
  (*cinfo->inputctl->finish_input_pass) (cinfo);
  return JPEG_SCAN_COMPLETED;
}
 800b094:	b00f      	add	sp, #60	; 0x3c
 800b096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  buffer_ptr = buffer[ci][yindex+yoffset] + start_col;
 800b09a:	f859 2023 	ldr.w	r2, [r9, r3, lsl #2]
 800b09e:	9904      	ldr	r1, [sp, #16]
 800b0a0:	f852 2008 	ldr.w	r2, [r2, r8]
 800b0a4:	440a      	add	r2, r1
 800b0a6:	9207      	str	r2, [sp, #28]
	  for (xindex = 0; xindex < compptr->MCU_width; xindex++) {
 800b0a8:	9a03      	ldr	r2, [sp, #12]
 800b0aa:	f102 0108 	add.w	r1, r2, #8
 800b0ae:	2200      	movs	r2, #0
 800b0b0:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 800b0b4:	9807      	ldr	r0, [sp, #28]
 800b0b6:	4596      	cmp	lr, r2
 800b0b8:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
 800b0bc:	dc08      	bgt.n	800b0d0 <consume_data+0x112>
 800b0be:	9903      	ldr	r1, [sp, #12]
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 800b0c0:	f10c 0c01 	add.w	ip, ip, #1
 800b0c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b0c6:	f108 0804 	add.w	r8, r8, #4
 800b0ca:	4411      	add	r1, r2
 800b0cc:	9103      	str	r1, [sp, #12]
 800b0ce:	e7d0      	b.n	800b072 <consume_data+0xb4>
	  for (xindex = 0; xindex < compptr->MCU_width; xindex++) {
 800b0d0:	3201      	adds	r2, #1
	    coef->MCU_buffer[blkn++] = buffer_ptr++;
 800b0d2:	f841 0b04 	str.w	r0, [r1], #4
	  for (xindex = 0; xindex < compptr->MCU_width; xindex++) {
 800b0d6:	e7ed      	b.n	800b0b4 <consume_data+0xf6>
	 MCU_col_num++) {
 800b0d8:	3701      	adds	r7, #1
 800b0da:	e7ae      	b.n	800b03a <consume_data+0x7c>
       yoffset++) {
 800b0dc:	3601      	adds	r6, #1
    coef->MCU_ctr = 0;
 800b0de:	616b      	str	r3, [r5, #20]
       yoffset++) {
 800b0e0:	e782      	b.n	800afe8 <consume_data+0x2a>
  (*cinfo->inputctl->finish_input_pass) (cinfo);
 800b0e2:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 800b0e6:	4620      	mov	r0, r4
 800b0e8:	68db      	ldr	r3, [r3, #12]
 800b0ea:	4798      	blx	r3
  return JPEG_SCAN_COMPLETED;
 800b0ec:	2004      	movs	r0, #4
 800b0ee:	e7d1      	b.n	800b094 <consume_data+0xd6>

0800b0f0 <decompress_data>:
 * NB: output_buf contains a plane for each component in image.
 */

METHODDEF(int)
decompress_data (j_decompress_ptr cinfo, JSAMPIMAGE output_buf)
{
 800b0f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0f4:	4604      	mov	r4, r0
 800b0f6:	b089      	sub	sp, #36	; 0x24
 800b0f8:	468b      	mov	fp, r1
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 800b0fa:	f8d0 71c0 	ldr.w	r7, [r0, #448]	; 0x1c0
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800b0fe:	f8d0 5148 	ldr.w	r5, [r0, #328]	; 0x148
  JDIMENSION output_col;
  jpeg_component_info *compptr;
  inverse_DCT_method_ptr inverse_DCT;

  /* Force some input to be done if we are getting ahead of the input. */
  while (cinfo->input_scan_number < cinfo->output_scan_number ||
 800b102:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 800b106:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800b10a:	429a      	cmp	r2, r3
 800b10c:	db1d      	blt.n	800b14a <decompress_data+0x5a>
	 (cinfo->input_scan_number == cinfo->output_scan_number &&
	  cinfo->input_iMCU_row <= cinfo->output_iMCU_row)) {
 800b10e:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  while (cinfo->input_scan_number < cinfo->output_scan_number ||
 800b112:	d103      	bne.n	800b11c <decompress_data+0x2c>
	 (cinfo->input_scan_number == cinfo->output_scan_number &&
 800b114:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 800b118:	429a      	cmp	r2, r3
 800b11a:	d916      	bls.n	800b14a <decompress_data+0x5a>
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800b11c:	1e6b      	subs	r3, r5, #1
    if ((*cinfo->inputctl->consume_input)(cinfo) == JPEG_SUSPENDED)
      return JPEG_SUSPENDED;
  }

  /* OK, output from the virtual arrays. */
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800b11e:	2600      	movs	r6, #0
 800b120:	f8d4 50d8 	ldr.w	r5, [r4, #216]	; 0xd8
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800b124:	9303      	str	r3, [sp, #12]
       ci++, compptr++) {
    /* Don't bother to IDCT an uninteresting component. */
    if (! compptr->component_needed)
      continue;
    /* Align the virtual buffer for this component. */
    buffer = (*cinfo->mem->access_virt_barray)
 800b126:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800b12a:	9306      	str	r3, [sp, #24]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800b12c:	6a63      	ldr	r3, [r4, #36]	; 0x24
      ((j_common_ptr) cinfo, coef->whole_image[ci],
       cinfo->output_iMCU_row * compptr->v_samp_factor,
 800b12e:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800b132:	42b3      	cmp	r3, r6
 800b134:	dc13      	bgt.n	800b15e <decompress_data+0x6e>
      }
      output_ptr += compptr->DCT_v_scaled_size;
    }
  }

  if (++(cinfo->output_iMCU_row) < cinfo->total_iMCU_rows)
 800b136:	1c50      	adds	r0, r2, #1
 800b138:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
 800b13c:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c
    return JPEG_ROW_COMPLETED;
 800b140:	4290      	cmp	r0, r2
 800b142:	bf2c      	ite	cs
 800b144:	2004      	movcs	r0, #4
 800b146:	2003      	movcc	r0, #3
 800b148:	e006      	b.n	800b158 <decompress_data+0x68>
    if ((*cinfo->inputctl->consume_input)(cinfo) == JPEG_SUSPENDED)
 800b14a:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 800b14e:	4620      	mov	r0, r4
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	4798      	blx	r3
 800b154:	2800      	cmp	r0, #0
 800b156:	d1d4      	bne.n	800b102 <decompress_data+0x12>
  return JPEG_SCAN_COMPLETED;
}
 800b158:	b009      	add	sp, #36	; 0x24
 800b15a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (! compptr->component_needed)
 800b15e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800b160:	b913      	cbnz	r3, 800b168 <decompress_data+0x78>
       ci++, compptr++) {
 800b162:	3601      	adds	r6, #1
 800b164:	3558      	adds	r5, #88	; 0x58
 800b166:	e7e1      	b.n	800b12c <decompress_data+0x3c>
    buffer = (*cinfo->mem->access_virt_barray)
 800b168:	6861      	ldr	r1, [r4, #4]
 800b16a:	2000      	movs	r0, #0
       cinfo->output_iMCU_row * compptr->v_samp_factor,
 800b16c:	68eb      	ldr	r3, [r5, #12]
    buffer = (*cinfo->mem->access_virt_barray)
 800b16e:	9000      	str	r0, [sp, #0]
 800b170:	4620      	mov	r0, r4
 800b172:	6a0f      	ldr	r7, [r1, #32]
 800b174:	435a      	muls	r2, r3
 800b176:	9906      	ldr	r1, [sp, #24]
 800b178:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 800b17c:	47b8      	blx	r7
    if (cinfo->output_iMCU_row < last_iMCU_row)
 800b17e:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 800b182:	9a03      	ldr	r2, [sp, #12]
    buffer = (*cinfo->mem->access_virt_barray)
 800b184:	9004      	str	r0, [sp, #16]
    if (cinfo->output_iMCU_row < last_iMCU_row)
 800b186:	4293      	cmp	r3, r2
 800b188:	68eb      	ldr	r3, [r5, #12]
 800b18a:	d221      	bcs.n	800b1d0 <decompress_data+0xe0>
      block_rows = compptr->v_samp_factor;
 800b18c:	469a      	mov	sl, r3
    inverse_DCT = cinfo->idct->inverse_DCT[ci];
 800b18e:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
    for (block_row = 0; block_row < block_rows; block_row++) {
 800b192:	2200      	movs	r2, #0
    inverse_DCT = cinfo->idct->inverse_DCT[ci];
 800b194:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800b198:	685b      	ldr	r3, [r3, #4]
 800b19a:	461f      	mov	r7, r3
    output_ptr = output_buf[ci];
 800b19c:	f85b 3026 	ldr.w	r3, [fp, r6, lsl #2]
    for (block_row = 0; block_row < block_rows; block_row++) {
 800b1a0:	9202      	str	r2, [sp, #8]
 800b1a2:	9a02      	ldr	r2, [sp, #8]
 800b1a4:	4552      	cmp	r2, sl
 800b1a6:	dadc      	bge.n	800b162 <decompress_data+0x72>
      buffer_ptr = buffer[block_row];
 800b1a8:	9a04      	ldr	r2, [sp, #16]
      output_col = 0;
 800b1aa:	f04f 0900 	mov.w	r9, #0
      buffer_ptr = buffer[block_row];
 800b1ae:	9902      	ldr	r1, [sp, #8]
      for (block_num = 0; block_num < compptr->width_in_blocks; block_num++) {
 800b1b0:	46c8      	mov	r8, r9
      buffer_ptr = buffer[block_row];
 800b1b2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800b1b6:	9205      	str	r2, [sp, #20]
      for (block_num = 0; block_num < compptr->width_in_blocks; block_num++) {
 800b1b8:	69e9      	ldr	r1, [r5, #28]
 800b1ba:	9a05      	ldr	r2, [sp, #20]
 800b1bc:	4541      	cmp	r1, r8
 800b1be:	eb02 12c8 	add.w	r2, r2, r8, lsl #7
 800b1c2:	d80f      	bhi.n	800b1e4 <decompress_data+0xf4>
      output_ptr += compptr->DCT_v_scaled_size;
 800b1c4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800b1c6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    for (block_row = 0; block_row < block_rows; block_row++) {
 800b1ca:	9a02      	ldr	r2, [sp, #8]
 800b1cc:	3201      	adds	r2, #1
 800b1ce:	e7e7      	b.n	800b1a0 <decompress_data+0xb0>
      block_rows = (int) (compptr->height_in_blocks % compptr->v_samp_factor);
 800b1d0:	6a2a      	ldr	r2, [r5, #32]
 800b1d2:	fbb2 f1f3 	udiv	r1, r2, r3
 800b1d6:	fb03 2a11 	mls	sl, r3, r1, r2
      if (block_rows == 0) block_rows = compptr->v_samp_factor;
 800b1da:	f1ba 0f00 	cmp.w	sl, #0
 800b1de:	bf08      	it	eq
 800b1e0:	469a      	moveq	sl, r3
 800b1e2:	e7d4      	b.n	800b18e <decompress_data+0x9e>
	(*inverse_DCT) (cinfo, compptr, (JCOEFPTR) buffer_ptr,
 800b1e4:	f8cd 9000 	str.w	r9, [sp]
 800b1e8:	4629      	mov	r1, r5
 800b1ea:	9307      	str	r3, [sp, #28]
 800b1ec:	4620      	mov	r0, r4
 800b1ee:	47b8      	blx	r7
	output_col += compptr->DCT_h_scaled_size;
 800b1f0:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      for (block_num = 0; block_num < compptr->width_in_blocks; block_num++) {
 800b1f2:	f108 0801 	add.w	r8, r8, #1
 800b1f6:	9b07      	ldr	r3, [sp, #28]
	output_col += compptr->DCT_h_scaled_size;
 800b1f8:	4491      	add	r9, r2
      for (block_num = 0; block_num < compptr->width_in_blocks; block_num++) {
 800b1fa:	e7dd      	b.n	800b1b8 <decompress_data+0xc8>

0800b1fc <start_output_pass>:
{
 800b1fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 800b200:	f8d0 51c0 	ldr.w	r5, [r0, #448]	; 0x1c0
{
 800b204:	4604      	mov	r4, r0
  if (coef->pub.coef_arrays != NULL) {
 800b206:	692b      	ldr	r3, [r5, #16]
 800b208:	b323      	cbz	r3, 800b254 <start_output_pass+0x58>
    if (cinfo->do_block_smoothing && smoothing_ok(cinfo))
 800b20a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d04b      	beq.n	800b2a8 <start_output_pass+0xac>
  jpeg_component_info *compptr;
  JQUANT_TBL * qtable;
  int * coef_bits;
  int * coef_bits_latch;

  if (! cinfo->progressive_mode || cinfo->coef_bits == NULL)
 800b210:	f8d0 30e0 	ldr.w	r3, [r0, #224]	; 0xe0
 800b214:	2b00      	cmp	r3, #0
 800b216:	d047      	beq.n	800b2a8 <start_output_pass+0xac>
 800b218:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d043      	beq.n	800b2a8 <start_output_pass+0xac>
    return FALSE;

  /* Allocate latch area if not already done */
  if (coef->coef_bits_latch == NULL)
 800b220:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800b222:	b93b      	cbnz	r3, 800b234 <start_output_pass+0x38>
    coef->coef_bits_latch = (int *)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b224:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800b226:	2118      	movs	r1, #24
 800b228:	6843      	ldr	r3, [r0, #4]
 800b22a:	434a      	muls	r2, r1
 800b22c:	2101      	movs	r1, #1
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	4798      	blx	r3
    coef->coef_bits_latch = (int *)
 800b232:	6728      	str	r0, [r5, #112]	; 0x70
				  cinfo->num_components *
				  (SAVED_COEFS * SIZEOF(int)));
  coef_bits_latch = coef->coef_bits_latch;

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800b234:	2300      	movs	r3, #0
  coef_bits_latch = coef->coef_bits_latch;
 800b236:	f8d5 c070 	ldr.w	ip, [r5, #112]	; 0x70
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800b23a:	f8d4 00d8 	ldr.w	r0, [r4, #216]	; 0xd8
 800b23e:	f04f 0e18 	mov.w	lr, #24
  boolean smoothing_useful = FALSE;
 800b242:	4619      	mov	r1, r3
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800b244:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800b246:	fb0e c703 	mla	r7, lr, r3, ip
 800b24a:	4293      	cmp	r3, r2
 800b24c:	db07      	blt.n	800b25e <start_output_pass+0x62>
    if (cinfo->do_block_smoothing && smoothing_ok(cinfo))
 800b24e:	b359      	cbz	r1, 800b2a8 <start_output_pass+0xac>
      coef->pub.decompress_data = decompress_smooth_data;
 800b250:	4b16      	ldr	r3, [pc, #88]	; (800b2ac <start_output_pass+0xb0>)
      coef->pub.decompress_data = decompress_data;
 800b252:	60eb      	str	r3, [r5, #12]
  cinfo->output_iMCU_row = 0;
 800b254:	2300      	movs	r3, #0
 800b256:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
}
 800b25a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
       ci++, compptr++) {
    /* All components' quantization values must already be latched. */
    if ((qtable = compptr->quant_table) == NULL)
 800b25e:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800b260:	b312      	cbz	r2, 800b2a8 <start_output_pass+0xac>
      return FALSE;
    /* Verify DC & first 5 AC quantizers are nonzero to avoid zero-divide. */
    if (qtable->quantval[0] == 0 ||
 800b262:	8816      	ldrh	r6, [r2, #0]
 800b264:	b306      	cbz	r6, 800b2a8 <start_output_pass+0xac>
 800b266:	8856      	ldrh	r6, [r2, #2]
 800b268:	b1f6      	cbz	r6, 800b2a8 <start_output_pass+0xac>
	qtable->quantval[Q01_POS] == 0 ||
 800b26a:	8a16      	ldrh	r6, [r2, #16]
 800b26c:	b1e6      	cbz	r6, 800b2a8 <start_output_pass+0xac>
	qtable->quantval[Q10_POS] == 0 ||
 800b26e:	8c16      	ldrh	r6, [r2, #32]
 800b270:	b1d6      	cbz	r6, 800b2a8 <start_output_pass+0xac>
	qtable->quantval[Q20_POS] == 0 ||
 800b272:	8a56      	ldrh	r6, [r2, #18]
 800b274:	b1c6      	cbz	r6, 800b2a8 <start_output_pass+0xac>
	qtable->quantval[Q11_POS] == 0 ||
 800b276:	8892      	ldrh	r2, [r2, #4]
 800b278:	b1b2      	cbz	r2, 800b2a8 <start_output_pass+0xac>
	qtable->quantval[Q02_POS] == 0)
      return FALSE;
    /* DC values must be at least partly known for all components. */
    coef_bits = cinfo->coef_bits[ci];
 800b27a:	f8d4 60a0 	ldr.w	r6, [r4, #160]	; 0xa0
 800b27e:	021a      	lsls	r2, r3, #8
    if (coef_bits[0] < 0)
 800b280:	58b2      	ldr	r2, [r6, r2]
    coef_bits = cinfo->coef_bits[ci];
 800b282:	eb06 2803 	add.w	r8, r6, r3, lsl #8
    if (coef_bits[0] < 0)
 800b286:	2a00      	cmp	r2, #0
 800b288:	db0e      	blt.n	800b2a8 <start_output_pass+0xac>
      return FALSE;
    /* Block smoothing is helpful if some AC coefficients remain inaccurate. */
    for (coefi = 1; coefi <= 5; coefi++) {
 800b28a:	2201      	movs	r2, #1
      coef_bits_latch[coefi] = coef_bits[coefi];
 800b28c:	f858 6022 	ldr.w	r6, [r8, r2, lsl #2]
      if (coef_bits[coefi] != 0)
	smoothing_useful = TRUE;
 800b290:	2e00      	cmp	r6, #0
      coef_bits_latch[coefi] = coef_bits[coefi];
 800b292:	f847 6022 	str.w	r6, [r7, r2, lsl #2]
    for (coefi = 1; coefi <= 5; coefi++) {
 800b296:	f102 0201 	add.w	r2, r2, #1
	smoothing_useful = TRUE;
 800b29a:	bf18      	it	ne
 800b29c:	2101      	movne	r1, #1
    for (coefi = 1; coefi <= 5; coefi++) {
 800b29e:	2a06      	cmp	r2, #6
 800b2a0:	d1f4      	bne.n	800b28c <start_output_pass+0x90>
       ci++, compptr++) {
 800b2a2:	3301      	adds	r3, #1
 800b2a4:	3058      	adds	r0, #88	; 0x58
 800b2a6:	e7cd      	b.n	800b244 <start_output_pass+0x48>
      coef->pub.decompress_data = decompress_data;
 800b2a8:	4b01      	ldr	r3, [pc, #4]	; (800b2b0 <start_output_pass+0xb4>)
 800b2aa:	e7d2      	b.n	800b252 <start_output_pass+0x56>
 800b2ac:	0800b433 	.word	0x0800b433
 800b2b0:	0800b0f1 	.word	0x0800b0f1

0800b2b4 <decompress_onepass>:
  JDIMENSION last_MCU_col = cinfo->MCUs_per_row - 1;
 800b2b4:	f8d0 3164 	ldr.w	r3, [r0, #356]	; 0x164
{
 800b2b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  JDIMENSION last_MCU_col = cinfo->MCUs_per_row - 1;
 800b2bc:	3b01      	subs	r3, #1
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 800b2be:	f8d0 51c0 	ldr.w	r5, [r0, #448]	; 0x1c0
{
 800b2c2:	4604      	mov	r4, r0
 800b2c4:	ed2d 8b02 	vpush	{d8}
 800b2c8:	b08f      	sub	sp, #60	; 0x3c
  JDIMENSION last_MCU_col = cinfo->MCUs_per_row - 1;
 800b2ca:	9308      	str	r3, [sp, #32]
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800b2cc:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
{
 800b2d0:	910b      	str	r1, [sp, #44]	; 0x2c
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800b2d2:	3b01      	subs	r3, #1
 800b2d4:	9309      	str	r3, [sp, #36]	; 0x24
  for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
 800b2d6:	69ab      	ldr	r3, [r5, #24]
 800b2d8:	9303      	str	r3, [sp, #12]
      if (! (*cinfo->entropy->decode_mcu) (cinfo, coef->MCU_buffer)) {
 800b2da:	f105 0320 	add.w	r3, r5, #32
 800b2de:	ee08 3a10 	vmov	s16, r3
  for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
 800b2e2:	69eb      	ldr	r3, [r5, #28]
 800b2e4:	9a03      	ldr	r2, [sp, #12]
 800b2e6:	4293      	cmp	r3, r2
 800b2e8:	dc13      	bgt.n	800b312 <decompress_onepass+0x5e>
  cinfo->output_iMCU_row++;
 800b2ea:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  if (++(cinfo->input_iMCU_row) < cinfo->total_iMCU_rows) {
 800b2ee:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  cinfo->output_iMCU_row++;
 800b2f2:	3301      	adds	r3, #1
 800b2f4:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
  if (++(cinfo->input_iMCU_row) < cinfo->total_iMCU_rows) {
 800b2f8:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800b2fc:	3301      	adds	r3, #1
 800b2fe:	4293      	cmp	r3, r2
 800b300:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 800b304:	f080 808e 	bcs.w	800b424 <decompress_onepass+0x170>
    start_iMCU_row(cinfo);
 800b308:	4620      	mov	r0, r4
 800b30a:	f7ff fe39 	bl	800af80 <start_iMCU_row>
    return JPEG_ROW_COMPLETED;
 800b30e:	2003      	movs	r0, #3
 800b310:	e02a      	b.n	800b368 <decompress_onepass+0xb4>
    for (MCU_col_num = coef->MCU_ctr; MCU_col_num <= last_MCU_col;
 800b312:	696f      	ldr	r7, [r5, #20]
 800b314:	9b08      	ldr	r3, [sp, #32]
 800b316:	429f      	cmp	r7, r3
 800b318:	d905      	bls.n	800b326 <decompress_onepass+0x72>
    coef->MCU_ctr = 0;
 800b31a:	2300      	movs	r3, #0
 800b31c:	616b      	str	r3, [r5, #20]
       yoffset++) {
 800b31e:	9b03      	ldr	r3, [sp, #12]
 800b320:	3301      	adds	r3, #1
 800b322:	9303      	str	r3, [sp, #12]
 800b324:	e7dd      	b.n	800b2e2 <decompress_onepass+0x2e>
      if (cinfo->lim_Se)	/* can bypass in DC only case */
 800b326:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 800b32a:	b133      	cbz	r3, 800b33a <decompress_onepass+0x86>
	FMEMZERO((void FAR *) coef->MCU_buffer[0],
 800b32c:	f8d4 216c 	ldr.w	r2, [r4, #364]	; 0x16c
 800b330:	2100      	movs	r1, #0
 800b332:	6a28      	ldr	r0, [r5, #32]
 800b334:	01d2      	lsls	r2, r2, #7
 800b336:	f01e ff6d 	bl	802a214 <memset>
      if (! (*cinfo->entropy->decode_mcu) (cinfo, coef->MCU_buffer)) {
 800b33a:	f8d4 31d0 	ldr.w	r3, [r4, #464]	; 0x1d0
 800b33e:	ee18 1a10 	vmov	r1, s16
 800b342:	4620      	mov	r0, r4
 800b344:	685b      	ldr	r3, [r3, #4]
 800b346:	4798      	blx	r3
 800b348:	b158      	cbz	r0, 800b362 <decompress_onepass+0xae>
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800b34a:	f04f 0b00 	mov.w	fp, #0
 800b34e:	f504 73aa 	add.w	r3, r4, #340	; 0x154
      blkn = 0;			/* index of current DCT block within MCU */
 800b352:	46da      	mov	sl, fp
 800b354:	9305      	str	r3, [sp, #20]
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800b356:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800b35a:	455b      	cmp	r3, fp
 800b35c:	dc09      	bgt.n	800b372 <decompress_onepass+0xbe>
	 MCU_col_num++) {
 800b35e:	3701      	adds	r7, #1
 800b360:	e7d8      	b.n	800b314 <decompress_onepass+0x60>
	coef->MCU_vert_offset = yoffset;
 800b362:	9b03      	ldr	r3, [sp, #12]
	coef->MCU_ctr = MCU_col_num;
 800b364:	e9c5 7305 	strd	r7, r3, [r5, #20]
}
 800b368:	b00f      	add	sp, #60	; 0x3c
 800b36a:	ecbd 8b02 	vpop	{d8}
 800b36e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	compptr = cinfo->cur_comp_info[ci];
 800b372:	9b05      	ldr	r3, [sp, #20]
 800b374:	f853 1b04 	ldr.w	r1, [r3], #4
 800b378:	9305      	str	r3, [sp, #20]
	if (! compptr->component_needed) {
 800b37a:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800b37c:	b923      	cbnz	r3, 800b388 <decompress_onepass+0xd4>
	  blkn += compptr->MCU_blocks;
 800b37e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b380:	449a      	add	sl, r3
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800b382:	f10b 0b01 	add.w	fp, fp, #1
 800b386:	e7e6      	b.n	800b356 <decompress_onepass+0xa2>
	inverse_DCT = cinfo->idct->inverse_DCT[compptr->component_index];
 800b388:	684a      	ldr	r2, [r1, #4]
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 800b38a:	f04f 0800 	mov.w	r8, #0
	inverse_DCT = cinfo->idct->inverse_DCT[compptr->component_index];
 800b38e:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
	  yoffset * compptr->DCT_v_scaled_size;
 800b392:	9803      	ldr	r0, [sp, #12]
	inverse_DCT = cinfo->idct->inverse_DCT[compptr->component_index];
 800b394:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800b398:	685b      	ldr	r3, [r3, #4]
 800b39a:	461e      	mov	r6, r3
						    : compptr->last_col_width;
 800b39c:	9b08      	ldr	r3, [sp, #32]
 800b39e:	429f      	cmp	r7, r3
 800b3a0:	bf34      	ite	cc
 800b3a2:	6b8b      	ldrcc	r3, [r1, #56]	; 0x38
 800b3a4:	6c8b      	ldrcs	r3, [r1, #72]	; 0x48
 800b3a6:	9306      	str	r3, [sp, #24]
	  yoffset * compptr->DCT_v_scaled_size;
 800b3a8:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800b3aa:	4343      	muls	r3, r0
	output_ptr = output_buf[compptr->component_index] +
 800b3ac:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800b3ae:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 800b3b2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	start_col = MCU_col_num * compptr->MCU_sample_width;
 800b3b6:	6c4a      	ldr	r2, [r1, #68]	; 0x44
 800b3b8:	437a      	muls	r2, r7
 800b3ba:	920a      	str	r2, [sp, #40]	; 0x28
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 800b3bc:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 800b3be:	4542      	cmp	r2, r8
 800b3c0:	dddf      	ble.n	800b382 <decompress_onepass+0xce>
	  if (cinfo->input_iMCU_row < last_iMCU_row ||
 800b3c2:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 800b3c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b3c8:	4282      	cmp	r2, r0
 800b3ca:	d304      	bcc.n	800b3d6 <decompress_onepass+0x122>
 800b3cc:	9a03      	ldr	r2, [sp, #12]
 800b3ce:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
 800b3d0:	4442      	add	r2, r8
 800b3d2:	4290      	cmp	r0, r2
 800b3d4:	dd0b      	ble.n	800b3ee <decompress_onepass+0x13a>
 800b3d6:	f10a 0908 	add.w	r9, sl, #8
 800b3da:	eb05 0289 	add.w	r2, r5, r9, lsl #2
{
 800b3de:	f04f 0900 	mov.w	r9, #0
 800b3e2:	9207      	str	r2, [sp, #28]
 800b3e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b3e6:	9204      	str	r2, [sp, #16]
	    for (xindex = 0; xindex < useful_width; xindex++) {
 800b3e8:	9a06      	ldr	r2, [sp, #24]
 800b3ea:	4591      	cmp	r9, r2
 800b3ec:	db07      	blt.n	800b3fe <decompress_onepass+0x14a>
	  blkn += compptr->MCU_width;
 800b3ee:	6b8a      	ldr	r2, [r1, #56]	; 0x38
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 800b3f0:	f108 0801 	add.w	r8, r8, #1
	  blkn += compptr->MCU_width;
 800b3f4:	4492      	add	sl, r2
	  output_ptr += compptr->DCT_v_scaled_size;
 800b3f6:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 800b3f8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 800b3fc:	e7de      	b.n	800b3bc <decompress_onepass+0x108>
			      (JCOEFPTR) coef->MCU_buffer[blkn+xindex],
 800b3fe:	9807      	ldr	r0, [sp, #28]
	    for (xindex = 0; xindex < useful_width; xindex++) {
 800b400:	f109 0901 	add.w	r9, r9, #1
			      (JCOEFPTR) coef->MCU_buffer[blkn+xindex],
 800b404:	f850 2b04 	ldr.w	r2, [r0], #4
 800b408:	9007      	str	r0, [sp, #28]
	      (*inverse_DCT) (cinfo, compptr,
 800b40a:	9804      	ldr	r0, [sp, #16]
 800b40c:	e9cd 130c 	strd	r1, r3, [sp, #48]	; 0x30
 800b410:	9000      	str	r0, [sp, #0]
 800b412:	4620      	mov	r0, r4
 800b414:	47b0      	blx	r6
	      output_col += compptr->DCT_h_scaled_size;
 800b416:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b418:	9b04      	ldr	r3, [sp, #16]
 800b41a:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 800b41c:	4413      	add	r3, r2
 800b41e:	9304      	str	r3, [sp, #16]
	    for (xindex = 0; xindex < useful_width; xindex++) {
 800b420:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b422:	e7e1      	b.n	800b3e8 <decompress_onepass+0x134>
  (*cinfo->inputctl->finish_input_pass) (cinfo);
 800b424:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 800b428:	4620      	mov	r0, r4
 800b42a:	68db      	ldr	r3, [r3, #12]
 800b42c:	4798      	blx	r3
  return JPEG_SCAN_COMPLETED;
 800b42e:	2004      	movs	r0, #4
 800b430:	e79a      	b.n	800b368 <decompress_onepass+0xb4>

0800b432 <decompress_smooth_data>:
 * Variant of decompress_data for use when doing block smoothing.
 */

METHODDEF(int)
decompress_smooth_data (j_decompress_ptr cinfo, JSAMPIMAGE output_buf)
{
 800b432:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 800b436:	f8d0 31c0 	ldr.w	r3, [r0, #448]	; 0x1c0
{
 800b43a:	b0c5      	sub	sp, #276	; 0x114
 800b43c:	4604      	mov	r4, r0
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800b43e:	f8d0 5148 	ldr.w	r5, [r0, #328]	; 0x148
{
 800b442:	9122      	str	r1, [sp, #136]	; 0x88
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 800b444:	931e      	str	r3, [sp, #120]	; 0x78
  INT32 Q00,Q01,Q02,Q10,Q11,Q20, num;
  int DC1,DC2,DC3,DC4,DC5,DC6,DC7,DC8,DC9;
  int Al, pred;

  /* Force some input to be done if we are getting ahead of the input. */
  while (cinfo->input_scan_number <= cinfo->output_scan_number &&
 800b446:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800b44a:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 800b44e:	428b      	cmp	r3, r1
 800b450:	dc03      	bgt.n	800b45a <decompress_smooth_data+0x28>
	 ! cinfo->inputctl->eoi_reached) {
 800b452:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
  while (cinfo->input_scan_number <= cinfo->output_scan_number &&
 800b456:	6950      	ldr	r0, [r2, #20]
 800b458:	b1a8      	cbz	r0, 800b486 <decompress_smooth_data+0x54>
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800b45a:	1e6b      	subs	r3, r5, #1
    if ((*cinfo->inputctl->consume_input)(cinfo) == JPEG_SUSPENDED)
      return JPEG_SUSPENDED;
  }

  /* OK, output from the virtual arrays. */
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800b45c:	f8d4 50d8 	ldr.w	r5, [r4, #216]	; 0xd8
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800b460:	9320      	str	r3, [sp, #128]	; 0x80
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800b462:	2300      	movs	r3, #0
 800b464:	9303      	str	r3, [sp, #12]
 800b466:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b468:	9903      	ldr	r1, [sp, #12]
       ci++, compptr++) {
    /* Don't bother to IDCT an uninteresting component. */
    if (! compptr->component_needed)
      continue;
    /* Count non-dummy DCT block rows in this iMCU row. */
    if (cinfo->output_iMCU_row < last_iMCU_row) {
 800b46a:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800b46e:	428b      	cmp	r3, r1
 800b470:	dc1e      	bgt.n	800b4b0 <decompress_smooth_data+0x7e>
      }
      output_ptr += compptr->DCT_v_scaled_size;
    }
  }

  if (++(cinfo->output_iMCU_row) < cinfo->total_iMCU_rows)
 800b472:	3201      	adds	r2, #1
 800b474:	f8d4 0148 	ldr.w	r0, [r4, #328]	; 0x148
 800b478:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
    return JPEG_ROW_COMPLETED;
 800b47c:	4282      	cmp	r2, r0
 800b47e:	bf2c      	ite	cs
 800b480:	2004      	movcs	r0, #4
 800b482:	2003      	movcc	r0, #3
 800b484:	e011      	b.n	800b4aa <decompress_smooth_data+0x78>
    if (cinfo->input_scan_number == cinfo->output_scan_number) {
 800b486:	428b      	cmp	r3, r1
 800b488:	d10a      	bne.n	800b4a0 <decompress_smooth_data+0x6e>
      JDIMENSION delta = (cinfo->Ss == 0) ? 1 : 0;
 800b48a:	f8d4 1198 	ldr.w	r1, [r4, #408]	; 0x198
      if (cinfo->input_iMCU_row > cinfo->output_iMCU_row+delta)
 800b48e:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 800b492:	2900      	cmp	r1, #0
 800b494:	bf08      	it	eq
 800b496:	3301      	addeq	r3, #1
 800b498:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 800b49c:	4299      	cmp	r1, r3
 800b49e:	d8dc      	bhi.n	800b45a <decompress_smooth_data+0x28>
    if ((*cinfo->inputctl->consume_input)(cinfo) == JPEG_SUSPENDED)
 800b4a0:	6813      	ldr	r3, [r2, #0]
 800b4a2:	4620      	mov	r0, r4
 800b4a4:	4798      	blx	r3
 800b4a6:	2800      	cmp	r0, #0
 800b4a8:	d1cd      	bne.n	800b446 <decompress_smooth_data+0x14>
  return JPEG_SCAN_COMPLETED;
}
 800b4aa:	b045      	add	sp, #276	; 0x114
 800b4ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (! compptr->component_needed)
 800b4b0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800b4b2:	b923      	cbnz	r3, 800b4be <decompress_smooth_data+0x8c>
       ci++, compptr++) {
 800b4b4:	9b03      	ldr	r3, [sp, #12]
 800b4b6:	3558      	adds	r5, #88	; 0x58
 800b4b8:	3301      	adds	r3, #1
 800b4ba:	9303      	str	r3, [sp, #12]
 800b4bc:	e7d3      	b.n	800b466 <decompress_smooth_data+0x34>
    if (cinfo->output_iMCU_row < last_iMCU_row) {
 800b4be:	9b20      	ldr	r3, [sp, #128]	; 0x80
      block_rows = compptr->v_samp_factor;
 800b4c0:	68e8      	ldr	r0, [r5, #12]
    if (cinfo->output_iMCU_row < last_iMCU_row) {
 800b4c2:	4293      	cmp	r3, r2
 800b4c4:	f240 815a 	bls.w	800b77c <decompress_smooth_data+0x34a>
      access_rows = block_rows * 2; /* this and next iMCU row */
 800b4c8:	0043      	lsls	r3, r0, #1
      block_rows = compptr->v_samp_factor;
 800b4ca:	4681      	mov	r9, r0
      last_row = FALSE;
 800b4cc:	2100      	movs	r1, #0
      last_row = TRUE;
 800b4ce:	910f      	str	r1, [sp, #60]	; 0x3c
      buffer = (*cinfo->mem->access_virt_barray)
 800b4d0:	6861      	ldr	r1, [r4, #4]
 800b4d2:	9e03      	ldr	r6, [sp, #12]
 800b4d4:	f8d1 8020 	ldr.w	r8, [r1, #32]
 800b4d8:	991e      	ldr	r1, [sp, #120]	; 0x78
 800b4da:	3148      	adds	r1, #72	; 0x48
 800b4dc:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
    if (cinfo->output_iMCU_row > 0) {
 800b4e0:	2a00      	cmp	r2, #0
 800b4e2:	f000 8159 	beq.w	800b798 <decompress_smooth_data+0x366>
      buffer = (*cinfo->mem->access_virt_barray)
 800b4e6:	2600      	movs	r6, #0
	 (cinfo->output_iMCU_row - 1) * compptr->v_samp_factor,
 800b4e8:	3a01      	subs	r2, #1
      buffer = (*cinfo->mem->access_virt_barray)
 800b4ea:	4403      	add	r3, r0
 800b4ec:	4342      	muls	r2, r0
 800b4ee:	4620      	mov	r0, r4
 800b4f0:	9600      	str	r6, [sp, #0]
 800b4f2:	47c0      	blx	r8
      buffer += compptr->v_samp_factor;	/* point to current iMCU row */
 800b4f4:	68eb      	ldr	r3, [r5, #12]
      first_row = FALSE;
 800b4f6:	961d      	str	r6, [sp, #116]	; 0x74
      buffer += compptr->v_samp_factor;	/* point to current iMCU row */
 800b4f8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    coef_bits = coef->coef_bits_latch + (ci * SAVED_COEFS);
 800b4fc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b4fe:	2218      	movs	r2, #24
 800b500:	9903      	ldr	r1, [sp, #12]
 800b502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    inverse_DCT = cinfo->idct->inverse_DCT[ci];
 800b504:	9f03      	ldr	r7, [sp, #12]
    coef_bits = coef->coef_bits_latch + (ci * SAVED_COEFS);
 800b506:	fb02 3301 	mla	r3, r2, r1, r3
 800b50a:	9305      	str	r3, [sp, #20]
    quanttbl = compptr->quant_table;
 800b50c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
    Q00 = quanttbl->quantval[0];
 800b50e:	881a      	ldrh	r2, [r3, #0]
    Q01 = quanttbl->quantval[Q01_POS];
 800b510:	f8b3 e002 	ldrh.w	lr, [r3, #2]
    Q10 = quanttbl->quantval[Q10_POS];
 800b514:	f8b3 c010 	ldrh.w	ip, [r3, #16]
    Q20 = quanttbl->quantval[Q20_POS];
 800b518:	8c1e      	ldrh	r6, [r3, #32]
    Q11 = quanttbl->quantval[Q11_POS];
 800b51a:	8a59      	ldrh	r1, [r3, #18]
    Q00 = quanttbl->quantval[0];
 800b51c:	9206      	str	r2, [sp, #24]
    Q02 = quanttbl->quantval[Q02_POS];
 800b51e:	889a      	ldrh	r2, [r3, #4]
    inverse_DCT = cinfo->idct->inverse_DCT[ci];
 800b520:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
 800b524:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 800b528:	685b      	ldr	r3, [r3, #4]
 800b52a:	9321      	str	r3, [sp, #132]	; 0x84
    output_ptr = output_buf[ci];
 800b52c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b52e:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
 800b532:	930e      	str	r3, [sp, #56]	; 0x38
	    pred = (int) (((Q01<<7) - num) / (Q01<<8));
 800b534:	ea4f 13ce 	mov.w	r3, lr, lsl #7
 800b538:	9313      	str	r3, [sp, #76]	; 0x4c
 800b53a:	ea4f 230e 	mov.w	r3, lr, lsl #8
 800b53e:	9314      	str	r3, [sp, #80]	; 0x50
	    pred = (int) (((Q10<<7) - num) / (Q10<<8));
 800b540:	ea4f 13cc 	mov.w	r3, ip, lsl #7
 800b544:	9315      	str	r3, [sp, #84]	; 0x54
 800b546:	ea4f 230c 	mov.w	r3, ip, lsl #8
 800b54a:	9316      	str	r3, [sp, #88]	; 0x58
	    pred = (int) (((Q20<<7) - num) / (Q20<<8));
 800b54c:	01f3      	lsls	r3, r6, #7
 800b54e:	9317      	str	r3, [sp, #92]	; 0x5c
 800b550:	0233      	lsls	r3, r6, #8
 800b552:	9318      	str	r3, [sp, #96]	; 0x60
	    pred = (int) (((Q11<<7) - num) / (Q11<<8));
 800b554:	01cb      	lsls	r3, r1, #7
 800b556:	9319      	str	r3, [sp, #100]	; 0x64
 800b558:	020b      	lsls	r3, r1, #8
 800b55a:	931a      	str	r3, [sp, #104]	; 0x68
	    pred = (int) (((Q02<<7) - num) / (Q02<<8));
 800b55c:	01d3      	lsls	r3, r2, #7
 800b55e:	931b      	str	r3, [sp, #108]	; 0x6c
 800b560:	0213      	lsls	r3, r2, #8
 800b562:	931c      	str	r3, [sp, #112]	; 0x70
 800b564:	1f03      	subs	r3, r0, #4
 800b566:	930d      	str	r3, [sp, #52]	; 0x34
    for (block_row = 0; block_row < block_rows; block_row++) {
 800b568:	2300      	movs	r3, #0
 800b56a:	9304      	str	r3, [sp, #16]
      if (last_row && block_row == block_rows-1)
 800b56c:	f109 33ff 	add.w	r3, r9, #4294967295
 800b570:	9323      	str	r3, [sp, #140]	; 0x8c
    for (block_row = 0; block_row < block_rows; block_row++) {
 800b572:	9b04      	ldr	r3, [sp, #16]
 800b574:	454b      	cmp	r3, r9
 800b576:	da9d      	bge.n	800b4b4 <decompress_smooth_data+0x82>
      buffer_ptr = buffer[block_row];
 800b578:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b57a:	f853 8f04 	ldr.w	r8, [r3, #4]!
 800b57e:	930d      	str	r3, [sp, #52]	; 0x34
      if (first_row && block_row == 0)
 800b580:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b582:	b11b      	cbz	r3, 800b58c <decompress_smooth_data+0x15a>
 800b584:	9b04      	ldr	r3, [sp, #16]
 800b586:	2b00      	cmp	r3, #0
 800b588:	f000 810c 	beq.w	800b7a4 <decompress_smooth_data+0x372>
	prev_block_row = buffer[block_row-1];
 800b58c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b58e:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800b592:	9307      	str	r3, [sp, #28]
      if (last_row && block_row == block_rows-1)
 800b594:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b596:	b123      	cbz	r3, 800b5a2 <decompress_smooth_data+0x170>
 800b598:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b59a:	9a04      	ldr	r2, [sp, #16]
 800b59c:	4293      	cmp	r3, r2
 800b59e:	f000 8104 	beq.w	800b7aa <decompress_smooth_data+0x378>
	next_block_row = buffer[block_row+1];
 800b5a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b5a4:	685b      	ldr	r3, [r3, #4]
 800b5a6:	9308      	str	r3, [sp, #32]
      DC1 = DC2 = DC3 = (int) prev_block_row[0][0];
 800b5a8:	9b07      	ldr	r3, [sp, #28]
	jcopy_block_row(buffer_ptr, (JBLOCKROW) workspace, (JDIMENSION) 1);
 800b5aa:	2601      	movs	r6, #1
      last_block_column = compptr->width_in_blocks - 1;
 800b5ac:	69ea      	ldr	r2, [r5, #28]
      DC1 = DC2 = DC3 = (int) prev_block_row[0][0];
 800b5ae:	f9b3 3000 	ldrsh.w	r3, [r3]
      last_block_column = compptr->width_in_blocks - 1;
 800b5b2:	3a01      	subs	r2, #1
      DC1 = DC2 = DC3 = (int) prev_block_row[0][0];
 800b5b4:	9312      	str	r3, [sp, #72]	; 0x48
      DC4 = DC5 = DC6 = (int) buffer_ptr[0][0];
 800b5b6:	f9b8 3000 	ldrsh.w	r3, [r8]
      last_block_column = compptr->width_in_blocks - 1;
 800b5ba:	921f      	str	r2, [sp, #124]	; 0x7c
      output_col = 0;
 800b5bc:	2200      	movs	r2, #0
      DC4 = DC5 = DC6 = (int) buffer_ptr[0][0];
 800b5be:	461f      	mov	r7, r3
      DC7 = DC8 = DC9 = (int) next_block_row[0][0];
 800b5c0:	9b08      	ldr	r3, [sp, #32]
      DC1 = DC2 = DC3 = (int) prev_block_row[0][0];
 800b5c2:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
      DC7 = DC8 = DC9 = (int) next_block_row[0][0];
 800b5c6:	f9b3 3000 	ldrsh.w	r3, [r3]
      DC4 = DC5 = DC6 = (int) buffer_ptr[0][0];
 800b5ca:	46ba      	mov	sl, r7
      DC7 = DC8 = DC9 = (int) next_block_row[0][0];
 800b5cc:	9309      	str	r3, [sp, #36]	; 0x24
      for (block_num = 0; block_num <= last_block_column; block_num++) {
 800b5ce:	e9cd 220b 	strd	r2, r2, [sp, #44]	; 0x2c
	jcopy_block_row(buffer_ptr, (JBLOCKROW) workspace, (JDIMENSION) 1);
 800b5d2:	2201      	movs	r2, #1
 800b5d4:	a924      	add	r1, sp, #144	; 0x90
 800b5d6:	4640      	mov	r0, r8
 800b5d8:	930a      	str	r3, [sp, #40]	; 0x28
 800b5da:	f00b fe0e 	bl	80171fa <jcopy_block_row>
	if (block_num < last_block_column) {
 800b5de:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b5e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b5e2:	4293      	cmp	r3, r2
 800b5e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b5e6:	f240 80ea 	bls.w	800b7be <decompress_smooth_data+0x38c>
	  DC3 = (int) prev_block_row[1][0];
 800b5ea:	9a07      	ldr	r2, [sp, #28]
 800b5ec:	f9b2 2080 	ldrsh.w	r2, [r2, #128]	; 0x80
 800b5f0:	9210      	str	r2, [sp, #64]	; 0x40
	  DC6 = (int) buffer_ptr[1][0];
 800b5f2:	f9b8 2080 	ldrsh.w	r2, [r8, #128]	; 0x80
 800b5f6:	920a      	str	r2, [sp, #40]	; 0x28
	  DC9 = (int) next_block_row[1][0];
 800b5f8:	9a08      	ldr	r2, [sp, #32]
 800b5fa:	f9b2 2080 	ldrsh.w	r2, [r2, #128]	; 0x80
 800b5fe:	9211      	str	r2, [sp, #68]	; 0x44
	if ((Al=coef_bits[1]) != 0 && workspace[1] == 0) {
 800b600:	9a05      	ldr	r2, [sp, #20]
 800b602:	6851      	ldr	r1, [r2, #4]
 800b604:	b1c1      	cbz	r1, 800b638 <decompress_smooth_data+0x206>
 800b606:	f9bd 2092 	ldrsh.w	r2, [sp, #146]	; 0x92
 800b60a:	b9aa      	cbnz	r2, 800b638 <decompress_smooth_data+0x206>
	  num = 36 * Q00 * (DC4 - DC6);
 800b60c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b60e:	1a3a      	subs	r2, r7, r0
 800b610:	9806      	ldr	r0, [sp, #24]
 800b612:	4342      	muls	r2, r0
	  if (num >= 0) {
 800b614:	2024      	movs	r0, #36	; 0x24
 800b616:	4342      	muls	r2, r0
	    pred = (int) (((Q01<<7) + num) / (Q01<<8));
 800b618:	9813      	ldr	r0, [sp, #76]	; 0x4c
	  if (num >= 0) {
 800b61a:	f100 80d7 	bmi.w	800b7cc <decompress_smooth_data+0x39a>
	    pred = (int) (((Q01<<7) + num) / (Q01<<8));
 800b61e:	4402      	add	r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800b620:	2900      	cmp	r1, #0
	    pred = (int) (((Q01<<7) + num) / (Q01<<8));
 800b622:	9814      	ldr	r0, [sp, #80]	; 0x50
 800b624:	fbb2 f2f0 	udiv	r2, r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800b628:	dd04      	ble.n	800b634 <decompress_smooth_data+0x202>
 800b62a:	fa06 f101 	lsl.w	r1, r6, r1
 800b62e:	4291      	cmp	r1, r2
 800b630:	dc00      	bgt.n	800b634 <decompress_smooth_data+0x202>
	      pred = (1<<Al)-1;
 800b632:	1e4a      	subs	r2, r1, #1
	  workspace[1] = (JCOEF) pred;
 800b634:	f8ad 2092 	strh.w	r2, [sp, #146]	; 0x92
	if ((Al=coef_bits[2]) != 0 && workspace[8] == 0) {
 800b638:	9a05      	ldr	r2, [sp, #20]
 800b63a:	6891      	ldr	r1, [r2, #8]
 800b63c:	b1c9      	cbz	r1, 800b672 <decompress_smooth_data+0x240>
 800b63e:	f9bd 20a0 	ldrsh.w	r2, [sp, #160]	; 0xa0
 800b642:	b9b2      	cbnz	r2, 800b672 <decompress_smooth_data+0x240>
	  num = 36 * Q00 * (DC2 - DC8);
 800b644:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b646:	9806      	ldr	r0, [sp, #24]
 800b648:	ebab 0202 	sub.w	r2, fp, r2
 800b64c:	4342      	muls	r2, r0
	  if (num >= 0) {
 800b64e:	2024      	movs	r0, #36	; 0x24
 800b650:	4342      	muls	r2, r0
	    pred = (int) (((Q10<<7) + num) / (Q10<<8));
 800b652:	9815      	ldr	r0, [sp, #84]	; 0x54
	  if (num >= 0) {
 800b654:	f100 80c8 	bmi.w	800b7e8 <decompress_smooth_data+0x3b6>
	    pred = (int) (((Q10<<7) + num) / (Q10<<8));
 800b658:	4402      	add	r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800b65a:	2900      	cmp	r1, #0
	    pred = (int) (((Q10<<7) + num) / (Q10<<8));
 800b65c:	9816      	ldr	r0, [sp, #88]	; 0x58
 800b65e:	fbb2 f2f0 	udiv	r2, r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800b662:	dd04      	ble.n	800b66e <decompress_smooth_data+0x23c>
 800b664:	fa06 f101 	lsl.w	r1, r6, r1
 800b668:	4291      	cmp	r1, r2
 800b66a:	dc00      	bgt.n	800b66e <decompress_smooth_data+0x23c>
	      pred = (1<<Al)-1;
 800b66c:	1e4a      	subs	r2, r1, #1
	  workspace[8] = (JCOEF) pred;
 800b66e:	f8ad 20a0 	strh.w	r2, [sp, #160]	; 0xa0
	if ((Al=coef_bits[3]) != 0 && workspace[16] == 0) {
 800b672:	9a05      	ldr	r2, [sp, #20]
 800b674:	68d1      	ldr	r1, [r2, #12]
 800b676:	b1d1      	cbz	r1, 800b6ae <decompress_smooth_data+0x27c>
 800b678:	f9bd 20b0 	ldrsh.w	r2, [sp, #176]	; 0xb0
 800b67c:	b9ba      	cbnz	r2, 800b6ae <decompress_smooth_data+0x27c>
	  num = 9 * Q00 * (DC2 + DC8 - 2*DC5);
 800b67e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b680:	9806      	ldr	r0, [sp, #24]
 800b682:	445a      	add	r2, fp
 800b684:	eba2 024a 	sub.w	r2, r2, sl, lsl #1
 800b688:	4342      	muls	r2, r0
	    pred = (int) (((Q20<<7) + num) / (Q20<<8));
 800b68a:	9817      	ldr	r0, [sp, #92]	; 0x5c
	  if (num >= 0) {
 800b68c:	eb12 02c2 	adds.w	r2, r2, r2, lsl #3
 800b690:	f100 80b8 	bmi.w	800b804 <decompress_smooth_data+0x3d2>
	    pred = (int) (((Q20<<7) + num) / (Q20<<8));
 800b694:	4402      	add	r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800b696:	2900      	cmp	r1, #0
	    pred = (int) (((Q20<<7) + num) / (Q20<<8));
 800b698:	9818      	ldr	r0, [sp, #96]	; 0x60
 800b69a:	fbb2 f2f0 	udiv	r2, r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800b69e:	dd04      	ble.n	800b6aa <decompress_smooth_data+0x278>
 800b6a0:	fa06 f101 	lsl.w	r1, r6, r1
 800b6a4:	4291      	cmp	r1, r2
 800b6a6:	dc00      	bgt.n	800b6aa <decompress_smooth_data+0x278>
	      pred = (1<<Al)-1;
 800b6a8:	1e4a      	subs	r2, r1, #1
	  workspace[16] = (JCOEF) pred;
 800b6aa:	f8ad 20b0 	strh.w	r2, [sp, #176]	; 0xb0
	if ((Al=coef_bits[4]) != 0 && workspace[9] == 0) {
 800b6ae:	9a05      	ldr	r2, [sp, #20]
 800b6b0:	6912      	ldr	r2, [r2, #16]
 800b6b2:	b1e2      	cbz	r2, 800b6ee <decompress_smooth_data+0x2bc>
 800b6b4:	f9bd 10a2 	ldrsh.w	r1, [sp, #162]	; 0xa2
 800b6b8:	b9c9      	cbnz	r1, 800b6ee <decompress_smooth_data+0x2bc>
	  num = 5 * Q00 * (DC1 - DC3 - DC7 + DC9);
 800b6ba:	9912      	ldr	r1, [sp, #72]	; 0x48
 800b6bc:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b6be:	1a09      	subs	r1, r1, r0
 800b6c0:	1acb      	subs	r3, r1, r3
 800b6c2:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b6c4:	440b      	add	r3, r1
 800b6c6:	9906      	ldr	r1, [sp, #24]
 800b6c8:	434b      	muls	r3, r1
	    pred = (int) (((Q11<<7) + num) / (Q11<<8));
 800b6ca:	9919      	ldr	r1, [sp, #100]	; 0x64
	  if (num >= 0) {
 800b6cc:	eb13 0383 	adds.w	r3, r3, r3, lsl #2
 800b6d0:	f100 80a6 	bmi.w	800b820 <decompress_smooth_data+0x3ee>
	    pred = (int) (((Q11<<7) + num) / (Q11<<8));
 800b6d4:	440b      	add	r3, r1
	    if (Al > 0 && pred >= (1<<Al))
 800b6d6:	2a00      	cmp	r2, #0
	    pred = (int) (((Q11<<7) + num) / (Q11<<8));
 800b6d8:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b6da:	fbb3 f3f1 	udiv	r3, r3, r1
	    if (Al > 0 && pred >= (1<<Al))
 800b6de:	dd04      	ble.n	800b6ea <decompress_smooth_data+0x2b8>
 800b6e0:	fa06 f202 	lsl.w	r2, r6, r2
 800b6e4:	429a      	cmp	r2, r3
 800b6e6:	dc00      	bgt.n	800b6ea <decompress_smooth_data+0x2b8>
	      pred = (1<<Al)-1;
 800b6e8:	1e53      	subs	r3, r2, #1
	  workspace[9] = (JCOEF) pred;
 800b6ea:	f8ad 30a2 	strh.w	r3, [sp, #162]	; 0xa2
	if ((Al=coef_bits[5]) != 0 && workspace[2] == 0) {
 800b6ee:	9b05      	ldr	r3, [sp, #20]
 800b6f0:	695a      	ldr	r2, [r3, #20]
 800b6f2:	b1da      	cbz	r2, 800b72c <decompress_smooth_data+0x2fa>
 800b6f4:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
 800b6f8:	b9c3      	cbnz	r3, 800b72c <decompress_smooth_data+0x2fa>
	  num = 9 * Q00 * (DC4 + DC6 - 2*DC5);
 800b6fa:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b6fc:	463b      	mov	r3, r7
 800b6fe:	440b      	add	r3, r1
 800b700:	9906      	ldr	r1, [sp, #24]
 800b702:	eba3 034a 	sub.w	r3, r3, sl, lsl #1
 800b706:	434b      	muls	r3, r1
	    pred = (int) (((Q02<<7) + num) / (Q02<<8));
 800b708:	991b      	ldr	r1, [sp, #108]	; 0x6c
	  if (num >= 0) {
 800b70a:	eb13 03c3 	adds.w	r3, r3, r3, lsl #3
 800b70e:	f100 8095 	bmi.w	800b83c <decompress_smooth_data+0x40a>
	    pred = (int) (((Q02<<7) + num) / (Q02<<8));
 800b712:	440b      	add	r3, r1
	    if (Al > 0 && pred >= (1<<Al))
 800b714:	2a00      	cmp	r2, #0
	    pred = (int) (((Q02<<7) + num) / (Q02<<8));
 800b716:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b718:	fbb3 f3f1 	udiv	r3, r3, r1
	    if (Al > 0 && pred >= (1<<Al))
 800b71c:	dd04      	ble.n	800b728 <decompress_smooth_data+0x2f6>
 800b71e:	fa06 f202 	lsl.w	r2, r6, r2
 800b722:	429a      	cmp	r2, r3
 800b724:	dc00      	bgt.n	800b728 <decompress_smooth_data+0x2f6>
	      pred = (1<<Al)-1;
 800b726:	1e53      	subs	r3, r2, #1
	  workspace[2] = (JCOEF) pred;
 800b728:	f8ad 3094 	strh.w	r3, [sp, #148]	; 0x94
	(*inverse_DCT) (cinfo, compptr, (JCOEFPTR) workspace,
 800b72c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b72e:	aa24      	add	r2, sp, #144	; 0x90
 800b730:	4629      	mov	r1, r5
 800b732:	9f21      	ldr	r7, [sp, #132]	; 0x84
 800b734:	9300      	str	r3, [sp, #0]
 800b736:	4620      	mov	r0, r4
 800b738:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	buffer_ptr++, prev_block_row++, next_block_row++;
 800b73a:	f108 0880 	add.w	r8, r8, #128	; 0x80
	(*inverse_DCT) (cinfo, compptr, (JCOEFPTR) workspace,
 800b73e:	47b8      	blx	r7
	buffer_ptr++, prev_block_row++, next_block_row++;
 800b740:	9b07      	ldr	r3, [sp, #28]
	output_col += compptr->DCT_h_scaled_size;
 800b742:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b744:	4657      	mov	r7, sl
	buffer_ptr++, prev_block_row++, next_block_row++;
 800b746:	3380      	adds	r3, #128	; 0x80
 800b748:	f8cd b048 	str.w	fp, [sp, #72]	; 0x48
 800b74c:	9307      	str	r3, [sp, #28]
 800b74e:	9b08      	ldr	r3, [sp, #32]
 800b750:	3380      	adds	r3, #128	; 0x80
 800b752:	9308      	str	r3, [sp, #32]
	output_col += compptr->DCT_h_scaled_size;
 800b754:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b756:	18d3      	adds	r3, r2, r3
      for (block_num = 0; block_num <= last_block_column; block_num++) {
 800b758:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
	output_col += compptr->DCT_h_scaled_size;
 800b75a:	930b      	str	r3, [sp, #44]	; 0x2c
      for (block_num = 0; block_num <= last_block_column; block_num++) {
 800b75c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b75e:	3301      	adds	r3, #1
 800b760:	930c      	str	r3, [sp, #48]	; 0x30
 800b762:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b764:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b766:	428a      	cmp	r2, r1
 800b768:	d222      	bcs.n	800b7b0 <decompress_smooth_data+0x37e>
      output_ptr += compptr->DCT_v_scaled_size;
 800b76a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b76c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800b76e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b772:	930e      	str	r3, [sp, #56]	; 0x38
    for (block_row = 0; block_row < block_rows; block_row++) {
 800b774:	9b04      	ldr	r3, [sp, #16]
 800b776:	3301      	adds	r3, #1
 800b778:	9304      	str	r3, [sp, #16]
 800b77a:	e6fa      	b.n	800b572 <decompress_smooth_data+0x140>
      block_rows = (int) (compptr->height_in_blocks % compptr->v_samp_factor);
 800b77c:	6a2b      	ldr	r3, [r5, #32]
 800b77e:	fbb3 f1f0 	udiv	r1, r3, r0
 800b782:	fb00 3911 	mls	r9, r0, r1, r3
      if (block_rows == 0) block_rows = compptr->v_samp_factor;
 800b786:	f1b9 0f00 	cmp.w	r9, #0
 800b78a:	d103      	bne.n	800b794 <decompress_smooth_data+0x362>
 800b78c:	4603      	mov	r3, r0
 800b78e:	4681      	mov	r9, r0
      last_row = TRUE;
 800b790:	2101      	movs	r1, #1
 800b792:	e69c      	b.n	800b4ce <decompress_smooth_data+0x9c>
 800b794:	464b      	mov	r3, r9
 800b796:	e7fb      	b.n	800b790 <decompress_smooth_data+0x35e>
      buffer = (*cinfo->mem->access_virt_barray)
 800b798:	4620      	mov	r0, r4
 800b79a:	9200      	str	r2, [sp, #0]
 800b79c:	47c0      	blx	r8
      first_row = TRUE;
 800b79e:	2301      	movs	r3, #1
 800b7a0:	931d      	str	r3, [sp, #116]	; 0x74
 800b7a2:	e6ab      	b.n	800b4fc <decompress_smooth_data+0xca>
      buffer_ptr = buffer[block_row];
 800b7a4:	f8cd 801c 	str.w	r8, [sp, #28]
 800b7a8:	e6f4      	b.n	800b594 <decompress_smooth_data+0x162>
 800b7aa:	f8cd 8020 	str.w	r8, [sp, #32]
 800b7ae:	e6fb      	b.n	800b5a8 <decompress_smooth_data+0x176>
	DC7 = DC8; DC8 = DC9;
 800b7b0:	9a11      	ldr	r2, [sp, #68]	; 0x44
	DC4 = DC5; DC5 = DC6;
 800b7b2:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
	DC1 = DC2; DC2 = DC3;
 800b7b6:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
	DC7 = DC8; DC8 = DC9;
 800b7ba:	9209      	str	r2, [sp, #36]	; 0x24
 800b7bc:	e709      	b.n	800b5d2 <decompress_smooth_data+0x1a0>
 800b7be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b7c0:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 800b7c4:	9211      	str	r2, [sp, #68]	; 0x44
 800b7c6:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
 800b7ca:	e719      	b.n	800b600 <decompress_smooth_data+0x1ce>
	    pred = (int) (((Q01<<7) - num) / (Q01<<8));
 800b7cc:	1a82      	subs	r2, r0, r2
	    if (Al > 0 && pred >= (1<<Al))
 800b7ce:	2900      	cmp	r1, #0
	    pred = (int) (((Q01<<7) - num) / (Q01<<8));
 800b7d0:	9814      	ldr	r0, [sp, #80]	; 0x50
 800b7d2:	fbb2 f2f0 	udiv	r2, r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800b7d6:	dd05      	ble.n	800b7e4 <decompress_smooth_data+0x3b2>
 800b7d8:	fa06 f101 	lsl.w	r1, r6, r1
 800b7dc:	4291      	cmp	r1, r2
	      pred = (1<<Al)-1;
 800b7de:	bfd8      	it	le
 800b7e0:	f101 32ff 	addle.w	r2, r1, #4294967295
	    pred = -pred;
 800b7e4:	4252      	negs	r2, r2
 800b7e6:	e725      	b.n	800b634 <decompress_smooth_data+0x202>
	    pred = (int) (((Q10<<7) - num) / (Q10<<8));
 800b7e8:	1a82      	subs	r2, r0, r2
	    if (Al > 0 && pred >= (1<<Al))
 800b7ea:	2900      	cmp	r1, #0
	    pred = (int) (((Q10<<7) - num) / (Q10<<8));
 800b7ec:	9816      	ldr	r0, [sp, #88]	; 0x58
 800b7ee:	fbb2 f2f0 	udiv	r2, r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800b7f2:	dd05      	ble.n	800b800 <decompress_smooth_data+0x3ce>
 800b7f4:	fa06 f101 	lsl.w	r1, r6, r1
 800b7f8:	4291      	cmp	r1, r2
	      pred = (1<<Al)-1;
 800b7fa:	bfd8      	it	le
 800b7fc:	f101 32ff 	addle.w	r2, r1, #4294967295
	    pred = -pred;
 800b800:	4252      	negs	r2, r2
 800b802:	e734      	b.n	800b66e <decompress_smooth_data+0x23c>
	    pred = (int) (((Q20<<7) - num) / (Q20<<8));
 800b804:	1a82      	subs	r2, r0, r2
	    if (Al > 0 && pred >= (1<<Al))
 800b806:	2900      	cmp	r1, #0
	    pred = (int) (((Q20<<7) - num) / (Q20<<8));
 800b808:	9818      	ldr	r0, [sp, #96]	; 0x60
 800b80a:	fbb2 f2f0 	udiv	r2, r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800b80e:	dd05      	ble.n	800b81c <decompress_smooth_data+0x3ea>
 800b810:	fa06 f101 	lsl.w	r1, r6, r1
 800b814:	4291      	cmp	r1, r2
	      pred = (1<<Al)-1;
 800b816:	bfd8      	it	le
 800b818:	f101 32ff 	addle.w	r2, r1, #4294967295
	    pred = -pred;
 800b81c:	4252      	negs	r2, r2
 800b81e:	e744      	b.n	800b6aa <decompress_smooth_data+0x278>
	    pred = (int) (((Q11<<7) - num) / (Q11<<8));
 800b820:	1acb      	subs	r3, r1, r3
	    if (Al > 0 && pred >= (1<<Al))
 800b822:	2a00      	cmp	r2, #0
	    pred = (int) (((Q11<<7) - num) / (Q11<<8));
 800b824:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b826:	fbb3 f3f1 	udiv	r3, r3, r1
	    if (Al > 0 && pred >= (1<<Al))
 800b82a:	dd05      	ble.n	800b838 <decompress_smooth_data+0x406>
 800b82c:	fa06 f202 	lsl.w	r2, r6, r2
 800b830:	429a      	cmp	r2, r3
	      pred = (1<<Al)-1;
 800b832:	bfd8      	it	le
 800b834:	f102 33ff 	addle.w	r3, r2, #4294967295
	    pred = -pred;
 800b838:	425b      	negs	r3, r3
 800b83a:	e756      	b.n	800b6ea <decompress_smooth_data+0x2b8>
	    pred = (int) (((Q02<<7) - num) / (Q02<<8));
 800b83c:	1acb      	subs	r3, r1, r3
	    if (Al > 0 && pred >= (1<<Al))
 800b83e:	2a00      	cmp	r2, #0
	    pred = (int) (((Q02<<7) - num) / (Q02<<8));
 800b840:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b842:	fbb3 f3f1 	udiv	r3, r3, r1
	    if (Al > 0 && pred >= (1<<Al))
 800b846:	dd05      	ble.n	800b854 <decompress_smooth_data+0x422>
 800b848:	fa06 f202 	lsl.w	r2, r6, r2
 800b84c:	429a      	cmp	r2, r3
	      pred = (1<<Al)-1;
 800b84e:	bfd8      	it	le
 800b850:	f102 33ff 	addle.w	r3, r2, #4294967295
	    pred = -pred;
 800b854:	425b      	negs	r3, r3
 800b856:	e767      	b.n	800b728 <decompress_smooth_data+0x2f6>

0800b858 <jinit_d_coef_controller>:
jinit_d_coef_controller (j_decompress_ptr cinfo, boolean need_full_buffer)
{
  my_coef_ptr coef;

  coef = (my_coef_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b858:	6843      	ldr	r3, [r0, #4]
 800b85a:	2274      	movs	r2, #116	; 0x74
{
 800b85c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b860:	681b      	ldr	r3, [r3, #0]
{
 800b862:	b085      	sub	sp, #20
 800b864:	460e      	mov	r6, r1
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b866:	2101      	movs	r1, #1
{
 800b868:	4605      	mov	r5, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b86a:	4798      	blx	r3
				SIZEOF(my_coef_controller));
  cinfo->coef = (struct jpeg_d_coef_controller *) coef;
  coef->pub.start_input_pass = start_input_pass;
 800b86c:	4b2c      	ldr	r3, [pc, #176]	; (800b920 <jinit_d_coef_controller+0xc8>)
  coef->pub.start_output_pass = start_output_pass;
#ifdef BLOCK_SMOOTHING_SUPPORTED
  coef->coef_bits_latch = NULL;
 800b86e:	2700      	movs	r7, #0
  cinfo->coef = (struct jpeg_d_coef_controller *) coef;
 800b870:	f8c5 01c0 	str.w	r0, [r5, #448]	; 0x1c0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b874:	4604      	mov	r4, r0
  coef->pub.start_input_pass = start_input_pass;
 800b876:	6003      	str	r3, [r0, #0]
  coef->pub.start_output_pass = start_output_pass;
 800b878:	f100 0948 	add.w	r9, r0, #72	; 0x48
 800b87c:	4b29      	ldr	r3, [pc, #164]	; (800b924 <jinit_d_coef_controller+0xcc>)
  coef->coef_bits_latch = NULL;
 800b87e:	6707      	str	r7, [r0, #112]	; 0x70
  coef->pub.start_output_pass = start_output_pass;
 800b880:	6083      	str	r3, [r0, #8]
#endif

  /* Create the coefficient buffer. */
  if (need_full_buffer) {
 800b882:	b37e      	cbz	r6, 800b8e4 <jinit_d_coef_controller+0x8c>
    /* padded to a multiple of samp_factor DCT blocks in each direction. */
    /* Note we ask for a pre-zeroed array. */
    int ci, access_rows;
    jpeg_component_info *compptr;

    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800b884:	f8d5 60d8 	ldr.w	r6, [r5, #216]	; 0xd8
 800b888:	46ca      	mov	sl, r9
 800b88a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b88c:	42bb      	cmp	r3, r7
 800b88e:	dc07      	bgt.n	800b8a0 <jinit_d_coef_controller+0x48>
				(long) compptr->h_samp_factor),
	 (JDIMENSION) jround_up((long) compptr->height_in_blocks,
				(long) compptr->v_samp_factor),
	 (JDIMENSION) access_rows);
    }
    coef->pub.consume_data = consume_data;
 800b890:	4b25      	ldr	r3, [pc, #148]	; (800b928 <jinit_d_coef_controller+0xd0>)
 800b892:	6063      	str	r3, [r4, #4]
    coef->pub.decompress_data = decompress_data;
 800b894:	4b25      	ldr	r3, [pc, #148]	; (800b92c <jinit_d_coef_controller+0xd4>)
    coef->pub.coef_arrays = coef->whole_image; /* link to virtual arrays */
 800b896:	e9c4 3903 	strd	r3, r9, [r4, #12]
	       (size_t) (D_MAX_BLOCKS_IN_MCU * SIZEOF(JBLOCK)));
    coef->pub.consume_data = dummy_consume_data;
    coef->pub.decompress_data = decompress_onepass;
    coef->pub.coef_arrays = NULL; /* flag for no virtual arrays */
  }
}
 800b89a:	b005      	add	sp, #20
 800b89c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (cinfo->progressive_mode)
 800b8a0:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
      access_rows = compptr->v_samp_factor;
 800b8a4:	f8d6 800c 	ldr.w	r8, [r6, #12]
      if (cinfo->progressive_mode)
 800b8a8:	b10b      	cbz	r3, 800b8ae <jinit_d_coef_controller+0x56>
	access_rows *= 3;
 800b8aa:	eb08 0848 	add.w	r8, r8, r8, lsl #1
      coef->whole_image[ci] = (*cinfo->mem->request_virt_barray)
 800b8ae:	686b      	ldr	r3, [r5, #4]
	 ci++, compptr++) {
 800b8b0:	3701      	adds	r7, #1
	 (JDIMENSION) jround_up((long) compptr->width_in_blocks,
 800b8b2:	68b1      	ldr	r1, [r6, #8]
	 ci++, compptr++) {
 800b8b4:	3658      	adds	r6, #88	; 0x58
	 (JDIMENSION) jround_up((long) compptr->width_in_blocks,
 800b8b6:	f856 0c3c 	ldr.w	r0, [r6, #-60]
      coef->whole_image[ci] = (*cinfo->mem->request_virt_barray)
 800b8ba:	f8d3 b014 	ldr.w	fp, [r3, #20]
	 (JDIMENSION) jround_up((long) compptr->width_in_blocks,
 800b8be:	f00b fc82 	bl	80171c6 <jround_up>
	 (JDIMENSION) jround_up((long) compptr->height_in_blocks,
 800b8c2:	f856 1c4c 	ldr.w	r1, [r6, #-76]
	 (JDIMENSION) jround_up((long) compptr->width_in_blocks,
 800b8c6:	9003      	str	r0, [sp, #12]
	 (JDIMENSION) jround_up((long) compptr->height_in_blocks,
 800b8c8:	f856 0c38 	ldr.w	r0, [r6, #-56]
 800b8cc:	f00b fc7b 	bl	80171c6 <jround_up>
      coef->whole_image[ci] = (*cinfo->mem->request_virt_barray)
 800b8d0:	2201      	movs	r2, #1
 800b8d2:	9b03      	ldr	r3, [sp, #12]
 800b8d4:	4611      	mov	r1, r2
 800b8d6:	e9cd 0800 	strd	r0, r8, [sp]
 800b8da:	4628      	mov	r0, r5
 800b8dc:	47d8      	blx	fp
 800b8de:	f84a 0b04 	str.w	r0, [sl], #4
	 ci++, compptr++) {
 800b8e2:	e7d2      	b.n	800b88a <jinit_d_coef_controller+0x32>
      (*cinfo->mem->alloc_large) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b8e4:	686b      	ldr	r3, [r5, #4]
 800b8e6:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 800b8ea:	2101      	movs	r1, #1
 800b8ec:	4628      	mov	r0, r5
 800b8ee:	685b      	ldr	r3, [r3, #4]
 800b8f0:	4798      	blx	r3
    for (i = 0; i < D_MAX_BLOCKS_IN_MCU; i++) {
 800b8f2:	f104 0320 	add.w	r3, r4, #32
 800b8f6:	4602      	mov	r2, r0
      coef->MCU_buffer[i] = buffer + i;
 800b8f8:	f843 2b04 	str.w	r2, [r3], #4
    for (i = 0; i < D_MAX_BLOCKS_IN_MCU; i++) {
 800b8fc:	454b      	cmp	r3, r9
 800b8fe:	f102 0280 	add.w	r2, r2, #128	; 0x80
 800b902:	d1f9      	bne.n	800b8f8 <jinit_d_coef_controller+0xa0>
    if (cinfo->lim_Se == 0)	/* DC only case: want to bypass later */
 800b904:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
 800b908:	b919      	cbnz	r1, 800b912 <jinit_d_coef_controller+0xba>
      FMEMZERO((void FAR *) buffer,
 800b90a:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 800b90e:	f01e fc81 	bl	802a214 <memset>
    coef->pub.consume_data = dummy_consume_data;
 800b912:	4b07      	ldr	r3, [pc, #28]	; (800b930 <jinit_d_coef_controller+0xd8>)
 800b914:	6063      	str	r3, [r4, #4]
    coef->pub.decompress_data = decompress_onepass;
 800b916:	4b07      	ldr	r3, [pc, #28]	; (800b934 <jinit_d_coef_controller+0xdc>)
 800b918:	60e3      	str	r3, [r4, #12]
    coef->pub.coef_arrays = NULL; /* flag for no virtual arrays */
 800b91a:	2300      	movs	r3, #0
 800b91c:	6123      	str	r3, [r4, #16]
}
 800b91e:	e7bc      	b.n	800b89a <jinit_d_coef_controller+0x42>
 800b920:	0800afb1 	.word	0x0800afb1
 800b924:	0800b1fd 	.word	0x0800b1fd
 800b928:	0800afbf 	.word	0x0800afbf
 800b92c:	0800b0f1 	.word	0x0800b0f1
 800b930:	0800afbb 	.word	0x0800afbb
 800b934:	0800b2b5 	.word	0x0800b2b5

0800b938 <build_ycc_rgb_table>:
  int i;
  INT32 x;
  SHIFT_TEMPS

  cconvert->Cr_r_tab = (int *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b938:	6843      	ldr	r3, [r0, #4]
 800b93a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b93e:	2101      	movs	r1, #1
 800b940:	681b      	ldr	r3, [r3, #0]
{
 800b942:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b946:	4604      	mov	r4, r0
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
 800b948:	f8d0 51dc 	ldr.w	r5, [r0, #476]	; 0x1dc
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b94c:	4798      	blx	r3
				(MAXJSAMPLE+1) * SIZEOF(int));
  cconvert->Cb_b_tab = (int *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b94e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b952:	6863      	ldr	r3, [r4, #4]
 800b954:	2101      	movs	r1, #1
  cconvert->Cr_r_tab = (int *)
 800b956:	60a8      	str	r0, [r5, #8]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b958:	4620      	mov	r0, r4
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	4798      	blx	r3
				(MAXJSAMPLE+1) * SIZEOF(int));
  cconvert->Cr_g_tab = (INT32 *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b95e:	6863      	ldr	r3, [r4, #4]
  cconvert->Cb_b_tab = (int *)
 800b960:	60e8      	str	r0, [r5, #12]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b962:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	2101      	movs	r1, #1
 800b96a:	4620      	mov	r0, r4
  for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++) {
    /* i is the actual input pixel value, in the range 0..MAXJSAMPLE */
    /* The Cb or Cr value we are thinking of is x = i - CENTERJSAMPLE */
    /* Cr=>R value is nearest int to 1.40200 * x */
    cconvert->Cr_r_tab[i] = (int)
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
 800b96c:	f8df 807c 	ldr.w	r8, [pc, #124]	; 800b9ec <build_ycc_rgb_table+0xb4>
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b970:	4798      	blx	r3
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b972:	6863      	ldr	r3, [r4, #4]
  cconvert->Cr_g_tab = (INT32 *)
 800b974:	6128      	str	r0, [r5, #16]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b976:	2101      	movs	r1, #1
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	4620      	mov	r0, r4
 800b97c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    /* Cb=>B value is nearest int to 1.77200 * x */
    cconvert->Cb_b_tab[i] = (int)
		    RIGHT_SHIFT(FIX(1.77200) * x + ONE_HALF, SCALEBITS);
 800b980:	4f17      	ldr	r7, [pc, #92]	; (800b9e0 <build_ycc_rgb_table+0xa8>)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b982:	4798      	blx	r3
    /* Cr=>G value is scaled-up -0.71414 * x */
    cconvert->Cr_g_tab[i] = (- FIX(0.71414)) * x;
 800b984:	692c      	ldr	r4, [r5, #16]
  cconvert->Cb_g_tab = (INT32 *)
 800b986:	6168      	str	r0, [r5, #20]
  for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++) {
 800b988:	2300      	movs	r3, #0
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
 800b98a:	f8df e064 	ldr.w	lr, [pc, #100]	; 800b9f0 <build_ycc_rgb_table+0xb8>
    /* Cb=>G value is scaled-up -0.34414 * x */
    /* We also add in ONE_HALF so that need not do it in inner loop */
    cconvert->Cb_g_tab[i] = (- FIX(0.34414)) * x + ONE_HALF;
 800b98e:	4915      	ldr	r1, [pc, #84]	; (800b9e4 <build_ycc_rgb_table+0xac>)
    cconvert->Cb_b_tab[i] = (int)
 800b990:	e9d5 c602 	ldrd	ip, r6, [r5, #8]
    cconvert->Cr_g_tab[i] = (- FIX(0.71414)) * x;
 800b994:	4d14      	ldr	r5, [pc, #80]	; (800b9e8 <build_ycc_rgb_table+0xb0>)
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
 800b996:	fb08 e203 	mla	r2, r8, r3, lr
 800b99a:	1412      	asrs	r2, r2, #16
    cconvert->Cr_r_tab[i] = (int)
 800b99c:	f84c 2023 	str.w	r2, [ip, r3, lsl #2]
		    RIGHT_SHIFT(FIX(1.77200) * x + ONE_HALF, SCALEBITS);
 800b9a0:	fb07 f203 	mul.w	r2, r7, r3
 800b9a4:	f5a2 0262 	sub.w	r2, r2, #14811136	; 0xe20000
 800b9a8:	f5a2 42a2 	sub.w	r2, r2, #20736	; 0x5100
 800b9ac:	1412      	asrs	r2, r2, #16
    cconvert->Cb_b_tab[i] = (int)
 800b9ae:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
    cconvert->Cr_g_tab[i] = (- FIX(0.71414)) * x;
 800b9b2:	fb05 f203 	mul.w	r2, r5, r3
 800b9b6:	f502 02b6 	add.w	r2, r2, #5963776	; 0x5b0000
 800b9ba:	f502 42d2 	add.w	r2, r2, #26880	; 0x6900
 800b9be:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    cconvert->Cb_g_tab[i] = (- FIX(0.34414)) * x + ONE_HALF;
 800b9c2:	fb01 f203 	mul.w	r2, r1, r3
 800b9c6:	f502 1232 	add.w	r2, r2, #2916352	; 0x2c8000
 800b9ca:	f502 6250 	add.w	r2, r2, #3328	; 0xd00
 800b9ce:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
  for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++) {
 800b9d2:	3301      	adds	r3, #1
 800b9d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b9d8:	d1dd      	bne.n	800b996 <build_ycc_rgb_table+0x5e>
  }
}
 800b9da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9de:	bf00      	nop
 800b9e0:	0001c5a2 	.word	0x0001c5a2
 800b9e4:	ffffa7e6 	.word	0xffffa7e6
 800b9e8:	ffff492e 	.word	0xffff492e
 800b9ec:	000166e9 	.word	0x000166e9
 800b9f0:	ff4d0b80 	.word	0xff4d0b80

0800b9f4 <ycc_rgb_convert>:

METHODDEF(void)
ycc_rgb_convert (j_decompress_ptr cinfo,
		 JSAMPIMAGE input_buf, JDIMENSION input_row,
		 JSAMPARRAY output_buf, int num_rows)
{
 800b9f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
 800b9f8:	f8d0 41dc 	ldr.w	r4, [r0, #476]	; 0x1dc
{
 800b9fc:	b087      	sub	sp, #28
  register int y, cb, cr;
  register JSAMPROW outptr;
  register JSAMPROW inptr0, inptr1, inptr2;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
 800b9fe:	6f05      	ldr	r5, [r0, #112]	; 0x70
 800ba00:	ebc3 0282 	rsb	r2, r3, r2, lsl #2
  /* copy these pointers into registers if possible */
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
 800ba04:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
  register int * Crrtab = cconvert->Cr_r_tab;
  register int * Cbbtab = cconvert->Cb_b_tab;
  register INT32 * Crgtab = cconvert->Cr_g_tab;
  register INT32 * Cbgtab = cconvert->Cb_g_tab;
 800ba08:	f8d4 e014 	ldr.w	lr, [r4, #20]
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
 800ba0c:	9002      	str	r0, [sp, #8]
  JDIMENSION num_cols = cinfo->output_width;
 800ba0e:	9501      	str	r5, [sp, #4]
  register int * Crrtab = cconvert->Cr_r_tab;
 800ba10:	9205      	str	r2, [sp, #20]
  register int * Cbbtab = cconvert->Cb_b_tab;
 800ba12:	e9d4 6002 	ldrd	r6, r0, [r4, #8]
 800ba16:	9003      	str	r0, [sp, #12]
  register INT32 * Crgtab = cconvert->Cr_g_tab;
 800ba18:	6920      	ldr	r0, [r4, #16]
 800ba1a:	9004      	str	r0, [sp, #16]
  SHIFT_TEMPS

  while (--num_rows >= 0) {
 800ba1c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ba1e:	3a01      	subs	r2, #1
 800ba20:	9210      	str	r2, [sp, #64]	; 0x40
 800ba22:	d502      	bpl.n	800ba2a <ycc_rgb_convert+0x36>
						 SCALEBITS))];
      outptr[RGB_BLUE] =  range_limit[y + Cbbtab[cb]];
      outptr += RGB_PIXELSIZE;
    }
  }
}
 800ba24:	b007      	add	sp, #28
 800ba26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    inptr0 = input_buf[0][input_row];
 800ba2a:	9a05      	ldr	r2, [sp, #20]
 800ba2c:	680c      	ldr	r4, [r1, #0]
 800ba2e:	189d      	adds	r5, r3, r2
    for (col = 0; col < num_cols; col++) {
 800ba30:	f853 0b04 	ldr.w	r0, [r3], #4
 800ba34:	f854 8005 	ldr.w	r8, [r4, r5]
    inptr1 = input_buf[1][input_row];
 800ba38:	684c      	ldr	r4, [r1, #4]
 800ba3a:	5964      	ldr	r4, [r4, r5]
 800ba3c:	f104 3cff 	add.w	ip, r4, #4294967295
    inptr2 = input_buf[2][input_row];
 800ba40:	688c      	ldr	r4, [r1, #8]
 800ba42:	5967      	ldr	r7, [r4, r5]
 800ba44:	9c01      	ldr	r4, [sp, #4]
 800ba46:	3f01      	subs	r7, #1
 800ba48:	eb04 0a08 	add.w	sl, r4, r8
    for (col = 0; col < num_cols; col++) {
 800ba4c:	45d0      	cmp	r8, sl
 800ba4e:	f100 0003 	add.w	r0, r0, #3
 800ba52:	d0e3      	beq.n	800ba1c <ycc_rgb_convert+0x28>
      outptr[RGB_RED] =   range_limit[y + Crrtab[cr]];
 800ba54:	f817 9f01 	ldrb.w	r9, [r7, #1]!
      y  = GETJSAMPLE(inptr0[col]);
 800ba58:	f818 4b01 	ldrb.w	r4, [r8], #1
      outptr[RGB_RED] =   range_limit[y + Crrtab[cr]];
 800ba5c:	9a02      	ldr	r2, [sp, #8]
      cb = GETJSAMPLE(inptr1[col]);
 800ba5e:	f81c bf01 	ldrb.w	fp, [ip, #1]!
      outptr[RGB_RED] =   range_limit[y + Crrtab[cr]];
 800ba62:	f856 5029 	ldr.w	r5, [r6, r9, lsl #2]
 800ba66:	4414      	add	r4, r2
			      ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
 800ba68:	fa0f fb8b 	sxth.w	fp, fp
 800ba6c:	9a04      	ldr	r2, [sp, #16]
      outptr[RGB_RED] =   range_limit[y + Crrtab[cr]];
 800ba6e:	5d65      	ldrb	r5, [r4, r5]
 800ba70:	f800 5c01 	strb.w	r5, [r0, #-1]
			      ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
 800ba74:	f852 5029 	ldr.w	r5, [r2, r9, lsl #2]
 800ba78:	f85e 202b 	ldr.w	r2, [lr, fp, lsl #2]
 800ba7c:	4415      	add	r5, r2
      outptr[RGB_BLUE] =  range_limit[y + Cbbtab[cb]];
 800ba7e:	9a03      	ldr	r2, [sp, #12]
			      ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
 800ba80:	142d      	asrs	r5, r5, #16
      outptr[RGB_GREEN] = range_limit[y +
 800ba82:	5d65      	ldrb	r5, [r4, r5]
 800ba84:	f800 5c02 	strb.w	r5, [r0, #-2]
      outptr[RGB_BLUE] =  range_limit[y + Cbbtab[cb]];
 800ba88:	f852 502b 	ldr.w	r5, [r2, fp, lsl #2]
 800ba8c:	5d64      	ldrb	r4, [r4, r5]
 800ba8e:	f800 4c03 	strb.w	r4, [r0, #-3]
    for (col = 0; col < num_cols; col++) {
 800ba92:	e7db      	b.n	800ba4c <ycc_rgb_convert+0x58>

0800ba94 <rgb_gray_convert>:

METHODDEF(void)
rgb_gray_convert (j_decompress_ptr cinfo,
		  JSAMPIMAGE input_buf, JDIMENSION input_row,
		  JSAMPARRAY output_buf, int num_rows)
{
 800ba94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
  register int r, g, b;
  register INT32 * ctab = cconvert->rgb_y_tab;
 800ba98:	f8d0 41dc 	ldr.w	r4, [r0, #476]	; 0x1dc
 800ba9c:	ebc3 0282 	rsb	r2, r3, r2, lsl #2
{
 800baa0:	9d09      	ldr	r5, [sp, #36]	; 0x24
  register INT32 * ctab = cconvert->rgb_y_tab;
 800baa2:	69a6      	ldr	r6, [r4, #24]
  register JSAMPROW outptr;
  register JSAMPROW inptr0, inptr1, inptr2;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
 800baa4:	6f07      	ldr	r7, [r0, #112]	; 0x70

  while (--num_rows >= 0) {
 800baa6:	3d01      	subs	r5, #1
 800baa8:	d501      	bpl.n	800baae <rgb_gray_convert+0x1a>
      outptr[col] = (JSAMPLE)
		((ctab[r+R_Y_OFF] + ctab[g+G_Y_OFF] + ctab[b+B_Y_OFF])
		 >> SCALEBITS);
    }
  }
}
 800baaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    inptr0 = input_buf[0][input_row];
 800baae:	189c      	adds	r4, r3, r2
 800bab0:	6808      	ldr	r0, [r1, #0]
    outptr = *output_buf++;
 800bab2:	f853 9b04 	ldr.w	r9, [r3], #4
    inptr0 = input_buf[0][input_row];
 800bab6:	f850 c004 	ldr.w	ip, [r0, r4]
    inptr1 = input_buf[1][input_row];
 800baba:	6848      	ldr	r0, [r1, #4]
 800babc:	f850 e004 	ldr.w	lr, [r0, r4]
    inptr2 = input_buf[2][input_row];
 800bac0:	6888      	ldr	r0, [r1, #8]
 800bac2:	f850 8004 	ldr.w	r8, [r0, r4]
    for (col = 0; col < num_cols; col++) {
 800bac6:	2000      	movs	r0, #0
 800bac8:	42b8      	cmp	r0, r7
 800baca:	d0ec      	beq.n	800baa6 <rgb_gray_convert+0x12>
		((ctab[r+R_Y_OFF] + ctab[g+G_Y_OFF] + ctab[b+B_Y_OFF])
 800bacc:	f81e 4000 	ldrb.w	r4, [lr, r0]
 800bad0:	f81c b000 	ldrb.w	fp, [ip, r0]
 800bad4:	f504 7480 	add.w	r4, r4, #256	; 0x100
 800bad8:	f856 a024 	ldr.w	sl, [r6, r4, lsl #2]
 800badc:	f856 402b 	ldr.w	r4, [r6, fp, lsl #2]
 800bae0:	4454      	add	r4, sl
 800bae2:	f818 a000 	ldrb.w	sl, [r8, r0]
 800bae6:	f50a 7a00 	add.w	sl, sl, #512	; 0x200
 800baea:	f856 a02a 	ldr.w	sl, [r6, sl, lsl #2]
 800baee:	4454      	add	r4, sl
		 >> SCALEBITS);
 800baf0:	1424      	asrs	r4, r4, #16
      outptr[col] = (JSAMPLE)
 800baf2:	f809 4000 	strb.w	r4, [r9, r0]
    for (col = 0; col < num_cols; col++) {
 800baf6:	3001      	adds	r0, #1
 800baf8:	e7e6      	b.n	800bac8 <rgb_gray_convert+0x34>

0800bafa <rgb_convert>:

METHODDEF(void)
rgb_convert (j_decompress_ptr cinfo,
	     JSAMPIMAGE input_buf, JDIMENSION input_row,
	     JSAMPARRAY output_buf, int num_rows)
{
 800bafa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bafe:	9d06      	ldr	r5, [sp, #24]
 800bb00:	ebc3 0282 	rsb	r2, r3, r2, lsl #2
  register JSAMPROW outptr;
  register JSAMPROW inptr0, inptr1, inptr2;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
 800bb04:	6f06      	ldr	r6, [r0, #112]	; 0x70

  while (--num_rows >= 0) {
 800bb06:	3d01      	subs	r5, #1
 800bb08:	d501      	bpl.n	800bb0e <rgb_convert+0x14>
      outptr[RGB_GREEN] = inptr1[col];
      outptr[RGB_BLUE]  = inptr2[col];
      outptr += RGB_PIXELSIZE;
    }
  }
}
 800bb0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    inptr0 = input_buf[0][input_row];
 800bb0e:	1898      	adds	r0, r3, r2
 800bb10:	680c      	ldr	r4, [r1, #0]
 800bb12:	5827      	ldr	r7, [r4, r0]
    inptr1 = input_buf[1][input_row];
 800bb14:	684c      	ldr	r4, [r1, #4]
 800bb16:	f854 c000 	ldr.w	ip, [r4, r0]
    inptr2 = input_buf[2][input_row];
 800bb1a:	688c      	ldr	r4, [r1, #8]
 800bb1c:	f854 e000 	ldr.w	lr, [r4, r0]
    for (col = 0; col < num_cols; col++) {
 800bb20:	2000      	movs	r0, #0
 800bb22:	f853 4b04 	ldr.w	r4, [r3], #4
 800bb26:	42b0      	cmp	r0, r6
 800bb28:	f104 0403 	add.w	r4, r4, #3
 800bb2c:	d0eb      	beq.n	800bb06 <rgb_convert+0xc>
      outptr[RGB_RED]   = inptr0[col];
 800bb2e:	f817 8000 	ldrb.w	r8, [r7, r0]
 800bb32:	f804 8c01 	strb.w	r8, [r4, #-1]
      outptr[RGB_GREEN] = inptr1[col];
 800bb36:	f81c 8000 	ldrb.w	r8, [ip, r0]
 800bb3a:	f804 8c02 	strb.w	r8, [r4, #-2]
      outptr[RGB_BLUE]  = inptr2[col];
 800bb3e:	f81e 8000 	ldrb.w	r8, [lr, r0]
    for (col = 0; col < num_cols; col++) {
 800bb42:	3001      	adds	r0, #1
      outptr[RGB_BLUE]  = inptr2[col];
 800bb44:	f804 8c03 	strb.w	r8, [r4, #-3]
    for (col = 0; col < num_cols; col++) {
 800bb48:	e7ed      	b.n	800bb26 <rgb_convert+0x2c>

0800bb4a <null_convert>:

METHODDEF(void)
null_convert (j_decompress_ptr cinfo,
	      JSAMPIMAGE input_buf, JDIMENSION input_row,
	      JSAMPARRAY output_buf, int num_rows)
{
 800bb4a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bb4e:	9e07      	ldr	r6, [sp, #28]
 800bb50:	ebc3 0282 	rsb	r2, r3, r2, lsl #2
  register JSAMPROW inptr, outptr;
  register JDIMENSION count;
  register int num_components = cinfo->num_components;
 800bb54:	6a47      	ldr	r7, [r0, #36]	; 0x24
  JDIMENSION num_cols = cinfo->output_width;
 800bb56:	f8d0 e070 	ldr.w	lr, [r0, #112]	; 0x70
  int ci;

  while (--num_rows >= 0) {
 800bb5a:	3e01      	subs	r6, #1
 800bb5c:	d418      	bmi.n	800bb90 <null_convert+0x46>
    for (ci = 0; ci < num_components; ci++) {
      inptr = input_buf[ci][input_row];
 800bb5e:	eb03 0c02 	add.w	ip, r3, r2
    for (ci = 0; ci < num_components; ci++) {
 800bb62:	2000      	movs	r0, #0
 800bb64:	e00a      	b.n	800bb7c <null_convert+0x32>
      inptr = input_buf[ci][input_row];
 800bb66:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
 800bb6a:	f854 500c 	ldr.w	r5, [r4, ip]
      outptr = output_buf[0] + ci;
 800bb6e:	681c      	ldr	r4, [r3, #0]
 800bb70:	eb05 080e 	add.w	r8, r5, lr
 800bb74:	4404      	add	r4, r0
      for (count = num_cols; count > 0; count--) {
 800bb76:	4545      	cmp	r5, r8
 800bb78:	d104      	bne.n	800bb84 <null_convert+0x3a>
    for (ci = 0; ci < num_components; ci++) {
 800bb7a:	3001      	adds	r0, #1
 800bb7c:	42b8      	cmp	r0, r7
 800bb7e:	dbf2      	blt.n	800bb66 <null_convert+0x1c>
	*outptr = *inptr++;	/* needn't bother with GETJSAMPLE() here */
	outptr += num_components;
      }
    }
    input_row++;
    output_buf++;
 800bb80:	3304      	adds	r3, #4
 800bb82:	e7ea      	b.n	800bb5a <null_convert+0x10>
	*outptr = *inptr++;	/* needn't bother with GETJSAMPLE() here */
 800bb84:	f815 9b01 	ldrb.w	r9, [r5], #1
 800bb88:	f884 9000 	strb.w	r9, [r4]
	outptr += num_components;
 800bb8c:	443c      	add	r4, r7
      for (count = num_cols; count > 0; count--) {
 800bb8e:	e7f2      	b.n	800bb76 <null_convert+0x2c>
  }
}
 800bb90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800bb94 <gray_rgb_convert>:

METHODDEF(void)
gray_rgb_convert (j_decompress_ptr cinfo,
		  JSAMPIMAGE input_buf, JDIMENSION input_row,
		  JSAMPARRAY output_buf, int num_rows)
{
 800bb94:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb96:	9d05      	ldr	r5, [sp, #20]
 800bb98:	ebc3 0282 	rsb	r2, r3, r2, lsl #2
  register JSAMPROW inptr, outptr;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
 800bb9c:	6f07      	ldr	r7, [r0, #112]	; 0x70

  while (--num_rows >= 0) {
 800bb9e:	3d01      	subs	r5, #1
 800bba0:	d500      	bpl.n	800bba4 <gray_rgb_convert+0x10>
      /* We can dispense with GETJSAMPLE() here */
      outptr[RGB_RED] = outptr[RGB_GREEN] = outptr[RGB_BLUE] = inptr[col];
      outptr += RGB_PIXELSIZE;
    }
  }
}
 800bba2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    inptr = input_buf[0][input_row++];
 800bba4:	6808      	ldr	r0, [r1, #0]
 800bba6:	181c      	adds	r4, r3, r0
    for (col = 0; col < num_cols; col++) {
 800bba8:	f853 0b04 	ldr.w	r0, [r3], #4
 800bbac:	58a4      	ldr	r4, [r4, r2]
 800bbae:	eb04 0c07 	add.w	ip, r4, r7
 800bbb2:	4564      	cmp	r4, ip
 800bbb4:	f100 0003 	add.w	r0, r0, #3
 800bbb8:	d0f1      	beq.n	800bb9e <gray_rgb_convert+0xa>
      outptr[RGB_RED] = outptr[RGB_GREEN] = outptr[RGB_BLUE] = inptr[col];
 800bbba:	f814 6b01 	ldrb.w	r6, [r4], #1
 800bbbe:	f800 6c03 	strb.w	r6, [r0, #-3]
 800bbc2:	f800 6c02 	strb.w	r6, [r0, #-2]
 800bbc6:	f800 6c01 	strb.w	r6, [r0, #-1]
    for (col = 0; col < num_cols; col++) {
 800bbca:	e7f2      	b.n	800bbb2 <gray_rgb_convert+0x1e>

0800bbcc <ycck_cmyk_convert>:

METHODDEF(void)
ycck_cmyk_convert (j_decompress_ptr cinfo,
		   JSAMPIMAGE input_buf, JDIMENSION input_row,
		   JSAMPARRAY output_buf, int num_rows)
{
 800bbcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
 800bbd0:	f8d0 41dc 	ldr.w	r4, [r0, #476]	; 0x1dc
{
 800bbd4:	b087      	sub	sp, #28
  register int y, cb, cr;
  register JSAMPROW outptr;
  register JSAMPROW inptr0, inptr1, inptr2, inptr3;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
 800bbd6:	6f05      	ldr	r5, [r0, #112]	; 0x70
 800bbd8:	ebc3 0882 	rsb	r8, r3, r2, lsl #2
  /* copy these pointers into registers if possible */
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
 800bbdc:	f8d0 614c 	ldr.w	r6, [r0, #332]	; 0x14c
  register int * Crrtab = cconvert->Cr_r_tab;
  register int * Cbbtab = cconvert->Cb_b_tab;
  register INT32 * Crgtab = cconvert->Cr_g_tab;
  register INT32 * Cbgtab = cconvert->Cb_g_tab;
 800bbe0:	f8d4 e014 	ldr.w	lr, [r4, #20]
  JDIMENSION num_cols = cinfo->output_width;
 800bbe4:	9500      	str	r5, [sp, #0]
  register int * Cbbtab = cconvert->Cb_b_tab;
 800bbe6:	e9d4 c002 	ldrd	ip, r0, [r4, #8]
 800bbea:	9001      	str	r0, [sp, #4]
  register INT32 * Crgtab = cconvert->Cr_g_tab;
 800bbec:	6920      	ldr	r0, [r4, #16]
 800bbee:	9002      	str	r0, [sp, #8]
  SHIFT_TEMPS

  while (--num_rows >= 0) {
 800bbf0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bbf2:	3a01      	subs	r2, #1
 800bbf4:	9210      	str	r2, [sp, #64]	; 0x40
 800bbf6:	d502      	bpl.n	800bbfe <ycck_cmyk_convert+0x32>
      /* K passes through unchanged */
      outptr[3] = inptr3[col];	/* don't need GETJSAMPLE here */
      outptr += 4;
    }
  }
}
 800bbf8:	b007      	add	sp, #28
 800bbfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    inptr0 = input_buf[0][input_row];
 800bbfe:	eb03 0008 	add.w	r0, r3, r8
 800bc02:	680a      	ldr	r2, [r1, #0]
 800bc04:	f853 5b04 	ldr.w	r5, [r3], #4
 800bc08:	5812      	ldr	r2, [r2, r0]
 800bc0a:	9203      	str	r2, [sp, #12]
    inptr1 = input_buf[1][input_row];
 800bc0c:	684a      	ldr	r2, [r1, #4]
 800bc0e:	5812      	ldr	r2, [r2, r0]
 800bc10:	9204      	str	r2, [sp, #16]
    inptr2 = input_buf[2][input_row];
 800bc12:	688a      	ldr	r2, [r1, #8]
 800bc14:	f852 9000 	ldr.w	r9, [r2, r0]
    inptr3 = input_buf[3][input_row];
 800bc18:	68ca      	ldr	r2, [r1, #12]
 800bc1a:	f852 a000 	ldr.w	sl, [r2, r0]
    for (col = 0; col < num_cols; col++) {
 800bc1e:	2200      	movs	r2, #0
 800bc20:	9800      	ldr	r0, [sp, #0]
 800bc22:	3504      	adds	r5, #4
 800bc24:	4282      	cmp	r2, r0
 800bc26:	d0e3      	beq.n	800bbf0 <ycck_cmyk_convert+0x24>
      outptr[0] = range_limit[MAXJSAMPLE - (y + Crrtab[cr])];	/* red */
 800bc28:	f819 7002 	ldrb.w	r7, [r9, r2]
      cb = GETJSAMPLE(inptr1[col]);
 800bc2c:	9c04      	ldr	r4, [sp, #16]
      y  = GETJSAMPLE(inptr0[col]);
 800bc2e:	9803      	ldr	r0, [sp, #12]
      cb = GETJSAMPLE(inptr1[col]);
 800bc30:	f814 b002 	ldrb.w	fp, [r4, r2]
      y  = GETJSAMPLE(inptr0[col]);
 800bc34:	5c80      	ldrb	r0, [r0, r2]
      outptr[0] = range_limit[MAXJSAMPLE - (y + Crrtab[cr])];	/* red */
 800bc36:	f85c 4027 	ldr.w	r4, [ip, r7, lsl #2]
			      ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
 800bc3a:	fa0f fb8b 	sxth.w	fp, fp
      outptr[0] = range_limit[MAXJSAMPLE - (y + Crrtab[cr])];	/* red */
 800bc3e:	4404      	add	r4, r0
 800bc40:	f1c4 04ff 	rsb	r4, r4, #255	; 0xff
 800bc44:	5d34      	ldrb	r4, [r6, r4]
 800bc46:	f805 4c04 	strb.w	r4, [r5, #-4]
			      ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
 800bc4a:	f85e 402b 	ldr.w	r4, [lr, fp, lsl #2]
 800bc4e:	9405      	str	r4, [sp, #20]
 800bc50:	9c02      	ldr	r4, [sp, #8]
 800bc52:	f854 7027 	ldr.w	r7, [r4, r7, lsl #2]
 800bc56:	9c05      	ldr	r4, [sp, #20]
 800bc58:	443c      	add	r4, r7
      outptr[1] = range_limit[MAXJSAMPLE - (y +			/* green */
 800bc5a:	eb00 4424 	add.w	r4, r0, r4, asr #16
 800bc5e:	f1c4 04ff 	rsb	r4, r4, #255	; 0xff
 800bc62:	5d34      	ldrb	r4, [r6, r4]
 800bc64:	f805 4c03 	strb.w	r4, [r5, #-3]
      outptr[2] = range_limit[MAXJSAMPLE - (y + Cbbtab[cb])];	/* blue */
 800bc68:	9c01      	ldr	r4, [sp, #4]
 800bc6a:	f854 402b 	ldr.w	r4, [r4, fp, lsl #2]
 800bc6e:	4420      	add	r0, r4
 800bc70:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 800bc74:	5c30      	ldrb	r0, [r6, r0]
 800bc76:	f805 0c02 	strb.w	r0, [r5, #-2]
      outptr[3] = inptr3[col];	/* don't need GETJSAMPLE here */
 800bc7a:	f81a 0002 	ldrb.w	r0, [sl, r2]
    for (col = 0; col < num_cols; col++) {
 800bc7e:	3201      	adds	r2, #1
      outptr[3] = inptr3[col];	/* don't need GETJSAMPLE here */
 800bc80:	f805 0c01 	strb.w	r0, [r5, #-1]
    for (col = 0; col < num_cols; col++) {
 800bc84:	e7cc      	b.n	800bc20 <ycck_cmyk_convert+0x54>

0800bc86 <start_pass_dcolor>:

METHODDEF(void)
start_pass_dcolor (j_decompress_ptr cinfo)
{
  /* no work needed */
}
 800bc86:	4770      	bx	lr

0800bc88 <grayscale_convert>:
{
 800bc88:	b513      	push	{r0, r1, r4, lr}
 800bc8a:	460c      	mov	r4, r1
 800bc8c:	4611      	mov	r1, r2
 800bc8e:	461a      	mov	r2, r3
  jcopy_sample_rows(input_buf[0], (int) input_row, output_buf, 0,
 800bc90:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800bc92:	6820      	ldr	r0, [r4, #0]
 800bc94:	9301      	str	r3, [sp, #4]
 800bc96:	9b04      	ldr	r3, [sp, #16]
 800bc98:	9300      	str	r3, [sp, #0]
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	f00b fa9b 	bl	80171d6 <jcopy_sample_rows>
}
 800bca0:	b002      	add	sp, #8
 800bca2:	bd10      	pop	{r4, pc}

0800bca4 <jinit_color_deconverter>:
{
  my_cconvert_ptr cconvert;
  int ci;

  cconvert = (my_cconvert_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800bca4:	6843      	ldr	r3, [r0, #4]
 800bca6:	221c      	movs	r2, #28
 800bca8:	2101      	movs	r1, #1
 800bcaa:	681b      	ldr	r3, [r3, #0]
{
 800bcac:	b570      	push	{r4, r5, r6, lr}
 800bcae:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800bcb0:	4798      	blx	r3
				SIZEOF(my_color_deconverter));
  cinfo->cconvert = (struct jpeg_color_deconverter *) cconvert;
  cconvert->pub.start_pass = start_pass_dcolor;
 800bcb2:	4b4a      	ldr	r3, [pc, #296]	; (800bddc <jinit_color_deconverter+0x138>)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800bcb4:	4605      	mov	r5, r0
  cinfo->cconvert = (struct jpeg_color_deconverter *) cconvert;
 800bcb6:	f8c4 01dc 	str.w	r0, [r4, #476]	; 0x1dc
  cconvert->pub.start_pass = start_pass_dcolor;
 800bcba:	6003      	str	r3, [r0, #0]

  /* Make sure num_components agrees with jpeg_color_space */
  switch (cinfo->jpeg_color_space) {
 800bcbc:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800bcc0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800bcc2:	2b03      	cmp	r3, #3
 800bcc4:	d821      	bhi.n	800bd0a <jinit_color_deconverter+0x66>
 800bcc6:	2b01      	cmp	r3, #1
 800bcc8:	d82d      	bhi.n	800bd26 <jinit_color_deconverter+0x82>
 800bcca:	d023      	beq.n	800bd14 <jinit_color_deconverter+0x70>
    if (cinfo->num_components != 4)
      ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
    break;

  default:			/* JCS_UNKNOWN can be anything */
    if (cinfo->num_components < 1)
 800bccc:	2a00      	cmp	r2, #0
 800bcce:	dd23      	ble.n	800bd18 <jinit_color_deconverter+0x74>
  /* Set out_color_components and conversion method based on requested space.
   * Also clear the component_needed flags for any unused components,
   * so that earlier pipeline stages can avoid useless computation.
   */

  switch (cinfo->out_color_space) {
 800bcd0:	f894 1029 	ldrb.w	r1, [r4, #41]	; 0x29
  case JCS_GRAYSCALE:
    cinfo->out_color_components = 1;
    if (cinfo->jpeg_color_space == JCS_GRAYSCALE ||
 800bcd4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
  switch (cinfo->out_color_space) {
 800bcd8:	2902      	cmp	r1, #2
 800bcda:	d055      	beq.n	800bd88 <jinit_color_deconverter+0xe4>
 800bcdc:	2904      	cmp	r1, #4
 800bcde:	d066      	beq.n	800bdae <jinit_color_deconverter+0x10a>
 800bce0:	2901      	cmp	r1, #1
 800bce2:	d16d      	bne.n	800bdc0 <jinit_color_deconverter+0x11c>
    if (cinfo->jpeg_color_space == JCS_GRAYSCALE ||
 800bce4:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
    cinfo->out_color_components = 1;
 800bce8:	67a1      	str	r1, [r4, #120]	; 0x78
    if (cinfo->jpeg_color_space == JCS_GRAYSCALE ||
 800bcea:	2a01      	cmp	r2, #1
 800bcec:	d124      	bne.n	800bd38 <jinit_color_deconverter+0x94>
	cinfo->jpeg_color_space == JCS_YCbCr) {
      cconvert->pub.color_convert = grayscale_convert;
 800bcee:	4b3c      	ldr	r3, [pc, #240]	; (800bde0 <jinit_color_deconverter+0x13c>)
      /* For color->grayscale conversion, only the Y (0) component is needed */
      for (ci = 1; ci < cinfo->num_components; ci++)
	cinfo->comp_info[ci].component_needed = FALSE;
 800bcf0:	2058      	movs	r0, #88	; 0x58
      for (ci = 1; ci < cinfo->num_components; ci++)
 800bcf2:	6a61      	ldr	r1, [r4, #36]	; 0x24
      cconvert->pub.color_convert = grayscale_convert;
 800bcf4:	606b      	str	r3, [r5, #4]
      for (ci = 1; ci < cinfo->num_components; ci++)
 800bcf6:	4613      	mov	r3, r2
	cinfo->comp_info[ci].component_needed = FALSE;
 800bcf8:	2500      	movs	r5, #0
      for (ci = 1; ci < cinfo->num_components; ci++)
 800bcfa:	4299      	cmp	r1, r3
 800bcfc:	dc15      	bgt.n	800bd2a <jinit_color_deconverter+0x86>
    } else			/* unsupported non-null conversion */
      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
    break;
  }

  if (cinfo->quantize_colors)
 800bcfe:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d169      	bne.n	800bdd8 <jinit_color_deconverter+0x134>
    cinfo->output_components = 1; /* single colormapped output component */
  else
    cinfo->output_components = cinfo->out_color_components;
 800bd04:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800bd06:	67e3      	str	r3, [r4, #124]	; 0x7c
}
 800bd08:	bd70      	pop	{r4, r5, r6, pc}
  switch (cinfo->jpeg_color_space) {
 800bd0a:	3b04      	subs	r3, #4
 800bd0c:	2b01      	cmp	r3, #1
 800bd0e:	d8dd      	bhi.n	800bccc <jinit_color_deconverter+0x28>
    if (cinfo->num_components != 4)
 800bd10:	2a04      	cmp	r2, #4
 800bd12:	e000      	b.n	800bd16 <jinit_color_deconverter+0x72>
    if (cinfo->num_components != 1)
 800bd14:	2a01      	cmp	r2, #1
    if (cinfo->num_components != 4)
 800bd16:	d0db      	beq.n	800bcd0 <jinit_color_deconverter+0x2c>
      ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
 800bd18:	6823      	ldr	r3, [r4, #0]
 800bd1a:	220b      	movs	r2, #11
 800bd1c:	4620      	mov	r0, r4
 800bd1e:	615a      	str	r2, [r3, #20]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	4798      	blx	r3
 800bd24:	e7d4      	b.n	800bcd0 <jinit_color_deconverter+0x2c>
    if (cinfo->num_components != 3)
 800bd26:	2a03      	cmp	r2, #3
 800bd28:	e7f5      	b.n	800bd16 <jinit_color_deconverter+0x72>
	cinfo->comp_info[ci].component_needed = FALSE;
 800bd2a:	f8d4 20d8 	ldr.w	r2, [r4, #216]	; 0xd8
 800bd2e:	fb00 2203 	mla	r2, r0, r3, r2
      for (ci = 1; ci < cinfo->num_components; ci++)
 800bd32:	3301      	adds	r3, #1
	cinfo->comp_info[ci].component_needed = FALSE;
 800bd34:	6355      	str	r5, [r2, #52]	; 0x34
      for (ci = 1; ci < cinfo->num_components; ci++)
 800bd36:	e7e0      	b.n	800bcfa <jinit_color_deconverter+0x56>
    } else if (cinfo->jpeg_color_space == JCS_RGB) {
 800bd38:	2b02      	cmp	r3, #2
 800bd3a:	d146      	bne.n	800bdca <jinit_color_deconverter+0x126>
      cconvert->pub.color_convert = rgb_gray_convert;
 800bd3c:	4b29      	ldr	r3, [pc, #164]	; (800bde4 <jinit_color_deconverter+0x140>)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800bd3e:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 800bd42:	4620      	mov	r0, r4
    rgb_y_tab[i+R_Y_OFF] = FIX(0.29900) * i;
 800bd44:	f644 468b 	movw	r6, #19595	; 0x4c8b
      cconvert->pub.color_convert = rgb_gray_convert;
 800bd48:	606b      	str	r3, [r5, #4]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800bd4a:	6863      	ldr	r3, [r4, #4]
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
 800bd4c:	f8d4 51dc 	ldr.w	r5, [r4, #476]	; 0x1dc
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	4798      	blx	r3
  for (i = 0; i <= MAXJSAMPLE; i++) {
 800bd54:	2300      	movs	r3, #0
  cconvert->rgb_y_tab = rgb_y_tab = (INT32 *)
 800bd56:	61a8      	str	r0, [r5, #24]
    rgb_y_tab[i+B_Y_OFF] = FIX(0.11400) * i + ONE_HALF;
 800bd58:	f641 512f 	movw	r1, #7471	; 0x1d2f
 800bd5c:	3804      	subs	r0, #4
    rgb_y_tab[i+G_Y_OFF] = FIX(0.58700) * i;
 800bd5e:	f249 6546 	movw	r5, #38470	; 0x9646
    rgb_y_tab[i+R_Y_OFF] = FIX(0.29900) * i;
 800bd62:	fb06 f203 	mul.w	r2, r6, r3
 800bd66:	f840 2f04 	str.w	r2, [r0, #4]!
    rgb_y_tab[i+G_Y_OFF] = FIX(0.58700) * i;
 800bd6a:	fb05 f203 	mul.w	r2, r5, r3
 800bd6e:	f8c0 2400 	str.w	r2, [r0, #1024]	; 0x400
    rgb_y_tab[i+B_Y_OFF] = FIX(0.11400) * i + ONE_HALF;
 800bd72:	fb01 f203 	mul.w	r2, r1, r3
  for (i = 0; i <= MAXJSAMPLE; i++) {
 800bd76:	3301      	adds	r3, #1
    rgb_y_tab[i+B_Y_OFF] = FIX(0.11400) * i + ONE_HALF;
 800bd78:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
  for (i = 0; i <= MAXJSAMPLE; i++) {
 800bd7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    rgb_y_tab[i+B_Y_OFF] = FIX(0.11400) * i + ONE_HALF;
 800bd80:	f8c0 2800 	str.w	r2, [r0, #2048]	; 0x800
  for (i = 0; i <= MAXJSAMPLE; i++) {
 800bd84:	d1ed      	bne.n	800bd62 <jinit_color_deconverter+0xbe>
 800bd86:	e7ba      	b.n	800bcfe <jinit_color_deconverter+0x5a>
    cinfo->out_color_components = RGB_PIXELSIZE;
 800bd88:	2203      	movs	r2, #3
    if (cinfo->jpeg_color_space == JCS_YCbCr) {
 800bd8a:	4293      	cmp	r3, r2
    cinfo->out_color_components = RGB_PIXELSIZE;
 800bd8c:	67a2      	str	r2, [r4, #120]	; 0x78
    if (cinfo->jpeg_color_space == JCS_YCbCr) {
 800bd8e:	d105      	bne.n	800bd9c <jinit_color_deconverter+0xf8>
      cconvert->pub.color_convert = ycc_rgb_convert;
 800bd90:	4b15      	ldr	r3, [pc, #84]	; (800bde8 <jinit_color_deconverter+0x144>)
      build_ycc_rgb_table(cinfo);
 800bd92:	4620      	mov	r0, r4
      cconvert->pub.color_convert = ycck_cmyk_convert;
 800bd94:	606b      	str	r3, [r5, #4]
      build_ycc_rgb_table(cinfo);
 800bd96:	f7ff fdcf 	bl	800b938 <build_ycc_rgb_table>
 800bd9a:	e7b0      	b.n	800bcfe <jinit_color_deconverter+0x5a>
    } else if (cinfo->jpeg_color_space == JCS_GRAYSCALE) {
 800bd9c:	2b01      	cmp	r3, #1
 800bd9e:	d102      	bne.n	800bda6 <jinit_color_deconverter+0x102>
      cconvert->pub.color_convert = gray_rgb_convert;
 800bda0:	4b12      	ldr	r3, [pc, #72]	; (800bdec <jinit_color_deconverter+0x148>)
      cconvert->pub.color_convert = null_convert;
 800bda2:	606b      	str	r3, [r5, #4]
 800bda4:	e7ab      	b.n	800bcfe <jinit_color_deconverter+0x5a>
    } else if (cinfo->jpeg_color_space == JCS_RGB) {
 800bda6:	2b02      	cmp	r3, #2
 800bda8:	d10f      	bne.n	800bdca <jinit_color_deconverter+0x126>
      cconvert->pub.color_convert = rgb_convert;
 800bdaa:	4b11      	ldr	r3, [pc, #68]	; (800bdf0 <jinit_color_deconverter+0x14c>)
 800bdac:	e7f9      	b.n	800bda2 <jinit_color_deconverter+0xfe>
    if (cinfo->jpeg_color_space == JCS_YCCK) {
 800bdae:	2b05      	cmp	r3, #5
    cinfo->out_color_components = 4;
 800bdb0:	67a1      	str	r1, [r4, #120]	; 0x78
    if (cinfo->jpeg_color_space == JCS_YCCK) {
 800bdb2:	d101      	bne.n	800bdb8 <jinit_color_deconverter+0x114>
      cconvert->pub.color_convert = ycck_cmyk_convert;
 800bdb4:	4b0f      	ldr	r3, [pc, #60]	; (800bdf4 <jinit_color_deconverter+0x150>)
 800bdb6:	e7ec      	b.n	800bd92 <jinit_color_deconverter+0xee>
    } else if (cinfo->jpeg_color_space == JCS_CMYK) {
 800bdb8:	2b04      	cmp	r3, #4
 800bdba:	d106      	bne.n	800bdca <jinit_color_deconverter+0x126>
      cconvert->pub.color_convert = null_convert;
 800bdbc:	4b0e      	ldr	r3, [pc, #56]	; (800bdf8 <jinit_color_deconverter+0x154>)
 800bdbe:	e7f0      	b.n	800bda2 <jinit_color_deconverter+0xfe>
    if (cinfo->out_color_space == cinfo->jpeg_color_space) {
 800bdc0:	4299      	cmp	r1, r3
 800bdc2:	d102      	bne.n	800bdca <jinit_color_deconverter+0x126>
      cinfo->out_color_components = cinfo->num_components;
 800bdc4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bdc6:	67a3      	str	r3, [r4, #120]	; 0x78
 800bdc8:	e7f8      	b.n	800bdbc <jinit_color_deconverter+0x118>
      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
 800bdca:	6823      	ldr	r3, [r4, #0]
 800bdcc:	221c      	movs	r2, #28
 800bdce:	4620      	mov	r0, r4
 800bdd0:	615a      	str	r2, [r3, #20]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	4798      	blx	r3
 800bdd6:	e792      	b.n	800bcfe <jinit_color_deconverter+0x5a>
    cinfo->output_components = 1; /* single colormapped output component */
 800bdd8:	2301      	movs	r3, #1
 800bdda:	e794      	b.n	800bd06 <jinit_color_deconverter+0x62>
 800bddc:	0800bc87 	.word	0x0800bc87
 800bde0:	0800bc89 	.word	0x0800bc89
 800bde4:	0800ba95 	.word	0x0800ba95
 800bde8:	0800b9f5 	.word	0x0800b9f5
 800bdec:	0800bb95 	.word	0x0800bb95
 800bdf0:	0800bafb 	.word	0x0800bafb
 800bdf4:	0800bbcd 	.word	0x0800bbcd
 800bdf8:	0800bb4b 	.word	0x0800bb4b

0800bdfc <start_pass>:
 * a matching multiplier table.
 */

METHODDEF(void)
start_pass (j_decompress_ptr cinfo)
{
 800bdfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be00:	f8d0 31d4 	ldr.w	r3, [r0, #468]	; 0x1d4
  my_idct_ptr idct = (my_idct_ptr) cinfo->idct;
  int ci, i;
  jpeg_component_info *compptr;
  int method = 0;
  inverse_DCT_method_ptr method_ptr = NULL;
 800be04:	2500      	movs	r5, #0
{
 800be06:	4607      	mov	r7, r0
  JQUANT_TBL * qtbl;

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800be08:	f8d0 a0d8 	ldr.w	sl, [r0, #216]	; 0xd8
 800be0c:	f103 0804 	add.w	r8, r3, #4
  int method = 0;
 800be10:	462c      	mov	r4, r5
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800be12:	46ab      	mov	fp, r5
{
 800be14:	ed2d 8b04 	vpush	{d8-d9}
 800be18:	b087      	sub	sp, #28
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800be1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be1c:	455b      	cmp	r3, fp
 800be1e:	dc04      	bgt.n	800be2a <start_pass+0x2e>
    default:
      ERREXIT(cinfo, JERR_NOT_COMPILED);
      break;
    }
  }
}
 800be20:	b007      	add	sp, #28
 800be22:	ecbd 8b04 	vpop	{d8-d9}
 800be26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800be2a:	e9da 1209 	ldrd	r1, r2, [sl, #36]	; 0x24
 800be2e:	f240 700e 	movw	r0, #1806	; 0x70e
 800be32:	eb02 2301 	add.w	r3, r2, r1, lsl #8
 800be36:	4283      	cmp	r3, r0
 800be38:	f000 80d9 	beq.w	800bfee <start_pass+0x1f2>
 800be3c:	dc5a      	bgt.n	800bef4 <start_pass+0xf8>
 800be3e:	f240 4004 	movw	r0, #1028	; 0x404
 800be42:	4283      	cmp	r3, r0
 800be44:	f000 80d6 	beq.w	800bff4 <start_pass+0x1f8>
 800be48:	dc2f      	bgt.n	800beaa <start_pass+0xae>
 800be4a:	f5b3 7f01 	cmp.w	r3, #516	; 0x204
 800be4e:	f000 80d3 	beq.w	800bff8 <start_pass+0x1fc>
 800be52:	dc1a      	bgt.n	800be8a <start_pass+0x8e>
 800be54:	f240 2001 	movw	r0, #513	; 0x201
 800be58:	4283      	cmp	r3, r0
 800be5a:	f000 80cf 	beq.w	800bffc <start_pass+0x200>
 800be5e:	dc0e      	bgt.n	800be7e <start_pass+0x82>
 800be60:	f240 1001 	movw	r0, #257	; 0x101
 800be64:	4283      	cmp	r3, r0
 800be66:	f000 80cb 	beq.w	800c000 <start_pass+0x204>
 800be6a:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 800be6e:	f000 80c9 	beq.w	800c004 <start_pass+0x208>
      ERREXIT2(cinfo, JERR_BAD_DCTSIZE,
 800be72:	683b      	ldr	r3, [r7, #0]
 800be74:	2007      	movs	r0, #7
 800be76:	61da      	str	r2, [r3, #28]
 800be78:	e9c3 0105 	strd	r0, r1, [r3, #20]
 800be7c:	e0b3      	b.n	800bfe6 <start_pass+0x1ea>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800be7e:	f240 2002 	movw	r0, #514	; 0x202
 800be82:	4283      	cmp	r3, r0
 800be84:	d1f5      	bne.n	800be72 <start_pass+0x76>
 800be86:	4d9e      	ldr	r5, [pc, #632]	; (800c100 <start_pass+0x304>)
 800be88:	e0b2      	b.n	800bff0 <start_pass+0x1f4>
 800be8a:	f240 3006 	movw	r0, #774	; 0x306
 800be8e:	4283      	cmp	r3, r0
 800be90:	f000 80ba 	beq.w	800c008 <start_pass+0x20c>
 800be94:	f240 4002 	movw	r0, #1026	; 0x402
 800be98:	4283      	cmp	r3, r0
 800be9a:	f000 80b7 	beq.w	800c00c <start_pass+0x210>
 800be9e:	f240 3003 	movw	r0, #771	; 0x303
 800bea2:	4283      	cmp	r3, r0
 800bea4:	d1e5      	bne.n	800be72 <start_pass+0x76>
      method_ptr = jpeg_idct_3x3;
 800bea6:	4d97      	ldr	r5, [pc, #604]	; (800c104 <start_pass+0x308>)
 800bea8:	e0a2      	b.n	800bff0 <start_pass+0x1f4>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800beaa:	f240 6003 	movw	r0, #1539	; 0x603
 800beae:	4283      	cmp	r3, r0
 800beb0:	f000 80ae 	beq.w	800c010 <start_pass+0x214>
 800beb4:	dc0e      	bgt.n	800bed4 <start_pass+0xd8>
 800beb6:	f240 5005 	movw	r0, #1285	; 0x505
 800beba:	4283      	cmp	r3, r0
 800bebc:	f000 80aa 	beq.w	800c014 <start_pass+0x218>
 800bec0:	f240 500a 	movw	r0, #1290	; 0x50a
 800bec4:	4283      	cmp	r3, r0
 800bec6:	f000 80a7 	beq.w	800c018 <start_pass+0x21c>
 800beca:	f5b3 6f81 	cmp.w	r3, #1032	; 0x408
 800bece:	d1d0      	bne.n	800be72 <start_pass+0x76>
      method_ptr = jpeg_idct_4x8;
 800bed0:	4d8d      	ldr	r5, [pc, #564]	; (800c108 <start_pass+0x30c>)
 800bed2:	e08d      	b.n	800bff0 <start_pass+0x1f4>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800bed4:	f240 600c 	movw	r0, #1548	; 0x60c
 800bed8:	4283      	cmp	r3, r0
 800beda:	f000 809f 	beq.w	800c01c <start_pass+0x220>
 800bede:	f240 7007 	movw	r0, #1799	; 0x707
 800bee2:	4283      	cmp	r3, r0
 800bee4:	f000 809c 	beq.w	800c020 <start_pass+0x224>
 800bee8:	f240 6006 	movw	r0, #1542	; 0x606
 800beec:	4283      	cmp	r3, r0
 800beee:	d1c0      	bne.n	800be72 <start_pass+0x76>
      method_ptr = jpeg_idct_6x6;
 800bef0:	4d86      	ldr	r5, [pc, #536]	; (800c10c <start_pass+0x310>)
 800bef2:	e07d      	b.n	800bff0 <start_pass+0x1f4>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800bef4:	f640 4006 	movw	r0, #3078	; 0xc06
 800bef8:	4283      	cmp	r3, r0
 800befa:	f000 8093 	beq.w	800c024 <start_pass+0x228>
 800befe:	dc21      	bgt.n	800bf44 <start_pass+0x148>
 800bf00:	f640 1009 	movw	r0, #2313	; 0x909
 800bf04:	4283      	cmp	r3, r0
 800bf06:	f000 808f 	beq.w	800c028 <start_pass+0x22c>
 800bf0a:	dc0d      	bgt.n	800bf28 <start_pass+0x12c>
 800bf0c:	f640 0008 	movw	r0, #2056	; 0x808
 800bf10:	4283      	cmp	r3, r0
 800bf12:	d039      	beq.n	800bf88 <start_pass+0x18c>
 800bf14:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 800bf18:	f000 8088 	beq.w	800c02c <start_pass+0x230>
 800bf1c:	f640 0004 	movw	r0, #2052	; 0x804
 800bf20:	4283      	cmp	r3, r0
 800bf22:	d1a6      	bne.n	800be72 <start_pass+0x76>
      method_ptr = jpeg_idct_8x4;
 800bf24:	4d7a      	ldr	r5, [pc, #488]	; (800c110 <start_pass+0x314>)
 800bf26:	e063      	b.n	800bff0 <start_pass+0x1f4>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800bf28:	f640 200a 	movw	r0, #2570	; 0xa0a
 800bf2c:	4283      	cmp	r3, r0
 800bf2e:	d07f      	beq.n	800c030 <start_pass+0x234>
 800bf30:	f640 300b 	movw	r0, #2827	; 0xb0b
 800bf34:	4283      	cmp	r3, r0
 800bf36:	d07d      	beq.n	800c034 <start_pass+0x238>
 800bf38:	f640 2005 	movw	r0, #2565	; 0xa05
 800bf3c:	4283      	cmp	r3, r0
 800bf3e:	d198      	bne.n	800be72 <start_pass+0x76>
      method_ptr = jpeg_idct_10x5;
 800bf40:	4d74      	ldr	r5, [pc, #464]	; (800c114 <start_pass+0x318>)
 800bf42:	e055      	b.n	800bff0 <start_pass+0x1f4>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800bf44:	f640 600e 	movw	r0, #3598	; 0xe0e
 800bf48:	4283      	cmp	r3, r0
 800bf4a:	d075      	beq.n	800c038 <start_pass+0x23c>
 800bf4c:	dc0d      	bgt.n	800bf6a <start_pass+0x16e>
 800bf4e:	f640 500d 	movw	r0, #3341	; 0xd0d
 800bf52:	4283      	cmp	r3, r0
 800bf54:	d072      	beq.n	800c03c <start_pass+0x240>
 800bf56:	f640 6007 	movw	r0, #3591	; 0xe07
 800bf5a:	4283      	cmp	r3, r0
 800bf5c:	d070      	beq.n	800c040 <start_pass+0x244>
 800bf5e:	f640 400c 	movw	r0, #3084	; 0xc0c
 800bf62:	4283      	cmp	r3, r0
 800bf64:	d185      	bne.n	800be72 <start_pass+0x76>
      method_ptr = jpeg_idct_12x12;
 800bf66:	4d6c      	ldr	r5, [pc, #432]	; (800c118 <start_pass+0x31c>)
 800bf68:	e042      	b.n	800bff0 <start_pass+0x1f4>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800bf6a:	f241 0008 	movw	r0, #4104	; 0x1008
 800bf6e:	4283      	cmp	r3, r0
 800bf70:	d068      	beq.n	800c044 <start_pass+0x248>
 800bf72:	f241 0010 	movw	r0, #4112	; 0x1010
 800bf76:	4283      	cmp	r3, r0
 800bf78:	d066      	beq.n	800c048 <start_pass+0x24c>
 800bf7a:	f640 700f 	movw	r0, #3855	; 0xf0f
 800bf7e:	4283      	cmp	r3, r0
 800bf80:	f47f af77 	bne.w	800be72 <start_pass+0x76>
      method_ptr = jpeg_idct_15x15;
 800bf84:	4d65      	ldr	r5, [pc, #404]	; (800c11c <start_pass+0x320>)
 800bf86:	e033      	b.n	800bff0 <start_pass+0x1f4>
      switch (cinfo->dct_method) {
 800bf88:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800bf8c:	2b02      	cmp	r3, #2
 800bf8e:	d827      	bhi.n	800bfe0 <start_pass+0x1e4>
 800bf90:	461c      	mov	r4, r3
 800bf92:	4b63      	ldr	r3, [pc, #396]	; (800c120 <start_pass+0x324>)
 800bf94:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
    if (! compptr->component_needed || idct->cur_method[ci] == method)
 800bf98:	f8da 3034 	ldr.w	r3, [sl, #52]	; 0x34
    idct->pub.inverse_DCT[ci] = method_ptr;
 800bf9c:	f848 5b04 	str.w	r5, [r8], #4
    if (! compptr->component_needed || idct->cur_method[ci] == method)
 800bfa0:	b1cb      	cbz	r3, 800bfd6 <start_pass+0x1da>
 800bfa2:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 800bfa6:	42a3      	cmp	r3, r4
 800bfa8:	d015      	beq.n	800bfd6 <start_pass+0x1da>
    qtbl = compptr->quant_table;
 800bfaa:	f8da 6050 	ldr.w	r6, [sl, #80]	; 0x50
    if (qtbl == NULL)		/* happens if no data yet for component */
 800bfae:	b196      	cbz	r6, 800bfd6 <start_pass+0x1da>
    switch (method) {
 800bfb0:	2c01      	cmp	r4, #1
    idct->cur_method[ci] = method;
 800bfb2:	f8c8 4024 	str.w	r4, [r8, #36]	; 0x24
    switch (method) {
 800bfb6:	d049      	beq.n	800c04c <start_pass+0x250>
 800bfb8:	2c02      	cmp	r4, #2
 800bfba:	d05a      	beq.n	800c072 <start_pass+0x276>
 800bfbc:	2c00      	cmp	r4, #0
 800bfbe:	f040 8098 	bne.w	800c0f2 <start_pass+0x2f6>
	ISLOW_MULT_TYPE * ismtbl = (ISLOW_MULT_TYPE *) compptr->dct_table;
 800bfc2:	f8da 2054 	ldr.w	r2, [sl, #84]	; 0x54
	for (i = 0; i < DCTSIZE2; i++) {
 800bfc6:	4623      	mov	r3, r4
	  ismtbl[i] = (ISLOW_MULT_TYPE) qtbl->quantval[i];
 800bfc8:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 800bfcc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (i = 0; i < DCTSIZE2; i++) {
 800bfd0:	3301      	adds	r3, #1
 800bfd2:	2b40      	cmp	r3, #64	; 0x40
 800bfd4:	d1f8      	bne.n	800bfc8 <start_pass+0x1cc>
       ci++, compptr++) {
 800bfd6:	f10b 0b01 	add.w	fp, fp, #1
 800bfda:	f10a 0a58 	add.w	sl, sl, #88	; 0x58
 800bfde:	e71c      	b.n	800be1a <start_pass+0x1e>
	ERREXIT(cinfo, JERR_NOT_COMPILED);
 800bfe0:	683b      	ldr	r3, [r7, #0]
 800bfe2:	2231      	movs	r2, #49	; 0x31
 800bfe4:	615a      	str	r2, [r3, #20]
      ERREXIT2(cinfo, JERR_BAD_DCTSIZE,
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	4638      	mov	r0, r7
 800bfea:	4798      	blx	r3
      break;
 800bfec:	e7d4      	b.n	800bf98 <start_pass+0x19c>
      method_ptr = jpeg_idct_7x14;
 800bfee:	4d4d      	ldr	r5, [pc, #308]	; (800c124 <start_pass+0x328>)
      method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 800bff0:	2400      	movs	r4, #0
 800bff2:	e7d1      	b.n	800bf98 <start_pass+0x19c>
      method_ptr = jpeg_idct_4x4;
 800bff4:	4d4c      	ldr	r5, [pc, #304]	; (800c128 <start_pass+0x32c>)
 800bff6:	e7fb      	b.n	800bff0 <start_pass+0x1f4>
      method_ptr = jpeg_idct_2x4;
 800bff8:	4d4c      	ldr	r5, [pc, #304]	; (800c12c <start_pass+0x330>)
 800bffa:	e7f9      	b.n	800bff0 <start_pass+0x1f4>
      method_ptr = jpeg_idct_2x1;
 800bffc:	4d4c      	ldr	r5, [pc, #304]	; (800c130 <start_pass+0x334>)
 800bffe:	e7f7      	b.n	800bff0 <start_pass+0x1f4>
      method_ptr = jpeg_idct_1x1;
 800c000:	4d4c      	ldr	r5, [pc, #304]	; (800c134 <start_pass+0x338>)
 800c002:	e7f5      	b.n	800bff0 <start_pass+0x1f4>
      method_ptr = jpeg_idct_1x2;
 800c004:	4d4c      	ldr	r5, [pc, #304]	; (800c138 <start_pass+0x33c>)
 800c006:	e7f3      	b.n	800bff0 <start_pass+0x1f4>
      method_ptr = jpeg_idct_3x6;
 800c008:	4d4c      	ldr	r5, [pc, #304]	; (800c13c <start_pass+0x340>)
 800c00a:	e7f1      	b.n	800bff0 <start_pass+0x1f4>
      method_ptr = jpeg_idct_4x2;
 800c00c:	4d4c      	ldr	r5, [pc, #304]	; (800c140 <start_pass+0x344>)
 800c00e:	e7ef      	b.n	800bff0 <start_pass+0x1f4>
      method_ptr = jpeg_idct_6x3;
 800c010:	4d4c      	ldr	r5, [pc, #304]	; (800c144 <start_pass+0x348>)
 800c012:	e7ed      	b.n	800bff0 <start_pass+0x1f4>
      method_ptr = jpeg_idct_5x5;
 800c014:	4d4c      	ldr	r5, [pc, #304]	; (800c148 <start_pass+0x34c>)
 800c016:	e7eb      	b.n	800bff0 <start_pass+0x1f4>
      method_ptr = jpeg_idct_5x10;
 800c018:	4d4c      	ldr	r5, [pc, #304]	; (800c14c <start_pass+0x350>)
 800c01a:	e7e9      	b.n	800bff0 <start_pass+0x1f4>
      method_ptr = jpeg_idct_6x12;
 800c01c:	4d4c      	ldr	r5, [pc, #304]	; (800c150 <start_pass+0x354>)
 800c01e:	e7e7      	b.n	800bff0 <start_pass+0x1f4>
      method_ptr = jpeg_idct_7x7;
 800c020:	4d4c      	ldr	r5, [pc, #304]	; (800c154 <start_pass+0x358>)
 800c022:	e7e5      	b.n	800bff0 <start_pass+0x1f4>
      method_ptr = jpeg_idct_12x6;
 800c024:	4d4c      	ldr	r5, [pc, #304]	; (800c158 <start_pass+0x35c>)
 800c026:	e7e3      	b.n	800bff0 <start_pass+0x1f4>
      method_ptr = jpeg_idct_9x9;
 800c028:	4d4c      	ldr	r5, [pc, #304]	; (800c15c <start_pass+0x360>)
 800c02a:	e7e1      	b.n	800bff0 <start_pass+0x1f4>
      method_ptr = jpeg_idct_8x16;
 800c02c:	4d4c      	ldr	r5, [pc, #304]	; (800c160 <start_pass+0x364>)
 800c02e:	e7df      	b.n	800bff0 <start_pass+0x1f4>
      method_ptr = jpeg_idct_10x10;
 800c030:	4d4c      	ldr	r5, [pc, #304]	; (800c164 <start_pass+0x368>)
 800c032:	e7dd      	b.n	800bff0 <start_pass+0x1f4>
      method_ptr = jpeg_idct_11x11;
 800c034:	4d4c      	ldr	r5, [pc, #304]	; (800c168 <start_pass+0x36c>)
 800c036:	e7db      	b.n	800bff0 <start_pass+0x1f4>
      method_ptr = jpeg_idct_14x14;
 800c038:	4d4c      	ldr	r5, [pc, #304]	; (800c16c <start_pass+0x370>)
 800c03a:	e7d9      	b.n	800bff0 <start_pass+0x1f4>
      method_ptr = jpeg_idct_13x13;
 800c03c:	4d4c      	ldr	r5, [pc, #304]	; (800c170 <start_pass+0x374>)
 800c03e:	e7d7      	b.n	800bff0 <start_pass+0x1f4>
      method_ptr = jpeg_idct_14x7;
 800c040:	4d4c      	ldr	r5, [pc, #304]	; (800c174 <start_pass+0x378>)
 800c042:	e7d5      	b.n	800bff0 <start_pass+0x1f4>
      method_ptr = jpeg_idct_16x8;
 800c044:	4d4c      	ldr	r5, [pc, #304]	; (800c178 <start_pass+0x37c>)
 800c046:	e7d3      	b.n	800bff0 <start_pass+0x1f4>
      method_ptr = jpeg_idct_16x16;
 800c048:	4d4c      	ldr	r5, [pc, #304]	; (800c17c <start_pass+0x380>)
 800c04a:	e7d1      	b.n	800bff0 <start_pass+0x1f4>
	IFAST_MULT_TYPE * ifmtbl = (IFAST_MULT_TYPE *) compptr->dct_table;
 800c04c:	f8da 0054 	ldr.w	r0, [sl, #84]	; 0x54
	for (i = 0; i < DCTSIZE2; i++) {
 800c050:	2200      	movs	r2, #0
 800c052:	494b      	ldr	r1, [pc, #300]	; (800c180 <start_pass+0x384>)
	    DESCALE(MULTIPLY16V16((INT32) qtbl->quantval[i],
 800c054:	f836 3012 	ldrh.w	r3, [r6, r2, lsl #1]
 800c058:	f931 cb02 	ldrsh.w	ip, [r1], #2
 800c05c:	fb0c f303 	mul.w	r3, ip, r3
 800c060:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c064:	131b      	asrs	r3, r3, #12
	  ifmtbl[i] = (IFAST_MULT_TYPE)
 800c066:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	for (i = 0; i < DCTSIZE2; i++) {
 800c06a:	3201      	adds	r2, #1
 800c06c:	2a40      	cmp	r2, #64	; 0x40
 800c06e:	d1f1      	bne.n	800c054 <start_pass+0x258>
 800c070:	e7b1      	b.n	800bfd6 <start_pass+0x1da>
	FLOAT_MULT_TYPE * fmtbl = (FLOAT_MULT_TYPE *) compptr->dct_table;
 800c072:	f8da 3054 	ldr.w	r3, [sl, #84]	; 0x54
	i = 0;
 800c076:	f04f 0900 	mov.w	r9, #0
	FLOAT_MULT_TYPE * fmtbl = (FLOAT_MULT_TYPE *) compptr->dct_table;
 800c07a:	9304      	str	r3, [sp, #16]
 800c07c:	4b41      	ldr	r3, [pc, #260]	; (800c184 <start_pass+0x388>)
 800c07e:	9303      	str	r3, [sp, #12]
	       aanscalefactor[row] * aanscalefactor[col] * 0.125);
 800c080:	9b03      	ldr	r3, [sp, #12]
 800c082:	ecb3 7b02 	vldmia	r3!, {d7}
 800c086:	9303      	str	r3, [sp, #12]
 800c088:	eeb0 8a47 	vmov.f32	s16, s14
 800c08c:	eef0 8a67 	vmov.f32	s17, s15
 800c090:	9b04      	ldr	r3, [sp, #16]
 800c092:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800c096:	9301      	str	r3, [sp, #4]
 800c098:	4b3a      	ldr	r3, [pc, #232]	; (800c184 <start_pass+0x388>)
 800c09a:	9302      	str	r3, [sp, #8]
 800c09c:	f106 0310 	add.w	r3, r6, #16
 800c0a0:	9305      	str	r3, [sp, #20]
 800c0a2:	9b02      	ldr	r3, [sp, #8]
	      ((double) qtbl->quantval[i] *
 800c0a4:	f836 0b02 	ldrh.w	r0, [r6], #2
	       aanscalefactor[row] * aanscalefactor[col] * 0.125);
 800c0a8:	ecb3 7b02 	vldmia	r3!, {d7}
 800c0ac:	eeb0 9a47 	vmov.f32	s18, s14
 800c0b0:	eef0 9a67 	vmov.f32	s19, s15
 800c0b4:	9302      	str	r3, [sp, #8]
	      ((double) qtbl->quantval[i] *
 800c0b6:	f7f4 fa3d 	bl	8000534 <__aeabi_ui2d>
 800c0ba:	ec53 2b18 	vmov	r2, r3, d8
 800c0be:	f7f4 fab3 	bl	8000628 <__aeabi_dmul>
	       aanscalefactor[row] * aanscalefactor[col] * 0.125);
 800c0c2:	ec53 2b19 	vmov	r2, r3, d9
 800c0c6:	f7f4 faaf 	bl	8000628 <__aeabi_dmul>
 800c0ca:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800c0ce:	2200      	movs	r2, #0
 800c0d0:	f7f4 faaa 	bl	8000628 <__aeabi_dmul>
	    fmtbl[i] = (FLOAT_MULT_TYPE)
 800c0d4:	f7f4 fcba 	bl	8000a4c <__aeabi_d2f>
 800c0d8:	9b01      	ldr	r3, [sp, #4]
 800c0da:	f843 0b04 	str.w	r0, [r3], #4
 800c0de:	9301      	str	r3, [sp, #4]
	  for (col = 0; col < DCTSIZE; col++) {
 800c0e0:	9b05      	ldr	r3, [sp, #20]
 800c0e2:	429e      	cmp	r6, r3
 800c0e4:	d1dd      	bne.n	800c0a2 <start_pass+0x2a6>
	    i++;
 800c0e6:	f109 0908 	add.w	r9, r9, #8
	for (row = 0; row < DCTSIZE; row++) {
 800c0ea:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
 800c0ee:	d1c7      	bne.n	800c080 <start_pass+0x284>
 800c0f0:	e771      	b.n	800bfd6 <start_pass+0x1da>
      ERREXIT(cinfo, JERR_NOT_COMPILED);
 800c0f2:	683b      	ldr	r3, [r7, #0]
 800c0f4:	2231      	movs	r2, #49	; 0x31
 800c0f6:	4638      	mov	r0, r7
 800c0f8:	615a      	str	r2, [r3, #20]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	4798      	blx	r3
      break;
 800c0fe:	e76a      	b.n	800bfd6 <start_pass+0x1da>
 800c100:	080112b9 	.word	0x080112b9
 800c104:	080111c5 	.word	0x080111c5
 800c108:	08015135 	.word	0x08015135
 800c10c:	08010d65 	.word	0x08010d65
 800c110:	0801408d 	.word	0x0801408d
 800c114:	08013e45 	.word	0x08013e45
 800c118:	08011d11 	.word	0x08011d11
 800c11c:	080129e5 	.word	0x080129e5
 800c120:	0802dba4 	.word	0x0802dba4
 800c124:	080148c9 	.word	0x080148c9
 800c128:	08011099 	.word	0x08011099
 800c12c:	0801549d 	.word	0x0801549d
 800c130:	080144ad 	.word	0x080144ad
 800c134:	08011331 	.word	0x08011331
 800c138:	08015575 	.word	0x08015575
 800c13c:	08015351 	.word	0x08015351
 800c140:	080143dd 	.word	0x080143dd
 800c144:	08014281 	.word	0x08014281
 800c148:	08010f15 	.word	0x08010f15
 800c14c:	08014f01 	.word	0x08014f01
 800c150:	08014c41 	.word	0x08014c41
 800c154:	08010abd 	.word	0x08010abd
 800c158:	08013b79 	.word	0x08013b79
 800c15c:	08011355 	.word	0x08011355
 800c160:	080144e5 	.word	0x080144e5
 800c164:	08011621 	.word	0x08011621
 800c168:	08011919 	.word	0x08011919
 800c16c:	08012591 	.word	0x08012591
 800c170:	080120cd 	.word	0x080120cd
 800c174:	080137f9 	.word	0x080137f9
 800c178:	080133b1 	.word	0x080133b1
 800c17c:	08012e79 	.word	0x08012e79
 800c180:	0802dbf0 	.word	0x0802dbf0
 800c184:	0802dbb0 	.word	0x0802dbb0

0800c188 <jinit_inverse_dct>:
 * Initialize IDCT manager.
 */

GLOBAL(void)
jinit_inverse_dct (j_decompress_ptr cinfo)
{
 800c188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  my_idct_ptr idct;
  int ci;
  jpeg_component_info *compptr;

  idct = (my_idct_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c18a:	6843      	ldr	r3, [r0, #4]
{
 800c18c:	4605      	mov	r5, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c18e:	2254      	movs	r2, #84	; 0x54
 800c190:	2101      	movs	r1, #1
 800c192:	681b      	ldr	r3, [r3, #0]
				SIZEOF(my_idct_controller));
  cinfo->idct = (struct jpeg_inverse_dct *) idct;
  idct->pub.start_pass = start_pass;

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800c194:	2600      	movs	r6, #0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c196:	4798      	blx	r3
  idct->pub.start_pass = start_pass;
 800c198:	4b0f      	ldr	r3, [pc, #60]	; (800c1d8 <jinit_inverse_dct+0x50>)
 800c19a:	4604      	mov	r4, r0
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800c19c:	f8d5 70d8 	ldr.w	r7, [r5, #216]	; 0xd8
  cinfo->idct = (struct jpeg_inverse_dct *) idct;
 800c1a0:	f8c5 01d4 	str.w	r0, [r5, #468]	; 0x1d4
  idct->pub.start_pass = start_pass;
 800c1a4:	f844 3b2c 	str.w	r3, [r4], #44
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800c1a8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c1aa:	42b3      	cmp	r3, r6
 800c1ac:	dc00      	bgt.n	800c1b0 <jinit_inverse_dct+0x28>
				  SIZEOF(multiplier_table));
    MEMZERO(compptr->dct_table, SIZEOF(multiplier_table));
    /* Mark multiplier table not yet set up for any method */
    idct->cur_method[ci] = -1;
  }
}
 800c1ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c1b0:	686b      	ldr	r3, [r5, #4]
 800c1b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c1b6:	2101      	movs	r1, #1
 800c1b8:	4628      	mov	r0, r5
 800c1ba:	681b      	ldr	r3, [r3, #0]
       ci++, compptr++) {
 800c1bc:	3601      	adds	r6, #1
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c1be:	4798      	blx	r3
    MEMZERO(compptr->dct_table, SIZEOF(multiplier_table));
 800c1c0:	f44f 7280 	mov.w	r2, #256	; 0x100
    compptr->dct_table =
 800c1c4:	6578      	str	r0, [r7, #84]	; 0x54
    MEMZERO(compptr->dct_table, SIZEOF(multiplier_table));
 800c1c6:	2100      	movs	r1, #0
 800c1c8:	f01e f824 	bl	802a214 <memset>
    idct->cur_method[ci] = -1;
 800c1cc:	f04f 33ff 	mov.w	r3, #4294967295
       ci++, compptr++) {
 800c1d0:	3758      	adds	r7, #88	; 0x58
    idct->cur_method[ci] = -1;
 800c1d2:	f844 3b04 	str.w	r3, [r4], #4
       ci++, compptr++) {
 800c1d6:	e7e7      	b.n	800c1a8 <jinit_inverse_dct+0x20>
 800c1d8:	0800bdfd 	.word	0x0800bdfd

0800c1dc <jpeg_fill_bit_buffer>:
LOCAL(boolean)
jpeg_fill_bit_buffer (bitread_working_state * state,
		      register bit_buf_type get_buffer, register int bits_left,
		      int nbits)
/* Load up the bit buffer to a depth of at least nbits */
{
 800c1dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* Copy heavily used state fields into locals (hopefully registers) */
  register const JOCTET * next_input_byte = state->next_input_byte;
  register size_t bytes_in_buffer = state->bytes_in_buffer;
  j_decompress_ptr cinfo = state->cinfo;
 800c1e0:	6905      	ldr	r5, [r0, #16]
{
 800c1e2:	4607      	mov	r7, r0
 800c1e4:	4688      	mov	r8, r1
 800c1e6:	4616      	mov	r6, r2

  /* Attempt to load at least MIN_GET_BITS bits into get_buffer. */
  /* (It is assumed that no request will be for more than that many bits.) */
  /* We fail to do so only if we hit a marker or are forced to suspend. */

  if (cinfo->unread_marker == 0) {	/* cannot advance past a marker */
 800c1e8:	f8d5 b1b4 	ldr.w	fp, [r5, #436]	; 0x1b4
{
 800c1ec:	4699      	mov	r9, r3
  register size_t bytes_in_buffer = state->bytes_in_buffer;
 800c1ee:	e9d0 4a00 	ldrd	r4, sl, [r0]
  if (cinfo->unread_marker == 0) {	/* cannot advance past a marker */
 800c1f2:	f1bb 0f00 	cmp.w	fp, #0
 800c1f6:	d042      	beq.n	800c27e <jpeg_fill_bit_buffer+0xa2>
  no_more_bytes:
    /* We get here if we've read the marker that terminates the compressed
     * data segment.  There should be enough bits in the buffer register
     * to satisfy the request; if so, no problem.
     */
    if (nbits > bits_left) {
 800c1f8:	454e      	cmp	r6, r9
 800c1fa:	da42      	bge.n	800c282 <jpeg_fill_bit_buffer+0xa6>
      /* Uh-oh.  Report corrupted data to user and stuff zeroes into
       * the data stream, so that we can produce some kind of image.
       * We use a nonvolatile flag to ensure that only one warning message
       * appears per data segment.
       */
      if (! ((huff_entropy_ptr) cinfo->entropy)->insufficient_data) {
 800c1fc:	f8d5 31d0 	ldr.w	r3, [r5, #464]	; 0x1d0
 800c200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c202:	b95b      	cbnz	r3, 800c21c <jpeg_fill_bit_buffer+0x40>
	WARNMS(cinfo, JWRN_HIT_MARKER);
 800c204:	682b      	ldr	r3, [r5, #0]
 800c206:	2278      	movs	r2, #120	; 0x78
 800c208:	f04f 31ff 	mov.w	r1, #4294967295
 800c20c:	4628      	mov	r0, r5
 800c20e:	615a      	str	r2, [r3, #20]
 800c210:	685b      	ldr	r3, [r3, #4]
 800c212:	4798      	blx	r3
	((huff_entropy_ptr) cinfo->entropy)->insufficient_data = TRUE;
 800c214:	f8d5 31d0 	ldr.w	r3, [r5, #464]	; 0x1d0
 800c218:	2201      	movs	r2, #1
 800c21a:	625a      	str	r2, [r3, #36]	; 0x24
      }
      /* Fill the buffer with zero bits */
      get_buffer <<= MIN_GET_BITS - bits_left;
 800c21c:	f1c6 0619 	rsb	r6, r6, #25
 800c220:	fa08 f806 	lsl.w	r8, r8, r6
      bits_left = MIN_GET_BITS;
 800c224:	2619      	movs	r6, #25
 800c226:	e02c      	b.n	800c282 <jpeg_fill_bit_buffer+0xa6>
      if (bytes_in_buffer == 0) {
 800c228:	f1ba 0f00 	cmp.w	sl, #0
 800c22c:	d107      	bne.n	800c23e <jpeg_fill_bit_buffer+0x62>
	if (! (*cinfo->src->fill_input_buffer) (cinfo))
 800c22e:	69ab      	ldr	r3, [r5, #24]
 800c230:	4628      	mov	r0, r5
 800c232:	68db      	ldr	r3, [r3, #12]
 800c234:	4798      	blx	r3
 800c236:	b350      	cbz	r0, 800c28e <jpeg_fill_bit_buffer+0xb2>
	next_input_byte = cinfo->src->next_input_byte;
 800c238:	69ab      	ldr	r3, [r5, #24]
	bytes_in_buffer = cinfo->src->bytes_in_buffer;
 800c23a:	e9d3 4a00 	ldrd	r4, sl, [r3]
      c = GETJOCTET(*next_input_byte++);
 800c23e:	f814 2b01 	ldrb.w	r2, [r4], #1
      bytes_in_buffer--;
 800c242:	f10a 3aff 	add.w	sl, sl, #4294967295
      if (c == 0xFF) {
 800c246:	2aff      	cmp	r2, #255	; 0xff
 800c248:	d116      	bne.n	800c278 <jpeg_fill_bit_buffer+0x9c>
	  if (bytes_in_buffer == 0) {
 800c24a:	f1ba 0f00 	cmp.w	sl, #0
 800c24e:	d109      	bne.n	800c264 <jpeg_fill_bit_buffer+0x88>
	    if (! (*cinfo->src->fill_input_buffer) (cinfo))
 800c250:	69ab      	ldr	r3, [r5, #24]
 800c252:	4628      	mov	r0, r5
 800c254:	9201      	str	r2, [sp, #4]
 800c256:	68db      	ldr	r3, [r3, #12]
 800c258:	4798      	blx	r3
 800c25a:	b1c0      	cbz	r0, 800c28e <jpeg_fill_bit_buffer+0xb2>
	    next_input_byte = cinfo->src->next_input_byte;
 800c25c:	69ab      	ldr	r3, [r5, #24]
 800c25e:	9a01      	ldr	r2, [sp, #4]
	    bytes_in_buffer = cinfo->src->bytes_in_buffer;
 800c260:	e9d3 4a00 	ldrd	r4, sl, [r3]
	  c = GETJOCTET(*next_input_byte++);
 800c264:	f814 3b01 	ldrb.w	r3, [r4], #1
	  bytes_in_buffer--;
 800c268:	f10a 3aff 	add.w	sl, sl, #4294967295
	} while (c == 0xFF);
 800c26c:	2bff      	cmp	r3, #255	; 0xff
 800c26e:	d0ec      	beq.n	800c24a <jpeg_fill_bit_buffer+0x6e>
	if (c == 0) {
 800c270:	b113      	cbz	r3, 800c278 <jpeg_fill_bit_buffer+0x9c>
	  cinfo->unread_marker = c;
 800c272:	f8c5 31b4 	str.w	r3, [r5, #436]	; 0x1b4
	  goto no_more_bytes;
 800c276:	e7bf      	b.n	800c1f8 <jpeg_fill_bit_buffer+0x1c>
      get_buffer = (get_buffer << 8) | c;
 800c278:	ea42 2808 	orr.w	r8, r2, r8, lsl #8
      bits_left += 8;
 800c27c:	3608      	adds	r6, #8
    while (bits_left < MIN_GET_BITS) {
 800c27e:	2e18      	cmp	r6, #24
 800c280:	ddd2      	ble.n	800c228 <jpeg_fill_bit_buffer+0x4c>
  state->next_input_byte = next_input_byte;
  state->bytes_in_buffer = bytes_in_buffer;
  state->get_buffer = get_buffer;
  state->bits_left = bits_left;

  return TRUE;
 800c282:	f04f 0b01 	mov.w	fp, #1
  state->bytes_in_buffer = bytes_in_buffer;
 800c286:	e9c7 4a00 	strd	r4, sl, [r7]
  state->bits_left = bits_left;
 800c28a:	e9c7 8602 	strd	r8, r6, [r7, #8]
}
 800c28e:	4658      	mov	r0, fp
 800c290:	b003      	add	sp, #12
 800c292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800c298 <jpeg_huff_decode>:

LOCAL(int)
jpeg_huff_decode (bitread_working_state * state,
		  register bit_buf_type get_buffer, register int bits_left,
		  d_derived_tbl * htbl, int min_bits)
{
 800c298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c29a:	9d06      	ldr	r5, [sp, #24]
 800c29c:	4606      	mov	r6, r0
 800c29e:	468c      	mov	ip, r1
 800c2a0:	4614      	mov	r4, r2
  register INT32 code;

  /* HUFF_DECODE has determined that the code is at least min_bits */
  /* bits long, so fetch that many bits in one swoop. */

  CHECK_BIT_BUFFER(*state, l, return -1);
 800c2a2:	4295      	cmp	r5, r2
{
 800c2a4:	461f      	mov	r7, r3
  CHECK_BIT_BUFFER(*state, l, return -1);
 800c2a6:	dd08      	ble.n	800c2ba <jpeg_huff_decode+0x22>
 800c2a8:	462b      	mov	r3, r5
 800c2aa:	f7ff ff97 	bl	800c1dc <jpeg_fill_bit_buffer>
 800c2ae:	b910      	cbnz	r0, 800c2b6 <jpeg_huff_decode+0x1e>
 800c2b0:	f04f 30ff 	mov.w	r0, #4294967295
    WARNMS(state->cinfo, JWRN_HUFF_BAD_CODE);
    return 0;			/* fake a zero as the safest result */
  }

  return htbl->pub->huffval[ (int) (code + htbl->valoffset[l]) ];
}
 800c2b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  CHECK_BIT_BUFFER(*state, l, return -1);
 800c2b6:	e9d6 c402 	ldrd	ip, r4, [r6, #8]
  code = GET_BITS(l);
 800c2ba:	1b62      	subs	r2, r4, r5
 800c2bc:	4b1a      	ldr	r3, [pc, #104]	; (800c328 <jpeg_huff_decode+0x90>)
 800c2be:	fa4c f002 	asr.w	r0, ip, r2
 800c2c2:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800c2c6:	4018      	ands	r0, r3
  while (code > htbl->maxcode[l]) {
 800c2c8:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
 800c2cc:	4283      	cmp	r3, r0
 800c2ce:	db0d      	blt.n	800c2ec <jpeg_huff_decode+0x54>
  if (l > 16) {
 800c2d0:	2d10      	cmp	r5, #16
  state->bits_left = bits_left;
 800c2d2:	e9c6 c202 	strd	ip, r2, [r6, #8]
  if (l > 16) {
 800c2d6:	dd1e      	ble.n	800c316 <jpeg_huff_decode+0x7e>
    WARNMS(state->cinfo, JWRN_HUFF_BAD_CODE);
 800c2d8:	6930      	ldr	r0, [r6, #16]
 800c2da:	2279      	movs	r2, #121	; 0x79
 800c2dc:	f04f 31ff 	mov.w	r1, #4294967295
 800c2e0:	6803      	ldr	r3, [r0, #0]
 800c2e2:	615a      	str	r2, [r3, #20]
 800c2e4:	685b      	ldr	r3, [r3, #4]
 800c2e6:	4798      	blx	r3
    return 0;			/* fake a zero as the safest result */
 800c2e8:	2000      	movs	r0, #0
 800c2ea:	e7e3      	b.n	800c2b4 <jpeg_huff_decode+0x1c>
    CHECK_BIT_BUFFER(*state, 1, return -1);
 800c2ec:	2a00      	cmp	r2, #0
    code <<= 1;
 800c2ee:	ea4f 0440 	mov.w	r4, r0, lsl #1
    CHECK_BIT_BUFFER(*state, 1, return -1);
 800c2f2:	dc08      	bgt.n	800c306 <jpeg_huff_decode+0x6e>
 800c2f4:	2301      	movs	r3, #1
 800c2f6:	4661      	mov	r1, ip
 800c2f8:	4630      	mov	r0, r6
 800c2fa:	f7ff ff6f 	bl	800c1dc <jpeg_fill_bit_buffer>
 800c2fe:	2800      	cmp	r0, #0
 800c300:	d0d6      	beq.n	800c2b0 <jpeg_huff_decode+0x18>
 800c302:	e9d6 c202 	ldrd	ip, r2, [r6, #8]
    code |= GET_BITS(1);
 800c306:	3a01      	subs	r2, #1
    l++;
 800c308:	3501      	adds	r5, #1
    code |= GET_BITS(1);
 800c30a:	fa4c f002 	asr.w	r0, ip, r2
 800c30e:	f000 0001 	and.w	r0, r0, #1
 800c312:	4320      	orrs	r0, r4
    l++;
 800c314:	e7d8      	b.n	800c2c8 <jpeg_huff_decode+0x30>
  return htbl->pub->huffval[ (int) (code + htbl->valoffset[l]) ];
 800c316:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c31a:	3512      	adds	r5, #18
 800c31c:	4418      	add	r0, r3
 800c31e:	f857 2025 	ldr.w	r2, [r7, r5, lsl #2]
 800c322:	4410      	add	r0, r2
 800c324:	7c40      	ldrb	r0, [r0, #17]
 800c326:	e7c5      	b.n	800c2b4 <jpeg_huff_decode+0x1c>
 800c328:	0802dc70 	.word	0x0802dc70

0800c32c <process_restart>:
 * Returns FALSE if must suspend.
 */

LOCAL(boolean)
process_restart (j_decompress_ptr cinfo)
{
 800c32c:	b570      	push	{r4, r5, r6, lr}
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
  int ci;

  /* Throw away any unused bits remaining in bit buffer; */
  /* include any full bytes in next_marker's count of discarded bytes */
  cinfo->marker->discarded_bytes += entropy->bitstate.bits_left / 8;
 800c32e:	e9d0 2573 	ldrd	r2, r5, [r0, #460]	; 0x1cc
  entropy->bitstate.bits_left = 0;
 800c332:	2600      	movs	r6, #0
{
 800c334:	4604      	mov	r4, r0
  cinfo->marker->discarded_bytes += entropy->bitstate.bits_left / 8;
 800c336:	68eb      	ldr	r3, [r5, #12]
 800c338:	6991      	ldr	r1, [r2, #24]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	bfb8      	it	lt
 800c33e:	3307      	addlt	r3, #7
 800c340:	eb01 03e3 	add.w	r3, r1, r3, asr #3
 800c344:	6193      	str	r3, [r2, #24]

  /* Advance past the RSTn marker */
  if (! (*cinfo->marker->read_restart_marker) (cinfo))
 800c346:	6893      	ldr	r3, [r2, #8]
  entropy->bitstate.bits_left = 0;
 800c348:	60ee      	str	r6, [r5, #12]
  if (! (*cinfo->marker->read_restart_marker) (cinfo))
 800c34a:	4798      	blx	r3
 800c34c:	b190      	cbz	r0, 800c374 <process_restart+0x48>
    return FALSE;

  /* Re-initialize DC predictions to 0 */
  for (ci = 0; ci < cinfo->comps_in_scan; ci++)
    entropy->saved.last_dc_val[ci] = 0;
 800c34e:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
 800c352:	4631      	mov	r1, r6
 800c354:	f105 0014 	add.w	r0, r5, #20
 800c358:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 800c35c:	0092      	lsls	r2, r2, #2
 800c35e:	f01d ff59 	bl	802a214 <memset>
  /* Re-init EOB run count, too */
  entropy->saved.EOBRUN = 0;

  /* Reset restart counter */
  entropy->restarts_to_go = cinfo->restart_interval;
 800c362:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
  entropy->saved.EOBRUN = 0;
 800c366:	612e      	str	r6, [r5, #16]
  entropy->restarts_to_go = cinfo->restart_interval;
 800c368:	62ab      	str	r3, [r5, #40]	; 0x28
  /* Reset out-of-data flag, unless read_restart_marker left us smack up
   * against a marker.  In that case we will end up treating the next data
   * segment as empty, and we can avoid producing bogus output pixels by
   * leaving the flag set.
   */
  if (cinfo->unread_marker == 0)
 800c36a:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
 800c36e:	b903      	cbnz	r3, 800c372 <process_restart+0x46>
    entropy->insufficient_data = FALSE;
 800c370:	626b      	str	r3, [r5, #36]	; 0x24

  return TRUE;
 800c372:	2001      	movs	r0, #1
}
 800c374:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c378 <decode_mcu_DC_first>:
 * or first pass of successive approximation).
 */

METHODDEF(boolean)
decode_mcu_DC_first (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{   
 800c378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
  int Al = cinfo->Al;
 800c37c:	f8d0 31a4 	ldr.w	r3, [r0, #420]	; 0x1a4
{   
 800c380:	b091      	sub	sp, #68	; 0x44
 800c382:	4605      	mov	r5, r0
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800c384:	f8d0 41d0 	ldr.w	r4, [r0, #464]	; 0x1d0
  int Al = cinfo->Al;
 800c388:	9303      	str	r3, [sp, #12]
  savable_state state;
  d_derived_tbl * tbl;
  jpeg_component_info * compptr;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 800c38a:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{   
 800c38e:	9105      	str	r1, [sp, #20]
  if (cinfo->restart_interval) {
 800c390:	b933      	cbnz	r3, 800c3a0 <decode_mcu_DC_first+0x28>
  }

  /* If we've run out of data, just leave the MCU set to zeroes.
   * This way, we return uniform gray for the remainder of the segment.
   */
  if (! entropy->insufficient_data) {
 800c392:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c394:	b17e      	cbz	r6, 800c3b6 <decode_mcu_DC_first+0x3e>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
    ASSIGN_STATE(entropy->saved, state);
  }

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;
 800c396:	6aa3      	ldr	r3, [r4, #40]	; 0x28

  return TRUE;
 800c398:	2001      	movs	r0, #1
  entropy->restarts_to_go--;
 800c39a:	3b01      	subs	r3, #1
 800c39c:	62a3      	str	r3, [r4, #40]	; 0x28
  return TRUE;
 800c39e:	e007      	b.n	800c3b0 <decode_mcu_DC_first+0x38>
    if (entropy->restarts_to_go == 0)
 800c3a0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d1f5      	bne.n	800c392 <decode_mcu_DC_first+0x1a>
      if (! process_restart(cinfo))
 800c3a6:	f7ff ffc1 	bl	800c32c <process_restart>
 800c3aa:	2800      	cmp	r0, #0
 800c3ac:	d1f1      	bne.n	800c392 <decode_mcu_DC_first+0x1a>
	return FALSE;
 800c3ae:	2000      	movs	r0, #0
}
 800c3b0:	b011      	add	sp, #68	; 0x44
 800c3b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800c3b6:	69ab      	ldr	r3, [r5, #24]
    ASSIGN_STATE(state, entropy->saved);
 800c3b8:	f104 0810 	add.w	r8, r4, #16
 800c3bc:	af0b      	add	r7, sp, #44	; 0x2c
 800c3be:	f505 79b8 	add.w	r9, r5, #368	; 0x170
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800c3c2:	681a      	ldr	r2, [r3, #0]
 800c3c4:	f104 0b10 	add.w	fp, r4, #16
 800c3c8:	685b      	ldr	r3, [r3, #4]
 800c3ca:	9206      	str	r2, [sp, #24]
 800c3cc:	9307      	str	r3, [sp, #28]
	r = GET_BITS(s);
 800c3ce:	f8df a118 	ldr.w	sl, [pc, #280]	; 800c4e8 <decode_mcu_DC_first+0x170>
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800c3d2:	950a      	str	r5, [sp, #40]	; 0x28
    ASSIGN_STATE(state, entropy->saved);
 800c3d4:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800c3d8:	e9d4 ec02 	ldrd	lr, ip, [r4, #8]
    ASSIGN_STATE(state, entropy->saved);
 800c3dc:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800c3de:	f8d8 3000 	ldr.w	r3, [r8]
 800c3e2:	603b      	str	r3, [r7, #0]
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800c3e4:	f8d5 316c 	ldr.w	r3, [r5, #364]	; 0x16c
 800c3e8:	42b3      	cmp	r3, r6
 800c3ea:	dc0d      	bgt.n	800c408 <decode_mcu_DC_first+0x90>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800c3ec:	69ab      	ldr	r3, [r5, #24]
    ASSIGN_STATE(entropy->saved, state);
 800c3ee:	ae0b      	add	r6, sp, #44	; 0x2c
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800c3f0:	9a06      	ldr	r2, [sp, #24]
    ASSIGN_STATE(entropy->saved, state);
 800c3f2:	465d      	mov	r5, fp
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800c3f4:	601a      	str	r2, [r3, #0]
 800c3f6:	9a07      	ldr	r2, [sp, #28]
 800c3f8:	605a      	str	r2, [r3, #4]
    ASSIGN_STATE(entropy->saved, state);
 800c3fa:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800c3fc:	e9c4 ec02 	strd	lr, ip, [r4, #8]
    ASSIGN_STATE(entropy->saved, state);
 800c400:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c402:	6833      	ldr	r3, [r6, #0]
 800c404:	602b      	str	r3, [r5, #0]
 800c406:	e7c6      	b.n	800c396 <decode_mcu_DC_first+0x1e>
      block = MCU_data[blkn];
 800c408:	9b05      	ldr	r3, [sp, #20]
      HUFF_DECODE(s, br_state, tbl, return FALSE, label1);
 800c40a:	f1bc 0f07 	cmp.w	ip, #7
      ci = cinfo->MCU_membership[blkn];
 800c40e:	f859 7b04 	ldr.w	r7, [r9], #4
      block = MCU_data[blkn];
 800c412:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 800c416:	9304      	str	r3, [sp, #16]
      compptr = cinfo->cur_comp_info[ci];
 800c418:	eb05 0387 	add.w	r3, r5, r7, lsl #2
      tbl = entropy->derived_tbls[compptr->dc_tbl_no];
 800c41c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800c420:	695b      	ldr	r3, [r3, #20]
 800c422:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c426:	f8d3 802c 	ldr.w	r8, [r3, #44]	; 0x2c
      HUFF_DECODE(s, br_state, tbl, return FALSE, label1);
 800c42a:	dc0c      	bgt.n	800c446 <decode_mcu_DC_first+0xce>
 800c42c:	2300      	movs	r3, #0
 800c42e:	4662      	mov	r2, ip
 800c430:	4671      	mov	r1, lr
 800c432:	a806      	add	r0, sp, #24
 800c434:	f7ff fed2 	bl	800c1dc <jpeg_fill_bit_buffer>
 800c438:	2800      	cmp	r0, #0
 800c43a:	d0b8      	beq.n	800c3ae <decode_mcu_DC_first+0x36>
 800c43c:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800c440:	f1bc 0f07 	cmp.w	ip, #7
 800c444:	dd3e      	ble.n	800c4c4 <decode_mcu_DC_first+0x14c>
 800c446:	f1ac 0308 	sub.w	r3, ip, #8
 800c44a:	fa4e f303 	asr.w	r3, lr, r3
 800c44e:	b2db      	uxtb	r3, r3
 800c450:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800c454:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800c458:	2a00      	cmp	r2, #0
 800c45a:	d042      	beq.n	800c4e2 <decode_mcu_DC_first+0x16a>
 800c45c:	4443      	add	r3, r8
 800c45e:	ebac 0c02 	sub.w	ip, ip, r2
 800c462:	f893 8490 	ldrb.w	r8, [r3, #1168]	; 0x490
      if (s) {
 800c466:	f1b8 0f00 	cmp.w	r8, #0
 800c46a:	d01b      	beq.n	800c4a4 <decode_mcu_DC_first+0x12c>
	CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800c46c:	45e0      	cmp	r8, ip
 800c46e:	dd09      	ble.n	800c484 <decode_mcu_DC_first+0x10c>
 800c470:	4643      	mov	r3, r8
 800c472:	4662      	mov	r2, ip
 800c474:	4671      	mov	r1, lr
 800c476:	a806      	add	r0, sp, #24
 800c478:	f7ff feb0 	bl	800c1dc <jpeg_fill_bit_buffer>
 800c47c:	2800      	cmp	r0, #0
 800c47e:	d096      	beq.n	800c3ae <decode_mcu_DC_first+0x36>
 800c480:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
	r = GET_BITS(s);
 800c484:	ebac 0c08 	sub.w	ip, ip, r8
 800c488:	f85a 2028 	ldr.w	r2, [sl, r8, lsl #2]
	s = HUFF_EXTEND(r, s);
 800c48c:	f108 38ff 	add.w	r8, r8, #4294967295
	r = GET_BITS(s);
 800c490:	fa4e f30c 	asr.w	r3, lr, ip
	s = HUFF_EXTEND(r, s);
 800c494:	f85a 1028 	ldr.w	r1, [sl, r8, lsl #2]
	r = GET_BITS(s);
 800c498:	4013      	ands	r3, r2
	s = HUFF_EXTEND(r, s);
 800c49a:	4299      	cmp	r1, r3
 800c49c:	bfac      	ite	ge
 800c49e:	eba3 0802 	subge.w	r8, r3, r2
 800c4a2:	4698      	movlt	r8, r3
      s += state.last_dc_val[ci];
 800c4a4:	ab10      	add	r3, sp, #64	; 0x40
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800c4a6:	3601      	adds	r6, #1
      s += state.last_dc_val[ci];
 800c4a8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
      (*block)[0] = (JCOEF) (s << Al);
 800c4ac:	9b03      	ldr	r3, [sp, #12]
      s += state.last_dc_val[ci];
 800c4ae:	f857 0c10 	ldr.w	r0, [r7, #-16]
 800c4b2:	4440      	add	r0, r8
      (*block)[0] = (JCOEF) (s << Al);
 800c4b4:	fa00 f803 	lsl.w	r8, r0, r3
 800c4b8:	9b04      	ldr	r3, [sp, #16]
      state.last_dc_val[ci] = s;
 800c4ba:	f847 0c10 	str.w	r0, [r7, #-16]
      (*block)[0] = (JCOEF) (s << Al);
 800c4be:	f8a3 8000 	strh.w	r8, [r3]
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800c4c2:	e78f      	b.n	800c3e4 <decode_mcu_DC_first+0x6c>
      HUFF_DECODE(s, br_state, tbl, return FALSE, label1);
 800c4c4:	2301      	movs	r3, #1
 800c4c6:	9300      	str	r3, [sp, #0]
 800c4c8:	4662      	mov	r2, ip
 800c4ca:	4643      	mov	r3, r8
 800c4cc:	4671      	mov	r1, lr
 800c4ce:	a806      	add	r0, sp, #24
 800c4d0:	f7ff fee2 	bl	800c298 <jpeg_huff_decode>
 800c4d4:	f1b0 0800 	subs.w	r8, r0, #0
 800c4d8:	f6ff af69 	blt.w	800c3ae <decode_mcu_DC_first+0x36>
 800c4dc:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800c4e0:	e7c1      	b.n	800c466 <decode_mcu_DC_first+0xee>
 800c4e2:	2309      	movs	r3, #9
 800c4e4:	e7ef      	b.n	800c4c6 <decode_mcu_DC_first+0x14e>
 800c4e6:	bf00      	nop
 800c4e8:	0802dc70 	.word	0x0802dc70

0800c4ec <decode_mcu_AC_first>:
  JBLOCKROW block;
  BITREAD_STATE_VARS;
  d_derived_tbl * tbl;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 800c4ec:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{   
 800c4f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4f4:	4607      	mov	r7, r0
 800c4f6:	b08d      	sub	sp, #52	; 0x34
 800c4f8:	460c      	mov	r4, r1
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800c4fa:	f8d0 51d0 	ldr.w	r5, [r0, #464]	; 0x1d0
  if (cinfo->restart_interval) {
 800c4fe:	b933      	cbnz	r3, 800c50e <decode_mcu_AC_first+0x22>
  }

  /* If we've run out of data, just leave the MCU set to zeroes.
   * This way, we return uniform gray for the remainder of the segment.
   */
  if (! entropy->insufficient_data) {
 800c500:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c502:	b17b      	cbz	r3, 800c524 <decode_mcu_AC_first+0x38>
    /* Completed MCU, so update state */
    entropy->saved.EOBRUN = EOBRUN;	/* only part of saved state we need */
  }

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;
 800c504:	6aab      	ldr	r3, [r5, #40]	; 0x28

  return TRUE;
 800c506:	2001      	movs	r0, #1
  entropy->restarts_to_go--;
 800c508:	3b01      	subs	r3, #1
 800c50a:	62ab      	str	r3, [r5, #40]	; 0x28
  return TRUE;
 800c50c:	e007      	b.n	800c51e <decode_mcu_AC_first+0x32>
    if (entropy->restarts_to_go == 0)
 800c50e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800c510:	2b00      	cmp	r3, #0
 800c512:	d1f5      	bne.n	800c500 <decode_mcu_AC_first+0x14>
      if (! process_restart(cinfo))
 800c514:	f7ff ff0a 	bl	800c32c <process_restart>
 800c518:	2800      	cmp	r0, #0
 800c51a:	d1f1      	bne.n	800c500 <decode_mcu_AC_first+0x14>
	return FALSE;
 800c51c:	2000      	movs	r0, #0
}
 800c51e:	b00d      	add	sp, #52	; 0x34
 800c520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    EOBRUN = entropy->saved.EOBRUN;	/* only part of saved state we need */
 800c524:	692e      	ldr	r6, [r5, #16]
    if (EOBRUN > 0)		/* if it's a band of zeroes... */
 800c526:	b116      	cbz	r6, 800c52e <decode_mcu_AC_first+0x42>
      EOBRUN--;			/* ...process it now (we do nothing) */
 800c528:	3e01      	subs	r6, #1
    entropy->saved.EOBRUN = EOBRUN;	/* only part of saved state we need */
 800c52a:	612e      	str	r6, [r5, #16]
 800c52c:	e7ea      	b.n	800c504 <decode_mcu_AC_first+0x18>
    Se = cinfo->Se;
 800c52e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
    natural_order = cinfo->natural_order;
 800c532:	f8d7 b1ac 	ldr.w	fp, [r7, #428]	; 0x1ac
    Se = cinfo->Se;
 800c536:	9303      	str	r3, [sp, #12]
    Al = cinfo->Al;
 800c538:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
      tbl = entropy->ac_derived_tbl;
 800c53c:	f8d5 903c 	ldr.w	r9, [r5, #60]	; 0x3c
    Al = cinfo->Al;
 800c540:	9304      	str	r3, [sp, #16]
      BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800c542:	69bb      	ldr	r3, [r7, #24]
      for (k = cinfo->Ss; k <= Se; k++) {
 800c544:	f8d7 8198 	ldr.w	r8, [r7, #408]	; 0x198
      BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800c548:	681a      	ldr	r2, [r3, #0]
 800c54a:	685b      	ldr	r3, [r3, #4]
 800c54c:	9207      	str	r2, [sp, #28]
 800c54e:	9308      	str	r3, [sp, #32]
	  r = GET_BITS(s);
 800c550:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 800c648 <decode_mcu_AC_first+0x15c>
      block = MCU_data[0];
 800c554:	6823      	ldr	r3, [r4, #0]
      BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800c556:	970b      	str	r7, [sp, #44]	; 0x2c
      block = MCU_data[0];
 800c558:	9305      	str	r3, [sp, #20]
      BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800c55a:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
      for (k = cinfo->Ss; k <= Se; k++) {
 800c55e:	9b03      	ldr	r3, [sp, #12]
 800c560:	4598      	cmp	r8, r3
 800c562:	dc69      	bgt.n	800c638 <decode_mcu_AC_first+0x14c>
	HUFF_DECODE(s, br_state, tbl, return FALSE, label2);
 800c564:	2a07      	cmp	r2, #7
 800c566:	dc09      	bgt.n	800c57c <decode_mcu_AC_first+0x90>
 800c568:	2300      	movs	r3, #0
 800c56a:	a807      	add	r0, sp, #28
 800c56c:	f7ff fe36 	bl	800c1dc <jpeg_fill_bit_buffer>
 800c570:	2800      	cmp	r0, #0
 800c572:	d0d3      	beq.n	800c51c <decode_mcu_AC_first+0x30>
 800c574:	e9dd 1209 	ldrd	r1, r2, [sp, #36]	; 0x24
 800c578:	2a07      	cmp	r2, #7
 800c57a:	dd33      	ble.n	800c5e4 <decode_mcu_AC_first+0xf8>
 800c57c:	f1a2 0308 	sub.w	r3, r2, #8
 800c580:	fa41 f303 	asr.w	r3, r1, r3
 800c584:	b2db      	uxtb	r3, r3
 800c586:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800c58a:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 800c58e:	b3a0      	cbz	r0, 800c5fa <decode_mcu_AC_first+0x10e>
 800c590:	444b      	add	r3, r9
 800c592:	1a12      	subs	r2, r2, r0
 800c594:	f893 0490 	ldrb.w	r0, [r3, #1168]	; 0x490
	if (s) {
 800c598:	f010 040f 	ands.w	r4, r0, #15
	r = s >> 4;
 800c59c:	ea4f 1320 	mov.w	r3, r0, asr #4
	if (s) {
 800c5a0:	d02d      	beq.n	800c5fe <decode_mcu_AC_first+0x112>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800c5a2:	42a2      	cmp	r2, r4
	  k += r;
 800c5a4:	4498      	add	r8, r3
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800c5a6:	da07      	bge.n	800c5b8 <decode_mcu_AC_first+0xcc>
 800c5a8:	4623      	mov	r3, r4
 800c5aa:	a807      	add	r0, sp, #28
 800c5ac:	f7ff fe16 	bl	800c1dc <jpeg_fill_bit_buffer>
 800c5b0:	2800      	cmp	r0, #0
 800c5b2:	d0b3      	beq.n	800c51c <decode_mcu_AC_first+0x30>
 800c5b4:	e9dd 1209 	ldrd	r1, r2, [sp, #36]	; 0x24
	  r = GET_BITS(s);
 800c5b8:	1b12      	subs	r2, r2, r4
 800c5ba:	f85a 0024 	ldr.w	r0, [sl, r4, lsl #2]
	  s = HUFF_EXTEND(r, s);
 800c5be:	3c01      	subs	r4, #1
	  r = GET_BITS(s);
 800c5c0:	fa41 f302 	asr.w	r3, r1, r2
	  s = HUFF_EXTEND(r, s);
 800c5c4:	f85a 4024 	ldr.w	r4, [sl, r4, lsl #2]
	  r = GET_BITS(s);
 800c5c8:	4003      	ands	r3, r0
	  s = HUFF_EXTEND(r, s);
 800c5ca:	429c      	cmp	r4, r3
	  (*block)[natural_order[k]] = (JCOEF) (s << Al);
 800c5cc:	9c04      	ldr	r4, [sp, #16]
	  s = HUFF_EXTEND(r, s);
 800c5ce:	bfa8      	it	ge
 800c5d0:	1a1b      	subge	r3, r3, r0
	  (*block)[natural_order[k]] = (JCOEF) (s << Al);
 800c5d2:	f85b 0028 	ldr.w	r0, [fp, r8, lsl #2]
 800c5d6:	40a3      	lsls	r3, r4
 800c5d8:	9c05      	ldr	r4, [sp, #20]
 800c5da:	f824 3010 	strh.w	r3, [r4, r0, lsl #1]
      for (k = cinfo->Ss; k <= Se; k++) {
 800c5de:	f108 0801 	add.w	r8, r8, #1
 800c5e2:	e7bc      	b.n	800c55e <decode_mcu_AC_first+0x72>
	HUFF_DECODE(s, br_state, tbl, return FALSE, label2);
 800c5e4:	2301      	movs	r3, #1
 800c5e6:	9300      	str	r3, [sp, #0]
 800c5e8:	a807      	add	r0, sp, #28
 800c5ea:	464b      	mov	r3, r9
 800c5ec:	f7ff fe54 	bl	800c298 <jpeg_huff_decode>
 800c5f0:	2800      	cmp	r0, #0
 800c5f2:	db93      	blt.n	800c51c <decode_mcu_AC_first+0x30>
 800c5f4:	e9dd 1209 	ldrd	r1, r2, [sp, #36]	; 0x24
 800c5f8:	e7ce      	b.n	800c598 <decode_mcu_AC_first+0xac>
 800c5fa:	2309      	movs	r3, #9
 800c5fc:	e7f3      	b.n	800c5e6 <decode_mcu_AC_first+0xfa>
	  if (r == 15) {	/* ZRL */
 800c5fe:	2b0f      	cmp	r3, #15
 800c600:	d102      	bne.n	800c608 <decode_mcu_AC_first+0x11c>
	    k += 15;		/* skip 15 zeroes in band */
 800c602:	f108 080f 	add.w	r8, r8, #15
 800c606:	e7ea      	b.n	800c5de <decode_mcu_AC_first+0xf2>
	    EOBRUN = 1 << r;
 800c608:	2601      	movs	r6, #1
 800c60a:	409e      	lsls	r6, r3
	    if (r) {		/* EOBr, r > 0 */
 800c60c:	b19b      	cbz	r3, 800c636 <decode_mcu_AC_first+0x14a>
	      CHECK_BIT_BUFFER(br_state, r, return FALSE);
 800c60e:	429a      	cmp	r2, r3
 800c610:	da09      	bge.n	800c626 <decode_mcu_AC_first+0x13a>
 800c612:	a807      	add	r0, sp, #28
 800c614:	9303      	str	r3, [sp, #12]
 800c616:	f7ff fde1 	bl	800c1dc <jpeg_fill_bit_buffer>
 800c61a:	2800      	cmp	r0, #0
 800c61c:	f43f af7e 	beq.w	800c51c <decode_mcu_AC_first+0x30>
 800c620:	9b03      	ldr	r3, [sp, #12]
 800c622:	e9dd 1209 	ldrd	r1, r2, [sp, #36]	; 0x24
	      r = GET_BITS(r);
 800c626:	1ad2      	subs	r2, r2, r3
 800c628:	4807      	ldr	r0, [pc, #28]	; (800c648 <decode_mcu_AC_first+0x15c>)
 800c62a:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800c62e:	fa41 f302 	asr.w	r3, r1, r2
 800c632:	4003      	ands	r3, r0
	      EOBRUN += r;
 800c634:	441e      	add	r6, r3
	    EOBRUN--;		/* this band is processed at this moment */
 800c636:	3e01      	subs	r6, #1
      BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800c638:	69bb      	ldr	r3, [r7, #24]
 800c63a:	9807      	ldr	r0, [sp, #28]
 800c63c:	6018      	str	r0, [r3, #0]
 800c63e:	9808      	ldr	r0, [sp, #32]
 800c640:	6058      	str	r0, [r3, #4]
 800c642:	e9c5 1202 	strd	r1, r2, [r5, #8]
 800c646:	e770      	b.n	800c52a <decode_mcu_AC_first+0x3e>
 800c648:	0802dc70 	.word	0x0802dc70

0800c64c <decode_mcu_DC_refine>:
 * is not very clear on the point.
 */

METHODDEF(boolean)
decode_mcu_DC_refine (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{   
 800c64c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
  int p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 800c650:	f8d0 31a4 	ldr.w	r3, [r0, #420]	; 0x1a4
 800c654:	2701      	movs	r7, #1
{   
 800c656:	b087      	sub	sp, #28
 800c658:	4604      	mov	r4, r0
  int p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 800c65a:	409f      	lsls	r7, r3
  int blkn;
  JBLOCKROW block;
  BITREAD_STATE_VARS;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 800c65c:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{   
 800c660:	4688      	mov	r8, r1
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800c662:	f8d0 51d0 	ldr.w	r5, [r0, #464]	; 0x1d0
  if (cinfo->restart_interval) {
 800c666:	b9c3      	cbnz	r3, 800c69a <decode_mcu_DC_refine+0x4e>
  /* Not worth the cycles to check insufficient_data here,
   * since we will not change the data anyway if we read zeroes.
   */

  /* Load up working state */
  BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800c668:	69a3      	ldr	r3, [r4, #24]

  /* Outer loop handles each block in the MCU */

  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800c66a:	2600      	movs	r6, #0
  BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800c66c:	9405      	str	r4, [sp, #20]
 800c66e:	681a      	ldr	r2, [r3, #0]
 800c670:	685b      	ldr	r3, [r3, #4]
 800c672:	9201      	str	r2, [sp, #4]
 800c674:	9302      	str	r3, [sp, #8]
 800c676:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800c67a:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
 800c67e:	42b3      	cmp	r3, r6
 800c680:	dc16      	bgt.n	800c6b0 <decode_mcu_DC_refine+0x64>
      (*block)[0] |= p1;
    /* Note: since we use |=, repeating the assignment later is safe */
  }

  /* Completed MCU, so update state */
  BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800c682:	69a3      	ldr	r3, [r4, #24]
 800c684:	9801      	ldr	r0, [sp, #4]
 800c686:	6018      	str	r0, [r3, #0]
 800c688:	9802      	ldr	r0, [sp, #8]
 800c68a:	6058      	str	r0, [r3, #4]

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;

  return TRUE;
 800c68c:	2001      	movs	r0, #1
  entropy->restarts_to_go--;
 800c68e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800c690:	3b01      	subs	r3, #1
  BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800c692:	e9c5 1202 	strd	r1, r2, [r5, #8]
  entropy->restarts_to_go--;
 800c696:	62ab      	str	r3, [r5, #40]	; 0x28
  return TRUE;
 800c698:	e007      	b.n	800c6aa <decode_mcu_DC_refine+0x5e>
    if (entropy->restarts_to_go == 0)
 800c69a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d1e3      	bne.n	800c668 <decode_mcu_DC_refine+0x1c>
      if (! process_restart(cinfo))
 800c6a0:	f7ff fe44 	bl	800c32c <process_restart>
 800c6a4:	2800      	cmp	r0, #0
 800c6a6:	d1df      	bne.n	800c668 <decode_mcu_DC_refine+0x1c>
	return FALSE;
 800c6a8:	2000      	movs	r0, #0
}
 800c6aa:	b007      	add	sp, #28
 800c6ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    CHECK_BIT_BUFFER(br_state, 1, return FALSE);
 800c6b0:	2a00      	cmp	r2, #0
    block = MCU_data[blkn];
 800c6b2:	f858 9026 	ldr.w	r9, [r8, r6, lsl #2]
    CHECK_BIT_BUFFER(br_state, 1, return FALSE);
 800c6b6:	dc07      	bgt.n	800c6c8 <decode_mcu_DC_refine+0x7c>
 800c6b8:	2301      	movs	r3, #1
 800c6ba:	a801      	add	r0, sp, #4
 800c6bc:	f7ff fd8e 	bl	800c1dc <jpeg_fill_bit_buffer>
 800c6c0:	2800      	cmp	r0, #0
 800c6c2:	d0f1      	beq.n	800c6a8 <decode_mcu_DC_refine+0x5c>
 800c6c4:	e9dd 1203 	ldrd	r1, r2, [sp, #12]
    if (GET_BITS(1))
 800c6c8:	3a01      	subs	r2, #1
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800c6ca:	3601      	adds	r6, #1
    if (GET_BITS(1))
 800c6cc:	fa41 f302 	asr.w	r3, r1, r2
 800c6d0:	07db      	lsls	r3, r3, #31
      (*block)[0] |= p1;
 800c6d2:	bf42      	ittt	mi
 800c6d4:	f8b9 3000 	ldrhmi.w	r3, [r9]
 800c6d8:	433b      	orrmi	r3, r7
 800c6da:	f8a9 3000 	strhmi.w	r3, [r9]
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800c6de:	e7cc      	b.n	800c67a <decode_mcu_DC_refine+0x2e>

0800c6e0 <decode_mcu_AC_refine>:
  d_derived_tbl * tbl;
  int num_newnz;
  int newnz_pos[DCTSIZE2];

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 800c6e0:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{   
 800c6e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6e8:	4606      	mov	r6, r0
 800c6ea:	b0d1      	sub	sp, #324	; 0x144
 800c6ec:	460f      	mov	r7, r1
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800c6ee:	f8d0 81d0 	ldr.w	r8, [r0, #464]	; 0x1d0
  if (cinfo->restart_interval) {
 800c6f2:	b95b      	cbnz	r3, 800c70c <decode_mcu_AC_refine+0x2c>
	return FALSE;
  }

  /* If we've run out of data, don't modify the MCU.
   */
  if (! entropy->insufficient_data) {
 800c6f4:	f8d8 b024 	ldr.w	fp, [r8, #36]	; 0x24
 800c6f8:	f1bb 0f00 	cmp.w	fp, #0
 800c6fc:	d012      	beq.n	800c724 <decode_mcu_AC_refine+0x44>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
    entropy->saved.EOBRUN = EOBRUN; /* only part of saved state we need */
  }

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;
 800c6fe:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28

  return TRUE;
 800c702:	2001      	movs	r0, #1
  entropy->restarts_to_go--;
 800c704:	3b01      	subs	r3, #1
 800c706:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
  return TRUE;
 800c70a:	e008      	b.n	800c71e <decode_mcu_AC_refine+0x3e>
    if (entropy->restarts_to_go == 0)
 800c70c:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
 800c710:	2b00      	cmp	r3, #0
 800c712:	d1ef      	bne.n	800c6f4 <decode_mcu_AC_refine+0x14>
      if (! process_restart(cinfo))
 800c714:	f7ff fe0a 	bl	800c32c <process_restart>
 800c718:	2800      	cmp	r0, #0
 800c71a:	d1eb      	bne.n	800c6f4 <decode_mcu_AC_refine+0x14>
	return FALSE;
 800c71c:	2000      	movs	r0, #0
  /* Re-zero any output coefficients that we made newly nonzero */
  while (num_newnz > 0)
    (*block)[newnz_pos[--num_newnz]] = 0;

  return FALSE;
}
 800c71e:	b051      	add	sp, #324	; 0x144
 800c720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Se = cinfo->Se;
 800c724:	f8d6 319c 	ldr.w	r3, [r6, #412]	; 0x19c
    p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 800c728:	2201      	movs	r2, #1
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800c72a:	ad0b      	add	r5, sp, #44	; 0x2c
    block = MCU_data[0];
 800c72c:	f8d7 9000 	ldr.w	r9, [r7]
    Se = cinfo->Se;
 800c730:	9306      	str	r3, [sp, #24]
    p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 800c732:	f8d6 31a4 	ldr.w	r3, [r6, #420]	; 0x1a4
    k = cinfo->Ss;
 800c736:	f8d6 7198 	ldr.w	r7, [r6, #408]	; 0x198
    p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 800c73a:	409a      	lsls	r2, r3
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800c73c:	612e      	str	r6, [r5, #16]
    p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 800c73e:	9203      	str	r2, [sp, #12]
    m1 = (-1) << cinfo->Al;	/* -1 in the bit position being coded */
 800c740:	f04f 32ff 	mov.w	r2, #4294967295
 800c744:	fa02 f303 	lsl.w	r3, r2, r3
 800c748:	9307      	str	r3, [sp, #28]
    natural_order = cinfo->natural_order;
 800c74a:	f8d6 31ac 	ldr.w	r3, [r6, #428]	; 0x1ac
 800c74e:	9308      	str	r3, [sp, #32]
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800c750:	69b3      	ldr	r3, [r6, #24]
 800c752:	681a      	ldr	r2, [r3, #0]
 800c754:	685b      	ldr	r3, [r3, #4]
 800c756:	602a      	str	r2, [r5, #0]
 800c758:	606b      	str	r3, [r5, #4]
    EOBRUN = entropy->saved.EOBRUN; /* only part of saved state we need */
 800c75a:	f8d8 3010 	ldr.w	r3, [r8, #16]
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800c75e:	e9d8 4202 	ldrd	r4, r2, [r8, #8]
    EOBRUN = entropy->saved.EOBRUN; /* only part of saved state we need */
 800c762:	9302      	str	r3, [sp, #8]
    if (EOBRUN == 0) {
 800c764:	2b00      	cmp	r3, #0
 800c766:	f040 80bf 	bne.w	800c8e8 <decode_mcu_AC_refine+0x208>
    tbl = entropy->ac_derived_tbl;
 800c76a:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 800c76e:	9309      	str	r3, [sp, #36]	; 0x24
      for (; k <= Se; k++) {
 800c770:	9b06      	ldr	r3, [sp, #24]
 800c772:	429f      	cmp	r7, r3
 800c774:	dd0a      	ble.n	800c78c <decode_mcu_AC_refine+0xac>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800c776:	69b3      	ldr	r3, [r6, #24]
 800c778:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c77a:	6019      	str	r1, [r3, #0]
 800c77c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c77e:	6059      	str	r1, [r3, #4]
    entropy->saved.EOBRUN = EOBRUN; /* only part of saved state we need */
 800c780:	9b02      	ldr	r3, [sp, #8]
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800c782:	e9c8 4202 	strd	r4, r2, [r8, #8]
    entropy->saved.EOBRUN = EOBRUN; /* only part of saved state we need */
 800c786:	f8c8 3010 	str.w	r3, [r8, #16]
 800c78a:	e7b8      	b.n	800c6fe <decode_mcu_AC_refine+0x1e>
	HUFF_DECODE(s, br_state, tbl, goto undoit, label3);
 800c78c:	2a07      	cmp	r2, #7
 800c78e:	dc0a      	bgt.n	800c7a6 <decode_mcu_AC_refine+0xc6>
 800c790:	2300      	movs	r3, #0
 800c792:	4621      	mov	r1, r4
 800c794:	4628      	mov	r0, r5
 800c796:	f7ff fd21 	bl	800c1dc <jpeg_fill_bit_buffer>
 800c79a:	2800      	cmp	r0, #0
 800c79c:	d06e      	beq.n	800c87c <decode_mcu_AC_refine+0x19c>
 800c79e:	e9d5 4202 	ldrd	r4, r2, [r5, #8]
 800c7a2:	2a07      	cmp	r2, #7
 800c7a4:	dd61      	ble.n	800c86a <decode_mcu_AC_refine+0x18a>
 800c7a6:	f1a2 0308 	sub.w	r3, r2, #8
 800c7aa:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c7ac:	fa44 f303 	asr.w	r3, r4, r3
 800c7b0:	b2db      	uxtb	r3, r3
 800c7b2:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800c7b6:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 800c7ba:	2900      	cmp	r1, #0
 800c7bc:	d06b      	beq.n	800c896 <decode_mcu_AC_refine+0x1b6>
 800c7be:	4403      	add	r3, r0
 800c7c0:	1a52      	subs	r2, r2, r1
 800c7c2:	f893 0490 	ldrb.w	r0, [r3, #1168]	; 0x490
	if (s) {
 800c7c6:	f010 030f 	ands.w	r3, r0, #15
	r = s >> 4;
 800c7ca:	ea4f 1a20 	mov.w	sl, r0, asr #4
	if (s) {
 800c7ce:	9304      	str	r3, [sp, #16]
 800c7d0:	d066      	beq.n	800c8a0 <decode_mcu_AC_refine+0x1c0>
	  if (s != 1)		/* size of new coef should always be 1 */
 800c7d2:	2b01      	cmp	r3, #1
 800c7d4:	d009      	beq.n	800c7ea <decode_mcu_AC_refine+0x10a>
	    WARNMS(cinfo, JWRN_HUFF_BAD_CODE);
 800c7d6:	6833      	ldr	r3, [r6, #0]
 800c7d8:	2179      	movs	r1, #121	; 0x79
 800c7da:	4630      	mov	r0, r6
 800c7dc:	9204      	str	r2, [sp, #16]
 800c7de:	6159      	str	r1, [r3, #20]
 800c7e0:	f04f 31ff 	mov.w	r1, #4294967295
 800c7e4:	685b      	ldr	r3, [r3, #4]
 800c7e6:	4798      	blx	r3
 800c7e8:	9a04      	ldr	r2, [sp, #16]
	  CHECK_BIT_BUFFER(br_state, 1, goto undoit);
 800c7ea:	2a00      	cmp	r2, #0
 800c7ec:	dc08      	bgt.n	800c800 <decode_mcu_AC_refine+0x120>
 800c7ee:	2301      	movs	r3, #1
 800c7f0:	4621      	mov	r1, r4
 800c7f2:	4628      	mov	r0, r5
 800c7f4:	f7ff fcf2 	bl	800c1dc <jpeg_fill_bit_buffer>
 800c7f8:	2800      	cmp	r0, #0
 800c7fa:	d03f      	beq.n	800c87c <decode_mcu_AC_refine+0x19c>
 800c7fc:	e9d5 4202 	ldrd	r4, r2, [r5, #8]
	  if (GET_BITS(1))
 800c800:	3a01      	subs	r2, #1
	    s = m1;		/* newly nonzero coef is negative */
 800c802:	9907      	ldr	r1, [sp, #28]
	  if (GET_BITS(1))
 800c804:	fa44 f302 	asr.w	r3, r4, r2
	    s = m1;		/* newly nonzero coef is negative */
 800c808:	f013 0f01 	tst.w	r3, #1
 800c80c:	9b03      	ldr	r3, [sp, #12]
 800c80e:	bf08      	it	eq
 800c810:	460b      	moveq	r3, r1
 800c812:	9304      	str	r3, [sp, #16]
	  thiscoef = *block + natural_order[k];
 800c814:	9b08      	ldr	r3, [sp, #32]
 800c816:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
 800c81a:	9305      	str	r3, [sp, #20]
	  if (*thiscoef != 0) {
 800c81c:	f939 3013 	ldrsh.w	r3, [r9, r3, lsl #1]
 800c820:	2b00      	cmp	r3, #0
 800c822:	d068      	beq.n	800c8f6 <decode_mcu_AC_refine+0x216>
	    CHECK_BIT_BUFFER(br_state, 1, goto undoit);
 800c824:	2a00      	cmp	r2, #0
 800c826:	dc07      	bgt.n	800c838 <decode_mcu_AC_refine+0x158>
 800c828:	2301      	movs	r3, #1
 800c82a:	4621      	mov	r1, r4
 800c82c:	4628      	mov	r0, r5
 800c82e:	f7ff fcd5 	bl	800c1dc <jpeg_fill_bit_buffer>
 800c832:	b318      	cbz	r0, 800c87c <decode_mcu_AC_refine+0x19c>
 800c834:	e9d5 4202 	ldrd	r4, r2, [r5, #8]
	    if (GET_BITS(1)) {
 800c838:	3a01      	subs	r2, #1
 800c83a:	fa44 f302 	asr.w	r3, r4, r2
 800c83e:	07d9      	lsls	r1, r3, #31
 800c840:	d50e      	bpl.n	800c860 <decode_mcu_AC_refine+0x180>
	      if ((*thiscoef & p1) == 0) { /* do nothing if already set it */
 800c842:	9b05      	ldr	r3, [sp, #20]
 800c844:	f939 1013 	ldrsh.w	r1, [r9, r3, lsl #1]
 800c848:	9b03      	ldr	r3, [sp, #12]
 800c84a:	4219      	tst	r1, r3
 800c84c:	d108      	bne.n	800c860 <decode_mcu_AC_refine+0x180>
		if (*thiscoef >= 0)
 800c84e:	2900      	cmp	r1, #0
		  *thiscoef += p1;
 800c850:	b28b      	uxth	r3, r1
 800c852:	bfac      	ite	ge
 800c854:	9903      	ldrge	r1, [sp, #12]
		  *thiscoef += m1;
 800c856:	9907      	ldrlt	r1, [sp, #28]
 800c858:	440b      	add	r3, r1
 800c85a:	9905      	ldr	r1, [sp, #20]
 800c85c:	f829 3011 	strh.w	r3, [r9, r1, lsl #1]
	  k++;
 800c860:	3701      	adds	r7, #1
	} while (k <= Se);
 800c862:	9b06      	ldr	r3, [sp, #24]
 800c864:	42bb      	cmp	r3, r7
 800c866:	dad5      	bge.n	800c814 <decode_mcu_AC_refine+0x134>
 800c868:	e048      	b.n	800c8fc <decode_mcu_AC_refine+0x21c>
	HUFF_DECODE(s, br_state, tbl, goto undoit, label3);
 800c86a:	2301      	movs	r3, #1
 800c86c:	9300      	str	r3, [sp, #0]
 800c86e:	4621      	mov	r1, r4
 800c870:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c872:	4628      	mov	r0, r5
 800c874:	f7ff fd10 	bl	800c298 <jpeg_huff_decode>
 800c878:	2800      	cmp	r0, #0
 800c87a:	da0e      	bge.n	800c89a <decode_mcu_AC_refine+0x1ba>
    (*block)[newnz_pos[--num_newnz]] = 0;
 800c87c:	ab10      	add	r3, sp, #64	; 0x40
 800c87e:	2200      	movs	r2, #0
  while (num_newnz > 0)
 800c880:	f1bb 0f00 	cmp.w	fp, #0
 800c884:	f43f af4a 	beq.w	800c71c <decode_mcu_AC_refine+0x3c>
    (*block)[newnz_pos[--num_newnz]] = 0;
 800c888:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c88c:	f853 102b 	ldr.w	r1, [r3, fp, lsl #2]
 800c890:	f829 2011 	strh.w	r2, [r9, r1, lsl #1]
 800c894:	e7f4      	b.n	800c880 <decode_mcu_AC_refine+0x1a0>
	HUFF_DECODE(s, br_state, tbl, goto undoit, label3);
 800c896:	2309      	movs	r3, #9
 800c898:	e7e8      	b.n	800c86c <decode_mcu_AC_refine+0x18c>
 800c89a:	e9d5 4202 	ldrd	r4, r2, [r5, #8]
 800c89e:	e792      	b.n	800c7c6 <decode_mcu_AC_refine+0xe6>
	  if (r != 15) {
 800c8a0:	f1ba 0f0f 	cmp.w	sl, #15
 800c8a4:	d0b6      	beq.n	800c814 <decode_mcu_AC_refine+0x134>
	    EOBRUN = 1 << r;	/* EOBr, run length is 2^r + appended bits */
 800c8a6:	2301      	movs	r3, #1
 800c8a8:	fa03 f30a 	lsl.w	r3, r3, sl
 800c8ac:	9302      	str	r3, [sp, #8]
	    if (r) {
 800c8ae:	f1ba 0f00 	cmp.w	sl, #0
 800c8b2:	d015      	beq.n	800c8e0 <decode_mcu_AC_refine+0x200>
	      CHECK_BIT_BUFFER(br_state, r, goto undoit);
 800c8b4:	4552      	cmp	r2, sl
 800c8b6:	da08      	bge.n	800c8ca <decode_mcu_AC_refine+0x1ea>
 800c8b8:	4653      	mov	r3, sl
 800c8ba:	4621      	mov	r1, r4
 800c8bc:	a80b      	add	r0, sp, #44	; 0x2c
 800c8be:	f7ff fc8d 	bl	800c1dc <jpeg_fill_bit_buffer>
 800c8c2:	2800      	cmp	r0, #0
 800c8c4:	d0da      	beq.n	800c87c <decode_mcu_AC_refine+0x19c>
 800c8c6:	e9dd 420d 	ldrd	r4, r2, [sp, #52]	; 0x34
	      r = GET_BITS(r);
 800c8ca:	4b26      	ldr	r3, [pc, #152]	; (800c964 <decode_mcu_AC_refine+0x284>)
 800c8cc:	eba2 020a 	sub.w	r2, r2, sl
 800c8d0:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 800c8d4:	fa44 f302 	asr.w	r3, r4, r2
 800c8d8:	400b      	ands	r3, r1
	      EOBRUN += r;
 800c8da:	9902      	ldr	r1, [sp, #8]
 800c8dc:	4419      	add	r1, r3
 800c8de:	9102      	str	r1, [sp, #8]
    if (EOBRUN > 0) {
 800c8e0:	9b02      	ldr	r3, [sp, #8]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	f43f af47 	beq.w	800c776 <decode_mcu_AC_refine+0x96>
      for (; k <= Se; k++) {
 800c8e8:	9b06      	ldr	r3, [sp, #24]
 800c8ea:	429f      	cmp	r7, r3
 800c8ec:	dd15      	ble.n	800c91a <decode_mcu_AC_refine+0x23a>
      EOBRUN--;
 800c8ee:	9b02      	ldr	r3, [sp, #8]
 800c8f0:	3b01      	subs	r3, #1
 800c8f2:	9302      	str	r3, [sp, #8]
 800c8f4:	e73f      	b.n	800c776 <decode_mcu_AC_refine+0x96>
	    if (--r < 0)
 800c8f6:	f1ba 0a01 	subs.w	sl, sl, #1
 800c8fa:	d2b1      	bcs.n	800c860 <decode_mcu_AC_refine+0x180>
	if (s) {
 800c8fc:	9b04      	ldr	r3, [sp, #16]
 800c8fe:	b153      	cbz	r3, 800c916 <decode_mcu_AC_refine+0x236>
	  int pos = natural_order[k];
 800c900:	9b08      	ldr	r3, [sp, #32]
	  (*block)[pos] = (JCOEF) s;
 800c902:	9904      	ldr	r1, [sp, #16]
	  int pos = natural_order[k];
 800c904:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
	  (*block)[pos] = (JCOEF) s;
 800c908:	f829 1013 	strh.w	r1, [r9, r3, lsl #1]
	  newnz_pos[num_newnz++] = pos;
 800c90c:	a910      	add	r1, sp, #64	; 0x40
 800c90e:	f841 302b 	str.w	r3, [r1, fp, lsl #2]
 800c912:	f10b 0b01 	add.w	fp, fp, #1
      for (; k <= Se; k++) {
 800c916:	3701      	adds	r7, #1
 800c918:	e72a      	b.n	800c770 <decode_mcu_AC_refine+0x90>
	thiscoef = *block + natural_order[k];
 800c91a:	9b08      	ldr	r3, [sp, #32]
 800c91c:	f853 5027 	ldr.w	r5, [r3, r7, lsl #2]
	if (*thiscoef != 0) {
 800c920:	f939 3015 	ldrsh.w	r3, [r9, r5, lsl #1]
 800c924:	b1e3      	cbz	r3, 800c960 <decode_mcu_AC_refine+0x280>
	  CHECK_BIT_BUFFER(br_state, 1, goto undoit);
 800c926:	2a00      	cmp	r2, #0
 800c928:	dc08      	bgt.n	800c93c <decode_mcu_AC_refine+0x25c>
 800c92a:	2301      	movs	r3, #1
 800c92c:	4621      	mov	r1, r4
 800c92e:	a80b      	add	r0, sp, #44	; 0x2c
 800c930:	f7ff fc54 	bl	800c1dc <jpeg_fill_bit_buffer>
 800c934:	2800      	cmp	r0, #0
 800c936:	d0a1      	beq.n	800c87c <decode_mcu_AC_refine+0x19c>
 800c938:	e9dd 420d 	ldrd	r4, r2, [sp, #52]	; 0x34
	  if (GET_BITS(1)) {
 800c93c:	3a01      	subs	r2, #1
 800c93e:	fa44 f302 	asr.w	r3, r4, r2
 800c942:	07db      	lsls	r3, r3, #31
 800c944:	d50c      	bpl.n	800c960 <decode_mcu_AC_refine+0x280>
	    if ((*thiscoef & p1) == 0) { /* do nothing if already changed it */
 800c946:	f939 1015 	ldrsh.w	r1, [r9, r5, lsl #1]
 800c94a:	9b03      	ldr	r3, [sp, #12]
 800c94c:	4219      	tst	r1, r3
 800c94e:	d107      	bne.n	800c960 <decode_mcu_AC_refine+0x280>
	      if (*thiscoef >= 0)
 800c950:	2900      	cmp	r1, #0
		*thiscoef += p1;
 800c952:	b28b      	uxth	r3, r1
 800c954:	bfac      	ite	ge
 800c956:	9903      	ldrge	r1, [sp, #12]
		*thiscoef += m1;
 800c958:	9907      	ldrlt	r1, [sp, #28]
 800c95a:	440b      	add	r3, r1
 800c95c:	f829 3015 	strh.w	r3, [r9, r5, lsl #1]
      for (; k <= Se; k++) {
 800c960:	3701      	adds	r7, #1
 800c962:	e7c1      	b.n	800c8e8 <decode_mcu_AC_refine+0x208>
 800c964:	0802dc70 	.word	0x0802dc70

0800c968 <decode_mcu_sub>:
 * partial blocks.
 */

METHODDEF(boolean)
decode_mcu_sub (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{
 800c968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int Se, blkn;
  BITREAD_STATE_VARS;
  savable_state state;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 800c96c:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{
 800c970:	b093      	sub	sp, #76	; 0x4c
 800c972:	4606      	mov	r6, r0
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800c974:	f8d0 51d0 	ldr.w	r5, [r0, #464]	; 0x1d0
{
 800c978:	9106      	str	r1, [sp, #24]
  if (cinfo->restart_interval) {
 800c97a:	b933      	cbnz	r3, 800c98a <decode_mcu_sub+0x22>
  }

  /* If we've run out of data, just leave the MCU set to zeroes.
   * This way, we return uniform gray for the remainder of the segment.
   */
  if (! entropy->insufficient_data) {
 800c97c:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 800c97e:	b17f      	cbz	r7, 800c9a0 <decode_mcu_sub+0x38>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
    ASSIGN_STATE(entropy->saved, state);
  }

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;
 800c980:	6aab      	ldr	r3, [r5, #40]	; 0x28

  return TRUE;
 800c982:	2001      	movs	r0, #1
  entropy->restarts_to_go--;
 800c984:	3b01      	subs	r3, #1
 800c986:	62ab      	str	r3, [r5, #40]	; 0x28
  return TRUE;
 800c988:	e007      	b.n	800c99a <decode_mcu_sub+0x32>
    if (entropy->restarts_to_go == 0)
 800c98a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d1f5      	bne.n	800c97c <decode_mcu_sub+0x14>
      if (! process_restart(cinfo))
 800c990:	f7ff fccc 	bl	800c32c <process_restart>
 800c994:	2800      	cmp	r0, #0
 800c996:	d1f1      	bne.n	800c97c <decode_mcu_sub+0x14>
	return FALSE;
 800c998:	2000      	movs	r0, #0
}
 800c99a:	b013      	add	sp, #76	; 0x4c
 800c99c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    natural_order = cinfo->natural_order;
 800c9a0:	f8d6 31ac 	ldr.w	r3, [r6, #428]	; 0x1ac
    ASSIGN_STATE(state, entropy->saved);
 800c9a4:	f105 0810 	add.w	r8, r5, #16
 800c9a8:	ac0d      	add	r4, sp, #52	; 0x34
 800c9aa:	f105 0960 	add.w	r9, r5, #96	; 0x60
    natural_order = cinfo->natural_order;
 800c9ae:	9304      	str	r3, [sp, #16]
    Se = cinfo->lim_Se;
 800c9b0:	f8d6 31b0 	ldr.w	r3, [r6, #432]	; 0x1b0
	    r = GET_BITS(s);
 800c9b4:	f8df a29c 	ldr.w	sl, [pc, #668]	; 800cc54 <decode_mcu_sub+0x2ec>
    Se = cinfo->lim_Se;
 800c9b8:	9305      	str	r3, [sp, #20]
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800c9ba:	69b3      	ldr	r3, [r6, #24]
 800c9bc:	960c      	str	r6, [sp, #48]	; 0x30
 800c9be:	681a      	ldr	r2, [r3, #0]
 800c9c0:	685b      	ldr	r3, [r3, #4]
 800c9c2:	9208      	str	r2, [sp, #32]
 800c9c4:	9309      	str	r3, [sp, #36]	; 0x24
    ASSIGN_STATE(state, entropy->saved);
 800c9c6:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800c9ca:	e9d5 ec02 	ldrd	lr, ip, [r5, #8]
    ASSIGN_STATE(state, entropy->saved);
 800c9ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c9d0:	f8d8 3000 	ldr.w	r3, [r8]
 800c9d4:	6023      	str	r3, [r4, #0]
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800c9d6:	f8d6 316c 	ldr.w	r3, [r6, #364]	; 0x16c
 800c9da:	42bb      	cmp	r3, r7
 800c9dc:	dc0e      	bgt.n	800c9fc <decode_mcu_sub+0x94>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800c9de:	69b3      	ldr	r3, [r6, #24]
    ASSIGN_STATE(entropy->saved, state);
 800c9e0:	ae0d      	add	r6, sp, #52	; 0x34
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800c9e2:	9a08      	ldr	r2, [sp, #32]
    ASSIGN_STATE(entropy->saved, state);
 800c9e4:	f105 0410 	add.w	r4, r5, #16
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800c9e8:	601a      	str	r2, [r3, #0]
 800c9ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c9ec:	605a      	str	r2, [r3, #4]
    ASSIGN_STATE(entropy->saved, state);
 800c9ee:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800c9f0:	e9c5 ec02 	strd	lr, ip, [r5, #8]
    ASSIGN_STATE(entropy->saved, state);
 800c9f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c9f6:	6833      	ldr	r3, [r6, #0]
 800c9f8:	6023      	str	r3, [r4, #0]
 800c9fa:	e7c1      	b.n	800c980 <decode_mcu_sub+0x18>
      JBLOCKROW block = MCU_data[blkn];
 800c9fc:	9b06      	ldr	r3, [sp, #24]
      HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 800c9fe:	f1bc 0f07 	cmp.w	ip, #7
      htbl = entropy->dc_cur_tbls[blkn];
 800ca02:	f859 4b04 	ldr.w	r4, [r9], #4
      JBLOCKROW block = MCU_data[blkn];
 800ca06:	f853 b027 	ldr.w	fp, [r3, r7, lsl #2]
      HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 800ca0a:	dc0c      	bgt.n	800ca26 <decode_mcu_sub+0xbe>
 800ca0c:	2300      	movs	r3, #0
 800ca0e:	4662      	mov	r2, ip
 800ca10:	4671      	mov	r1, lr
 800ca12:	a808      	add	r0, sp, #32
 800ca14:	f7ff fbe2 	bl	800c1dc <jpeg_fill_bit_buffer>
 800ca18:	2800      	cmp	r0, #0
 800ca1a:	d0bd      	beq.n	800c998 <decode_mcu_sub+0x30>
 800ca1c:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
 800ca20:	f1bc 0f07 	cmp.w	ip, #7
 800ca24:	dd4a      	ble.n	800cabc <decode_mcu_sub+0x154>
 800ca26:	f1ac 0308 	sub.w	r3, ip, #8
 800ca2a:	fa4e f303 	asr.w	r3, lr, r3
 800ca2e:	b2db      	uxtb	r3, r3
 800ca30:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800ca34:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ca38:	2a00      	cmp	r2, #0
 800ca3a:	d04d      	beq.n	800cad8 <decode_mcu_sub+0x170>
 800ca3c:	4423      	add	r3, r4
 800ca3e:	ebac 0c02 	sub.w	ip, ip, r2
 800ca42:	f893 4490 	ldrb.w	r4, [r3, #1168]	; 0x490
      coef_limit = entropy->coef_limit[blkn];
 800ca46:	f8d9 304c 	ldr.w	r3, [r9, #76]	; 0x4c
      htbl = entropy->ac_cur_tbls[blkn];
 800ca4a:	f8d9 8024 	ldr.w	r8, [r9, #36]	; 0x24
      coef_limit = entropy->coef_limit[blkn];
 800ca4e:	9303      	str	r3, [sp, #12]
      if (coef_limit) {
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	f000 80a0 	beq.w	800cb96 <decode_mcu_sub+0x22e>
	if (s) {
 800ca56:	b1cc      	cbz	r4, 800ca8c <decode_mcu_sub+0x124>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800ca58:	45a4      	cmp	ip, r4
 800ca5a:	da09      	bge.n	800ca70 <decode_mcu_sub+0x108>
 800ca5c:	4623      	mov	r3, r4
 800ca5e:	4662      	mov	r2, ip
 800ca60:	4671      	mov	r1, lr
 800ca62:	a808      	add	r0, sp, #32
 800ca64:	f7ff fbba 	bl	800c1dc <jpeg_fill_bit_buffer>
 800ca68:	2800      	cmp	r0, #0
 800ca6a:	d095      	beq.n	800c998 <decode_mcu_sub+0x30>
 800ca6c:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
	  r = GET_BITS(s);
 800ca70:	ebac 0c04 	sub.w	ip, ip, r4
 800ca74:	f85a 2024 	ldr.w	r2, [sl, r4, lsl #2]
	  s = HUFF_EXTEND(r, s);
 800ca78:	3c01      	subs	r4, #1
	  r = GET_BITS(s);
 800ca7a:	fa4e f30c 	asr.w	r3, lr, ip
	  s = HUFF_EXTEND(r, s);
 800ca7e:	f85a 1024 	ldr.w	r1, [sl, r4, lsl #2]
	  r = GET_BITS(s);
 800ca82:	4013      	ands	r3, r2
	  s = HUFF_EXTEND(r, s);
 800ca84:	4299      	cmp	r1, r3
 800ca86:	bfac      	ite	ge
 800ca88:	1a9c      	subge	r4, r3, r2
 800ca8a:	461c      	movlt	r4, r3
	ci = cinfo->MCU_membership[blkn];
 800ca8c:	f506 73b8 	add.w	r3, r6, #368	; 0x170
 800ca90:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
	s += state.last_dc_val[ci];
 800ca94:	ab12      	add	r3, sp, #72	; 0x48
 800ca96:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800ca9a:	f852 3c10 	ldr.w	r3, [r2, #-16]
 800ca9e:	441c      	add	r4, r3
	state.last_dc_val[ci] = s;
 800caa0:	f842 4c10 	str.w	r4, [r2, #-16]
	(*block)[0] = (JCOEF) s;
 800caa4:	f8ab 4000 	strh.w	r4, [fp]
      k = 1;
 800caa8:	2401      	movs	r4, #1
	for (; k < coef_limit; k++) {
 800caaa:	9b03      	ldr	r3, [sp, #12]
 800caac:	429c      	cmp	r4, r3
 800caae:	db15      	blt.n	800cadc <decode_mcu_sub+0x174>
      for (; k <= Se; k++) {
 800cab0:	9b05      	ldr	r3, [sp, #20]
 800cab2:	429c      	cmp	r4, r3
 800cab4:	f340 8081 	ble.w	800cbba <decode_mcu_sub+0x252>
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800cab8:	3701      	adds	r7, #1
 800caba:	e78c      	b.n	800c9d6 <decode_mcu_sub+0x6e>
      HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 800cabc:	2301      	movs	r3, #1
 800cabe:	9300      	str	r3, [sp, #0]
 800cac0:	4662      	mov	r2, ip
 800cac2:	4623      	mov	r3, r4
 800cac4:	4671      	mov	r1, lr
 800cac6:	a808      	add	r0, sp, #32
 800cac8:	f7ff fbe6 	bl	800c298 <jpeg_huff_decode>
 800cacc:	1e04      	subs	r4, r0, #0
 800cace:	f6ff af63 	blt.w	800c998 <decode_mcu_sub+0x30>
 800cad2:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
 800cad6:	e7b6      	b.n	800ca46 <decode_mcu_sub+0xde>
 800cad8:	2309      	movs	r3, #9
 800cada:	e7f0      	b.n	800cabe <decode_mcu_sub+0x156>
	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 800cadc:	f1bc 0f07 	cmp.w	ip, #7
 800cae0:	dc0d      	bgt.n	800cafe <decode_mcu_sub+0x196>
 800cae2:	2300      	movs	r3, #0
 800cae4:	4662      	mov	r2, ip
 800cae6:	4671      	mov	r1, lr
 800cae8:	a808      	add	r0, sp, #32
 800caea:	f7ff fb77 	bl	800c1dc <jpeg_fill_bit_buffer>
 800caee:	2800      	cmp	r0, #0
 800caf0:	f43f af52 	beq.w	800c998 <decode_mcu_sub+0x30>
 800caf4:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
 800caf8:	f1bc 0f07 	cmp.w	ip, #7
 800cafc:	dd37      	ble.n	800cb6e <decode_mcu_sub+0x206>
 800cafe:	f1ac 0308 	sub.w	r3, ip, #8
 800cb02:	fa4e f303 	asr.w	r3, lr, r3
 800cb06:	b2db      	uxtb	r3, r3
 800cb08:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800cb0c:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800cb10:	2a00      	cmp	r2, #0
 800cb12:	d03a      	beq.n	800cb8a <decode_mcu_sub+0x222>
 800cb14:	4443      	add	r3, r8
 800cb16:	ebac 0c02 	sub.w	ip, ip, r2
 800cb1a:	f893 0490 	ldrb.w	r0, [r3, #1168]	; 0x490
	  if (s) {
 800cb1e:	f010 030f 	ands.w	r3, r0, #15
	  r = s >> 4;
 800cb22:	ea4f 1220 	mov.w	r2, r0, asr #4
	  if (s) {
 800cb26:	d032      	beq.n	800cb8e <decode_mcu_sub+0x226>
	    CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800cb28:	459c      	cmp	ip, r3
	    k += r;
 800cb2a:	4414      	add	r4, r2
	    CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800cb2c:	da0b      	bge.n	800cb46 <decode_mcu_sub+0x1de>
 800cb2e:	4662      	mov	r2, ip
 800cb30:	4671      	mov	r1, lr
 800cb32:	a808      	add	r0, sp, #32
 800cb34:	9307      	str	r3, [sp, #28]
 800cb36:	f7ff fb51 	bl	800c1dc <jpeg_fill_bit_buffer>
 800cb3a:	2800      	cmp	r0, #0
 800cb3c:	f43f af2c 	beq.w	800c998 <decode_mcu_sub+0x30>
 800cb40:	9b07      	ldr	r3, [sp, #28]
 800cb42:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
	    r = GET_BITS(s);
 800cb46:	ebac 0c03 	sub.w	ip, ip, r3
 800cb4a:	f85a 1023 	ldr.w	r1, [sl, r3, lsl #2]
	    s = HUFF_EXTEND(r, s);
 800cb4e:	3b01      	subs	r3, #1
	    r = GET_BITS(s);
 800cb50:	fa4e f20c 	asr.w	r2, lr, ip
	    s = HUFF_EXTEND(r, s);
 800cb54:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
	    r = GET_BITS(s);
 800cb58:	400a      	ands	r2, r1
	    s = HUFF_EXTEND(r, s);
 800cb5a:	4293      	cmp	r3, r2
	    (*block)[natural_order[k]] = (JCOEF) s;
 800cb5c:	9b04      	ldr	r3, [sp, #16]
	    s = HUFF_EXTEND(r, s);
 800cb5e:	bfa8      	it	ge
 800cb60:	1a52      	subge	r2, r2, r1
	    (*block)[natural_order[k]] = (JCOEF) s;
 800cb62:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800cb66:	f82b 2013 	strh.w	r2, [fp, r3, lsl #1]
	for (; k < coef_limit; k++) {
 800cb6a:	3401      	adds	r4, #1
 800cb6c:	e79d      	b.n	800caaa <decode_mcu_sub+0x142>
	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 800cb6e:	2301      	movs	r3, #1
 800cb70:	9300      	str	r3, [sp, #0]
 800cb72:	4662      	mov	r2, ip
 800cb74:	4643      	mov	r3, r8
 800cb76:	4671      	mov	r1, lr
 800cb78:	a808      	add	r0, sp, #32
 800cb7a:	f7ff fb8d 	bl	800c298 <jpeg_huff_decode>
 800cb7e:	2800      	cmp	r0, #0
 800cb80:	f6ff af0a 	blt.w	800c998 <decode_mcu_sub+0x30>
 800cb84:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
 800cb88:	e7c9      	b.n	800cb1e <decode_mcu_sub+0x1b6>
 800cb8a:	2309      	movs	r3, #9
 800cb8c:	e7f0      	b.n	800cb70 <decode_mcu_sub+0x208>
	    if (r != 15)
 800cb8e:	2a0f      	cmp	r2, #15
 800cb90:	d192      	bne.n	800cab8 <decode_mcu_sub+0x150>
	    k += 15;
 800cb92:	340f      	adds	r4, #15
 800cb94:	e7e9      	b.n	800cb6a <decode_mcu_sub+0x202>
	if (s) {
 800cb96:	b174      	cbz	r4, 800cbb6 <decode_mcu_sub+0x24e>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800cb98:	45a4      	cmp	ip, r4
 800cb9a:	da0a      	bge.n	800cbb2 <decode_mcu_sub+0x24a>
 800cb9c:	4623      	mov	r3, r4
 800cb9e:	4662      	mov	r2, ip
 800cba0:	4671      	mov	r1, lr
 800cba2:	a808      	add	r0, sp, #32
 800cba4:	f7ff fb1a 	bl	800c1dc <jpeg_fill_bit_buffer>
 800cba8:	2800      	cmp	r0, #0
 800cbaa:	f43f aef5 	beq.w	800c998 <decode_mcu_sub+0x30>
 800cbae:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
	  DROP_BITS(s);
 800cbb2:	ebac 0c04 	sub.w	ip, ip, r4
      k = 1;
 800cbb6:	2401      	movs	r4, #1
 800cbb8:	e77a      	b.n	800cab0 <decode_mcu_sub+0x148>
	HUFF_DECODE(s, br_state, htbl, return FALSE, label3);
 800cbba:	f1bc 0f07 	cmp.w	ip, #7
 800cbbe:	dc0d      	bgt.n	800cbdc <decode_mcu_sub+0x274>
 800cbc0:	2300      	movs	r3, #0
 800cbc2:	4662      	mov	r2, ip
 800cbc4:	4671      	mov	r1, lr
 800cbc6:	a808      	add	r0, sp, #32
 800cbc8:	f7ff fb08 	bl	800c1dc <jpeg_fill_bit_buffer>
 800cbcc:	2800      	cmp	r0, #0
 800cbce:	f43f aee3 	beq.w	800c998 <decode_mcu_sub+0x30>
 800cbd2:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
 800cbd6:	f1bc 0f07 	cmp.w	ip, #7
 800cbda:	dd25      	ble.n	800cc28 <decode_mcu_sub+0x2c0>
 800cbdc:	f1ac 0308 	sub.w	r3, ip, #8
 800cbe0:	fa4e f303 	asr.w	r3, lr, r3
 800cbe4:	b2db      	uxtb	r3, r3
 800cbe6:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800cbea:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800cbee:	b34a      	cbz	r2, 800cc44 <decode_mcu_sub+0x2dc>
 800cbf0:	4443      	add	r3, r8
 800cbf2:	ebac 0c02 	sub.w	ip, ip, r2
 800cbf6:	f893 0490 	ldrb.w	r0, [r3, #1168]	; 0x490
	if (s) {
 800cbfa:	f010 0b0f 	ands.w	fp, r0, #15
	r = s >> 4;
 800cbfe:	ea4f 1320 	mov.w	r3, r0, asr #4
	if (s) {
 800cc02:	d021      	beq.n	800cc48 <decode_mcu_sub+0x2e0>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800cc04:	45dc      	cmp	ip, fp
	  k += r;
 800cc06:	441c      	add	r4, r3
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800cc08:	da0a      	bge.n	800cc20 <decode_mcu_sub+0x2b8>
 800cc0a:	465b      	mov	r3, fp
 800cc0c:	4662      	mov	r2, ip
 800cc0e:	4671      	mov	r1, lr
 800cc10:	a808      	add	r0, sp, #32
 800cc12:	f7ff fae3 	bl	800c1dc <jpeg_fill_bit_buffer>
 800cc16:	2800      	cmp	r0, #0
 800cc18:	f43f aebe 	beq.w	800c998 <decode_mcu_sub+0x30>
 800cc1c:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
	  DROP_BITS(s);
 800cc20:	ebac 0c0b 	sub.w	ip, ip, fp
      for (; k <= Se; k++) {
 800cc24:	3401      	adds	r4, #1
 800cc26:	e743      	b.n	800cab0 <decode_mcu_sub+0x148>
	HUFF_DECODE(s, br_state, htbl, return FALSE, label3);
 800cc28:	2301      	movs	r3, #1
 800cc2a:	9300      	str	r3, [sp, #0]
 800cc2c:	4662      	mov	r2, ip
 800cc2e:	4643      	mov	r3, r8
 800cc30:	4671      	mov	r1, lr
 800cc32:	a808      	add	r0, sp, #32
 800cc34:	f7ff fb30 	bl	800c298 <jpeg_huff_decode>
 800cc38:	2800      	cmp	r0, #0
 800cc3a:	f6ff aead 	blt.w	800c998 <decode_mcu_sub+0x30>
 800cc3e:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
 800cc42:	e7da      	b.n	800cbfa <decode_mcu_sub+0x292>
 800cc44:	2309      	movs	r3, #9
 800cc46:	e7f0      	b.n	800cc2a <decode_mcu_sub+0x2c2>
	  if (r != 15)
 800cc48:	2b0f      	cmp	r3, #15
 800cc4a:	f47f af35 	bne.w	800cab8 <decode_mcu_sub+0x150>
	  k += 15;
 800cc4e:	340f      	adds	r4, #15
 800cc50:	e7e8      	b.n	800cc24 <decode_mcu_sub+0x2bc>
 800cc52:	bf00      	nop
 800cc54:	0802dc70 	.word	0x0802dc70

0800cc58 <decode_mcu>:
 * full-size blocks.
 */

METHODDEF(boolean)
decode_mcu (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{
 800cc58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int blkn;
  BITREAD_STATE_VARS;
  savable_state state;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 800cc5c:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{
 800cc60:	b091      	sub	sp, #68	; 0x44
 800cc62:	4606      	mov	r6, r0
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800cc64:	f8d0 51d0 	ldr.w	r5, [r0, #464]	; 0x1d0
{
 800cc68:	9104      	str	r1, [sp, #16]
  if (cinfo->restart_interval) {
 800cc6a:	b933      	cbnz	r3, 800cc7a <decode_mcu+0x22>
  }

  /* If we've run out of data, just leave the MCU set to zeroes.
   * This way, we return uniform gray for the remainder of the segment.
   */
  if (! entropy->insufficient_data) {
 800cc6c:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 800cc6e:	b17f      	cbz	r7, 800cc90 <decode_mcu+0x38>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
    ASSIGN_STATE(entropy->saved, state);
  }

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;
 800cc70:	6aab      	ldr	r3, [r5, #40]	; 0x28

  return TRUE;
 800cc72:	2001      	movs	r0, #1
  entropy->restarts_to_go--;
 800cc74:	3b01      	subs	r3, #1
 800cc76:	62ab      	str	r3, [r5, #40]	; 0x28
  return TRUE;
 800cc78:	e007      	b.n	800cc8a <decode_mcu+0x32>
    if (entropy->restarts_to_go == 0)
 800cc7a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d1f5      	bne.n	800cc6c <decode_mcu+0x14>
      if (! process_restart(cinfo))
 800cc80:	f7ff fb54 	bl	800c32c <process_restart>
 800cc84:	2800      	cmp	r0, #0
 800cc86:	d1f1      	bne.n	800cc6c <decode_mcu+0x14>
	return FALSE;
 800cc88:	2000      	movs	r0, #0
}
 800cc8a:	b011      	add	sp, #68	; 0x44
 800cc8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800cc90:	69b3      	ldr	r3, [r6, #24]
    ASSIGN_STATE(state, entropy->saved);
 800cc92:	f105 0810 	add.w	r8, r5, #16
 800cc96:	ac0b      	add	r4, sp, #44	; 0x2c
 800cc98:	f105 0960 	add.w	r9, r5, #96	; 0x60
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800cc9c:	681a      	ldr	r2, [r3, #0]
 800cc9e:	685b      	ldr	r3, [r3, #4]
 800cca0:	9206      	str	r2, [sp, #24]
 800cca2:	9307      	str	r3, [sp, #28]
	    r = GET_BITS(s);
 800cca4:	f8df a290 	ldr.w	sl, [pc, #656]	; 800cf38 <decode_mcu+0x2e0>
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800cca8:	960a      	str	r6, [sp, #40]	; 0x28
    ASSIGN_STATE(state, entropy->saved);
 800ccaa:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800ccae:	e9d5 ec02 	ldrd	lr, ip, [r5, #8]
    ASSIGN_STATE(state, entropy->saved);
 800ccb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ccb4:	f8d8 3000 	ldr.w	r3, [r8]
 800ccb8:	6023      	str	r3, [r4, #0]
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800ccba:	f8d6 316c 	ldr.w	r3, [r6, #364]	; 0x16c
 800ccbe:	42bb      	cmp	r3, r7
 800ccc0:	dc0e      	bgt.n	800cce0 <decode_mcu+0x88>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800ccc2:	69b3      	ldr	r3, [r6, #24]
    ASSIGN_STATE(entropy->saved, state);
 800ccc4:	ae0b      	add	r6, sp, #44	; 0x2c
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800ccc6:	9a06      	ldr	r2, [sp, #24]
    ASSIGN_STATE(entropy->saved, state);
 800ccc8:	f105 0410 	add.w	r4, r5, #16
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800cccc:	601a      	str	r2, [r3, #0]
 800ccce:	9a07      	ldr	r2, [sp, #28]
 800ccd0:	605a      	str	r2, [r3, #4]
    ASSIGN_STATE(entropy->saved, state);
 800ccd2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800ccd4:	e9c5 ec02 	strd	lr, ip, [r5, #8]
    ASSIGN_STATE(entropy->saved, state);
 800ccd8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ccda:	6833      	ldr	r3, [r6, #0]
 800ccdc:	6023      	str	r3, [r4, #0]
 800ccde:	e7c7      	b.n	800cc70 <decode_mcu+0x18>
      JBLOCKROW block = MCU_data[blkn];
 800cce0:	9b04      	ldr	r3, [sp, #16]
      HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 800cce2:	f1bc 0f07 	cmp.w	ip, #7
      htbl = entropy->dc_cur_tbls[blkn];
 800cce6:	f859 4b04 	ldr.w	r4, [r9], #4
      JBLOCKROW block = MCU_data[blkn];
 800ccea:	f853 b027 	ldr.w	fp, [r3, r7, lsl #2]
      HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 800ccee:	dc0c      	bgt.n	800cd0a <decode_mcu+0xb2>
 800ccf0:	2300      	movs	r3, #0
 800ccf2:	4662      	mov	r2, ip
 800ccf4:	4671      	mov	r1, lr
 800ccf6:	a806      	add	r0, sp, #24
 800ccf8:	f7ff fa70 	bl	800c1dc <jpeg_fill_bit_buffer>
 800ccfc:	2800      	cmp	r0, #0
 800ccfe:	d0c3      	beq.n	800cc88 <decode_mcu+0x30>
 800cd00:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800cd04:	f1bc 0f07 	cmp.w	ip, #7
 800cd08:	dd49      	ble.n	800cd9e <decode_mcu+0x146>
 800cd0a:	f1ac 0308 	sub.w	r3, ip, #8
 800cd0e:	fa4e f303 	asr.w	r3, lr, r3
 800cd12:	b2db      	uxtb	r3, r3
 800cd14:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800cd18:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cd1c:	2a00      	cmp	r2, #0
 800cd1e:	d04c      	beq.n	800cdba <decode_mcu+0x162>
 800cd20:	4423      	add	r3, r4
 800cd22:	ebac 0c02 	sub.w	ip, ip, r2
 800cd26:	f893 4490 	ldrb.w	r4, [r3, #1168]	; 0x490
      coef_limit = entropy->coef_limit[blkn];
 800cd2a:	f8d9 304c 	ldr.w	r3, [r9, #76]	; 0x4c
      htbl = entropy->ac_cur_tbls[blkn];
 800cd2e:	f8d9 8024 	ldr.w	r8, [r9, #36]	; 0x24
      coef_limit = entropy->coef_limit[blkn];
 800cd32:	9303      	str	r3, [sp, #12]
      if (coef_limit) {
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	f000 809f 	beq.w	800ce78 <decode_mcu+0x220>
	if (s) {
 800cd3a:	b1cc      	cbz	r4, 800cd70 <decode_mcu+0x118>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800cd3c:	45a4      	cmp	ip, r4
 800cd3e:	da09      	bge.n	800cd54 <decode_mcu+0xfc>
 800cd40:	4623      	mov	r3, r4
 800cd42:	4662      	mov	r2, ip
 800cd44:	4671      	mov	r1, lr
 800cd46:	a806      	add	r0, sp, #24
 800cd48:	f7ff fa48 	bl	800c1dc <jpeg_fill_bit_buffer>
 800cd4c:	2800      	cmp	r0, #0
 800cd4e:	d09b      	beq.n	800cc88 <decode_mcu+0x30>
 800cd50:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
	  r = GET_BITS(s);
 800cd54:	ebac 0c04 	sub.w	ip, ip, r4
 800cd58:	f85a 2024 	ldr.w	r2, [sl, r4, lsl #2]
	  s = HUFF_EXTEND(r, s);
 800cd5c:	3c01      	subs	r4, #1
	  r = GET_BITS(s);
 800cd5e:	fa4e f30c 	asr.w	r3, lr, ip
	  s = HUFF_EXTEND(r, s);
 800cd62:	f85a 1024 	ldr.w	r1, [sl, r4, lsl #2]
	  r = GET_BITS(s);
 800cd66:	4013      	ands	r3, r2
	  s = HUFF_EXTEND(r, s);
 800cd68:	4299      	cmp	r1, r3
 800cd6a:	bfac      	ite	ge
 800cd6c:	1a9c      	subge	r4, r3, r2
 800cd6e:	461c      	movlt	r4, r3
	ci = cinfo->MCU_membership[blkn];
 800cd70:	f506 73b8 	add.w	r3, r6, #368	; 0x170
 800cd74:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
	s += state.last_dc_val[ci];
 800cd78:	ab10      	add	r3, sp, #64	; 0x40
 800cd7a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800cd7e:	f852 3c10 	ldr.w	r3, [r2, #-16]
 800cd82:	441c      	add	r4, r3
	state.last_dc_val[ci] = s;
 800cd84:	f842 4c10 	str.w	r4, [r2, #-16]
	(*block)[0] = (JCOEF) s;
 800cd88:	f8ab 4000 	strh.w	r4, [fp]
      k = 1;
 800cd8c:	2401      	movs	r4, #1
	for (; k < coef_limit; k++) {
 800cd8e:	9b03      	ldr	r3, [sp, #12]
 800cd90:	429c      	cmp	r4, r3
 800cd92:	db14      	blt.n	800cdbe <decode_mcu+0x166>
      for (; k < DCTSIZE2; k++) {
 800cd94:	2c3f      	cmp	r4, #63	; 0x3f
 800cd96:	f340 8081 	ble.w	800ce9c <decode_mcu+0x244>
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800cd9a:	3701      	adds	r7, #1
 800cd9c:	e78d      	b.n	800ccba <decode_mcu+0x62>
      HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 800cd9e:	2301      	movs	r3, #1
 800cda0:	9300      	str	r3, [sp, #0]
 800cda2:	4662      	mov	r2, ip
 800cda4:	4623      	mov	r3, r4
 800cda6:	4671      	mov	r1, lr
 800cda8:	a806      	add	r0, sp, #24
 800cdaa:	f7ff fa75 	bl	800c298 <jpeg_huff_decode>
 800cdae:	1e04      	subs	r4, r0, #0
 800cdb0:	f6ff af6a 	blt.w	800cc88 <decode_mcu+0x30>
 800cdb4:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800cdb8:	e7b7      	b.n	800cd2a <decode_mcu+0xd2>
 800cdba:	2309      	movs	r3, #9
 800cdbc:	e7f0      	b.n	800cda0 <decode_mcu+0x148>
	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 800cdbe:	f1bc 0f07 	cmp.w	ip, #7
 800cdc2:	dc0d      	bgt.n	800cde0 <decode_mcu+0x188>
 800cdc4:	2300      	movs	r3, #0
 800cdc6:	4662      	mov	r2, ip
 800cdc8:	4671      	mov	r1, lr
 800cdca:	a806      	add	r0, sp, #24
 800cdcc:	f7ff fa06 	bl	800c1dc <jpeg_fill_bit_buffer>
 800cdd0:	2800      	cmp	r0, #0
 800cdd2:	f43f af59 	beq.w	800cc88 <decode_mcu+0x30>
 800cdd6:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800cdda:	f1bc 0f07 	cmp.w	ip, #7
 800cdde:	dd37      	ble.n	800ce50 <decode_mcu+0x1f8>
 800cde0:	f1ac 0308 	sub.w	r3, ip, #8
 800cde4:	fa4e f303 	asr.w	r3, lr, r3
 800cde8:	b2db      	uxtb	r3, r3
 800cdea:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800cdee:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800cdf2:	2a00      	cmp	r2, #0
 800cdf4:	d03a      	beq.n	800ce6c <decode_mcu+0x214>
 800cdf6:	4443      	add	r3, r8
 800cdf8:	ebac 0c02 	sub.w	ip, ip, r2
 800cdfc:	f893 0490 	ldrb.w	r0, [r3, #1168]	; 0x490
	  if (s) {
 800ce00:	f010 030f 	ands.w	r3, r0, #15
	  r = s >> 4;
 800ce04:	ea4f 1220 	mov.w	r2, r0, asr #4
	  if (s) {
 800ce08:	d032      	beq.n	800ce70 <decode_mcu+0x218>
	    CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800ce0a:	459c      	cmp	ip, r3
	    k += r;
 800ce0c:	4414      	add	r4, r2
	    CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800ce0e:	da0b      	bge.n	800ce28 <decode_mcu+0x1d0>
 800ce10:	4662      	mov	r2, ip
 800ce12:	4671      	mov	r1, lr
 800ce14:	a806      	add	r0, sp, #24
 800ce16:	9305      	str	r3, [sp, #20]
 800ce18:	f7ff f9e0 	bl	800c1dc <jpeg_fill_bit_buffer>
 800ce1c:	2800      	cmp	r0, #0
 800ce1e:	f43f af33 	beq.w	800cc88 <decode_mcu+0x30>
 800ce22:	9b05      	ldr	r3, [sp, #20]
 800ce24:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
	    r = GET_BITS(s);
 800ce28:	ebac 0c03 	sub.w	ip, ip, r3
 800ce2c:	f85a 1023 	ldr.w	r1, [sl, r3, lsl #2]
	    s = HUFF_EXTEND(r, s);
 800ce30:	3b01      	subs	r3, #1
	    r = GET_BITS(s);
 800ce32:	fa4e f20c 	asr.w	r2, lr, ip
	    s = HUFF_EXTEND(r, s);
 800ce36:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
	    r = GET_BITS(s);
 800ce3a:	400a      	ands	r2, r1
	    s = HUFF_EXTEND(r, s);
 800ce3c:	4293      	cmp	r3, r2
	    (*block)[jpeg_natural_order[k]] = (JCOEF) s;
 800ce3e:	4b3d      	ldr	r3, [pc, #244]	; (800cf34 <decode_mcu+0x2dc>)
	    s = HUFF_EXTEND(r, s);
 800ce40:	bfa8      	it	ge
 800ce42:	1a52      	subge	r2, r2, r1
	    (*block)[jpeg_natural_order[k]] = (JCOEF) s;
 800ce44:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800ce48:	f82b 2013 	strh.w	r2, [fp, r3, lsl #1]
	for (; k < coef_limit; k++) {
 800ce4c:	3401      	adds	r4, #1
 800ce4e:	e79e      	b.n	800cd8e <decode_mcu+0x136>
	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 800ce50:	2301      	movs	r3, #1
 800ce52:	9300      	str	r3, [sp, #0]
 800ce54:	4662      	mov	r2, ip
 800ce56:	4643      	mov	r3, r8
 800ce58:	4671      	mov	r1, lr
 800ce5a:	a806      	add	r0, sp, #24
 800ce5c:	f7ff fa1c 	bl	800c298 <jpeg_huff_decode>
 800ce60:	2800      	cmp	r0, #0
 800ce62:	f6ff af11 	blt.w	800cc88 <decode_mcu+0x30>
 800ce66:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800ce6a:	e7c9      	b.n	800ce00 <decode_mcu+0x1a8>
 800ce6c:	2309      	movs	r3, #9
 800ce6e:	e7f0      	b.n	800ce52 <decode_mcu+0x1fa>
	    if (r != 15)
 800ce70:	2a0f      	cmp	r2, #15
 800ce72:	d192      	bne.n	800cd9a <decode_mcu+0x142>
	    k += 15;
 800ce74:	340f      	adds	r4, #15
 800ce76:	e7e9      	b.n	800ce4c <decode_mcu+0x1f4>
	if (s) {
 800ce78:	b174      	cbz	r4, 800ce98 <decode_mcu+0x240>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800ce7a:	45a4      	cmp	ip, r4
 800ce7c:	da0a      	bge.n	800ce94 <decode_mcu+0x23c>
 800ce7e:	4623      	mov	r3, r4
 800ce80:	4662      	mov	r2, ip
 800ce82:	4671      	mov	r1, lr
 800ce84:	a806      	add	r0, sp, #24
 800ce86:	f7ff f9a9 	bl	800c1dc <jpeg_fill_bit_buffer>
 800ce8a:	2800      	cmp	r0, #0
 800ce8c:	f43f aefc 	beq.w	800cc88 <decode_mcu+0x30>
 800ce90:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
	  DROP_BITS(s);
 800ce94:	ebac 0c04 	sub.w	ip, ip, r4
      k = 1;
 800ce98:	2401      	movs	r4, #1
 800ce9a:	e77b      	b.n	800cd94 <decode_mcu+0x13c>
	HUFF_DECODE(s, br_state, htbl, return FALSE, label3);
 800ce9c:	f1bc 0f07 	cmp.w	ip, #7
 800cea0:	dc0d      	bgt.n	800cebe <decode_mcu+0x266>
 800cea2:	2300      	movs	r3, #0
 800cea4:	4662      	mov	r2, ip
 800cea6:	4671      	mov	r1, lr
 800cea8:	a806      	add	r0, sp, #24
 800ceaa:	f7ff f997 	bl	800c1dc <jpeg_fill_bit_buffer>
 800ceae:	2800      	cmp	r0, #0
 800ceb0:	f43f aeea 	beq.w	800cc88 <decode_mcu+0x30>
 800ceb4:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800ceb8:	f1bc 0f07 	cmp.w	ip, #7
 800cebc:	dd25      	ble.n	800cf0a <decode_mcu+0x2b2>
 800cebe:	f1ac 0308 	sub.w	r3, ip, #8
 800cec2:	fa4e f303 	asr.w	r3, lr, r3
 800cec6:	b2db      	uxtb	r3, r3
 800cec8:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800cecc:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800ced0:	b34a      	cbz	r2, 800cf26 <decode_mcu+0x2ce>
 800ced2:	4443      	add	r3, r8
 800ced4:	ebac 0c02 	sub.w	ip, ip, r2
 800ced8:	f893 0490 	ldrb.w	r0, [r3, #1168]	; 0x490
	if (s) {
 800cedc:	f010 0b0f 	ands.w	fp, r0, #15
	r = s >> 4;
 800cee0:	ea4f 1320 	mov.w	r3, r0, asr #4
	if (s) {
 800cee4:	d021      	beq.n	800cf2a <decode_mcu+0x2d2>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800cee6:	45dc      	cmp	ip, fp
	  k += r;
 800cee8:	441c      	add	r4, r3
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800ceea:	da0a      	bge.n	800cf02 <decode_mcu+0x2aa>
 800ceec:	465b      	mov	r3, fp
 800ceee:	4662      	mov	r2, ip
 800cef0:	4671      	mov	r1, lr
 800cef2:	a806      	add	r0, sp, #24
 800cef4:	f7ff f972 	bl	800c1dc <jpeg_fill_bit_buffer>
 800cef8:	2800      	cmp	r0, #0
 800cefa:	f43f aec5 	beq.w	800cc88 <decode_mcu+0x30>
 800cefe:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
	  DROP_BITS(s);
 800cf02:	ebac 0c0b 	sub.w	ip, ip, fp
      for (; k < DCTSIZE2; k++) {
 800cf06:	3401      	adds	r4, #1
 800cf08:	e744      	b.n	800cd94 <decode_mcu+0x13c>
	HUFF_DECODE(s, br_state, htbl, return FALSE, label3);
 800cf0a:	2301      	movs	r3, #1
 800cf0c:	9300      	str	r3, [sp, #0]
 800cf0e:	4662      	mov	r2, ip
 800cf10:	4643      	mov	r3, r8
 800cf12:	4671      	mov	r1, lr
 800cf14:	a806      	add	r0, sp, #24
 800cf16:	f7ff f9bf 	bl	800c298 <jpeg_huff_decode>
 800cf1a:	2800      	cmp	r0, #0
 800cf1c:	f6ff aeb4 	blt.w	800cc88 <decode_mcu+0x30>
 800cf20:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800cf24:	e7da      	b.n	800cedc <decode_mcu+0x284>
 800cf26:	2309      	movs	r3, #9
 800cf28:	e7f0      	b.n	800cf0c <decode_mcu+0x2b4>
	  if (r != 15)
 800cf2a:	2b0f      	cmp	r3, #15
 800cf2c:	f47f af35 	bne.w	800cd9a <decode_mcu+0x142>
	  k += 15;
 800cf30:	340f      	adds	r4, #15
 800cf32:	e7e8      	b.n	800cf06 <decode_mcu+0x2ae>
 800cf34:	0802f548 	.word	0x0802f548
 800cf38:	0802dc70 	.word	0x0802dc70

0800cf3c <jpeg_make_d_derived_tbl>:
{
 800cf3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (tblno < 0 || tblno >= NUM_HUFF_TBLS)
 800cf40:	2a03      	cmp	r2, #3
{
 800cf42:	f2ad 5d24 	subw	sp, sp, #1316	; 0x524
 800cf46:	4604      	mov	r4, r0
 800cf48:	4616      	mov	r6, r2
 800cf4a:	461f      	mov	r7, r3
 800cf4c:	9103      	str	r1, [sp, #12]
  if (tblno < 0 || tblno >= NUM_HUFF_TBLS)
 800cf4e:	d905      	bls.n	800cf5c <jpeg_make_d_derived_tbl+0x20>
    ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tblno);
 800cf50:	6803      	ldr	r3, [r0, #0]
 800cf52:	2234      	movs	r2, #52	; 0x34
 800cf54:	e9c3 2605 	strd	r2, r6, [r3, #20]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	4798      	blx	r3
    isDC ? cinfo->dc_huff_tbl_ptrs[tblno] : cinfo->ac_huff_tbl_ptrs[tblno];
 800cf5c:	9b03      	ldr	r3, [sp, #12]
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d044      	beq.n	800cfec <jpeg_make_d_derived_tbl+0xb0>
 800cf62:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800cf66:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
  if (htbl == NULL)
 800cf6a:	b935      	cbnz	r5, 800cf7a <jpeg_make_d_derived_tbl+0x3e>
    ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tblno);
 800cf6c:	6823      	ldr	r3, [r4, #0]
 800cf6e:	2234      	movs	r2, #52	; 0x34
 800cf70:	4620      	mov	r0, r4
 800cf72:	e9c3 2605 	strd	r2, r6, [r3, #20]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	4798      	blx	r3
  if (*pdtbl == NULL)
 800cf7a:	683b      	ldr	r3, [r7, #0]
 800cf7c:	b93b      	cbnz	r3, 800cf8e <jpeg_make_d_derived_tbl+0x52>
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800cf7e:	6863      	ldr	r3, [r4, #4]
 800cf80:	f44f 62b2 	mov.w	r2, #1424	; 0x590
 800cf84:	2101      	movs	r1, #1
 800cf86:	4620      	mov	r0, r4
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	4798      	blx	r3
    *pdtbl = (d_derived_tbl *)
 800cf8c:	6038      	str	r0, [r7, #0]
  dtbl = *pdtbl;
 800cf8e:	f8d7 8000 	ldr.w	r8, [r7]
  for (l = 1; l <= 16; l++) {
 800cf92:	2601      	movs	r6, #1
  p = 0;
 800cf94:	2700      	movs	r7, #0
      ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 800cf96:	f04f 0b09 	mov.w	fp, #9
  dtbl->pub = htbl;		/* fill in back link */
 800cf9a:	f8c8 508c 	str.w	r5, [r8, #140]	; 0x8c
    i = (int) htbl->bits[l];
 800cf9e:	f815 9006 	ldrb.w	r9, [r5, r6]
    if (i < 0 || p + i > 256)	/* protect against table overrun */
 800cfa2:	46ba      	mov	sl, r7
 800cfa4:	444f      	add	r7, r9
 800cfa6:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
 800cfaa:	dd05      	ble.n	800cfb8 <jpeg_make_d_derived_tbl+0x7c>
      ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 800cfac:	6823      	ldr	r3, [r4, #0]
 800cfae:	4620      	mov	r0, r4
 800cfb0:	f8c3 b014 	str.w	fp, [r3, #20]
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	4798      	blx	r3
 800cfb8:	f10a 0318 	add.w	r3, sl, #24
 800cfbc:	446b      	add	r3, sp
    while (i--)
 800cfbe:	f1b9 0901 	subs.w	r9, r9, #1
 800cfc2:	d218      	bcs.n	800cff6 <jpeg_make_d_derived_tbl+0xba>
  for (l = 1; l <= 16; l++) {
 800cfc4:	3601      	adds	r6, #1
 800cfc6:	2e11      	cmp	r6, #17
 800cfc8:	d1e9      	bne.n	800cf9e <jpeg_make_d_derived_tbl+0x62>
  huffsize[p] = 0;
 800cfca:	2200      	movs	r2, #0
 800cfcc:	ab06      	add	r3, sp, #24
      huffcode[p++] = code;
 800cfce:	f50d 7a8e 	add.w	sl, sp, #284	; 0x11c
    if (((INT32) code) >= (((INT32) 1) << si))
 800cfd2:	f04f 0b01 	mov.w	fp, #1
  huffsize[p] = 0;
 800cfd6:	55da      	strb	r2, [r3, r7]
  p = 0;
 800cfd8:	4691      	mov	r9, r2
  si = huffsize[0];
 800cfda:	f89d 6018 	ldrb.w	r6, [sp, #24]
  while (huffsize[p]) {
 800cfde:	ab06      	add	r3, sp, #24
 800cfe0:	f813 3009 	ldrb.w	r3, [r3, r9]
 800cfe4:	b313      	cbz	r3, 800d02c <jpeg_make_d_derived_tbl+0xf0>
 800cfe6:	4649      	mov	r1, r9
 800cfe8:	1a52      	subs	r2, r2, r1
 800cfea:	e00a      	b.n	800d002 <jpeg_make_d_derived_tbl+0xc6>
    isDC ? cinfo->dc_huff_tbl_ptrs[tblno] : cinfo->ac_huff_tbl_ptrs[tblno];
 800cfec:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800cff0:	f8d3 50c4 	ldr.w	r5, [r3, #196]	; 0xc4
 800cff4:	e7b9      	b.n	800cf6a <jpeg_make_d_derived_tbl+0x2e>
      huffsize[p++] = (char) l;
 800cff6:	f803 6b01 	strb.w	r6, [r3], #1
 800cffa:	e7e0      	b.n	800cfbe <jpeg_make_d_derived_tbl+0x82>
      huffcode[p++] = code;
 800cffc:	f84a 3021 	str.w	r3, [sl, r1, lsl #2]
      code++;
 800d000:	3101      	adds	r1, #1
    while (((int) huffsize[p]) == si) {
 800d002:	a806      	add	r0, sp, #24
 800d004:	1853      	adds	r3, r2, r1
 800d006:	4689      	mov	r9, r1
 800d008:	5c40      	ldrb	r0, [r0, r1]
 800d00a:	42b0      	cmp	r0, r6
 800d00c:	d0f6      	beq.n	800cffc <jpeg_make_d_derived_tbl+0xc0>
    if (((INT32) code) >= (((INT32) 1) << si))
 800d00e:	fa0b f206 	lsl.w	r2, fp, r6
 800d012:	429a      	cmp	r2, r3
 800d014:	dc07      	bgt.n	800d026 <jpeg_make_d_derived_tbl+0xea>
      ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 800d016:	6822      	ldr	r2, [r4, #0]
 800d018:	2109      	movs	r1, #9
 800d01a:	4620      	mov	r0, r4
 800d01c:	9301      	str	r3, [sp, #4]
 800d01e:	6151      	str	r1, [r2, #20]
 800d020:	6812      	ldr	r2, [r2, #0]
 800d022:	4790      	blx	r2
 800d024:	9b01      	ldr	r3, [sp, #4]
    code <<= 1;
 800d026:	005a      	lsls	r2, r3, #1
    si++;
 800d028:	3601      	adds	r6, #1
 800d02a:	e7d8      	b.n	800cfde <jpeg_make_d_derived_tbl+0xa2>
 800d02c:	1c68      	adds	r0, r5, #1
 800d02e:	f108 0204 	add.w	r2, r8, #4
 800d032:	f108 0c44 	add.w	ip, r8, #68	; 0x44
      dtbl->maxcode[l] = -1;	/* -1 if no codes of this length */
 800d036:	f04f 3eff 	mov.w	lr, #4294967295
      dtbl->valoffset[l] = (INT32) p - (INT32) huffcode[p];
 800d03a:	ae47      	add	r6, sp, #284	; 0x11c
    if (htbl->bits[l]) {
 800d03c:	f810 9b01 	ldrb.w	r9, [r0], #1
 800d040:	f1b9 0f00 	cmp.w	r9, #0
 800d044:	d029      	beq.n	800d09a <jpeg_make_d_derived_tbl+0x15e>
      dtbl->valoffset[l] = (INT32) p - (INT32) huffcode[p];
 800d046:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 800d04a:	1a59      	subs	r1, r3, r1
      p += htbl->bits[l];
 800d04c:	444b      	add	r3, r9
      dtbl->valoffset[l] = (INT32) p - (INT32) huffcode[p];
 800d04e:	6491      	str	r1, [r2, #72]	; 0x48
      dtbl->maxcode[l] = huffcode[p-1]; /* maximum code of length l */
 800d050:	1e59      	subs	r1, r3, #1
 800d052:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 800d056:	6011      	str	r1, [r2, #0]
  for (l = 1; l <= 16; l++) {
 800d058:	3204      	adds	r2, #4
 800d05a:	4594      	cmp	ip, r2
 800d05c:	d1ee      	bne.n	800d03c <jpeg_make_d_derived_tbl+0x100>
  dtbl->maxcode[17] = 0xFFFFFL; /* ensures jpeg_huff_decode terminates */
 800d05e:	4b2d      	ldr	r3, [pc, #180]	; (800d114 <jpeg_make_d_derived_tbl+0x1d8>)
  MEMZERO(dtbl->look_nbits, SIZEOF(dtbl->look_nbits));
 800d060:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d064:	2100      	movs	r1, #0
 800d066:	f108 0090 	add.w	r0, r8, #144	; 0x90
  dtbl->maxcode[17] = 0xFFFFFL; /* ensures jpeg_huff_decode terminates */
 800d06a:	f8c8 3044 	str.w	r3, [r8, #68]	; 0x44
  for (l = 1; l <= HUFF_LOOKAHEAD; l++) {
 800d06e:	2601      	movs	r6, #1
  MEMZERO(dtbl->look_nbits, SIZEOF(dtbl->look_nbits));
 800d070:	f01d f8d0 	bl	802a214 <memset>
  p = 0;
 800d074:	f04f 0a00 	mov.w	sl, #0
      lookbits = huffcode[p] << (HUFF_LOOKAHEAD-l);
 800d078:	ab47      	add	r3, sp, #284	; 0x11c
    for (i = 1; i <= (int) htbl->bits[l]; i++, p++) {
 800d07a:	5daa      	ldrb	r2, [r5, r6]
      for (ctr = 1 << (HUFF_LOOKAHEAD-l); ctr > 0; ctr--) {
 800d07c:	2101      	movs	r1, #1
 800d07e:	46d1      	mov	r9, sl
    for (i = 1; i <= (int) htbl->bits[l]; i++, p++) {
 800d080:	9201      	str	r2, [sp, #4]
 800d082:	f1c6 0208 	rsb	r2, r6, #8
      for (ctr = 1 << (HUFF_LOOKAHEAD-l); ctr > 0; ctr--) {
 800d086:	fa01 fb02 	lsl.w	fp, r1, r2
 800d08a:	9202      	str	r2, [sp, #8]
 800d08c:	9a01      	ldr	r2, [sp, #4]
 800d08e:	4452      	add	r2, sl
 800d090:	9204      	str	r2, [sp, #16]
	dtbl->look_sym[lookbits] = htbl->huffval[p];
 800d092:	f105 0211 	add.w	r2, r5, #17
 800d096:	9205      	str	r2, [sp, #20]
 800d098:	e020      	b.n	800d0dc <jpeg_make_d_derived_tbl+0x1a0>
      dtbl->maxcode[l] = -1;	/* -1 if no codes of this length */
 800d09a:	f8c2 e000 	str.w	lr, [r2]
 800d09e:	e7db      	b.n	800d058 <jpeg_make_d_derived_tbl+0x11c>
      lookbits = huffcode[p] << (HUFF_LOOKAHEAD-l);
 800d0a0:	9a02      	ldr	r2, [sp, #8]
      for (ctr = 1 << (HUFF_LOOKAHEAD-l); ctr > 0; ctr--) {
 800d0a2:	46dc      	mov	ip, fp
      lookbits = huffcode[p] << (HUFF_LOOKAHEAD-l);
 800d0a4:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
 800d0a8:	4090      	lsls	r0, r2
	dtbl->look_sym[lookbits] = htbl->huffval[p];
 800d0aa:	9a05      	ldr	r2, [sp, #20]
 800d0ac:	f812 1009 	ldrb.w	r1, [r2, r9]
 800d0b0:	f100 0224 	add.w	r2, r0, #36	; 0x24
 800d0b4:	eb08 0282 	add.w	r2, r8, r2, lsl #2
      for (ctr = 1 << (HUFF_LOOKAHEAD-l); ctr > 0; ctr--) {
 800d0b8:	f1bc 0c01 	subs.w	ip, ip, #1
	dtbl->look_nbits[lookbits] = l;
 800d0bc:	f842 6b04 	str.w	r6, [r2], #4
      for (ctr = 1 << (HUFF_LOOKAHEAD-l); ctr > 0; ctr--) {
 800d0c0:	d1fa      	bne.n	800d0b8 <jpeg_make_d_derived_tbl+0x17c>
	dtbl->look_sym[lookbits] = htbl->huffval[p];
 800d0c2:	f1bb 0f00 	cmp.w	fp, #0
 800d0c6:	f500 6092 	add.w	r0, r0, #1168	; 0x490
    for (i = 1; i <= (int) htbl->bits[l]; i++, p++) {
 800d0ca:	f109 0901 	add.w	r9, r9, #1
	dtbl->look_sym[lookbits] = htbl->huffval[p];
 800d0ce:	bfcc      	ite	gt
 800d0d0:	465a      	movgt	r2, fp
 800d0d2:	2201      	movle	r2, #1
 800d0d4:	4440      	add	r0, r8
 800d0d6:	f01d f89d 	bl	802a214 <memset>
    for (i = 1; i <= (int) htbl->bits[l]; i++, p++) {
 800d0da:	ab47      	add	r3, sp, #284	; 0x11c
 800d0dc:	9a04      	ldr	r2, [sp, #16]
 800d0de:	4591      	cmp	r9, r2
 800d0e0:	d1de      	bne.n	800d0a0 <jpeg_make_d_derived_tbl+0x164>
  for (l = 1; l <= HUFF_LOOKAHEAD; l++) {
 800d0e2:	3601      	adds	r6, #1
 800d0e4:	9a01      	ldr	r2, [sp, #4]
 800d0e6:	2e09      	cmp	r6, #9
 800d0e8:	4492      	add	sl, r2
 800d0ea:	d1c6      	bne.n	800d07a <jpeg_make_d_derived_tbl+0x13e>
  if (isDC) {
 800d0ec:	9b03      	ldr	r3, [sp, #12]
 800d0ee:	b11b      	cbz	r3, 800d0f8 <jpeg_make_d_derived_tbl+0x1bc>
 800d0f0:	3511      	adds	r5, #17
 800d0f2:	442f      	add	r7, r5
    for (i = 0; i < numsymbols; i++) {
 800d0f4:	42af      	cmp	r7, r5
 800d0f6:	d103      	bne.n	800d100 <jpeg_make_d_derived_tbl+0x1c4>
}
 800d0f8:	f20d 5d24 	addw	sp, sp, #1316	; 0x524
 800d0fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      int sym = htbl->huffval[i];
 800d100:	f815 3b01 	ldrb.w	r3, [r5], #1
      if (sym < 0 || sym > 15)
 800d104:	2b0f      	cmp	r3, #15
 800d106:	d9f5      	bls.n	800d0f4 <jpeg_make_d_derived_tbl+0x1b8>
	ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 800d108:	6823      	ldr	r3, [r4, #0]
 800d10a:	4620      	mov	r0, r4
 800d10c:	615e      	str	r6, [r3, #20]
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	4798      	blx	r3
    for (i = 0; i < numsymbols; i++) {
 800d112:	e7ef      	b.n	800d0f4 <jpeg_make_d_derived_tbl+0x1b8>
 800d114:	000fffff 	.word	0x000fffff

0800d118 <start_pass_huff_decoder>:
 * Initialize for a Huffman-compressed scan.
 */

METHODDEF(void)
start_pass_huff_decoder (j_decompress_ptr cinfo)
{
 800d118:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
  int ci, blkn, tbl, i;
  jpeg_component_info * compptr;

  if (cinfo->progressive_mode) {
 800d11c:	f8d0 50e0 	ldr.w	r5, [r0, #224]	; 0xe0
{
 800d120:	4682      	mov	sl, r0
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800d122:	f8d0 b1d0 	ldr.w	fp, [r0, #464]	; 0x1d0
  if (cinfo->progressive_mode) {
 800d126:	f500 74aa 	add.w	r4, r0, #340	; 0x154
    /* Validate progressive scan parameters */
    if (cinfo->Ss == 0) {
 800d12a:	f8d0 2198 	ldr.w	r2, [r0, #408]	; 0x198
  if (cinfo->progressive_mode) {
 800d12e:	2d00      	cmp	r5, #0
 800d130:	f000 80b1 	beq.w	800d296 <start_pass_huff_decoder+0x17e>
    if (cinfo->Ss == 0) {
 800d134:	f8d0 51a4 	ldr.w	r5, [r0, #420]	; 0x1a4
 800d138:	e9d0 1667 	ldrd	r1, r6, [r0, #412]	; 0x19c
 800d13c:	b962      	cbnz	r2, 800d158 <start_pass_huff_decoder+0x40>
      if (cinfo->Se != 0)
 800d13e:	b1a9      	cbz	r1, 800d16c <start_pass_huff_decoder+0x54>
       * accept.  Note: large Al values could result in out-of-range DC
       * coefficients during early scans, leading to bizarre displays due to
       * overflows in the IDCT math.  But we won't crash.
       */
      bad:
      ERREXIT4(cinfo, JERR_BAD_PROGRESSION,
 800d140:	f8da 3000 	ldr.w	r3, [sl]
 800d144:	2711      	movs	r7, #17
 800d146:	4650      	mov	r0, sl
 800d148:	625d      	str	r5, [r3, #36]	; 0x24
 800d14a:	e9c3 7205 	strd	r7, r2, [r3, #20]
 800d14e:	e9c3 1607 	strd	r1, r6, [r3, #28]
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	4798      	blx	r3
 800d156:	e00f      	b.n	800d178 <start_pass_huff_decoder+0x60>
      if (cinfo->Se < cinfo->Ss || cinfo->Se > cinfo->lim_Se)
 800d158:	428a      	cmp	r2, r1
 800d15a:	dcf1      	bgt.n	800d140 <start_pass_huff_decoder+0x28>
 800d15c:	f8d0 31b0 	ldr.w	r3, [r0, #432]	; 0x1b0
 800d160:	428b      	cmp	r3, r1
 800d162:	dbed      	blt.n	800d140 <start_pass_huff_decoder+0x28>
      if (cinfo->comps_in_scan != 1)
 800d164:	f8d0 3150 	ldr.w	r3, [r0, #336]	; 0x150
 800d168:	2b01      	cmp	r3, #1
 800d16a:	d1e9      	bne.n	800d140 <start_pass_huff_decoder+0x28>
    if (cinfo->Ah != 0) {
 800d16c:	b116      	cbz	r6, 800d174 <start_pass_huff_decoder+0x5c>
      if (cinfo->Ah-1 != cinfo->Al)
 800d16e:	1e73      	subs	r3, r6, #1
 800d170:	42ab      	cmp	r3, r5
 800d172:	d1e5      	bne.n	800d140 <start_pass_huff_decoder+0x28>
    if (cinfo->Al > 13) {	/* need not check for < 0 */
 800d174:	2d0d      	cmp	r5, #13
 800d176:	dce3      	bgt.n	800d140 <start_pass_huff_decoder+0x28>
{
 800d178:	46a1      	mov	r9, r4
 800d17a:	2700      	movs	r7, #0
    }
    /* Update progression status, and verify that scan order is legal.
     * Note that inter-scan inconsistencies are treated as warnings
     * not fatal errors ... not clear if this is right way to behave.
     */
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800d17c:	f8da 2150 	ldr.w	r2, [sl, #336]	; 0x150
      int coefi, cindex = cinfo->cur_comp_info[ci]->component_index;
      int *coef_bit_ptr = & cinfo->coef_bits[cindex][0];
      if (cinfo->Ss && coef_bit_ptr[0] < 0) /* AC without prior DC scan */
 800d180:	f8da 3198 	ldr.w	r3, [sl, #408]	; 0x198
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800d184:	42ba      	cmp	r2, r7
 800d186:	dc1e      	bgt.n	800d1c6 <start_pass_huff_decoder+0xae>
	coef_bit_ptr[coefi] = cinfo->Al;
      }
    }

    /* Select MCU decoding routine */
    if (cinfo->Ah == 0) {
 800d188:	f8da 21a0 	ldr.w	r2, [sl, #416]	; 0x1a0
 800d18c:	2a00      	cmp	r2, #0
 800d18e:	d158      	bne.n	800d242 <start_pass_huff_decoder+0x12a>
      if (cinfo->Ss == 0)
 800d190:	2b00      	cmp	r3, #0
 800d192:	d154      	bne.n	800d23e <start_pass_huff_decoder+0x126>
	entropy->pub.decode_mcu = decode_mcu_DC_first;
 800d194:	4bbb      	ldr	r3, [pc, #748]	; (800d484 <start_pass_huff_decoder+0x36c>)
{
 800d196:	2600      	movs	r6, #0
 800d198:	f10b 0714 	add.w	r7, fp, #20
      else
	entropy->pub.decode_mcu = decode_mcu_AC_first;
    } else {
      if (cinfo->Ss == 0)
	entropy->pub.decode_mcu = decode_mcu_DC_refine;
 800d19c:	f8cb 3004 	str.w	r3, [fp, #4]
	  jpeg_make_d_derived_tbl(cinfo, TRUE, tbl,
				  & entropy->derived_tbls[tbl]);
	}
      } else {
	tbl = compptr->ac_tbl_no;
	jpeg_make_d_derived_tbl(cinfo, FALSE, tbl,
 800d1a0:	46b0      	mov	r8, r6
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800d1a2:	f8da 3150 	ldr.w	r3, [sl, #336]	; 0x150
 800d1a6:	42b3      	cmp	r3, r6
 800d1a8:	dc50      	bgt.n	800d24c <start_pass_huff_decoder+0x134>
      /* Initialize DC predictions to 0 */
      entropy->saved.last_dc_val[ci] = 0;
    }

    /* Initialize private state variables */
    entropy->saved.EOBRUN = 0;
 800d1aa:	2300      	movs	r3, #0
 800d1ac:	f8cb 3010 	str.w	r3, [fp, #16]
      }
    }
  }

  /* Initialize bitread state variables */
  entropy->bitstate.bits_left = 0;
 800d1b0:	2300      	movs	r3, #0
  entropy->bitstate.get_buffer = 0; /* unnecessary, but keeps Purify quiet */
 800d1b2:	e9cb 3302 	strd	r3, r3, [fp, #8]
  entropy->insufficient_data = FALSE;
 800d1b6:	f8cb 3024 	str.w	r3, [fp, #36]	; 0x24

  /* Initialize restart counter */
  entropy->restarts_to_go = cinfo->restart_interval;
 800d1ba:	f8da 3118 	ldr.w	r3, [sl, #280]	; 0x118
 800d1be:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28
}
 800d1c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      int coefi, cindex = cinfo->cur_comp_info[ci]->component_index;
 800d1c6:	f859 2b04 	ldr.w	r2, [r9], #4
 800d1ca:	f8d2 8004 	ldr.w	r8, [r2, #4]
      int *coef_bit_ptr = & cinfo->coef_bits[cindex][0];
 800d1ce:	f8da 20a0 	ldr.w	r2, [sl, #160]	; 0xa0
 800d1d2:	ea4f 2108 	mov.w	r1, r8, lsl #8
 800d1d6:	eb02 2608 	add.w	r6, r2, r8, lsl #8
      if (cinfo->Ss && coef_bit_ptr[0] < 0) /* AC without prior DC scan */
 800d1da:	b173      	cbz	r3, 800d1fa <start_pass_huff_decoder+0xe2>
 800d1dc:	5853      	ldr	r3, [r2, r1]
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	da0b      	bge.n	800d1fa <start_pass_huff_decoder+0xe2>
	WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, 0);
 800d1e2:	f8da 3000 	ldr.w	r3, [sl]
 800d1e6:	2276      	movs	r2, #118	; 0x76
 800d1e8:	f04f 31ff 	mov.w	r1, #4294967295
 800d1ec:	4650      	mov	r0, sl
 800d1ee:	e9c3 2805 	strd	r2, r8, [r3, #20]
 800d1f2:	2200      	movs	r2, #0
 800d1f4:	61da      	str	r2, [r3, #28]
 800d1f6:	685b      	ldr	r3, [r3, #4]
 800d1f8:	4798      	blx	r3
      for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
 800d1fa:	f8da 5198 	ldr.w	r5, [sl, #408]	; 0x198
 800d1fe:	eb06 0685 	add.w	r6, r6, r5, lsl #2
 800d202:	f8da 319c 	ldr.w	r3, [sl, #412]	; 0x19c
 800d206:	42ab      	cmp	r3, r5
 800d208:	da01      	bge.n	800d20e <start_pass_huff_decoder+0xf6>
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800d20a:	3701      	adds	r7, #1
 800d20c:	e7b6      	b.n	800d17c <start_pass_huff_decoder+0x64>
	int expected = (coef_bit_ptr[coefi] < 0) ? 0 : coef_bit_ptr[coefi];
 800d20e:	6833      	ldr	r3, [r6, #0]
	if (cinfo->Ah != expected)
 800d210:	f8da 21a0 	ldr.w	r2, [sl, #416]	; 0x1a0
	int expected = (coef_bit_ptr[coefi] < 0) ? 0 : coef_bit_ptr[coefi];
 800d214:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
	if (cinfo->Ah != expected)
 800d218:	429a      	cmp	r2, r3
 800d21a:	d00a      	beq.n	800d232 <start_pass_huff_decoder+0x11a>
	  WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, coefi);
 800d21c:	f8da 3000 	ldr.w	r3, [sl]
 800d220:	2276      	movs	r2, #118	; 0x76
 800d222:	f04f 31ff 	mov.w	r1, #4294967295
 800d226:	4650      	mov	r0, sl
 800d228:	61dd      	str	r5, [r3, #28]
 800d22a:	e9c3 2805 	strd	r2, r8, [r3, #20]
 800d22e:	685b      	ldr	r3, [r3, #4]
 800d230:	4798      	blx	r3
	coef_bit_ptr[coefi] = cinfo->Al;
 800d232:	f8da 31a4 	ldr.w	r3, [sl, #420]	; 0x1a4
      for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
 800d236:	3501      	adds	r5, #1
	coef_bit_ptr[coefi] = cinfo->Al;
 800d238:	f846 3b04 	str.w	r3, [r6], #4
      for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
 800d23c:	e7e1      	b.n	800d202 <start_pass_huff_decoder+0xea>
	entropy->pub.decode_mcu = decode_mcu_AC_first;
 800d23e:	4b92      	ldr	r3, [pc, #584]	; (800d488 <start_pass_huff_decoder+0x370>)
 800d240:	e7a9      	b.n	800d196 <start_pass_huff_decoder+0x7e>
      if (cinfo->Ss == 0)
 800d242:	b90b      	cbnz	r3, 800d248 <start_pass_huff_decoder+0x130>
	entropy->pub.decode_mcu = decode_mcu_DC_refine;
 800d244:	4b91      	ldr	r3, [pc, #580]	; (800d48c <start_pass_huff_decoder+0x374>)
 800d246:	e7a6      	b.n	800d196 <start_pass_huff_decoder+0x7e>
	entropy->pub.decode_mcu = decode_mcu_AC_refine;
 800d248:	4b91      	ldr	r3, [pc, #580]	; (800d490 <start_pass_huff_decoder+0x378>)
 800d24a:	e7a4      	b.n	800d196 <start_pass_huff_decoder+0x7e>
      if (cinfo->Ss == 0) {
 800d24c:	f8da 2198 	ldr.w	r2, [sl, #408]	; 0x198
      compptr = cinfo->cur_comp_info[ci];
 800d250:	f854 3b04 	ldr.w	r3, [r4], #4
      if (cinfo->Ss == 0) {
 800d254:	b97a      	cbnz	r2, 800d276 <start_pass_huff_decoder+0x15e>
	if (cinfo->Ah == 0) {	/* DC refinement needs no table */
 800d256:	f8da 21a0 	ldr.w	r2, [sl, #416]	; 0x1a0
 800d25a:	b942      	cbnz	r2, 800d26e <start_pass_huff_decoder+0x156>
	  tbl = compptr->dc_tbl_no;
 800d25c:	695a      	ldr	r2, [r3, #20]
	  jpeg_make_d_derived_tbl(cinfo, TRUE, tbl,
 800d25e:	2101      	movs	r1, #1
 800d260:	4650      	mov	r0, sl
 800d262:	f102 030b 	add.w	r3, r2, #11
 800d266:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 800d26a:	f7ff fe67 	bl	800cf3c <jpeg_make_d_derived_tbl>
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800d26e:	3601      	adds	r6, #1
      entropy->saved.last_dc_val[ci] = 0;
 800d270:	f847 8b04 	str.w	r8, [r7], #4
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800d274:	e795      	b.n	800d1a2 <start_pass_huff_decoder+0x8a>
	tbl = compptr->ac_tbl_no;
 800d276:	699d      	ldr	r5, [r3, #24]
	jpeg_make_d_derived_tbl(cinfo, FALSE, tbl,
 800d278:	2100      	movs	r1, #0
 800d27a:	4650      	mov	r0, sl
 800d27c:	f105 030b 	add.w	r3, r5, #11
 800d280:	462a      	mov	r2, r5
	entropy->ac_derived_tbl = entropy->derived_tbls[tbl];
 800d282:	eb0b 0585 	add.w	r5, fp, r5, lsl #2
	jpeg_make_d_derived_tbl(cinfo, FALSE, tbl,
 800d286:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 800d28a:	f7ff fe57 	bl	800cf3c <jpeg_make_d_derived_tbl>
	entropy->ac_derived_tbl = entropy->derived_tbls[tbl];
 800d28e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800d290:	f8cb 303c 	str.w	r3, [fp, #60]	; 0x3c
 800d294:	e7eb      	b.n	800d26e <start_pass_huff_decoder+0x156>
    if (cinfo->Ss != 0 || cinfo->Ah != 0 || cinfo->Al != 0 ||
 800d296:	b982      	cbnz	r2, 800d2ba <start_pass_huff_decoder+0x1a2>
 800d298:	f8d0 31a0 	ldr.w	r3, [r0, #416]	; 0x1a0
 800d29c:	b96b      	cbnz	r3, 800d2ba <start_pass_huff_decoder+0x1a2>
 800d29e:	f8d0 31a4 	ldr.w	r3, [r0, #420]	; 0x1a4
 800d2a2:	b953      	cbnz	r3, 800d2ba <start_pass_huff_decoder+0x1a2>
 800d2a4:	f8d0 20dc 	ldr.w	r2, [r0, #220]	; 0xdc
      if (cinfo->Se != 0)
 800d2a8:	f8d0 319c 	ldr.w	r3, [r0, #412]	; 0x19c
    if (cinfo->Ss != 0 || cinfo->Ah != 0 || cinfo->Al != 0 ||
 800d2ac:	b90a      	cbnz	r2, 800d2b2 <start_pass_huff_decoder+0x19a>
	((cinfo->is_baseline || cinfo->Se < DCTSIZE2) &&
 800d2ae:	2b3f      	cmp	r3, #63	; 0x3f
 800d2b0:	dc0c      	bgt.n	800d2cc <start_pass_huff_decoder+0x1b4>
 800d2b2:	f8da 21b0 	ldr.w	r2, [sl, #432]	; 0x1b0
 800d2b6:	429a      	cmp	r2, r3
 800d2b8:	d008      	beq.n	800d2cc <start_pass_huff_decoder+0x1b4>
      WARNMS(cinfo, JWRN_NOT_SEQUENTIAL);
 800d2ba:	f8da 3000 	ldr.w	r3, [sl]
 800d2be:	227d      	movs	r2, #125	; 0x7d
 800d2c0:	f04f 31ff 	mov.w	r1, #4294967295
 800d2c4:	4650      	mov	r0, sl
 800d2c6:	615a      	str	r2, [r3, #20]
 800d2c8:	685b      	ldr	r3, [r3, #4]
 800d2ca:	4798      	blx	r3
    if (cinfo->lim_Se != DCTSIZE2-1)
 800d2cc:	f8da 11b0 	ldr.w	r1, [sl, #432]	; 0x1b0
      entropy->pub.decode_mcu = decode_mcu;
 800d2d0:	2600      	movs	r6, #0
 800d2d2:	4b70      	ldr	r3, [pc, #448]	; (800d494 <start_pass_huff_decoder+0x37c>)
 800d2d4:	f10b 0714 	add.w	r7, fp, #20
 800d2d8:	4a6f      	ldr	r2, [pc, #444]	; (800d498 <start_pass_huff_decoder+0x380>)
	jpeg_make_d_derived_tbl(cinfo, FALSE, tbl,
 800d2da:	46b0      	mov	r8, r6
      entropy->pub.decode_mcu = decode_mcu;
 800d2dc:	293f      	cmp	r1, #63	; 0x3f
 800d2de:	bf08      	it	eq
 800d2e0:	4613      	moveq	r3, r2
 800d2e2:	f8cb 3004 	str.w	r3, [fp, #4]
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800d2e6:	f8da 3150 	ldr.w	r3, [sl, #336]	; 0x150
 800d2ea:	42b3      	cmp	r3, r6
 800d2ec:	dc3c      	bgt.n	800d368 <start_pass_huff_decoder+0x250>
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800d2ee:	f8da 016c 	ldr.w	r0, [sl, #364]	; 0x16c
 800d2f2:	f10b 0160 	add.w	r1, fp, #96	; 0x60
 800d2f6:	f50a 76b8 	add.w	r6, sl, #368	; 0x170
 800d2fa:	f04f 0c06 	mov.w	ip, #6
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order5[ci - 1][i - 1];
 800d2fe:	4f67      	ldr	r7, [pc, #412]	; (800d49c <start_pass_huff_decoder+0x384>)
	  entropy->coef_limit[blkn] = 1;
 800d300:	f04f 0801 	mov.w	r8, #1
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800d304:	42a8      	cmp	r0, r5
 800d306:	f77f af53 	ble.w	800d1b0 <start_pass_huff_decoder+0x98>
      ci = cinfo->MCU_membership[blkn];
 800d30a:	f856 3b04 	ldr.w	r3, [r6], #4
      compptr = cinfo->cur_comp_info[ci];
 800d30e:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 800d312:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
      entropy->dc_cur_tbls[blkn] = entropy->dc_derived_tbls[compptr->dc_tbl_no];
 800d316:	6953      	ldr	r3, [r2, #20]
 800d318:	3310      	adds	r3, #16
 800d31a:	f85b 3023 	ldr.w	r3, [fp, r3, lsl #2]
 800d31e:	f841 3b04 	str.w	r3, [r1], #4
      entropy->ac_cur_tbls[blkn] = entropy->ac_derived_tbls[compptr->ac_tbl_no];
 800d322:	6993      	ldr	r3, [r2, #24]
 800d324:	3314      	adds	r3, #20
 800d326:	f85b 3023 	ldr.w	r3, [fp, r3, lsl #2]
 800d32a:	624b      	str	r3, [r1, #36]	; 0x24
      if (compptr->component_needed) {
 800d32c:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d052      	beq.n	800d3d8 <start_pass_huff_decoder+0x2c0>
	switch (cinfo->lim_Se) {
 800d332:	f8da 41b0 	ldr.w	r4, [sl, #432]	; 0x1b0
 800d336:	2c0f      	cmp	r4, #15
	i = compptr->DCT_h_scaled_size;
 800d338:	e9d2 2309 	ldrd	r2, r3, [r2, #36]	; 0x24
	switch (cinfo->lim_Se) {
 800d33c:	d075      	beq.n	800d42a <start_pass_huff_decoder+0x312>
 800d33e:	dc30      	bgt.n	800d3a2 <start_pass_huff_decoder+0x28a>
 800d340:	2c03      	cmp	r4, #3
 800d342:	d04f      	beq.n	800d3e4 <start_pass_huff_decoder+0x2cc>
 800d344:	2c08      	cmp	r4, #8
 800d346:	d05d      	beq.n	800d404 <start_pass_huff_decoder+0x2ec>
 800d348:	2c00      	cmp	r4, #0
 800d34a:	d047      	beq.n	800d3dc <start_pass_huff_decoder+0x2c4>
	  if (ci <= 0 || ci > 8) ci = 8;
 800d34c:	1e5c      	subs	r4, r3, #1
 800d34e:	2c08      	cmp	r4, #8
	  if (i <= 0 || i > 8) i = 8;
 800d350:	f102 34ff 	add.w	r4, r2, #4294967295
	  if (ci <= 0 || ci > 8) ci = 8;
 800d354:	bf28      	it	cs
 800d356:	2308      	movcs	r3, #8
	  if (i <= 0 || i > 8) i = 8;
 800d358:	2c08      	cmp	r4, #8
 800d35a:	bf28      	it	cs
 800d35c:	2208      	movcs	r2, #8
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order[ci - 1][i - 1];
 800d35e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800d362:	4b4f      	ldr	r3, [pc, #316]	; (800d4a0 <start_pass_huff_decoder+0x388>)
 800d364:	3a09      	subs	r2, #9
 800d366:	e04a      	b.n	800d3fe <start_pass_huff_decoder+0x2e6>
      compptr = cinfo->cur_comp_info[ci];
 800d368:	f854 9b04 	ldr.w	r9, [r4], #4
      jpeg_make_d_derived_tbl(cinfo, TRUE, tbl,
 800d36c:	2101      	movs	r1, #1
 800d36e:	4650      	mov	r0, sl
      tbl = compptr->dc_tbl_no;
 800d370:	f8d9 2014 	ldr.w	r2, [r9, #20]
      jpeg_make_d_derived_tbl(cinfo, TRUE, tbl,
 800d374:	f102 0310 	add.w	r3, r2, #16
 800d378:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 800d37c:	f7ff fdde 	bl	800cf3c <jpeg_make_d_derived_tbl>
      if (cinfo->lim_Se) {	/* AC needs no table when not present */
 800d380:	f8da 31b0 	ldr.w	r3, [sl, #432]	; 0x1b0
 800d384:	b14b      	cbz	r3, 800d39a <start_pass_huff_decoder+0x282>
	tbl = compptr->ac_tbl_no;
 800d386:	f8d9 2018 	ldr.w	r2, [r9, #24]
	jpeg_make_d_derived_tbl(cinfo, FALSE, tbl,
 800d38a:	2100      	movs	r1, #0
 800d38c:	4650      	mov	r0, sl
 800d38e:	f102 0314 	add.w	r3, r2, #20
 800d392:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 800d396:	f7ff fdd1 	bl	800cf3c <jpeg_make_d_derived_tbl>
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800d39a:	3601      	adds	r6, #1
      entropy->saved.last_dc_val[ci] = 0;
 800d39c:	f847 8b04 	str.w	r8, [r7], #4
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800d3a0:	e7a1      	b.n	800d2e6 <start_pass_huff_decoder+0x1ce>
	switch (cinfo->lim_Se) {
 800d3a2:	2c23      	cmp	r4, #35	; 0x23
 800d3a4:	f103 3eff 	add.w	lr, r3, #4294967295
 800d3a8:	f102 39ff 	add.w	r9, r2, #4294967295
 800d3ac:	d04b      	beq.n	800d446 <start_pass_huff_decoder+0x32e>
 800d3ae:	2c30      	cmp	r4, #48	; 0x30
 800d3b0:	d057      	beq.n	800d462 <start_pass_huff_decoder+0x34a>
 800d3b2:	2c18      	cmp	r4, #24
 800d3b4:	d1ca      	bne.n	800d34c <start_pass_huff_decoder+0x234>
	  if (ci <= 0 || ci > 5) ci = 5;
 800d3b6:	f1be 0f05 	cmp.w	lr, #5
 800d3ba:	bf28      	it	cs
 800d3bc:	2305      	movcs	r3, #5
	  if (i <= 0 || i > 5) i = 5;
 800d3be:	f1b9 0f05 	cmp.w	r9, #5
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order5[ci - 1][i - 1];
 800d3c2:	f103 33ff 	add.w	r3, r3, #4294967295
	  if (i <= 0 || i > 5) i = 5;
 800d3c6:	bf28      	it	cs
 800d3c8:	2205      	movcs	r2, #5
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order5[ci - 1][i - 1];
 800d3ca:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800d3ce:	3a01      	subs	r2, #1
 800d3d0:	4413      	add	r3, r2
 800d3d2:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order[ci - 1][i - 1];
 800d3d6:	3301      	adds	r3, #1
	entropy->coef_limit[blkn] = 0;
 800d3d8:	64cb      	str	r3, [r1, #76]	; 0x4c
 800d3da:	e001      	b.n	800d3e0 <start_pass_huff_decoder+0x2c8>
	  entropy->coef_limit[blkn] = 1;
 800d3dc:	f8c1 804c 	str.w	r8, [r1, #76]	; 0x4c
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800d3e0:	3501      	adds	r5, #1
 800d3e2:	e78f      	b.n	800d304 <start_pass_huff_decoder+0x1ec>
	  if (ci <= 0 || ci > 2) ci = 2;
 800d3e4:	1e5c      	subs	r4, r3, #1
 800d3e6:	2c02      	cmp	r4, #2
	  if (i <= 0 || i > 2) i = 2;
 800d3e8:	f102 34ff 	add.w	r4, r2, #4294967295
	  if (ci <= 0 || ci > 2) ci = 2;
 800d3ec:	bf28      	it	cs
 800d3ee:	2302      	movcs	r3, #2
	  if (i <= 0 || i > 2) i = 2;
 800d3f0:	2c02      	cmp	r4, #2
 800d3f2:	bf28      	it	cs
 800d3f4:	2202      	movcs	r2, #2
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order2[ci - 1][i - 1];
 800d3f6:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 800d3fa:	4b2a      	ldr	r3, [pc, #168]	; (800d4a4 <start_pass_huff_decoder+0x38c>)
 800d3fc:	3a03      	subs	r2, #3
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order[ci - 1][i - 1];
 800d3fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d402:	e7e8      	b.n	800d3d6 <start_pass_huff_decoder+0x2be>
	  if (ci <= 0 || ci > 3) ci = 3;
 800d404:	1e5c      	subs	r4, r3, #1
 800d406:	2c03      	cmp	r4, #3
	  if (i <= 0 || i > 3) i = 3;
 800d408:	f102 34ff 	add.w	r4, r2, #4294967295
	  if (ci <= 0 || ci > 3) ci = 3;
 800d40c:	bf28      	it	cs
 800d40e:	2303      	movcs	r3, #3
	  if (i <= 0 || i > 3) i = 3;
 800d410:	2c03      	cmp	r4, #3
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order3[ci - 1][i - 1];
 800d412:	f103 33ff 	add.w	r3, r3, #4294967295
	  if (i <= 0 || i > 3) i = 3;
 800d416:	bf28      	it	cs
 800d418:	2203      	movcs	r2, #3
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order3[ci - 1][i - 1];
 800d41a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d41e:	3a01      	subs	r2, #1
 800d420:	4413      	add	r3, r2
 800d422:	4a21      	ldr	r2, [pc, #132]	; (800d4a8 <start_pass_huff_decoder+0x390>)
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order7[ci - 1][i - 1];
 800d424:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d428:	e7d5      	b.n	800d3d6 <start_pass_huff_decoder+0x2be>
	  if (ci <= 0 || ci > 4) ci = 4;
 800d42a:	1e5c      	subs	r4, r3, #1
 800d42c:	2c04      	cmp	r4, #4
	  if (i <= 0 || i > 4) i = 4;
 800d42e:	f102 34ff 	add.w	r4, r2, #4294967295
	  if (ci <= 0 || ci > 4) ci = 4;
 800d432:	bf28      	it	cs
 800d434:	2304      	movcs	r3, #4
	  if (i <= 0 || i > 4) i = 4;
 800d436:	2c04      	cmp	r4, #4
 800d438:	bf28      	it	cs
 800d43a:	2204      	movcs	r2, #4
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order4[ci - 1][i - 1];
 800d43c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800d440:	4b1a      	ldr	r3, [pc, #104]	; (800d4ac <start_pass_huff_decoder+0x394>)
 800d442:	3a05      	subs	r2, #5
 800d444:	e7db      	b.n	800d3fe <start_pass_huff_decoder+0x2e6>
	  if (ci <= 0 || ci > 6) ci = 6;
 800d446:	f1be 0f06 	cmp.w	lr, #6
 800d44a:	bf28      	it	cs
 800d44c:	2306      	movcs	r3, #6
	  if (i <= 0 || i > 6) i = 6;
 800d44e:	f1b9 0f06 	cmp.w	r9, #6
 800d452:	bf28      	it	cs
 800d454:	2206      	movcs	r2, #6
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order6[ci - 1][i - 1];
 800d456:	3b01      	subs	r3, #1
 800d458:	3a01      	subs	r2, #1
 800d45a:	fb0c 2303 	mla	r3, ip, r3, r2
 800d45e:	4a14      	ldr	r2, [pc, #80]	; (800d4b0 <start_pass_huff_decoder+0x398>)
 800d460:	e7e0      	b.n	800d424 <start_pass_huff_decoder+0x30c>
	  if (ci <= 0 || ci > 7) ci = 7;
 800d462:	f1be 0f07 	cmp.w	lr, #7
 800d466:	bf28      	it	cs
 800d468:	2307      	movcs	r3, #7
	  if (i <= 0 || i > 7) i = 7;
 800d46a:	f1b9 0f07 	cmp.w	r9, #7
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order7[ci - 1][i - 1];
 800d46e:	f103 33ff 	add.w	r3, r3, #4294967295
	  if (i <= 0 || i > 7) i = 7;
 800d472:	bf28      	it	cs
 800d474:	2207      	movcs	r2, #7
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order7[ci - 1][i - 1];
 800d476:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800d47a:	3a01      	subs	r2, #1
 800d47c:	4413      	add	r3, r2
 800d47e:	4a0d      	ldr	r2, [pc, #52]	; (800d4b4 <start_pass_huff_decoder+0x39c>)
 800d480:	e7d0      	b.n	800d424 <start_pass_huff_decoder+0x30c>
 800d482:	bf00      	nop
 800d484:	0800c379 	.word	0x0800c379
 800d488:	0800c4ed 	.word	0x0800c4ed
 800d48c:	0800c64d 	.word	0x0800c64d
 800d490:	0800c6e1 	.word	0x0800c6e1
 800d494:	0800c969 	.word	0x0800c969
 800d498:	0800cc59 	.word	0x0800cc59
 800d49c:	0802de24 	.word	0x0802de24
 800d4a0:	0802dcb0 	.word	0x0802dcb0
 800d4a4:	0802ddb0 	.word	0x0802ddb0
 800d4a8:	0802ddc0 	.word	0x0802ddc0
 800d4ac:	0802dde4 	.word	0x0802dde4
 800d4b0:	0802de88 	.word	0x0802de88
 800d4b4:	0802df18 	.word	0x0802df18

0800d4b8 <jinit_huff_decoder>:
 * Module initialization routine for Huffman entropy decoding.
 */

GLOBAL(void)
jinit_huff_decoder (j_decompress_ptr cinfo)
{
 800d4b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  huff_entropy_ptr entropy;
  int i;

  entropy = (huff_entropy_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800d4ba:	6843      	ldr	r3, [r0, #4]
 800d4bc:	22d8      	movs	r2, #216	; 0xd8
 800d4be:	2101      	movs	r1, #1
{
 800d4c0:	4605      	mov	r5, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	4798      	blx	r3
				SIZEOF(huff_entropy_decoder));
  cinfo->entropy = (struct jpeg_entropy_decoder *) entropy;
  entropy->pub.start_pass = start_pass_huff_decoder;
 800d4c6:	4b17      	ldr	r3, [pc, #92]	; (800d524 <jinit_huff_decoder+0x6c>)
  cinfo->entropy = (struct jpeg_entropy_decoder *) entropy;
 800d4c8:	f8c5 01d0 	str.w	r0, [r5, #464]	; 0x1d0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800d4cc:	4604      	mov	r4, r0
  entropy->pub.start_pass = start_pass_huff_decoder;
 800d4ce:	6003      	str	r3, [r0, #0]

  if (cinfo->progressive_mode) {
 800d4d0:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 800d4d4:	b943      	cbnz	r3, 800d4e8 <jinit_huff_decoder+0x30>
      entropy->derived_tbls[i] = NULL;
    }
  } else {
    /* Mark tables unallocated */
    for (i = 0; i < NUM_HUFF_TBLS; i++) {
      entropy->dc_derived_tbls[i] = entropy->ac_derived_tbls[i] = NULL;
 800d4d6:	6503      	str	r3, [r0, #80]	; 0x50
 800d4d8:	6403      	str	r3, [r0, #64]	; 0x40
 800d4da:	6543      	str	r3, [r0, #84]	; 0x54
 800d4dc:	6443      	str	r3, [r0, #68]	; 0x44
 800d4de:	6583      	str	r3, [r0, #88]	; 0x58
 800d4e0:	6483      	str	r3, [r0, #72]	; 0x48
 800d4e2:	65c3      	str	r3, [r0, #92]	; 0x5c
 800d4e4:	64c3      	str	r3, [r0, #76]	; 0x4c
    }
  }
}
 800d4e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800d4e8:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800d4ea:	2101      	movs	r1, #1
 800d4ec:	686b      	ldr	r3, [r5, #4]
 800d4ee:	4628      	mov	r0, r5
 800d4f0:	0212      	lsls	r2, r2, #8
    for (ci = 0; ci < cinfo->num_components; ci++)
 800d4f2:	2600      	movs	r6, #0
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	4798      	blx	r3
 800d4f8:	4607      	mov	r7, r0
    cinfo->coef_bits = (int (*)[DCTSIZE2])
 800d4fa:	f8c5 00a0 	str.w	r0, [r5, #160]	; 0xa0
    for (ci = 0; ci < cinfo->num_components; ci++)
 800d4fe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d500:	eb07 2006 	add.w	r0, r7, r6, lsl #8
 800d504:	42b3      	cmp	r3, r6
 800d506:	dc05      	bgt.n	800d514 <jinit_huff_decoder+0x5c>
      entropy->derived_tbls[i] = NULL;
 800d508:	2300      	movs	r3, #0
 800d50a:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 800d50e:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
}
 800d512:	e7e8      	b.n	800d4e6 <jinit_huff_decoder+0x2e>
	*coef_bit_ptr++ = -1;
 800d514:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d518:	21ff      	movs	r1, #255	; 0xff
    for (ci = 0; ci < cinfo->num_components; ci++)
 800d51a:	3601      	adds	r6, #1
	*coef_bit_ptr++ = -1;
 800d51c:	f01c fe7a 	bl	802a214 <memset>
    for (ci = 0; ci < cinfo->num_components; ci++)
 800d520:	e7ed      	b.n	800d4fe <jinit_huff_decoder+0x46>
 800d522:	bf00      	nop
 800d524:	0800d119 	.word	0x0800d119

0800d528 <finish_input_pass>:
 */

METHODDEF(void)
finish_input_pass (j_decompress_ptr cinfo)
{
  cinfo->inputctl->consume_input = consume_markers;
 800d528:	f8d0 31c8 	ldr.w	r3, [r0, #456]	; 0x1c8
 800d52c:	4a01      	ldr	r2, [pc, #4]	; (800d534 <finish_input_pass+0xc>)
 800d52e:	601a      	str	r2, [r3, #0]
}
 800d530:	4770      	bx	lr
 800d532:	bf00      	nop
 800d534:	0800d6f1 	.word	0x0800d6f1

0800d538 <reset_input_controller>:
 * Reset state to begin a fresh datastream.
 */

METHODDEF(void)
reset_input_controller (j_decompress_ptr cinfo)
{
 800d538:	b538      	push	{r3, r4, r5, lr}
  my_inputctl_ptr inputctl = (my_inputctl_ptr) cinfo->inputctl;

  inputctl->pub.consume_input = consume_markers;
 800d53a:	4a0a      	ldr	r2, [pc, #40]	; (800d564 <reset_input_controller+0x2c>)
  inputctl->pub.has_multiple_scans = FALSE; /* "unknown" would be better */
 800d53c:	2500      	movs	r5, #0
  my_inputctl_ptr inputctl = (my_inputctl_ptr) cinfo->inputctl;
 800d53e:	f8d0 31c8 	ldr.w	r3, [r0, #456]	; 0x1c8
{
 800d542:	4604      	mov	r4, r0
  inputctl->pub.consume_input = consume_markers;
 800d544:	601a      	str	r2, [r3, #0]
  inputctl->pub.eoi_reached = FALSE;
  inputctl->inheaders = 1;
 800d546:	2201      	movs	r2, #1
  inputctl->pub.eoi_reached = FALSE;
 800d548:	e9c3 5504 	strd	r5, r5, [r3, #16]
  inputctl->inheaders = 1;
 800d54c:	619a      	str	r2, [r3, #24]
  /* Reset other modules */
  (*cinfo->err->reset_error_mgr) ((j_common_ptr) cinfo);
 800d54e:	6803      	ldr	r3, [r0, #0]
 800d550:	691b      	ldr	r3, [r3, #16]
 800d552:	4798      	blx	r3
  (*cinfo->marker->reset_marker_reader) (cinfo);
 800d554:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800d558:	4620      	mov	r0, r4
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	4798      	blx	r3
  /* Reset progression state -- would be cleaner if entropy decoder did this */
  cinfo->coef_bits = NULL;
 800d55e:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
}
 800d562:	bd38      	pop	{r3, r4, r5, pc}
 800d564:	0800d6f1 	.word	0x0800d6f1

0800d568 <start_input_pass>:
  if (cinfo->comps_in_scan == 1) {
 800d568:	f8d0 2150 	ldr.w	r2, [r0, #336]	; 0x150
 800d56c:	2a01      	cmp	r2, #1
{
 800d56e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d572:	4604      	mov	r4, r0
 800d574:	f500 76aa 	add.w	r6, r0, #340	; 0x154
  if (cinfo->comps_in_scan == 1) {
 800d578:	d135      	bne.n	800d5e6 <start_input_pass+0x7e>
    compptr = cinfo->cur_comp_info[0];
 800d57a:	f8d0 3154 	ldr.w	r3, [r0, #340]	; 0x154
    cinfo->MCUs_per_row = compptr->width_in_blocks;
 800d57e:	69d9      	ldr	r1, [r3, #28]
 800d580:	f8c0 1164 	str.w	r1, [r0, #356]	; 0x164
    cinfo->MCU_rows_in_scan = compptr->height_in_blocks;
 800d584:	6a19      	ldr	r1, [r3, #32]
 800d586:	f8c0 1168 	str.w	r1, [r0, #360]	; 0x168
    compptr->MCU_sample_width = compptr->DCT_h_scaled_size;
 800d58a:	6a58      	ldr	r0, [r3, #36]	; 0x24
    compptr->MCU_blocks = 1;
 800d58c:	641a      	str	r2, [r3, #64]	; 0x40
    compptr->last_col_width = 1;
 800d58e:	e9c3 0211 	strd	r0, r2, [r3, #68]	; 0x44
    tmp = (int) (compptr->height_in_blocks % compptr->v_samp_factor);
 800d592:	68d8      	ldr	r0, [r3, #12]
 800d594:	fbb1 f5f0 	udiv	r5, r1, r0
 800d598:	fb00 1115 	mls	r1, r0, r5, r1
    if (tmp == 0) tmp = compptr->v_samp_factor;
 800d59c:	2900      	cmp	r1, #0
 800d59e:	bf08      	it	eq
 800d5a0:	4601      	moveq	r1, r0
    compptr->MCU_height = 1;
 800d5a2:	e9c3 220e 	strd	r2, r2, [r3, #56]	; 0x38
    compptr->last_row_height = tmp;
 800d5a6:	64d9      	str	r1, [r3, #76]	; 0x4c
    cinfo->MCU_membership[0] = 0;
 800d5a8:	2300      	movs	r3, #0
    cinfo->blocks_in_MCU = 1;
 800d5aa:	f8c4 216c 	str.w	r2, [r4, #364]	; 0x16c
    cinfo->MCU_membership[0] = 0;
 800d5ae:	f8c4 3170 	str.w	r3, [r4, #368]	; 0x170
 800d5b2:	46b1      	mov	r9, r6
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800d5b4:	2700      	movs	r7, #0
      ERREXIT1(cinfo, JERR_NO_QUANT_TABLE, qtblno);
 800d5b6:	f04f 0a36 	mov.w	sl, #54	; 0x36
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800d5ba:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800d5be:	429f      	cmp	r7, r3
 800d5c0:	db71      	blt.n	800d6a6 <start_input_pass+0x13e>
  (*cinfo->entropy->start_pass) (cinfo);
 800d5c2:	f8d4 31d0 	ldr.w	r3, [r4, #464]	; 0x1d0
 800d5c6:	4620      	mov	r0, r4
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	4798      	blx	r3
  (*cinfo->coef->start_input_pass) (cinfo);
 800d5cc:	f8d4 31c0 	ldr.w	r3, [r4, #448]	; 0x1c0
 800d5d0:	4620      	mov	r0, r4
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	4798      	blx	r3
  cinfo->inputctl->consume_input = cinfo->coef->consume_data;
 800d5d6:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
 800d5da:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 800d5de:	6852      	ldr	r2, [r2, #4]
 800d5e0:	601a      	str	r2, [r3, #0]
}
 800d5e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (cinfo->comps_in_scan <= 0 || cinfo->comps_in_scan > MAX_COMPS_IN_SCAN)
 800d5e6:	1e53      	subs	r3, r2, #1
 800d5e8:	2b03      	cmp	r3, #3
 800d5ea:	d907      	bls.n	800d5fc <start_input_pass+0x94>
      ERREXIT2(cinfo, JERR_COMPONENT_COUNT, cinfo->comps_in_scan,
 800d5ec:	6803      	ldr	r3, [r0, #0]
 800d5ee:	211b      	movs	r1, #27
 800d5f0:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800d5f4:	2204      	movs	r2, #4
 800d5f6:	61da      	str	r2, [r3, #28]
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	4798      	blx	r3
		    (long) (cinfo->max_h_samp_factor * cinfo->block_size));
 800d5fc:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
    cinfo->blocks_in_MCU = 0;
 800d600:	2500      	movs	r5, #0
		    (long) (cinfo->max_h_samp_factor * cinfo->block_size));
 800d602:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800d606:	46b0      	mov	r8, r6
      jdiv_round_up((long) cinfo->image_width,
 800d608:	69e0      	ldr	r0, [r4, #28]
	ERREXIT(cinfo, JERR_BAD_MCU_SIZE);
 800d60a:	f04f 090e 	mov.w	r9, #14
      jdiv_round_up((long) cinfo->image_width,
 800d60e:	4359      	muls	r1, r3
 800d610:	f009 fdd4 	bl	80171bc <jdiv_round_up>
		    (long) (cinfo->max_v_samp_factor * cinfo->block_size));
 800d614:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
 800d618:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
    cinfo->MCUs_per_row = (JDIMENSION)
 800d61c:	f8c4 0164 	str.w	r0, [r4, #356]	; 0x164
      jdiv_round_up((long) cinfo->image_height,
 800d620:	4359      	muls	r1, r3
 800d622:	6a20      	ldr	r0, [r4, #32]
 800d624:	f009 fdca 	bl	80171bc <jdiv_round_up>
    cinfo->blocks_in_MCU = 0;
 800d628:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
    cinfo->MCU_rows_in_scan = (JDIMENSION)
 800d62c:	f8c4 0168 	str.w	r0, [r4, #360]	; 0x168
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800d630:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800d634:	429d      	cmp	r5, r3
 800d636:	dabc      	bge.n	800d5b2 <start_input_pass+0x4a>
      compptr = cinfo->cur_comp_info[ci];
 800d638:	f858 3b04 	ldr.w	r3, [r8], #4
      compptr->MCU_width = compptr->h_samp_factor;
 800d63c:	6899      	ldr	r1, [r3, #8]
      compptr->MCU_sample_width = compptr->MCU_width * compptr->DCT_h_scaled_size;
 800d63e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
      compptr->MCU_height = compptr->v_samp_factor;
 800d640:	68d8      	ldr	r0, [r3, #12]
      compptr->MCU_sample_width = compptr->MCU_width * compptr->DCT_h_scaled_size;
 800d642:	434a      	muls	r2, r1
      compptr->MCU_blocks = compptr->MCU_width * compptr->MCU_height;
 800d644:	fb00 f701 	mul.w	r7, r0, r1
      compptr->MCU_sample_width = compptr->MCU_width * compptr->DCT_h_scaled_size;
 800d648:	645a      	str	r2, [r3, #68]	; 0x44
      tmp = (int) (compptr->width_in_blocks % compptr->MCU_width);
 800d64a:	69da      	ldr	r2, [r3, #28]
      compptr->MCU_width = compptr->h_samp_factor;
 800d64c:	6399      	str	r1, [r3, #56]	; 0x38
      compptr->MCU_height = compptr->v_samp_factor;
 800d64e:	63d8      	str	r0, [r3, #60]	; 0x3c
      compptr->MCU_blocks = compptr->MCU_width * compptr->MCU_height;
 800d650:	641f      	str	r7, [r3, #64]	; 0x40
      tmp = (int) (compptr->width_in_blocks % compptr->MCU_width);
 800d652:	fbb2 fcf1 	udiv	ip, r2, r1
 800d656:	fb01 221c 	mls	r2, r1, ip, r2
      if (tmp == 0) tmp = compptr->MCU_width;
 800d65a:	2a00      	cmp	r2, #0
 800d65c:	bf08      	it	eq
 800d65e:	460a      	moveq	r2, r1
      compptr->last_col_width = tmp;
 800d660:	649a      	str	r2, [r3, #72]	; 0x48
      tmp = (int) (compptr->height_in_blocks % compptr->MCU_height);
 800d662:	6a1a      	ldr	r2, [r3, #32]
 800d664:	fbb2 f1f0 	udiv	r1, r2, r0
 800d668:	fb00 2211 	mls	r2, r0, r1, r2
      if (tmp == 0) tmp = compptr->MCU_height;
 800d66c:	2a00      	cmp	r2, #0
 800d66e:	bf08      	it	eq
 800d670:	4602      	moveq	r2, r0
      compptr->last_row_height = tmp;
 800d672:	64da      	str	r2, [r3, #76]	; 0x4c
      if (cinfo->blocks_in_MCU + mcublks > D_MAX_BLOCKS_IN_MCU)
 800d674:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
 800d678:	443b      	add	r3, r7
 800d67a:	2b0a      	cmp	r3, #10
 800d67c:	dd05      	ble.n	800d68a <start_input_pass+0x122>
	ERREXIT(cinfo, JERR_BAD_MCU_SIZE);
 800d67e:	6823      	ldr	r3, [r4, #0]
 800d680:	4620      	mov	r0, r4
 800d682:	f8c3 9014 	str.w	r9, [r3, #20]
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	4798      	blx	r3
      while (mcublks-- > 0) {
 800d68a:	2f00      	cmp	r7, #0
 800d68c:	dc01      	bgt.n	800d692 <start_input_pass+0x12a>
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800d68e:	3501      	adds	r5, #1
 800d690:	e7ce      	b.n	800d630 <start_input_pass+0xc8>
	cinfo->MCU_membership[cinfo->blocks_in_MCU++] = ci;
 800d692:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
 800d696:	3f01      	subs	r7, #1
 800d698:	1c5a      	adds	r2, r3, #1
 800d69a:	335c      	adds	r3, #92	; 0x5c
 800d69c:	f8c4 216c 	str.w	r2, [r4, #364]	; 0x16c
 800d6a0:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 800d6a4:	e7f1      	b.n	800d68a <start_input_pass+0x122>
    compptr = cinfo->cur_comp_info[ci];
 800d6a6:	f859 6b04 	ldr.w	r6, [r9], #4
    if (compptr->quant_table != NULL)
 800d6aa:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800d6ac:	b9eb      	cbnz	r3, 800d6ea <start_input_pass+0x182>
    qtblno = compptr->quant_tbl_no;
 800d6ae:	6932      	ldr	r2, [r6, #16]
    if (qtblno < 0 || qtblno >= NUM_QUANT_TBLS ||
 800d6b0:	2a03      	cmp	r2, #3
 800d6b2:	f102 0528 	add.w	r5, r2, #40	; 0x28
 800d6b6:	d803      	bhi.n	800d6c0 <start_input_pass+0x158>
	cinfo->quant_tbl_ptrs[qtblno] == NULL)
 800d6b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
    if (qtblno < 0 || qtblno >= NUM_QUANT_TBLS ||
 800d6bc:	685b      	ldr	r3, [r3, #4]
 800d6be:	b92b      	cbnz	r3, 800d6cc <start_input_pass+0x164>
      ERREXIT1(cinfo, JERR_NO_QUANT_TABLE, qtblno);
 800d6c0:	6823      	ldr	r3, [r4, #0]
 800d6c2:	4620      	mov	r0, r4
 800d6c4:	e9c3 a205 	strd	sl, r2, [r3, #20]
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	4798      	blx	r3
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800d6cc:	6863      	ldr	r3, [r4, #4]
 800d6ce:	2284      	movs	r2, #132	; 0x84
 800d6d0:	2101      	movs	r1, #1
 800d6d2:	4620      	mov	r0, r4
 800d6d4:	681b      	ldr	r3, [r3, #0]
    MEMCOPY(qtbl, cinfo->quant_tbl_ptrs[qtblno], SIZEOF(JQUANT_TBL));
 800d6d6:	eb04 0585 	add.w	r5, r4, r5, lsl #2
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800d6da:	4798      	blx	r3
 800d6dc:	4680      	mov	r8, r0
    MEMCOPY(qtbl, cinfo->quant_tbl_ptrs[qtblno], SIZEOF(JQUANT_TBL));
 800d6de:	2284      	movs	r2, #132	; 0x84
 800d6e0:	6869      	ldr	r1, [r5, #4]
 800d6e2:	f01c fd89 	bl	802a1f8 <memcpy>
    compptr->quant_table = qtbl;
 800d6e6:	f8c6 8050 	str.w	r8, [r6, #80]	; 0x50
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800d6ea:	3701      	adds	r7, #1
 800d6ec:	e765      	b.n	800d5ba <start_input_pass+0x52>
	...

0800d6f0 <consume_markers>:
{
 800d6f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_inputctl_ptr inputctl = (my_inputctl_ptr) cinfo->inputctl;
 800d6f4:	f8d0 61c8 	ldr.w	r6, [r0, #456]	; 0x1c8
{
 800d6f8:	4604      	mov	r4, r0
  if (inputctl->pub.eoi_reached) /* After hitting EOI, read no further */
 800d6fa:	6973      	ldr	r3, [r6, #20]
 800d6fc:	b9eb      	cbnz	r3, 800d73a <consume_markers+0x4a>
  cinfo->max_h_samp_factor = 1;
 800d6fe:	f04f 0901 	mov.w	r9, #1
    cinfo->natural_order = jpeg_natural_order;
 800d702:	4db0      	ldr	r5, [pc, #704]	; (800d9c4 <consume_markers+0x2d4>)
    val = (*cinfo->marker->read_markers) (cinfo);
 800d704:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800d708:	4620      	mov	r0, r4
 800d70a:	685b      	ldr	r3, [r3, #4]
 800d70c:	4798      	blx	r3
    switch (val) {
 800d70e:	2801      	cmp	r0, #1
    val = (*cinfo->marker->read_markers) (cinfo);
 800d710:	4607      	mov	r7, r0
    switch (val) {
 800d712:	d016      	beq.n	800d742 <consume_markers+0x52>
 800d714:	2802      	cmp	r0, #2
 800d716:	d111      	bne.n	800d73c <consume_markers+0x4c>
      inputctl->pub.eoi_reached = TRUE;
 800d718:	2301      	movs	r3, #1
 800d71a:	6173      	str	r3, [r6, #20]
      if (inputctl->inheaders) { /* Tables-only datastream, apparently */
 800d71c:	69b3      	ldr	r3, [r6, #24]
 800d71e:	2b00      	cmp	r3, #0
 800d720:	f000 8174 	beq.w	800da0c <consume_markers+0x31c>
	if (cinfo->marker->saw_SOF)
 800d724:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800d728:	691b      	ldr	r3, [r3, #16]
 800d72a:	b133      	cbz	r3, 800d73a <consume_markers+0x4a>
	  ERREXIT(cinfo, JERR_SOF_NO_SOS);
 800d72c:	6823      	ldr	r3, [r4, #0]
 800d72e:	223d      	movs	r2, #61	; 0x3d
 800d730:	4620      	mov	r0, r4
 800d732:	615a      	str	r2, [r3, #20]
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	4798      	blx	r3
 800d738:	e000      	b.n	800d73c <consume_markers+0x4c>
    return JPEG_REACHED_EOI;
 800d73a:	2702      	movs	r7, #2
}
 800d73c:	4638      	mov	r0, r7
 800d73e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (inputctl->inheaders) { /* 1st SOS */
 800d742:	69b3      	ldr	r3, [r6, #24]
 800d744:	2b00      	cmp	r3, #0
 800d746:	f000 8150 	beq.w	800d9ea <consume_markers+0x2fa>
	if (inputctl->inheaders == 1)
 800d74a:	2b01      	cmp	r3, #1
 800d74c:	f040 80d8 	bne.w	800d900 <consume_markers+0x210>
  if ((long) cinfo->image_height > (long) JPEG_MAX_DIMENSION ||
 800d750:	6a22      	ldr	r2, [r4, #32]
 800d752:	f64f 73dc 	movw	r3, #65500	; 0xffdc
 800d756:	429a      	cmp	r2, r3
 800d758:	dc02      	bgt.n	800d760 <consume_markers+0x70>
 800d75a:	69e2      	ldr	r2, [r4, #28]
 800d75c:	429a      	cmp	r2, r3
 800d75e:	dd08      	ble.n	800d772 <consume_markers+0x82>
    ERREXIT1(cinfo, JERR_IMAGE_TOO_BIG, (unsigned int) JPEG_MAX_DIMENSION);
 800d760:	6823      	ldr	r3, [r4, #0]
 800d762:	212a      	movs	r1, #42	; 0x2a
 800d764:	f64f 72dc 	movw	r2, #65500	; 0xffdc
 800d768:	4620      	mov	r0, r4
 800d76a:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	4798      	blx	r3
  if (cinfo->data_precision != BITS_IN_JSAMPLE)
 800d772:	f8d4 20d4 	ldr.w	r2, [r4, #212]	; 0xd4
 800d776:	2a08      	cmp	r2, #8
 800d778:	d006      	beq.n	800d788 <consume_markers+0x98>
    ERREXIT1(cinfo, JERR_BAD_PRECISION, cinfo->data_precision);
 800d77a:	6823      	ldr	r3, [r4, #0]
 800d77c:	2110      	movs	r1, #16
 800d77e:	4620      	mov	r0, r4
 800d780:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	4798      	blx	r3
  if (cinfo->num_components > MAX_COMPONENTS)
 800d788:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800d78a:	2a0a      	cmp	r2, #10
 800d78c:	dd08      	ble.n	800d7a0 <consume_markers+0xb0>
    ERREXIT2(cinfo, JERR_COMPONENT_COUNT, cinfo->num_components,
 800d78e:	6823      	ldr	r3, [r4, #0]
 800d790:	211b      	movs	r1, #27
 800d792:	4620      	mov	r0, r4
 800d794:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800d798:	220a      	movs	r2, #10
 800d79a:	61da      	str	r2, [r3, #28]
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	4798      	blx	r3
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d7a0:	f8d4 80d8 	ldr.w	r8, [r4, #216]	; 0xd8
 800d7a4:	f04f 0a00 	mov.w	sl, #0
      ERREXIT(cinfo, JERR_BAD_SAMPLING);
 800d7a8:	f04f 0b13 	mov.w	fp, #19
  cinfo->max_v_samp_factor = 1;
 800d7ac:	e9c4 994e 	strd	r9, r9, [r4, #312]	; 0x138
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d7b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d7b2:	459a      	cmp	sl, r3
 800d7b4:	db0d      	blt.n	800d7d2 <consume_markers+0xe2>
  if (cinfo->is_baseline || (cinfo->progressive_mode &&
 800d7b6:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
 800d7ba:	b92b      	cbnz	r3, 800d7c8 <consume_markers+0xd8>
 800d7bc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800d7c0:	b383      	cbz	r3, 800d824 <consume_markers+0x134>
 800d7c2:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800d7c6:	b36b      	cbz	r3, 800d824 <consume_markers+0x134>
    cinfo->block_size = DCTSIZE;
 800d7c8:	2308      	movs	r3, #8
      cinfo->natural_order = jpeg_natural_order;
 800d7ca:	e9c4 356a 	strd	r3, r5, [r4, #424]	; 0x1a8
      cinfo->lim_Se = DCTSIZE2-1;
 800d7ce:	233f      	movs	r3, #63	; 0x3f
 800d7d0:	e071      	b.n	800d8b6 <consume_markers+0x1c6>
    if (compptr->h_samp_factor<=0 || compptr->h_samp_factor>MAX_SAMP_FACTOR ||
 800d7d2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d7d6:	3b01      	subs	r3, #1
 800d7d8:	2b03      	cmp	r3, #3
 800d7da:	d804      	bhi.n	800d7e6 <consume_markers+0xf6>
 800d7dc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d7e0:	3b01      	subs	r3, #1
 800d7e2:	2b03      	cmp	r3, #3
 800d7e4:	d905      	bls.n	800d7f2 <consume_markers+0x102>
      ERREXIT(cinfo, JERR_BAD_SAMPLING);
 800d7e6:	6823      	ldr	r3, [r4, #0]
 800d7e8:	4620      	mov	r0, r4
 800d7ea:	f8c3 b014 	str.w	fp, [r3, #20]
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	4798      	blx	r3
    cinfo->max_h_samp_factor = MAX(cinfo->max_h_samp_factor,
 800d7f2:	f8d8 3008 	ldr.w	r3, [r8, #8]
       ci++, compptr++) {
 800d7f6:	f10a 0a01 	add.w	sl, sl, #1
    cinfo->max_h_samp_factor = MAX(cinfo->max_h_samp_factor,
 800d7fa:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
       ci++, compptr++) {
 800d7fe:	f108 0858 	add.w	r8, r8, #88	; 0x58
    cinfo->max_h_samp_factor = MAX(cinfo->max_h_samp_factor,
 800d802:	429a      	cmp	r2, r3
 800d804:	bfac      	ite	ge
 800d806:	f8c4 2138 	strge.w	r2, [r4, #312]	; 0x138
 800d80a:	f8c4 3138 	strlt.w	r3, [r4, #312]	; 0x138
    cinfo->max_v_samp_factor = MAX(cinfo->max_v_samp_factor,
 800d80e:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
 800d812:	f858 3c4c 	ldr.w	r3, [r8, #-76]
 800d816:	429a      	cmp	r2, r3
 800d818:	bfac      	ite	ge
 800d81a:	f8c4 213c 	strge.w	r2, [r4, #316]	; 0x13c
 800d81e:	f8c4 313c 	strlt.w	r3, [r4, #316]	; 0x13c
       ci++, compptr++) {
 800d822:	e7c5      	b.n	800d7b0 <consume_markers+0xc0>
    switch (cinfo->Se) {
 800d824:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
 800d828:	2b50      	cmp	r3, #80	; 0x50
 800d82a:	f000 808a 	beq.w	800d942 <consume_markers+0x252>
 800d82e:	dc2b      	bgt.n	800d888 <consume_markers+0x198>
 800d830:	2b18      	cmp	r3, #24
 800d832:	d078      	beq.n	800d926 <consume_markers+0x236>
 800d834:	dc1d      	bgt.n	800d872 <consume_markers+0x182>
 800d836:	2b08      	cmp	r3, #8
 800d838:	d070      	beq.n	800d91c <consume_markers+0x22c>
 800d83a:	dc13      	bgt.n	800d864 <consume_markers+0x174>
 800d83c:	b3bb      	cbz	r3, 800d8ae <consume_markers+0x1be>
 800d83e:	2b03      	cmp	r3, #3
 800d840:	d065      	beq.n	800d90e <consume_markers+0x21e>
      ERREXIT4(cinfo, JERR_BAD_PROGRESSION,
 800d842:	6822      	ldr	r2, [r4, #0]
 800d844:	2111      	movs	r1, #17
 800d846:	4620      	mov	r0, r4
 800d848:	6151      	str	r1, [r2, #20]
 800d84a:	f8d4 1198 	ldr.w	r1, [r4, #408]	; 0x198
 800d84e:	e9c2 1306 	strd	r1, r3, [r2, #24]
 800d852:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
 800d856:	6213      	str	r3, [r2, #32]
 800d858:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
 800d85c:	6253      	str	r3, [r2, #36]	; 0x24
 800d85e:	6813      	ldr	r3, [r2, #0]
 800d860:	4798      	blx	r3
      break;
 800d862:	e02a      	b.n	800d8ba <consume_markers+0x1ca>
    switch (cinfo->Se) {
 800d864:	2b0f      	cmp	r3, #15
 800d866:	d1ec      	bne.n	800d842 <consume_markers+0x152>
      cinfo->block_size = 4;
 800d868:	2204      	movs	r2, #4
 800d86a:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order4;
 800d86e:	4a56      	ldr	r2, [pc, #344]	; (800d9c8 <consume_markers+0x2d8>)
 800d870:	e051      	b.n	800d916 <consume_markers+0x226>
    switch (cinfo->Se) {
 800d872:	2b30      	cmp	r3, #48	; 0x30
 800d874:	d05c      	beq.n	800d930 <consume_markers+0x240>
 800d876:	2b3f      	cmp	r3, #63	; 0x3f
 800d878:	d05f      	beq.n	800d93a <consume_markers+0x24a>
 800d87a:	2b23      	cmp	r3, #35	; 0x23
 800d87c:	d1e1      	bne.n	800d842 <consume_markers+0x152>
      cinfo->block_size = 6;
 800d87e:	2206      	movs	r2, #6
 800d880:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order6;
 800d884:	4a51      	ldr	r2, [pc, #324]	; (800d9cc <consume_markers+0x2dc>)
 800d886:	e046      	b.n	800d916 <consume_markers+0x226>
    switch (cinfo->Se) {
 800d888:	2ba8      	cmp	r3, #168	; 0xa8
 800d88a:	d060      	beq.n	800d94e <consume_markers+0x25e>
 800d88c:	dc07      	bgt.n	800d89e <consume_markers+0x1ae>
 800d88e:	2b78      	cmp	r3, #120	; 0x78
 800d890:	d059      	beq.n	800d946 <consume_markers+0x256>
 800d892:	2b8f      	cmp	r3, #143	; 0x8f
 800d894:	d059      	beq.n	800d94a <consume_markers+0x25a>
 800d896:	2b63      	cmp	r3, #99	; 0x63
 800d898:	d1d3      	bne.n	800d842 <consume_markers+0x152>
      cinfo->block_size = 10;
 800d89a:	230a      	movs	r3, #10
 800d89c:	e795      	b.n	800d7ca <consume_markers+0xda>
    switch (cinfo->Se) {
 800d89e:	2be0      	cmp	r3, #224	; 0xe0
 800d8a0:	d057      	beq.n	800d952 <consume_markers+0x262>
 800d8a2:	2bff      	cmp	r3, #255	; 0xff
 800d8a4:	d057      	beq.n	800d956 <consume_markers+0x266>
 800d8a6:	2bc3      	cmp	r3, #195	; 0xc3
 800d8a8:	d1cb      	bne.n	800d842 <consume_markers+0x152>
      cinfo->block_size = 14;
 800d8aa:	230e      	movs	r3, #14
 800d8ac:	e78d      	b.n	800d7ca <consume_markers+0xda>
      cinfo->block_size = 1;
 800d8ae:	f8c4 91a8 	str.w	r9, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order; /* not needed */
 800d8b2:	f8c4 51ac 	str.w	r5, [r4, #428]	; 0x1ac
      cinfo->lim_Se = cinfo->Se;
 800d8b6:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d8ba:	f04f 0a00 	mov.w	sl, #0
  cinfo->min_DCT_h_scaled_size = cinfo->block_size;
 800d8be:	f8d4 31a8 	ldr.w	r3, [r4, #424]	; 0x1a8
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d8c2:	f8d4 80d8 	ldr.w	r8, [r4, #216]	; 0xd8
    compptr->quant_table = NULL;
 800d8c6:	46d3      	mov	fp, sl
  cinfo->min_DCT_v_scaled_size = cinfo->block_size;
 800d8c8:	e9c4 3350 	strd	r3, r3, [r4, #320]	; 0x140
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d8cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
    compptr->DCT_h_scaled_size = cinfo->block_size;
 800d8ce:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d8d2:	459a      	cmp	sl, r3
 800d8d4:	db41      	blt.n	800d95a <consume_markers+0x26a>
	          (long) (cinfo->max_v_samp_factor * cinfo->block_size));
 800d8d6:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    jdiv_round_up((long) cinfo->image_height,
 800d8da:	6a20      	ldr	r0, [r4, #32]
 800d8dc:	4359      	muls	r1, r3
 800d8de:	f009 fc6d 	bl	80171bc <jdiv_round_up>
  if (cinfo->comps_in_scan < cinfo->num_components || cinfo->progressive_mode)
 800d8e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d8e4:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
  cinfo->total_iMCU_rows = (JDIMENSION)
 800d8e8:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  if (cinfo->comps_in_scan < cinfo->num_components || cinfo->progressive_mode)
 800d8ec:	429a      	cmp	r2, r3
 800d8ee:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 800d8f2:	db03      	blt.n	800d8fc <consume_markers+0x20c>
 800d8f4:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
 800d8f8:	2a00      	cmp	r2, #0
 800d8fa:	d071      	beq.n	800d9e0 <consume_markers+0x2f0>
    cinfo->inputctl->has_multiple_scans = TRUE;
 800d8fc:	f8c3 9010 	str.w	r9, [r3, #16]
	if (cinfo->comps_in_scan == 0) { /* pseudo SOS marker */
 800d900:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800d904:	2b00      	cmp	r3, #0
 800d906:	d16d      	bne.n	800d9e4 <consume_markers+0x2f4>
	  inputctl->inheaders = 2;
 800d908:	2302      	movs	r3, #2
 800d90a:	61b3      	str	r3, [r6, #24]
	  break;
 800d90c:	e6fa      	b.n	800d704 <consume_markers+0x14>
      cinfo->block_size = 2;
 800d90e:	2202      	movs	r2, #2
 800d910:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order2;
 800d914:	4a2e      	ldr	r2, [pc, #184]	; (800d9d0 <consume_markers+0x2e0>)
      cinfo->natural_order = jpeg_natural_order7;
 800d916:	f8c4 21ac 	str.w	r2, [r4, #428]	; 0x1ac
      cinfo->lim_Se = cinfo->Se;
 800d91a:	e7cc      	b.n	800d8b6 <consume_markers+0x1c6>
      cinfo->block_size = 3;
 800d91c:	2203      	movs	r2, #3
 800d91e:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order3;
 800d922:	4a2c      	ldr	r2, [pc, #176]	; (800d9d4 <consume_markers+0x2e4>)
 800d924:	e7f7      	b.n	800d916 <consume_markers+0x226>
      cinfo->block_size = 5;
 800d926:	2205      	movs	r2, #5
 800d928:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order5;
 800d92c:	4a2a      	ldr	r2, [pc, #168]	; (800d9d8 <consume_markers+0x2e8>)
 800d92e:	e7f2      	b.n	800d916 <consume_markers+0x226>
      cinfo->block_size = 7;
 800d930:	2207      	movs	r2, #7
 800d932:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order7;
 800d936:	4a29      	ldr	r2, [pc, #164]	; (800d9dc <consume_markers+0x2ec>)
 800d938:	e7ed      	b.n	800d916 <consume_markers+0x226>
      cinfo->block_size = 8;
 800d93a:	2208      	movs	r2, #8
 800d93c:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order;
 800d940:	e7b7      	b.n	800d8b2 <consume_markers+0x1c2>
      cinfo->block_size = 9;
 800d942:	2309      	movs	r3, #9
 800d944:	e741      	b.n	800d7ca <consume_markers+0xda>
      cinfo->block_size = 11;
 800d946:	230b      	movs	r3, #11
 800d948:	e73f      	b.n	800d7ca <consume_markers+0xda>
      cinfo->block_size = 12;
 800d94a:	230c      	movs	r3, #12
 800d94c:	e73d      	b.n	800d7ca <consume_markers+0xda>
      cinfo->block_size = 13;
 800d94e:	230d      	movs	r3, #13
 800d950:	e73b      	b.n	800d7ca <consume_markers+0xda>
      cinfo->block_size = 15;
 800d952:	230f      	movs	r3, #15
 800d954:	e739      	b.n	800d7ca <consume_markers+0xda>
      cinfo->block_size = 16;
 800d956:	2310      	movs	r3, #16
 800d958:	e737      	b.n	800d7ca <consume_markers+0xda>
    compptr->DCT_v_scaled_size = cinfo->block_size;
 800d95a:	e9c8 1109 	strd	r1, r1, [r8, #36]	; 0x24
      jdiv_round_up((long) cinfo->image_width * (long) compptr->h_samp_factor,
 800d95e:	f8d8 0008 	ldr.w	r0, [r8, #8]
       ci++, compptr++) {
 800d962:	f10a 0a01 	add.w	sl, sl, #1
		    (long) (cinfo->max_h_samp_factor * cinfo->block_size));
 800d966:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
      jdiv_round_up((long) cinfo->image_width * (long) compptr->h_samp_factor,
 800d96a:	69e3      	ldr	r3, [r4, #28]
 800d96c:	4351      	muls	r1, r2
 800d96e:	4358      	muls	r0, r3
 800d970:	f009 fc24 	bl	80171bc <jdiv_round_up>
    compptr->width_in_blocks = (JDIMENSION)
 800d974:	f8c8 001c 	str.w	r0, [r8, #28]
      jdiv_round_up((long) cinfo->image_height * (long) compptr->v_samp_factor,
 800d978:	f8d8 000c 	ldr.w	r0, [r8, #12]
		    (long) (cinfo->max_v_samp_factor * cinfo->block_size));
 800d97c:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
      jdiv_round_up((long) cinfo->image_height * (long) compptr->v_samp_factor,
 800d980:	6a23      	ldr	r3, [r4, #32]
		    (long) (cinfo->max_v_samp_factor * cinfo->block_size));
 800d982:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
      jdiv_round_up((long) cinfo->image_height * (long) compptr->v_samp_factor,
 800d986:	4358      	muls	r0, r3
 800d988:	4351      	muls	r1, r2
 800d98a:	f009 fc17 	bl	80171bc <jdiv_round_up>
    compptr->height_in_blocks = (JDIMENSION)
 800d98e:	f8c8 0020 	str.w	r0, [r8, #32]
      jdiv_round_up((long) cinfo->image_width * (long) compptr->h_samp_factor,
 800d992:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800d996:	69e3      	ldr	r3, [r4, #28]
 800d998:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
 800d99c:	4358      	muls	r0, r3
 800d99e:	f009 fc0d 	bl	80171bc <jdiv_round_up>
    compptr->downsampled_width = (JDIMENSION)
 800d9a2:	f8c8 002c 	str.w	r0, [r8, #44]	; 0x2c
      jdiv_round_up((long) cinfo->image_height * (long) compptr->v_samp_factor,
 800d9a6:	f8d8 000c 	ldr.w	r0, [r8, #12]
 800d9aa:	6a23      	ldr	r3, [r4, #32]
 800d9ac:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
 800d9b0:	4358      	muls	r0, r3
 800d9b2:	f009 fc03 	bl	80171bc <jdiv_round_up>
    compptr->quant_table = NULL;
 800d9b6:	f8c8 b050 	str.w	fp, [r8, #80]	; 0x50
    compptr->component_needed = TRUE;
 800d9ba:	e9c8 090c 	strd	r0, r9, [r8, #48]	; 0x30
       ci++, compptr++) {
 800d9be:	f108 0858 	add.w	r8, r8, #88	; 0x58
 800d9c2:	e783      	b.n	800d8cc <consume_markers+0x1dc>
 800d9c4:	0802f548 	.word	0x0802f548
 800d9c8:	0802f73c 	.word	0x0802f73c
 800d9cc:	0802f860 	.word	0x0802f860
 800d9d0:	0802f688 	.word	0x0802f688
 800d9d4:	0802f6d8 	.word	0x0802f6d8
 800d9d8:	0802f7bc 	.word	0x0802f7bc
 800d9dc:	0802f930 	.word	0x0802f930
    cinfo->inputctl->has_multiple_scans = FALSE;
 800d9e0:	611a      	str	r2, [r3, #16]
 800d9e2:	e78d      	b.n	800d900 <consume_markers+0x210>
	inputctl->inheaders = 0;
 800d9e4:	2300      	movs	r3, #0
 800d9e6:	61b3      	str	r3, [r6, #24]
 800d9e8:	e6a8      	b.n	800d73c <consume_markers+0x4c>
	if (! inputctl->pub.has_multiple_scans)
 800d9ea:	6933      	ldr	r3, [r6, #16]
 800d9ec:	b92b      	cbnz	r3, 800d9fa <consume_markers+0x30a>
	  ERREXIT(cinfo, JERR_EOI_EXPECTED); /* Oops, I wasn't expecting this! */
 800d9ee:	6823      	ldr	r3, [r4, #0]
 800d9f0:	2224      	movs	r2, #36	; 0x24
 800d9f2:	4620      	mov	r0, r4
 800d9f4:	615a      	str	r2, [r3, #20]
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	4798      	blx	r3
	if (cinfo->comps_in_scan == 0) /* unexpected pseudo SOS marker */
 800d9fa:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	f43f ae80 	beq.w	800d704 <consume_markers+0x14>
	start_input_pass(cinfo);
 800da04:	4620      	mov	r0, r4
 800da06:	f7ff fdaf 	bl	800d568 <start_input_pass>
 800da0a:	e697      	b.n	800d73c <consume_markers+0x4c>
	if (cinfo->output_scan_number > cinfo->input_scan_number)
 800da0c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800da10:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 800da14:	429a      	cmp	r2, r3
 800da16:	f77f ae90 	ble.w	800d73a <consume_markers+0x4a>
	  cinfo->output_scan_number = cinfo->input_scan_number;
 800da1a:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
 800da1e:	e68d      	b.n	800d73c <consume_markers+0x4c>

0800da20 <jpeg_core_output_dimensions>:
  if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom) {
 800da20:	f8d0 11a8 	ldr.w	r1, [r0, #424]	; 0x1a8
 800da24:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800da26:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800da28:	434a      	muls	r2, r1
 800da2a:	429a      	cmp	r2, r3
{
 800da2c:	b570      	push	{r4, r5, r6, lr}
 800da2e:	4604      	mov	r4, r0
      jdiv_round_up((long) cinfo->image_width, (long) cinfo->block_size);
 800da30:	69c0      	ldr	r0, [r0, #28]
  if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom) {
 800da32:	d80c      	bhi.n	800da4e <jpeg_core_output_dimensions+0x2e>
      jdiv_round_up((long) cinfo->image_width, (long) cinfo->block_size);
 800da34:	f009 fbc2 	bl	80171bc <jdiv_round_up>
      jdiv_round_up((long) cinfo->image_height, (long) cinfo->block_size);
 800da38:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
    cinfo->output_width = (JDIMENSION)
 800da3c:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height, (long) cinfo->block_size);
 800da3e:	6a20      	ldr	r0, [r4, #32]
 800da40:	f009 fbbc 	bl	80171bc <jdiv_round_up>
    cinfo->min_DCT_h_scaled_size = 1;
 800da44:	2301      	movs	r3, #1
    cinfo->output_height = (JDIMENSION)
 800da46:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_v_scaled_size = 16;
 800da48:	e9c4 3350 	strd	r3, r3, [r4, #320]	; 0x140
 800da4c:	e059      	b.n	800db02 <jpeg_core_output_dimensions+0xe2>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 2) {
 800da4e:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 800da52:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800da56:	d80c      	bhi.n	800da72 <jpeg_core_output_dimensions+0x52>
      jdiv_round_up((long) cinfo->image_width * 2L, (long) cinfo->block_size);
 800da58:	0040      	lsls	r0, r0, #1
 800da5a:	f009 fbaf 	bl	80171bc <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800da5e:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 2L, (long) cinfo->block_size);
 800da60:	6a20      	ldr	r0, [r4, #32]
 800da62:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800da66:	0040      	lsls	r0, r0, #1
 800da68:	f009 fba8 	bl	80171bc <jdiv_round_up>
    cinfo->min_DCT_h_scaled_size = 2;
 800da6c:	2302      	movs	r3, #2
    cinfo->output_height = (JDIMENSION)
 800da6e:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 2;
 800da70:	e7ea      	b.n	800da48 <jpeg_core_output_dimensions+0x28>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 3) {
 800da72:	441d      	add	r5, r3
 800da74:	42aa      	cmp	r2, r5
 800da76:	d80e      	bhi.n	800da96 <jpeg_core_output_dimensions+0x76>
      jdiv_round_up((long) cinfo->image_width * 3L, (long) cinfo->block_size);
 800da78:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800da7c:	f009 fb9e 	bl	80171bc <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800da80:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 3L, (long) cinfo->block_size);
 800da82:	6a20      	ldr	r0, [r4, #32]
 800da84:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800da88:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800da8c:	f009 fb96 	bl	80171bc <jdiv_round_up>
    cinfo->min_DCT_h_scaled_size = 3;
 800da90:	2303      	movs	r3, #3
    cinfo->output_height = (JDIMENSION)
 800da92:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 3;
 800da94:	e7d8      	b.n	800da48 <jpeg_core_output_dimensions+0x28>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 4) {
 800da96:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
 800da9a:	ea4f 0583 	mov.w	r5, r3, lsl #2
 800da9e:	d80c      	bhi.n	800daba <jpeg_core_output_dimensions+0x9a>
      jdiv_round_up((long) cinfo->image_width * 4L, (long) cinfo->block_size);
 800daa0:	0080      	lsls	r0, r0, #2
 800daa2:	f009 fb8b 	bl	80171bc <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800daa6:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 4L, (long) cinfo->block_size);
 800daa8:	6a20      	ldr	r0, [r4, #32]
 800daaa:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800daae:	0080      	lsls	r0, r0, #2
 800dab0:	f009 fb84 	bl	80171bc <jdiv_round_up>
    cinfo->min_DCT_h_scaled_size = 4;
 800dab4:	2304      	movs	r3, #4
    cinfo->output_height = (JDIMENSION)
 800dab6:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 4;
 800dab8:	e7c6      	b.n	800da48 <jpeg_core_output_dimensions+0x28>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 5) {
 800daba:	441d      	add	r5, r3
 800dabc:	42aa      	cmp	r2, r5
 800dabe:	d80e      	bhi.n	800dade <jpeg_core_output_dimensions+0xbe>
      jdiv_round_up((long) cinfo->image_width * 5L, (long) cinfo->block_size);
 800dac0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800dac4:	f009 fb7a 	bl	80171bc <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800dac8:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 5L, (long) cinfo->block_size);
 800daca:	6a20      	ldr	r0, [r4, #32]
 800dacc:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800dad0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800dad4:	f009 fb72 	bl	80171bc <jdiv_round_up>
    cinfo->min_DCT_h_scaled_size = 5;
 800dad8:	2305      	movs	r3, #5
    cinfo->output_height = (JDIMENSION)
 800dada:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 5;
 800dadc:	e7b4      	b.n	800da48 <jpeg_core_output_dimensions+0x28>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 6) {
 800dade:	2506      	movs	r5, #6
 800dae0:	fb05 f603 	mul.w	r6, r5, r3
 800dae4:	42b2      	cmp	r2, r6
 800dae6:	d813      	bhi.n	800db10 <jpeg_core_output_dimensions+0xf0>
      jdiv_round_up((long) cinfo->image_width * 14L, (long) cinfo->block_size);
 800dae8:	4368      	muls	r0, r5
 800daea:	f009 fb67 	bl	80171bc <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800daee:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 14L, (long) cinfo->block_size);
 800daf0:	6a20      	ldr	r0, [r4, #32]
 800daf2:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800daf6:	4368      	muls	r0, r5
 800daf8:	f009 fb60 	bl	80171bc <jdiv_round_up>
    cinfo->output_height = (JDIMENSION)
 800dafc:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_v_scaled_size = 14;
 800dafe:	e9c4 5550 	strd	r5, r5, [r4, #320]	; 0x140
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800db02:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 800db06:	2200      	movs	r2, #0
 800db08:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800db0a:	4291      	cmp	r1, r2
 800db0c:	dc6f      	bgt.n	800dbee <jpeg_core_output_dimensions+0x1ce>
}
 800db0e:	bd70      	pop	{r4, r5, r6, pc}
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 7) {
 800db10:	ebc3 06c3 	rsb	r6, r3, r3, lsl #3
 800db14:	00dd      	lsls	r5, r3, #3
 800db16:	42b2      	cmp	r2, r6
 800db18:	d80e      	bhi.n	800db38 <jpeg_core_output_dimensions+0x118>
      jdiv_round_up((long) cinfo->image_width * 7L, (long) cinfo->block_size);
 800db1a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 800db1e:	f009 fb4d 	bl	80171bc <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800db22:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 7L, (long) cinfo->block_size);
 800db24:	6a20      	ldr	r0, [r4, #32]
 800db26:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800db2a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 800db2e:	f009 fb45 	bl	80171bc <jdiv_round_up>
    cinfo->min_DCT_h_scaled_size = 7;
 800db32:	2307      	movs	r3, #7
    cinfo->output_height = (JDIMENSION)
 800db34:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 7;
 800db36:	e787      	b.n	800da48 <jpeg_core_output_dimensions+0x28>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 8) {
 800db38:	42aa      	cmp	r2, r5
 800db3a:	d80c      	bhi.n	800db56 <jpeg_core_output_dimensions+0x136>
      jdiv_round_up((long) cinfo->image_width * 8L, (long) cinfo->block_size);
 800db3c:	00c0      	lsls	r0, r0, #3
 800db3e:	f009 fb3d 	bl	80171bc <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800db42:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 8L, (long) cinfo->block_size);
 800db44:	6a20      	ldr	r0, [r4, #32]
 800db46:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800db4a:	00c0      	lsls	r0, r0, #3
 800db4c:	f009 fb36 	bl	80171bc <jdiv_round_up>
    cinfo->min_DCT_h_scaled_size = 8;
 800db50:	2308      	movs	r3, #8
    cinfo->output_height = (JDIMENSION)
 800db52:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 8;
 800db54:	e778      	b.n	800da48 <jpeg_core_output_dimensions+0x28>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 9) {
 800db56:	441d      	add	r5, r3
 800db58:	42aa      	cmp	r2, r5
 800db5a:	d80e      	bhi.n	800db7a <jpeg_core_output_dimensions+0x15a>
      jdiv_round_up((long) cinfo->image_width * 9L, (long) cinfo->block_size);
 800db5c:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 800db60:	f009 fb2c 	bl	80171bc <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800db64:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 9L, (long) cinfo->block_size);
 800db66:	6a20      	ldr	r0, [r4, #32]
 800db68:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800db6c:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 800db70:	f009 fb24 	bl	80171bc <jdiv_round_up>
    cinfo->min_DCT_h_scaled_size = 9;
 800db74:	2309      	movs	r3, #9
    cinfo->output_height = (JDIMENSION)
 800db76:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 9;
 800db78:	e766      	b.n	800da48 <jpeg_core_output_dimensions+0x28>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 10) {
 800db7a:	250a      	movs	r5, #10
 800db7c:	fb05 f603 	mul.w	r6, r5, r3
 800db80:	42b2      	cmp	r2, r6
 800db82:	d9b1      	bls.n	800dae8 <jpeg_core_output_dimensions+0xc8>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 11) {
 800db84:	250b      	movs	r5, #11
 800db86:	fb05 f603 	mul.w	r6, r5, r3
 800db8a:	42b2      	cmp	r2, r6
 800db8c:	d9ac      	bls.n	800dae8 <jpeg_core_output_dimensions+0xc8>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 12) {
 800db8e:	250c      	movs	r5, #12
 800db90:	fb05 f603 	mul.w	r6, r5, r3
 800db94:	42b2      	cmp	r2, r6
 800db96:	d9a7      	bls.n	800dae8 <jpeg_core_output_dimensions+0xc8>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 13) {
 800db98:	250d      	movs	r5, #13
 800db9a:	fb05 f603 	mul.w	r6, r5, r3
 800db9e:	42b2      	cmp	r2, r6
 800dba0:	d9a2      	bls.n	800dae8 <jpeg_core_output_dimensions+0xc8>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 14) {
 800dba2:	250e      	movs	r5, #14
 800dba4:	fb05 f603 	mul.w	r6, r5, r3
 800dba8:	42b2      	cmp	r2, r6
 800dbaa:	d99d      	bls.n	800dae8 <jpeg_core_output_dimensions+0xc8>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 15) {
 800dbac:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 800dbb0:	429a      	cmp	r2, r3
 800dbb2:	ea4f 1300 	mov.w	r3, r0, lsl #4
 800dbb6:	d80d      	bhi.n	800dbd4 <jpeg_core_output_dimensions+0x1b4>
      jdiv_round_up((long) cinfo->image_width * 15L, (long) cinfo->block_size);
 800dbb8:	1a18      	subs	r0, r3, r0
 800dbba:	f009 faff 	bl	80171bc <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800dbbe:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 15L, (long) cinfo->block_size);
 800dbc0:	6a20      	ldr	r0, [r4, #32]
 800dbc2:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800dbc6:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 800dbca:	f009 faf7 	bl	80171bc <jdiv_round_up>
    cinfo->min_DCT_h_scaled_size = 15;
 800dbce:	230f      	movs	r3, #15
    cinfo->output_height = (JDIMENSION)
 800dbd0:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 15;
 800dbd2:	e739      	b.n	800da48 <jpeg_core_output_dimensions+0x28>
      jdiv_round_up((long) cinfo->image_width * 16L, (long) cinfo->block_size);
 800dbd4:	4618      	mov	r0, r3
 800dbd6:	f009 faf1 	bl	80171bc <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800dbda:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 16L, (long) cinfo->block_size);
 800dbdc:	6a20      	ldr	r0, [r4, #32]
 800dbde:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800dbe2:	0100      	lsls	r0, r0, #4
 800dbe4:	f009 faea 	bl	80171bc <jdiv_round_up>
    cinfo->min_DCT_h_scaled_size = 16;
 800dbe8:	2310      	movs	r3, #16
    cinfo->output_height = (JDIMENSION)
 800dbea:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 16;
 800dbec:	e72c      	b.n	800da48 <jpeg_core_output_dimensions+0x28>
    compptr->DCT_h_scaled_size = cinfo->min_DCT_h_scaled_size;
 800dbee:	f8d4 0140 	ldr.w	r0, [r4, #320]	; 0x140
       ci++, compptr++) {
 800dbf2:	3201      	adds	r2, #1
 800dbf4:	3358      	adds	r3, #88	; 0x58
    compptr->DCT_h_scaled_size = cinfo->min_DCT_h_scaled_size;
 800dbf6:	f843 0c34 	str.w	r0, [r3, #-52]
    compptr->DCT_v_scaled_size = cinfo->min_DCT_v_scaled_size;
 800dbfa:	f8d4 0144 	ldr.w	r0, [r4, #324]	; 0x144
 800dbfe:	f843 0c30 	str.w	r0, [r3, #-48]
       ci++, compptr++) {
 800dc02:	e782      	b.n	800db0a <jpeg_core_output_dimensions+0xea>

0800dc04 <jinit_input_controller>:
{
  my_inputctl_ptr inputctl;

  /* Create subobject in permanent pool */
  inputctl = (my_inputctl_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 800dc04:	6843      	ldr	r3, [r0, #4]
 800dc06:	221c      	movs	r2, #28
 800dc08:	2100      	movs	r1, #0
 800dc0a:	681b      	ldr	r3, [r3, #0]
{
 800dc0c:	b510      	push	{r4, lr}
 800dc0e:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 800dc10:	4798      	blx	r3
				SIZEOF(my_input_controller));
  cinfo->inputctl = (struct jpeg_input_controller *) inputctl;
  /* Initialize method pointers */
  inputctl->pub.consume_input = consume_markers;
 800dc12:	4b08      	ldr	r3, [pc, #32]	; (800dc34 <jinit_input_controller+0x30>)
  cinfo->inputctl = (struct jpeg_input_controller *) inputctl;
 800dc14:	f8c4 01c8 	str.w	r0, [r4, #456]	; 0x1c8
  inputctl->pub.consume_input = consume_markers;
 800dc18:	6003      	str	r3, [r0, #0]
  inputctl->pub.reset_input_controller = reset_input_controller;
 800dc1a:	4b07      	ldr	r3, [pc, #28]	; (800dc38 <jinit_input_controller+0x34>)
 800dc1c:	6043      	str	r3, [r0, #4]
  inputctl->pub.start_input_pass = start_input_pass;
 800dc1e:	4b07      	ldr	r3, [pc, #28]	; (800dc3c <jinit_input_controller+0x38>)
 800dc20:	6083      	str	r3, [r0, #8]
  inputctl->pub.finish_input_pass = finish_input_pass;
 800dc22:	4b07      	ldr	r3, [pc, #28]	; (800dc40 <jinit_input_controller+0x3c>)
 800dc24:	60c3      	str	r3, [r0, #12]
  /* Initialize state: can't use reset_input_controller since we don't
   * want to try to reset other modules yet.
   */
  inputctl->pub.has_multiple_scans = FALSE; /* "unknown" would be better */
 800dc26:	2300      	movs	r3, #0
  inputctl->pub.eoi_reached = FALSE;
 800dc28:	e9c0 3304 	strd	r3, r3, [r0, #16]
  inputctl->inheaders = 1;
 800dc2c:	2301      	movs	r3, #1
 800dc2e:	6183      	str	r3, [r0, #24]
}
 800dc30:	bd10      	pop	{r4, pc}
 800dc32:	bf00      	nop
 800dc34:	0800d6f1 	.word	0x0800d6f1
 800dc38:	0800d539 	.word	0x0800d539
 800dc3c:	0800d569 	.word	0x0800d569
 800dc40:	0800d529 	.word	0x0800d529

0800dc44 <start_pass_main>:
 * Initialize for a processing pass.
 */

METHODDEF(void)
start_pass_main (j_decompress_ptr cinfo, J_BUF_MODE pass_mode)
{
 800dc44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_main_ptr main = (my_main_ptr) cinfo->main;
 800dc48:	f8d0 31bc 	ldr.w	r3, [r0, #444]	; 0x1bc
{
 800dc4c:	4602      	mov	r2, r0

  switch (pass_mode) {
 800dc4e:	b149      	cbz	r1, 800dc64 <start_pass_main+0x20>
 800dc50:	2902      	cmp	r1, #2
 800dc52:	d070      	beq.n	800dd36 <start_pass_main+0xf2>
    /* For last pass of 2-pass quantization, just crank the postprocessor */
    main->pub.process_data = process_data_crank_post;
    break;
#endif
  default:
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 800dc54:	6803      	ldr	r3, [r0, #0]
 800dc56:	2203      	movs	r2, #3
 800dc58:	615a      	str	r2, [r3, #20]
 800dc5a:	681b      	ldr	r3, [r3, #0]
    break;
  }
}
 800dc5c:	b003      	add	sp, #12
 800dc5e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 800dc62:	4718      	bx	r3
    if (cinfo->upsample->need_context_rows) {
 800dc64:	f8d0 01d8 	ldr.w	r0, [r0, #472]	; 0x1d8
 800dc68:	6880      	ldr	r0, [r0, #8]
 800dc6a:	2800      	cmp	r0, #0
 800dc6c:	d060      	beq.n	800dd30 <start_pass_main+0xec>
  int M = cinfo->min_DCT_v_scaled_size;
 800dc6e:	f8d2 7144 	ldr.w	r7, [r2, #324]	; 0x144
 800dc72:	f103 0e08 	add.w	lr, r3, #8
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800dc76:	f8d2 60d8 	ldr.w	r6, [r2, #216]	; 0xd8
 800dc7a:	6a52      	ldr	r2, [r2, #36]	; 0x24
      main->pub.process_data = process_data_context_main;
 800dc7c:	482f      	ldr	r0, [pc, #188]	; (800dd3c <start_pass_main+0xf8>)
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800dc7e:	9200      	str	r2, [sp, #0]
    for (i = 0; i < rgroup * (M + 2); i++) {
 800dc80:	1cba      	adds	r2, r7, #2
      main->pub.process_data = process_data_context_main;
 800dc82:	6058      	str	r0, [r3, #4]
    for (i = 0; i < rgroup * (M + 2); i++) {
 800dc84:	9201      	str	r2, [sp, #4]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800dc86:	9a00      	ldr	r2, [sp, #0]
 800dc88:	4291      	cmp	r1, r2
 800dc8a:	db09      	blt.n	800dca0 <start_pass_main+0x5c>
      main->whichptr = 0;	/* Read first iMCU row into xbuffer[0] */
 800dc8c:	2200      	movs	r2, #0
      main->context_state = CTX_PREPARE_FOR_IMCU;
 800dc8e:	e9c3 2210 	strd	r2, r2, [r3, #64]	; 0x40
      main->iMCU_row_ctr = 0;
 800dc92:	64da      	str	r2, [r3, #76]	; 0x4c
    main->buffer_full = FALSE;	/* Mark buffer empty */
 800dc94:	2200      	movs	r2, #0
    main->rowgroup_ctr = 0;
 800dc96:	e9c3 220c 	strd	r2, r2, [r3, #48]	; 0x30
}
 800dc9a:	b003      	add	sp, #12
 800dc9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800dca0:	6ab0      	ldr	r0, [r6, #40]	; 0x28
 800dca2:	68f2      	ldr	r2, [r6, #12]
    for (i = 0; i < rgroup * (M + 2); i++) {
 800dca4:	9d01      	ldr	r5, [sp, #4]
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800dca6:	4342      	muls	r2, r0
    xbuf0 = main->xbuffer[0][ci];
 800dca8:	6b98      	ldr	r0, [r3, #56]	; 0x38
    buf = main->buffer[ci];
 800dcaa:	f85e 4b04 	ldr.w	r4, [lr], #4
    xbuf0 = main->xbuffer[0][ci];
 800dcae:	f850 c021 	ldr.w	ip, [r0, r1, lsl #2]
    xbuf1 = main->xbuffer[1][ci];
 800dcb2:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800dcb4:	fb92 f2f7 	sdiv	r2, r2, r7
    xbuf1 = main->xbuffer[1][ci];
 800dcb8:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    for (i = 0; i < rgroup * (M + 2); i++) {
 800dcbc:	fb02 f905 	mul.w	r9, r2, r5
 800dcc0:	2500      	movs	r5, #0
 800dcc2:	454d      	cmp	r5, r9
 800dcc4:	db1c      	blt.n	800dd00 <start_pass_main+0xbc>
      xbuf1[rgroup*(M-2) + i] = buf[rgroup*M + i];
 800dcc6:	fb02 fb07 	mul.w	fp, r2, r7
 800dcca:	f06f 0501 	mvn.w	r5, #1
    for (i = 0; i < rgroup * 2; i++) {
 800dcce:	ea4f 0a42 	mov.w	sl, r2, lsl #1
      xbuf1[rgroup*(M-2) + i] = buf[rgroup*M + i];
 800dcd2:	fb05 b502 	mla	r5, r5, r2, fp
 800dcd6:	eb04 088b 	add.w	r8, r4, fp, lsl #2
 800dcda:	eb00 0985 	add.w	r9, r0, r5, lsl #2
 800dcde:	eb04 0585 	add.w	r5, r4, r5, lsl #2
    for (i = 0; i < rgroup * 2; i++) {
 800dce2:	2400      	movs	r4, #0
 800dce4:	eb00 008b 	add.w	r0, r0, fp, lsl #2
 800dce8:	4554      	cmp	r4, sl
 800dcea:	db11      	blt.n	800dd10 <start_pass_main+0xcc>
 800dcec:	f06f 0003 	mvn.w	r0, #3
    for (i = 0; i < rgroup; i++) {
 800dcf0:	2400      	movs	r4, #0
 800dcf2:	fb00 c502 	mla	r5, r0, r2, ip
 800dcf6:	42a2      	cmp	r2, r4
 800dcf8:	dc14      	bgt.n	800dd24 <start_pass_main+0xe0>
       ci++, compptr++) {
 800dcfa:	3101      	adds	r1, #1
 800dcfc:	3658      	adds	r6, #88	; 0x58
 800dcfe:	e7c2      	b.n	800dc86 <start_pass_main+0x42>
      xbuf0[i] = xbuf1[i] = buf[i];
 800dd00:	f854 8025 	ldr.w	r8, [r4, r5, lsl #2]
 800dd04:	f840 8025 	str.w	r8, [r0, r5, lsl #2]
 800dd08:	f84c 8025 	str.w	r8, [ip, r5, lsl #2]
    for (i = 0; i < rgroup * (M + 2); i++) {
 800dd0c:	3501      	adds	r5, #1
 800dd0e:	e7d8      	b.n	800dcc2 <start_pass_main+0x7e>
      xbuf1[rgroup*(M-2) + i] = buf[rgroup*M + i];
 800dd10:	f858 bb04 	ldr.w	fp, [r8], #4
    for (i = 0; i < rgroup * 2; i++) {
 800dd14:	3401      	adds	r4, #1
      xbuf1[rgroup*(M-2) + i] = buf[rgroup*M + i];
 800dd16:	f849 bb04 	str.w	fp, [r9], #4
      xbuf1[rgroup*M + i] = buf[rgroup*(M-2) + i];
 800dd1a:	f855 bb04 	ldr.w	fp, [r5], #4
 800dd1e:	f840 bb04 	str.w	fp, [r0], #4
    for (i = 0; i < rgroup * 2; i++) {
 800dd22:	e7e1      	b.n	800dce8 <start_pass_main+0xa4>
      xbuf0[i - rgroup] = xbuf0[0];
 800dd24:	f8dc 0000 	ldr.w	r0, [ip]
 800dd28:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
    for (i = 0; i < rgroup; i++) {
 800dd2c:	3401      	adds	r4, #1
 800dd2e:	e7e2      	b.n	800dcf6 <start_pass_main+0xb2>
      main->pub.process_data = process_data_simple_main;
 800dd30:	4a03      	ldr	r2, [pc, #12]	; (800dd40 <start_pass_main+0xfc>)
 800dd32:	605a      	str	r2, [r3, #4]
 800dd34:	e7ae      	b.n	800dc94 <start_pass_main+0x50>
    main->pub.process_data = process_data_crank_post;
 800dd36:	4a03      	ldr	r2, [pc, #12]	; (800dd44 <start_pass_main+0x100>)
 800dd38:	605a      	str	r2, [r3, #4]
    break;
 800dd3a:	e7ae      	b.n	800dc9a <start_pass_main+0x56>
 800dd3c:	0800dda1 	.word	0x0800dda1
 800dd40:	0800dd49 	.word	0x0800dd49
 800dd44:	0800df95 	.word	0x0800df95

0800dd48 <process_data_simple_main>:

METHODDEF(void)
process_data_simple_main (j_decompress_ptr cinfo,
			  JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
			  JDIMENSION out_rows_avail)
{
 800dd48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  my_main_ptr main = (my_main_ptr) cinfo->main;
 800dd4c:	f8d0 41bc 	ldr.w	r4, [r0, #444]	; 0x1bc
{
 800dd50:	4698      	mov	r8, r3
 800dd52:	460e      	mov	r6, r1
 800dd54:	b087      	sub	sp, #28
  JDIMENSION rowgroups_avail;

  /* Read input data if we haven't filled the main buffer yet */
  if (! main->buffer_full) {
 800dd56:	6b23      	ldr	r3, [r4, #48]	; 0x30
{
 800dd58:	4605      	mov	r5, r0
 800dd5a:	4617      	mov	r7, r2
    if (! (*cinfo->coef->decompress_data) (cinfo, main->buffer))
 800dd5c:	f104 0108 	add.w	r1, r4, #8
  if (! main->buffer_full) {
 800dd60:	b943      	cbnz	r3, 800dd74 <process_data_simple_main+0x2c>
    if (! (*cinfo->coef->decompress_data) (cinfo, main->buffer))
 800dd62:	f8d0 31c0 	ldr.w	r3, [r0, #448]	; 0x1c0
 800dd66:	9105      	str	r1, [sp, #20]
 800dd68:	68db      	ldr	r3, [r3, #12]
 800dd6a:	4798      	blx	r3
 800dd6c:	b1a8      	cbz	r0, 800dd9a <process_data_simple_main+0x52>
      return;			/* suspension forced, can do nothing more */
    main->buffer_full = TRUE;	/* OK, we have an iMCU row to work with */
 800dd6e:	2301      	movs	r3, #1
 800dd70:	9905      	ldr	r1, [sp, #20]
 800dd72:	6323      	str	r3, [r4, #48]	; 0x30
  }

  /* There are always min_DCT_scaled_size row groups in an iMCU row. */
  rowgroups_avail = (JDIMENSION) cinfo->min_DCT_v_scaled_size;
 800dd74:	f8d5 9144 	ldr.w	r9, [r5, #324]	; 0x144
   * to the postprocessor.  The postprocessor has to check for bottom
   * of image anyway (at row resolution), so no point in us doing it too.
   */

  /* Feed the postprocessor */
  (*cinfo->post->post_process_data) (cinfo, main->buffer,
 800dd78:	f104 0234 	add.w	r2, r4, #52	; 0x34
 800dd7c:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
 800dd80:	4628      	mov	r0, r5
 800dd82:	9600      	str	r6, [sp, #0]
 800dd84:	e9cd 7801 	strd	r7, r8, [sp, #4]
 800dd88:	685e      	ldr	r6, [r3, #4]
 800dd8a:	464b      	mov	r3, r9
 800dd8c:	47b0      	blx	r6
				     &main->rowgroup_ctr, rowgroups_avail,
				     output_buf, out_row_ctr, out_rows_avail);

  /* Has postprocessor consumed all the data yet? If so, mark buffer empty */
  if (main->rowgroup_ctr >= rowgroups_avail) {
 800dd8e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dd90:	454b      	cmp	r3, r9
    main->buffer_full = FALSE;
 800dd92:	bf24      	itt	cs
 800dd94:	2300      	movcs	r3, #0
    main->rowgroup_ctr = 0;
 800dd96:	e9c4 330c 	strdcs	r3, r3, [r4, #48]	; 0x30
  }
}
 800dd9a:	b007      	add	sp, #28
 800dd9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800dda0 <process_data_context_main>:

METHODDEF(void)
process_data_context_main (j_decompress_ptr cinfo,
			   JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
			   JDIMENSION out_rows_avail)
{
 800dda0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_main_ptr main = (my_main_ptr) cinfo->main;
 800dda4:	f8d0 41bc 	ldr.w	r4, [r0, #444]	; 0x1bc
{
 800dda8:	4698      	mov	r8, r3
 800ddaa:	b08b      	sub	sp, #44	; 0x2c
 800ddac:	4605      	mov	r5, r0

  /* Read input data if we haven't filled the main buffer yet */
  if (! main->buffer_full) {
 800ddae:	6b23      	ldr	r3, [r4, #48]	; 0x30
{
 800ddb0:	4689      	mov	r9, r1
 800ddb2:	4617      	mov	r7, r2
  if (! main->buffer_full) {
 800ddb4:	b973      	cbnz	r3, 800ddd4 <process_data_context_main+0x34>
    if (! (*cinfo->coef->decompress_data) (cinfo,
 800ddb6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ddb8:	f8d0 21c0 	ldr.w	r2, [r0, #448]	; 0x1c0
 800ddbc:	330e      	adds	r3, #14
 800ddbe:	68d2      	ldr	r2, [r2, #12]
 800ddc0:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 800ddc4:	4790      	blx	r2
 800ddc6:	2800      	cmp	r0, #0
 800ddc8:	d05a      	beq.n	800de80 <process_data_context_main+0xe0>
					   main->xbuffer[main->whichptr]))
      return;			/* suspension forced, can do nothing more */
    main->buffer_full = TRUE;	/* OK, we have an iMCU row to work with */
 800ddca:	2301      	movs	r3, #1
 800ddcc:	6323      	str	r3, [r4, #48]	; 0x30
    main->iMCU_row_ctr++;	/* count rows received */
 800ddce:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800ddd0:	3301      	adds	r3, #1
 800ddd2:	64e3      	str	r3, [r4, #76]	; 0x4c
  /* Postprocessor typically will not swallow all the input data it is handed
   * in one call (due to filling the output buffer first).  Must be prepared
   * to exit and restart.  This switch lets us keep track of how far we got.
   * Note that each case falls through to the next on successful completion.
   */
  switch (main->context_state) {
 800ddd4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ddd6:	2b01      	cmp	r3, #1
 800ddd8:	d011      	beq.n	800ddfe <process_data_context_main+0x5e>
 800ddda:	2b02      	cmp	r3, #2
 800dddc:	d036      	beq.n	800de4c <process_data_context_main+0xac>
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d14e      	bne.n	800de80 <process_data_context_main+0xe0>
      return;			/* Postprocessor exactly filled output buf */
    /*FALLTHROUGH*/
  case CTX_PREPARE_FOR_IMCU:
    /* Prepare to process first M-1 row groups of this iMCU row */
    main->rowgroup_ctr = 0;
    main->rowgroups_avail = (JDIMENSION) (cinfo->min_DCT_v_scaled_size - 1);
 800dde2:	f8d5 c144 	ldr.w	ip, [r5, #324]	; 0x144
    main->rowgroup_ctr = 0;
 800dde6:	2600      	movs	r6, #0
    /* Check for bottom of image: if so, tweak pointers to "duplicate"
     * the last sample row, and adjust rowgroups_avail to ignore padding rows.
     */
    if (main->iMCU_row_ctr == cinfo->total_iMCU_rows)
 800dde8:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    main->rowgroups_avail = (JDIMENSION) (cinfo->min_DCT_v_scaled_size - 1);
 800ddea:	f10c 33ff 	add.w	r3, ip, #4294967295
    main->rowgroup_ctr = 0;
 800ddee:	6366      	str	r6, [r4, #52]	; 0x34
    main->rowgroups_avail = (JDIMENSION) (cinfo->min_DCT_v_scaled_size - 1);
 800ddf0:	64a3      	str	r3, [r4, #72]	; 0x48
    if (main->iMCU_row_ctr == cinfo->total_iMCU_rows)
 800ddf2:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 800ddf6:	429a      	cmp	r2, r3
 800ddf8:	d045      	beq.n	800de86 <process_data_context_main+0xe6>
      set_bottom_pointers(cinfo);
    main->context_state = CTX_PROCESS_IMCU;
 800ddfa:	2301      	movs	r3, #1
 800ddfc:	6463      	str	r3, [r4, #68]	; 0x44
    /*FALLTHROUGH*/
  case CTX_PROCESS_IMCU:
    /* Call postprocessor using previously set pointers */
    (*cinfo->post->post_process_data) (cinfo, main->xbuffer[main->whichptr],
 800ddfe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800de00:	f104 0234 	add.w	r2, r4, #52	; 0x34
 800de04:	4628      	mov	r0, r5
 800de06:	f103 010e 	add.w	r1, r3, #14
 800de0a:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
 800de0e:	f8cd 9000 	str.w	r9, [sp]
 800de12:	e9cd 7801 	strd	r7, r8, [sp, #4]
 800de16:	685e      	ldr	r6, [r3, #4]
 800de18:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 800de1c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800de1e:	47b0      	blx	r6
			&main->rowgroup_ctr, main->rowgroups_avail,
			output_buf, out_row_ctr, out_rows_avail);
    if (main->rowgroup_ctr < main->rowgroups_avail)
 800de20:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800de22:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800de24:	429a      	cmp	r2, r3
 800de26:	d32b      	bcc.n	800de80 <process_data_context_main+0xe0>
      return;			/* Need to suspend */
    /* After the first iMCU, change wraparound pointers to normal state */
    if (main->iMCU_row_ctr == 1)
 800de28:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  int M = cinfo->min_DCT_v_scaled_size;
 800de2a:	f8d5 0144 	ldr.w	r0, [r5, #324]	; 0x144
    if (main->iMCU_row_ctr == 1)
 800de2e:	2b01      	cmp	r3, #1
 800de30:	d063      	beq.n	800defa <process_data_context_main+0x15a>
      set_wraparound_pointers(cinfo);
    /* Prepare to load new iMCU row using other xbuffer list */
    main->whichptr ^= 1;	/* 0=>1 or 1=>0 */
 800de32:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800de34:	f083 0301 	eor.w	r3, r3, #1
 800de38:	6423      	str	r3, [r4, #64]	; 0x40
    main->buffer_full = FALSE;
 800de3a:	2300      	movs	r3, #0
 800de3c:	6323      	str	r3, [r4, #48]	; 0x30
    /* Still need to process last row group of this iMCU row, */
    /* which is saved at index M+1 of the other xbuffer */
    main->rowgroup_ctr = (JDIMENSION) (cinfo->min_DCT_v_scaled_size + 1);
 800de3e:	1c43      	adds	r3, r0, #1
    main->rowgroups_avail = (JDIMENSION) (cinfo->min_DCT_v_scaled_size + 2);
 800de40:	3002      	adds	r0, #2
    main->rowgroup_ctr = (JDIMENSION) (cinfo->min_DCT_v_scaled_size + 1);
 800de42:	6363      	str	r3, [r4, #52]	; 0x34
    main->context_state = CTX_POSTPONED_ROW;
 800de44:	2302      	movs	r3, #2
    main->rowgroups_avail = (JDIMENSION) (cinfo->min_DCT_v_scaled_size + 2);
 800de46:	64a0      	str	r0, [r4, #72]	; 0x48
    main->context_state = CTX_POSTPONED_ROW;
 800de48:	6463      	str	r3, [r4, #68]	; 0x44
 800de4a:	e019      	b.n	800de80 <process_data_context_main+0xe0>
    (*cinfo->post->post_process_data) (cinfo, main->xbuffer[main->whichptr],
 800de4c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800de4e:	f104 0234 	add.w	r2, r4, #52	; 0x34
 800de52:	4628      	mov	r0, r5
 800de54:	f103 010e 	add.w	r1, r3, #14
 800de58:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
 800de5c:	f8cd 9000 	str.w	r9, [sp]
 800de60:	e9cd 7801 	strd	r7, r8, [sp, #4]
 800de64:	685e      	ldr	r6, [r3, #4]
 800de66:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 800de6a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800de6c:	47b0      	blx	r6
    if (main->rowgroup_ctr < main->rowgroups_avail)
 800de6e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800de70:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800de72:	429a      	cmp	r2, r3
 800de74:	d304      	bcc.n	800de80 <process_data_context_main+0xe0>
    main->context_state = CTX_PREPARE_FOR_IMCU;
 800de76:	2300      	movs	r3, #0
 800de78:	6463      	str	r3, [r4, #68]	; 0x44
    if (*out_row_ctr >= out_rows_avail)
 800de7a:	683b      	ldr	r3, [r7, #0]
 800de7c:	4543      	cmp	r3, r8
 800de7e:	d3b0      	bcc.n	800dde2 <process_data_context_main+0x42>
  }
}
 800de80:	b00b      	add	sp, #44	; 0x2c
 800de82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800de86:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      xbuf[rows_left + i] = xbuf[rows_left-1];
 800de88:	f06f 4e40 	mvn.w	lr, #3221225472	; 0xc0000000
  my_main_ptr main = (my_main_ptr) cinfo->main;
 800de8c:	f8d5 11bc 	ldr.w	r1, [r5, #444]	; 0x1bc
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800de90:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
 800de94:	9206      	str	r2, [sp, #24]
 800de96:	9a06      	ldr	r2, [sp, #24]
 800de98:	4296      	cmp	r6, r2
 800de9a:	daae      	bge.n	800ddfa <process_data_context_main+0x5a>
    iMCUheight = compptr->v_samp_factor * compptr->DCT_v_scaled_size;
 800de9c:	68d8      	ldr	r0, [r3, #12]
 800de9e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dea0:	4342      	muls	r2, r0
    rows_left = (int) (compptr->downsampled_height % (JDIMENSION) iMCUheight);
 800dea2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800dea4:	fbb0 fbf2 	udiv	fp, r0, r2
 800dea8:	fb02 001b 	mls	r0, r2, fp, r0
    rgroup = iMCUheight / cinfo->min_DCT_v_scaled_size;
 800deac:	fb92 fafc 	sdiv	sl, r2, ip
    if (rows_left == 0) rows_left = iMCUheight;
 800deb0:	2800      	cmp	r0, #0
 800deb2:	bf08      	it	eq
 800deb4:	4610      	moveq	r0, r2
    if (ci == 0) {
 800deb6:	b926      	cbnz	r6, 800dec2 <process_data_context_main+0x122>
      main->rowgroups_avail = (JDIMENSION) ((rows_left-1) / rgroup + 1);
 800deb8:	1e42      	subs	r2, r0, #1
 800deba:	fb92 f2fa 	sdiv	r2, r2, sl
 800debe:	3201      	adds	r2, #1
 800dec0:	648a      	str	r2, [r1, #72]	; 0x48
    xbuf = main->xbuffer[main->whichptr][ci];
 800dec2:	6c0a      	ldr	r2, [r1, #64]	; 0x40
      xbuf[rows_left + i] = xbuf[rows_left-1];
 800dec4:	4470      	add	r0, lr
    for (i = 0; i < rgroup * 2; i++) {
 800dec6:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
    xbuf = main->xbuffer[main->whichptr][ci];
 800deca:	320e      	adds	r2, #14
 800decc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800ded0:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
      xbuf[rows_left + i] = xbuf[rows_left-1];
 800ded4:	eb02 0b80 	add.w	fp, r2, r0, lsl #2
    for (i = 0; i < rgroup * 2; i++) {
 800ded8:	2200      	movs	r2, #0
 800deda:	4658      	mov	r0, fp
 800dedc:	3004      	adds	r0, #4
 800dede:	9205      	str	r2, [sp, #20]
 800dee0:	9a05      	ldr	r2, [sp, #20]
 800dee2:	4552      	cmp	r2, sl
 800dee4:	db02      	blt.n	800deec <process_data_context_main+0x14c>
       ci++, compptr++) {
 800dee6:	3601      	adds	r6, #1
 800dee8:	3358      	adds	r3, #88	; 0x58
 800deea:	e7d4      	b.n	800de96 <process_data_context_main+0xf6>
      xbuf[rows_left + i] = xbuf[rows_left-1];
 800deec:	f8db 2000 	ldr.w	r2, [fp]
 800def0:	f840 2b04 	str.w	r2, [r0], #4
    for (i = 0; i < rgroup * 2; i++) {
 800def4:	9a05      	ldr	r2, [sp, #20]
 800def6:	3201      	adds	r2, #1
 800def8:	e7f1      	b.n	800dede <process_data_context_main+0x13e>
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800defa:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
  my_main_ptr main = (my_main_ptr) cinfo->main;
 800defe:	f8d5 81bc 	ldr.w	r8, [r5, #444]	; 0x1bc
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800df02:	9305      	str	r3, [sp, #20]
 800df04:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800df06:	2500      	movs	r5, #0
 800df08:	9308      	str	r3, [sp, #32]
    main->rowgroup_ctr = (JDIMENSION) (cinfo->min_DCT_v_scaled_size + 1);
 800df0a:	1c43      	adds	r3, r0, #1
 800df0c:	9307      	str	r3, [sp, #28]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800df0e:	9b08      	ldr	r3, [sp, #32]
 800df10:	429d      	cmp	r5, r3
 800df12:	da8e      	bge.n	800de32 <process_data_context_main+0x92>
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800df14:	9b05      	ldr	r3, [sp, #20]
 800df16:	68da      	ldr	r2, [r3, #12]
 800df18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df1a:	435a      	muls	r2, r3
    xbuf0 = main->xbuffer[0][ci];
 800df1c:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800df20:	fb92 f2f0 	sdiv	r2, r2, r0
    xbuf0 = main->xbuffer[0][ci];
 800df24:	f853 7025 	ldr.w	r7, [r3, r5, lsl #2]
    xbuf1 = main->xbuffer[1][ci];
 800df28:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 800df2c:	f853 c025 	ldr.w	ip, [r3, r5, lsl #2]
      xbuf0[i - rgroup] = xbuf0[rgroup*(M+1) + i];
 800df30:	9b07      	ldr	r3, [sp, #28]
 800df32:	4353      	muls	r3, r2
 800df34:	eb07 0183 	add.w	r1, r7, r3, lsl #2
 800df38:	eb0c 0a83 	add.w	sl, ip, r3, lsl #2
      xbuf0[rgroup*(M+2) + i] = xbuf0[i];
 800df3c:	4413      	add	r3, r2
 800df3e:	9106      	str	r1, [sp, #24]
    for (i = 0; i < rgroup; i++) {
 800df40:	2100      	movs	r1, #0
 800df42:	eb07 0983 	add.w	r9, r7, r3, lsl #2
 800df46:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 800df4a:	461e      	mov	r6, r3
 800df4c:	f06f 0303 	mvn.w	r3, #3
 800df50:	fb03 fe02 	mul.w	lr, r3, r2
 800df54:	eb07 030e 	add.w	r3, r7, lr
 800df58:	44e6      	add	lr, ip
 800df5a:	9309      	str	r3, [sp, #36]	; 0x24
 800df5c:	428a      	cmp	r2, r1
 800df5e:	dc04      	bgt.n	800df6a <process_data_context_main+0x1ca>
       ci++, compptr++) {
 800df60:	9b05      	ldr	r3, [sp, #20]
 800df62:	3501      	adds	r5, #1
 800df64:	3358      	adds	r3, #88	; 0x58
 800df66:	9305      	str	r3, [sp, #20]
 800df68:	e7d1      	b.n	800df0e <process_data_context_main+0x16e>
      xbuf0[i - rgroup] = xbuf0[rgroup*(M+1) + i];
 800df6a:	9b06      	ldr	r3, [sp, #24]
 800df6c:	f853 bb04 	ldr.w	fp, [r3], #4
 800df70:	9306      	str	r3, [sp, #24]
 800df72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df74:	f843 b021 	str.w	fp, [r3, r1, lsl #2]
      xbuf1[i - rgroup] = xbuf1[rgroup*(M+1) + i];
 800df78:	f85a bb04 	ldr.w	fp, [sl], #4
 800df7c:	f84e b021 	str.w	fp, [lr, r1, lsl #2]
      xbuf0[rgroup*(M+2) + i] = xbuf0[i];
 800df80:	f857 3021 	ldr.w	r3, [r7, r1, lsl #2]
 800df84:	f849 3b04 	str.w	r3, [r9], #4
      xbuf1[rgroup*(M+2) + i] = xbuf1[i];
 800df88:	f85c 3021 	ldr.w	r3, [ip, r1, lsl #2]
    for (i = 0; i < rgroup; i++) {
 800df8c:	3101      	adds	r1, #1
      xbuf1[rgroup*(M+2) + i] = xbuf1[i];
 800df8e:	f846 3b04 	str.w	r3, [r6], #4
    for (i = 0; i < rgroup; i++) {
 800df92:	e7e3      	b.n	800df5c <process_data_context_main+0x1bc>

0800df94 <process_data_crank_post>:

METHODDEF(void)
process_data_crank_post (j_decompress_ptr cinfo,
			 JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
			 JDIMENSION out_rows_avail)
{
 800df94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  (*cinfo->post->post_process_data) (cinfo, (JSAMPIMAGE) NULL,
 800df96:	f8d0 41c4 	ldr.w	r4, [r0, #452]	; 0x1c4
 800df9a:	9100      	str	r1, [sp, #0]
 800df9c:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800dfa0:	2300      	movs	r3, #0
 800dfa2:	6864      	ldr	r4, [r4, #4]
 800dfa4:	461a      	mov	r2, r3
 800dfa6:	4619      	mov	r1, r3
 800dfa8:	47a0      	blx	r4
				     (JDIMENSION *) NULL, (JDIMENSION) 0,
				     output_buf, out_row_ctr, out_rows_avail);
}
 800dfaa:	b004      	add	sp, #16
 800dfac:	bd10      	pop	{r4, pc}
	...

0800dfb0 <jinit_d_main_controller>:
 * Initialize main buffer controller.
 */

GLOBAL(void)
jinit_d_main_controller (j_decompress_ptr cinfo, boolean need_full_buffer)
{
 800dfb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_main_ptr main;
  int ci, rgroup, ngroups;
  jpeg_component_info *compptr;

  main = (my_main_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800dfb4:	6843      	ldr	r3, [r0, #4]
{
 800dfb6:	460d      	mov	r5, r1
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800dfb8:	2250      	movs	r2, #80	; 0x50
 800dfba:	2101      	movs	r1, #1
 800dfbc:	681b      	ldr	r3, [r3, #0]
{
 800dfbe:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800dfc0:	4798      	blx	r3
				SIZEOF(my_main_controller));
  cinfo->main = (struct jpeg_d_main_controller *) main;
  main->pub.start_pass = start_pass_main;
 800dfc2:	4b3a      	ldr	r3, [pc, #232]	; (800e0ac <jinit_d_main_controller+0xfc>)
  cinfo->main = (struct jpeg_d_main_controller *) main;
 800dfc4:	f8c4 01bc 	str.w	r0, [r4, #444]	; 0x1bc
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800dfc8:	4606      	mov	r6, r0
  main->pub.start_pass = start_pass_main;
 800dfca:	6003      	str	r3, [r0, #0]

  if (need_full_buffer)		/* shouldn't happen */
 800dfcc:	b12d      	cbz	r5, 800dfda <jinit_d_main_controller+0x2a>
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 800dfce:	6823      	ldr	r3, [r4, #0]
 800dfd0:	2203      	movs	r2, #3
 800dfd2:	4620      	mov	r0, r4
 800dfd4:	615a      	str	r2, [r3, #20]
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	4798      	blx	r3

  /* Allocate the workspace.
   * ngroups is the number of row groups we need.
   */
  if (cinfo->upsample->need_context_rows) {
 800dfda:	f8d4 31d8 	ldr.w	r3, [r4, #472]	; 0x1d8
    if (cinfo->min_DCT_v_scaled_size < 2) /* unsupported, see comments above */
 800dfde:	f8d4 5144 	ldr.w	r5, [r4, #324]	; 0x144
  if (cinfo->upsample->need_context_rows) {
 800dfe2:	689b      	ldr	r3, [r3, #8]
 800dfe4:	b31b      	cbz	r3, 800e02e <jinit_d_main_controller+0x7e>
    if (cinfo->min_DCT_v_scaled_size < 2) /* unsupported, see comments above */
 800dfe6:	2d01      	cmp	r5, #1
 800dfe8:	dc05      	bgt.n	800dff6 <jinit_d_main_controller+0x46>
      ERREXIT(cinfo, JERR_NOTIMPL);
 800dfea:	6823      	ldr	r3, [r4, #0]
 800dfec:	2230      	movs	r2, #48	; 0x30
 800dfee:	4620      	mov	r0, r4
 800dff0:	615a      	str	r2, [r3, #20]
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	4798      	blx	r3
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800dff6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800dff8:	2101      	movs	r1, #1
 800dffa:	6863      	ldr	r3, [r4, #4]
 800dffc:	4620      	mov	r0, r4
 800dffe:	00d2      	lsls	r2, r2, #3
  my_main_ptr main = (my_main_ptr) cinfo->main;
 800e000:	f8d4 71bc 	ldr.w	r7, [r4, #444]	; 0x1bc
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800e004:	681b      	ldr	r3, [r3, #0]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800e006:	f04f 0800 	mov.w	r8, #0
  int M = cinfo->min_DCT_v_scaled_size;
 800e00a:	f8d4 9144 	ldr.w	r9, [r4, #324]	; 0x144
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800e00e:	4798      	blx	r3
  main->xbuffer[1] = main->xbuffer[0] + cinfo->num_components;
 800e010:	6a63      	ldr	r3, [r4, #36]	; 0x24
  main->xbuffer[0] = (JSAMPIMAGE)
 800e012:	63b8      	str	r0, [r7, #56]	; 0x38
				  2 * (rgroup * (M + 4)) * SIZEOF(JSAMPROW));
 800e014:	f109 0904 	add.w	r9, r9, #4
  main->xbuffer[1] = main->xbuffer[0] + cinfo->num_components;
 800e018:	eb00 0083 	add.w	r0, r0, r3, lsl #2
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800e01c:	f8d4 50d8 	ldr.w	r5, [r4, #216]	; 0xd8
  main->xbuffer[1] = main->xbuffer[0] + cinfo->num_components;
 800e020:	63f8      	str	r0, [r7, #60]	; 0x3c
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800e022:	6a63      	ldr	r3, [r4, #36]	; 0x24
      cinfo->min_DCT_v_scaled_size; /* height of a row group of component */
 800e024:	f8d4 0144 	ldr.w	r0, [r4, #324]	; 0x144
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800e028:	4598      	cmp	r8, r3
 800e02a:	db0a      	blt.n	800e042 <jinit_d_main_controller+0x92>
    alloc_funny_pointers(cinfo); /* Alloc space for xbuffer[] lists */
    ngroups = cinfo->min_DCT_v_scaled_size + 2;
 800e02c:	1c85      	adds	r5, r0, #2
  } else {
    ngroups = cinfo->min_DCT_v_scaled_size;
  }

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800e02e:	f8d4 70d8 	ldr.w	r7, [r4, #216]	; 0xd8
 800e032:	3608      	adds	r6, #8
 800e034:	f04f 0800 	mov.w	r8, #0
 800e038:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e03a:	4543      	cmp	r3, r8
 800e03c:	dc1d      	bgt.n	800e07a <jinit_d_main_controller+0xca>
    main->buffer[ci] = (*cinfo->mem->alloc_sarray)
			((j_common_ptr) cinfo, JPOOL_IMAGE,
			 compptr->width_in_blocks * compptr->DCT_h_scaled_size,
			 (JDIMENSION) (rgroup * ngroups));
  }
}
 800e03e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800e042:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800e044:	2101      	movs	r1, #1
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800e046:	68eb      	ldr	r3, [r5, #12]
       ci++, compptr++) {
 800e048:	3558      	adds	r5, #88	; 0x58
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800e04a:	4353      	muls	r3, r2
 800e04c:	fb93 fbf0 	sdiv	fp, r3, r0
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800e050:	6863      	ldr	r3, [r4, #4]
				  2 * (rgroup * (M + 4)) * SIZEOF(JSAMPROW));
 800e052:	fb0b fa09 	mul.w	sl, fp, r9
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800e056:	4620      	mov	r0, r4
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e05e:	4798      	blx	r3
    main->xbuffer[0][ci] = xbuf;
 800e060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    xbuf += rgroup;		/* want one row group at negative offsets */
 800e062:	eb00 008b 	add.w	r0, r0, fp, lsl #2
    main->xbuffer[0][ci] = xbuf;
 800e066:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
    xbuf += rgroup * (M + 4);
 800e06a:	eb00 008a 	add.w	r0, r0, sl, lsl #2
    main->xbuffer[1][ci] = xbuf;
 800e06e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e070:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
       ci++, compptr++) {
 800e074:	f108 0801 	add.w	r8, r8, #1
 800e078:	e7d3      	b.n	800e022 <jinit_d_main_controller+0x72>
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800e07a:	6aba      	ldr	r2, [r7, #40]	; 0x28
       ci++, compptr++) {
 800e07c:	f108 0801 	add.w	r8, r8, #1
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800e080:	68fb      	ldr	r3, [r7, #12]
       ci++, compptr++) {
 800e082:	3758      	adds	r7, #88	; 0x58
    main->buffer[ci] = (*cinfo->mem->alloc_sarray)
 800e084:	f857 1c34 	ldr.w	r1, [r7, #-52]
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800e088:	4353      	muls	r3, r2
 800e08a:	f8d4 2144 	ldr.w	r2, [r4, #324]	; 0x144
    main->buffer[ci] = (*cinfo->mem->alloc_sarray)
 800e08e:	6860      	ldr	r0, [r4, #4]
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800e090:	fb93 f3f2 	sdiv	r3, r3, r2
    main->buffer[ci] = (*cinfo->mem->alloc_sarray)
 800e094:	f857 2c3c 	ldr.w	r2, [r7, #-60]
 800e098:	436b      	muls	r3, r5
 800e09a:	f8d0 9008 	ldr.w	r9, [r0, #8]
 800e09e:	4620      	mov	r0, r4
 800e0a0:	434a      	muls	r2, r1
 800e0a2:	2101      	movs	r1, #1
 800e0a4:	47c8      	blx	r9
 800e0a6:	f846 0b04 	str.w	r0, [r6], #4
       ci++, compptr++) {
 800e0aa:	e7c5      	b.n	800e038 <jinit_d_main_controller+0x88>
 800e0ac:	0800dc45 	.word	0x0800dc45

0800e0b0 <get_sof>:

LOCAL(boolean)
get_sof (j_decompress_ptr cinfo, boolean is_baseline, boolean is_prog,
	 boolean is_arith)
/* Process a SOFn marker */
{
 800e0b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  INT32 length;
  int c, ci;
  jpeg_component_info * compptr;
  INPUT_VARS(cinfo);
 800e0b4:	6986      	ldr	r6, [r0, #24]
{
 800e0b6:	4604      	mov	r4, r0
  INPUT_VARS(cinfo);
 800e0b8:	e9d6 c500 	ldrd	ip, r5, [r6]

  cinfo->is_baseline = is_baseline;
  cinfo->progressive_mode = is_prog;
 800e0bc:	e9c0 1237 	strd	r1, r2, [r0, #220]	; 0xdc
  cinfo->arith_code = is_arith;
 800e0c0:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4

  INPUT_2BYTES(cinfo, length, return FALSE);
 800e0c4:	b93d      	cbnz	r5, 800e0d6 <get_sof+0x26>
 800e0c6:	68f3      	ldr	r3, [r6, #12]
 800e0c8:	4798      	blx	r3
 800e0ca:	b910      	cbnz	r0, 800e0d2 <get_sof+0x22>
 800e0cc:	2000      	movs	r0, #0

  cinfo->marker->saw_SOF = TRUE;

  INPUT_SYNC(cinfo);
  return TRUE;
}
 800e0ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e0d2:	e9d6 c500 	ldrd	ip, r5, [r6]
 800e0d6:	1e6b      	subs	r3, r5, #1
 800e0d8:	f89c 7000 	ldrb.w	r7, [ip]
 800e0dc:	f000 8088 	beq.w	800e1f0 <get_sof+0x140>
 800e0e0:	f10c 0501 	add.w	r5, ip, #1
  INPUT_BYTE(cinfo, cinfo->data_precision, return FALSE);
 800e0e4:	3b01      	subs	r3, #1
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e0e6:	f895 8000 	ldrb.w	r8, [r5]
  INPUT_BYTE(cinfo, cinfo->data_precision, return FALSE);
 800e0ea:	f000 808a 	beq.w	800e202 <get_sof+0x152>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e0ee:	3501      	adds	r5, #1
  INPUT_BYTE(cinfo, cinfo->data_precision, return FALSE);
 800e0f0:	782a      	ldrb	r2, [r5, #0]
  INPUT_2BYTES(cinfo, cinfo->image_height, return FALSE);
 800e0f2:	3b01      	subs	r3, #1
  INPUT_BYTE(cinfo, cinfo->data_precision, return FALSE);
 800e0f4:	f8c4 20d4 	str.w	r2, [r4, #212]	; 0xd4
  INPUT_2BYTES(cinfo, cinfo->image_height, return FALSE);
 800e0f8:	f000 808c 	beq.w	800e214 <get_sof+0x164>
  INPUT_BYTE(cinfo, cinfo->data_precision, return FALSE);
 800e0fc:	3501      	adds	r5, #1
  INPUT_2BYTES(cinfo, cinfo->image_height, return FALSE);
 800e0fe:	782a      	ldrb	r2, [r5, #0]
 800e100:	3b01      	subs	r3, #1
 800e102:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800e106:	6222      	str	r2, [r4, #32]
 800e108:	f000 808d 	beq.w	800e226 <get_sof+0x176>
 800e10c:	3501      	adds	r5, #1
 800e10e:	7829      	ldrb	r1, [r5, #0]
  INPUT_2BYTES(cinfo, cinfo->image_width, return FALSE);
 800e110:	3b01      	subs	r3, #1
  INPUT_2BYTES(cinfo, cinfo->image_height, return FALSE);
 800e112:	6a22      	ldr	r2, [r4, #32]
 800e114:	440a      	add	r2, r1
 800e116:	6222      	str	r2, [r4, #32]
  INPUT_2BYTES(cinfo, cinfo->image_width, return FALSE);
 800e118:	f000 808e 	beq.w	800e238 <get_sof+0x188>
  INPUT_2BYTES(cinfo, cinfo->image_height, return FALSE);
 800e11c:	3501      	adds	r5, #1
  INPUT_2BYTES(cinfo, cinfo->image_width, return FALSE);
 800e11e:	782a      	ldrb	r2, [r5, #0]
 800e120:	3b01      	subs	r3, #1
 800e122:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800e126:	61e2      	str	r2, [r4, #28]
 800e128:	f000 808f 	beq.w	800e24a <get_sof+0x19a>
 800e12c:	3501      	adds	r5, #1
 800e12e:	7829      	ldrb	r1, [r5, #0]
  INPUT_BYTE(cinfo, cinfo->num_components, return FALSE);
 800e130:	3b01      	subs	r3, #1
  INPUT_2BYTES(cinfo, cinfo->image_width, return FALSE);
 800e132:	69e2      	ldr	r2, [r4, #28]
 800e134:	440a      	add	r2, r1
 800e136:	61e2      	str	r2, [r4, #28]
  INPUT_BYTE(cinfo, cinfo->num_components, return FALSE);
 800e138:	f000 8090 	beq.w	800e25c <get_sof+0x1ac>
  INPUT_2BYTES(cinfo, cinfo->image_width, return FALSE);
 800e13c:	3501      	adds	r5, #1
  INPUT_BYTE(cinfo, cinfo->num_components, return FALSE);
 800e13e:	f103 39ff 	add.w	r9, r3, #4294967295
 800e142:	f815 3b01 	ldrb.w	r3, [r5], #1
  TRACEMS4(cinfo, 1, JTRC_SOF, cinfo->unread_marker,
 800e146:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
 800e14a:	2101      	movs	r1, #1
  INPUT_BYTE(cinfo, cinfo->num_components, return FALSE);
 800e14c:	6263      	str	r3, [r4, #36]	; 0x24
  TRACEMS4(cinfo, 1, JTRC_SOF, cinfo->unread_marker,
 800e14e:	4620      	mov	r0, r4
 800e150:	6823      	ldr	r3, [r4, #0]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e152:	eb08 2807 	add.w	r8, r8, r7, lsl #8
  TRACEMS4(cinfo, 1, JTRC_SOF, cinfo->unread_marker,
 800e156:	619a      	str	r2, [r3, #24]
  length -= 8;
 800e158:	f1a8 0808 	sub.w	r8, r8, #8
  TRACEMS4(cinfo, 1, JTRC_SOF, cinfo->unread_marker,
 800e15c:	69e2      	ldr	r2, [r4, #28]
 800e15e:	61da      	str	r2, [r3, #28]
 800e160:	6a22      	ldr	r2, [r4, #32]
 800e162:	621a      	str	r2, [r3, #32]
 800e164:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800e166:	625a      	str	r2, [r3, #36]	; 0x24
 800e168:	2266      	movs	r2, #102	; 0x66
 800e16a:	615a      	str	r2, [r3, #20]
 800e16c:	685b      	ldr	r3, [r3, #4]
 800e16e:	4798      	blx	r3
  if (cinfo->marker->saw_SOF)
 800e170:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800e174:	691b      	ldr	r3, [r3, #16]
 800e176:	b12b      	cbz	r3, 800e184 <get_sof+0xd4>
    ERREXIT(cinfo, JERR_SOF_DUPLICATE);
 800e178:	6823      	ldr	r3, [r4, #0]
 800e17a:	223c      	movs	r2, #60	; 0x3c
 800e17c:	4620      	mov	r0, r4
 800e17e:	615a      	str	r2, [r3, #20]
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	4798      	blx	r3
  if (cinfo->image_height <= 0 || cinfo->image_width <= 0
 800e184:	6a23      	ldr	r3, [r4, #32]
 800e186:	b123      	cbz	r3, 800e192 <get_sof+0xe2>
 800e188:	69e3      	ldr	r3, [r4, #28]
 800e18a:	b113      	cbz	r3, 800e192 <get_sof+0xe2>
      || cinfo->num_components <= 0)
 800e18c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e18e:	2b00      	cmp	r3, #0
 800e190:	dc05      	bgt.n	800e19e <get_sof+0xee>
    ERREXIT(cinfo, JERR_EMPTY_IMAGE);
 800e192:	6823      	ldr	r3, [r4, #0]
 800e194:	2221      	movs	r2, #33	; 0x21
 800e196:	4620      	mov	r0, r4
 800e198:	615a      	str	r2, [r3, #20]
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	4798      	blx	r3
  if (length != (cinfo->num_components * 3))
 800e19e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e1a0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e1a4:	4543      	cmp	r3, r8
 800e1a6:	d005      	beq.n	800e1b4 <get_sof+0x104>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 800e1a8:	6823      	ldr	r3, [r4, #0]
 800e1aa:	220c      	movs	r2, #12
 800e1ac:	4620      	mov	r0, r4
 800e1ae:	615a      	str	r2, [r3, #20]
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	4798      	blx	r3
  if (cinfo->comp_info == NULL)	/* do only once, even if suspend */
 800e1b4:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 800e1b8:	b94b      	cbnz	r3, 800e1ce <get_sof+0x11e>
    cinfo->comp_info = (jpeg_component_info *) (*cinfo->mem->alloc_small)
 800e1ba:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800e1bc:	2158      	movs	r1, #88	; 0x58
 800e1be:	6863      	ldr	r3, [r4, #4]
 800e1c0:	4620      	mov	r0, r4
 800e1c2:	434a      	muls	r2, r1
 800e1c4:	2101      	movs	r1, #1
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	4798      	blx	r3
 800e1ca:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800e1ce:	f8d4 70d8 	ldr.w	r7, [r4, #216]	; 0xd8
 800e1d2:	f04f 0800 	mov.w	r8, #0
    TRACEMS4(cinfo, 1, JTRC_SOF_COMPONENT,
 800e1d6:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800e1da:	3758      	adds	r7, #88	; 0x58
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800e1dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e1de:	4543      	cmp	r3, r8
 800e1e0:	dc45      	bgt.n	800e26e <get_sof+0x1be>
  cinfo->marker->saw_SOF = TRUE;
 800e1e2:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800e1e6:	2001      	movs	r0, #1
 800e1e8:	6118      	str	r0, [r3, #16]
  INPUT_SYNC(cinfo);
 800e1ea:	e9c6 5900 	strd	r5, r9, [r6]
  return TRUE;
 800e1ee:	e76e      	b.n	800e0ce <get_sof+0x1e>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e1f0:	68f3      	ldr	r3, [r6, #12]
 800e1f2:	4620      	mov	r0, r4
 800e1f4:	4798      	blx	r3
 800e1f6:	2800      	cmp	r0, #0
 800e1f8:	f43f af68 	beq.w	800e0cc <get_sof+0x1c>
 800e1fc:	e9d6 5300 	ldrd	r5, r3, [r6]
 800e200:	e770      	b.n	800e0e4 <get_sof+0x34>
  INPUT_BYTE(cinfo, cinfo->data_precision, return FALSE);
 800e202:	68f3      	ldr	r3, [r6, #12]
 800e204:	4620      	mov	r0, r4
 800e206:	4798      	blx	r3
 800e208:	2800      	cmp	r0, #0
 800e20a:	f43f af5f 	beq.w	800e0cc <get_sof+0x1c>
 800e20e:	e9d6 5300 	ldrd	r5, r3, [r6]
 800e212:	e76d      	b.n	800e0f0 <get_sof+0x40>
  INPUT_2BYTES(cinfo, cinfo->image_height, return FALSE);
 800e214:	68f3      	ldr	r3, [r6, #12]
 800e216:	4620      	mov	r0, r4
 800e218:	4798      	blx	r3
 800e21a:	2800      	cmp	r0, #0
 800e21c:	f43f af56 	beq.w	800e0cc <get_sof+0x1c>
 800e220:	e9d6 5300 	ldrd	r5, r3, [r6]
 800e224:	e76b      	b.n	800e0fe <get_sof+0x4e>
 800e226:	68f3      	ldr	r3, [r6, #12]
 800e228:	4620      	mov	r0, r4
 800e22a:	4798      	blx	r3
 800e22c:	2800      	cmp	r0, #0
 800e22e:	f43f af4d 	beq.w	800e0cc <get_sof+0x1c>
 800e232:	e9d6 5300 	ldrd	r5, r3, [r6]
 800e236:	e76a      	b.n	800e10e <get_sof+0x5e>
  INPUT_2BYTES(cinfo, cinfo->image_width, return FALSE);
 800e238:	68f3      	ldr	r3, [r6, #12]
 800e23a:	4620      	mov	r0, r4
 800e23c:	4798      	blx	r3
 800e23e:	2800      	cmp	r0, #0
 800e240:	f43f af44 	beq.w	800e0cc <get_sof+0x1c>
 800e244:	e9d6 5300 	ldrd	r5, r3, [r6]
 800e248:	e769      	b.n	800e11e <get_sof+0x6e>
 800e24a:	68f3      	ldr	r3, [r6, #12]
 800e24c:	4620      	mov	r0, r4
 800e24e:	4798      	blx	r3
 800e250:	2800      	cmp	r0, #0
 800e252:	f43f af3b 	beq.w	800e0cc <get_sof+0x1c>
 800e256:	e9d6 5300 	ldrd	r5, r3, [r6]
 800e25a:	e768      	b.n	800e12e <get_sof+0x7e>
  INPUT_BYTE(cinfo, cinfo->num_components, return FALSE);
 800e25c:	68f3      	ldr	r3, [r6, #12]
 800e25e:	4620      	mov	r0, r4
 800e260:	4798      	blx	r3
 800e262:	2800      	cmp	r0, #0
 800e264:	f43f af32 	beq.w	800e0cc <get_sof+0x1c>
 800e268:	e9d6 5300 	ldrd	r5, r3, [r6]
 800e26c:	e767      	b.n	800e13e <get_sof+0x8e>
    compptr->component_index = ci;
 800e26e:	f847 8c54 	str.w	r8, [r7, #-84]
    INPUT_BYTE(cinfo, compptr->component_id, return FALSE);
 800e272:	f1b9 0f00 	cmp.w	r9, #0
 800e276:	d107      	bne.n	800e288 <get_sof+0x1d8>
 800e278:	68f3      	ldr	r3, [r6, #12]
 800e27a:	4620      	mov	r0, r4
 800e27c:	4798      	blx	r3
 800e27e:	2800      	cmp	r0, #0
 800e280:	f43f af24 	beq.w	800e0cc <get_sof+0x1c>
 800e284:	e9d6 5900 	ldrd	r5, r9, [r6]
 800e288:	782b      	ldrb	r3, [r5, #0]
 800e28a:	f847 3c58 	str.w	r3, [r7, #-88]
    INPUT_BYTE(cinfo, c, return FALSE);
 800e28e:	f1b9 0301 	subs.w	r3, r9, #1
 800e292:	d029      	beq.n	800e2e8 <get_sof+0x238>
    INPUT_BYTE(cinfo, compptr->component_id, return FALSE);
 800e294:	3501      	adds	r5, #1
    INPUT_BYTE(cinfo, c, return FALSE);
 800e296:	782a      	ldrb	r2, [r5, #0]
    INPUT_BYTE(cinfo, compptr->quant_tbl_no, return FALSE);
 800e298:	3b01      	subs	r3, #1
    compptr->h_samp_factor = (c >> 4) & 15;
 800e29a:	ea4f 1122 	mov.w	r1, r2, asr #4
    compptr->v_samp_factor = (c     ) & 15;
 800e29e:	f002 020f 	and.w	r2, r2, #15
    compptr->h_samp_factor = (c >> 4) & 15;
 800e2a2:	f847 1c50 	str.w	r1, [r7, #-80]
    compptr->v_samp_factor = (c     ) & 15;
 800e2a6:	f847 2c4c 	str.w	r2, [r7, #-76]
    INPUT_BYTE(cinfo, compptr->quant_tbl_no, return FALSE);
 800e2aa:	d026      	beq.n	800e2fa <get_sof+0x24a>
    INPUT_BYTE(cinfo, c, return FALSE);
 800e2ac:	3501      	adds	r5, #1
    INPUT_BYTE(cinfo, compptr->quant_tbl_no, return FALSE);
 800e2ae:	f103 39ff 	add.w	r9, r3, #4294967295
 800e2b2:	f815 3b01 	ldrb.w	r3, [r5], #1
    TRACEMS4(cinfo, 1, JTRC_SOF_COMPONENT,
 800e2b6:	f857 2c58 	ldr.w	r2, [r7, #-88]
 800e2ba:	2101      	movs	r1, #1
    INPUT_BYTE(cinfo, compptr->quant_tbl_no, return FALSE);
 800e2bc:	f847 3c48 	str.w	r3, [r7, #-72]
    TRACEMS4(cinfo, 1, JTRC_SOF_COMPONENT,
 800e2c0:	4620      	mov	r0, r4
 800e2c2:	6823      	ldr	r3, [r4, #0]
       ci++, compptr++) {
 800e2c4:	f108 0801 	add.w	r8, r8, #1
 800e2c8:	3758      	adds	r7, #88	; 0x58
    TRACEMS4(cinfo, 1, JTRC_SOF_COMPONENT,
 800e2ca:	619a      	str	r2, [r3, #24]
 800e2cc:	f857 2ca8 	ldr.w	r2, [r7, #-168]
 800e2d0:	61da      	str	r2, [r3, #28]
 800e2d2:	f857 2ca4 	ldr.w	r2, [r7, #-164]
 800e2d6:	621a      	str	r2, [r3, #32]
 800e2d8:	f857 2ca0 	ldr.w	r2, [r7, #-160]
 800e2dc:	f8c3 a014 	str.w	sl, [r3, #20]
 800e2e0:	625a      	str	r2, [r3, #36]	; 0x24
 800e2e2:	685b      	ldr	r3, [r3, #4]
 800e2e4:	4798      	blx	r3
       ci++, compptr++) {
 800e2e6:	e779      	b.n	800e1dc <get_sof+0x12c>
    INPUT_BYTE(cinfo, c, return FALSE);
 800e2e8:	68f3      	ldr	r3, [r6, #12]
 800e2ea:	4620      	mov	r0, r4
 800e2ec:	4798      	blx	r3
 800e2ee:	2800      	cmp	r0, #0
 800e2f0:	f43f aeec 	beq.w	800e0cc <get_sof+0x1c>
 800e2f4:	e9d6 5300 	ldrd	r5, r3, [r6]
 800e2f8:	e7cd      	b.n	800e296 <get_sof+0x1e6>
    INPUT_BYTE(cinfo, compptr->quant_tbl_no, return FALSE);
 800e2fa:	68f3      	ldr	r3, [r6, #12]
 800e2fc:	4620      	mov	r0, r4
 800e2fe:	4798      	blx	r3
 800e300:	2800      	cmp	r0, #0
 800e302:	f43f aee3 	beq.w	800e0cc <get_sof+0x1c>
 800e306:	e9d6 5300 	ldrd	r5, r3, [r6]
 800e30a:	e7d0      	b.n	800e2ae <get_sof+0x1fe>

0800e30c <examine_app0>:
	      unsigned int datalen, INT32 remaining)
/* Examine first few bytes from an APP0.
 * Take appropriate action if it is a JFIF marker.
 * datalen is # of bytes at data[], remaining is length of rest of marker data.
 */
{
 800e30c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  INT32 totallen = (INT32) datalen + remaining;

  if (datalen >= APP0_DATA_LEN &&
 800e310:	2a0d      	cmp	r2, #13
{
 800e312:	460c      	mov	r4, r1
     * (We used to treat this as an error, but now it's a nonfatal warning,
     * because some bozo at Hijaak couldn't read the spec.)
     * Minor version should be 0..2, but process anyway if newer.
     */
    if (cinfo->JFIF_major_version != 1)
      WARNMS2(cinfo, JWRN_JFIF_MAJOR,
 800e314:	6801      	ldr	r1, [r0, #0]
  INT32 totallen = (INT32) datalen + remaining;
 800e316:	eb02 0603 	add.w	r6, r2, r3
{
 800e31a:	4605      	mov	r5, r0
      WARNMS2(cinfo, JWRN_JFIF_MAJOR,
 800e31c:	684b      	ldr	r3, [r1, #4]
  if (datalen >= APP0_DATA_LEN &&
 800e31e:	d96d      	bls.n	800e3fc <examine_app0+0xf0>
 800e320:	7822      	ldrb	r2, [r4, #0]
 800e322:	2a4a      	cmp	r2, #74	; 0x4a
 800e324:	f040 808f 	bne.w	800e446 <examine_app0+0x13a>
      GETJOCTET(data[0]) == 0x4A &&
 800e328:	7862      	ldrb	r2, [r4, #1]
 800e32a:	2a46      	cmp	r2, #70	; 0x46
 800e32c:	f040 808b 	bne.w	800e446 <examine_app0+0x13a>
      GETJOCTET(data[1]) == 0x46 &&
 800e330:	78a2      	ldrb	r2, [r4, #2]
 800e332:	2a49      	cmp	r2, #73	; 0x49
 800e334:	d16a      	bne.n	800e40c <examine_app0+0x100>
      GETJOCTET(data[2]) == 0x49 &&
 800e336:	78e2      	ldrb	r2, [r4, #3]
 800e338:	2a46      	cmp	r2, #70	; 0x46
 800e33a:	d167      	bne.n	800e40c <examine_app0+0x100>
      GETJOCTET(data[3]) == 0x46 &&
 800e33c:	7922      	ldrb	r2, [r4, #4]
 800e33e:	2a00      	cmp	r2, #0
 800e340:	d164      	bne.n	800e40c <examine_app0+0x100>
    cinfo->saw_JFIF_marker = TRUE;
 800e342:	2201      	movs	r2, #1
 800e344:	f8c0 211c 	str.w	r2, [r0, #284]	; 0x11c
    cinfo->JFIF_major_version = GETJOCTET(data[5]);
 800e348:	7962      	ldrb	r2, [r4, #5]
 800e34a:	f880 2120 	strb.w	r2, [r0, #288]	; 0x120
    if (cinfo->JFIF_major_version != 1)
 800e34e:	2a01      	cmp	r2, #1
    cinfo->JFIF_minor_version = GETJOCTET(data[6]);
 800e350:	f894 c006 	ldrb.w	ip, [r4, #6]
 800e354:	f880 c121 	strb.w	ip, [r0, #289]	; 0x121
    cinfo->density_unit = GETJOCTET(data[7]);
 800e358:	79e7      	ldrb	r7, [r4, #7]
 800e35a:	f880 7122 	strb.w	r7, [r0, #290]	; 0x122
    cinfo->X_density = (GETJOCTET(data[8]) << 8) + GETJOCTET(data[9]);
 800e35e:	f894 e008 	ldrb.w	lr, [r4, #8]
 800e362:	7a67      	ldrb	r7, [r4, #9]
 800e364:	eb07 270e 	add.w	r7, r7, lr, lsl #8
 800e368:	f8a0 7124 	strh.w	r7, [r0, #292]	; 0x124
    cinfo->Y_density = (GETJOCTET(data[10]) << 8) + GETJOCTET(data[11]);
 800e36c:	f894 e00a 	ldrb.w	lr, [r4, #10]
 800e370:	7ae7      	ldrb	r7, [r4, #11]
 800e372:	eb07 270e 	add.w	r7, r7, lr, lsl #8
 800e376:	f8a0 7126 	strh.w	r7, [r0, #294]	; 0x126
    if (cinfo->JFIF_major_version != 1)
 800e37a:	d007      	beq.n	800e38c <examine_app0+0x80>
      WARNMS2(cinfo, JWRN_JFIF_MAJOR,
 800e37c:	277a      	movs	r7, #122	; 0x7a
 800e37e:	f8c1 c01c 	str.w	ip, [r1, #28]
 800e382:	e9c1 7205 	strd	r7, r2, [r1, #20]
 800e386:	f04f 31ff 	mov.w	r1, #4294967295
 800e38a:	4798      	blx	r3
	      cinfo->JFIF_major_version, cinfo->JFIF_minor_version);
    /* Generate trace messages */
    TRACEMS5(cinfo, 1, JTRC_JFIF,
 800e38c:	682b      	ldr	r3, [r5, #0]
 800e38e:	2101      	movs	r1, #1
 800e390:	f895 2120 	ldrb.w	r2, [r5, #288]	; 0x120
 800e394:	4628      	mov	r0, r5
 800e396:	619a      	str	r2, [r3, #24]
 800e398:	f895 2121 	ldrb.w	r2, [r5, #289]	; 0x121
 800e39c:	61da      	str	r2, [r3, #28]
 800e39e:	f8b5 2124 	ldrh.w	r2, [r5, #292]	; 0x124
 800e3a2:	621a      	str	r2, [r3, #32]
 800e3a4:	f8b5 2126 	ldrh.w	r2, [r5, #294]	; 0x126
 800e3a8:	625a      	str	r2, [r3, #36]	; 0x24
 800e3aa:	f895 2122 	ldrb.w	r2, [r5, #290]	; 0x122
 800e3ae:	629a      	str	r2, [r3, #40]	; 0x28
 800e3b0:	2259      	movs	r2, #89	; 0x59
 800e3b2:	615a      	str	r2, [r3, #20]
 800e3b4:	685b      	ldr	r3, [r3, #4]
 800e3b6:	4798      	blx	r3
	     cinfo->JFIF_major_version, cinfo->JFIF_minor_version,
	     cinfo->X_density, cinfo->Y_density, cinfo->density_unit);
    /* Validate thumbnail dimensions and issue appropriate messages */
    if (GETJOCTET(data[12]) | GETJOCTET(data[13]))
 800e3b8:	7b22      	ldrb	r2, [r4, #12]
 800e3ba:	7b63      	ldrb	r3, [r4, #13]
 800e3bc:	4313      	orrs	r3, r2
 800e3be:	d00a      	beq.n	800e3d6 <examine_app0+0xca>
      TRACEMS2(cinfo, 1, JTRC_JFIF_THUMBNAIL,
 800e3c0:	682b      	ldr	r3, [r5, #0]
 800e3c2:	225c      	movs	r2, #92	; 0x5c
 800e3c4:	2101      	movs	r1, #1
 800e3c6:	4628      	mov	r0, r5
 800e3c8:	615a      	str	r2, [r3, #20]
 800e3ca:	7b22      	ldrb	r2, [r4, #12]
 800e3cc:	619a      	str	r2, [r3, #24]
 800e3ce:	7b62      	ldrb	r2, [r4, #13]
 800e3d0:	61da      	str	r2, [r3, #28]
 800e3d2:	685b      	ldr	r3, [r3, #4]
 800e3d4:	4798      	blx	r3
	       GETJOCTET(data[12]), GETJOCTET(data[13]));
    totallen -= APP0_DATA_LEN;
    if (totallen !=
	((INT32)GETJOCTET(data[12]) * (INT32)GETJOCTET(data[13]) * (INT32) 3))
 800e3d6:	7b22      	ldrb	r2, [r4, #12]
    totallen -= APP0_DATA_LEN;
 800e3d8:	3e0e      	subs	r6, #14
	((INT32)GETJOCTET(data[12]) * (INT32)GETJOCTET(data[13]) * (INT32) 3))
 800e3da:	7b63      	ldrb	r3, [r4, #13]
 800e3dc:	fb12 f203 	smulbb	r2, r2, r3
 800e3e0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    if (totallen !=
 800e3e4:	42b2      	cmp	r2, r6
 800e3e6:	d030      	beq.n	800e44a <examine_app0+0x13e>
      TRACEMS1(cinfo, 1, JTRC_JFIF_BADTHUMBNAILSIZE, (int) totallen);
 800e3e8:	682a      	ldr	r2, [r5, #0]
 800e3ea:	235a      	movs	r3, #90	; 0x5a
 800e3ec:	e9c2 3605 	strd	r3, r6, [r2, #20]
 800e3f0:	6853      	ldr	r3, [r2, #4]
	       GETJOCTET(data[5]), (int) totallen);
      break;
    }
  } else {
    /* Start of APP0 does not match "JFIF" or "JFXX", or too short */
    TRACEMS1(cinfo, 1, JTRC_APP0, (int) totallen);
 800e3f2:	4628      	mov	r0, r5
 800e3f4:	2101      	movs	r1, #1
  }
}
 800e3f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    TRACEMS1(cinfo, 1, JTRC_APP0, (int) totallen);
 800e3fa:	4718      	bx	r3
  } else if (datalen >= 6 &&
 800e3fc:	2a05      	cmp	r2, #5
 800e3fe:	d922      	bls.n	800e446 <examine_app0+0x13a>
 800e400:	7822      	ldrb	r2, [r4, #0]
 800e402:	2a4a      	cmp	r2, #74	; 0x4a
 800e404:	d11f      	bne.n	800e446 <examine_app0+0x13a>
      GETJOCTET(data[0]) == 0x4A &&
 800e406:	7862      	ldrb	r2, [r4, #1]
 800e408:	2a46      	cmp	r2, #70	; 0x46
 800e40a:	d11c      	bne.n	800e446 <examine_app0+0x13a>
      GETJOCTET(data[1]) == 0x46 &&
 800e40c:	78a2      	ldrb	r2, [r4, #2]
 800e40e:	2a58      	cmp	r2, #88	; 0x58
 800e410:	d119      	bne.n	800e446 <examine_app0+0x13a>
      GETJOCTET(data[2]) == 0x58 &&
 800e412:	78e2      	ldrb	r2, [r4, #3]
 800e414:	2a58      	cmp	r2, #88	; 0x58
 800e416:	d116      	bne.n	800e446 <examine_app0+0x13a>
      GETJOCTET(data[3]) == 0x58 &&
 800e418:	7922      	ldrb	r2, [r4, #4]
 800e41a:	b9a2      	cbnz	r2, 800e446 <examine_app0+0x13a>
    switch (GETJOCTET(data[5])) {
 800e41c:	7962      	ldrb	r2, [r4, #5]
 800e41e:	2a11      	cmp	r2, #17
 800e420:	d007      	beq.n	800e432 <examine_app0+0x126>
 800e422:	2a13      	cmp	r2, #19
 800e424:	d007      	beq.n	800e436 <examine_app0+0x12a>
 800e426:	2a10      	cmp	r2, #16
 800e428:	d107      	bne.n	800e43a <examine_app0+0x12e>
      TRACEMS1(cinfo, 1, JTRC_THUMB_JPEG, (int) totallen);
 800e42a:	226e      	movs	r2, #110	; 0x6e
    TRACEMS1(cinfo, 1, JTRC_APP0, (int) totallen);
 800e42c:	e9c1 2605 	strd	r2, r6, [r1, #20]
 800e430:	e7df      	b.n	800e3f2 <examine_app0+0xe6>
      TRACEMS1(cinfo, 1, JTRC_THUMB_PALETTE, (int) totallen);
 800e432:	226f      	movs	r2, #111	; 0x6f
 800e434:	e7fa      	b.n	800e42c <examine_app0+0x120>
      TRACEMS1(cinfo, 1, JTRC_THUMB_RGB, (int) totallen);
 800e436:	2270      	movs	r2, #112	; 0x70
 800e438:	e7f8      	b.n	800e42c <examine_app0+0x120>
      TRACEMS2(cinfo, 1, JTRC_JFIF_EXTENSION,
 800e43a:	225b      	movs	r2, #91	; 0x5b
 800e43c:	614a      	str	r2, [r1, #20]
 800e43e:	7962      	ldrb	r2, [r4, #5]
 800e440:	e9c1 2606 	strd	r2, r6, [r1, #24]
 800e444:	e7d5      	b.n	800e3f2 <examine_app0+0xe6>
    TRACEMS1(cinfo, 1, JTRC_APP0, (int) totallen);
 800e446:	224f      	movs	r2, #79	; 0x4f
 800e448:	e7f0      	b.n	800e42c <examine_app0+0x120>
}
 800e44a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e44e <examine_app14>:
	       unsigned int datalen, INT32 remaining)
/* Examine first few bytes from an APP14.
 * Take appropriate action if it is an Adobe marker.
 * datalen is # of bytes at data[], remaining is length of rest of marker data.
 */
{
 800e44e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  unsigned int version, flags0, flags1, transform;

  if (datalen >= APP14_DATA_LEN &&
 800e452:	2a0b      	cmp	r2, #11
    /* Found Adobe APP14 marker */
    version = (GETJOCTET(data[5]) << 8) + GETJOCTET(data[6]);
    flags0 = (GETJOCTET(data[7]) << 8) + GETJOCTET(data[8]);
    flags1 = (GETJOCTET(data[9]) << 8) + GETJOCTET(data[10]);
    transform = GETJOCTET(data[11]);
    TRACEMS4(cinfo, 1, JTRC_ADOBE, version, flags0, flags1, transform);
 800e454:	6804      	ldr	r4, [r0, #0]
{
 800e456:	4605      	mov	r5, r0
    TRACEMS4(cinfo, 1, JTRC_ADOBE, version, flags0, flags1, transform);
 800e458:	6866      	ldr	r6, [r4, #4]
  if (datalen >= APP14_DATA_LEN &&
 800e45a:	d92b      	bls.n	800e4b4 <examine_app14+0x66>
 800e45c:	780f      	ldrb	r7, [r1, #0]
 800e45e:	2f41      	cmp	r7, #65	; 0x41
 800e460:	d128      	bne.n	800e4b4 <examine_app14+0x66>
      GETJOCTET(data[0]) == 0x41 &&
 800e462:	784f      	ldrb	r7, [r1, #1]
 800e464:	2f64      	cmp	r7, #100	; 0x64
 800e466:	d125      	bne.n	800e4b4 <examine_app14+0x66>
      GETJOCTET(data[1]) == 0x64 &&
 800e468:	788f      	ldrb	r7, [r1, #2]
 800e46a:	2f6f      	cmp	r7, #111	; 0x6f
 800e46c:	d122      	bne.n	800e4b4 <examine_app14+0x66>
      GETJOCTET(data[2]) == 0x6F &&
 800e46e:	78cf      	ldrb	r7, [r1, #3]
 800e470:	2f62      	cmp	r7, #98	; 0x62
 800e472:	d11f      	bne.n	800e4b4 <examine_app14+0x66>
      GETJOCTET(data[3]) == 0x62 &&
 800e474:	790f      	ldrb	r7, [r1, #4]
 800e476:	2f65      	cmp	r7, #101	; 0x65
 800e478:	d11c      	bne.n	800e4b4 <examine_app14+0x66>
    flags0 = (GETJOCTET(data[7]) << 8) + GETJOCTET(data[8]);
 800e47a:	79cb      	ldrb	r3, [r1, #7]
 800e47c:	7a0a      	ldrb	r2, [r1, #8]
    flags1 = (GETJOCTET(data[9]) << 8) + GETJOCTET(data[10]);
 800e47e:	7a4f      	ldrb	r7, [r1, #9]
    flags0 = (GETJOCTET(data[7]) << 8) + GETJOCTET(data[8]);
 800e480:	eb02 2203 	add.w	r2, r2, r3, lsl #8
    flags1 = (GETJOCTET(data[9]) << 8) + GETJOCTET(data[10]);
 800e484:	7a8b      	ldrb	r3, [r1, #10]
    version = (GETJOCTET(data[5]) << 8) + GETJOCTET(data[6]);
 800e486:	f891 c005 	ldrb.w	ip, [r1, #5]
    flags1 = (GETJOCTET(data[9]) << 8) + GETJOCTET(data[10]);
 800e48a:	eb03 2307 	add.w	r3, r3, r7, lsl #8
    transform = GETJOCTET(data[11]);
 800e48e:	7acf      	ldrb	r7, [r1, #11]
    version = (GETJOCTET(data[5]) << 8) + GETJOCTET(data[6]);
 800e490:	7989      	ldrb	r1, [r1, #6]
    TRACEMS4(cinfo, 1, JTRC_ADOBE, version, flags0, flags1, transform);
 800e492:	e9c4 3708 	strd	r3, r7, [r4, #32]
    version = (GETJOCTET(data[5]) << 8) + GETJOCTET(data[6]);
 800e496:	eb01 210c 	add.w	r1, r1, ip, lsl #8
    TRACEMS4(cinfo, 1, JTRC_ADOBE, version, flags0, flags1, transform);
 800e49a:	234e      	movs	r3, #78	; 0x4e
 800e49c:	e9c4 1206 	strd	r1, r2, [r4, #24]
 800e4a0:	6163      	str	r3, [r4, #20]
 800e4a2:	2101      	movs	r1, #1
 800e4a4:	47b0      	blx	r6
    cinfo->saw_Adobe_marker = TRUE;
 800e4a6:	2301      	movs	r3, #1
    cinfo->Adobe_transform = (UINT8) transform;
 800e4a8:	f885 712c 	strb.w	r7, [r5, #300]	; 0x12c
    cinfo->saw_Adobe_marker = TRUE;
 800e4ac:	f8c5 3128 	str.w	r3, [r5, #296]	; 0x128
  } else {
    /* Start of APP14 does not match "Adobe", or too short */
    TRACEMS1(cinfo, 1, JTRC_APP14, (int) (datalen + remaining));
  }
}
 800e4b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    TRACEMS1(cinfo, 1, JTRC_APP14, (int) (datalen + remaining));
 800e4b4:	2150      	movs	r1, #80	; 0x50
 800e4b6:	4413      	add	r3, r2
 800e4b8:	4628      	mov	r0, r5
 800e4ba:	6161      	str	r1, [r4, #20]
 800e4bc:	2101      	movs	r1, #1
 800e4be:	61a3      	str	r3, [r4, #24]
 800e4c0:	4633      	mov	r3, r6
}
 800e4c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    TRACEMS1(cinfo, 1, JTRC_APP14, (int) (datalen + remaining));
 800e4c6:	4718      	bx	r3

0800e4c8 <get_interesting_appn>:


METHODDEF(boolean)
get_interesting_appn (j_decompress_ptr cinfo)
/* Process an APP0 or APP14 marker without saving it */
{
 800e4c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
  INT32 length;
  JOCTET b[APPN_DATA_LEN];
  unsigned int i, numtoread;
  INPUT_VARS(cinfo);
 800e4cc:	6986      	ldr	r6, [r0, #24]
{
 800e4ce:	4680      	mov	r8, r0
  INPUT_VARS(cinfo);
 800e4d0:	6877      	ldr	r7, [r6, #4]

  INPUT_2BYTES(cinfo, length, return FALSE);
 800e4d2:	b39f      	cbz	r7, 800e53c <get_interesting_appn+0x74>
  INPUT_VARS(cinfo);
 800e4d4:	6834      	ldr	r4, [r6, #0]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e4d6:	7825      	ldrb	r5, [r4, #0]
 800e4d8:	3f01      	subs	r7, #1
 800e4da:	ea4f 2905 	mov.w	r9, r5, lsl #8
 800e4de:	d037      	beq.n	800e550 <get_interesting_appn+0x88>
 800e4e0:	3401      	adds	r4, #1
 800e4e2:	f814 5b01 	ldrb.w	r5, [r4], #1
 800e4e6:	3f01      	subs	r7, #1
 800e4e8:	444d      	add	r5, r9
  length -= 2;
 800e4ea:	3d02      	subs	r5, #2

  /* get the interesting part of the marker data */
  if (length >= APPN_DATA_LEN)
 800e4ec:	2d0d      	cmp	r5, #13
 800e4ee:	dc37      	bgt.n	800e560 <get_interesting_appn+0x98>
    numtoread = APPN_DATA_LEN;
  else if (length > 0)
 800e4f0:	2d00      	cmp	r5, #0
 800e4f2:	dd38      	ble.n	800e566 <get_interesting_appn+0x9e>
    numtoread = (unsigned int) length;
 800e4f4:	46a9      	mov	r9, r5
  else
    numtoread = 0;
  for (i = 0; i < numtoread; i++)
 800e4f6:	f04f 0a00 	mov.w	sl, #0
    INPUT_BYTE(cinfo, b[i], return FALSE);
 800e4fa:	b92f      	cbnz	r7, 800e508 <get_interesting_appn+0x40>
 800e4fc:	68f3      	ldr	r3, [r6, #12]
 800e4fe:	4640      	mov	r0, r8
 800e500:	4798      	blx	r3
 800e502:	b1f0      	cbz	r0, 800e542 <get_interesting_appn+0x7a>
 800e504:	e9d6 4700 	ldrd	r4, r7, [r6]
 800e508:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e50c:	3f01      	subs	r7, #1
 800e50e:	f80d 300a 	strb.w	r3, [sp, sl]
  for (i = 0; i < numtoread; i++)
 800e512:	f10a 0a01 	add.w	sl, sl, #1
 800e516:	45d1      	cmp	r9, sl
 800e518:	d1ef      	bne.n	800e4fa <get_interesting_appn+0x32>
  length -= numtoread;

  /* process it */
  switch (cinfo->unread_marker) {
 800e51a:	f8d8 21b4 	ldr.w	r2, [r8, #436]	; 0x1b4
  length -= numtoread;
 800e51e:	eba5 0509 	sub.w	r5, r5, r9
  switch (cinfo->unread_marker) {
 800e522:	2ae0      	cmp	r2, #224	; 0xe0
 800e524:	d022      	beq.n	800e56c <get_interesting_appn+0xa4>
 800e526:	2aee      	cmp	r2, #238	; 0xee
 800e528:	d032      	beq.n	800e590 <get_interesting_appn+0xc8>
  case M_APP14:
    examine_app14(cinfo, (JOCTET FAR *) b, numtoread, length);
    break;
  default:
    /* can't get here unless jpeg_save_markers chooses wrong processor */
    ERREXIT1(cinfo, JERR_UNKNOWN_MARKER, cinfo->unread_marker);
 800e52a:	f8d8 3000 	ldr.w	r3, [r8]
 800e52e:	2146      	movs	r1, #70	; 0x46
 800e530:	4640      	mov	r0, r8
 800e532:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	4798      	blx	r3
    break;
 800e53a:	e01d      	b.n	800e578 <get_interesting_appn+0xb0>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e53c:	68f3      	ldr	r3, [r6, #12]
 800e53e:	4798      	blx	r3
 800e540:	b918      	cbnz	r0, 800e54a <get_interesting_appn+0x82>
 800e542:	2000      	movs	r0, #0
  INPUT_SYNC(cinfo);
  if (length > 0)
    (*cinfo->src->skip_input_data) (cinfo, (long) length);

  return TRUE;
}
 800e544:	b004      	add	sp, #16
 800e546:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e54a:	e9d6 4700 	ldrd	r4, r7, [r6]
 800e54e:	e7c2      	b.n	800e4d6 <get_interesting_appn+0xe>
 800e550:	68f3      	ldr	r3, [r6, #12]
 800e552:	4640      	mov	r0, r8
 800e554:	4798      	blx	r3
 800e556:	2800      	cmp	r0, #0
 800e558:	d0f3      	beq.n	800e542 <get_interesting_appn+0x7a>
 800e55a:	e9d6 4700 	ldrd	r4, r7, [r6]
 800e55e:	e7c0      	b.n	800e4e2 <get_interesting_appn+0x1a>
    numtoread = APPN_DATA_LEN;
 800e560:	f04f 090e 	mov.w	r9, #14
 800e564:	e7c7      	b.n	800e4f6 <get_interesting_appn+0x2e>
    numtoread = 0;
 800e566:	f04f 0900 	mov.w	r9, #0
 800e56a:	e7d6      	b.n	800e51a <get_interesting_appn+0x52>
    examine_app0(cinfo, (JOCTET FAR *) b, numtoread, length);
 800e56c:	462b      	mov	r3, r5
 800e56e:	464a      	mov	r2, r9
 800e570:	4669      	mov	r1, sp
 800e572:	4640      	mov	r0, r8
 800e574:	f7ff feca 	bl	800e30c <examine_app0>
  if (length > 0)
 800e578:	2d00      	cmp	r5, #0
  INPUT_SYNC(cinfo);
 800e57a:	e9c6 4700 	strd	r4, r7, [r6]
  if (length > 0)
 800e57e:	dd05      	ble.n	800e58c <get_interesting_appn+0xc4>
    (*cinfo->src->skip_input_data) (cinfo, (long) length);
 800e580:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800e584:	4629      	mov	r1, r5
 800e586:	4640      	mov	r0, r8
 800e588:	691b      	ldr	r3, [r3, #16]
 800e58a:	4798      	blx	r3
  return TRUE;
 800e58c:	2001      	movs	r0, #1
 800e58e:	e7d9      	b.n	800e544 <get_interesting_appn+0x7c>
    examine_app14(cinfo, (JOCTET FAR *) b, numtoread, length);
 800e590:	462b      	mov	r3, r5
 800e592:	464a      	mov	r2, r9
 800e594:	4669      	mov	r1, sp
 800e596:	4640      	mov	r0, r8
 800e598:	f7ff ff59 	bl	800e44e <examine_app14>
    break;
 800e59c:	e7ec      	b.n	800e578 <get_interesting_appn+0xb0>

0800e59e <skip_variable>:


METHODDEF(boolean)
skip_variable (j_decompress_ptr cinfo)
/* Skip over an unknown or uninteresting variable-length marker */
{
 800e59e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  INT32 length;
  INPUT_VARS(cinfo);
 800e5a2:	6984      	ldr	r4, [r0, #24]
{
 800e5a4:	4607      	mov	r7, r0
  INPUT_VARS(cinfo);
 800e5a6:	6863      	ldr	r3, [r4, #4]

  INPUT_2BYTES(cinfo, length, return FALSE);
 800e5a8:	b31b      	cbz	r3, 800e5f2 <skip_variable+0x54>
  INPUT_VARS(cinfo);
 800e5aa:	6825      	ldr	r5, [r4, #0]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e5ac:	782e      	ldrb	r6, [r5, #0]
 800e5ae:	f1b3 0801 	subs.w	r8, r3, #1
 800e5b2:	ea4f 2906 	mov.w	r9, r6, lsl #8
 800e5b6:	d025      	beq.n	800e604 <skip_variable+0x66>
 800e5b8:	3501      	adds	r5, #1
 800e5ba:	f815 6b01 	ldrb.w	r6, [r5], #1
  length -= 2;
  
  TRACEMS2(cinfo, 1, JTRC_MISC_MARKER, cinfo->unread_marker, (int) length);
 800e5be:	235d      	movs	r3, #93	; 0x5d
 800e5c0:	683a      	ldr	r2, [r7, #0]
 800e5c2:	2101      	movs	r1, #1
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e5c4:	444e      	add	r6, r9
  TRACEMS2(cinfo, 1, JTRC_MISC_MARKER, cinfo->unread_marker, (int) length);
 800e5c6:	4638      	mov	r0, r7
 800e5c8:	6153      	str	r3, [r2, #20]
  length -= 2;
 800e5ca:	3e02      	subs	r6, #2
  TRACEMS2(cinfo, 1, JTRC_MISC_MARKER, cinfo->unread_marker, (int) length);
 800e5cc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800e5d0:	e9c2 3606 	strd	r3, r6, [r2, #24]
 800e5d4:	6853      	ldr	r3, [r2, #4]
 800e5d6:	4798      	blx	r3
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e5d8:	f108 33ff 	add.w	r3, r8, #4294967295

  INPUT_SYNC(cinfo);		/* do before skip_input_data */
  if (length > 0)
 800e5dc:	2e00      	cmp	r6, #0
  INPUT_SYNC(cinfo);		/* do before skip_input_data */
 800e5de:	6025      	str	r5, [r4, #0]
 800e5e0:	6063      	str	r3, [r4, #4]
  if (length > 0)
 800e5e2:	dd04      	ble.n	800e5ee <skip_variable+0x50>
    (*cinfo->src->skip_input_data) (cinfo, (long) length);
 800e5e4:	69bb      	ldr	r3, [r7, #24]
 800e5e6:	4631      	mov	r1, r6
 800e5e8:	4638      	mov	r0, r7
 800e5ea:	691b      	ldr	r3, [r3, #16]
 800e5ec:	4798      	blx	r3

  return TRUE;
 800e5ee:	2001      	movs	r0, #1
 800e5f0:	e003      	b.n	800e5fa <skip_variable+0x5c>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e5f2:	68e3      	ldr	r3, [r4, #12]
 800e5f4:	4798      	blx	r3
 800e5f6:	b910      	cbnz	r0, 800e5fe <skip_variable+0x60>
 800e5f8:	2000      	movs	r0, #0
}
 800e5fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e5fe:	e9d4 5300 	ldrd	r5, r3, [r4]
 800e602:	e7d3      	b.n	800e5ac <skip_variable+0xe>
 800e604:	68e3      	ldr	r3, [r4, #12]
 800e606:	4638      	mov	r0, r7
 800e608:	4798      	blx	r3
 800e60a:	2800      	cmp	r0, #0
 800e60c:	d0f4      	beq.n	800e5f8 <skip_variable+0x5a>
 800e60e:	e9d4 5800 	ldrd	r5, r8, [r4]
 800e612:	e7d2      	b.n	800e5ba <skip_variable+0x1c>

0800e614 <next_marker>:
 * but it will never be 0 or FF.
 */

LOCAL(boolean)
next_marker (j_decompress_ptr cinfo)
{
 800e614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  int c;
  INPUT_VARS(cinfo);
 800e618:	6986      	ldr	r6, [r0, #24]
{
 800e61a:	4680      	mov	r8, r0
  INPUT_VARS(cinfo);
 800e61c:	e9d6 4700 	ldrd	r4, r7, [r6]

  for (;;) {
    INPUT_BYTE(cinfo, c, return FALSE);
 800e620:	b987      	cbnz	r7, 800e644 <next_marker+0x30>
 800e622:	68f3      	ldr	r3, [r6, #12]
 800e624:	4640      	mov	r0, r8
 800e626:	4798      	blx	r3
 800e628:	b950      	cbnz	r0, 800e640 <next_marker+0x2c>
 800e62a:	2000      	movs	r0, #0

  cinfo->unread_marker = c;

  INPUT_SYNC(cinfo);
  return TRUE;
}
 800e62c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      cinfo->marker->discarded_bytes++;
 800e630:	f8d8 21cc 	ldr.w	r2, [r8, #460]	; 0x1cc
 800e634:	6993      	ldr	r3, [r2, #24]
 800e636:	3301      	adds	r3, #1
    cinfo->marker->discarded_bytes += 2;
 800e638:	6193      	str	r3, [r2, #24]
    INPUT_SYNC(cinfo);
 800e63a:	e9c6 4700 	strd	r4, r7, [r6]
    INPUT_BYTE(cinfo, c, return FALSE);
 800e63e:	e7ef      	b.n	800e620 <next_marker+0xc>
      INPUT_BYTE(cinfo, c, return FALSE);
 800e640:	e9d6 4700 	ldrd	r4, r7, [r6]
 800e644:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e648:	3f01      	subs	r7, #1
    while (c != 0xFF) {
 800e64a:	2bff      	cmp	r3, #255	; 0xff
 800e64c:	d1f0      	bne.n	800e630 <next_marker+0x1c>
      INPUT_BYTE(cinfo, c, return FALSE);
 800e64e:	b937      	cbnz	r7, 800e65e <next_marker+0x4a>
 800e650:	68f3      	ldr	r3, [r6, #12]
 800e652:	4640      	mov	r0, r8
 800e654:	4798      	blx	r3
 800e656:	2800      	cmp	r0, #0
 800e658:	d0e7      	beq.n	800e62a <next_marker+0x16>
 800e65a:	e9d6 4700 	ldrd	r4, r7, [r6]
 800e65e:	f814 5b01 	ldrb.w	r5, [r4], #1
 800e662:	3f01      	subs	r7, #1
    } while (c == 0xFF);
 800e664:	2dff      	cmp	r5, #255	; 0xff
 800e666:	d0f2      	beq.n	800e64e <next_marker+0x3a>
    cinfo->marker->discarded_bytes += 2;
 800e668:	f8d8 21cc 	ldr.w	r2, [r8, #460]	; 0x1cc
 800e66c:	6993      	ldr	r3, [r2, #24]
    if (c != 0)
 800e66e:	b90d      	cbnz	r5, 800e674 <next_marker+0x60>
    cinfo->marker->discarded_bytes += 2;
 800e670:	3302      	adds	r3, #2
 800e672:	e7e1      	b.n	800e638 <next_marker+0x24>
  if (cinfo->marker->discarded_bytes != 0) {
 800e674:	b173      	cbz	r3, 800e694 <next_marker+0x80>
    WARNMS2(cinfo, JWRN_EXTRANEOUS_DATA, cinfo->marker->discarded_bytes, c);
 800e676:	f8d8 2000 	ldr.w	r2, [r8]
 800e67a:	2177      	movs	r1, #119	; 0x77
 800e67c:	4640      	mov	r0, r8
 800e67e:	61d5      	str	r5, [r2, #28]
 800e680:	e9c2 1305 	strd	r1, r3, [r2, #20]
 800e684:	6853      	ldr	r3, [r2, #4]
 800e686:	f04f 31ff 	mov.w	r1, #4294967295
 800e68a:	4798      	blx	r3
    cinfo->marker->discarded_bytes = 0;
 800e68c:	f8d8 31cc 	ldr.w	r3, [r8, #460]	; 0x1cc
 800e690:	2200      	movs	r2, #0
 800e692:	619a      	str	r2, [r3, #24]
  cinfo->unread_marker = c;
 800e694:	f8c8 51b4 	str.w	r5, [r8, #436]	; 0x1b4
  return TRUE;
 800e698:	2001      	movs	r0, #1
  INPUT_SYNC(cinfo);
 800e69a:	e9c6 4700 	strd	r4, r7, [r6]
  return TRUE;
 800e69e:	e7c5      	b.n	800e62c <next_marker+0x18>

0800e6a0 <read_restart_marker>:
METHODDEF(boolean)
read_restart_marker (j_decompress_ptr cinfo)
{
  /* Obtain a marker unless we already did. */
  /* Note that next_marker will complain if it skips any data. */
  if (cinfo->unread_marker == 0) {
 800e6a0:	f8d0 31b4 	ldr.w	r3, [r0, #436]	; 0x1b4
{
 800e6a4:	b510      	push	{r4, lr}
 800e6a6:	4604      	mov	r4, r0
  if (cinfo->unread_marker == 0) {
 800e6a8:	b1e3      	cbz	r3, 800e6e4 <read_restart_marker+0x44>
    if (! next_marker(cinfo))
      return FALSE;
  }

  if (cinfo->unread_marker ==
      ((int) M_RST0 + cinfo->marker->next_restart_num)) {
 800e6aa:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
  if (cinfo->unread_marker ==
 800e6ae:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
      ((int) M_RST0 + cinfo->marker->next_restart_num)) {
 800e6b2:	6959      	ldr	r1, [r3, #20]
 800e6b4:	f101 03d0 	add.w	r3, r1, #208	; 0xd0
  if (cinfo->unread_marker ==
 800e6b8:	429a      	cmp	r2, r3
 800e6ba:	d119      	bne.n	800e6f0 <read_restart_marker+0x50>
    /* Normal case --- swallow the marker and let entropy decoder continue */
    TRACEMS1(cinfo, 3, JTRC_RST, cinfo->marker->next_restart_num);
 800e6bc:	6823      	ldr	r3, [r4, #0]
 800e6be:	2264      	movs	r2, #100	; 0x64
 800e6c0:	4620      	mov	r0, r4
 800e6c2:	e9c3 2105 	strd	r2, r1, [r3, #20]
 800e6c6:	685b      	ldr	r3, [r3, #4]
 800e6c8:	2103      	movs	r1, #3
 800e6ca:	4798      	blx	r3
    cinfo->unread_marker = 0;
 800e6cc:	2300      	movs	r3, #0
 800e6ce:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
					    cinfo->marker->next_restart_num))
      return FALSE;
  }

  /* Update next-restart state */
  cinfo->marker->next_restart_num = (cinfo->marker->next_restart_num + 1) & 7;
 800e6d2:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc

  return TRUE;
 800e6d6:	2001      	movs	r0, #1
  cinfo->marker->next_restart_num = (cinfo->marker->next_restart_num + 1) & 7;
 800e6d8:	6953      	ldr	r3, [r2, #20]
 800e6da:	3301      	adds	r3, #1
 800e6dc:	f003 0307 	and.w	r3, r3, #7
 800e6e0:	6153      	str	r3, [r2, #20]
  return TRUE;
 800e6e2:	e004      	b.n	800e6ee <read_restart_marker+0x4e>
    if (! next_marker(cinfo))
 800e6e4:	f7ff ff96 	bl	800e614 <next_marker>
 800e6e8:	2800      	cmp	r0, #0
 800e6ea:	d1de      	bne.n	800e6aa <read_restart_marker+0xa>
      return FALSE;
 800e6ec:	2000      	movs	r0, #0
}
 800e6ee:	bd10      	pop	{r4, pc}
    if (! (*cinfo->src->resync_to_restart) (cinfo,
 800e6f0:	69a3      	ldr	r3, [r4, #24]
 800e6f2:	4620      	mov	r0, r4
 800e6f4:	695b      	ldr	r3, [r3, #20]
 800e6f6:	4798      	blx	r3
 800e6f8:	2800      	cmp	r0, #0
 800e6fa:	d1ea      	bne.n	800e6d2 <read_restart_marker+0x32>
 800e6fc:	e7f6      	b.n	800e6ec <read_restart_marker+0x4c>

0800e6fe <reset_marker_reader>:
METHODDEF(void)
reset_marker_reader (j_decompress_ptr cinfo)
{
  my_marker_ptr marker = (my_marker_ptr) cinfo->marker;

  cinfo->comp_info = NULL;		/* until allocated by get_sof */
 800e6fe:	2300      	movs	r3, #0
  my_marker_ptr marker = (my_marker_ptr) cinfo->marker;
 800e700:	f8d0 21cc 	ldr.w	r2, [r0, #460]	; 0x1cc
  cinfo->comp_info = NULL;		/* until allocated by get_sof */
 800e704:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8
  cinfo->input_scan_number = 0;		/* no SOS seen yet */
 800e708:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
  cinfo->unread_marker = 0;		/* no pending marker */
 800e70c:	f8c0 31b4 	str.w	r3, [r0, #436]	; 0x1b4
  marker->pub.saw_SOI = FALSE;		/* set internal state too */
  marker->pub.saw_SOF = FALSE;
  marker->pub.discarded_bytes = 0;
 800e710:	6193      	str	r3, [r2, #24]
  marker->cur_marker = NULL;
 800e712:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
  marker->pub.saw_SOF = FALSE;
 800e716:	e9c2 3303 	strd	r3, r3, [r2, #12]
}
 800e71a:	4770      	bx	lr

0800e71c <get_dht>:
{
 800e71c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INPUT_VARS(cinfo);
 800e720:	6987      	ldr	r7, [r0, #24]
{
 800e722:	b0c9      	sub	sp, #292	; 0x124
 800e724:	4605      	mov	r5, r0
  INPUT_VARS(cinfo);
 800e726:	687e      	ldr	r6, [r7, #4]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e728:	b1fe      	cbz	r6, 800e76a <get_dht+0x4e>
  INPUT_VARS(cinfo);
 800e72a:	683c      	ldr	r4, [r7, #0]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e72c:	f894 9000 	ldrb.w	r9, [r4]
 800e730:	3e01      	subs	r6, #1
 800e732:	ea4f 2809 	mov.w	r8, r9, lsl #8
 800e736:	d022      	beq.n	800e77e <get_dht+0x62>
 800e738:	3401      	adds	r4, #1
 800e73a:	f814 9b01 	ldrb.w	r9, [r4], #1
 800e73e:	3e01      	subs	r6, #1
      INPUT_BYTE(cinfo, bits[i], return FALSE);
 800e740:	f10d 0b0c 	add.w	fp, sp, #12
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e744:	44c1      	add	r9, r8
  length -= 2;
 800e746:	f1a9 0902 	sub.w	r9, r9, #2
  while (length > 16) {
 800e74a:	f1b9 0f10 	cmp.w	r9, #16
 800e74e:	dc1e      	bgt.n	800e78e <get_dht+0x72>
  if (length != 0)
 800e750:	f1b9 0f00 	cmp.w	r9, #0
 800e754:	d005      	beq.n	800e762 <get_dht+0x46>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 800e756:	682b      	ldr	r3, [r5, #0]
 800e758:	220c      	movs	r2, #12
 800e75a:	4628      	mov	r0, r5
 800e75c:	615a      	str	r2, [r3, #20]
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	4798      	blx	r3
  return TRUE;
 800e762:	2001      	movs	r0, #1
  INPUT_SYNC(cinfo);
 800e764:	e9c7 4600 	strd	r4, r6, [r7]
  return TRUE;
 800e768:	e003      	b.n	800e772 <get_dht+0x56>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	4798      	blx	r3
 800e76e:	b918      	cbnz	r0, 800e778 <get_dht+0x5c>
 800e770:	2000      	movs	r0, #0
}
 800e772:	b049      	add	sp, #292	; 0x124
 800e774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e778:	e9d7 4600 	ldrd	r4, r6, [r7]
 800e77c:	e7d6      	b.n	800e72c <get_dht+0x10>
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	4628      	mov	r0, r5
 800e782:	4798      	blx	r3
 800e784:	2800      	cmp	r0, #0
 800e786:	d0f3      	beq.n	800e770 <get_dht+0x54>
 800e788:	e9d7 4600 	ldrd	r4, r6, [r7]
 800e78c:	e7d5      	b.n	800e73a <get_dht+0x1e>
    INPUT_BYTE(cinfo, index, return FALSE);
 800e78e:	b936      	cbnz	r6, 800e79e <get_dht+0x82>
 800e790:	68fa      	ldr	r2, [r7, #12]
 800e792:	4628      	mov	r0, r5
 800e794:	4790      	blx	r2
 800e796:	2800      	cmp	r0, #0
 800e798:	d0ea      	beq.n	800e770 <get_dht+0x54>
 800e79a:	e9d7 4600 	ldrd	r4, r6, [r7]
 800e79e:	f814 8b01 	ldrb.w	r8, [r4], #1
    TRACEMS1(cinfo, 1, JTRC_DHT, index);
 800e7a2:	2152      	movs	r1, #82	; 0x52
 800e7a4:	682a      	ldr	r2, [r5, #0]
 800e7a6:	4628      	mov	r0, r5
    INPUT_BYTE(cinfo, index, return FALSE);
 800e7a8:	f8cd 8000 	str.w	r8, [sp]
 800e7ac:	3e01      	subs	r6, #1
    count = 0;
 800e7ae:	f04f 0a00 	mov.w	sl, #0
    TRACEMS1(cinfo, 1, JTRC_DHT, index);
 800e7b2:	e9c2 1805 	strd	r1, r8, [r2, #20]
 800e7b6:	6852      	ldr	r2, [r2, #4]
 800e7b8:	2101      	movs	r1, #1
 800e7ba:	4790      	blx	r2
    for (i = 1; i <= 16; i++) {
 800e7bc:	2201      	movs	r2, #1
      INPUT_BYTE(cinfo, bits[i], return FALSE);
 800e7be:	b946      	cbnz	r6, 800e7d2 <get_dht+0xb6>
 800e7c0:	68f9      	ldr	r1, [r7, #12]
 800e7c2:	4628      	mov	r0, r5
 800e7c4:	9201      	str	r2, [sp, #4]
 800e7c6:	4788      	blx	r1
 800e7c8:	2800      	cmp	r0, #0
 800e7ca:	d0d1      	beq.n	800e770 <get_dht+0x54>
 800e7cc:	9a01      	ldr	r2, [sp, #4]
 800e7ce:	e9d7 4600 	ldrd	r4, r6, [r7]
 800e7d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e7d6:	3e01      	subs	r6, #1
 800e7d8:	f802 100b 	strb.w	r1, [r2, fp]
    for (i = 1; i <= 16; i++) {
 800e7dc:	3201      	adds	r2, #1
      count += bits[i];
 800e7de:	448a      	add	sl, r1
    for (i = 1; i <= 16; i++) {
 800e7e0:	2a11      	cmp	r2, #17
 800e7e2:	d1ec      	bne.n	800e7be <get_dht+0xa2>
    TRACEMS8(cinfo, 2, JTRC_HUFFBITS,
 800e7e4:	682a      	ldr	r2, [r5, #0]
    length -= 1 + 16;
 800e7e6:	f1a9 0311 	sub.w	r3, r9, #17
    TRACEMS8(cinfo, 2, JTRC_HUFFBITS,
 800e7ea:	f89b 1001 	ldrb.w	r1, [fp, #1]
 800e7ee:	f04f 0958 	mov.w	r9, #88	; 0x58
 800e7f2:	4628      	mov	r0, r5
    length -= 1 + 16;
 800e7f4:	9301      	str	r3, [sp, #4]
    TRACEMS8(cinfo, 2, JTRC_HUFFBITS,
 800e7f6:	6191      	str	r1, [r2, #24]
 800e7f8:	f89b 1002 	ldrb.w	r1, [fp, #2]
 800e7fc:	f8c2 9014 	str.w	r9, [r2, #20]
 800e800:	61d1      	str	r1, [r2, #28]
 800e802:	f89b 1003 	ldrb.w	r1, [fp, #3]
 800e806:	6211      	str	r1, [r2, #32]
 800e808:	f89b 1004 	ldrb.w	r1, [fp, #4]
 800e80c:	6251      	str	r1, [r2, #36]	; 0x24
 800e80e:	f89b 1005 	ldrb.w	r1, [fp, #5]
 800e812:	6291      	str	r1, [r2, #40]	; 0x28
 800e814:	f89b 1006 	ldrb.w	r1, [fp, #6]
 800e818:	62d1      	str	r1, [r2, #44]	; 0x2c
 800e81a:	f89b 1007 	ldrb.w	r1, [fp, #7]
 800e81e:	6311      	str	r1, [r2, #48]	; 0x30
 800e820:	f89b 1008 	ldrb.w	r1, [fp, #8]
 800e824:	6351      	str	r1, [r2, #52]	; 0x34
 800e826:	2102      	movs	r1, #2
 800e828:	6852      	ldr	r2, [r2, #4]
 800e82a:	4790      	blx	r2
    TRACEMS8(cinfo, 2, JTRC_HUFFBITS,
 800e82c:	682a      	ldr	r2, [r5, #0]
 800e82e:	f89b 1009 	ldrb.w	r1, [fp, #9]
 800e832:	4628      	mov	r0, r5
 800e834:	f8c2 9014 	str.w	r9, [r2, #20]
 800e838:	6191      	str	r1, [r2, #24]
 800e83a:	f89b 100a 	ldrb.w	r1, [fp, #10]
 800e83e:	61d1      	str	r1, [r2, #28]
 800e840:	f89b 100b 	ldrb.w	r1, [fp, #11]
 800e844:	6211      	str	r1, [r2, #32]
 800e846:	f89b 100c 	ldrb.w	r1, [fp, #12]
 800e84a:	6251      	str	r1, [r2, #36]	; 0x24
 800e84c:	f89b 100d 	ldrb.w	r1, [fp, #13]
 800e850:	6291      	str	r1, [r2, #40]	; 0x28
 800e852:	f89b 100e 	ldrb.w	r1, [fp, #14]
 800e856:	62d1      	str	r1, [r2, #44]	; 0x2c
 800e858:	f89b 100f 	ldrb.w	r1, [fp, #15]
 800e85c:	6311      	str	r1, [r2, #48]	; 0x30
 800e85e:	f89b 1010 	ldrb.w	r1, [fp, #16]
 800e862:	6351      	str	r1, [r2, #52]	; 0x34
 800e864:	2102      	movs	r1, #2
 800e866:	6852      	ldr	r2, [r2, #4]
 800e868:	4790      	blx	r2
    if (count > 256 || ((INT32) count) > length)
 800e86a:	f5ba 7f80 	cmp.w	sl, #256	; 0x100
 800e86e:	dc02      	bgt.n	800e876 <get_dht+0x15a>
 800e870:	9b01      	ldr	r3, [sp, #4]
 800e872:	4553      	cmp	r3, sl
 800e874:	da05      	bge.n	800e882 <get_dht+0x166>
      ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 800e876:	682a      	ldr	r2, [r5, #0]
 800e878:	2109      	movs	r1, #9
 800e87a:	4628      	mov	r0, r5
 800e87c:	6151      	str	r1, [r2, #20]
 800e87e:	6812      	ldr	r2, [r2, #0]
 800e880:	4790      	blx	r2
 800e882:	f04f 0900 	mov.w	r9, #0
      INPUT_BYTE(cinfo, huffval[i], return FALSE);
 800e886:	a908      	add	r1, sp, #32
    for (i = 0; i < count; i++)
 800e888:	45d1      	cmp	r9, sl
 800e88a:	d13f      	bne.n	800e90c <get_dht+0x1f0>
    if (index & 0x10) {		/* AC table definition */
 800e88c:	f018 0f10 	tst.w	r8, #16
    length -= count;
 800e890:	9b01      	ldr	r3, [sp, #4]
 800e892:	eba3 0909 	sub.w	r9, r3, r9
      index -= 0x10;
 800e896:	bf17      	itett	ne
 800e898:	f1a8 0310 	subne.w	r3, r8, #16
      htblptr = &cinfo->dc_huff_tbl_ptrs[index];
 800e89c:	f108 082d 	addeq.w	r8, r8, #45	; 0x2d
      htblptr = &cinfo->ac_huff_tbl_ptrs[index];
 800e8a0:	f108 0821 	addne.w	r8, r8, #33	; 0x21
      index -= 0x10;
 800e8a4:	9300      	strne	r3, [sp, #0]
    if (index < 0 || index >= NUM_HUFF_TBLS)
 800e8a6:	9b00      	ldr	r3, [sp, #0]
      htblptr = &cinfo->dc_huff_tbl_ptrs[index];
 800e8a8:	eb05 0888 	add.w	r8, r5, r8, lsl #2
    if (index < 0 || index >= NUM_HUFF_TBLS)
 800e8ac:	2b03      	cmp	r3, #3
 800e8ae:	d906      	bls.n	800e8be <get_dht+0x1a2>
      ERREXIT1(cinfo, JERR_DHT_INDEX, index);
 800e8b0:	682a      	ldr	r2, [r5, #0]
 800e8b2:	211f      	movs	r1, #31
 800e8b4:	4628      	mov	r0, r5
 800e8b6:	e9c2 1305 	strd	r1, r3, [r2, #20]
 800e8ba:	6812      	ldr	r2, [r2, #0]
 800e8bc:	4790      	blx	r2
    if (*htblptr == NULL)
 800e8be:	f8d8 2000 	ldr.w	r2, [r8]
 800e8c2:	b922      	cbnz	r2, 800e8ce <get_dht+0x1b2>
      *htblptr = jpeg_alloc_huff_table((j_common_ptr) cinfo);
 800e8c4:	4628      	mov	r0, r5
 800e8c6:	f7fb fb8b 	bl	8009fe0 <jpeg_alloc_huff_table>
 800e8ca:	f8c8 0000 	str.w	r0, [r8]
    MEMCOPY((*htblptr)->bits, bits, SIZEOF((*htblptr)->bits));
 800e8ce:	2200      	movs	r2, #0
 800e8d0:	46de      	mov	lr, fp
 800e8d2:	f10d 0a1c 	add.w	sl, sp, #28
 800e8d6:	f88b 2000 	strb.w	r2, [fp]
 800e8da:	f8d8 2000 	ldr.w	r2, [r8]
 800e8de:	46f4      	mov	ip, lr
 800e8e0:	3208      	adds	r2, #8
 800e8e2:	e8bc 0003 	ldmia.w	ip!, {r0, r1}
 800e8e6:	45d4      	cmp	ip, sl
 800e8e8:	f842 0c08 	str.w	r0, [r2, #-8]
 800e8ec:	f842 1c04 	str.w	r1, [r2, #-4]
 800e8f0:	46e6      	mov	lr, ip
 800e8f2:	d1f4      	bne.n	800e8de <get_dht+0x1c2>
 800e8f4:	f89c 1000 	ldrb.w	r1, [ip]
 800e8f8:	7011      	strb	r1, [r2, #0]
    MEMCOPY((*htblptr)->huffval, huffval, SIZEOF((*htblptr)->huffval));
 800e8fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e8fe:	f8d8 0000 	ldr.w	r0, [r8]
 800e902:	a908      	add	r1, sp, #32
 800e904:	3011      	adds	r0, #17
 800e906:	f01b fc77 	bl	802a1f8 <memcpy>
 800e90a:	e71e      	b.n	800e74a <get_dht+0x2e>
      INPUT_BYTE(cinfo, huffval[i], return FALSE);
 800e90c:	b946      	cbnz	r6, 800e920 <get_dht+0x204>
 800e90e:	68fa      	ldr	r2, [r7, #12]
 800e910:	4628      	mov	r0, r5
 800e912:	4790      	blx	r2
 800e914:	2800      	cmp	r0, #0
 800e916:	f43f af2b 	beq.w	800e770 <get_dht+0x54>
 800e91a:	a908      	add	r1, sp, #32
 800e91c:	e9d7 4600 	ldrd	r4, r6, [r7]
 800e920:	f814 2b01 	ldrb.w	r2, [r4], #1
 800e924:	3e01      	subs	r6, #1
 800e926:	f809 2001 	strb.w	r2, [r9, r1]
    for (i = 0; i < count; i++)
 800e92a:	f109 0901 	add.w	r9, r9, #1
 800e92e:	e7ab      	b.n	800e888 <get_dht+0x16c>

0800e930 <read_markers>:
{
 800e930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e934:	4604      	mov	r4, r0
 800e936:	b085      	sub	sp, #20
    if (cinfo->unread_marker == 0) {
 800e938:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
 800e93c:	bb2b      	cbnz	r3, 800e98a <read_markers+0x5a>
      if (! cinfo->marker->saw_SOI) {
 800e93e:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800e942:	68db      	ldr	r3, [r3, #12]
 800e944:	2b00      	cmp	r3, #0
 800e946:	d17c      	bne.n	800ea42 <read_markers+0x112>
  INPUT_VARS(cinfo);
 800e948:	69a7      	ldr	r7, [r4, #24]
 800e94a:	687b      	ldr	r3, [r7, #4]
  INPUT_BYTE(cinfo, c, return FALSE);
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d06a      	beq.n	800ea26 <read_markers+0xf6>
  INPUT_VARS(cinfo);
 800e950:	683d      	ldr	r5, [r7, #0]
  INPUT_BYTE(cinfo, c2, return FALSE);
 800e952:	3b01      	subs	r3, #1
  INPUT_BYTE(cinfo, c, return FALSE);
 800e954:	f895 8000 	ldrb.w	r8, [r5]
  INPUT_BYTE(cinfo, c2, return FALSE);
 800e958:	d06c      	beq.n	800ea34 <read_markers+0x104>
  INPUT_BYTE(cinfo, c, return FALSE);
 800e95a:	3501      	adds	r5, #1
  if (c != 0xFF || c2 != (int) M_SOI)
 800e95c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
  INPUT_BYTE(cinfo, c2, return FALSE);
 800e960:	f103 36ff 	add.w	r6, r3, #4294967295
 800e964:	f815 9b01 	ldrb.w	r9, [r5], #1
  if (c != 0xFF || c2 != (int) M_SOI)
 800e968:	d102      	bne.n	800e970 <read_markers+0x40>
 800e96a:	f1b9 0fd8 	cmp.w	r9, #216	; 0xd8
 800e96e:	d008      	beq.n	800e982 <read_markers+0x52>
    ERREXIT2(cinfo, JERR_NO_SOI, c, c2);
 800e970:	6823      	ldr	r3, [r4, #0]
 800e972:	2237      	movs	r2, #55	; 0x37
 800e974:	4620      	mov	r0, r4
 800e976:	f8c3 901c 	str.w	r9, [r3, #28]
 800e97a:	e9c3 2805 	strd	r2, r8, [r3, #20]
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	4798      	blx	r3
  cinfo->unread_marker = c2;
 800e982:	f8c4 91b4 	str.w	r9, [r4, #436]	; 0x1b4
  INPUT_SYNC(cinfo);
 800e986:	e9c7 5600 	strd	r5, r6, [r7]
    switch (cinfo->unread_marker) {
 800e98a:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
 800e98e:	2b01      	cmp	r3, #1
 800e990:	f000 83c3 	beq.w	800f11a <read_markers+0x7ea>
 800e994:	f1a3 02c0 	sub.w	r2, r3, #192	; 0xc0
 800e998:	2a3e      	cmp	r2, #62	; 0x3e
 800e99a:	f200 83cb 	bhi.w	800f134 <read_markers+0x804>
 800e99e:	2a3e      	cmp	r2, #62	; 0x3e
 800e9a0:	f200 83c8 	bhi.w	800f134 <read_markers+0x804>
 800e9a4:	e8df f012 	tbh	[pc, r2, lsl #1]
 800e9a8:	009b0092 	.word	0x009b0092
 800e9ac:	00a7009e 	.word	0x00a7009e
 800e9b0:	00a70239 	.word	0x00a70239
 800e9b4:	00a700a7 	.word	0x00a700a7
 800e9b8:	00a200a7 	.word	0x00a200a7
 800e9bc:	00a700a4 	.word	0x00a700a4
 800e9c0:	00a701bf 	.word	0x00a701bf
 800e9c4:	00a700a7 	.word	0x00a700a7
 800e9c8:	03b903b9 	.word	0x03b903b9
 800e9cc:	03b903b9 	.word	0x03b903b9
 800e9d0:	03b903b9 	.word	0x03b903b9
 800e9d4:	03b903b9 	.word	0x03b903b9
 800e9d8:	01b30054 	.word	0x01b30054
 800e9dc:	023d00af 	.word	0x023d00af
 800e9e0:	035b03c2 	.word	0x035b03c2
 800e9e4:	03c603c6 	.word	0x03c603c6
 800e9e8:	03ad03ad 	.word	0x03ad03ad
 800e9ec:	03ad03ad 	.word	0x03ad03ad
 800e9f0:	03ad03ad 	.word	0x03ad03ad
 800e9f4:	03ad03ad 	.word	0x03ad03ad
 800e9f8:	03ad03ad 	.word	0x03ad03ad
 800e9fc:	03ad03ad 	.word	0x03ad03ad
 800ea00:	03ad03ad 	.word	0x03ad03ad
 800ea04:	03ad03ad 	.word	0x03ad03ad
 800ea08:	03c603c6 	.word	0x03c603c6
 800ea0c:	03c603c6 	.word	0x03c603c6
 800ea10:	03c603c6 	.word	0x03c603c6
 800ea14:	03c603c6 	.word	0x03c603c6
 800ea18:	03c603c6 	.word	0x03c603c6
 800ea1c:	03c603c6 	.word	0x03c603c6
 800ea20:	03c603c6 	.word	0x03c603c6
 800ea24:	03b5      	.short	0x03b5
  INPUT_BYTE(cinfo, c, return FALSE);
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	4620      	mov	r0, r4
 800ea2a:	4798      	blx	r3
 800ea2c:	b170      	cbz	r0, 800ea4c <read_markers+0x11c>
 800ea2e:	e9d7 5300 	ldrd	r5, r3, [r7]
 800ea32:	e78e      	b.n	800e952 <read_markers+0x22>
  INPUT_BYTE(cinfo, c2, return FALSE);
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	4620      	mov	r0, r4
 800ea38:	4798      	blx	r3
 800ea3a:	b138      	cbz	r0, 800ea4c <read_markers+0x11c>
 800ea3c:	e9d7 5300 	ldrd	r5, r3, [r7]
 800ea40:	e78c      	b.n	800e95c <read_markers+0x2c>
	if (! next_marker(cinfo))
 800ea42:	4620      	mov	r0, r4
 800ea44:	f7ff fde6 	bl	800e614 <next_marker>
 800ea48:	2800      	cmp	r0, #0
 800ea4a:	d19e      	bne.n	800e98a <read_markers+0x5a>
	  return JPEG_SUSPENDED;
 800ea4c:	2000      	movs	r0, #0
 800ea4e:	e0e9      	b.n	800ec24 <read_markers+0x2f4>
  TRACEMS(cinfo, 1, JTRC_SOI);
 800ea50:	6823      	ldr	r3, [r4, #0]
 800ea52:	2268      	movs	r2, #104	; 0x68
 800ea54:	2101      	movs	r1, #1
 800ea56:	4620      	mov	r0, r4
 800ea58:	615a      	str	r2, [r3, #20]
 800ea5a:	685b      	ldr	r3, [r3, #4]
 800ea5c:	4798      	blx	r3
  if (cinfo->marker->saw_SOI)
 800ea5e:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800ea62:	68db      	ldr	r3, [r3, #12]
 800ea64:	b12b      	cbz	r3, 800ea72 <read_markers+0x142>
    ERREXIT(cinfo, JERR_SOI_DUPLICATE);
 800ea66:	6823      	ldr	r3, [r4, #0]
 800ea68:	223f      	movs	r2, #63	; 0x3f
 800ea6a:	4620      	mov	r0, r4
 800ea6c:	615a      	str	r2, [r3, #20]
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	4798      	blx	r3
    cinfo->arith_dc_L[i] = 0;
 800ea72:	2210      	movs	r2, #16
 800ea74:	2100      	movs	r1, #0
 800ea76:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
 800ea7a:	f01b fbcb 	bl	802a214 <memset>
    cinfo->arith_dc_U[i] = 1;
 800ea7e:	2210      	movs	r2, #16
 800ea80:	2101      	movs	r1, #1
 800ea82:	f104 00f8 	add.w	r0, r4, #248	; 0xf8
 800ea86:	f01b fbc5 	bl	802a214 <memset>
    cinfo->arith_ac_K[i] = 5;
 800ea8a:	2210      	movs	r2, #16
 800ea8c:	2105      	movs	r1, #5
 800ea8e:	f504 7084 	add.w	r0, r4, #264	; 0x108
 800ea92:	f01b fbbf 	bl	802a214 <memset>
  cinfo->JFIF_major_version = 1; /* set default JFIF APP0 values */
 800ea96:	f240 1201 	movw	r2, #257	; 0x101
  cinfo->jpeg_color_space = JCS_UNKNOWN;
 800ea9a:	2300      	movs	r3, #0
  cinfo->JFIF_major_version = 1; /* set default JFIF APP0 values */
 800ea9c:	f8a4 2120 	strh.w	r2, [r4, #288]	; 0x120
  cinfo->X_density = 1;
 800eaa0:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  cinfo->jpeg_color_space = JCS_UNKNOWN;
 800eaa4:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  cinfo->CCIR601_sampling = FALSE; /* Assume non-CCIR sampling??? */
 800eaa8:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
  cinfo->density_unit = 0;
 800eaac:	f884 3122 	strb.w	r3, [r4, #290]	; 0x122
  cinfo->Adobe_transform = 0;
 800eab0:	f884 312c 	strb.w	r3, [r4, #300]	; 0x12c
  cinfo->saw_Adobe_marker = FALSE;
 800eab4:	e9c4 2349 	strd	r2, r3, [r4, #292]	; 0x124
  cinfo->saw_JFIF_marker = FALSE;
 800eab8:	e9c4 3346 	strd	r3, r3, [r4, #280]	; 0x118
  cinfo->marker->saw_SOI = TRUE;
 800eabc:	2201      	movs	r2, #1
 800eabe:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800eac2:	60da      	str	r2, [r3, #12]
    cinfo->unread_marker = 0;
 800eac4:	2300      	movs	r3, #0
 800eac6:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
    if (cinfo->unread_marker == 0) {
 800eaca:	e735      	b.n	800e938 <read_markers+0x8>
      if (! get_sof(cinfo, TRUE, FALSE, FALSE))
 800eacc:	2300      	movs	r3, #0
 800eace:	2101      	movs	r1, #1
 800ead0:	461a      	mov	r2, r3
      if (! get_sof(cinfo, FALSE, TRUE, TRUE))
 800ead2:	4620      	mov	r0, r4
 800ead4:	f7ff faec 	bl	800e0b0 <get_sof>
      if (! skip_variable(cinfo))
 800ead8:	2800      	cmp	r0, #0
 800eada:	d1f3      	bne.n	800eac4 <read_markers+0x194>
 800eadc:	e7b6      	b.n	800ea4c <read_markers+0x11c>
      if (! get_sof(cinfo, FALSE, FALSE, FALSE))
 800eade:	2300      	movs	r3, #0
      if (! get_sof(cinfo, FALSE, FALSE, TRUE))
 800eae0:	2200      	movs	r2, #0
 800eae2:	e001      	b.n	800eae8 <read_markers+0x1b8>
      if (! get_sof(cinfo, FALSE, TRUE, FALSE))
 800eae4:	2300      	movs	r3, #0
 800eae6:	2201      	movs	r2, #1
      if (! get_sof(cinfo, FALSE, TRUE, TRUE))
 800eae8:	2100      	movs	r1, #0
 800eaea:	e7f2      	b.n	800ead2 <read_markers+0x1a2>
      if (! get_sof(cinfo, FALSE, FALSE, TRUE))
 800eaec:	2301      	movs	r3, #1
 800eaee:	e7f7      	b.n	800eae0 <read_markers+0x1b0>
      if (! get_sof(cinfo, FALSE, TRUE, TRUE))
 800eaf0:	2301      	movs	r3, #1
 800eaf2:	461a      	mov	r2, r3
 800eaf4:	e7f8      	b.n	800eae8 <read_markers+0x1b8>
      ERREXIT1(cinfo, JERR_SOF_UNSUPPORTED, cinfo->unread_marker);
 800eaf6:	6822      	ldr	r2, [r4, #0]
 800eaf8:	213e      	movs	r1, #62	; 0x3e
      ERREXIT1(cinfo, JERR_UNKNOWN_MARKER, cinfo->unread_marker);
 800eafa:	4620      	mov	r0, r4
 800eafc:	e9c2 1305 	strd	r1, r3, [r2, #20]
 800eb00:	6813      	ldr	r3, [r2, #0]
 800eb02:	4798      	blx	r3
      break;
 800eb04:	e7de      	b.n	800eac4 <read_markers+0x194>
  if (! cinfo->marker->saw_SOF)
 800eb06:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
  INPUT_VARS(cinfo);
 800eb0a:	69a7      	ldr	r7, [r4, #24]
  if (! cinfo->marker->saw_SOF)
 800eb0c:	691b      	ldr	r3, [r3, #16]
  INPUT_VARS(cinfo);
 800eb0e:	e9d7 5600 	ldrd	r5, r6, [r7]
  if (! cinfo->marker->saw_SOF)
 800eb12:	b92b      	cbnz	r3, 800eb20 <read_markers+0x1f0>
    ERREXIT(cinfo, JERR_SOS_NO_SOF);
 800eb14:	6823      	ldr	r3, [r4, #0]
 800eb16:	2240      	movs	r2, #64	; 0x40
 800eb18:	4620      	mov	r0, r4
 800eb1a:	615a      	str	r2, [r3, #20]
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	4798      	blx	r3
  INPUT_2BYTES(cinfo, length, return FALSE);
 800eb20:	b936      	cbnz	r6, 800eb30 <read_markers+0x200>
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	4620      	mov	r0, r4
 800eb26:	4798      	blx	r3
 800eb28:	2800      	cmp	r0, #0
 800eb2a:	d08f      	beq.n	800ea4c <read_markers+0x11c>
 800eb2c:	e9d7 5600 	ldrd	r5, r6, [r7]
 800eb30:	f895 8000 	ldrb.w	r8, [r5]
 800eb34:	3e01      	subs	r6, #1
 800eb36:	ea4f 2808 	mov.w	r8, r8, lsl #8
 800eb3a:	d076      	beq.n	800ec2a <read_markers+0x2fa>
 800eb3c:	3501      	adds	r5, #1
 800eb3e:	782b      	ldrb	r3, [r5, #0]
  INPUT_BYTE(cinfo, n, return FALSE); /* Number of components */
 800eb40:	3e01      	subs	r6, #1
  INPUT_2BYTES(cinfo, length, return FALSE);
 800eb42:	4498      	add	r8, r3
  INPUT_BYTE(cinfo, n, return FALSE); /* Number of components */
 800eb44:	d07a      	beq.n	800ec3c <read_markers+0x30c>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800eb46:	3501      	adds	r5, #1
  INPUT_BYTE(cinfo, n, return FALSE); /* Number of components */
 800eb48:	f815 9b01 	ldrb.w	r9, [r5], #1
  TRACEMS1(cinfo, 1, JTRC_SOS, n);
 800eb4c:	2269      	movs	r2, #105	; 0x69
 800eb4e:	6823      	ldr	r3, [r4, #0]
 800eb50:	2101      	movs	r1, #1
 800eb52:	4620      	mov	r0, r4
  INPUT_BYTE(cinfo, n, return FALSE); /* Number of components */
 800eb54:	3e01      	subs	r6, #1
  TRACEMS1(cinfo, 1, JTRC_SOS, n);
 800eb56:	e9c3 2905 	strd	r2, r9, [r3, #20]
 800eb5a:	685b      	ldr	r3, [r3, #4]
 800eb5c:	4798      	blx	r3
  if (length != (n * 2 + 6) || n > MAX_COMPS_IN_SCAN ||
 800eb5e:	f109 0303 	add.w	r3, r9, #3
 800eb62:	ebb8 0f43 	cmp.w	r8, r3, lsl #1
 800eb66:	d108      	bne.n	800eb7a <read_markers+0x24a>
 800eb68:	f1b9 0f04 	cmp.w	r9, #4
 800eb6c:	dc05      	bgt.n	800eb7a <read_markers+0x24a>
 800eb6e:	f1b9 0f00 	cmp.w	r9, #0
 800eb72:	d108      	bne.n	800eb86 <read_markers+0x256>
      (n == 0 && !cinfo->progressive_mode))
 800eb74:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800eb78:	b92b      	cbnz	r3, 800eb86 <read_markers+0x256>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 800eb7a:	6823      	ldr	r3, [r4, #0]
 800eb7c:	220c      	movs	r2, #12
 800eb7e:	4620      	mov	r0, r4
 800eb80:	615a      	str	r2, [r3, #20]
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	4798      	blx	r3
  cinfo->comps_in_scan = n;
 800eb86:	f504 73aa 	add.w	r3, r4, #340	; 0x154
  for (i = 0; i < n; i++) {
 800eb8a:	f04f 0a00 	mov.w	sl, #0
  cinfo->comps_in_scan = n;
 800eb8e:	f8c4 9150 	str.w	r9, [r4, #336]	; 0x150
  for (i = 0; i < n; i++) {
 800eb92:	9301      	str	r3, [sp, #4]
 800eb94:	45d1      	cmp	r9, sl
 800eb96:	dc5a      	bgt.n	800ec4e <read_markers+0x31e>
  INPUT_BYTE(cinfo, c, return FALSE);
 800eb98:	b93e      	cbnz	r6, 800ebaa <read_markers+0x27a>
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	4620      	mov	r0, r4
 800eb9e:	4798      	blx	r3
 800eba0:	2800      	cmp	r0, #0
 800eba2:	f43f af53 	beq.w	800ea4c <read_markers+0x11c>
 800eba6:	e9d7 5600 	ldrd	r5, r6, [r7]
 800ebaa:	782b      	ldrb	r3, [r5, #0]
  INPUT_BYTE(cinfo, c, return FALSE);
 800ebac:	3e01      	subs	r6, #1
  INPUT_BYTE(cinfo, c, return FALSE);
 800ebae:	f8c4 3198 	str.w	r3, [r4, #408]	; 0x198
  INPUT_BYTE(cinfo, c, return FALSE);
 800ebb2:	f000 809a 	beq.w	800ecea <read_markers+0x3ba>
  INPUT_BYTE(cinfo, c, return FALSE);
 800ebb6:	3501      	adds	r5, #1
  INPUT_BYTE(cinfo, c, return FALSE);
 800ebb8:	782b      	ldrb	r3, [r5, #0]
  INPUT_BYTE(cinfo, c, return FALSE);
 800ebba:	3e01      	subs	r6, #1
  INPUT_BYTE(cinfo, c, return FALSE);
 800ebbc:	f8c4 319c 	str.w	r3, [r4, #412]	; 0x19c
  INPUT_BYTE(cinfo, c, return FALSE);
 800ebc0:	f000 809c 	beq.w	800ecfc <read_markers+0x3cc>
  INPUT_BYTE(cinfo, c, return FALSE);
 800ebc4:	3501      	adds	r5, #1
  INPUT_BYTE(cinfo, c, return FALSE);
 800ebc6:	f815 3b01 	ldrb.w	r3, [r5], #1
  TRACEMS4(cinfo, 1, JTRC_SOS_PARAMS, cinfo->Ss, cinfo->Se,
 800ebca:	2101      	movs	r1, #1
 800ebcc:	4620      	mov	r0, r4
  INPUT_BYTE(cinfo, c, return FALSE);
 800ebce:	3e01      	subs	r6, #1
  cinfo->Ah = (c >> 4) & 15;
 800ebd0:	111a      	asrs	r2, r3, #4
  cinfo->Al = (c     ) & 15;
 800ebd2:	f003 030f 	and.w	r3, r3, #15
  cinfo->Ah = (c >> 4) & 15;
 800ebd6:	f8c4 21a0 	str.w	r2, [r4, #416]	; 0x1a0
  cinfo->Al = (c     ) & 15;
 800ebda:	f8c4 31a4 	str.w	r3, [r4, #420]	; 0x1a4
  TRACEMS4(cinfo, 1, JTRC_SOS_PARAMS, cinfo->Ss, cinfo->Se,
 800ebde:	f8d4 2198 	ldr.w	r2, [r4, #408]	; 0x198
 800ebe2:	6823      	ldr	r3, [r4, #0]
 800ebe4:	619a      	str	r2, [r3, #24]
 800ebe6:	f8d4 219c 	ldr.w	r2, [r4, #412]	; 0x19c
 800ebea:	61da      	str	r2, [r3, #28]
 800ebec:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
 800ebf0:	621a      	str	r2, [r3, #32]
 800ebf2:	f8d4 21a4 	ldr.w	r2, [r4, #420]	; 0x1a4
 800ebf6:	625a      	str	r2, [r3, #36]	; 0x24
 800ebf8:	226b      	movs	r2, #107	; 0x6b
 800ebfa:	615a      	str	r2, [r3, #20]
 800ebfc:	685b      	ldr	r3, [r3, #4]
 800ebfe:	4798      	blx	r3
  cinfo->marker->next_restart_num = 0;
 800ec00:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800ec04:	2200      	movs	r2, #0
 800ec06:	615a      	str	r2, [r3, #20]
  if (n) cinfo->input_scan_number++;
 800ec08:	f1b9 0f00 	cmp.w	r9, #0
 800ec0c:	d004      	beq.n	800ec18 <read_markers+0x2e8>
 800ec0e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800ec12:	3301      	adds	r3, #1
 800ec14:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      cinfo->unread_marker = 0;	/* processed the marker */
 800ec18:	2300      	movs	r3, #0
      return JPEG_REACHED_SOS;
 800ec1a:	2001      	movs	r0, #1
  INPUT_SYNC(cinfo);
 800ec1c:	e9c7 5600 	strd	r5, r6, [r7]
      cinfo->unread_marker = 0;	/* processed the marker */
 800ec20:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
}
 800ec24:	b005      	add	sp, #20
 800ec26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  INPUT_2BYTES(cinfo, length, return FALSE);
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	4620      	mov	r0, r4
 800ec2e:	4798      	blx	r3
 800ec30:	2800      	cmp	r0, #0
 800ec32:	f43f af0b 	beq.w	800ea4c <read_markers+0x11c>
 800ec36:	e9d7 5600 	ldrd	r5, r6, [r7]
 800ec3a:	e780      	b.n	800eb3e <read_markers+0x20e>
  INPUT_BYTE(cinfo, n, return FALSE); /* Number of components */
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	4620      	mov	r0, r4
 800ec40:	4798      	blx	r3
 800ec42:	2800      	cmp	r0, #0
 800ec44:	f43f af02 	beq.w	800ea4c <read_markers+0x11c>
 800ec48:	e9d7 5600 	ldrd	r5, r6, [r7]
 800ec4c:	e77c      	b.n	800eb48 <read_markers+0x218>
    INPUT_BYTE(cinfo, cc, return FALSE);
 800ec4e:	b93e      	cbnz	r6, 800ec60 <read_markers+0x330>
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	4620      	mov	r0, r4
 800ec54:	4798      	blx	r3
 800ec56:	2800      	cmp	r0, #0
 800ec58:	f43f aef8 	beq.w	800ea4c <read_markers+0x11c>
 800ec5c:	e9d7 5600 	ldrd	r5, r6, [r7]
    INPUT_BYTE(cinfo, c, return FALSE);
 800ec60:	3e01      	subs	r6, #1
    INPUT_BYTE(cinfo, cc, return FALSE);
 800ec62:	f895 b000 	ldrb.w	fp, [r5]
    INPUT_BYTE(cinfo, c, return FALSE);
 800ec66:	d02f      	beq.n	800ecc8 <read_markers+0x398>
    INPUT_BYTE(cinfo, cc, return FALSE);
 800ec68:	3501      	adds	r5, #1
    INPUT_BYTE(cinfo, c, return FALSE);
 800ec6a:	3e01      	subs	r6, #1
 800ec6c:	f815 3b01 	ldrb.w	r3, [r5], #1
    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800ec70:	f8d4 80d8 	ldr.w	r8, [r4, #216]	; 0xd8
 800ec74:	2000      	movs	r0, #0
 800ec76:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800ec78:	4290      	cmp	r0, r2
 800ec7a:	db2e      	blt.n	800ecda <read_markers+0x3aa>
    ERREXIT1(cinfo, JERR_BAD_COMPONENT_ID, cc);
 800ec7c:	6821      	ldr	r1, [r4, #0]
 800ec7e:	4620      	mov	r0, r4
 800ec80:	9302      	str	r3, [sp, #8]
 800ec82:	2304      	movs	r3, #4
 800ec84:	e9c1 3b05 	strd	r3, fp, [r1, #20]
 800ec88:	6809      	ldr	r1, [r1, #0]
 800ec8a:	4788      	blx	r1
 800ec8c:	9b02      	ldr	r3, [sp, #8]
    cinfo->cur_comp_info[i] = compptr;
 800ec8e:	9a01      	ldr	r2, [sp, #4]
    compptr->dc_tbl_no = (c >> 4) & 15;
 800ec90:	1119      	asrs	r1, r3, #4
    compptr->ac_tbl_no = (c     ) & 15;
 800ec92:	f003 030f 	and.w	r3, r3, #15
    TRACEMS3(cinfo, 1, JTRC_SOS_COMPONENT, cc,
 800ec96:	4620      	mov	r0, r4
    cinfo->cur_comp_info[i] = compptr;
 800ec98:	f842 8b04 	str.w	r8, [r2], #4
  for (i = 0; i < n; i++) {
 800ec9c:	f10a 0a01 	add.w	sl, sl, #1
    compptr->dc_tbl_no = (c >> 4) & 15;
 800eca0:	f8c8 1014 	str.w	r1, [r8, #20]
    TRACEMS3(cinfo, 1, JTRC_SOS_COMPONENT, cc,
 800eca4:	6821      	ldr	r1, [r4, #0]
    compptr->ac_tbl_no = (c     ) & 15;
 800eca6:	f8c8 3018 	str.w	r3, [r8, #24]
    TRACEMS3(cinfo, 1, JTRC_SOS_COMPONENT, cc,
 800ecaa:	f8c1 b018 	str.w	fp, [r1, #24]
 800ecae:	f8d8 3014 	ldr.w	r3, [r8, #20]
    cinfo->cur_comp_info[i] = compptr;
 800ecb2:	9201      	str	r2, [sp, #4]
    TRACEMS3(cinfo, 1, JTRC_SOS_COMPONENT, cc,
 800ecb4:	61cb      	str	r3, [r1, #28]
 800ecb6:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800ecba:	620b      	str	r3, [r1, #32]
 800ecbc:	236a      	movs	r3, #106	; 0x6a
 800ecbe:	614b      	str	r3, [r1, #20]
 800ecc0:	684b      	ldr	r3, [r1, #4]
 800ecc2:	2101      	movs	r1, #1
 800ecc4:	4798      	blx	r3
  for (i = 0; i < n; i++) {
 800ecc6:	e765      	b.n	800eb94 <read_markers+0x264>
    INPUT_BYTE(cinfo, c, return FALSE);
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	4620      	mov	r0, r4
 800eccc:	4798      	blx	r3
 800ecce:	2800      	cmp	r0, #0
 800ecd0:	f43f aebc 	beq.w	800ea4c <read_markers+0x11c>
 800ecd4:	e9d7 5600 	ldrd	r5, r6, [r7]
 800ecd8:	e7c7      	b.n	800ec6a <read_markers+0x33a>
      if (cc == compptr->component_id)
 800ecda:	f8d8 1000 	ldr.w	r1, [r8]
 800ecde:	458b      	cmp	fp, r1
 800ece0:	d0d5      	beq.n	800ec8e <read_markers+0x35e>
	 ci++, compptr++) {
 800ece2:	3001      	adds	r0, #1
 800ece4:	f108 0858 	add.w	r8, r8, #88	; 0x58
 800ece8:	e7c6      	b.n	800ec78 <read_markers+0x348>
  INPUT_BYTE(cinfo, c, return FALSE);
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	4620      	mov	r0, r4
 800ecee:	4798      	blx	r3
 800ecf0:	2800      	cmp	r0, #0
 800ecf2:	f43f aeab 	beq.w	800ea4c <read_markers+0x11c>
 800ecf6:	e9d7 5600 	ldrd	r5, r6, [r7]
 800ecfa:	e75d      	b.n	800ebb8 <read_markers+0x288>
  INPUT_BYTE(cinfo, c, return FALSE);
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	4620      	mov	r0, r4
 800ed00:	4798      	blx	r3
 800ed02:	2800      	cmp	r0, #0
 800ed04:	f43f aea2 	beq.w	800ea4c <read_markers+0x11c>
 800ed08:	e9d7 5600 	ldrd	r5, r6, [r7]
 800ed0c:	e75b      	b.n	800ebc6 <read_markers+0x296>
      TRACEMS(cinfo, 1, JTRC_EOI);
 800ed0e:	6823      	ldr	r3, [r4, #0]
 800ed10:	2257      	movs	r2, #87	; 0x57
 800ed12:	4620      	mov	r0, r4
 800ed14:	2101      	movs	r1, #1
 800ed16:	615a      	str	r2, [r3, #20]
 800ed18:	685b      	ldr	r3, [r3, #4]
 800ed1a:	4798      	blx	r3
      cinfo->unread_marker = 0;	/* processed the marker */
 800ed1c:	2300      	movs	r3, #0
      return JPEG_REACHED_EOI;
 800ed1e:	2002      	movs	r0, #2
      cinfo->unread_marker = 0;	/* processed the marker */
 800ed20:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
      return JPEG_REACHED_EOI;
 800ed24:	e77e      	b.n	800ec24 <read_markers+0x2f4>
  INPUT_VARS(cinfo);
 800ed26:	69a7      	ldr	r7, [r4, #24]
 800ed28:	687e      	ldr	r6, [r7, #4]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800ed2a:	b1e6      	cbz	r6, 800ed66 <read_markers+0x436>
  INPUT_VARS(cinfo);
 800ed2c:	683d      	ldr	r5, [r7, #0]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800ed2e:	f895 9000 	ldrb.w	r9, [r5]
 800ed32:	3e01      	subs	r6, #1
 800ed34:	ea4f 2909 	mov.w	r9, r9, lsl #8
 800ed38:	d01e      	beq.n	800ed78 <read_markers+0x448>
 800ed3a:	3501      	adds	r5, #1
 800ed3c:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ed40:	3e01      	subs	r6, #1
      ERREXIT1(cinfo, JERR_DAC_INDEX, index);
 800ed42:	f04f 0b1d 	mov.w	fp, #29
  INPUT_2BYTES(cinfo, length, return FALSE);
 800ed46:	4499      	add	r9, r3
  length -= 2;
 800ed48:	f1a9 0902 	sub.w	r9, r9, #2
  while (length > 0) {
 800ed4c:	f1b9 0f00 	cmp.w	r9, #0
 800ed50:	dc1b      	bgt.n	800ed8a <read_markers+0x45a>
  if (length != 0)
 800ed52:	d005      	beq.n	800ed60 <read_markers+0x430>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 800ed54:	6823      	ldr	r3, [r4, #0]
 800ed56:	220c      	movs	r2, #12
 800ed58:	4620      	mov	r0, r4
 800ed5a:	615a      	str	r2, [r3, #20]
 800ed5c:	681b      	ldr	r3, [r3, #0]
 800ed5e:	4798      	blx	r3
  INPUT_SYNC(cinfo);
 800ed60:	603d      	str	r5, [r7, #0]
  INPUT_SYNC(cinfo);
 800ed62:	607e      	str	r6, [r7, #4]
  return TRUE;
 800ed64:	e6ae      	b.n	800eac4 <read_markers+0x194>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	4620      	mov	r0, r4
 800ed6a:	4798      	blx	r3
 800ed6c:	2800      	cmp	r0, #0
 800ed6e:	f43f ae6d 	beq.w	800ea4c <read_markers+0x11c>
 800ed72:	e9d7 5600 	ldrd	r5, r6, [r7]
 800ed76:	e7da      	b.n	800ed2e <read_markers+0x3fe>
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	4620      	mov	r0, r4
 800ed7c:	4798      	blx	r3
 800ed7e:	2800      	cmp	r0, #0
 800ed80:	f43f ae64 	beq.w	800ea4c <read_markers+0x11c>
 800ed84:	e9d7 5600 	ldrd	r5, r6, [r7]
 800ed88:	e7d8      	b.n	800ed3c <read_markers+0x40c>
    INPUT_BYTE(cinfo, index, return FALSE);
 800ed8a:	b93e      	cbnz	r6, 800ed9c <read_markers+0x46c>
 800ed8c:	68fb      	ldr	r3, [r7, #12]
 800ed8e:	4620      	mov	r0, r4
 800ed90:	4798      	blx	r3
 800ed92:	2800      	cmp	r0, #0
 800ed94:	f43f ae5a 	beq.w	800ea4c <read_markers+0x11c>
 800ed98:	e9d7 5600 	ldrd	r5, r6, [r7]
    INPUT_BYTE(cinfo, val, return FALSE);
 800ed9c:	3e01      	subs	r6, #1
    INPUT_BYTE(cinfo, index, return FALSE);
 800ed9e:	f895 8000 	ldrb.w	r8, [r5]
    INPUT_BYTE(cinfo, val, return FALSE);
 800eda2:	d01f      	beq.n	800ede4 <read_markers+0x4b4>
    INPUT_BYTE(cinfo, index, return FALSE);
 800eda4:	3501      	adds	r5, #1
    TRACEMS2(cinfo, 1, JTRC_DAC, index, val);
 800eda6:	6822      	ldr	r2, [r4, #0]
 800eda8:	2351      	movs	r3, #81	; 0x51
    INPUT_BYTE(cinfo, val, return FALSE);
 800edaa:	f815 ab01 	ldrb.w	sl, [r5], #1
    TRACEMS2(cinfo, 1, JTRC_DAC, index, val);
 800edae:	2101      	movs	r1, #1
 800edb0:	4620      	mov	r0, r4
    INPUT_BYTE(cinfo, val, return FALSE);
 800edb2:	3e01      	subs	r6, #1
    TRACEMS2(cinfo, 1, JTRC_DAC, index, val);
 800edb4:	f8c2 a01c 	str.w	sl, [r2, #28]
    length -= 2;
 800edb8:	f1a9 0902 	sub.w	r9, r9, #2
    TRACEMS2(cinfo, 1, JTRC_DAC, index, val);
 800edbc:	e9c2 3805 	strd	r3, r8, [r2, #20]
 800edc0:	6852      	ldr	r2, [r2, #4]
 800edc2:	4790      	blx	r2
    if (index < 0 || index >= (2*NUM_ARITH_TBLS))
 800edc4:	f1b8 0f1f 	cmp.w	r8, #31
 800edc8:	d905      	bls.n	800edd6 <read_markers+0x4a6>
      ERREXIT1(cinfo, JERR_DAC_INDEX, index);
 800edca:	6822      	ldr	r2, [r4, #0]
 800edcc:	4620      	mov	r0, r4
 800edce:	e9c2 b805 	strd	fp, r8, [r2, #20]
 800edd2:	6812      	ldr	r2, [r2, #0]
 800edd4:	4790      	blx	r2
    if (index >= NUM_ARITH_TBLS) { /* define AC table */
 800edd6:	f1b8 0f0f 	cmp.w	r8, #15
 800edda:	44a0      	add	r8, r4
 800eddc:	dd0b      	ble.n	800edf6 <read_markers+0x4c6>
      cinfo->arith_ac_K[index-NUM_ARITH_TBLS] = (UINT8) val;
 800edde:	f888 a0f8 	strb.w	sl, [r8, #248]	; 0xf8
 800ede2:	e7b3      	b.n	800ed4c <read_markers+0x41c>
    INPUT_BYTE(cinfo, val, return FALSE);
 800ede4:	68fb      	ldr	r3, [r7, #12]
 800ede6:	4620      	mov	r0, r4
 800ede8:	4798      	blx	r3
 800edea:	2800      	cmp	r0, #0
 800edec:	f43f ae2e 	beq.w	800ea4c <read_markers+0x11c>
 800edf0:	e9d7 5600 	ldrd	r5, r6, [r7]
 800edf4:	e7d7      	b.n	800eda6 <read_markers+0x476>
      cinfo->arith_dc_L[index] = (UINT8) (val & 0x0F);
 800edf6:	f00a 010f 	and.w	r1, sl, #15
      cinfo->arith_dc_U[index] = (UINT8) (val >> 4);
 800edfa:	ea4f 121a 	mov.w	r2, sl, lsr #4
      if (cinfo->arith_dc_L[index] > cinfo->arith_dc_U[index])
 800edfe:	4291      	cmp	r1, r2
      cinfo->arith_dc_L[index] = (UINT8) (val & 0x0F);
 800ee00:	f888 10e8 	strb.w	r1, [r8, #232]	; 0xe8
      cinfo->arith_dc_U[index] = (UINT8) (val >> 4);
 800ee04:	f888 20f8 	strb.w	r2, [r8, #248]	; 0xf8
      if (cinfo->arith_dc_L[index] > cinfo->arith_dc_U[index])
 800ee08:	d9a0      	bls.n	800ed4c <read_markers+0x41c>
	ERREXIT1(cinfo, JERR_DAC_VALUE, val);
 800ee0a:	6822      	ldr	r2, [r4, #0]
 800ee0c:	211e      	movs	r1, #30
 800ee0e:	4620      	mov	r0, r4
 800ee10:	6813      	ldr	r3, [r2, #0]
 800ee12:	e9c2 1a05 	strd	r1, sl, [r2, #20]
 800ee16:	4798      	blx	r3
 800ee18:	e798      	b.n	800ed4c <read_markers+0x41c>
      if (! get_dht(cinfo))
 800ee1a:	4620      	mov	r0, r4
 800ee1c:	f7ff fc7e 	bl	800e71c <get_dht>
 800ee20:	e65a      	b.n	800ead8 <read_markers+0x1a8>
  INPUT_VARS(cinfo);
 800ee22:	69a6      	ldr	r6, [r4, #24]
 800ee24:	6873      	ldr	r3, [r6, #4]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800ee26:	b1db      	cbz	r3, 800ee60 <read_markers+0x530>
  INPUT_VARS(cinfo);
 800ee28:	6835      	ldr	r5, [r6, #0]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800ee2a:	f895 8000 	ldrb.w	r8, [r5]
 800ee2e:	3b01      	subs	r3, #1
 800ee30:	ea4f 2708 	mov.w	r7, r8, lsl #8
 800ee34:	d01d      	beq.n	800ee72 <read_markers+0x542>
 800ee36:	3501      	adds	r5, #1
 800ee38:	f815 8b01 	ldrb.w	r8, [r5], #1
 800ee3c:	f103 3aff 	add.w	sl, r3, #4294967295
 800ee40:	44b8      	add	r8, r7
  length -= 2;
 800ee42:	f1a8 0802 	sub.w	r8, r8, #2
  while (length > 0) {
 800ee46:	f1b8 0f00 	cmp.w	r8, #0
 800ee4a:	dc1b      	bgt.n	800ee84 <read_markers+0x554>
  if (length != 0)
 800ee4c:	d005      	beq.n	800ee5a <read_markers+0x52a>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 800ee4e:	6822      	ldr	r2, [r4, #0]
 800ee50:	210c      	movs	r1, #12
 800ee52:	4620      	mov	r0, r4
 800ee54:	6151      	str	r1, [r2, #20]
 800ee56:	6812      	ldr	r2, [r2, #0]
 800ee58:	4790      	blx	r2
  INPUT_SYNC(cinfo);
 800ee5a:	e9c6 5a00 	strd	r5, sl, [r6]
  return TRUE;
 800ee5e:	e631      	b.n	800eac4 <read_markers+0x194>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800ee60:	68f3      	ldr	r3, [r6, #12]
 800ee62:	4620      	mov	r0, r4
 800ee64:	4798      	blx	r3
 800ee66:	2800      	cmp	r0, #0
 800ee68:	f43f adf0 	beq.w	800ea4c <read_markers+0x11c>
 800ee6c:	e9d6 5300 	ldrd	r5, r3, [r6]
 800ee70:	e7db      	b.n	800ee2a <read_markers+0x4fa>
 800ee72:	68f3      	ldr	r3, [r6, #12]
 800ee74:	4620      	mov	r0, r4
 800ee76:	4798      	blx	r3
 800ee78:	2800      	cmp	r0, #0
 800ee7a:	f43f ade7 	beq.w	800ea4c <read_markers+0x11c>
 800ee7e:	e9d6 5300 	ldrd	r5, r3, [r6]
 800ee82:	e7d9      	b.n	800ee38 <read_markers+0x508>
    length--;
 800ee84:	f108 38ff 	add.w	r8, r8, #4294967295
    INPUT_BYTE(cinfo, n, return FALSE);
 800ee88:	f1ba 0f00 	cmp.w	sl, #0
 800ee8c:	d107      	bne.n	800ee9e <read_markers+0x56e>
 800ee8e:	68f3      	ldr	r3, [r6, #12]
 800ee90:	4620      	mov	r0, r4
 800ee92:	4798      	blx	r3
 800ee94:	2800      	cmp	r0, #0
 800ee96:	f43f add9 	beq.w	800ea4c <read_markers+0x11c>
 800ee9a:	e9d6 5a00 	ldrd	r5, sl, [r6]
 800ee9e:	f815 9b01 	ldrb.w	r9, [r5], #1
    TRACEMS2(cinfo, 1, JTRC_DQT, n, prec);
 800eea2:	2153      	movs	r1, #83	; 0x53
 800eea4:	6822      	ldr	r2, [r4, #0]
 800eea6:	4620      	mov	r0, r4
    prec = n >> 4;
 800eea8:	ea4f 1329 	mov.w	r3, r9, asr #4
 800eeac:	f009 070f 	and.w	r7, r9, #15
    INPUT_BYTE(cinfo, n, return FALSE);
 800eeb0:	f10a 3aff 	add.w	sl, sl, #4294967295
    TRACEMS2(cinfo, 1, JTRC_DQT, n, prec);
 800eeb4:	61d3      	str	r3, [r2, #28]
    prec = n >> 4;
 800eeb6:	9301      	str	r3, [sp, #4]
    TRACEMS2(cinfo, 1, JTRC_DQT, n, prec);
 800eeb8:	e9c2 1705 	strd	r1, r7, [r2, #20]
 800eebc:	6852      	ldr	r2, [r2, #4]
 800eebe:	2101      	movs	r1, #1
 800eec0:	4790      	blx	r2
    if (n >= NUM_QUANT_TBLS)
 800eec2:	f019 0f0c 	tst.w	r9, #12
 800eec6:	d006      	beq.n	800eed6 <read_markers+0x5a6>
      ERREXIT1(cinfo, JERR_DQT_INDEX, n);
 800eec8:	6822      	ldr	r2, [r4, #0]
 800eeca:	2120      	movs	r1, #32
 800eecc:	4620      	mov	r0, r4
 800eece:	e9c2 1705 	strd	r1, r7, [r2, #20]
 800eed2:	6812      	ldr	r2, [r2, #0]
 800eed4:	4790      	blx	r2
    if (cinfo->quant_tbl_ptrs[n] == NULL)
 800eed6:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 800eeda:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800eede:	b922      	cbnz	r2, 800eeea <read_markers+0x5ba>
      cinfo->quant_tbl_ptrs[n] = jpeg_alloc_quant_table((j_common_ptr) cinfo);
 800eee0:	4620      	mov	r0, r4
 800eee2:	f7fb f873 	bl	8009fcc <jpeg_alloc_quant_table>
 800eee6:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
    if (prec) {
 800eeea:	9b01      	ldr	r3, [sp, #4]
    quant_ptr = cinfo->quant_tbl_ptrs[n];
 800eeec:	f8d7 b0a4 	ldr.w	fp, [r7, #164]	; 0xa4
    if (prec) {
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d057      	beq.n	800efa4 <read_markers+0x674>
      if (length < DCTSIZE2 * 2) {
 800eef4:	f1b8 0f7f 	cmp.w	r8, #127	; 0x7f
 800eef8:	dc6c      	bgt.n	800efd4 <read_markers+0x6a4>
 800eefa:	f1ab 0202 	sub.w	r2, fp, #2
 800eefe:	f10b 017e 	add.w	r1, fp, #126	; 0x7e
	  quant_ptr->quantval[i] = 1;
 800ef02:	2001      	movs	r0, #1
 800ef04:	f822 0f02 	strh.w	r0, [r2, #2]!
	for (i = 0; i < DCTSIZE2; i++) {
 800ef08:	4291      	cmp	r1, r2
 800ef0a:	d1fb      	bne.n	800ef04 <read_markers+0x5d4>
	count = length >> 1;
 800ef0c:	ea4f 0968 	mov.w	r9, r8, asr #1
    switch (count) {
 800ef10:	f1b9 0f19 	cmp.w	r9, #25
 800ef14:	d062      	beq.n	800efdc <read_markers+0x6ac>
 800ef16:	dc53      	bgt.n	800efc0 <read_markers+0x690>
 800ef18:	f1b9 0f09 	cmp.w	r9, #9
 800ef1c:	d060      	beq.n	800efe0 <read_markers+0x6b0>
 800ef1e:	f1b9 0f10 	cmp.w	r9, #16
 800ef22:	d05f      	beq.n	800efe4 <read_markers+0x6b4>
    default:    natural_order = jpeg_natural_order;  break;
 800ef24:	4f85      	ldr	r7, [pc, #532]	; (800f13c <read_markers+0x80c>)
 800ef26:	4a86      	ldr	r2, [pc, #536]	; (800f140 <read_markers+0x810>)
 800ef28:	f1b9 0f04 	cmp.w	r9, #4
 800ef2c:	bf18      	it	ne
 800ef2e:	4617      	movne	r7, r2
    for (i = 0; i < count; i++) {
 800ef30:	eb07 0389 	add.w	r3, r7, r9, lsl #2
 800ef34:	9302      	str	r3, [sp, #8]
 800ef36:	9b02      	ldr	r3, [sp, #8]
 800ef38:	42bb      	cmp	r3, r7
 800ef3a:	d157      	bne.n	800efec <read_markers+0x6bc>
    if (cinfo->err->trace_level >= 2) {
 800ef3c:	6822      	ldr	r2, [r4, #0]
 800ef3e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800ef40:	2a01      	cmp	r2, #1
 800ef42:	dd26      	ble.n	800ef92 <read_markers+0x662>
 800ef44:	f10b 0380 	add.w	r3, fp, #128	; 0x80
	TRACEMS8(cinfo, 2, JTRC_QUANTVALS,
 800ef48:	275f      	movs	r7, #95	; 0x5f
 800ef4a:	f8bb 1000 	ldrh.w	r1, [fp]
 800ef4e:	4620      	mov	r0, r4
 800ef50:	6822      	ldr	r2, [r4, #0]
      for (i = 0; i < DCTSIZE2; i += 8) {
 800ef52:	f10b 0b10 	add.w	fp, fp, #16
 800ef56:	9302      	str	r3, [sp, #8]
	TRACEMS8(cinfo, 2, JTRC_QUANTVALS,
 800ef58:	6191      	str	r1, [r2, #24]
 800ef5a:	f83b 1c0e 	ldrh.w	r1, [fp, #-14]
 800ef5e:	61d1      	str	r1, [r2, #28]
 800ef60:	f83b 1c0c 	ldrh.w	r1, [fp, #-12]
 800ef64:	6211      	str	r1, [r2, #32]
 800ef66:	f83b 1c0a 	ldrh.w	r1, [fp, #-10]
 800ef6a:	6251      	str	r1, [r2, #36]	; 0x24
 800ef6c:	f83b 1c08 	ldrh.w	r1, [fp, #-8]
 800ef70:	6291      	str	r1, [r2, #40]	; 0x28
 800ef72:	f83b 1c06 	ldrh.w	r1, [fp, #-6]
 800ef76:	62d1      	str	r1, [r2, #44]	; 0x2c
 800ef78:	f83b 1c04 	ldrh.w	r1, [fp, #-4]
 800ef7c:	6311      	str	r1, [r2, #48]	; 0x30
 800ef7e:	f83b 1c02 	ldrh.w	r1, [fp, #-2]
 800ef82:	6157      	str	r7, [r2, #20]
 800ef84:	6351      	str	r1, [r2, #52]	; 0x34
 800ef86:	2102      	movs	r1, #2
 800ef88:	6852      	ldr	r2, [r2, #4]
 800ef8a:	4790      	blx	r2
      for (i = 0; i < DCTSIZE2; i += 8) {
 800ef8c:	9b02      	ldr	r3, [sp, #8]
 800ef8e:	459b      	cmp	fp, r3
 800ef90:	d1db      	bne.n	800ef4a <read_markers+0x61a>
    if (prec) length -= count;
 800ef92:	9b01      	ldr	r3, [sp, #4]
    length -= count;
 800ef94:	eba8 0809 	sub.w	r8, r8, r9
    if (prec) length -= count;
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	f43f af54 	beq.w	800ee46 <read_markers+0x516>
 800ef9e:	eba8 0809 	sub.w	r8, r8, r9
 800efa2:	e750      	b.n	800ee46 <read_markers+0x516>
      if (length < DCTSIZE2) {
 800efa4:	f1b8 0f3f 	cmp.w	r8, #63	; 0x3f
 800efa8:	dc14      	bgt.n	800efd4 <read_markers+0x6a4>
 800efaa:	f1ab 0202 	sub.w	r2, fp, #2
 800efae:	f10b 017e 	add.w	r1, fp, #126	; 0x7e
	  quant_ptr->quantval[i] = 1;
 800efb2:	2001      	movs	r0, #1
 800efb4:	f822 0f02 	strh.w	r0, [r2, #2]!
	for (i = 0; i < DCTSIZE2; i++) {
 800efb8:	4291      	cmp	r1, r2
 800efba:	d1fb      	bne.n	800efb4 <read_markers+0x684>
 800efbc:	46c1      	mov	r9, r8
 800efbe:	e7a7      	b.n	800ef10 <read_markers+0x5e0>
    switch (count) {
 800efc0:	f1b9 0f24 	cmp.w	r9, #36	; 0x24
 800efc4:	d010      	beq.n	800efe8 <read_markers+0x6b8>
    default:    natural_order = jpeg_natural_order;  break;
 800efc6:	4f5e      	ldr	r7, [pc, #376]	; (800f140 <read_markers+0x810>)
 800efc8:	4b5e      	ldr	r3, [pc, #376]	; (800f144 <read_markers+0x814>)
 800efca:	f1b9 0f31 	cmp.w	r9, #49	; 0x31
 800efce:	bf08      	it	eq
 800efd0:	461f      	moveq	r7, r3
 800efd2:	e7ad      	b.n	800ef30 <read_markers+0x600>
	count = DCTSIZE2;
 800efd4:	f04f 0940 	mov.w	r9, #64	; 0x40
    default:    natural_order = jpeg_natural_order;  break;
 800efd8:	4f59      	ldr	r7, [pc, #356]	; (800f140 <read_markers+0x810>)
 800efda:	e7a9      	b.n	800ef30 <read_markers+0x600>
    case (5*5): natural_order = jpeg_natural_order5; break;
 800efdc:	4f5a      	ldr	r7, [pc, #360]	; (800f148 <read_markers+0x818>)
 800efde:	e7a7      	b.n	800ef30 <read_markers+0x600>
    case (3*3): natural_order = jpeg_natural_order3; break;
 800efe0:	4f5a      	ldr	r7, [pc, #360]	; (800f14c <read_markers+0x81c>)
 800efe2:	e7a5      	b.n	800ef30 <read_markers+0x600>
    case (4*4): natural_order = jpeg_natural_order4; break;
 800efe4:	4f5a      	ldr	r7, [pc, #360]	; (800f150 <read_markers+0x820>)
 800efe6:	e7a3      	b.n	800ef30 <read_markers+0x600>
    case (6*6): natural_order = jpeg_natural_order6; break;
 800efe8:	4f5a      	ldr	r7, [pc, #360]	; (800f154 <read_markers+0x824>)
 800efea:	e7a1      	b.n	800ef30 <read_markers+0x600>
      if (prec)
 800efec:	9b01      	ldr	r3, [sp, #4]
 800efee:	b333      	cbz	r3, 800f03e <read_markers+0x70e>
	INPUT_2BYTES(cinfo, tmp, return FALSE);
 800eff0:	f1ba 0f00 	cmp.w	sl, #0
 800eff4:	d107      	bne.n	800f006 <read_markers+0x6d6>
 800eff6:	68f3      	ldr	r3, [r6, #12]
 800eff8:	4620      	mov	r0, r4
 800effa:	4798      	blx	r3
 800effc:	2800      	cmp	r0, #0
 800effe:	f43f ad25 	beq.w	800ea4c <read_markers+0x11c>
 800f002:	e9d6 5a00 	ldrd	r5, sl, [r6]
 800f006:	782a      	ldrb	r2, [r5, #0]
 800f008:	f1ba 0301 	subs.w	r3, sl, #1
 800f00c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800f010:	d00a      	beq.n	800f028 <read_markers+0x6f8>
 800f012:	3501      	adds	r5, #1
 800f014:	f815 1b01 	ldrb.w	r1, [r5], #1
 800f018:	f103 3aff 	add.w	sl, r3, #4294967295
 800f01c:	440a      	add	r2, r1
      quant_ptr->quantval[natural_order[i]] = (UINT16) tmp;
 800f01e:	f857 1b04 	ldr.w	r1, [r7], #4
 800f022:	f82b 2011 	strh.w	r2, [fp, r1, lsl #1]
    for (i = 0; i < count; i++) {
 800f026:	e786      	b.n	800ef36 <read_markers+0x606>
	INPUT_2BYTES(cinfo, tmp, return FALSE);
 800f028:	68f3      	ldr	r3, [r6, #12]
 800f02a:	4620      	mov	r0, r4
 800f02c:	9203      	str	r2, [sp, #12]
 800f02e:	4798      	blx	r3
 800f030:	2800      	cmp	r0, #0
 800f032:	f43f ad0b 	beq.w	800ea4c <read_markers+0x11c>
 800f036:	9a03      	ldr	r2, [sp, #12]
 800f038:	e9d6 5300 	ldrd	r5, r3, [r6]
 800f03c:	e7ea      	b.n	800f014 <read_markers+0x6e4>
	INPUT_BYTE(cinfo, tmp, return FALSE);
 800f03e:	f1ba 0f00 	cmp.w	sl, #0
 800f042:	d107      	bne.n	800f054 <read_markers+0x724>
 800f044:	68f3      	ldr	r3, [r6, #12]
 800f046:	4620      	mov	r0, r4
 800f048:	4798      	blx	r3
 800f04a:	2800      	cmp	r0, #0
 800f04c:	f43f acfe 	beq.w	800ea4c <read_markers+0x11c>
 800f050:	e9d6 5a00 	ldrd	r5, sl, [r6]
 800f054:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f058:	f815 2b01 	ldrb.w	r2, [r5], #1
 800f05c:	e7df      	b.n	800f01e <read_markers+0x6ee>
  INPUT_VARS(cinfo);
 800f05e:	69a7      	ldr	r7, [r4, #24]
 800f060:	687b      	ldr	r3, [r7, #4]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800f062:	b353      	cbz	r3, 800f0ba <read_markers+0x78a>
  INPUT_VARS(cinfo);
 800f064:	683d      	ldr	r5, [r7, #0]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800f066:	782a      	ldrb	r2, [r5, #0]
 800f068:	3b01      	subs	r3, #1
 800f06a:	ea4f 2802 	mov.w	r8, r2, lsl #8
 800f06e:	d02d      	beq.n	800f0cc <read_markers+0x79c>
 800f070:	3501      	adds	r5, #1
 800f072:	782a      	ldrb	r2, [r5, #0]
 800f074:	1e5e      	subs	r6, r3, #1
 800f076:	4442      	add	r2, r8
  if (length != 4)
 800f078:	2a04      	cmp	r2, #4
 800f07a:	d005      	beq.n	800f088 <read_markers+0x758>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 800f07c:	6823      	ldr	r3, [r4, #0]
 800f07e:	220c      	movs	r2, #12
 800f080:	4620      	mov	r0, r4
 800f082:	615a      	str	r2, [r3, #20]
 800f084:	681b      	ldr	r3, [r3, #0]
 800f086:	4798      	blx	r3
  INPUT_2BYTES(cinfo, tmp, return FALSE);
 800f088:	b34e      	cbz	r6, 800f0de <read_markers+0x7ae>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800f08a:	3501      	adds	r5, #1
  INPUT_2BYTES(cinfo, tmp, return FALSE);
 800f08c:	f895 8000 	ldrb.w	r8, [r5]
 800f090:	3e01      	subs	r6, #1
 800f092:	ea4f 2908 	mov.w	r9, r8, lsl #8
 800f096:	d02b      	beq.n	800f0f0 <read_markers+0x7c0>
 800f098:	3501      	adds	r5, #1
 800f09a:	f815 8b01 	ldrb.w	r8, [r5], #1
  TRACEMS1(cinfo, 1, JTRC_DRI, tmp);
 800f09e:	2254      	movs	r2, #84	; 0x54
 800f0a0:	6823      	ldr	r3, [r4, #0]
 800f0a2:	2101      	movs	r1, #1
  INPUT_2BYTES(cinfo, tmp, return FALSE);
 800f0a4:	44c8      	add	r8, r9
  TRACEMS1(cinfo, 1, JTRC_DRI, tmp);
 800f0a6:	4620      	mov	r0, r4
  INPUT_2BYTES(cinfo, tmp, return FALSE);
 800f0a8:	3e01      	subs	r6, #1
  TRACEMS1(cinfo, 1, JTRC_DRI, tmp);
 800f0aa:	e9c3 2805 	strd	r2, r8, [r3, #20]
 800f0ae:	685b      	ldr	r3, [r3, #4]
 800f0b0:	4798      	blx	r3
  cinfo->restart_interval = tmp;
 800f0b2:	f8c4 8118 	str.w	r8, [r4, #280]	; 0x118
  INPUT_SYNC(cinfo);
 800f0b6:	603d      	str	r5, [r7, #0]
 800f0b8:	e653      	b.n	800ed62 <read_markers+0x432>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800f0ba:	68fb      	ldr	r3, [r7, #12]
 800f0bc:	4620      	mov	r0, r4
 800f0be:	4798      	blx	r3
 800f0c0:	2800      	cmp	r0, #0
 800f0c2:	f43f acc3 	beq.w	800ea4c <read_markers+0x11c>
 800f0c6:	e9d7 5300 	ldrd	r5, r3, [r7]
 800f0ca:	e7cc      	b.n	800f066 <read_markers+0x736>
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	4620      	mov	r0, r4
 800f0d0:	4798      	blx	r3
 800f0d2:	2800      	cmp	r0, #0
 800f0d4:	f43f acba 	beq.w	800ea4c <read_markers+0x11c>
 800f0d8:	e9d7 5300 	ldrd	r5, r3, [r7]
 800f0dc:	e7c9      	b.n	800f072 <read_markers+0x742>
  INPUT_2BYTES(cinfo, tmp, return FALSE);
 800f0de:	68fb      	ldr	r3, [r7, #12]
 800f0e0:	4620      	mov	r0, r4
 800f0e2:	4798      	blx	r3
 800f0e4:	2800      	cmp	r0, #0
 800f0e6:	f43f acb1 	beq.w	800ea4c <read_markers+0x11c>
 800f0ea:	e9d7 5600 	ldrd	r5, r6, [r7]
 800f0ee:	e7cd      	b.n	800f08c <read_markers+0x75c>
 800f0f0:	68fb      	ldr	r3, [r7, #12]
 800f0f2:	4620      	mov	r0, r4
 800f0f4:	4798      	blx	r3
 800f0f6:	2800      	cmp	r0, #0
 800f0f8:	f43f aca8 	beq.w	800ea4c <read_markers+0x11c>
 800f0fc:	e9d7 5600 	ldrd	r5, r6, [r7]
 800f100:	e7cb      	b.n	800f09a <read_markers+0x76a>
      if (! (*((my_marker_ptr) cinfo->marker)->process_APPn[
 800f102:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc
 800f106:	3bd8      	subs	r3, #216	; 0xd8
 800f108:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f10c:	4620      	mov	r0, r4
 800f10e:	4798      	blx	r3
 800f110:	e4e2      	b.n	800ead8 <read_markers+0x1a8>
      if (! (*((my_marker_ptr) cinfo->marker)->process_COM) (cinfo))
 800f112:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800f116:	69db      	ldr	r3, [r3, #28]
 800f118:	e7f8      	b.n	800f10c <read_markers+0x7dc>
      TRACEMS1(cinfo, 1, JTRC_PARMLESS_MARKER, cinfo->unread_marker);
 800f11a:	6822      	ldr	r2, [r4, #0]
 800f11c:	215e      	movs	r1, #94	; 0x5e
 800f11e:	4620      	mov	r0, r4
 800f120:	e9c2 1305 	strd	r1, r3, [r2, #20]
 800f124:	6853      	ldr	r3, [r2, #4]
 800f126:	2101      	movs	r1, #1
 800f128:	4798      	blx	r3
      break;
 800f12a:	e4cb      	b.n	800eac4 <read_markers+0x194>
      if (! skip_variable(cinfo))
 800f12c:	4620      	mov	r0, r4
 800f12e:	f7ff fa36 	bl	800e59e <skip_variable>
 800f132:	e4d1      	b.n	800ead8 <read_markers+0x1a8>
      ERREXIT1(cinfo, JERR_UNKNOWN_MARKER, cinfo->unread_marker);
 800f134:	6822      	ldr	r2, [r4, #0]
 800f136:	2146      	movs	r1, #70	; 0x46
 800f138:	e4df      	b.n	800eafa <read_markers+0x1ca>
 800f13a:	bf00      	nop
 800f13c:	0802f688 	.word	0x0802f688
 800f140:	0802f548 	.word	0x0802f548
 800f144:	0802f930 	.word	0x0802f930
 800f148:	0802f7bc 	.word	0x0802f7bc
 800f14c:	0802f6d8 	.word	0x0802f6d8
 800f150:	0802f73c 	.word	0x0802f73c
 800f154:	0802f860 	.word	0x0802f860

0800f158 <jpeg_resync_to_restart>:
{
 800f158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f15c:	460f      	mov	r7, r1
  WARNMS2(cinfo, JWRN_MUST_RESYNC, marker, desired);
 800f15e:	6803      	ldr	r3, [r0, #0]
  int marker = cinfo->unread_marker;
 800f160:	f8d0 51b4 	ldr.w	r5, [r0, #436]	; 0x1b4
  WARNMS2(cinfo, JWRN_MUST_RESYNC, marker, desired);
 800f164:	227c      	movs	r2, #124	; 0x7c
      if (marker == ((int) M_RST0 + ((desired+1) & 7)) ||
 800f166:	f107 0801 	add.w	r8, r7, #1
  WARNMS2(cinfo, JWRN_MUST_RESYNC, marker, desired);
 800f16a:	61d9      	str	r1, [r3, #28]
 800f16c:	f04f 31ff 	mov.w	r1, #4294967295
{
 800f170:	4606      	mov	r6, r0
      if (marker == ((int) M_RST0 + ((desired+1) & 7)) ||
 800f172:	f008 0807 	and.w	r8, r8, #7
 800f176:	f108 08d0 	add.w	r8, r8, #208	; 0xd0
  WARNMS2(cinfo, JWRN_MUST_RESYNC, marker, desired);
 800f17a:	e9c3 2505 	strd	r2, r5, [r3, #20]
 800f17e:	685b      	ldr	r3, [r3, #4]
 800f180:	4798      	blx	r3
    if (marker < (int) M_SOF0)
 800f182:	2dbf      	cmp	r5, #191	; 0xbf
 800f184:	dd2e      	ble.n	800f1e4 <jpeg_resync_to_restart+0x8c>
    else if (marker < (int) M_RST0 || marker > (int) M_RST7)
 800f186:	f1a5 03d0 	sub.w	r3, r5, #208	; 0xd0
 800f18a:	2b07      	cmp	r3, #7
 800f18c:	d828      	bhi.n	800f1e0 <jpeg_resync_to_restart+0x88>
      if (marker == ((int) M_RST0 + ((desired+1) & 7)) ||
 800f18e:	4545      	cmp	r5, r8
 800f190:	d026      	beq.n	800f1e0 <jpeg_resync_to_restart+0x88>
	  marker == ((int) M_RST0 + ((desired+2) & 7)))
 800f192:	1cbb      	adds	r3, r7, #2
 800f194:	f003 0307 	and.w	r3, r3, #7
 800f198:	33d0      	adds	r3, #208	; 0xd0
      if (marker == ((int) M_RST0 + ((desired+1) & 7)) ||
 800f19a:	429d      	cmp	r5, r3
 800f19c:	d020      	beq.n	800f1e0 <jpeg_resync_to_restart+0x88>
      else if (marker == ((int) M_RST0 + ((desired-1) & 7)) ||
 800f19e:	1e7b      	subs	r3, r7, #1
 800f1a0:	f003 0307 	and.w	r3, r3, #7
 800f1a4:	33d0      	adds	r3, #208	; 0xd0
 800f1a6:	429d      	cmp	r5, r3
 800f1a8:	d01c      	beq.n	800f1e4 <jpeg_resync_to_restart+0x8c>
	       marker == ((int) M_RST0 + ((desired-2) & 7)))
 800f1aa:	1ebc      	subs	r4, r7, #2
 800f1ac:	f004 0407 	and.w	r4, r4, #7
 800f1b0:	34d0      	adds	r4, #208	; 0xd0
	action = 2;		/* a prior restart, so advance */
 800f1b2:	42a5      	cmp	r5, r4
 800f1b4:	bf14      	ite	ne
 800f1b6:	2401      	movne	r4, #1
 800f1b8:	2402      	moveq	r4, #2
    TRACEMS2(cinfo, 4, JTRC_RECOVERY_ACTION, marker, action);
 800f1ba:	6833      	ldr	r3, [r6, #0]
 800f1bc:	2263      	movs	r2, #99	; 0x63
 800f1be:	2104      	movs	r1, #4
 800f1c0:	4630      	mov	r0, r6
 800f1c2:	61dc      	str	r4, [r3, #28]
 800f1c4:	e9c3 2505 	strd	r2, r5, [r3, #20]
 800f1c8:	685b      	ldr	r3, [r3, #4]
 800f1ca:	4798      	blx	r3
    switch (action) {
 800f1cc:	2c02      	cmp	r4, #2
 800f1ce:	d00b      	beq.n	800f1e8 <jpeg_resync_to_restart+0x90>
 800f1d0:	2c03      	cmp	r4, #3
 800f1d2:	d002      	beq.n	800f1da <jpeg_resync_to_restart+0x82>
      cinfo->unread_marker = 0;
 800f1d4:	2300      	movs	r3, #0
 800f1d6:	f8c6 31b4 	str.w	r3, [r6, #436]	; 0x1b4
    switch (action) {
 800f1da:	2001      	movs	r0, #1
}
 800f1dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      action = 3;		/* valid non-restart marker */
 800f1e0:	2403      	movs	r4, #3
 800f1e2:	e7ea      	b.n	800f1ba <jpeg_resync_to_restart+0x62>
	action = 2;		/* a prior restart, so advance */
 800f1e4:	2402      	movs	r4, #2
 800f1e6:	e7e8      	b.n	800f1ba <jpeg_resync_to_restart+0x62>
      if (! next_marker(cinfo))
 800f1e8:	4630      	mov	r0, r6
 800f1ea:	f7ff fa13 	bl	800e614 <next_marker>
 800f1ee:	2800      	cmp	r0, #0
 800f1f0:	d0f4      	beq.n	800f1dc <jpeg_resync_to_restart+0x84>
      marker = cinfo->unread_marker;
 800f1f2:	f8d6 51b4 	ldr.w	r5, [r6, #436]	; 0x1b4
      break;
 800f1f6:	e7c4      	b.n	800f182 <jpeg_resync_to_restart+0x2a>

0800f1f8 <jinit_marker_reader>:
 * This is called only once, when the decompression object is created.
 */

GLOBAL(void)
jinit_marker_reader (j_decompress_ptr cinfo)
{
 800f1f8:	b538      	push	{r3, r4, r5, lr}
  my_marker_ptr marker;
  int i;

  /* Create subobject in permanent pool */
  marker = (my_marker_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 800f1fa:	6843      	ldr	r3, [r0, #4]
 800f1fc:	22ac      	movs	r2, #172	; 0xac
 800f1fe:	2100      	movs	r1, #0
{
 800f200:	4605      	mov	r5, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	4798      	blx	r3
				SIZEOF(my_marker_reader));
  cinfo->marker = (struct jpeg_marker_reader *) marker;
  /* Initialize public method pointers */
  marker->pub.reset_marker_reader = reset_marker_reader;
 800f206:	4b11      	ldr	r3, [pc, #68]	; (800f24c <jinit_marker_reader+0x54>)
  cinfo->marker = (struct jpeg_marker_reader *) marker;
 800f208:	f8c5 01cc 	str.w	r0, [r5, #460]	; 0x1cc
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 800f20c:	4604      	mov	r4, r0
  marker->pub.reset_marker_reader = reset_marker_reader;
 800f20e:	6003      	str	r3, [r0, #0]
  marker->pub.read_markers = read_markers;
 800f210:	f100 0160 	add.w	r1, r0, #96	; 0x60
 800f214:	4b0e      	ldr	r3, [pc, #56]	; (800f250 <jinit_marker_reader+0x58>)
  marker->pub.read_restart_marker = read_restart_marker;
  /* Initialize COM/APPn processing.
   * By default, we examine and then discard APP0 and APP14,
   * but simply discard COM and all other APPn.
   */
  marker->process_COM = skip_variable;
 800f216:	4a0f      	ldr	r2, [pc, #60]	; (800f254 <jinit_marker_reader+0x5c>)
  marker->pub.read_markers = read_markers;
 800f218:	6043      	str	r3, [r0, #4]
  marker->pub.read_restart_marker = read_restart_marker;
 800f21a:	4b0f      	ldr	r3, [pc, #60]	; (800f258 <jinit_marker_reader+0x60>)
  marker->process_COM = skip_variable;
 800f21c:	61c2      	str	r2, [r0, #28]
  marker->pub.read_restart_marker = read_restart_marker;
 800f21e:	6083      	str	r3, [r0, #8]
  marker->length_limit_COM = 0;
 800f220:	2300      	movs	r3, #0
 800f222:	6603      	str	r3, [r0, #96]	; 0x60
  for (i = 0; i < 16; i++) {
 800f224:	f100 0320 	add.w	r3, r0, #32
    marker->process_APPn[i] = skip_variable;
 800f228:	f843 2b04 	str.w	r2, [r3], #4
  for (i = 0; i < 16; i++) {
 800f22c:	4299      	cmp	r1, r3
 800f22e:	d1fb      	bne.n	800f228 <jinit_marker_reader+0x30>
    marker->length_limit_APPn[i] = 0;
 800f230:	f104 0064 	add.w	r0, r4, #100	; 0x64
 800f234:	2240      	movs	r2, #64	; 0x40
 800f236:	2100      	movs	r1, #0
 800f238:	f01a ffec 	bl	802a214 <memset>
  }
  marker->process_APPn[0] = get_interesting_appn;
 800f23c:	4b07      	ldr	r3, [pc, #28]	; (800f25c <jinit_marker_reader+0x64>)
  marker->process_APPn[14] = get_interesting_appn;
  /* Reset marker processing state */
  reset_marker_reader(cinfo);
 800f23e:	4628      	mov	r0, r5
  marker->process_APPn[0] = get_interesting_appn;
 800f240:	6223      	str	r3, [r4, #32]
  marker->process_APPn[14] = get_interesting_appn;
 800f242:	65a3      	str	r3, [r4, #88]	; 0x58
}
 800f244:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  reset_marker_reader(cinfo);
 800f248:	f7ff ba59 	b.w	800e6fe <reset_marker_reader>
 800f24c:	0800e6ff 	.word	0x0800e6ff
 800f250:	0800e931 	.word	0x0800e931
 800f254:	0800e59f 	.word	0x0800e59f
 800f258:	0800e6a1 	.word	0x0800e6a1
 800f25c:	0800e4c9 	.word	0x0800e4c9

0800f260 <prepare_for_output_pass>:
 * (In the latter case, jdapistd.c will crank the pass to completion.)
 */

METHODDEF(void)
prepare_for_output_pass (j_decompress_ptr cinfo)
{
 800f260:	b538      	push	{r3, r4, r5, lr}
  my_master_ptr master = (my_master_ptr) cinfo->master;
 800f262:	f8d0 51b8 	ldr.w	r5, [r0, #440]	; 0x1b8
{
 800f266:	4604      	mov	r4, r0

  if (master->pub.is_dummy_pass) {
 800f268:	68ab      	ldr	r3, [r5, #8]
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	d02a      	beq.n	800f2c4 <prepare_for_output_pass+0x64>
#ifdef QUANT_2PASS_SUPPORTED
    /* Final pass of 2-pass quantization */
    master->pub.is_dummy_pass = FALSE;
 800f26e:	2100      	movs	r1, #0
    (*cinfo->cquantize->start_pass) (cinfo, FALSE);
 800f270:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
    master->pub.is_dummy_pass = FALSE;
 800f274:	60a9      	str	r1, [r5, #8]
    (*cinfo->cquantize->start_pass) (cinfo, FALSE);
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	4798      	blx	r3
    (*cinfo->post->start_pass) (cinfo, JBUF_CRANK_DEST);
 800f27a:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
 800f27e:	2102      	movs	r1, #2
 800f280:	4620      	mov	r0, r4
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	4798      	blx	r3
    (*cinfo->main->start_pass) (cinfo, JBUF_CRANK_DEST);
 800f286:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
 800f28a:	2102      	movs	r1, #2
 800f28c:	681b      	ldr	r3, [r3, #0]
      (*cinfo->upsample->start_pass) (cinfo);
      if (cinfo->quantize_colors)
	(*cinfo->cquantize->start_pass) (cinfo, master->pub.is_dummy_pass);
      (*cinfo->post->start_pass) (cinfo,
	    (master->pub.is_dummy_pass ? JBUF_SAVE_AND_PASS : JBUF_PASS_THRU));
      (*cinfo->main->start_pass) (cinfo, JBUF_PASS_THRU);
 800f28e:	4620      	mov	r0, r4
 800f290:	4798      	blx	r3
    }
  }

  /* Set up progress monitor's pass info if present */
  if (cinfo->progress != NULL) {
 800f292:	68a2      	ldr	r2, [r4, #8]
 800f294:	b1aa      	cbz	r2, 800f2c2 <prepare_for_output_pass+0x62>
    cinfo->progress->completed_passes = master->pass_number;
    cinfo->progress->total_passes = master->pass_number +
				    (master->pub.is_dummy_pass ? 2 : 1);
 800f296:	68a9      	ldr	r1, [r5, #8]
    cinfo->progress->completed_passes = master->pass_number;
 800f298:	68eb      	ldr	r3, [r5, #12]
				    (master->pub.is_dummy_pass ? 2 : 1);
 800f29a:	2900      	cmp	r1, #0
    cinfo->progress->completed_passes = master->pass_number;
 800f29c:	60d3      	str	r3, [r2, #12]
				    (master->pub.is_dummy_pass ? 2 : 1);
 800f29e:	bf14      	ite	ne
 800f2a0:	2102      	movne	r1, #2
 800f2a2:	2101      	moveq	r1, #1
    cinfo->progress->total_passes = master->pass_number +
 800f2a4:	440b      	add	r3, r1
    /* In buffered-image mode, we assume one more output pass if EOI not
     * yet reached, but no more passes if EOI has been reached.
     */
    if (cinfo->buffered_image && ! cinfo->inputctl->eoi_reached) {
 800f2a6:	6c21      	ldr	r1, [r4, #64]	; 0x40
    cinfo->progress->total_passes = master->pass_number +
 800f2a8:	6113      	str	r3, [r2, #16]
    if (cinfo->buffered_image && ! cinfo->inputctl->eoi_reached) {
 800f2aa:	b151      	cbz	r1, 800f2c2 <prepare_for_output_pass+0x62>
 800f2ac:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
 800f2b0:	6949      	ldr	r1, [r1, #20]
 800f2b2:	b931      	cbnz	r1, 800f2c2 <prepare_for_output_pass+0x62>
      cinfo->progress->total_passes += (cinfo->enable_2pass_quant ? 2 : 1);
 800f2b4:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800f2b6:	2900      	cmp	r1, #0
 800f2b8:	bf14      	ite	ne
 800f2ba:	2102      	movne	r1, #2
 800f2bc:	2101      	moveq	r1, #1
 800f2be:	440b      	add	r3, r1
 800f2c0:	6113      	str	r3, [r2, #16]
    }
  }
}
 800f2c2:	bd38      	pop	{r3, r4, r5, pc}
    if (cinfo->quantize_colors && cinfo->colormap == NULL) {
 800f2c4:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800f2c6:	b16b      	cbz	r3, 800f2e4 <prepare_for_output_pass+0x84>
 800f2c8:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 800f2cc:	b953      	cbnz	r3, 800f2e4 <prepare_for_output_pass+0x84>
      if (cinfo->two_pass_quantize && cinfo->enable_2pass_quant) {
 800f2ce:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d037      	beq.n	800f344 <prepare_for_output_pass+0xe4>
 800f2d4:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d034      	beq.n	800f344 <prepare_for_output_pass+0xe4>
	cinfo->cquantize = master->quantizer_2pass;
 800f2da:	69ab      	ldr	r3, [r5, #24]
 800f2dc:	f8c0 31e0 	str.w	r3, [r0, #480]	; 0x1e0
	master->pub.is_dummy_pass = TRUE;
 800f2e0:	2301      	movs	r3, #1
 800f2e2:	60ab      	str	r3, [r5, #8]
    (*cinfo->idct->start_pass) (cinfo);
 800f2e4:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
 800f2e8:	4620      	mov	r0, r4
 800f2ea:	681b      	ldr	r3, [r3, #0]
 800f2ec:	4798      	blx	r3
    (*cinfo->coef->start_output_pass) (cinfo);
 800f2ee:	f8d4 31c0 	ldr.w	r3, [r4, #448]	; 0x1c0
 800f2f2:	4620      	mov	r0, r4
 800f2f4:	689b      	ldr	r3, [r3, #8]
 800f2f6:	4798      	blx	r3
    if (! cinfo->raw_data_out) {
 800f2f8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	d1c9      	bne.n	800f292 <prepare_for_output_pass+0x32>
      if (! master->using_merged_upsample)
 800f2fe:	692b      	ldr	r3, [r5, #16]
 800f300:	b923      	cbnz	r3, 800f30c <prepare_for_output_pass+0xac>
	(*cinfo->cconvert->start_pass) (cinfo);
 800f302:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
 800f306:	4620      	mov	r0, r4
 800f308:	681b      	ldr	r3, [r3, #0]
 800f30a:	4798      	blx	r3
      (*cinfo->upsample->start_pass) (cinfo);
 800f30c:	f8d4 31d8 	ldr.w	r3, [r4, #472]	; 0x1d8
 800f310:	4620      	mov	r0, r4
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	4798      	blx	r3
      if (cinfo->quantize_colors)
 800f316:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800f318:	b12b      	cbz	r3, 800f326 <prepare_for_output_pass+0xc6>
	(*cinfo->cquantize->start_pass) (cinfo, master->pub.is_dummy_pass);
 800f31a:	f8d4 31e0 	ldr.w	r3, [r4, #480]	; 0x1e0
 800f31e:	4620      	mov	r0, r4
 800f320:	68a9      	ldr	r1, [r5, #8]
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	4798      	blx	r3
      (*cinfo->post->start_pass) (cinfo,
 800f326:	68aa      	ldr	r2, [r5, #8]
 800f328:	4620      	mov	r0, r4
 800f32a:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
 800f32e:	2a00      	cmp	r2, #0
 800f330:	681b      	ldr	r3, [r3, #0]
 800f332:	bf14      	ite	ne
 800f334:	2103      	movne	r1, #3
 800f336:	2100      	moveq	r1, #0
 800f338:	4798      	blx	r3
      (*cinfo->main->start_pass) (cinfo, JBUF_PASS_THRU);
 800f33a:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
 800f33e:	2100      	movs	r1, #0
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	e7a4      	b.n	800f28e <prepare_for_output_pass+0x2e>
      } else if (cinfo->enable_1pass_quant) {
 800f344:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f346:	b11b      	cbz	r3, 800f350 <prepare_for_output_pass+0xf0>
	cinfo->cquantize = master->quantizer_1pass;
 800f348:	696b      	ldr	r3, [r5, #20]
 800f34a:	f8c4 31e0 	str.w	r3, [r4, #480]	; 0x1e0
 800f34e:	e7c9      	b.n	800f2e4 <prepare_for_output_pass+0x84>
	ERREXIT(cinfo, JERR_MODE_CHANGE);
 800f350:	6823      	ldr	r3, [r4, #0]
 800f352:	222f      	movs	r2, #47	; 0x2f
 800f354:	4620      	mov	r0, r4
 800f356:	615a      	str	r2, [r3, #20]
 800f358:	681b      	ldr	r3, [r3, #0]
 800f35a:	4798      	blx	r3
 800f35c:	e7c2      	b.n	800f2e4 <prepare_for_output_pass+0x84>

0800f35e <finish_output_pass>:
METHODDEF(void)
finish_output_pass (j_decompress_ptr cinfo)
{
  my_master_ptr master = (my_master_ptr) cinfo->master;

  if (cinfo->quantize_colors)
 800f35e:	6d42      	ldr	r2, [r0, #84]	; 0x54
{
 800f360:	b510      	push	{r4, lr}
  my_master_ptr master = (my_master_ptr) cinfo->master;
 800f362:	f8d0 41b8 	ldr.w	r4, [r0, #440]	; 0x1b8
  if (cinfo->quantize_colors)
 800f366:	b11a      	cbz	r2, 800f370 <finish_output_pass+0x12>
    (*cinfo->cquantize->finish_pass) (cinfo);
 800f368:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
 800f36c:	689b      	ldr	r3, [r3, #8]
 800f36e:	4798      	blx	r3
  master->pass_number++;
 800f370:	68e3      	ldr	r3, [r4, #12]
 800f372:	3301      	adds	r3, #1
 800f374:	60e3      	str	r3, [r4, #12]
}
 800f376:	bd10      	pop	{r4, pc}

0800f378 <use_merged_upsample>:
  if (cinfo->do_fancy_upsampling || cinfo->CCIR601_sampling)
 800f378:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
{
 800f37a:	b510      	push	{r4, lr}
  if (cinfo->do_fancy_upsampling || cinfo->CCIR601_sampling)
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d143      	bne.n	800f408 <use_merged_upsample+0x90>
 800f380:	f8d0 2130 	ldr.w	r2, [r0, #304]	; 0x130
 800f384:	2a00      	cmp	r2, #0
 800f386:	d141      	bne.n	800f40c <use_merged_upsample+0x94>
  if (cinfo->jpeg_color_space != JCS_YCbCr || cinfo->num_components != 3 ||
 800f388:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 800f38c:	2b03      	cmp	r3, #3
 800f38e:	d139      	bne.n	800f404 <use_merged_upsample+0x8c>
 800f390:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800f392:	2b03      	cmp	r3, #3
 800f394:	d136      	bne.n	800f404 <use_merged_upsample+0x8c>
 800f396:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 800f39a:	2b02      	cmp	r3, #2
 800f39c:	d132      	bne.n	800f404 <use_merged_upsample+0x8c>
      cinfo->out_color_space != JCS_RGB ||
 800f39e:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800f3a0:	2b03      	cmp	r3, #3
 800f3a2:	d12f      	bne.n	800f404 <use_merged_upsample+0x8c>
  if (cinfo->comp_info[0].h_samp_factor != 2 ||
 800f3a4:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
 800f3a8:	6899      	ldr	r1, [r3, #8]
 800f3aa:	2902      	cmp	r1, #2
 800f3ac:	d12a      	bne.n	800f404 <use_merged_upsample+0x8c>
 800f3ae:	6e19      	ldr	r1, [r3, #96]	; 0x60
 800f3b0:	2901      	cmp	r1, #1
 800f3b2:	d127      	bne.n	800f404 <use_merged_upsample+0x8c>
      cinfo->comp_info[1].h_samp_factor != 1 ||
 800f3b4:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
 800f3b8:	2901      	cmp	r1, #1
 800f3ba:	d123      	bne.n	800f404 <use_merged_upsample+0x8c>
      cinfo->comp_info[2].h_samp_factor != 1 ||
 800f3bc:	68d9      	ldr	r1, [r3, #12]
 800f3be:	2902      	cmp	r1, #2
 800f3c0:	dc20      	bgt.n	800f404 <use_merged_upsample+0x8c>
      cinfo->comp_info[0].v_samp_factor >  2 ||
 800f3c2:	6e59      	ldr	r1, [r3, #100]	; 0x64
 800f3c4:	2901      	cmp	r1, #1
 800f3c6:	d11d      	bne.n	800f404 <use_merged_upsample+0x8c>
      cinfo->comp_info[1].v_samp_factor != 1 ||
 800f3c8:	f8d3 10bc 	ldr.w	r1, [r3, #188]	; 0xbc
 800f3cc:	2901      	cmp	r1, #1
 800f3ce:	d119      	bne.n	800f404 <use_merged_upsample+0x8c>
  if (cinfo->comp_info[0].DCT_h_scaled_size != cinfo->min_DCT_h_scaled_size ||
 800f3d0:	f8d0 4140 	ldr.w	r4, [r0, #320]	; 0x140
 800f3d4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800f3d6:	42a1      	cmp	r1, r4
 800f3d8:	d114      	bne.n	800f404 <use_merged_upsample+0x8c>
 800f3da:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
 800f3dc:	42a1      	cmp	r1, r4
 800f3de:	d111      	bne.n	800f404 <use_merged_upsample+0x8c>
      cinfo->comp_info[1].DCT_h_scaled_size != cinfo->min_DCT_h_scaled_size ||
 800f3e0:	f8d3 40d4 	ldr.w	r4, [r3, #212]	; 0xd4
 800f3e4:	42a1      	cmp	r1, r4
 800f3e6:	d10d      	bne.n	800f404 <use_merged_upsample+0x8c>
      cinfo->comp_info[0].DCT_v_scaled_size != cinfo->min_DCT_v_scaled_size ||
 800f3e8:	f8d0 0144 	ldr.w	r0, [r0, #324]	; 0x144
      cinfo->comp_info[2].DCT_h_scaled_size != cinfo->min_DCT_h_scaled_size ||
 800f3ec:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800f3ee:	4281      	cmp	r1, r0
 800f3f0:	d108      	bne.n	800f404 <use_merged_upsample+0x8c>
      cinfo->comp_info[0].DCT_v_scaled_size != cinfo->min_DCT_v_scaled_size ||
 800f3f2:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800f3f6:	4281      	cmp	r1, r0
 800f3f8:	d104      	bne.n	800f404 <use_merged_upsample+0x8c>
      cinfo->comp_info[1].DCT_v_scaled_size != cinfo->min_DCT_v_scaled_size ||
 800f3fa:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 800f3fe:	1a53      	subs	r3, r2, r1
 800f400:	425a      	negs	r2, r3
 800f402:	415a      	adcs	r2, r3
}
 800f404:	4610      	mov	r0, r2
 800f406:	bd10      	pop	{r4, pc}
    return FALSE;
 800f408:	2200      	movs	r2, #0
 800f40a:	e7fb      	b.n	800f404 <use_merged_upsample+0x8c>
 800f40c:	461a      	mov	r2, r3
 800f40e:	e7f9      	b.n	800f404 <use_merged_upsample+0x8c>

0800f410 <jpeg_calc_output_dimensions>:
  if (cinfo->global_state != DSTATE_READY)
 800f410:	6942      	ldr	r2, [r0, #20]
 800f412:	2aca      	cmp	r2, #202	; 0xca
{
 800f414:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f418:	4604      	mov	r4, r0
  if (cinfo->global_state != DSTATE_READY)
 800f41a:	d005      	beq.n	800f428 <jpeg_calc_output_dimensions+0x18>
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 800f41c:	6803      	ldr	r3, [r0, #0]
 800f41e:	2115      	movs	r1, #21
 800f420:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	4798      	blx	r3
  jpeg_core_output_dimensions(cinfo);
 800f428:	4620      	mov	r0, r4
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800f42a:	2600      	movs	r6, #0
  jpeg_core_output_dimensions(cinfo);
 800f42c:	f7fe faf8 	bl	800da20 <jpeg_core_output_dimensions>
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800f430:	f8d4 50d8 	ldr.w	r5, [r4, #216]	; 0xd8
 800f434:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
 800f438:	462b      	mov	r3, r5
 800f43a:	45b4      	cmp	ip, r6
 800f43c:	dd6b      	ble.n	800f516 <jpeg_calc_output_dimensions+0x106>
 800f43e:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    int ssize = 1;
 800f440:	2101      	movs	r1, #1
    while (cinfo->min_DCT_h_scaled_size * ssize <=
 800f442:	f8d4 8140 	ldr.w	r8, [r4, #320]	; 0x140
 800f446:	2a00      	cmp	r2, #0
 800f448:	bf14      	ite	ne
 800f44a:	2708      	movne	r7, #8
 800f44c:	2704      	moveq	r7, #4
 800f44e:	e00a      	b.n	800f466 <jpeg_calc_output_dimensions+0x56>
	   (cinfo->max_h_samp_factor % (compptr->h_samp_factor * ssize * 2)) == 0) {
 800f450:	689a      	ldr	r2, [r3, #8]
 800f452:	f8d4 e138 	ldr.w	lr, [r4, #312]	; 0x138
 800f456:	434a      	muls	r2, r1
 800f458:	0052      	lsls	r2, r2, #1
 800f45a:	fb9e f9f2 	sdiv	r9, lr, r2
 800f45e:	fb02 e219 	mls	r2, r2, r9, lr
	   (cinfo->do_fancy_upsampling ? DCTSIZE : DCTSIZE / 2) &&
 800f462:	b922      	cbnz	r2, 800f46e <jpeg_calc_output_dimensions+0x5e>
      ssize = ssize * 2;
 800f464:	0049      	lsls	r1, r1, #1
    while (cinfo->min_DCT_h_scaled_size * ssize <=
 800f466:	fb01 f008 	mul.w	r0, r1, r8
 800f46a:	42b8      	cmp	r0, r7
 800f46c:	ddf0      	ble.n	800f450 <jpeg_calc_output_dimensions+0x40>
    compptr->DCT_h_scaled_size = cinfo->min_DCT_h_scaled_size * ssize;
 800f46e:	6258      	str	r0, [r3, #36]	; 0x24
    ssize = 1;
 800f470:	f04f 0801 	mov.w	r8, #1
    while (cinfo->min_DCT_v_scaled_size * ssize <=
 800f474:	f8d4 9144 	ldr.w	r9, [r4, #324]	; 0x144
 800f478:	fb08 f109 	mul.w	r1, r8, r9
 800f47c:	42b9      	cmp	r1, r7
 800f47e:	dd0b      	ble.n	800f498 <jpeg_calc_output_dimensions+0x88>
    if (compptr->DCT_h_scaled_size > compptr->DCT_v_scaled_size * 2)
 800f480:	ebb0 0f41 	cmp.w	r0, r1, lsl #1
    compptr->DCT_v_scaled_size = cinfo->min_DCT_v_scaled_size * ssize;
 800f484:	6299      	str	r1, [r3, #40]	; 0x28
    if (compptr->DCT_h_scaled_size > compptr->DCT_v_scaled_size * 2)
 800f486:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800f48a:	dc14      	bgt.n	800f4b6 <jpeg_calc_output_dimensions+0xa6>
    else if (compptr->DCT_v_scaled_size > compptr->DCT_h_scaled_size * 2)
 800f48c:	0042      	lsls	r2, r0, #1
 800f48e:	ebb1 0f40 	cmp.w	r1, r0, lsl #1
	compptr->DCT_v_scaled_size = compptr->DCT_h_scaled_size * 2;
 800f492:	bfc8      	it	gt
 800f494:	629a      	strgt	r2, [r3, #40]	; 0x28
 800f496:	e00f      	b.n	800f4b8 <jpeg_calc_output_dimensions+0xa8>
	   (cinfo->max_v_samp_factor % (compptr->v_samp_factor * ssize * 2)) == 0) {
 800f498:	68da      	ldr	r2, [r3, #12]
 800f49a:	f8d4 e13c 	ldr.w	lr, [r4, #316]	; 0x13c
 800f49e:	fb02 f208 	mul.w	r2, r2, r8
 800f4a2:	0052      	lsls	r2, r2, #1
 800f4a4:	fb9e faf2 	sdiv	sl, lr, r2
 800f4a8:	fb02 e21a 	mls	r2, r2, sl, lr
	   (cinfo->do_fancy_upsampling ? DCTSIZE : DCTSIZE / 2) &&
 800f4ac:	2a00      	cmp	r2, #0
 800f4ae:	d1e7      	bne.n	800f480 <jpeg_calc_output_dimensions+0x70>
      ssize = ssize * 2;
 800f4b0:	ea4f 0848 	mov.w	r8, r8, lsl #1
 800f4b4:	e7e0      	b.n	800f478 <jpeg_calc_output_dimensions+0x68>
	compptr->DCT_h_scaled_size = compptr->DCT_v_scaled_size * 2;
 800f4b6:	625a      	str	r2, [r3, #36]	; 0x24
       ci++, compptr++) {
 800f4b8:	3601      	adds	r6, #1
 800f4ba:	3358      	adds	r3, #88	; 0x58
 800f4bc:	e7bd      	b.n	800f43a <jpeg_calc_output_dimensions+0x2a>
		    (long) (compptr->h_samp_factor * compptr->DCT_h_scaled_size),
 800f4be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
       ci++, compptr++) {
 800f4c0:	3601      	adds	r6, #1
		    (long) (compptr->h_samp_factor * compptr->DCT_h_scaled_size),
 800f4c2:	68a8      	ldr	r0, [r5, #8]
       ci++, compptr++) {
 800f4c4:	3558      	adds	r5, #88	; 0x58
		    (long) (cinfo->max_h_samp_factor * cinfo->block_size));
 800f4c6:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
 800f4ca:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
		    (long) (compptr->h_samp_factor * compptr->DCT_h_scaled_size),
 800f4ce:	4358      	muls	r0, r3
      jdiv_round_up((long) cinfo->image_width *
 800f4d0:	69e3      	ldr	r3, [r4, #28]
 800f4d2:	4351      	muls	r1, r2
 800f4d4:	4358      	muls	r0, r3
 800f4d6:	f007 fe71 	bl	80171bc <jdiv_round_up>
		    (long) (compptr->v_samp_factor * compptr->DCT_v_scaled_size),
 800f4da:	f855 3c30 	ldr.w	r3, [r5, #-48]
    compptr->downsampled_width = (JDIMENSION)
 800f4de:	f845 0c2c 	str.w	r0, [r5, #-44]
		    (long) (compptr->v_samp_factor * compptr->DCT_v_scaled_size),
 800f4e2:	f855 0c4c 	ldr.w	r0, [r5, #-76]
		    (long) (cinfo->max_v_samp_factor * cinfo->block_size));
 800f4e6:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
 800f4ea:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
		    (long) (compptr->v_samp_factor * compptr->DCT_v_scaled_size),
 800f4ee:	4358      	muls	r0, r3
      jdiv_round_up((long) cinfo->image_height *
 800f4f0:	6a23      	ldr	r3, [r4, #32]
 800f4f2:	4351      	muls	r1, r2
 800f4f4:	4358      	muls	r0, r3
 800f4f6:	f007 fe61 	bl	80171bc <jdiv_round_up>
    compptr->downsampled_height = (JDIMENSION)
 800f4fa:	f845 0c28 	str.w	r0, [r5, #-40]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800f4fe:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800f500:	42b2      	cmp	r2, r6
 800f502:	dcdc      	bgt.n	800f4be <jpeg_calc_output_dimensions+0xae>
  switch (cinfo->out_color_space) {
 800f504:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 800f508:	2b03      	cmp	r3, #3
 800f50a:	d806      	bhi.n	800f51a <jpeg_calc_output_dimensions+0x10a>
 800f50c:	2b01      	cmp	r3, #1
 800f50e:	d809      	bhi.n	800f524 <jpeg_calc_output_dimensions+0x114>
 800f510:	d009      	beq.n	800f526 <jpeg_calc_output_dimensions+0x116>
    cinfo->out_color_components = cinfo->num_components;
 800f512:	67a2      	str	r2, [r4, #120]	; 0x78
    break;
 800f514:	e008      	b.n	800f528 <jpeg_calc_output_dimensions+0x118>
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800f516:	2600      	movs	r6, #0
 800f518:	e7f1      	b.n	800f4fe <jpeg_calc_output_dimensions+0xee>
  switch (cinfo->out_color_space) {
 800f51a:	3b04      	subs	r3, #4
 800f51c:	2b01      	cmp	r3, #1
 800f51e:	d8f8      	bhi.n	800f512 <jpeg_calc_output_dimensions+0x102>
    cinfo->out_color_components = 4;
 800f520:	2304      	movs	r3, #4
 800f522:	e000      	b.n	800f526 <jpeg_calc_output_dimensions+0x116>
    cinfo->out_color_components = RGB_PIXELSIZE;
 800f524:	2303      	movs	r3, #3
    cinfo->out_color_components = 4;
 800f526:	67a3      	str	r3, [r4, #120]	; 0x78
  cinfo->output_components = (cinfo->quantize_colors ? 1 :
 800f528:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800f52a:	b95b      	cbnz	r3, 800f544 <jpeg_calc_output_dimensions+0x134>
 800f52c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
  if (use_merged_upsample(cinfo))
 800f52e:	4620      	mov	r0, r4
  cinfo->output_components = (cinfo->quantize_colors ? 1 :
 800f530:	67e3      	str	r3, [r4, #124]	; 0x7c
  if (use_merged_upsample(cinfo))
 800f532:	f7ff ff21 	bl	800f378 <use_merged_upsample>
 800f536:	b138      	cbz	r0, 800f548 <jpeg_calc_output_dimensions+0x138>
    cinfo->rec_outbuf_height = cinfo->max_v_samp_factor;
 800f538:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
 800f53c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
}
 800f540:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  cinfo->output_components = (cinfo->quantize_colors ? 1 :
 800f544:	2301      	movs	r3, #1
 800f546:	e7f2      	b.n	800f52e <jpeg_calc_output_dimensions+0x11e>
    cinfo->rec_outbuf_height = 1;
 800f548:	2301      	movs	r3, #1
 800f54a:	e7f7      	b.n	800f53c <jpeg_calc_output_dimensions+0x12c>

0800f54c <jinit_master_decompress>:
 * This is performed at the start of jpeg_start_decompress.
 */

GLOBAL(void)
jinit_master_decompress (j_decompress_ptr cinfo)
{
 800f54c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  my_master_ptr master;

  master = (my_master_ptr)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f54e:	6843      	ldr	r3, [r0, #4]
 800f550:	221c      	movs	r2, #28
 800f552:	2101      	movs	r1, #1
{
 800f554:	4604      	mov	r4, r0
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f556:	681b      	ldr	r3, [r3, #0]
				  SIZEOF(my_decomp_master));
  cinfo->master = (struct jpeg_decomp_master *) master;
  master->pub.prepare_for_output_pass = prepare_for_output_pass;
  master->pub.finish_output_pass = finish_output_pass;

  master->pub.is_dummy_pass = FALSE;
 800f558:	2600      	movs	r6, #0
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f55a:	4798      	blx	r3
  master->pub.prepare_for_output_pass = prepare_for_output_pass;
 800f55c:	4b6d      	ldr	r3, [pc, #436]	; (800f714 <jinit_master_decompress+0x1c8>)
  cinfo->master = (struct jpeg_decomp_master *) master;
 800f55e:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f562:	4605      	mov	r5, r0
  master->pub.prepare_for_output_pass = prepare_for_output_pass;
 800f564:	6003      	str	r3, [r0, #0]
  master->pub.finish_output_pass = finish_output_pass;
 800f566:	4b6c      	ldr	r3, [pc, #432]	; (800f718 <jinit_master_decompress+0x1cc>)
  master->pub.is_dummy_pass = FALSE;
 800f568:	6086      	str	r6, [r0, #8]
  master->pub.finish_output_pass = finish_output_pass;
 800f56a:	6043      	str	r3, [r0, #4]
  jpeg_calc_output_dimensions(cinfo);
 800f56c:	4620      	mov	r0, r4
 800f56e:	f7ff ff4f 	bl	800f410 <jpeg_calc_output_dimensions>
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f572:	6863      	ldr	r3, [r4, #4]
 800f574:	f44f 62b0 	mov.w	r2, #1408	; 0x580
 800f578:	2101      	movs	r1, #1
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	4620      	mov	r0, r4
 800f57e:	4798      	blx	r3
  table += (MAXJSAMPLE+1);	/* allow negative subscripts of simple table */
 800f580:	f500 7380 	add.w	r3, r0, #256	; 0x100
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f584:	4607      	mov	r7, r0
  MEMZERO(table - (MAXJSAMPLE+1), (MAXJSAMPLE+1) * SIZEOF(JSAMPLE));
 800f586:	4631      	mov	r1, r6
  cinfo->sample_range_limit = table;
 800f588:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
  MEMZERO(table - (MAXJSAMPLE+1), (MAXJSAMPLE+1) * SIZEOF(JSAMPLE));
 800f58c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f590:	f01a fe40 	bl	802a214 <memset>
  for (i = 0; i <= MAXJSAMPLE; i++)
 800f594:	f107 03ff 	add.w	r3, r7, #255	; 0xff
 800f598:	4631      	mov	r1, r6
    table[i] = (JSAMPLE) i;
 800f59a:	f803 1f01 	strb.w	r1, [r3, #1]!
  for (i = 0; i <= MAXJSAMPLE; i++)
 800f59e:	3101      	adds	r1, #1
 800f5a0:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800f5a4:	d1f9      	bne.n	800f59a <jinit_master_decompress+0x4e>
    table[i] = MAXJSAMPLE;
 800f5a6:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800f5aa:	21ff      	movs	r1, #255	; 0xff
 800f5ac:	f507 7000 	add.w	r0, r7, #512	; 0x200
  master->pass_number = 0;
 800f5b0:	2600      	movs	r6, #0
    table[i] = MAXJSAMPLE;
 800f5b2:	f01a fe2f 	bl	802a214 <memset>
  MEMZERO(table + (2 * (MAXJSAMPLE+1)),
 800f5b6:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800f5ba:	2100      	movs	r1, #0
 800f5bc:	f507 7060 	add.w	r0, r7, #896	; 0x380
 800f5c0:	f01a fe28 	bl	802a214 <memset>
  MEMCOPY(table + (4 * (MAXJSAMPLE+1) - CENTERJSAMPLE),
 800f5c4:	2280      	movs	r2, #128	; 0x80
 800f5c6:	f8d4 114c 	ldr.w	r1, [r4, #332]	; 0x14c
 800f5ca:	f507 60a0 	add.w	r0, r7, #1280	; 0x500
 800f5ce:	f01a fe13 	bl	802a1f8 <memcpy>
  master->using_merged_upsample = use_merged_upsample(cinfo);
 800f5d2:	4620      	mov	r0, r4
  master->pass_number = 0;
 800f5d4:	60ee      	str	r6, [r5, #12]
  master->using_merged_upsample = use_merged_upsample(cinfo);
 800f5d6:	f7ff fecf 	bl	800f378 <use_merged_upsample>
  if (! cinfo->quantize_colors || ! cinfo->buffered_image) {
 800f5da:	6d63      	ldr	r3, [r4, #84]	; 0x54
  master->quantizer_2pass = NULL;
 800f5dc:	61ae      	str	r6, [r5, #24]
  master->quantizer_1pass = NULL;
 800f5de:	e9c5 0604 	strd	r0, r6, [r5, #16]
  if (! cinfo->quantize_colors || ! cinfo->buffered_image) {
 800f5e2:	b1b3      	cbz	r3, 800f612 <jinit_master_decompress+0xc6>
 800f5e4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800f5e6:	b1a2      	cbz	r2, 800f612 <jinit_master_decompress+0xc6>
    if (cinfo->raw_data_out)
 800f5e8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	d166      	bne.n	800f6bc <jinit_master_decompress+0x170>
    if (cinfo->out_color_components != 3) {
 800f5ee:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800f5f0:	2b03      	cmp	r3, #3
 800f5f2:	f04f 0301 	mov.w	r3, #1
 800f5f6:	d068      	beq.n	800f6ca <jinit_master_decompress+0x17e>
      cinfo->enable_1pass_quant = TRUE;
 800f5f8:	6663      	str	r3, [r4, #100]	; 0x64
      cinfo->enable_external_quant = FALSE;
 800f5fa:	2300      	movs	r3, #0
      cinfo->enable_2pass_quant = FALSE;
 800f5fc:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
      cinfo->colormap = NULL;
 800f600:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
      jinit_1pass_quantizer(cinfo);
 800f604:	4620      	mov	r0, r4
 800f606:	f006 fef1 	bl	80163ec <jinit_1pass_quantizer>
      master->quantizer_1pass = cinfo->cquantize;
 800f60a:	f8d4 31e0 	ldr.w	r3, [r4, #480]	; 0x1e0
 800f60e:	616b      	str	r3, [r5, #20]
 800f610:	e062      	b.n	800f6d8 <jinit_master_decompress+0x18c>
    cinfo->enable_external_quant = FALSE;
 800f612:	e9c4 6619 	strd	r6, r6, [r4, #100]	; 0x64
    cinfo->enable_2pass_quant = FALSE;
 800f616:	66e6      	str	r6, [r4, #108]	; 0x6c
  if (cinfo->quantize_colors) {
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d1e5      	bne.n	800f5e8 <jinit_master_decompress+0x9c>
  if (! cinfo->raw_data_out) {
 800f61c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f61e:	b94b      	cbnz	r3, 800f634 <jinit_master_decompress+0xe8>
    if (master->using_merged_upsample) {
 800f620:	692b      	ldr	r3, [r5, #16]
      jinit_merged_upsampler(cinfo); /* does color conversion too */
 800f622:	4620      	mov	r0, r4
    if (master->using_merged_upsample) {
 800f624:	2b00      	cmp	r3, #0
 800f626:	d069      	beq.n	800f6fc <jinit_master_decompress+0x1b0>
      jinit_merged_upsampler(cinfo); /* does color conversion too */
 800f628:	f000 fa1c 	bl	800fa64 <jinit_merged_upsampler>
    jinit_d_post_controller(cinfo, cinfo->enable_2pass_quant);
 800f62c:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800f62e:	4620      	mov	r0, r4
 800f630:	f000 fb98 	bl	800fd64 <jinit_d_post_controller>
  jinit_inverse_dct(cinfo);
 800f634:	4620      	mov	r0, r4
 800f636:	f7fc fda7 	bl	800c188 <jinit_inverse_dct>
  if (cinfo->arith_code)
 800f63a:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
    jinit_arith_decoder(cinfo);
 800f63e:	4620      	mov	r0, r4
  if (cinfo->arith_code)
 800f640:	2b00      	cmp	r3, #0
 800f642:	d061      	beq.n	800f708 <jinit_master_decompress+0x1bc>
    jinit_arith_decoder(cinfo);
 800f644:	f7fb fc16 	bl	800ae74 <jinit_arith_decoder>
  use_c_buffer = cinfo->inputctl->has_multiple_scans || cinfo->buffered_image;
 800f648:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 800f64c:	691b      	ldr	r3, [r3, #16]
 800f64e:	2b00      	cmp	r3, #0
 800f650:	d15d      	bne.n	800f70e <jinit_master_decompress+0x1c2>
 800f652:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800f654:	3900      	subs	r1, #0
 800f656:	bf18      	it	ne
 800f658:	2101      	movne	r1, #1
  jinit_d_coef_controller(cinfo, use_c_buffer);
 800f65a:	4620      	mov	r0, r4
 800f65c:	f7fc f8fc 	bl	800b858 <jinit_d_coef_controller>
  if (! cinfo->raw_data_out)
 800f660:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800f662:	b911      	cbnz	r1, 800f66a <jinit_master_decompress+0x11e>
    jinit_d_main_controller(cinfo, FALSE /* never need full buffer here */);
 800f664:	4620      	mov	r0, r4
 800f666:	f7fe fca3 	bl	800dfb0 <jinit_d_main_controller>
  (*cinfo->mem->realize_virt_arrays) ((j_common_ptr) cinfo);
 800f66a:	6863      	ldr	r3, [r4, #4]
 800f66c:	4620      	mov	r0, r4
 800f66e:	699b      	ldr	r3, [r3, #24]
 800f670:	4798      	blx	r3
  (*cinfo->inputctl->start_input_pass) (cinfo);
 800f672:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 800f676:	4620      	mov	r0, r4
 800f678:	689b      	ldr	r3, [r3, #8]
 800f67a:	4798      	blx	r3
  if (cinfo->progress != NULL && ! cinfo->buffered_image &&
 800f67c:	68a2      	ldr	r2, [r4, #8]
 800f67e:	b1e2      	cbz	r2, 800f6ba <jinit_master_decompress+0x16e>
 800f680:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f682:	b9d3      	cbnz	r3, 800f6ba <jinit_master_decompress+0x16e>
      cinfo->inputctl->has_multiple_scans) {
 800f684:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
  if (cinfo->progress != NULL && ! cinfo->buffered_image &&
 800f688:	691b      	ldr	r3, [r3, #16]
 800f68a:	b1b3      	cbz	r3, 800f6ba <jinit_master_decompress+0x16e>
    if (cinfo->progressive_mode) {
 800f68c:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
      nscans = 2 + 3 * cinfo->num_components;
 800f690:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if (cinfo->progressive_mode) {
 800f692:	b111      	cbz	r1, 800f69a <jinit_master_decompress+0x14e>
      nscans = 2 + 3 * cinfo->num_components;
 800f694:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800f698:	3302      	adds	r3, #2
    cinfo->progress->pass_limit = (long) cinfo->total_iMCU_rows * nscans;
 800f69a:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
    cinfo->progress->pass_counter = 0L;
 800f69e:	2000      	movs	r0, #0
    cinfo->progress->pass_limit = (long) cinfo->total_iMCU_rows * nscans;
 800f6a0:	434b      	muls	r3, r1
    cinfo->progress->pass_counter = 0L;
 800f6a2:	6050      	str	r0, [r2, #4]
    cinfo->progress->completed_passes = 0;
 800f6a4:	e9c2 3002 	strd	r3, r0, [r2, #8]
    cinfo->progress->total_passes = (cinfo->enable_2pass_quant ? 3 : 2);
 800f6a8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800f6aa:	4283      	cmp	r3, r0
 800f6ac:	bf14      	ite	ne
 800f6ae:	2303      	movne	r3, #3
 800f6b0:	2302      	moveq	r3, #2
 800f6b2:	6113      	str	r3, [r2, #16]
    master->pass_number++;
 800f6b4:	68eb      	ldr	r3, [r5, #12]
 800f6b6:	3301      	adds	r3, #1
 800f6b8:	60eb      	str	r3, [r5, #12]

  master_selection(cinfo);
}
 800f6ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ERREXIT(cinfo, JERR_NOTIMPL);
 800f6bc:	6823      	ldr	r3, [r4, #0]
 800f6be:	2230      	movs	r2, #48	; 0x30
 800f6c0:	4620      	mov	r0, r4
 800f6c2:	615a      	str	r2, [r3, #20]
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	4798      	blx	r3
 800f6c8:	e791      	b.n	800f5ee <jinit_master_decompress+0xa2>
    } else if (cinfo->colormap != NULL) {
 800f6ca:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 800f6ce:	b17a      	cbz	r2, 800f6f0 <jinit_master_decompress+0x1a4>
      cinfo->enable_external_quant = TRUE;
 800f6d0:	66a3      	str	r3, [r4, #104]	; 0x68
    if (cinfo->enable_1pass_quant) {
 800f6d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d195      	bne.n	800f604 <jinit_master_decompress+0xb8>
    if (cinfo->enable_2pass_quant || cinfo->enable_external_quant) {
 800f6d8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800f6da:	b913      	cbnz	r3, 800f6e2 <jinit_master_decompress+0x196>
 800f6dc:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d09c      	beq.n	800f61c <jinit_master_decompress+0xd0>
      jinit_2pass_quantizer(cinfo);
 800f6e2:	4620      	mov	r0, r4
 800f6e4:	f007 fcfe 	bl	80170e4 <jinit_2pass_quantizer>
      master->quantizer_2pass = cinfo->cquantize;
 800f6e8:	f8d4 31e0 	ldr.w	r3, [r4, #480]	; 0x1e0
 800f6ec:	61ab      	str	r3, [r5, #24]
 800f6ee:	e795      	b.n	800f61c <jinit_master_decompress+0xd0>
    } else if (cinfo->two_pass_quantize) {
 800f6f0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800f6f2:	b10a      	cbz	r2, 800f6f8 <jinit_master_decompress+0x1ac>
      cinfo->enable_2pass_quant = TRUE;
 800f6f4:	66e3      	str	r3, [r4, #108]	; 0x6c
 800f6f6:	e7ec      	b.n	800f6d2 <jinit_master_decompress+0x186>
      cinfo->enable_1pass_quant = TRUE;
 800f6f8:	6663      	str	r3, [r4, #100]	; 0x64
 800f6fa:	e783      	b.n	800f604 <jinit_master_decompress+0xb8>
      jinit_color_deconverter(cinfo);
 800f6fc:	f7fc fad2 	bl	800bca4 <jinit_color_deconverter>
      jinit_upsampler(cinfo);
 800f700:	4620      	mov	r0, r4
 800f702:	f000 fc4f 	bl	800ffa4 <jinit_upsampler>
 800f706:	e791      	b.n	800f62c <jinit_master_decompress+0xe0>
    jinit_huff_decoder(cinfo);
 800f708:	f7fd fed6 	bl	800d4b8 <jinit_huff_decoder>
 800f70c:	e79c      	b.n	800f648 <jinit_master_decompress+0xfc>
  use_c_buffer = cinfo->inputctl->has_multiple_scans || cinfo->buffered_image;
 800f70e:	2101      	movs	r1, #1
 800f710:	e7a3      	b.n	800f65a <jinit_master_decompress+0x10e>
 800f712:	bf00      	nop
 800f714:	0800f261 	.word	0x0800f261
 800f718:	0800f35f 	.word	0x0800f35f

0800f71c <start_pass_merged_upsample>:
 */

METHODDEF(void)
start_pass_merged_upsample (j_decompress_ptr cinfo)
{
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 800f71c:	f8d0 31d8 	ldr.w	r3, [r0, #472]	; 0x1d8

  /* Mark the spare buffer empty */
  upsample->spare_full = FALSE;
 800f720:	2200      	movs	r2, #0
 800f722:	625a      	str	r2, [r3, #36]	; 0x24
  /* Initialize total-height counter for detecting bottom of image */
  upsample->rows_to_go = cinfo->output_height;
 800f724:	6f42      	ldr	r2, [r0, #116]	; 0x74
 800f726:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800f728:	4770      	bx	lr

0800f72a <merged_1v_upsample>:
		    JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
		    JDIMENSION in_row_groups_avail,
		    JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
		    JDIMENSION out_rows_avail)
/* 1:1 vertical sampling case: much easier, never need a spare row. */
{
 800f72a:	b570      	push	{r4, r5, r6, lr}
 800f72c:	9d05      	ldr	r5, [sp, #20]
 800f72e:	4614      	mov	r4, r2
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;

  /* Just do the upsampling. */
  (*upsample->upmethod) (cinfo, input_buf, *in_row_group_ctr,
 800f730:	f8d0 31d8 	ldr.w	r3, [r0, #472]	; 0x1d8
			 output_buf + *out_row_ctr);
 800f734:	682a      	ldr	r2, [r5, #0]
  (*upsample->upmethod) (cinfo, input_buf, *in_row_group_ctr,
 800f736:	68de      	ldr	r6, [r3, #12]
 800f738:	9b04      	ldr	r3, [sp, #16]
 800f73a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800f73e:	6822      	ldr	r2, [r4, #0]
 800f740:	47b0      	blx	r6
  /* Adjust counts */
  (*out_row_ctr)++;
 800f742:	682b      	ldr	r3, [r5, #0]
 800f744:	3301      	adds	r3, #1
 800f746:	602b      	str	r3, [r5, #0]
  (*in_row_group_ctr)++;
 800f748:	6823      	ldr	r3, [r4, #0]
 800f74a:	3301      	adds	r3, #1
 800f74c:	6023      	str	r3, [r4, #0]
}
 800f74e:	bd70      	pop	{r4, r5, r6, pc}

0800f750 <h2v1_merged_upsample>:

METHODDEF(void)
h2v1_merged_upsample (j_decompress_ptr cinfo,
		      JSAMPIMAGE input_buf, JDIMENSION in_row_group_ctr,
		      JSAMPARRAY output_buf)
{
 800f750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 800f754:	f8d0 51d8 	ldr.w	r5, [r0, #472]	; 0x1d8
{
 800f758:	b087      	sub	sp, #28
  SHIFT_TEMPS

  inptr0 = input_buf[0][in_row_group_ctr];
  inptr1 = input_buf[1][in_row_group_ctr];
  inptr2 = input_buf[2][in_row_group_ctr];
  outptr = output_buf[0];
 800f75a:	f8d3 c000 	ldr.w	ip, [r3]
  int * Crrtab = upsample->Cr_r_tab;
 800f75e:	692e      	ldr	r6, [r5, #16]
  INT32 * Cbgtab = upsample->Cb_g_tab;
 800f760:	f8d5 801c 	ldr.w	r8, [r5, #28]
 800f764:	4663      	mov	r3, ip
  int * Crrtab = upsample->Cr_r_tab;
 800f766:	9600      	str	r6, [sp, #0]
  int * Cbbtab = upsample->Cb_b_tab;
 800f768:	696e      	ldr	r6, [r5, #20]
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
 800f76a:	f8d0 414c 	ldr.w	r4, [r0, #332]	; 0x14c
  int * Cbbtab = upsample->Cb_b_tab;
 800f76e:	9601      	str	r6, [sp, #4]
  INT32 * Crgtab = upsample->Cr_g_tab;
 800f770:	69ae      	ldr	r6, [r5, #24]
  inptr0 = input_buf[0][in_row_group_ctr];
 800f772:	680d      	ldr	r5, [r1, #0]
  INT32 * Crgtab = upsample->Cr_g_tab;
 800f774:	9602      	str	r6, [sp, #8]
  inptr0 = input_buf[0][in_row_group_ctr];
 800f776:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 800f77a:	9503      	str	r5, [sp, #12]
  inptr1 = input_buf[1][in_row_group_ctr];
 800f77c:	684d      	ldr	r5, [r1, #4]
  inptr2 = input_buf[2][in_row_group_ctr];
 800f77e:	6889      	ldr	r1, [r1, #8]
  inptr1 = input_buf[1][in_row_group_ctr];
 800f780:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
  inptr2 = input_buf[2][in_row_group_ctr];
 800f784:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800f788:	9903      	ldr	r1, [sp, #12]
 800f78a:	9204      	str	r2, [sp, #16]
  /* Loop for each pair of output pixels */
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 800f78c:	6f02      	ldr	r2, [r0, #112]	; 0x70
  inptr2 = input_buf[2][in_row_group_ctr];
 800f78e:	f8dd 9010 	ldr.w	r9, [sp, #16]
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 800f792:	ea4f 0e52 	mov.w	lr, r2, lsr #1
 800f796:	eb05 0252 	add.w	r2, r5, r2, lsr #1
 800f79a:	9205      	str	r2, [sp, #20]
 800f79c:	9a05      	ldr	r2, [sp, #20]
 800f79e:	3306      	adds	r3, #6
 800f7a0:	3102      	adds	r1, #2
 800f7a2:	4295      	cmp	r5, r2
 800f7a4:	d128      	bne.n	800f7f8 <h2v1_merged_upsample+0xa8>
 800f7a6:	2306      	movs	r3, #6
    outptr[RGB_GREEN] = range_limit[y + cgreen];
    outptr[RGB_BLUE] =  range_limit[y + cblue];
    outptr += RGB_PIXELSIZE;
  }
  /* If image width is odd, do the last output column separately */
  if (cinfo->output_width & 1) {
 800f7a8:	6f02      	ldr	r2, [r0, #112]	; 0x70
 800f7aa:	fb03 f30e 	mul.w	r3, r3, lr
 800f7ae:	07d2      	lsls	r2, r2, #31
 800f7b0:	eb0c 0103 	add.w	r1, ip, r3
 800f7b4:	d51d      	bpl.n	800f7f2 <h2v1_merged_upsample+0xa2>
    cb = GETJSAMPLE(*inptr1);
    cr = GETJSAMPLE(*inptr2);
    cred = Crrtab[cr];
 800f7b6:	9a04      	ldr	r2, [sp, #16]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800f7b8:	9802      	ldr	r0, [sp, #8]
    cred = Crrtab[cr];
 800f7ba:	f812 600e 	ldrb.w	r6, [r2, lr]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800f7be:	782a      	ldrb	r2, [r5, #0]
 800f7c0:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 800f7c4:	f858 5022 	ldr.w	r5, [r8, r2, lsl #2]
    cblue = Cbbtab[cb];
    y  = GETJSAMPLE(*inptr0);
    outptr[RGB_RED] =   range_limit[y + cred];
 800f7c8:	9f00      	ldr	r7, [sp, #0]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800f7ca:	4428      	add	r0, r5
    cblue = Cbbtab[cb];
 800f7cc:	9d01      	ldr	r5, [sp, #4]
    outptr[RGB_RED] =   range_limit[y + cred];
 800f7ce:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
    cblue = Cbbtab[cb];
 800f7d2:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
    outptr[RGB_GREEN] = range_limit[y + cgreen];
 800f7d6:	eb04 4020 	add.w	r0, r4, r0, asr #16
    y  = GETJSAMPLE(*inptr0);
 800f7da:	9a03      	ldr	r2, [sp, #12]
 800f7dc:	f812 201e 	ldrb.w	r2, [r2, lr, lsl #1]
    outptr[RGB_RED] =   range_limit[y + cred];
 800f7e0:	18a7      	adds	r7, r4, r2
    outptr[RGB_BLUE] =  range_limit[y + cblue];
 800f7e2:	442c      	add	r4, r5
    outptr[RGB_RED] =   range_limit[y + cred];
 800f7e4:	5dbe      	ldrb	r6, [r7, r6]
 800f7e6:	708e      	strb	r6, [r1, #2]
    outptr[RGB_GREEN] = range_limit[y + cgreen];
 800f7e8:	5c80      	ldrb	r0, [r0, r2]
 800f7ea:	7048      	strb	r0, [r1, #1]
    outptr[RGB_BLUE] =  range_limit[y + cblue];
 800f7ec:	5ca2      	ldrb	r2, [r4, r2]
 800f7ee:	f80c 2003 	strb.w	r2, [ip, r3]
  }
}
 800f7f2:	b007      	add	sp, #28
 800f7f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cred = Crrtab[cr];
 800f7f8:	f819 ab01 	ldrb.w	sl, [r9], #1
 800f7fc:	9a00      	ldr	r2, [sp, #0]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800f7fe:	f815 6b01 	ldrb.w	r6, [r5], #1
    cred = Crrtab[cr];
 800f802:	f852 b02a 	ldr.w	fp, [r2, sl, lsl #2]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800f806:	9a02      	ldr	r2, [sp, #8]
 800f808:	f858 7026 	ldr.w	r7, [r8, r6, lsl #2]
 800f80c:	f852 202a 	ldr.w	r2, [r2, sl, lsl #2]
    y  = GETJSAMPLE(*inptr0++);
 800f810:	f811 ac02 	ldrb.w	sl, [r1, #-2]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800f814:	443a      	add	r2, r7
    cblue = Cbbtab[cb];
 800f816:	9f01      	ldr	r7, [sp, #4]
 800f818:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
    outptr[RGB_RED] =   range_limit[y + cred];
 800f81c:	eb0b 0704 	add.w	r7, fp, r4
    outptr[RGB_GREEN] = range_limit[y + cgreen];
 800f820:	eb04 4222 	add.w	r2, r4, r2, asr #16
    outptr[RGB_RED] =   range_limit[y + cred];
 800f824:	f817 b00a 	ldrb.w	fp, [r7, sl]
    outptr[RGB_BLUE] =  range_limit[y + cblue];
 800f828:	4426      	add	r6, r4
    outptr[RGB_RED] =   range_limit[y + cred];
 800f82a:	f803 bc04 	strb.w	fp, [r3, #-4]
    outptr[RGB_GREEN] = range_limit[y + cgreen];
 800f82e:	f812 b00a 	ldrb.w	fp, [r2, sl]
 800f832:	f803 bc05 	strb.w	fp, [r3, #-5]
    outptr[RGB_BLUE] =  range_limit[y + cblue];
 800f836:	f816 a00a 	ldrb.w	sl, [r6, sl]
 800f83a:	f803 ac06 	strb.w	sl, [r3, #-6]
    y  = GETJSAMPLE(*inptr0++);
 800f83e:	f811 ac01 	ldrb.w	sl, [r1, #-1]
    outptr[RGB_RED] =   range_limit[y + cred];
 800f842:	f817 700a 	ldrb.w	r7, [r7, sl]
 800f846:	f803 7c01 	strb.w	r7, [r3, #-1]
    outptr[RGB_GREEN] = range_limit[y + cgreen];
 800f84a:	f812 200a 	ldrb.w	r2, [r2, sl]
 800f84e:	f803 2c02 	strb.w	r2, [r3, #-2]
    outptr[RGB_BLUE] =  range_limit[y + cblue];
 800f852:	f816 200a 	ldrb.w	r2, [r6, sl]
 800f856:	f803 2c03 	strb.w	r2, [r3, #-3]
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 800f85a:	e79f      	b.n	800f79c <h2v1_merged_upsample+0x4c>

0800f85c <h2v2_merged_upsample>:

METHODDEF(void)
h2v2_merged_upsample (j_decompress_ptr cinfo,
		      JSAMPIMAGE input_buf, JDIMENSION in_row_group_ctr,
		      JSAMPARRAY output_buf)
{
 800f85c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 800f860:	f8d0 51d8 	ldr.w	r5, [r0, #472]	; 0x1d8
{
 800f864:	b08b      	sub	sp, #44	; 0x2c
  int cb, cr;
  register JSAMPROW outptr0, outptr1;
  JSAMPROW inptr00, inptr01, inptr1, inptr2;
  JDIMENSION col;
  /* copy these pointers into registers if possible */
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
 800f866:	f8d0 414c 	ldr.w	r4, [r0, #332]	; 0x14c
  int * Crrtab = upsample->Cr_r_tab;
 800f86a:	692e      	ldr	r6, [r5, #16]
  int * Cbbtab = upsample->Cb_b_tab;
  INT32 * Crgtab = upsample->Cr_g_tab;
  INT32 * Cbgtab = upsample->Cb_g_tab;
 800f86c:	f8d5 a01c 	ldr.w	sl, [r5, #28]
  int * Crrtab = upsample->Cr_r_tab;
 800f870:	9603      	str	r6, [sp, #12]
  int * Cbbtab = upsample->Cb_b_tab;
 800f872:	696e      	ldr	r6, [r5, #20]
 800f874:	9604      	str	r6, [sp, #16]
  INT32 * Crgtab = upsample->Cr_g_tab;
 800f876:	69ae      	ldr	r6, [r5, #24]
  SHIFT_TEMPS

  inptr00 = input_buf[0][in_row_group_ctr*2];
 800f878:	680d      	ldr	r5, [r1, #0]
  INT32 * Crgtab = upsample->Cr_g_tab;
 800f87a:	9605      	str	r6, [sp, #20]
  inptr00 = input_buf[0][in_row_group_ctr*2];
 800f87c:	f855 6032 	ldr.w	r6, [r5, r2, lsl #3]
  inptr01 = input_buf[0][in_row_group_ctr*2 + 1];
 800f880:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
 800f884:	686d      	ldr	r5, [r5, #4]
 800f886:	46b6      	mov	lr, r6
  inptr00 = input_buf[0][in_row_group_ctr*2];
 800f888:	9606      	str	r6, [sp, #24]
  inptr01 = input_buf[0][in_row_group_ctr*2 + 1];
 800f88a:	9507      	str	r5, [sp, #28]
  inptr1 = input_buf[1][in_row_group_ctr];
 800f88c:	684d      	ldr	r5, [r1, #4]
  inptr2 = input_buf[2][in_row_group_ctr];
 800f88e:	6889      	ldr	r1, [r1, #8]
  inptr1 = input_buf[1][in_row_group_ctr];
 800f890:	f855 8022 	ldr.w	r8, [r5, r2, lsl #2]
  inptr2 = input_buf[2][in_row_group_ctr];
 800f894:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
  outptr0 = output_buf[0];
  outptr1 = output_buf[1];
  /* Loop for each group of output pixels */
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 800f898:	6f01      	ldr	r1, [r0, #112]	; 0x70
  inptr2 = input_buf[2][in_row_group_ctr];
 800f89a:	9208      	str	r2, [sp, #32]
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 800f89c:	084f      	lsrs	r7, r1, #1
  outptr0 = output_buf[0];
 800f89e:	681a      	ldr	r2, [r3, #0]
 800f8a0:	eb08 0151 	add.w	r1, r8, r1, lsr #1
  outptr1 = output_buf[1];
 800f8a4:	685b      	ldr	r3, [r3, #4]
 800f8a6:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800f8aa:	9109      	str	r1, [sp, #36]	; 0x24
  inptr2 = input_buf[2][in_row_group_ctr];
 800f8ac:	9908      	ldr	r1, [sp, #32]
  outptr0 = output_buf[0];
 800f8ae:	9200      	str	r2, [sp, #0]
  outptr1 = output_buf[1];
 800f8b0:	9301      	str	r3, [sp, #4]
  inptr2 = input_buf[2][in_row_group_ctr];
 800f8b2:	9102      	str	r1, [sp, #8]
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 800f8b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f8b6:	3206      	adds	r2, #6
 800f8b8:	3306      	adds	r3, #6
 800f8ba:	f10e 0e02 	add.w	lr, lr, #2
 800f8be:	4588      	cmp	r8, r1
 800f8c0:	f10c 0c02 	add.w	ip, ip, #2
 800f8c4:	d13a      	bne.n	800f93c <h2v2_merged_upsample+0xe0>
 800f8c6:	2306      	movs	r3, #6
 800f8c8:	9a00      	ldr	r2, [sp, #0]
    outptr1[RGB_GREEN] = range_limit[y + cgreen];
    outptr1[RGB_BLUE] =  range_limit[y + cblue];
    outptr1 += RGB_PIXELSIZE;
  }
  /* If image width is odd, do the last output column separately */
  if (cinfo->output_width & 1) {
 800f8ca:	6f00      	ldr	r0, [r0, #112]	; 0x70
 800f8cc:	437b      	muls	r3, r7
 800f8ce:	07c0      	lsls	r0, r0, #31
 800f8d0:	eb02 0103 	add.w	r1, r2, r3
 800f8d4:	9a01      	ldr	r2, [sp, #4]
 800f8d6:	441a      	add	r2, r3
 800f8d8:	d52d      	bpl.n	800f936 <h2v2_merged_upsample+0xda>
    cb = GETJSAMPLE(*inptr1);
    cr = GETJSAMPLE(*inptr2);
    cred = Crrtab[cr];
 800f8da:	9808      	ldr	r0, [sp, #32]
 800f8dc:	9d03      	ldr	r5, [sp, #12]
 800f8de:	5dc0      	ldrb	r0, [r0, r7]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800f8e0:	f898 6000 	ldrb.w	r6, [r8]
    cred = Crrtab[cr];
 800f8e4:	f855 e020 	ldr.w	lr, [r5, r0, lsl #2]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800f8e8:	9d05      	ldr	r5, [sp, #20]
 800f8ea:	f85a c026 	ldr.w	ip, [sl, r6, lsl #2]
 800f8ee:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
    cblue = Cbbtab[cb];
    y  = GETJSAMPLE(*inptr00);
    outptr0[RGB_RED] =   range_limit[y + cred];
 800f8f2:	eb0e 0504 	add.w	r5, lr, r4
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800f8f6:	4484      	add	ip, r0
    cblue = Cbbtab[cb];
 800f8f8:	9804      	ldr	r0, [sp, #16]
 800f8fa:	f850 6026 	ldr.w	r6, [r0, r6, lsl #2]
    outptr0[RGB_GREEN] = range_limit[y + cgreen];
 800f8fe:	eb04 4c2c 	add.w	ip, r4, ip, asr #16
    y  = GETJSAMPLE(*inptr00);
 800f902:	9806      	ldr	r0, [sp, #24]
    outptr0[RGB_BLUE] =  range_limit[y + cblue];
 800f904:	4434      	add	r4, r6
    y  = GETJSAMPLE(*inptr00);
 800f906:	f810 0017 	ldrb.w	r0, [r0, r7, lsl #1]
    outptr0[RGB_RED] =   range_limit[y + cred];
 800f90a:	f815 e000 	ldrb.w	lr, [r5, r0]
 800f90e:	f881 e002 	strb.w	lr, [r1, #2]
    outptr0[RGB_GREEN] = range_limit[y + cgreen];
 800f912:	f81c e000 	ldrb.w	lr, [ip, r0]
 800f916:	f881 e001 	strb.w	lr, [r1, #1]
    outptr0[RGB_BLUE] =  range_limit[y + cblue];
 800f91a:	5c21      	ldrb	r1, [r4, r0]
 800f91c:	9800      	ldr	r0, [sp, #0]
 800f91e:	54c1      	strb	r1, [r0, r3]
    y  = GETJSAMPLE(*inptr01);
 800f920:	9907      	ldr	r1, [sp, #28]
 800f922:	f811 1017 	ldrb.w	r1, [r1, r7, lsl #1]
    outptr1[RGB_RED] =   range_limit[y + cred];
 800f926:	5c68      	ldrb	r0, [r5, r1]
 800f928:	7090      	strb	r0, [r2, #2]
    outptr1[RGB_GREEN] = range_limit[y + cgreen];
 800f92a:	f81c 0001 	ldrb.w	r0, [ip, r1]
 800f92e:	7050      	strb	r0, [r2, #1]
    outptr1[RGB_BLUE] =  range_limit[y + cblue];
 800f930:	5c62      	ldrb	r2, [r4, r1]
 800f932:	9901      	ldr	r1, [sp, #4]
 800f934:	54ca      	strb	r2, [r1, r3]
  }
}
 800f936:	b00b      	add	sp, #44	; 0x2c
 800f938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cred = Crrtab[cr];
 800f93c:	9902      	ldr	r1, [sp, #8]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800f93e:	f818 5b01 	ldrb.w	r5, [r8], #1
    cred = Crrtab[cr];
 800f942:	f811 9b01 	ldrb.w	r9, [r1], #1
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800f946:	f85a 6025 	ldr.w	r6, [sl, r5, lsl #2]
    cred = Crrtab[cr];
 800f94a:	9102      	str	r1, [sp, #8]
 800f94c:	9903      	ldr	r1, [sp, #12]
 800f94e:	f851 b029 	ldr.w	fp, [r1, r9, lsl #2]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800f952:	9905      	ldr	r1, [sp, #20]
 800f954:	f851 1029 	ldr.w	r1, [r1, r9, lsl #2]
    y  = GETJSAMPLE(*inptr00++);
 800f958:	f81e 9c02 	ldrb.w	r9, [lr, #-2]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800f95c:	4431      	add	r1, r6
    cblue = Cbbtab[cb];
 800f95e:	9e04      	ldr	r6, [sp, #16]
 800f960:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    outptr0[RGB_RED] =   range_limit[y + cred];
 800f964:	eb0b 0604 	add.w	r6, fp, r4
    outptr0[RGB_GREEN] = range_limit[y + cgreen];
 800f968:	eb04 4121 	add.w	r1, r4, r1, asr #16
    outptr0[RGB_RED] =   range_limit[y + cred];
 800f96c:	f816 b009 	ldrb.w	fp, [r6, r9]
    outptr0[RGB_BLUE] =  range_limit[y + cblue];
 800f970:	4425      	add	r5, r4
    outptr0[RGB_RED] =   range_limit[y + cred];
 800f972:	f802 bc04 	strb.w	fp, [r2, #-4]
    outptr0[RGB_GREEN] = range_limit[y + cgreen];
 800f976:	f811 b009 	ldrb.w	fp, [r1, r9]
 800f97a:	f802 bc05 	strb.w	fp, [r2, #-5]
    outptr0[RGB_BLUE] =  range_limit[y + cblue];
 800f97e:	f815 9009 	ldrb.w	r9, [r5, r9]
 800f982:	f802 9c06 	strb.w	r9, [r2, #-6]
    y  = GETJSAMPLE(*inptr00++);
 800f986:	f81e 9c01 	ldrb.w	r9, [lr, #-1]
    outptr0[RGB_RED] =   range_limit[y + cred];
 800f98a:	f816 b009 	ldrb.w	fp, [r6, r9]
 800f98e:	f802 bc01 	strb.w	fp, [r2, #-1]
    outptr0[RGB_GREEN] = range_limit[y + cgreen];
 800f992:	f811 b009 	ldrb.w	fp, [r1, r9]
 800f996:	f802 bc02 	strb.w	fp, [r2, #-2]
    outptr0[RGB_BLUE] =  range_limit[y + cblue];
 800f99a:	f815 9009 	ldrb.w	r9, [r5, r9]
 800f99e:	f802 9c03 	strb.w	r9, [r2, #-3]
    y  = GETJSAMPLE(*inptr01++);
 800f9a2:	f81c 9c02 	ldrb.w	r9, [ip, #-2]
    outptr1[RGB_RED] =   range_limit[y + cred];
 800f9a6:	f816 b009 	ldrb.w	fp, [r6, r9]
 800f9aa:	f803 bc04 	strb.w	fp, [r3, #-4]
    outptr1[RGB_GREEN] = range_limit[y + cgreen];
 800f9ae:	f811 b009 	ldrb.w	fp, [r1, r9]
 800f9b2:	f803 bc05 	strb.w	fp, [r3, #-5]
    outptr1[RGB_BLUE] =  range_limit[y + cblue];
 800f9b6:	f815 9009 	ldrb.w	r9, [r5, r9]
 800f9ba:	f803 9c06 	strb.w	r9, [r3, #-6]
    y  = GETJSAMPLE(*inptr01++);
 800f9be:	f81c 9c01 	ldrb.w	r9, [ip, #-1]
    outptr1[RGB_RED] =   range_limit[y + cred];
 800f9c2:	f816 6009 	ldrb.w	r6, [r6, r9]
 800f9c6:	f803 6c01 	strb.w	r6, [r3, #-1]
    outptr1[RGB_GREEN] = range_limit[y + cgreen];
 800f9ca:	f811 1009 	ldrb.w	r1, [r1, r9]
 800f9ce:	f803 1c02 	strb.w	r1, [r3, #-2]
    outptr1[RGB_BLUE] =  range_limit[y + cblue];
 800f9d2:	f815 1009 	ldrb.w	r1, [r5, r9]
 800f9d6:	f803 1c03 	strb.w	r1, [r3, #-3]
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 800f9da:	e76b      	b.n	800f8b4 <h2v2_merged_upsample+0x58>

0800f9dc <merged_2v_upsample>:
{
 800f9dc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 800f9e0:	f8d0 41d8 	ldr.w	r4, [r0, #472]	; 0x1d8
{
 800f9e4:	4616      	mov	r6, r2
 800f9e6:	e9dd c80a 	ldrd	ip, r8, [sp, #40]	; 0x28
  if (upsample->spare_full) {
 800f9ea:	6a65      	ldr	r5, [r4, #36]	; 0x24
    jcopy_sample_rows(& upsample->spare_row, 0, output_buf + *out_row_ctr, 0,
 800f9ec:	f8d8 3000 	ldr.w	r3, [r8]
 800f9f0:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
  if (upsample->spare_full) {
 800f9f4:	b1dd      	cbz	r5, 800fa2e <merged_2v_upsample+0x52>
    jcopy_sample_rows(& upsample->spare_row, 0, output_buf + *out_row_ctr, 0,
 800f9f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f9f8:	2501      	movs	r5, #1
 800f9fa:	f104 0020 	add.w	r0, r4, #32
 800f9fe:	9301      	str	r3, [sp, #4]
 800fa00:	2300      	movs	r3, #0
 800fa02:	9500      	str	r5, [sp, #0]
 800fa04:	4619      	mov	r1, r3
 800fa06:	f007 fbe6 	bl	80171d6 <jcopy_sample_rows>
    upsample->spare_full = FALSE;
 800fa0a:	2300      	movs	r3, #0
 800fa0c:	6263      	str	r3, [r4, #36]	; 0x24
  *out_row_ctr += num_rows;
 800fa0e:	f8d8 3000 	ldr.w	r3, [r8]
 800fa12:	442b      	add	r3, r5
 800fa14:	f8c8 3000 	str.w	r3, [r8]
  upsample->rows_to_go -= num_rows;
 800fa18:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800fa1a:	1b5b      	subs	r3, r3, r5
 800fa1c:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (! upsample->spare_full)
 800fa1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fa20:	b913      	cbnz	r3, 800fa28 <merged_2v_upsample+0x4c>
    (*in_row_group_ctr)++;
 800fa22:	6833      	ldr	r3, [r6, #0]
 800fa24:	3301      	adds	r3, #1
 800fa26:	6033      	str	r3, [r6, #0]
}
 800fa28:	b004      	add	sp, #16
 800fa2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (num_rows > upsample->rows_to_go)
 800fa2e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    out_rows_avail -= *out_row_ctr;
 800fa30:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    num_rows = 2;
 800fa32:	2f02      	cmp	r7, #2
    out_rows_avail -= *out_row_ctr;
 800fa34:	eba5 0503 	sub.w	r5, r5, r3
    work_ptrs[0] = output_buf[*out_row_ctr];
 800fa38:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
    num_rows = 2;
 800fa3c:	bf28      	it	cs
 800fa3e:	2702      	movcs	r7, #2
    work_ptrs[0] = output_buf[*out_row_ctr];
 800fa40:	9302      	str	r3, [sp, #8]
 800fa42:	42bd      	cmp	r5, r7
 800fa44:	bf28      	it	cs
 800fa46:	463d      	movcs	r5, r7
    (*upsample->upmethod) (cinfo, input_buf, *in_row_group_ctr, work_ptrs);
 800fa48:	68e7      	ldr	r7, [r4, #12]
    if (num_rows > 1) {
 800fa4a:	2d02      	cmp	r5, #2
      work_ptrs[1] = upsample->spare_row;
 800fa4c:	bf17      	itett	ne
 800fa4e:	6a23      	ldrne	r3, [r4, #32]
      work_ptrs[1] = output_buf[*out_row_ctr + 1];
 800fa50:	6853      	ldreq	r3, [r2, #4]
      work_ptrs[1] = upsample->spare_row;
 800fa52:	9303      	strne	r3, [sp, #12]
      upsample->spare_full = TRUE;
 800fa54:	2301      	movne	r3, #1
      work_ptrs[1] = output_buf[*out_row_ctr + 1];
 800fa56:	bf0c      	ite	eq
 800fa58:	9303      	streq	r3, [sp, #12]
      upsample->spare_full = TRUE;
 800fa5a:	6263      	strne	r3, [r4, #36]	; 0x24
    (*upsample->upmethod) (cinfo, input_buf, *in_row_group_ctr, work_ptrs);
 800fa5c:	ab02      	add	r3, sp, #8
 800fa5e:	6832      	ldr	r2, [r6, #0]
 800fa60:	47b8      	blx	r7
 800fa62:	e7d4      	b.n	800fa0e <merged_2v_upsample+0x32>

0800fa64 <jinit_merged_upsampler>:
jinit_merged_upsampler (j_decompress_ptr cinfo)
{
  my_upsample_ptr upsample;

  upsample = (my_upsample_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800fa64:	6843      	ldr	r3, [r0, #4]
 800fa66:	2230      	movs	r2, #48	; 0x30
 800fa68:	2101      	movs	r1, #1
 800fa6a:	681b      	ldr	r3, [r3, #0]
{
 800fa6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa70:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800fa72:	4798      	blx	r3
				SIZEOF(my_upsampler));
  cinfo->upsample = (struct jpeg_upsampler *) upsample;
  upsample->pub.start_pass = start_pass_merged_upsample;
 800fa74:	4b37      	ldr	r3, [pc, #220]	; (800fb54 <jinit_merged_upsampler+0xf0>)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800fa76:	4605      	mov	r5, r0
  upsample->pub.need_context_rows = FALSE;

  upsample->out_row_width = cinfo->output_width * cinfo->out_color_components;
 800fa78:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800fa7a:	6f22      	ldr	r2, [r4, #112]	; 0x70
  cinfo->upsample = (struct jpeg_upsampler *) upsample;
 800fa7c:	f8c4 01d8 	str.w	r0, [r4, #472]	; 0x1d8
  upsample->out_row_width = cinfo->output_width * cinfo->out_color_components;
 800fa80:	434a      	muls	r2, r1

  if (cinfo->max_v_samp_factor == 2) {
 800fa82:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
  upsample->pub.start_pass = start_pass_merged_upsample;
 800fa86:	6003      	str	r3, [r0, #0]
  upsample->pub.need_context_rows = FALSE;
 800fa88:	2300      	movs	r3, #0
  if (cinfo->max_v_samp_factor == 2) {
 800fa8a:	2902      	cmp	r1, #2
  upsample->out_row_width = cinfo->output_width * cinfo->out_color_components;
 800fa8c:	6282      	str	r2, [r0, #40]	; 0x28
  upsample->pub.need_context_rows = FALSE;
 800fa8e:	6083      	str	r3, [r0, #8]
  if (cinfo->max_v_samp_factor == 2) {
 800fa90:	d15a      	bne.n	800fb48 <jinit_merged_upsampler+0xe4>
    upsample->pub.upsample = merged_2v_upsample;
 800fa92:	4b31      	ldr	r3, [pc, #196]	; (800fb58 <jinit_merged_upsampler+0xf4>)
    upsample->upmethod = h2v2_merged_upsample;
    /* Allocate a spare row buffer */
    upsample->spare_row = (JSAMPROW)
      (*cinfo->mem->alloc_large) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800fa94:	2101      	movs	r1, #1
    upsample->pub.upsample = merged_2v_upsample;
 800fa96:	6043      	str	r3, [r0, #4]
    upsample->upmethod = h2v2_merged_upsample;
 800fa98:	4b30      	ldr	r3, [pc, #192]	; (800fb5c <jinit_merged_upsampler+0xf8>)
 800fa9a:	60c3      	str	r3, [r0, #12]
      (*cinfo->mem->alloc_large) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800fa9c:	4620      	mov	r0, r4
 800fa9e:	6863      	ldr	r3, [r4, #4]
 800faa0:	685b      	ldr	r3, [r3, #4]
 800faa2:	4798      	blx	r3
    upsample->spare_row = (JSAMPROW)
 800faa4:	6228      	str	r0, [r5, #32]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800faa6:	6863      	ldr	r3, [r4, #4]
 800faa8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800faac:	2101      	movs	r1, #1
 800faae:	4620      	mov	r0, r4
 800fab0:	681b      	ldr	r3, [r3, #0]
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 800fab2:	f8d4 51d8 	ldr.w	r5, [r4, #472]	; 0x1d8
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800fab6:	4798      	blx	r3
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800fab8:	6863      	ldr	r3, [r4, #4]
 800faba:	f44f 6280 	mov.w	r2, #1024	; 0x400
  upsample->Cr_r_tab = (int *)
 800fabe:	6128      	str	r0, [r5, #16]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800fac0:	2101      	movs	r1, #1
 800fac2:	681b      	ldr	r3, [r3, #0]
 800fac4:	4620      	mov	r0, r4
 800fac6:	4798      	blx	r3
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800fac8:	6863      	ldr	r3, [r4, #4]
  upsample->Cb_b_tab = (int *)
 800faca:	6168      	str	r0, [r5, #20]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800facc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800fad0:	681b      	ldr	r3, [r3, #0]
 800fad2:	2101      	movs	r1, #1
 800fad4:	4620      	mov	r0, r4
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
 800fad6:	f8df 809c 	ldr.w	r8, [pc, #156]	; 800fb74 <jinit_merged_upsampler+0x110>
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800fada:	4798      	blx	r3
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800fadc:	6863      	ldr	r3, [r4, #4]
  upsample->Cr_g_tab = (INT32 *)
 800fade:	61a8      	str	r0, [r5, #24]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800fae0:	2101      	movs	r1, #1
 800fae2:	681b      	ldr	r3, [r3, #0]
 800fae4:	4620      	mov	r0, r4
 800fae6:	f44f 6280 	mov.w	r2, #1024	; 0x400
		    RIGHT_SHIFT(FIX(1.77200) * x + ONE_HALF, SCALEBITS);
 800faea:	4f1d      	ldr	r7, [pc, #116]	; (800fb60 <jinit_merged_upsampler+0xfc>)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800faec:	4798      	blx	r3
    upsample->Cr_g_tab[i] = (- FIX(0.71414)) * x;
 800faee:	69ac      	ldr	r4, [r5, #24]
  upsample->Cb_g_tab = (INT32 *)
 800faf0:	61e8      	str	r0, [r5, #28]
  for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++) {
 800faf2:	2300      	movs	r3, #0
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
 800faf4:	f8df e080 	ldr.w	lr, [pc, #128]	; 800fb78 <jinit_merged_upsampler+0x114>
    upsample->Cb_g_tab[i] = (- FIX(0.34414)) * x + ONE_HALF;
 800faf8:	491a      	ldr	r1, [pc, #104]	; (800fb64 <jinit_merged_upsampler+0x100>)
    upsample->Cb_b_tab[i] = (int)
 800fafa:	e9d5 c604 	ldrd	ip, r6, [r5, #16]
    upsample->Cr_g_tab[i] = (- FIX(0.71414)) * x;
 800fafe:	4d1a      	ldr	r5, [pc, #104]	; (800fb68 <jinit_merged_upsampler+0x104>)
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
 800fb00:	fb08 e203 	mla	r2, r8, r3, lr
 800fb04:	1412      	asrs	r2, r2, #16
    upsample->Cr_r_tab[i] = (int)
 800fb06:	f84c 2023 	str.w	r2, [ip, r3, lsl #2]
		    RIGHT_SHIFT(FIX(1.77200) * x + ONE_HALF, SCALEBITS);
 800fb0a:	fb07 f203 	mul.w	r2, r7, r3
 800fb0e:	f5a2 0262 	sub.w	r2, r2, #14811136	; 0xe20000
 800fb12:	f5a2 42a2 	sub.w	r2, r2, #20736	; 0x5100
 800fb16:	1412      	asrs	r2, r2, #16
    upsample->Cb_b_tab[i] = (int)
 800fb18:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
    upsample->Cr_g_tab[i] = (- FIX(0.71414)) * x;
 800fb1c:	fb05 f203 	mul.w	r2, r5, r3
 800fb20:	f502 02b6 	add.w	r2, r2, #5963776	; 0x5b0000
 800fb24:	f502 42d2 	add.w	r2, r2, #26880	; 0x6900
 800fb28:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    upsample->Cb_g_tab[i] = (- FIX(0.34414)) * x + ONE_HALF;
 800fb2c:	fb01 f203 	mul.w	r2, r1, r3
 800fb30:	f502 1232 	add.w	r2, r2, #2916352	; 0x2c8000
 800fb34:	f502 6250 	add.w	r2, r2, #3328	; 0xd00
 800fb38:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
  for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++) {
 800fb3c:	3301      	adds	r3, #1
 800fb3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fb42:	d1dd      	bne.n	800fb00 <jinit_merged_upsampler+0x9c>
    /* No spare row needed */
    upsample->spare_row = NULL;
  }

  build_ycc_rgb_table(cinfo);
}
 800fb44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    upsample->pub.upsample = merged_1v_upsample;
 800fb48:	4a08      	ldr	r2, [pc, #32]	; (800fb6c <jinit_merged_upsampler+0x108>)
    upsample->spare_row = NULL;
 800fb4a:	6203      	str	r3, [r0, #32]
    upsample->pub.upsample = merged_1v_upsample;
 800fb4c:	6042      	str	r2, [r0, #4]
    upsample->upmethod = h2v1_merged_upsample;
 800fb4e:	4a08      	ldr	r2, [pc, #32]	; (800fb70 <jinit_merged_upsampler+0x10c>)
 800fb50:	60c2      	str	r2, [r0, #12]
    upsample->spare_row = NULL;
 800fb52:	e7a8      	b.n	800faa6 <jinit_merged_upsampler+0x42>
 800fb54:	0800f71d 	.word	0x0800f71d
 800fb58:	0800f9dd 	.word	0x0800f9dd
 800fb5c:	0800f85d 	.word	0x0800f85d
 800fb60:	0001c5a2 	.word	0x0001c5a2
 800fb64:	ffffa7e6 	.word	0xffffa7e6
 800fb68:	ffff492e 	.word	0xffff492e
 800fb6c:	0800f72b 	.word	0x0800f72b
 800fb70:	0800f751 	.word	0x0800f751
 800fb74:	000166e9 	.word	0x000166e9
 800fb78:	ff4d0b80 	.word	0xff4d0b80

0800fb7c <start_pass_dpost>:
METHODDEF(void)
start_pass_dpost (j_decompress_ptr cinfo, J_BUF_MODE pass_mode)
{
  my_post_ptr post = (my_post_ptr) cinfo->post;

  switch (pass_mode) {
 800fb7c:	2902      	cmp	r1, #2
{
 800fb7e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  my_post_ptr post = (my_post_ptr) cinfo->post;
 800fb80:	f8d0 41c4 	ldr.w	r4, [r0, #452]	; 0x1c4
  switch (pass_mode) {
 800fb84:	d023      	beq.n	800fbce <start_pass_dpost+0x52>
 800fb86:	2903      	cmp	r1, #3
 800fb88:	d019      	beq.n	800fbbe <start_pass_dpost+0x42>
 800fb8a:	2900      	cmp	r1, #0
 800fb8c:	d128      	bne.n	800fbe0 <start_pass_dpost+0x64>
  case JBUF_PASS_THRU:
    if (cinfo->quantize_colors) {
 800fb8e:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800fb90:	b182      	cbz	r2, 800fbb4 <start_pass_dpost+0x38>
      /* Single-pass processing with color quantization. */
      post->pub.post_process_data = post_process_1pass;
 800fb92:	4a16      	ldr	r2, [pc, #88]	; (800fbec <start_pass_dpost+0x70>)
 800fb94:	6062      	str	r2, [r4, #4]
      /* We could be doing buffered-image output before starting a 2-pass
       * color quantization; in that case, jinit_d_post_controller did not
       * allocate a strip buffer.  Use the virtual-array buffer as workspace.
       */
      if (post->buffer == NULL) {
 800fb96:	68e2      	ldr	r2, [r4, #12]
 800fb98:	b93a      	cbnz	r2, 800fbaa <start_pass_dpost+0x2e>
	post->buffer = (*cinfo->mem->access_virt_sarray)
 800fb9a:	6843      	ldr	r3, [r0, #4]
 800fb9c:	2101      	movs	r1, #1
 800fb9e:	9100      	str	r1, [sp, #0]
 800fba0:	69dd      	ldr	r5, [r3, #28]
 800fba2:	68a1      	ldr	r1, [r4, #8]
 800fba4:	6923      	ldr	r3, [r4, #16]
 800fba6:	47a8      	blx	r5
 800fba8:	60e0      	str	r0, [r4, #12]
#endif /* QUANT_2PASS_SUPPORTED */
  default:
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
    break;
  }
  post->starting_row = post->next_row = 0;
 800fbaa:	2300      	movs	r3, #0
 800fbac:	e9c4 3305 	strd	r3, r3, [r4, #20]
}
 800fbb0:	b003      	add	sp, #12
 800fbb2:	bd30      	pop	{r4, r5, pc}
      post->pub.post_process_data = cinfo->upsample->upsample;
 800fbb4:	f8d0 31d8 	ldr.w	r3, [r0, #472]	; 0x1d8
 800fbb8:	685b      	ldr	r3, [r3, #4]
    post->pub.post_process_data = post_process_prepass;
 800fbba:	6063      	str	r3, [r4, #4]
    break;
 800fbbc:	e7f5      	b.n	800fbaa <start_pass_dpost+0x2e>
    if (post->whole_image == NULL)
 800fbbe:	68a2      	ldr	r2, [r4, #8]
 800fbc0:	b91a      	cbnz	r2, 800fbca <start_pass_dpost+0x4e>
      ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 800fbc2:	6803      	ldr	r3, [r0, #0]
 800fbc4:	6159      	str	r1, [r3, #20]
 800fbc6:	681b      	ldr	r3, [r3, #0]
 800fbc8:	4798      	blx	r3
    post->pub.post_process_data = post_process_prepass;
 800fbca:	4b09      	ldr	r3, [pc, #36]	; (800fbf0 <start_pass_dpost+0x74>)
 800fbcc:	e7f5      	b.n	800fbba <start_pass_dpost+0x3e>
    if (post->whole_image == NULL)
 800fbce:	68a2      	ldr	r2, [r4, #8]
 800fbd0:	b922      	cbnz	r2, 800fbdc <start_pass_dpost+0x60>
      ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 800fbd2:	6803      	ldr	r3, [r0, #0]
 800fbd4:	2203      	movs	r2, #3
 800fbd6:	615a      	str	r2, [r3, #20]
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	4798      	blx	r3
    post->pub.post_process_data = post_process_2pass;
 800fbdc:	4b05      	ldr	r3, [pc, #20]	; (800fbf4 <start_pass_dpost+0x78>)
 800fbde:	e7ec      	b.n	800fbba <start_pass_dpost+0x3e>
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 800fbe0:	6803      	ldr	r3, [r0, #0]
 800fbe2:	2203      	movs	r2, #3
 800fbe4:	615a      	str	r2, [r3, #20]
 800fbe6:	681b      	ldr	r3, [r3, #0]
 800fbe8:	4798      	blx	r3
    break;
 800fbea:	e7de      	b.n	800fbaa <start_pass_dpost+0x2e>
 800fbec:	0800fbf9 	.word	0x0800fbf9
 800fbf0:	0800fc59 	.word	0x0800fc59
 800fbf4:	0800fce7 	.word	0x0800fce7

0800fbf8 <post_process_1pass>:
post_process_1pass (j_decompress_ptr cinfo,
		    JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
		    JDIMENSION in_row_groups_avail,
		    JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
		    JDIMENSION out_rows_avail)
{
 800fbf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fbfc:	b088      	sub	sp, #32
  my_post_ptr post = (my_post_ptr) cinfo->post;
 800fbfe:	f8d0 81c4 	ldr.w	r8, [r0, #452]	; 0x1c4
{
 800fc02:	4604      	mov	r4, r0
 800fc04:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  JDIMENSION num_rows, max_rows;

  /* Fill the buffer, but not more than what we can dump out in one go. */
  /* Note we rely on the upsampler to detect bottom of image. */
  max_rows = out_rows_avail - *out_row_ctr;
 800fc06:	9e10      	ldr	r6, [sp, #64]	; 0x40
 800fc08:	682f      	ldr	r7, [r5, #0]
 800fc0a:	1bf6      	subs	r6, r6, r7
  if (max_rows > post->strip_height)
    max_rows = post->strip_height;
  num_rows = 0;
 800fc0c:	2700      	movs	r7, #0
 800fc0e:	9707      	str	r7, [sp, #28]
  (*cinfo->upsample->upsample) (cinfo,
 800fc10:	f8d0 71d8 	ldr.w	r7, [r0, #472]	; 0x1d8
 800fc14:	9705      	str	r7, [sp, #20]
 800fc16:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800fc1a:	42be      	cmp	r6, r7
 800fc1c:	bf94      	ite	ls
 800fc1e:	9602      	strls	r6, [sp, #8]
 800fc20:	9702      	strhi	r7, [sp, #8]
 800fc22:	ae07      	add	r6, sp, #28
 800fc24:	9601      	str	r6, [sp, #4]
 800fc26:	f8d8 600c 	ldr.w	r6, [r8, #12]
 800fc2a:	9600      	str	r6, [sp, #0]
 800fc2c:	9e05      	ldr	r6, [sp, #20]
 800fc2e:	6876      	ldr	r6, [r6, #4]
 800fc30:	47b0      	blx	r6
		input_buf, in_row_group_ctr, in_row_groups_avail,
		post->buffer, &num_rows, max_rows);
  /* Quantize and emit data. */
  (*cinfo->cquantize->color_quantize) (cinfo,
		post->buffer, output_buf + *out_row_ctr, (int) num_rows);
 800fc32:	6829      	ldr	r1, [r5, #0]
  (*cinfo->cquantize->color_quantize) (cinfo,
 800fc34:	f8d4 31e0 	ldr.w	r3, [r4, #480]	; 0x1e0
 800fc38:	4620      	mov	r0, r4
 800fc3a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fc3c:	685e      	ldr	r6, [r3, #4]
 800fc3e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800fc42:	9b07      	ldr	r3, [sp, #28]
 800fc44:	f8d8 100c 	ldr.w	r1, [r8, #12]
 800fc48:	47b0      	blx	r6
  *out_row_ctr += num_rows;
 800fc4a:	682b      	ldr	r3, [r5, #0]
 800fc4c:	9a07      	ldr	r2, [sp, #28]
 800fc4e:	4413      	add	r3, r2
 800fc50:	602b      	str	r3, [r5, #0]
}
 800fc52:	b008      	add	sp, #32
 800fc54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800fc58 <post_process_prepass>:
post_process_prepass (j_decompress_ptr cinfo,
		      JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
		      JDIMENSION in_row_groups_avail,
		      JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
		      JDIMENSION out_rows_avail)
{
 800fc58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_post_ptr post = (my_post_ptr) cinfo->post;
 800fc5c:	f8d0 41c4 	ldr.w	r4, [r0, #452]	; 0x1c4
{
 800fc60:	b085      	sub	sp, #20
 800fc62:	469a      	mov	sl, r3
 800fc64:	4605      	mov	r5, r0
  JDIMENSION old_next_row, num_rows;

  /* Reposition virtual buffer if at start of strip. */
  if (post->next_row == 0) {
 800fc66:	69a3      	ldr	r3, [r4, #24]
{
 800fc68:	460e      	mov	r6, r1
 800fc6a:	4691      	mov	r9, r2
 800fc6c:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
  if (post->next_row == 0) {
 800fc70:	b943      	cbnz	r3, 800fc84 <post_process_prepass+0x2c>
    post->buffer = (*cinfo->mem->access_virt_sarray)
 800fc72:	6843      	ldr	r3, [r0, #4]
 800fc74:	2201      	movs	r2, #1
 800fc76:	9200      	str	r2, [sp, #0]
 800fc78:	69df      	ldr	r7, [r3, #28]
 800fc7a:	68a1      	ldr	r1, [r4, #8]
 800fc7c:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800fc80:	47b8      	blx	r7
 800fc82:	60e0      	str	r0, [r4, #12]
	 post->starting_row, post->strip_height, TRUE);
  }

  /* Upsample some data (up to a strip height's worth). */
  old_next_row = post->next_row;
  (*cinfo->upsample->upsample) (cinfo,
 800fc84:	6922      	ldr	r2, [r4, #16]
 800fc86:	4631      	mov	r1, r6
  old_next_row = post->next_row;
 800fc88:	69a7      	ldr	r7, [r4, #24]
  (*cinfo->upsample->upsample) (cinfo,
 800fc8a:	4628      	mov	r0, r5
 800fc8c:	9202      	str	r2, [sp, #8]
 800fc8e:	f104 0218 	add.w	r2, r4, #24
 800fc92:	f8d5 31d8 	ldr.w	r3, [r5, #472]	; 0x1d8
 800fc96:	9201      	str	r2, [sp, #4]
 800fc98:	68e2      	ldr	r2, [r4, #12]
 800fc9a:	9200      	str	r2, [sp, #0]
 800fc9c:	464a      	mov	r2, r9
 800fc9e:	f8d3 b004 	ldr.w	fp, [r3, #4]
 800fca2:	4653      	mov	r3, sl
 800fca4:	47d8      	blx	fp
		input_buf, in_row_group_ctr, in_row_groups_avail,
		post->buffer, &post->next_row, post->strip_height);

  /* Allow quantizer to scan new data.  No data is emitted, */
  /* but we advance out_row_ctr so outer loop can tell when we're done. */
  if (post->next_row > old_next_row) {
 800fca6:	69a6      	ldr	r6, [r4, #24]
 800fca8:	42be      	cmp	r6, r7
 800fcaa:	d910      	bls.n	800fcce <post_process_prepass+0x76>
    num_rows = post->next_row - old_next_row;
    (*cinfo->cquantize->color_quantize) (cinfo, post->buffer + old_next_row,
 800fcac:	f8d5 31e0 	ldr.w	r3, [r5, #480]	; 0x1e0
    num_rows = post->next_row - old_next_row;
 800fcb0:	1bf6      	subs	r6, r6, r7
    (*cinfo->cquantize->color_quantize) (cinfo, post->buffer + old_next_row,
 800fcb2:	68e1      	ldr	r1, [r4, #12]
 800fcb4:	2200      	movs	r2, #0
 800fcb6:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800fcba:	4628      	mov	r0, r5
 800fcbc:	4633      	mov	r3, r6
 800fcbe:	eb01 0187 	add.w	r1, r1, r7, lsl #2
 800fcc2:	47c8      	blx	r9
					 (JSAMPARRAY) NULL, (int) num_rows);
    *out_row_ctr += num_rows;
 800fcc4:	f8d8 3000 	ldr.w	r3, [r8]
 800fcc8:	4433      	add	r3, r6
 800fcca:	f8c8 3000 	str.w	r3, [r8]
  }

  /* Advance if we filled the strip. */
  if (post->next_row >= post->strip_height) {
 800fcce:	6922      	ldr	r2, [r4, #16]
 800fcd0:	69a3      	ldr	r3, [r4, #24]
 800fcd2:	4293      	cmp	r3, r2
 800fcd4:	d304      	bcc.n	800fce0 <post_process_prepass+0x88>
    post->starting_row += post->strip_height;
 800fcd6:	6963      	ldr	r3, [r4, #20]
 800fcd8:	4413      	add	r3, r2
 800fcda:	6163      	str	r3, [r4, #20]
    post->next_row = 0;
 800fcdc:	2300      	movs	r3, #0
 800fcde:	61a3      	str	r3, [r4, #24]
  }
}
 800fce0:	b005      	add	sp, #20
 800fce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fce6 <post_process_2pass>:
post_process_2pass (j_decompress_ptr cinfo,
		    JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
		    JDIMENSION in_row_groups_avail,
		    JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
		    JDIMENSION out_rows_avail)
{
 800fce6:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  my_post_ptr post = (my_post_ptr) cinfo->post;
 800fcea:	f8d0 41c4 	ldr.w	r4, [r0, #452]	; 0x1c4
{
 800fcee:	4607      	mov	r7, r0
 800fcf0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  JDIMENSION num_rows, max_rows;

  /* Reposition virtual buffer if at start of strip. */
  if (post->next_row == 0) {
 800fcf2:	69a3      	ldr	r3, [r4, #24]
 800fcf4:	b93b      	cbnz	r3, 800fd06 <post_process_2pass+0x20>
    post->buffer = (*cinfo->mem->access_virt_sarray)
 800fcf6:	6842      	ldr	r2, [r0, #4]
 800fcf8:	9300      	str	r3, [sp, #0]
 800fcfa:	69d5      	ldr	r5, [r2, #28]
 800fcfc:	68a1      	ldr	r1, [r4, #8]
 800fcfe:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800fd02:	47a8      	blx	r5
 800fd04:	60e0      	str	r0, [r4, #12]
  num_rows = post->strip_height - post->next_row; /* available in strip */
  max_rows = out_rows_avail - *out_row_ctr; /* available in output area */
  if (num_rows > max_rows)
    num_rows = max_rows;
  /* We have to check bottom of image here, can't depend on upsampler. */
  max_rows = cinfo->output_height - post->starting_row;
 800fd06:	6963      	ldr	r3, [r4, #20]
 800fd08:	6f7d      	ldr	r5, [r7, #116]	; 0x74
  num_rows = post->strip_height - post->next_row; /* available in strip */
 800fd0a:	69a1      	ldr	r1, [r4, #24]
  max_rows = cinfo->output_height - post->starting_row;
 800fd0c:	1aed      	subs	r5, r5, r3
  num_rows = post->strip_height - post->next_row; /* available in strip */
 800fd0e:	6923      	ldr	r3, [r4, #16]
  max_rows = out_rows_avail - *out_row_ctr; /* available in output area */
 800fd10:	6832      	ldr	r2, [r6, #0]
  num_rows = post->strip_height - post->next_row; /* available in strip */
 800fd12:	1a5b      	subs	r3, r3, r1
  if (num_rows > max_rows)
    num_rows = max_rows;

  /* Quantize and emit data. */
  (*cinfo->cquantize->color_quantize) (cinfo,
 800fd14:	980a      	ldr	r0, [sp, #40]	; 0x28
 800fd16:	429d      	cmp	r5, r3
 800fd18:	bf28      	it	cs
 800fd1a:	461d      	movcs	r5, r3
  max_rows = out_rows_avail - *out_row_ctr; /* available in output area */
 800fd1c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fd1e:	1a9b      	subs	r3, r3, r2
  (*cinfo->cquantize->color_quantize) (cinfo,
 800fd20:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800fd24:	429d      	cmp	r5, r3
 800fd26:	bf28      	it	cs
 800fd28:	461d      	movcs	r5, r3
 800fd2a:	68e3      	ldr	r3, [r4, #12]
 800fd2c:	9303      	str	r3, [sp, #12]
 800fd2e:	9803      	ldr	r0, [sp, #12]
 800fd30:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800fd34:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800fd38:	4638      	mov	r0, r7
 800fd3a:	f8d3 8004 	ldr.w	r8, [r3, #4]
 800fd3e:	462b      	mov	r3, r5
 800fd40:	47c0      	blx	r8
		post->buffer + post->next_row, output_buf + *out_row_ctr,
		(int) num_rows);
  *out_row_ctr += num_rows;
 800fd42:	6833      	ldr	r3, [r6, #0]
 800fd44:	442b      	add	r3, r5
 800fd46:	6033      	str	r3, [r6, #0]

  /* Advance if we filled the strip. */
  post->next_row += num_rows;
 800fd48:	69a3      	ldr	r3, [r4, #24]
  if (post->next_row >= post->strip_height) {
 800fd4a:	6922      	ldr	r2, [r4, #16]
  post->next_row += num_rows;
 800fd4c:	441d      	add	r5, r3
  if (post->next_row >= post->strip_height) {
 800fd4e:	4295      	cmp	r5, r2
  post->next_row += num_rows;
 800fd50:	61a5      	str	r5, [r4, #24]
  if (post->next_row >= post->strip_height) {
 800fd52:	d304      	bcc.n	800fd5e <post_process_2pass+0x78>
    post->starting_row += post->strip_height;
 800fd54:	6963      	ldr	r3, [r4, #20]
 800fd56:	4413      	add	r3, r2
 800fd58:	6163      	str	r3, [r4, #20]
    post->next_row = 0;
 800fd5a:	2300      	movs	r3, #0
 800fd5c:	61a3      	str	r3, [r4, #24]
  }
}
 800fd5e:	b004      	add	sp, #16
 800fd60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800fd64 <jinit_d_post_controller>:
jinit_d_post_controller (j_decompress_ptr cinfo, boolean need_full_buffer)
{
  my_post_ptr post;

  post = (my_post_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800fd64:	6843      	ldr	r3, [r0, #4]
 800fd66:	221c      	movs	r2, #28
{
 800fd68:	b5f0      	push	{r4, r5, r6, r7, lr}
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800fd6a:	681b      	ldr	r3, [r3, #0]
{
 800fd6c:	b085      	sub	sp, #20
 800fd6e:	460f      	mov	r7, r1
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800fd70:	2101      	movs	r1, #1
{
 800fd72:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800fd74:	4798      	blx	r3
				SIZEOF(my_post_controller));
  cinfo->post = (struct jpeg_d_post_controller *) post;
  post->pub.start_pass = start_pass_dpost;
 800fd76:	4b15      	ldr	r3, [pc, #84]	; (800fdcc <jinit_d_post_controller+0x68>)
  post->whole_image = NULL;	/* flag for no virtual arrays */
 800fd78:	2600      	movs	r6, #0
  cinfo->post = (struct jpeg_d_post_controller *) post;
 800fd7a:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800fd7e:	4605      	mov	r5, r0
  post->pub.start_pass = start_pass_dpost;
 800fd80:	6003      	str	r3, [r0, #0]
  post->buffer = NULL;		/* flag for no strip buffer */

  /* Create the quantization buffer, if needed */
  if (cinfo->quantize_colors) {
 800fd82:	6d63      	ldr	r3, [r4, #84]	; 0x54
  post->buffer = NULL;		/* flag for no strip buffer */
 800fd84:	e9c0 6602 	strd	r6, r6, [r0, #8]
  if (cinfo->quantize_colors) {
 800fd88:	b1bb      	cbz	r3, 800fdba <jinit_d_post_controller+0x56>
    /* The buffer strip height is max_v_samp_factor, which is typically
     * an efficient number of rows for upsampling to return.
     * (In the presence of output rescaling, we might want to be smarter?)
     */
    post->strip_height = (JDIMENSION) cinfo->max_v_samp_factor;
 800fd8a:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    if (need_full_buffer) {
      /* Two-pass color quantization: need full-image storage. */
      /* We round up the number of rows to a multiple of the strip height. */
#ifdef QUANT_2PASS_SUPPORTED
      post->whole_image = (*cinfo->mem->request_virt_sarray)
 800fd8e:	6f22      	ldr	r2, [r4, #112]	; 0x70
    post->strip_height = (JDIMENSION) cinfo->max_v_samp_factor;
 800fd90:	6103      	str	r3, [r0, #16]
      post->whole_image = (*cinfo->mem->request_virt_sarray)
 800fd92:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800fd94:	6861      	ldr	r1, [r4, #4]
 800fd96:	4342      	muls	r2, r0
    if (need_full_buffer) {
 800fd98:	b18f      	cbz	r7, 800fdbe <jinit_d_post_controller+0x5a>
      post->whole_image = (*cinfo->mem->request_virt_sarray)
 800fd9a:	690f      	ldr	r7, [r1, #16]
	((j_common_ptr) cinfo, JPOOL_IMAGE, FALSE,
	 cinfo->output_width * cinfo->out_color_components,
	 (JDIMENSION) jround_up((long) cinfo->output_height,
 800fd9c:	4619      	mov	r1, r3
 800fd9e:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800fda0:	9203      	str	r2, [sp, #12]
 800fda2:	f007 fa10 	bl	80171c6 <jround_up>
      post->whole_image = (*cinfo->mem->request_virt_sarray)
 800fda6:	692b      	ldr	r3, [r5, #16]
 800fda8:	2101      	movs	r1, #1
 800fdaa:	9a03      	ldr	r2, [sp, #12]
 800fdac:	e9cd 0300 	strd	r0, r3, [sp]
 800fdb0:	4613      	mov	r3, r2
 800fdb2:	4620      	mov	r0, r4
 800fdb4:	4632      	mov	r2, r6
 800fdb6:	47b8      	blx	r7
 800fdb8:	60a8      	str	r0, [r5, #8]
	((j_common_ptr) cinfo, JPOOL_IMAGE,
	 cinfo->output_width * cinfo->out_color_components,
	 post->strip_height);
    }
  }
}
 800fdba:	b005      	add	sp, #20
 800fdbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      post->buffer = (*cinfo->mem->alloc_sarray)
 800fdbe:	688e      	ldr	r6, [r1, #8]
 800fdc0:	4620      	mov	r0, r4
 800fdc2:	2101      	movs	r1, #1
 800fdc4:	47b0      	blx	r6
 800fdc6:	60e8      	str	r0, [r5, #12]
}
 800fdc8:	e7f7      	b.n	800fdba <jinit_d_post_controller+0x56>
 800fdca:	bf00      	nop
 800fdcc:	0800fb7d 	.word	0x0800fb7d

0800fdd0 <start_pass_upsample>:
start_pass_upsample (j_decompress_ptr cinfo)
{
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;

  /* Mark the conversion buffer empty */
  upsample->next_row_out = cinfo->max_v_samp_factor;
 800fdd0:	f8d0 213c 	ldr.w	r2, [r0, #316]	; 0x13c
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 800fdd4:	f8d0 31d8 	ldr.w	r3, [r0, #472]	; 0x1d8
  upsample->next_row_out = cinfo->max_v_samp_factor;
 800fdd8:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Initialize total-height counter for detecting bottom of image */
  upsample->rows_to_go = cinfo->output_height;
 800fdda:	6f42      	ldr	r2, [r0, #116]	; 0x74
 800fddc:	661a      	str	r2, [r3, #96]	; 0x60
}
 800fdde:	4770      	bx	lr

0800fde0 <sep_upsample>:
sep_upsample (j_decompress_ptr cinfo,
	      JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
	      JDIMENSION in_row_groups_avail,
	      JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
	      JDIMENSION out_rows_avail)
{
 800fde0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 800fde4:	f8d0 41d8 	ldr.w	r4, [r0, #472]	; 0x1d8
{
 800fde8:	4615      	mov	r5, r2
  int ci;
  jpeg_component_info * compptr;
  JDIMENSION num_rows;

  /* Fill the conversion buffer, if it's empty */
  if (upsample->next_row_out >= cinfo->max_v_samp_factor) {
 800fdea:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
{
 800fdee:	b085      	sub	sp, #20
  if (upsample->next_row_out >= cinfo->max_v_samp_factor) {
 800fdf0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
{
 800fdf2:	4683      	mov	fp, r0
 800fdf4:	4688      	mov	r8, r1
  if (upsample->next_row_out >= cinfo->max_v_samp_factor) {
 800fdf6:	429a      	cmp	r2, r3
 800fdf8:	db10      	blt.n	800fe1c <sep_upsample+0x3c>
    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800fdfa:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
 800fdfe:	2600      	movs	r6, #0
 800fe00:	f04f 0a58 	mov.w	sl, #88	; 0x58
 800fe04:	9303      	str	r3, [sp, #12]
 800fe06:	f104 0334 	add.w	r3, r4, #52	; 0x34
 800fe0a:	9a03      	ldr	r2, [sp, #12]
 800fe0c:	fb0a 2106 	mla	r1, sl, r6, r2
 800fe10:	f8db 2024 	ldr.w	r2, [fp, #36]	; 0x24
 800fe14:	42b2      	cmp	r2, r6
 800fe16:	dc32      	bgt.n	800fe7e <sep_upsample+0x9e>
       */
      (*upsample->methods[ci]) (cinfo, compptr,
	input_buf[ci] + (*in_row_group_ctr * upsample->rowgroup_height[ci]),
	upsample->color_buf + ci);
    }
    upsample->next_row_out = 0;
 800fe18:	2300      	movs	r3, #0
 800fe1a:	65e3      	str	r3, [r4, #92]	; 0x5c
   * in case the image height is not a multiple of max_v_samp_factor:
   */
  if (num_rows > upsample->rows_to_go) 
    num_rows = upsample->rows_to_go;
  /* And not more than what the client can accept: */
  out_rows_avail -= *out_row_ctr;
 800fe1c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  if (num_rows > out_rows_avail)
    num_rows = out_rows_avail;

  (*cinfo->cconvert->color_convert) (cinfo, upsample->color_buf,
 800fe1e:	4658      	mov	r0, fp
  num_rows = (JDIMENSION) (cinfo->max_v_samp_factor - upsample->next_row_out);
 800fe20:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800fe22:	f8db 613c 	ldr.w	r6, [fp, #316]	; 0x13c
  out_rows_avail -= *out_row_ctr;
 800fe26:	681b      	ldr	r3, [r3, #0]
 800fe28:	9910      	ldr	r1, [sp, #64]	; 0x40
  num_rows = (JDIMENSION) (cinfo->max_v_samp_factor - upsample->next_row_out);
 800fe2a:	eba6 0c02 	sub.w	ip, r6, r2
  out_rows_avail -= *out_row_ctr;
 800fe2e:	1ace      	subs	r6, r1, r3
 800fe30:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800fe32:	428e      	cmp	r6, r1
 800fe34:	bf28      	it	cs
 800fe36:	460e      	movcs	r6, r1
  (*cinfo->cconvert->color_convert) (cinfo, upsample->color_buf,
 800fe38:	f8db 11dc 	ldr.w	r1, [fp, #476]	; 0x1dc
 800fe3c:	4566      	cmp	r6, ip
 800fe3e:	bf28      	it	cs
 800fe40:	4666      	movcs	r6, ip
 800fe42:	9600      	str	r6, [sp, #0]
 800fe44:	f8d1 8004 	ldr.w	r8, [r1, #4]
 800fe48:	990e      	ldr	r1, [sp, #56]	; 0x38
 800fe4a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800fe4e:	f104 010c 	add.w	r1, r4, #12
 800fe52:	47c0      	blx	r8
				     (JDIMENSION) upsample->next_row_out,
				     output_buf + *out_row_ctr,
				     (int) num_rows);

  /* Adjust counts */
  *out_row_ctr += num_rows;
 800fe54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fe56:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800fe58:	681b      	ldr	r3, [r3, #0]
 800fe5a:	4433      	add	r3, r6
 800fe5c:	6013      	str	r3, [r2, #0]
  upsample->rows_to_go -= num_rows;
 800fe5e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800fe60:	1b9b      	subs	r3, r3, r6
 800fe62:	6623      	str	r3, [r4, #96]	; 0x60
  upsample->next_row_out += num_rows;
 800fe64:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800fe66:	441e      	add	r6, r3
  /* When the buffer is emptied, declare this input row group consumed */
  if (upsample->next_row_out >= cinfo->max_v_samp_factor)
 800fe68:	f8db 313c 	ldr.w	r3, [fp, #316]	; 0x13c
 800fe6c:	429e      	cmp	r6, r3
  upsample->next_row_out += num_rows;
 800fe6e:	65e6      	str	r6, [r4, #92]	; 0x5c
    (*in_row_group_ctr)++;
 800fe70:	bfa2      	ittt	ge
 800fe72:	682b      	ldrge	r3, [r5, #0]
 800fe74:	3301      	addge	r3, #1
 800fe76:	602b      	strge	r3, [r5, #0]
}
 800fe78:	b005      	add	sp, #20
 800fe7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	input_buf[ci] + (*in_row_group_ctr * upsample->rowgroup_height[ci]),
 800fe7e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800fe80:	f103 0904 	add.w	r9, r3, #4
 800fe84:	682a      	ldr	r2, [r5, #0]
 800fe86:	4342      	muls	r2, r0
      (*upsample->methods[ci]) (cinfo, compptr,
 800fe88:	f853 0928 	ldr.w	r0, [r3], #-40
 800fe8c:	4607      	mov	r7, r0
 800fe8e:	f858 0026 	ldr.w	r0, [r8, r6, lsl #2]
	 ci++, compptr++) {
 800fe92:	3601      	adds	r6, #1
      (*upsample->methods[ci]) (cinfo, compptr,
 800fe94:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800fe98:	4658      	mov	r0, fp
 800fe9a:	47b8      	blx	r7
	 ci++, compptr++) {
 800fe9c:	464b      	mov	r3, r9
 800fe9e:	e7b4      	b.n	800fe0a <sep_upsample+0x2a>

0800fea0 <fullsize_upsample>:

METHODDEF(void)
fullsize_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		   JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
  *output_data_ptr = input_data;
 800fea0:	601a      	str	r2, [r3, #0]
}
 800fea2:	4770      	bx	lr

0800fea4 <noop_upsample>:

METHODDEF(void)
noop_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
  *output_data_ptr = NULL;	/* safety check */
 800fea4:	2200      	movs	r2, #0
 800fea6:	601a      	str	r2, [r3, #0]
}
 800fea8:	4770      	bx	lr

0800feaa <h2v1_upsample>:
 */

METHODDEF(void)
h2v1_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
 800feaa:	b5f0      	push	{r4, r5, r6, r7, lr}
  JSAMPARRAY output_data = *output_data_ptr;
 800feac:	681f      	ldr	r7, [r3, #0]
  register JSAMPROW inptr, outptr;
  register JSAMPLE invalue;
  JSAMPROW outend;
  int outrow;

  for (outrow = 0; outrow < cinfo->max_v_samp_factor; outrow++) {
 800feae:	2300      	movs	r3, #0
 800feb0:	f8d0 113c 	ldr.w	r1, [r0, #316]	; 0x13c
 800feb4:	4299      	cmp	r1, r3
 800feb6:	dc00      	bgt.n	800feba <h2v1_upsample+0x10>
      invalue = *inptr++;	/* don't need GETJSAMPLE() here */
      *outptr++ = invalue;
      *outptr++ = invalue;
    }
  }
}
 800feb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    outptr = output_data[outrow];
 800feba:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
    outend = outptr + cinfo->output_width;
 800febe:	6f04      	ldr	r4, [r0, #112]	; 0x70
    inptr = input_data[outrow];
 800fec0:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
    outend = outptr + cinfo->output_width;
 800fec4:	440c      	add	r4, r1
    while (outptr < outend) {
 800fec6:	42a1      	cmp	r1, r4
 800fec8:	d301      	bcc.n	800fece <h2v1_upsample+0x24>
  for (outrow = 0; outrow < cinfo->max_v_samp_factor; outrow++) {
 800feca:	3301      	adds	r3, #1
 800fecc:	e7f0      	b.n	800feb0 <h2v1_upsample+0x6>
      invalue = *inptr++;	/* don't need GETJSAMPLE() here */
 800fece:	f815 6b01 	ldrb.w	r6, [r5], #1
      *outptr++ = invalue;
 800fed2:	f801 6b02 	strb.w	r6, [r1], #2
      *outptr++ = invalue;
 800fed6:	f801 6c01 	strb.w	r6, [r1, #-1]
 800feda:	e7f4      	b.n	800fec6 <h2v1_upsample+0x1c>

0800fedc <int_upsample>:
{
 800fedc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fee0:	4605      	mov	r5, r0
  JSAMPARRAY output_data = *output_data_ptr;
 800fee2:	681f      	ldr	r7, [r3, #0]
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 800fee4:	f8d0 01d8 	ldr.w	r0, [r0, #472]	; 0x1d8
{
 800fee8:	b085      	sub	sp, #20
  h_expand = upsample->h_expand[compptr->component_index];
 800feea:	684b      	ldr	r3, [r1, #4]
 800feec:	1f16      	subs	r6, r2, #4
  inrow = outrow = 0;
 800feee:	2400      	movs	r4, #0
  h_expand = upsample->h_expand[compptr->component_index];
 800fef0:	4403      	add	r3, r0
  v_expand = upsample->v_expand[compptr->component_index];
 800fef2:	f893 8096 	ldrb.w	r8, [r3, #150]	; 0x96
  h_expand = upsample->h_expand[compptr->component_index];
 800fef6:	f893 a08c 	ldrb.w	sl, [r3, #140]	; 0x8c
      jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
 800fefa:	f108 33ff 	add.w	r3, r8, #4294967295
 800fefe:	9303      	str	r3, [sp, #12]
  while (outrow < cinfo->max_v_samp_factor) {
 800ff00:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
 800ff04:	42a3      	cmp	r3, r4
 800ff06:	dc02      	bgt.n	800ff0e <int_upsample+0x32>
}
 800ff08:	b005      	add	sp, #20
 800ff0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outptr = output_data[outrow];
 800ff0e:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
    outend = outptr + cinfo->output_width;
 800ff12:	6f2a      	ldr	r2, [r5, #112]	; 0x70
    inptr = input_data[inrow];
 800ff14:	f856 bf04 	ldr.w	fp, [r6, #4]!
    outend = outptr + cinfo->output_width;
 800ff18:	eb03 0902 	add.w	r9, r3, r2
    while (outptr < outend) {
 800ff1c:	454b      	cmp	r3, r9
 800ff1e:	d30e      	bcc.n	800ff3e <int_upsample+0x62>
    if (v_expand > 1) {
 800ff20:	f1b8 0f01 	cmp.w	r8, #1
 800ff24:	dd09      	ble.n	800ff3a <int_upsample+0x5e>
      jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
 800ff26:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800ff28:	463a      	mov	r2, r7
 800ff2a:	4621      	mov	r1, r4
 800ff2c:	4638      	mov	r0, r7
 800ff2e:	9301      	str	r3, [sp, #4]
 800ff30:	9b03      	ldr	r3, [sp, #12]
 800ff32:	9300      	str	r3, [sp, #0]
 800ff34:	1c63      	adds	r3, r4, #1
 800ff36:	f007 f94e 	bl	80171d6 <jcopy_sample_rows>
    outrow += v_expand;
 800ff3a:	4444      	add	r4, r8
 800ff3c:	e7e0      	b.n	800ff00 <int_upsample+0x24>
	*outptr++ = invalue;
 800ff3e:	4618      	mov	r0, r3
 800ff40:	4652      	mov	r2, sl
 800ff42:	f81b 1b01 	ldrb.w	r1, [fp], #1
 800ff46:	f01a f965 	bl	802a214 <memset>
 800ff4a:	4603      	mov	r3, r0
 800ff4c:	4453      	add	r3, sl
 800ff4e:	e7e5      	b.n	800ff1c <int_upsample+0x40>

0800ff50 <h2v2_upsample>:
 */

METHODDEF(void)
h2v2_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
 800ff50:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800ff54:	4605      	mov	r5, r0
 800ff56:	4617      	mov	r7, r2
  JSAMPARRAY output_data = *output_data_ptr;
 800ff58:	681e      	ldr	r6, [r3, #0]
  register JSAMPROW inptr, outptr;
  register JSAMPLE invalue;
  JSAMPROW outend;
  int inrow, outrow;

  inrow = outrow = 0;
 800ff5a:	2400      	movs	r4, #0
    while (outptr < outend) {
      invalue = *inptr++;	/* don't need GETJSAMPLE() here */
      *outptr++ = invalue;
      *outptr++ = invalue;
    }
    jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
 800ff5c:	f04f 0801 	mov.w	r8, #1
  while (outrow < cinfo->max_v_samp_factor) {
 800ff60:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
 800ff64:	42a3      	cmp	r3, r4
 800ff66:	dc02      	bgt.n	800ff6e <h2v2_upsample+0x1e>
		      1, cinfo->output_width);
    inrow++;
    outrow += 2;
  }
}
 800ff68:	b002      	add	sp, #8
 800ff6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    outptr = output_data[outrow];
 800ff6e:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
    outend = outptr + cinfo->output_width;
 800ff72:	6f2a      	ldr	r2, [r5, #112]	; 0x70
    inptr = input_data[inrow];
 800ff74:	f857 1014 	ldr.w	r1, [r7, r4, lsl #1]
    outend = outptr + cinfo->output_width;
 800ff78:	441a      	add	r2, r3
    while (outptr < outend) {
 800ff7a:	4293      	cmp	r3, r2
 800ff7c:	d30a      	bcc.n	800ff94 <h2v2_upsample+0x44>
    jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
 800ff7e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800ff80:	4621      	mov	r1, r4
 800ff82:	4632      	mov	r2, r6
 800ff84:	4630      	mov	r0, r6
 800ff86:	e9cd 8300 	strd	r8, r3, [sp]
 800ff8a:	1c63      	adds	r3, r4, #1
    outrow += 2;
 800ff8c:	3402      	adds	r4, #2
    jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
 800ff8e:	f007 f922 	bl	80171d6 <jcopy_sample_rows>
    outrow += 2;
 800ff92:	e7e5      	b.n	800ff60 <h2v2_upsample+0x10>
      invalue = *inptr++;	/* don't need GETJSAMPLE() here */
 800ff94:	f811 0b01 	ldrb.w	r0, [r1], #1
      *outptr++ = invalue;
 800ff98:	f803 0b02 	strb.w	r0, [r3], #2
      *outptr++ = invalue;
 800ff9c:	f803 0c01 	strb.w	r0, [r3, #-1]
 800ffa0:	e7eb      	b.n	800ff7a <h2v2_upsample+0x2a>
	...

0800ffa4 <jinit_upsampler>:
 * Module initialization routine for upsampling.
 */

GLOBAL(void)
jinit_upsampler (j_decompress_ptr cinfo)
{
 800ffa4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  jpeg_component_info * compptr;
  boolean need_buffer;
  int h_in_group, v_in_group, h_out_group, v_out_group;

  upsample = (my_upsample_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ffa8:	6843      	ldr	r3, [r0, #4]
 800ffaa:	22a0      	movs	r2, #160	; 0xa0
 800ffac:	2101      	movs	r1, #1
{
 800ffae:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ffb0:	681b      	ldr	r3, [r3, #0]
 800ffb2:	4798      	blx	r3
				SIZEOF(my_upsampler));
  cinfo->upsample = (struct jpeg_upsampler *) upsample;
  upsample->pub.start_pass = start_pass_upsample;
 800ffb4:	4b3f      	ldr	r3, [pc, #252]	; (80100b4 <jinit_upsampler+0x110>)
  cinfo->upsample = (struct jpeg_upsampler *) upsample;
 800ffb6:	f8c4 01d8 	str.w	r0, [r4, #472]	; 0x1d8
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ffba:	4605      	mov	r5, r0
  upsample->pub.start_pass = start_pass_upsample;
 800ffbc:	6003      	str	r3, [r0, #0]
  upsample->pub.upsample = sep_upsample;
 800ffbe:	4b3e      	ldr	r3, [pc, #248]	; (80100b8 <jinit_upsampler+0x114>)
 800ffc0:	6043      	str	r3, [r0, #4]
  upsample->pub.need_context_rows = FALSE; /* until we find out differently */
 800ffc2:	2300      	movs	r3, #0
 800ffc4:	6083      	str	r3, [r0, #8]

  if (cinfo->CCIR601_sampling)	/* this isn't supported */
 800ffc6:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 800ffca:	b12b      	cbz	r3, 800ffd8 <jinit_upsampler+0x34>
    ERREXIT(cinfo, JERR_CCIR601_NOTIMPL);
 800ffcc:	6823      	ldr	r3, [r4, #0]
 800ffce:	221a      	movs	r2, #26
 800ffd0:	4620      	mov	r0, r4
 800ffd2:	615a      	str	r2, [r3, #20]
 800ffd4:	681b      	ldr	r3, [r3, #0]
 800ffd6:	4798      	blx	r3

  /* Verify we can handle the sampling factors, select per-component methods,
   * and create storage as needed.
   */
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800ffd8:	f105 060c 	add.w	r6, r5, #12
 800ffdc:	f105 088c 	add.w	r8, r5, #140	; 0x8c
 800ffe0:	f1c5 25ff 	rsb	r5, r5, #4278255360	; 0xff00ff00
 800ffe4:	f8d4 70d8 	ldr.w	r7, [r4, #216]	; 0xd8
      /* Special case for 2h2v upsampling */
      upsample->methods[ci] = h2v2_upsample;
    } else if ((h_out_group % h_in_group) == 0 &&
	       (v_out_group % v_in_group) == 0) {
      /* Generic integral-factors upsampling method */
      upsample->methods[ci] = int_upsample;
 800ffe8:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 80100c8 <jinit_upsampler+0x124>
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800ffec:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
      upsample->methods[ci] = h2v2_upsample;
 800fff0:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80100cc <jinit_upsampler+0x128>
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800fff4:	3574      	adds	r5, #116	; 0x74
 800fff6:	eb05 0308 	add.w	r3, r5, r8
 800fffa:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800fffc:	429a      	cmp	r2, r3
 800fffe:	dc01      	bgt.n	8010004 <jinit_upsampler+0x60>
	 (JDIMENSION) jround_up((long) cinfo->output_width,
				(long) cinfo->max_h_samp_factor),
	 (JDIMENSION) cinfo->max_v_samp_factor);
    }
  }
}
 8010000:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    v_in_group = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 8010004:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010006:	68fb      	ldr	r3, [r7, #12]
    h_in_group = (compptr->h_samp_factor * compptr->DCT_h_scaled_size) /
 8010008:	f8d7 e008 	ldr.w	lr, [r7, #8]
    v_in_group = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 801000c:	4343      	muls	r3, r0
 801000e:	f8d4 0144 	ldr.w	r0, [r4, #324]	; 0x144
    h_in_group = (compptr->h_samp_factor * compptr->DCT_h_scaled_size) /
 8010012:	f8d7 c024 	ldr.w	ip, [r7, #36]	; 0x24
		 cinfo->min_DCT_h_scaled_size;
 8010016:	f8d4 1140 	ldr.w	r1, [r4, #320]	; 0x140
    v_in_group = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 801001a:	fb93 f3f0 	sdiv	r3, r3, r0
    v_out_group = cinfo->max_v_samp_factor;
 801001e:	e9d4 b04e 	ldrd	fp, r0, [r4, #312]	; 0x138
    upsample->rowgroup_height[ci] = v_in_group; /* save for use later */
 8010022:	65b3      	str	r3, [r6, #88]	; 0x58
    if (! compptr->component_needed) {
 8010024:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010026:	b932      	cbnz	r2, 8010036 <jinit_upsampler+0x92>
      upsample->methods[ci] = noop_upsample;
 8010028:	4b24      	ldr	r3, [pc, #144]	; (80100bc <jinit_upsampler+0x118>)
      upsample->methods[ci] = fullsize_upsample;
 801002a:	62b3      	str	r3, [r6, #40]	; 0x28
       ci++, compptr++) {
 801002c:	3758      	adds	r7, #88	; 0x58
 801002e:	3604      	adds	r6, #4
 8010030:	f108 0801 	add.w	r8, r8, #1
 8010034:	e7df      	b.n	800fff6 <jinit_upsampler+0x52>
    h_in_group = (compptr->h_samp_factor * compptr->DCT_h_scaled_size) /
 8010036:	fb0c f20e 	mul.w	r2, ip, lr
 801003a:	fb92 f1f1 	sdiv	r1, r2, r1
    } else if (h_in_group == h_out_group && v_in_group == v_out_group) {
 801003e:	4559      	cmp	r1, fp
 8010040:	d103      	bne.n	801004a <jinit_upsampler+0xa6>
 8010042:	4283      	cmp	r3, r0
 8010044:	d101      	bne.n	801004a <jinit_upsampler+0xa6>
      upsample->methods[ci] = fullsize_upsample;
 8010046:	4b1e      	ldr	r3, [pc, #120]	; (80100c0 <jinit_upsampler+0x11c>)
 8010048:	e7ef      	b.n	801002a <jinit_upsampler+0x86>
    } else if (h_in_group * 2 == h_out_group &&
 801004a:	ebbb 0f41 	cmp.w	fp, r1, lsl #1
 801004e:	d119      	bne.n	8010084 <jinit_upsampler+0xe0>
 8010050:	4283      	cmp	r3, r0
 8010052:	d111      	bne.n	8010078 <jinit_upsampler+0xd4>
      upsample->methods[ci] = h2v1_upsample;
 8010054:	4b1b      	ldr	r3, [pc, #108]	; (80100c4 <jinit_upsampler+0x120>)
 8010056:	62b3      	str	r3, [r6, #40]	; 0x28
      upsample->color_buf[ci] = (*cinfo->mem->alloc_sarray)
 8010058:	6863      	ldr	r3, [r4, #4]
	 (JDIMENSION) jround_up((long) cinfo->output_width,
 801005a:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
 801005e:	6f20      	ldr	r0, [r4, #112]	; 0x70
      upsample->color_buf[ci] = (*cinfo->mem->alloc_sarray)
 8010060:	f8d3 b008 	ldr.w	fp, [r3, #8]
	 (JDIMENSION) jround_up((long) cinfo->output_width,
 8010064:	f007 f8af 	bl	80171c6 <jround_up>
      upsample->color_buf[ci] = (*cinfo->mem->alloc_sarray)
 8010068:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
	 (JDIMENSION) jround_up((long) cinfo->output_width,
 801006c:	4602      	mov	r2, r0
      upsample->color_buf[ci] = (*cinfo->mem->alloc_sarray)
 801006e:	2101      	movs	r1, #1
 8010070:	4620      	mov	r0, r4
 8010072:	47d8      	blx	fp
 8010074:	6030      	str	r0, [r6, #0]
 8010076:	e7d9      	b.n	801002c <jinit_upsampler+0x88>
    } else if (h_in_group * 2 == h_out_group &&
 8010078:	ebb0 0f43 	cmp.w	r0, r3, lsl #1
 801007c:	d102      	bne.n	8010084 <jinit_upsampler+0xe0>
      upsample->methods[ci] = h2v2_upsample;
 801007e:	f8c6 a028 	str.w	sl, [r6, #40]	; 0x28
    if (need_buffer) {
 8010082:	e7e9      	b.n	8010058 <jinit_upsampler+0xb4>
    } else if ((h_out_group % h_in_group) == 0 &&
 8010084:	fb9b f2f1 	sdiv	r2, fp, r1
 8010088:	fb01 b112 	mls	r1, r1, r2, fp
 801008c:	b959      	cbnz	r1, 80100a6 <jinit_upsampler+0x102>
	       (v_out_group % v_in_group) == 0) {
 801008e:	fb90 f1f3 	sdiv	r1, r0, r3
 8010092:	fb03 0311 	mls	r3, r3, r1, r0
    } else if ((h_out_group % h_in_group) == 0 &&
 8010096:	b933      	cbnz	r3, 80100a6 <jinit_upsampler+0x102>
      upsample->methods[ci] = int_upsample;
 8010098:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
      upsample->h_expand[ci] = (UINT8) (h_out_group / h_in_group);
 801009c:	f888 2000 	strb.w	r2, [r8]
      upsample->v_expand[ci] = (UINT8) (v_out_group / v_in_group);
 80100a0:	f888 100a 	strb.w	r1, [r8, #10]
    if (need_buffer) {
 80100a4:	e7d8      	b.n	8010058 <jinit_upsampler+0xb4>
      ERREXIT(cinfo, JERR_FRACT_SAMPLE_NOTIMPL);
 80100a6:	6823      	ldr	r3, [r4, #0]
 80100a8:	2227      	movs	r2, #39	; 0x27
 80100aa:	4620      	mov	r0, r4
 80100ac:	615a      	str	r2, [r3, #20]
 80100ae:	681b      	ldr	r3, [r3, #0]
 80100b0:	4798      	blx	r3
    if (need_buffer) {
 80100b2:	e7d1      	b.n	8010058 <jinit_upsampler+0xb4>
 80100b4:	0800fdd1 	.word	0x0800fdd1
 80100b8:	0800fde1 	.word	0x0800fde1
 80100bc:	0800fea5 	.word	0x0800fea5
 80100c0:	0800fea1 	.word	0x0800fea1
 80100c4:	0800feab 	.word	0x0800feab
 80100c8:	0800fedd 	.word	0x0800fedd
 80100cc:	0800ff51 	.word	0x0800ff51

080100d0 <output_message>:
 * not just not use this routine.
 */

METHODDEF(void)
output_message (j_common_ptr cinfo)
{
 80100d0:	b500      	push	{lr}
  char buffer[JMSG_LENGTH_MAX];

  /* Create the message */
  (*cinfo->err->format_message) (cinfo, buffer);
 80100d2:	6803      	ldr	r3, [r0, #0]
{
 80100d4:	b0b3      	sub	sp, #204	; 0xcc
  (*cinfo->err->format_message) (cinfo, buffer);
 80100d6:	68db      	ldr	r3, [r3, #12]
 80100d8:	4669      	mov	r1, sp
 80100da:	4798      	blx	r3
#else
  /* Send it to stderr, adding a newline */
//  fprintf(stderr, "%s\n", buffer);
//  printf( "%s\n", buffer);
#endif
}
 80100dc:	b033      	add	sp, #204	; 0xcc
 80100de:	f85d fb04 	ldr.w	pc, [sp], #4

080100e2 <emit_message>:
METHODDEF(void)
emit_message (j_common_ptr cinfo, int msg_level)
{
  struct jpeg_error_mgr * err = cinfo->err;

  if (msg_level < 0) {
 80100e2:	2900      	cmp	r1, #0
{
 80100e4:	4603      	mov	r3, r0
 80100e6:	b510      	push	{r4, lr}
  struct jpeg_error_mgr * err = cinfo->err;
 80100e8:	6804      	ldr	r4, [r0, #0]
  if (msg_level < 0) {
 80100ea:	da0b      	bge.n	8010104 <emit_message+0x22>
    /* It's a warning message.  Since corrupt files may generate many warnings,
     * the policy implemented here is to show only the first warning,
     * unless trace_level >= 3.
     */
    if (err->num_warnings == 0 || err->trace_level >= 3)
 80100ec:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80100ee:	b112      	cbz	r2, 80100f6 <emit_message+0x14>
 80100f0:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 80100f2:	2a02      	cmp	r2, #2
 80100f4:	dd02      	ble.n	80100fc <emit_message+0x1a>
      (*err->output_message) (cinfo);
 80100f6:	68a2      	ldr	r2, [r4, #8]
 80100f8:	4618      	mov	r0, r3
 80100fa:	4790      	blx	r2
    /* Always count warnings in num_warnings. */
    err->num_warnings++;
 80100fc:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80100fe:	3301      	adds	r3, #1
 8010100:	66e3      	str	r3, [r4, #108]	; 0x6c
  } else {
    /* It's a trace message.  Show it if trace_level >= msg_level. */
    if (err->trace_level >= msg_level)
      (*err->output_message) (cinfo);
  }
}
 8010102:	bd10      	pop	{r4, pc}
    if (err->trace_level >= msg_level)
 8010104:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8010106:	428b      	cmp	r3, r1
 8010108:	dbfb      	blt.n	8010102 <emit_message+0x20>
      (*err->output_message) (cinfo);
 801010a:	68a3      	ldr	r3, [r4, #8]
}
 801010c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      (*err->output_message) (cinfo);
 8010110:	4718      	bx	r3

08010112 <reset_error_mgr>:
 */

METHODDEF(void)
reset_error_mgr (j_common_ptr cinfo)
{
  cinfo->err->num_warnings = 0;
 8010112:	6803      	ldr	r3, [r0, #0]
 8010114:	2200      	movs	r2, #0
 8010116:	66da      	str	r2, [r3, #108]	; 0x6c
  /* trace_level is not reset since it is an application-supplied parameter */
  cinfo->err->msg_code = 0;	/* may be useful as a flag for "no error" */
 8010118:	615a      	str	r2, [r3, #20]
}
 801011a:	4770      	bx	lr

0801011c <format_message>:
{
 801011c:	4603      	mov	r3, r0
 801011e:	4608      	mov	r0, r1
  struct jpeg_error_mgr * err = cinfo->err;
 8010120:	681a      	ldr	r2, [r3, #0]
  int msg_code = err->msg_code;
 8010122:	6953      	ldr	r3, [r2, #20]
  if (msg_code > 0 && msg_code <= err->last_jpeg_message) {
 8010124:	2b00      	cmp	r3, #0
{
 8010126:	b530      	push	{r4, r5, lr}
 8010128:	b087      	sub	sp, #28
  if (msg_code > 0 && msg_code <= err->last_jpeg_message) {
 801012a:	dd1f      	ble.n	801016c <format_message+0x50>
 801012c:	6f51      	ldr	r1, [r2, #116]	; 0x74
 801012e:	4299      	cmp	r1, r3
 8010130:	db1c      	blt.n	801016c <format_message+0x50>
    msgtext = err->jpeg_message_table[msg_code];
 8010132:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8010134:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
  if (msgtext == NULL) {
 8010138:	b911      	cbnz	r1, 8010140 <format_message+0x24>
    err->msg_parm.i[0] = msg_code;
 801013a:	6193      	str	r3, [r2, #24]
    msgtext = err->jpeg_message_table[0];
 801013c:	6f13      	ldr	r3, [r2, #112]	; 0x70
 801013e:	6819      	ldr	r1, [r3, #0]
  msgptr = msgtext;
 8010140:	460b      	mov	r3, r1
  while ((ch = *msgptr++) != '\0') {
 8010142:	f813 4b01 	ldrb.w	r4, [r3], #1
 8010146:	b9fc      	cbnz	r4, 8010188 <format_message+0x6c>
    sprintf(buffer, msgtext,
 8010148:	6b53      	ldr	r3, [r2, #52]	; 0x34
 801014a:	9305      	str	r3, [sp, #20]
 801014c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 801014e:	9304      	str	r3, [sp, #16]
 8010150:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8010152:	9303      	str	r3, [sp, #12]
 8010154:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8010156:	9302      	str	r3, [sp, #8]
 8010158:	6a53      	ldr	r3, [r2, #36]	; 0x24
 801015a:	9301      	str	r3, [sp, #4]
 801015c:	6a13      	ldr	r3, [r2, #32]
 801015e:	9300      	str	r3, [sp, #0]
 8010160:	e9d2 2306 	ldrd	r2, r3, [r2, #24]
 8010164:	f01a fc80 	bl	802aa68 <siprintf>
}
 8010168:	b007      	add	sp, #28
 801016a:	bd30      	pop	{r4, r5, pc}
  } else if (err->addon_message_table != NULL &&
 801016c:	6f94      	ldr	r4, [r2, #120]	; 0x78
 801016e:	2c00      	cmp	r4, #0
 8010170:	d0e3      	beq.n	801013a <format_message+0x1e>
	     msg_code >= err->first_addon_message &&
 8010172:	6fd1      	ldr	r1, [r2, #124]	; 0x7c
  } else if (err->addon_message_table != NULL &&
 8010174:	4299      	cmp	r1, r3
 8010176:	dce0      	bgt.n	801013a <format_message+0x1e>
	     msg_code >= err->first_addon_message &&
 8010178:	f8d2 5080 	ldr.w	r5, [r2, #128]	; 0x80
 801017c:	429d      	cmp	r5, r3
 801017e:	dbdc      	blt.n	801013a <format_message+0x1e>
    msgtext = err->addon_message_table[msg_code - err->first_addon_message];
 8010180:	1a59      	subs	r1, r3, r1
 8010182:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 8010186:	e7d7      	b.n	8010138 <format_message+0x1c>
    if (ch == '%') {
 8010188:	2c25      	cmp	r4, #37	; 0x25
 801018a:	d1da      	bne.n	8010142 <format_message+0x26>
      if (*msgptr == 's') isstring = TRUE;
 801018c:	781b      	ldrb	r3, [r3, #0]
 801018e:	2b73      	cmp	r3, #115	; 0x73
 8010190:	d1da      	bne.n	8010148 <format_message+0x2c>
    sprintf(buffer, msgtext, err->msg_parm.s);
 8010192:	3218      	adds	r2, #24
}
 8010194:	b007      	add	sp, #28
 8010196:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    sprintf(buffer, msgtext, err->msg_parm.s);
 801019a:	f01a bc65 	b.w	802aa68 <siprintf>

0801019e <error_exit>:
  (*cinfo->err->output_message) (cinfo);
 801019e:	6803      	ldr	r3, [r0, #0]
{
 80101a0:	b510      	push	{r4, lr}
 80101a2:	4604      	mov	r4, r0
  (*cinfo->err->output_message) (cinfo);
 80101a4:	689b      	ldr	r3, [r3, #8]
 80101a6:	4798      	blx	r3
  jpeg_destroy(cinfo);
 80101a8:	4620      	mov	r0, r4
}
 80101aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  jpeg_destroy(cinfo);
 80101ae:	f7f9 bf03 	b.w	8009fb8 <jpeg_destroy>
	...

080101b4 <jpeg_std_error>:
 */

GLOBAL(struct jpeg_error_mgr *)
jpeg_std_error (struct jpeg_error_mgr * err)
{
  err->error_exit = error_exit;
 80101b4:	4a0a      	ldr	r2, [pc, #40]	; (80101e0 <jpeg_std_error+0x2c>)
  err->trace_level = 0;		/* default = no tracing */
  err->num_warnings = 0;	/* no warnings emitted yet */
  err->msg_code = 0;		/* may be useful as a flag for "no error" */

  /* Initialize message table pointers */
  err->jpeg_message_table = jpeg_std_message_table;
 80101b6:	490b      	ldr	r1, [pc, #44]	; (80101e4 <jpeg_std_error+0x30>)
  err->error_exit = error_exit;
 80101b8:	6002      	str	r2, [r0, #0]
  err->emit_message = emit_message;
 80101ba:	4a0b      	ldr	r2, [pc, #44]	; (80101e8 <jpeg_std_error+0x34>)
  err->jpeg_message_table = jpeg_std_message_table;
 80101bc:	6701      	str	r1, [r0, #112]	; 0x70
  err->last_jpeg_message = (int) JMSG_LASTMSGCODE - 1;
 80101be:	217e      	movs	r1, #126	; 0x7e
  err->emit_message = emit_message;
 80101c0:	6042      	str	r2, [r0, #4]
  err->output_message = output_message;
 80101c2:	4a0a      	ldr	r2, [pc, #40]	; (80101ec <jpeg_std_error+0x38>)
 80101c4:	6082      	str	r2, [r0, #8]
  err->format_message = format_message;
 80101c6:	4a0a      	ldr	r2, [pc, #40]	; (80101f0 <jpeg_std_error+0x3c>)
 80101c8:	60c2      	str	r2, [r0, #12]
  err->reset_error_mgr = reset_error_mgr;
 80101ca:	4a0a      	ldr	r2, [pc, #40]	; (80101f4 <jpeg_std_error+0x40>)
 80101cc:	6102      	str	r2, [r0, #16]
  err->trace_level = 0;		/* default = no tracing */
 80101ce:	2200      	movs	r2, #0
  err->num_warnings = 0;	/* no warnings emitted yet */
 80101d0:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
  err->msg_code = 0;		/* may be useful as a flag for "no error" */
 80101d4:	6142      	str	r2, [r0, #20]

  err->addon_message_table = NULL;
 80101d6:	e9c0 121d 	strd	r1, r2, [r0, #116]	; 0x74
  err->first_addon_message = 0;	/* for safety */
  err->last_addon_message = 0;
 80101da:	e9c0 221f 	strd	r2, r2, [r0, #124]	; 0x7c

  return err;
}
 80101de:	4770      	bx	lr
 80101e0:	0801019f 	.word	0x0801019f
 80101e4:	0802f22c 	.word	0x0802f22c
 80101e8:	080100e3 	.word	0x080100e3
 80101ec:	080100d1 	.word	0x080100d1
 80101f0:	0801011d 	.word	0x0801011d
 80101f4:	08010113 	.word	0x08010113

080101f8 <jpeg_idct_float>:

GLOBAL(void)
jpeg_idct_float (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80101f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FAST_FLOAT workspace[DCTSIZE2]; /* buffers data between passes */

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (FLOAT_MULT_TYPE *) compptr->dct_table;
 80101fc:	f8d1 c054 	ldr.w	ip, [r1, #84]	; 0x54
{
 8010200:	b0c1      	sub	sp, #260	; 0x104
  JSAMPLE *range_limit = cinfo->sample_range_limit;
 8010202:	f8d0 614c 	ldr.w	r6, [r0, #332]	; 0x14c
  wsptr = workspace;
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 8010206:	3a02      	subs	r2, #2
 8010208:	f10c 0a20 	add.w	sl, ip, #32
  wsptr = workspace;
 801020c:	466c      	mov	r4, sp

    tmp10 = tmp0 + tmp2;	/* phase 3 */
    tmp11 = tmp0 - tmp2;

    tmp13 = tmp1 + tmp3;	/* phases 5-3 */
    tmp12 = (tmp1 - tmp3) * ((FAST_FLOAT) 1.414213562) - tmp13; /* 2*c4 */
 801020e:	ed9f 5abd 	vldr	s10, [pc, #756]	; 8010504 <jpeg_idct_float+0x30c>

    tmp7 = z11 + z13;		/* phase 5 */
    tmp11 = (z11 - z13) * ((FAST_FLOAT) 1.414213562); /* 2*c4 */

    z5 = (z10 + z12) * ((FAST_FLOAT) 1.847759065); /* 2*c2 */
    tmp10 = z5 - z12 * ((FAST_FLOAT) 1.082392200); /* 2*(c2-c6) */
 8010212:	ed9f 4abd 	vldr	s8, [pc, #756]	; 8010508 <jpeg_idct_float+0x310>
 8010216:	eddf 4abd 	vldr	s9, [pc, #756]	; 801050c <jpeg_idct_float+0x314>
    tmp12 = z5 - z10 * ((FAST_FLOAT) 2.613125930); /* 2*(c2+c6) */
 801021a:	eddf 3abd 	vldr	s7, [pc, #756]	; 8010510 <jpeg_idct_float+0x318>
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 801021e:	f9b2 e012 	ldrsh.w	lr, [r2, #18]
      wsptr++;
 8010222:	3404      	adds	r4, #4
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 8010224:	f9b2 9022 	ldrsh.w	r9, [r2, #34]	; 0x22
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 8010228:	f9b2 8032 	ldrsh.w	r8, [r2, #50]	; 0x32
 801022c:	f9b2 7042 	ldrsh.w	r7, [r2, #66]	; 0x42
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 8010230:	f9b2 1052 	ldrsh.w	r1, [r2, #82]	; 0x52
 8010234:	f9b2 5062 	ldrsh.w	r5, [r2, #98]	; 0x62
	inptr[DCTSIZE*7] == 0) {
 8010238:	f9b2 0072 	ldrsh.w	r0, [r2, #114]	; 0x72
      FAST_FLOAT dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801023c:	f932 bf02 	ldrsh.w	fp, [r2, #2]!
 8010240:	ecbc 7a01 	vldmia	ip!, {s14}
 8010244:	ee07 ba90 	vmov	s15, fp
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 8010248:	ea4e 0b09 	orr.w	fp, lr, r9
 801024c:	ea48 0b0b 	orr.w	fp, r8, fp
      FAST_FLOAT dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010250:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 8010254:	ea47 0b0b 	orr.w	fp, r7, fp
      FAST_FLOAT dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010258:	ee67 7a87 	vmul.f32	s15, s15, s14
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 801025c:	ea41 0b0b 	orr.w	fp, r1, fp
 8010260:	ea45 0b0b 	orr.w	fp, r5, fp
 8010264:	ea50 0b0b 	orrs.w	fp, r0, fp
 8010268:	f040 80c0 	bne.w	80103ec <jpeg_idct_float+0x1f4>
      wsptr[DCTSIZE*0] = dcval;
 801026c:	ed44 7a01 	vstr	s15, [r4, #-4]
      wsptr[DCTSIZE*1] = dcval;
 8010270:	edc4 7a07 	vstr	s15, [r4, #28]
      wsptr[DCTSIZE*2] = dcval;
 8010274:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
      wsptr[DCTSIZE*3] = dcval;
 8010278:	edc4 7a17 	vstr	s15, [r4, #92]	; 0x5c
      wsptr[DCTSIZE*4] = dcval;
 801027c:	edc4 7a1f 	vstr	s15, [r4, #124]	; 0x7c
      wsptr[DCTSIZE*5] = dcval;
 8010280:	edc4 7a27 	vstr	s15, [r4, #156]	; 0x9c
      wsptr[DCTSIZE*6] = dcval;
 8010284:	edc4 7a2f 	vstr	s15, [r4, #188]	; 0xbc
      wsptr[DCTSIZE*7] = dcval;
 8010288:	edc4 7a37 	vstr	s15, [r4, #220]	; 0xdc
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 801028c:	45e2      	cmp	sl, ip
 801028e:	d1c6      	bne.n	801021e <jpeg_idct_float+0x26>
 8010290:	1f1c      	subs	r4, r3, #4
 8010292:	f103 001c 	add.w	r0, r3, #28
    wsptr++;
  }
  
  /* Pass 2: process rows from work array, store into output array. */

  wsptr = workspace;
 8010296:	466a      	mov	r2, sp
     */
    
    /* Even part */

    /* Apply signed->unsigned and prepare float->int conversion */
    z5 = wsptr[0] + ((FAST_FLOAT) CENTERJSAMPLE + (FAST_FLOAT) 0.5);
 8010298:	eddf 2a9e 	vldr	s5, [pc, #632]	; 8010514 <jpeg_idct_float+0x31c>
    tmp10 = z5 + wsptr[4];
    tmp11 = z5 - wsptr[4];

    tmp13 = wsptr[2] + wsptr[6];
    tmp12 = (wsptr[2] - wsptr[6]) * ((FAST_FLOAT) 1.414213562) - tmp13;
 801029c:	eddf 4a99 	vldr	s9, [pc, #612]	; 8010504 <jpeg_idct_float+0x30c>

    tmp7 = z11 + z13;
    tmp11 = (z11 - z13) * ((FAST_FLOAT) 1.414213562);

    z5 = (z10 + z12) * ((FAST_FLOAT) 1.847759065); /* 2*c2 */
    tmp10 = z5 - z12 * ((FAST_FLOAT) 1.082392200); /* 2*(c2-c6) */
 80102a0:	ed9f 3a99 	vldr	s6, [pc, #612]	; 8010508 <jpeg_idct_float+0x310>
 80102a4:	ed9f 4a99 	vldr	s8, [pc, #612]	; 801050c <jpeg_idct_float+0x314>
    tmp12 = z5 - z10 * ((FAST_FLOAT) 2.613125930); /* 2*(c2+c6) */
 80102a8:	eddf 3a99 	vldr	s7, [pc, #612]	; 8010510 <jpeg_idct_float+0x318>
    z5 = wsptr[0] + ((FAST_FLOAT) CENTERJSAMPLE + (FAST_FLOAT) 0.5);
 80102ac:	edd2 5a00 	vldr	s11, [r2]
    outptr[2] = range_limit[((int) (tmp2 + tmp5)) & RANGE_MASK];
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
    outptr[3] = range_limit[((int) (tmp3 + tmp4)) & RANGE_MASK];
    outptr[4] = range_limit[((int) (tmp3 - tmp4)) & RANGE_MASK];
    
    wsptr += DCTSIZE;		/* advance pointer to next row */
 80102b0:	3220      	adds	r2, #32
    tmp10 = z5 + wsptr[4];
 80102b2:	ed52 7a04 	vldr	s15, [r2, #-16]
    z5 = wsptr[0] + ((FAST_FLOAT) CENTERJSAMPLE + (FAST_FLOAT) 0.5);
 80102b6:	ee75 5aa2 	vadd.f32	s11, s11, s5
    tmp13 = wsptr[2] + wsptr[6];
 80102ba:	ed52 6a02 	vldr	s13, [r2, #-8]
    z11 = wsptr[1] + wsptr[7];
 80102be:	ed12 1a01 	vldr	s2, [r2, #-4]
    outptr = output_buf[ctr] + output_col;
 80102c2:	f854 5f04 	ldr.w	r5, [r4, #4]!
    tmp10 = z5 + wsptr[4];
 80102c6:	ee37 5aa5 	vadd.f32	s10, s15, s11
    outptr = output_buf[ctr] + output_col;
 80102ca:	9b4a      	ldr	r3, [sp, #296]	; 0x128
    tmp11 = z5 - wsptr[4];
 80102cc:	ee75 5ae7 	vsub.f32	s11, s11, s15
    tmp13 = wsptr[2] + wsptr[6];
 80102d0:	ed52 7a06 	vldr	s15, [r2, #-24]	; 0xffffffe8
    outptr = output_buf[ctr] + output_col;
 80102d4:	18e9      	adds	r1, r5, r3
    outptr[0] = range_limit[((int) (tmp0 + tmp7)) & RANGE_MASK];
 80102d6:	9f4a      	ldr	r7, [sp, #296]	; 0x128
    tmp13 = wsptr[2] + wsptr[6];
 80102d8:	ee37 7aa6 	vadd.f32	s14, s15, s13
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
 80102dc:	42a0      	cmp	r0, r4
    tmp12 = (wsptr[2] - wsptr[6]) * ((FAST_FLOAT) 1.414213562) - tmp13;
 80102de:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80102e2:	eeb0 2a47 	vmov.f32	s4, s14
    tmp0 = tmp10 + tmp13;
 80102e6:	ee35 6a07 	vadd.f32	s12, s10, s14
    tmp3 = tmp10 - tmp13;
 80102ea:	ee35 5a47 	vsub.f32	s10, s10, s14
    z13 = wsptr[5] + wsptr[3];
 80102ee:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
    tmp12 = (wsptr[2] - wsptr[6]) * ((FAST_FLOAT) 1.414213562) - tmp13;
 80102f2:	ee97 2aa4 	vfnms.f32	s4, s15, s9
    z13 = wsptr[5] + wsptr[3];
 80102f6:	ed52 7a03 	vldr	s15, [r2, #-12]
 80102fa:	ee77 1a87 	vadd.f32	s3, s15, s14
    z10 = wsptr[5] - wsptr[3];
 80102fe:	ee77 7ac7 	vsub.f32	s15, s15, s14
    z11 = wsptr[1] + wsptr[7];
 8010302:	ed12 7a07 	vldr	s14, [r2, #-28]	; 0xffffffe4
    tmp1 = tmp11 + tmp12;
 8010306:	ee75 6a82 	vadd.f32	s13, s11, s4
    tmp2 = tmp11 - tmp12;
 801030a:	ee75 5ac2 	vsub.f32	s11, s11, s4
    z11 = wsptr[1] + wsptr[7];
 801030e:	ee37 2a01 	vadd.f32	s4, s14, s2
    z12 = wsptr[1] - wsptr[7];
 8010312:	ee37 7a41 	vsub.f32	s14, s14, s2
    tmp7 = z11 + z13;
 8010316:	ee31 1a82 	vadd.f32	s2, s3, s4
    tmp11 = (z11 - z13) * ((FAST_FLOAT) 1.414213562);
 801031a:	ee32 2a61 	vsub.f32	s4, s4, s3
    z5 = (z10 + z12) * ((FAST_FLOAT) 1.847759065); /* 2*c2 */
 801031e:	ee77 1a87 	vadd.f32	s3, s15, s14
    tmp12 = z5 - z10 * ((FAST_FLOAT) 2.613125930); /* 2*(c2+c6) */
 8010322:	ee63 7ae7 	vnmul.f32	s15, s7, s15
    tmp10 = z5 - z12 * ((FAST_FLOAT) 1.082392200); /* 2*(c2-c6) */
 8010326:	ee23 7a47 	vnmul.f32	s14, s6, s14
    tmp12 = z5 - z10 * ((FAST_FLOAT) 2.613125930); /* 2*(c2+c6) */
 801032a:	eee1 7a84 	vfma.f32	s15, s3, s8
    tmp10 = z5 - z12 * ((FAST_FLOAT) 1.082392200); /* 2*(c2-c6) */
 801032e:	eea1 7a84 	vfma.f32	s14, s3, s8
    tmp6 = tmp12 - tmp7;
 8010332:	ee77 7ac1 	vsub.f32	s15, s15, s2
    tmp5 = tmp11 - tmp6;
 8010336:	eef0 1a67 	vmov.f32	s3, s15
 801033a:	eed2 1a24 	vfnms.f32	s3, s4, s9
    outptr[0] = range_limit[((int) (tmp0 + tmp7)) & RANGE_MASK];
 801033e:	ee36 2a01 	vadd.f32	s4, s12, s2
    outptr[7] = range_limit[((int) (tmp0 - tmp7)) & RANGE_MASK];
 8010342:	ee36 6a41 	vsub.f32	s12, s12, s2
    outptr[0] = range_limit[((int) (tmp0 + tmp7)) & RANGE_MASK];
 8010346:	eebd 2ac2 	vcvt.s32.f32	s4, s4
    outptr[7] = range_limit[((int) (tmp0 - tmp7)) & RANGE_MASK];
 801034a:	eebd 6ac6 	vcvt.s32.f32	s12, s12
    tmp4 = tmp10 - tmp5;
 801034e:	ee37 7a61 	vsub.f32	s14, s14, s3
    outptr[0] = range_limit[((int) (tmp0 + tmp7)) & RANGE_MASK];
 8010352:	ee12 3a10 	vmov	r3, s4
 8010356:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801035a:	5cf3      	ldrb	r3, [r6, r3]
 801035c:	55eb      	strb	r3, [r5, r7]
    outptr[7] = range_limit[((int) (tmp0 - tmp7)) & RANGE_MASK];
 801035e:	ee16 3a10 	vmov	r3, s12
    outptr[1] = range_limit[((int) (tmp1 + tmp6)) & RANGE_MASK];
 8010362:	ee36 6aa7 	vadd.f32	s12, s13, s15
    outptr[7] = range_limit[((int) (tmp0 - tmp7)) & RANGE_MASK];
 8010366:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[6] = range_limit[((int) (tmp1 - tmp6)) & RANGE_MASK];
 801036a:	ee76 6ae7 	vsub.f32	s13, s13, s15
    outptr[1] = range_limit[((int) (tmp1 + tmp6)) & RANGE_MASK];
 801036e:	eebd 6ac6 	vcvt.s32.f32	s12, s12
    outptr[7] = range_limit[((int) (tmp0 - tmp7)) & RANGE_MASK];
 8010372:	5cf3      	ldrb	r3, [r6, r3]
    outptr[6] = range_limit[((int) (tmp1 - tmp6)) & RANGE_MASK];
 8010374:	eefd 7ae6 	vcvt.s32.f32	s15, s13
    outptr[7] = range_limit[((int) (tmp0 - tmp7)) & RANGE_MASK];
 8010378:	71cb      	strb	r3, [r1, #7]
    outptr[2] = range_limit[((int) (tmp2 + tmp5)) & RANGE_MASK];
 801037a:	ee75 6aa1 	vadd.f32	s13, s11, s3
    outptr[1] = range_limit[((int) (tmp1 + tmp6)) & RANGE_MASK];
 801037e:	ee16 3a10 	vmov	r3, s12
 8010382:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010386:	5cf3      	ldrb	r3, [r6, r3]
 8010388:	704b      	strb	r3, [r1, #1]
    outptr[6] = range_limit[((int) (tmp1 - tmp6)) & RANGE_MASK];
 801038a:	ee17 3a90 	vmov	r3, s15
    outptr[2] = range_limit[((int) (tmp2 + tmp5)) & RANGE_MASK];
 801038e:	eefd 7ae6 	vcvt.s32.f32	s15, s13
    outptr[6] = range_limit[((int) (tmp1 - tmp6)) & RANGE_MASK];
 8010392:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010396:	5cf3      	ldrb	r3, [r6, r3]
 8010398:	718b      	strb	r3, [r1, #6]
    outptr[2] = range_limit[((int) (tmp2 + tmp5)) & RANGE_MASK];
 801039a:	ee17 3a90 	vmov	r3, s15
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
 801039e:	ee75 7ae1 	vsub.f32	s15, s11, s3
    outptr[2] = range_limit[((int) (tmp2 + tmp5)) & RANGE_MASK];
 80103a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
 80103a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    outptr[2] = range_limit[((int) (tmp2 + tmp5)) & RANGE_MASK];
 80103aa:	5cf3      	ldrb	r3, [r6, r3]
 80103ac:	708b      	strb	r3, [r1, #2]
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
 80103ae:	ee17 3a90 	vmov	r3, s15
    outptr[3] = range_limit[((int) (tmp3 + tmp4)) & RANGE_MASK];
 80103b2:	ee75 7a07 	vadd.f32	s15, s10, s14
    outptr[4] = range_limit[((int) (tmp3 - tmp4)) & RANGE_MASK];
 80103b6:	ee35 7a47 	vsub.f32	s14, s10, s14
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
 80103ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[3] = range_limit[((int) (tmp3 + tmp4)) & RANGE_MASK];
 80103be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
 80103c2:	5cf3      	ldrb	r3, [r6, r3]
    outptr[4] = range_limit[((int) (tmp3 - tmp4)) & RANGE_MASK];
 80103c4:	eebd 7ac7 	vcvt.s32.f32	s14, s14
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
 80103c8:	714b      	strb	r3, [r1, #5]
    outptr[3] = range_limit[((int) (tmp3 + tmp4)) & RANGE_MASK];
 80103ca:	ee17 3a90 	vmov	r3, s15
 80103ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80103d2:	5cf3      	ldrb	r3, [r6, r3]
 80103d4:	70cb      	strb	r3, [r1, #3]
    outptr[4] = range_limit[((int) (tmp3 - tmp4)) & RANGE_MASK];
 80103d6:	ee17 3a10 	vmov	r3, s14
 80103da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80103de:	5cf3      	ldrb	r3, [r6, r3]
 80103e0:	710b      	strb	r3, [r1, #4]
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
 80103e2:	f47f af63 	bne.w	80102ac <jpeg_idct_float+0xb4>
  }
}
 80103e6:	b041      	add	sp, #260	; 0x104
 80103e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80103ec:	ee07 9a10 	vmov	s14, r9
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80103f0:	ed9c 3a2f 	vldr	s6, [ip, #188]	; 0xbc
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80103f4:	eddc 2a1f 	vldr	s5, [ip, #124]	; 0x7c
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80103f8:	eef8 6ac7 	vcvt.f32.s32	s13, s14
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80103fc:	ee07 7a10 	vmov	s14, r7
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010400:	eddc 5a0f 	vldr	s11, [ip, #60]	; 0x3c
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8010404:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8010408:	ee07 5a10 	vmov	s14, r5
    tmp7 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 801040c:	ed9c 1a37 	vldr	s2, [ip, #220]	; 0xdc
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8010410:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    tmp4 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010414:	eddc 1a07 	vldr	s3, [ip, #28]
    tmp5 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8010418:	eddc 0a17 	vldr	s1, [ip, #92]	; 0x5c
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801041c:	ee27 7a03 	vmul.f32	s14, s14, s6
    tmp10 = tmp0 + tmp2;	/* phase 3 */
 8010420:	eeb0 3a67 	vmov.f32	s6, s15
    tmp11 = tmp0 - tmp2;
 8010424:	eee6 7a62 	vfms.f32	s15, s12, s5
    tmp10 = tmp0 + tmp2;	/* phase 3 */
 8010428:	eea6 3a22 	vfma.f32	s6, s12, s5
    tmp13 = tmp1 + tmp3;	/* phases 5-3 */
 801042c:	eeb0 6a47 	vmov.f32	s12, s14
    tmp12 = (tmp1 - tmp3) * ((FAST_FLOAT) 1.414213562) - tmp13; /* 2*c4 */
 8010430:	ee96 7aa5 	vfnms.f32	s14, s13, s11
    tmp13 = tmp1 + tmp3;	/* phases 5-3 */
 8010434:	eea6 6aa5 	vfma.f32	s12, s13, s11
    tmp12 = (tmp1 - tmp3) * ((FAST_FLOAT) 1.414213562) - tmp13; /* 2*c4 */
 8010438:	eef0 6a46 	vmov.f32	s13, s12
    tmp0 = tmp10 + tmp13;	/* phase 2 */
 801043c:	ee33 2a06 	vadd.f32	s4, s6, s12
    tmp3 = tmp10 - tmp13;
 8010440:	ee33 3a46 	vsub.f32	s6, s6, s12
    tmp12 = (tmp1 - tmp3) * ((FAST_FLOAT) 1.414213562) - tmp13; /* 2*c4 */
 8010444:	eed7 6a05 	vfnms.f32	s13, s14, s10
    tmp6 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8010448:	ed9c 7a27 	vldr	s14, [ip, #156]	; 0x9c
    tmp1 = tmp11 + tmp12;
 801044c:	ee77 2aa6 	vadd.f32	s5, s15, s13
    tmp2 = tmp11 - tmp12;
 8010450:	ee77 6ae6 	vsub.f32	s13, s15, s13
    tmp4 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010454:	ee07 ea90 	vmov	s15, lr
 8010458:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
    tmp5 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801045c:	ee07 8a90 	vmov	s15, r8
 8010460:	eef8 5ae7 	vcvt.f32.s32	s11, s15
    tmp6 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8010464:	ee07 1a90 	vmov	s15, r1
 8010468:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801046c:	ee67 7a87 	vmul.f32	s15, s15, s14
    tmp7 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8010470:	ee07 0a10 	vmov	s14, r0
 8010474:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010478:	ee27 7a01 	vmul.f32	s14, s14, s2
    z13 = tmp6 + tmp5;		/* phase 6 */
 801047c:	eeb0 1a67 	vmov.f32	s2, s15
    z10 = tmp6 - tmp5;
 8010480:	eee5 7ae0 	vfms.f32	s15, s11, s1
    z13 = tmp6 + tmp5;		/* phase 6 */
 8010484:	eea5 1aa0 	vfma.f32	s2, s11, s1
    z11 = tmp4 + tmp7;
 8010488:	eef0 5a47 	vmov.f32	s11, s14
    z12 = tmp4 - tmp7;
 801048c:	ee96 7a21 	vfnms.f32	s14, s12, s3
    z11 = tmp4 + tmp7;
 8010490:	eee6 5a21 	vfma.f32	s11, s12, s3
    z5 = (z10 + z12) * ((FAST_FLOAT) 1.847759065); /* 2*c2 */
 8010494:	ee37 6a87 	vadd.f32	s12, s15, s14
    tmp12 = z5 - z10 * ((FAST_FLOAT) 2.613125930); /* 2*(c2+c6) */
 8010498:	ee63 7ae7 	vnmul.f32	s15, s7, s15
    tmp7 = z11 + z13;		/* phase 5 */
 801049c:	ee71 1a25 	vadd.f32	s3, s2, s11
    tmp10 = z5 - z12 * ((FAST_FLOAT) 1.082392200); /* 2*(c2-c6) */
 80104a0:	ee24 7a47 	vnmul.f32	s14, s8, s14
    tmp12 = z5 - z10 * ((FAST_FLOAT) 2.613125930); /* 2*(c2+c6) */
 80104a4:	eee6 7a24 	vfma.f32	s15, s12, s9
    tmp11 = (z11 - z13) * ((FAST_FLOAT) 1.414213562); /* 2*c4 */
 80104a8:	ee75 5ac1 	vsub.f32	s11, s11, s2
    tmp10 = z5 - z12 * ((FAST_FLOAT) 1.082392200); /* 2*(c2-c6) */
 80104ac:	eea6 7a24 	vfma.f32	s14, s12, s9
    tmp6 = tmp12 - tmp7;	/* phase 2 */
 80104b0:	ee77 7ae1 	vsub.f32	s15, s15, s3
    tmp5 = tmp11 - tmp6;
 80104b4:	eeb0 6a67 	vmov.f32	s12, s15
 80104b8:	ee95 6a85 	vfnms.f32	s12, s11, s10
    wsptr[DCTSIZE*0] = tmp0 + tmp7;
 80104bc:	ee72 5a21 	vadd.f32	s11, s4, s3
    wsptr[DCTSIZE*7] = tmp0 - tmp7;
 80104c0:	ee32 2a61 	vsub.f32	s4, s4, s3
    wsptr[DCTSIZE*0] = tmp0 + tmp7;
 80104c4:	ed44 5a01 	vstr	s11, [r4, #-4]
    wsptr[DCTSIZE*1] = tmp1 + tmp6;
 80104c8:	ee72 5aa7 	vadd.f32	s11, s5, s15
    wsptr[DCTSIZE*6] = tmp1 - tmp6;
 80104cc:	ee72 2ae7 	vsub.f32	s5, s5, s15
    wsptr[DCTSIZE*7] = tmp0 - tmp7;
 80104d0:	ed84 2a37 	vstr	s4, [r4, #220]	; 0xdc
    wsptr[DCTSIZE*2] = tmp2 + tmp5;
 80104d4:	ee76 7a86 	vadd.f32	s15, s13, s12
    tmp4 = tmp10 - tmp5;
 80104d8:	ee37 7a46 	vsub.f32	s14, s14, s12
    wsptr[DCTSIZE*1] = tmp1 + tmp6;
 80104dc:	edc4 5a07 	vstr	s11, [r4, #28]
    wsptr[DCTSIZE*5] = tmp2 - tmp5;
 80104e0:	ee76 6ac6 	vsub.f32	s13, s13, s12
    wsptr[DCTSIZE*6] = tmp1 - tmp6;
 80104e4:	edc4 2a2f 	vstr	s5, [r4, #188]	; 0xbc
    wsptr[DCTSIZE*2] = tmp2 + tmp5;
 80104e8:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
    wsptr[DCTSIZE*3] = tmp3 + tmp4;
 80104ec:	ee73 7a07 	vadd.f32	s15, s6, s14
    wsptr[DCTSIZE*4] = tmp3 - tmp4;
 80104f0:	ee33 7a47 	vsub.f32	s14, s6, s14
    wsptr[DCTSIZE*5] = tmp2 - tmp5;
 80104f4:	edc4 6a27 	vstr	s13, [r4, #156]	; 0x9c
    wsptr[DCTSIZE*3] = tmp3 + tmp4;
 80104f8:	edc4 7a17 	vstr	s15, [r4, #92]	; 0x5c
    wsptr[DCTSIZE*4] = tmp3 - tmp4;
 80104fc:	ed84 7a1f 	vstr	s14, [r4, #124]	; 0x7c
    wsptr++;
 8010500:	e6c4      	b.n	801028c <jpeg_idct_float+0x94>
 8010502:	bf00      	nop
 8010504:	3fb504f3 	.word	0x3fb504f3
 8010508:	3f8a8bd4 	.word	0x3f8a8bd4
 801050c:	3fec835e 	.word	0x3fec835e
 8010510:	40273d75 	.word	0x40273d75
 8010514:	43008000 	.word	0x43008000

08010518 <jpeg_idct_ifast>:

GLOBAL(void)
jpeg_idct_ifast (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8010518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801051c:	b0c5      	sub	sp, #276	; 0x114
  ISHIFT_TEMPS			/* for IDESCALE */

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (IFAST_MULT_TYPE *) compptr->dct_table;
 801051e:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 8010520:	3a02      	subs	r2, #2
{
 8010522:	9302      	str	r3, [sp, #8]
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8010524:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8010528:	f103 0980 	add.w	r9, r3, #128	; 0x80
  wsptr = workspace;
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 801052c:	f105 0320 	add.w	r3, r5, #32
 8010530:	9303      	str	r3, [sp, #12]
  wsptr = workspace;
 8010532:	ab04      	add	r3, sp, #16
     * column DCT calculations can be simplified this way.
     */
    
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 8010534:	f9b2 1052 	ldrsh.w	r1, [r2, #82]	; 0x52
      wsptr[DCTSIZE*6] = dcval;
      wsptr[DCTSIZE*7] = dcval;
      
      inptr++;			/* advance pointers to next column */
      quantptr++;
      wsptr++;
 8010538:	3304      	adds	r3, #4
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 801053a:	f9b2 6012 	ldrsh.w	r6, [r2, #18]
 801053e:	f9b2 c022 	ldrsh.w	ip, [r2, #34]	; 0x22
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 8010542:	f9b2 7032 	ldrsh.w	r7, [r2, #50]	; 0x32
 8010546:	f9b2 a042 	ldrsh.w	sl, [r2, #66]	; 0x42
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 801054a:	f9b2 e062 	ldrsh.w	lr, [r2, #98]	; 0x62
	inptr[DCTSIZE*7] == 0) {
 801054e:	f9b2 8072 	ldrsh.w	r8, [r2, #114]	; 0x72
      int dcval = (int) DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010552:	f855 0b04 	ldr.w	r0, [r5], #4
 8010556:	f932 4f02 	ldrsh.w	r4, [r2, #2]!
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 801055a:	9101      	str	r1, [sp, #4]
      int dcval = (int) DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801055c:	4344      	muls	r4, r0
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 801055e:	ea46 000c 	orr.w	r0, r6, ip
 8010562:	4338      	orrs	r0, r7
 8010564:	ea4a 0000 	orr.w	r0, sl, r0
 8010568:	4308      	orrs	r0, r1
 801056a:	ea4e 0000 	orr.w	r0, lr, r0
 801056e:	ea58 0100 	orrs.w	r1, r8, r0
 8010572:	d146      	bne.n	8010602 <jpeg_idct_ifast+0xea>
      wsptr[DCTSIZE*0] = dcval;
 8010574:	f843 4c04 	str.w	r4, [r3, #-4]
      wsptr[DCTSIZE*1] = dcval;
 8010578:	61dc      	str	r4, [r3, #28]
      wsptr[DCTSIZE*2] = dcval;
 801057a:	63dc      	str	r4, [r3, #60]	; 0x3c
      wsptr[DCTSIZE*3] = dcval;
 801057c:	65dc      	str	r4, [r3, #92]	; 0x5c
      wsptr[DCTSIZE*4] = dcval;
 801057e:	67dc      	str	r4, [r3, #124]	; 0x7c
      wsptr[DCTSIZE*5] = dcval;
 8010580:	f8c3 409c 	str.w	r4, [r3, #156]	; 0x9c
      wsptr[DCTSIZE*6] = dcval;
 8010584:	f8c3 40bc 	str.w	r4, [r3, #188]	; 0xbc
      wsptr[DCTSIZE*7] = dcval;
 8010588:	f8c3 40dc 	str.w	r4, [r3, #220]	; 0xdc
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 801058c:	9903      	ldr	r1, [sp, #12]
 801058e:	42a9      	cmp	r1, r5
 8010590:	d1d0      	bne.n	8010534 <jpeg_idct_ifast+0x1c>
 8010592:	9b02      	ldr	r3, [sp, #8]
 8010594:	f1a3 0b04 	sub.w	fp, r3, #4
 8010598:	331c      	adds	r3, #28
 801059a:	9302      	str	r3, [sp, #8]
  
  /* Pass 2: process rows from work array, store into output array. */
  /* Note that we must descale the results by a factor of 8 == 2**3, */
  /* and also undo the PASS1_BITS scaling. */

  wsptr = workspace;
 801059c:	ab04      	add	r3, sp, #16
 801059e:	9300      	str	r3, [sp, #0]
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
    outptr = output_buf[ctr] + output_col;
 80105a0:	9b4e      	ldr	r3, [sp, #312]	; 0x138
 80105a2:	f85b af04 	ldr.w	sl, [fp, #4]!
     * test takes more time than it's worth.  In that case this section
     * may be commented out.
     */
    
#ifndef NO_ZERO_ROW_TEST
    if (wsptr[1] == 0 && wsptr[2] == 0 && wsptr[3] == 0 && wsptr[4] == 0 &&
 80105a6:	9a00      	ldr	r2, [sp, #0]
    outptr = output_buf[ctr] + output_col;
 80105a8:	eb0a 0003 	add.w	r0, sl, r3
    if (wsptr[1] == 0 && wsptr[2] == 0 && wsptr[3] == 0 && wsptr[4] == 0 &&
 80105ac:	9b00      	ldr	r3, [sp, #0]
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
      /* AC terms all zero */
      JSAMPLE dcval = range_limit[IDESCALE(wsptr[0], PASS1_BITS+3)
 80105ae:	9d00      	ldr	r5, [sp, #0]
    if (wsptr[1] == 0 && wsptr[2] == 0 && wsptr[3] == 0 && wsptr[4] == 0 &&
 80105b0:	e9d3 e101 	ldrd	lr, r1, [r3, #4]
 80105b4:	68db      	ldr	r3, [r3, #12]
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 80105b6:	ea4e 0701 	orr.w	r7, lr, r1
      JSAMPLE dcval = range_limit[IDESCALE(wsptr[0], PASS1_BITS+3)
 80105ba:	f855 6b20 	ldr.w	r6, [r5], #32
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 80105be:	e9d2 8404 	ldrd	r8, r4, [r2, #16]
 80105c2:	431f      	orrs	r7, r3
      JSAMPLE dcval = range_limit[IDESCALE(wsptr[0], PASS1_BITS+3)
 80105c4:	9500      	str	r5, [sp, #0]
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 80105c6:	ea47 0708 	orr.w	r7, r7, r8
 80105ca:	e9d2 c206 	ldrd	ip, r2, [r2, #24]
 80105ce:	4327      	orrs	r7, r4
 80105d0:	ea47 070c 	orr.w	r7, r7, ip
 80105d4:	ea57 0502 	orrs.w	r5, r7, r2
 80105d8:	d17e      	bne.n	80106d8 <jpeg_idct_ifast+0x1c0>
				  & RANGE_MASK];
 80105da:	f3c6 1849 	ubfx	r8, r6, #5, #10
      
      outptr[0] = dcval;
 80105de:	9a4e      	ldr	r2, [sp, #312]	; 0x138
      JSAMPLE dcval = range_limit[IDESCALE(wsptr[0], PASS1_BITS+3)
 80105e0:	f819 3008 	ldrb.w	r3, [r9, r8]
      outptr[0] = dcval;
 80105e4:	f80a 3002 	strb.w	r3, [sl, r2]
      outptr[1] = dcval;
 80105e8:	7043      	strb	r3, [r0, #1]
      outptr[2] = dcval;
 80105ea:	7083      	strb	r3, [r0, #2]
      outptr[3] = dcval;
 80105ec:	70c3      	strb	r3, [r0, #3]
      outptr[4] = dcval;
 80105ee:	7103      	strb	r3, [r0, #4]
      outptr[5] = dcval;
 80105f0:	7143      	strb	r3, [r0, #5]
      outptr[6] = dcval;
 80105f2:	7183      	strb	r3, [r0, #6]
      outptr[7] = dcval;
 80105f4:	71c3      	strb	r3, [r0, #7]
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
 80105f6:	9b02      	ldr	r3, [sp, #8]
 80105f8:	455b      	cmp	r3, fp
 80105fa:	d1d1      	bne.n	80105a0 <jpeg_idct_ifast+0x88>
    outptr[3] = range_limit[IDESCALE(tmp3 - tmp4, PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += DCTSIZE;		/* advance pointer to next row */
  }
}
 80105fc:	b045      	add	sp, #276	; 0x114
 80105fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010602:	6be8      	ldr	r0, [r5, #60]	; 0x3c
    tmp12 = MULTIPLY(tmp1 - tmp3, FIX_1_414213562) - tmp13; /* 2*c4 */
 8010604:	f44f 71b5 	mov.w	r1, #362	; 0x16a
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010608:	fb00 fc0c 	mul.w	ip, r0, ip
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801060c:	6fe8      	ldr	r0, [r5, #124]	; 0x7c
 801060e:	fb00 fa0a 	mul.w	sl, r0, sl
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8010612:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
 8010616:	fb00 f00e 	mul.w	r0, r0, lr
    tmp10 = tmp0 + tmp2;	/* phase 3 */
 801061a:	eb0a 0b04 	add.w	fp, sl, r4
    tmp11 = tmp0 - tmp2;
 801061e:	eba4 040a 	sub.w	r4, r4, sl
    tmp13 = tmp1 + tmp3;	/* phases 5-3 */
 8010622:	eb0c 0a00 	add.w	sl, ip, r0
    tmp12 = MULTIPLY(tmp1 - tmp3, FIX_1_414213562) - tmp13; /* 2*c4 */
 8010626:	ebac 0000 	sub.w	r0, ip, r0
 801062a:	4348      	muls	r0, r1
    tmp0 = tmp10 + tmp13;	/* phase 2 */
 801062c:	eb0b 0e0a 	add.w	lr, fp, sl
    tmp12 = MULTIPLY(tmp1 - tmp3, FIX_1_414213562) - tmp13; /* 2*c4 */
 8010630:	ebca 2020 	rsb	r0, sl, r0, asr #8
    tmp3 = tmp10 - tmp13;
 8010634:	ebab 0a0a 	sub.w	sl, fp, sl
    tmp1 = tmp11 + tmp12;
 8010638:	eb04 0c00 	add.w	ip, r4, r0
    tmp2 = tmp11 - tmp12;
 801063c:	1a21      	subs	r1, r4, r0
    tmp4 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801063e:	69e8      	ldr	r0, [r5, #28]
    z5 = MULTIPLY(z10 + z12, FIX_1_847759065); /* 2*c2 */
 8010640:	f240 14d9 	movw	r4, #473	; 0x1d9
    tmp2 = tmp11 - tmp12;
 8010644:	9100      	str	r1, [sp, #0]
    tmp4 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010646:	4346      	muls	r6, r0
    tmp5 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8010648:	6de8      	ldr	r0, [r5, #92]	; 0x5c
    tmp6 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801064a:	9901      	ldr	r1, [sp, #4]
    tmp5 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801064c:	4347      	muls	r7, r0
    tmp6 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801064e:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
 8010652:	4341      	muls	r1, r0
    tmp7 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8010654:	f8d5 00dc 	ldr.w	r0, [r5, #220]	; 0xdc
 8010658:	fb00 f008 	mul.w	r0, r0, r8
    z13 = tmp6 + tmp5;		/* phase 6 */
 801065c:	eb07 0b01 	add.w	fp, r7, r1
    z10 = tmp6 - tmp5;
 8010660:	1bc9      	subs	r1, r1, r7
    z11 = tmp4 + tmp7;
 8010662:	eb06 0800 	add.w	r8, r6, r0
    z12 = tmp4 - tmp7;
 8010666:	1a36      	subs	r6, r6, r0
    z5 = MULTIPLY(z10 + z12, FIX_1_847759065); /* 2*c2 */
 8010668:	1988      	adds	r0, r1, r6
    tmp7 = z11 + z13;		/* phase 5 */
 801066a:	eb0b 0708 	add.w	r7, fp, r8
    tmp11 = MULTIPLY(z11 - z13, FIX_1_414213562); /* 2*c4 */
 801066e:	eba8 0b0b 	sub.w	fp, r8, fp
    z5 = MULTIPLY(z10 + z12, FIX_1_847759065); /* 2*c2 */
 8010672:	4360      	muls	r0, r4
    tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 8010674:	f46f 7427 	mvn.w	r4, #668	; 0x29c
 8010678:	4361      	muls	r1, r4
    tmp11 = MULTIPLY(z11 - z13, FIX_1_414213562); /* 2*c4 */
 801067a:	f44f 74b5 	mov.w	r4, #362	; 0x16a
 801067e:	fb04 fb0b 	mul.w	fp, r4, fp
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 8010682:	f240 1415 	movw	r4, #277	; 0x115
    tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 8010686:	1209      	asrs	r1, r1, #8
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 8010688:	4366      	muls	r6, r4
    tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 801068a:	eb01 2120 	add.w	r1, r1, r0, asr #8
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 801068e:	1236      	asrs	r6, r6, #8
    tmp6 = tmp12 - tmp7;	/* phase 2 */
 8010690:	1bc9      	subs	r1, r1, r7
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 8010692:	eba6 2020 	sub.w	r0, r6, r0, asr #8
    wsptr[DCTSIZE*0] = (int) (tmp0 + tmp7);
 8010696:	eb0e 0607 	add.w	r6, lr, r7
    tmp5 = tmp11 - tmp6;
 801069a:	ebc1 2b2b 	rsb	fp, r1, fp, asr #8
    wsptr[DCTSIZE*7] = (int) (tmp0 - tmp7);
 801069e:	ebae 0707 	sub.w	r7, lr, r7
    wsptr[DCTSIZE*0] = (int) (tmp0 + tmp7);
 80106a2:	f843 6c04 	str.w	r6, [r3, #-4]
    wsptr[DCTSIZE*1] = (int) (tmp1 + tmp6);
 80106a6:	eb0c 0601 	add.w	r6, ip, r1
    wsptr[DCTSIZE*6] = (int) (tmp1 - tmp6);
 80106aa:	ebac 0101 	sub.w	r1, ip, r1
    tmp4 = tmp10 + tmp5;
 80106ae:	4458      	add	r0, fp
    wsptr[DCTSIZE*7] = (int) (tmp0 - tmp7);
 80106b0:	f8c3 70dc 	str.w	r7, [r3, #220]	; 0xdc
    wsptr[DCTSIZE*6] = (int) (tmp1 - tmp6);
 80106b4:	f8c3 10bc 	str.w	r1, [r3, #188]	; 0xbc
    wsptr[DCTSIZE*2] = (int) (tmp2 + tmp5);
 80106b8:	9900      	ldr	r1, [sp, #0]
    wsptr[DCTSIZE*1] = (int) (tmp1 + tmp6);
 80106ba:	61de      	str	r6, [r3, #28]
    wsptr[DCTSIZE*2] = (int) (tmp2 + tmp5);
 80106bc:	4459      	add	r1, fp
 80106be:	63d9      	str	r1, [r3, #60]	; 0x3c
    wsptr[DCTSIZE*5] = (int) (tmp2 - tmp5);
 80106c0:	9900      	ldr	r1, [sp, #0]
 80106c2:	eba1 040b 	sub.w	r4, r1, fp
    wsptr[DCTSIZE*4] = (int) (tmp3 + tmp4);
 80106c6:	eb0a 0100 	add.w	r1, sl, r0
    wsptr[DCTSIZE*3] = (int) (tmp3 - tmp4);
 80106ca:	ebaa 0000 	sub.w	r0, sl, r0
    wsptr[DCTSIZE*5] = (int) (tmp2 - tmp5);
 80106ce:	f8c3 409c 	str.w	r4, [r3, #156]	; 0x9c
    wsptr[DCTSIZE*4] = (int) (tmp3 + tmp4);
 80106d2:	67d9      	str	r1, [r3, #124]	; 0x7c
    wsptr[DCTSIZE*3] = (int) (tmp3 - tmp4);
 80106d4:	65d8      	str	r0, [r3, #92]	; 0x5c
    wsptr++;
 80106d6:	e759      	b.n	801058c <jpeg_idct_ifast+0x74>
    tmp10 = ((DCTELEM) wsptr[0] + (DCTELEM) wsptr[4]);
 80106d8:	eb08 0706 	add.w	r7, r8, r6
    tmp12 = MULTIPLY((DCTELEM) wsptr[2] - (DCTELEM) wsptr[6], FIX_1_414213562)
 80106dc:	f44f 75b5 	mov.w	r5, #362	; 0x16a
    tmp11 = ((DCTELEM) wsptr[0] - (DCTELEM) wsptr[4]);
 80106e0:	eba6 0808 	sub.w	r8, r6, r8
    tmp13 = ((DCTELEM) wsptr[2] + (DCTELEM) wsptr[6]);
 80106e4:	eb01 060c 	add.w	r6, r1, ip
    tmp12 = MULTIPLY((DCTELEM) wsptr[2] - (DCTELEM) wsptr[6], FIX_1_414213562)
 80106e8:	eba1 010c 	sub.w	r1, r1, ip
    tmp0 = tmp10 + tmp13;
 80106ec:	eb07 0c06 	add.w	ip, r7, r6
    tmp12 = MULTIPLY((DCTELEM) wsptr[2] - (DCTELEM) wsptr[6], FIX_1_414213562)
 80106f0:	4369      	muls	r1, r5
    z13 = (DCTELEM) wsptr[5] + (DCTELEM) wsptr[3];
 80106f2:	191d      	adds	r5, r3, r4
    z10 = (DCTELEM) wsptr[5] - (DCTELEM) wsptr[3];
 80106f4:	1ae3      	subs	r3, r4, r3
    z11 = (DCTELEM) wsptr[1] + (DCTELEM) wsptr[7];
 80106f6:	eb0e 0402 	add.w	r4, lr, r2
    tmp12 = MULTIPLY((DCTELEM) wsptr[2] - (DCTELEM) wsptr[6], FIX_1_414213562)
 80106fa:	ebc6 2121 	rsb	r1, r6, r1, asr #8
    z12 = (DCTELEM) wsptr[1] - (DCTELEM) wsptr[7];
 80106fe:	ebae 0202 	sub.w	r2, lr, r2
    tmp3 = tmp10 - tmp13;
 8010702:	1bbe      	subs	r6, r7, r6
    z13 = (DCTELEM) wsptr[5] + (DCTELEM) wsptr[3];
 8010704:	9501      	str	r5, [sp, #4]
    tmp1 = tmp11 + tmp12;
 8010706:	eb08 0701 	add.w	r7, r8, r1
    z5 = MULTIPLY(z10 + z12, FIX_1_847759065); /* 2*c2 */
 801070a:	eb03 0e02 	add.w	lr, r3, r2
    tmp2 = tmp11 - tmp12;
 801070e:	eba8 0101 	sub.w	r1, r8, r1
    tmp7 = z11 + z13;		/* phase 5 */
 8010712:	eb05 0804 	add.w	r8, r5, r4
    z5 = MULTIPLY(z10 + z12, FIX_1_847759065); /* 2*c2 */
 8010716:	f240 15d9 	movw	r5, #473	; 0x1d9
 801071a:	fb05 fe0e 	mul.w	lr, r5, lr
    tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 801071e:	f46f 7527 	mvn.w	r5, #668	; 0x29c
 8010722:	436b      	muls	r3, r5
    tmp11 = MULTIPLY(z11 - z13, FIX_1_414213562); /* 2*c4 */
 8010724:	9d01      	ldr	r5, [sp, #4]
 8010726:	1b64      	subs	r4, r4, r5
 8010728:	f44f 75b5 	mov.w	r5, #362	; 0x16a
    tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 801072c:	121b      	asrs	r3, r3, #8
    tmp11 = MULTIPLY(z11 - z13, FIX_1_414213562); /* 2*c4 */
 801072e:	436c      	muls	r4, r5
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 8010730:	f240 1515 	movw	r5, #277	; 0x115
    tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 8010734:	eb03 232e 	add.w	r3, r3, lr, asr #8
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 8010738:	436a      	muls	r2, r5
    outptr[0] = range_limit[IDESCALE(tmp0 + tmp7, PASS1_BITS+3)
 801073a:	9d4e      	ldr	r5, [sp, #312]	; 0x138
    tmp6 = tmp12 - tmp7;	/* phase 2 */
 801073c:	eba3 0308 	sub.w	r3, r3, r8
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 8010740:	1212      	asrs	r2, r2, #8
    tmp5 = tmp11 - tmp6;
 8010742:	ebc3 2424 	rsb	r4, r3, r4, asr #8
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 8010746:	eba2 2e2e 	sub.w	lr, r2, lr, asr #8
    outptr[0] = range_limit[IDESCALE(tmp0 + tmp7, PASS1_BITS+3)
 801074a:	eb0c 0208 	add.w	r2, ip, r8
    outptr[7] = range_limit[IDESCALE(tmp0 - tmp7, PASS1_BITS+3)
 801074e:	ebac 0c08 	sub.w	ip, ip, r8
			    & RANGE_MASK];
 8010752:	f3c2 1249 	ubfx	r2, r2, #5, #10
    tmp4 = tmp10 + tmp5;
 8010756:	44a6      	add	lr, r4
			    & RANGE_MASK];
 8010758:	f3cc 1c49 	ubfx	ip, ip, #5, #10
    outptr[0] = range_limit[IDESCALE(tmp0 + tmp7, PASS1_BITS+3)
 801075c:	f819 2002 	ldrb.w	r2, [r9, r2]
 8010760:	f80a 2005 	strb.w	r2, [sl, r5]
    outptr[7] = range_limit[IDESCALE(tmp0 - tmp7, PASS1_BITS+3)
 8010764:	f819 200c 	ldrb.w	r2, [r9, ip]
 8010768:	71c2      	strb	r2, [r0, #7]
    outptr[1] = range_limit[IDESCALE(tmp1 + tmp6, PASS1_BITS+3)
 801076a:	18fa      	adds	r2, r7, r3
    outptr[6] = range_limit[IDESCALE(tmp1 - tmp6, PASS1_BITS+3)
 801076c:	1aff      	subs	r7, r7, r3
			    & RANGE_MASK];
 801076e:	f3c2 1249 	ubfx	r2, r2, #5, #10
			    & RANGE_MASK];
 8010772:	f3c7 1749 	ubfx	r7, r7, #5, #10
    outptr[1] = range_limit[IDESCALE(tmp1 + tmp6, PASS1_BITS+3)
 8010776:	f819 2002 	ldrb.w	r2, [r9, r2]
 801077a:	7042      	strb	r2, [r0, #1]
    outptr[6] = range_limit[IDESCALE(tmp1 - tmp6, PASS1_BITS+3)
 801077c:	f819 3007 	ldrb.w	r3, [r9, r7]
 8010780:	7183      	strb	r3, [r0, #6]
    outptr[2] = range_limit[IDESCALE(tmp2 + tmp5, PASS1_BITS+3)
 8010782:	190b      	adds	r3, r1, r4
    outptr[5] = range_limit[IDESCALE(tmp2 - tmp5, PASS1_BITS+3)
 8010784:	1b09      	subs	r1, r1, r4
			    & RANGE_MASK];
 8010786:	f3c3 1349 	ubfx	r3, r3, #5, #10
			    & RANGE_MASK];
 801078a:	f3c1 1149 	ubfx	r1, r1, #5, #10
    outptr[2] = range_limit[IDESCALE(tmp2 + tmp5, PASS1_BITS+3)
 801078e:	f819 3003 	ldrb.w	r3, [r9, r3]
 8010792:	7083      	strb	r3, [r0, #2]
    outptr[5] = range_limit[IDESCALE(tmp2 - tmp5, PASS1_BITS+3)
 8010794:	f819 3001 	ldrb.w	r3, [r9, r1]
 8010798:	7143      	strb	r3, [r0, #5]
    outptr[4] = range_limit[IDESCALE(tmp3 + tmp4, PASS1_BITS+3)
 801079a:	eb06 030e 	add.w	r3, r6, lr
    outptr[3] = range_limit[IDESCALE(tmp3 - tmp4, PASS1_BITS+3)
 801079e:	eba6 0e0e 	sub.w	lr, r6, lr
			    & RANGE_MASK];
 80107a2:	f3c3 1349 	ubfx	r3, r3, #5, #10
			    & RANGE_MASK];
 80107a6:	f3ce 1e49 	ubfx	lr, lr, #5, #10
    outptr[4] = range_limit[IDESCALE(tmp3 + tmp4, PASS1_BITS+3)
 80107aa:	f819 3003 	ldrb.w	r3, [r9, r3]
 80107ae:	7103      	strb	r3, [r0, #4]
    outptr[3] = range_limit[IDESCALE(tmp3 - tmp4, PASS1_BITS+3)
 80107b0:	f819 300e 	ldrb.w	r3, [r9, lr]
 80107b4:	70c3      	strb	r3, [r0, #3]
    wsptr += DCTSIZE;		/* advance pointer to next row */
 80107b6:	e71e      	b.n	80105f6 <jpeg_idct_ifast+0xde>

080107b8 <jpeg_idct_islow>:

GLOBAL(void)
jpeg_idct_islow (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80107b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107bc:	b0c7      	sub	sp, #284	; 0x11c
  /* Pass 1: process columns from input, store into work array. */
  /* Note results are scaled up by sqrt(8) compared to a true IDCT; */
  /* furthermore, we scale the results by 2**PASS1_BITS. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 80107be:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 80107c0:	3a02      	subs	r2, #2
{
 80107c2:	9304      	str	r3, [sp, #16]
  wsptr = workspace;
 80107c4:	a906      	add	r1, sp, #24
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80107c6:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 80107ca:	3380      	adds	r3, #128	; 0x80
 80107cc:	9301      	str	r3, [sp, #4]
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 80107ce:	f105 0320 	add.w	r3, r5, #32
 80107d2:	9305      	str	r3, [sp, #20]
     * DC coefficient (with scale factor as needed).
     * With typical images and quantization tables, half or more of the
     * column DCT calculations can be simplified this way.
     */

    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 80107d4:	f9b2 a012 	ldrsh.w	sl, [r2, #18]
      wsptr[DCTSIZE*6] = dcval;
      wsptr[DCTSIZE*7] = dcval;

      inptr++;			/* advance pointers to next column */
      quantptr++;
      wsptr++;
 80107d8:	3104      	adds	r1, #4
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 80107da:	f9b2 b022 	ldrsh.w	fp, [r2, #34]	; 0x22
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 80107de:	f9b2 e032 	ldrsh.w	lr, [r2, #50]	; 0x32
 80107e2:	f9b2 7042 	ldrsh.w	r7, [r2, #66]	; 0x42
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 80107e6:	f9b2 8052 	ldrsh.w	r8, [r2, #82]	; 0x52
 80107ea:	f9b2 6062 	ldrsh.w	r6, [r2, #98]	; 0x62
	inptr[DCTSIZE*7] == 0) {
 80107ee:	f9b2 9072 	ldrsh.w	r9, [r2, #114]	; 0x72
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 80107f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80107f6:	f932 4f02 	ldrsh.w	r4, [r2, #2]!
 80107fa:	435c      	muls	r4, r3
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 80107fc:	ea4a 030b 	orr.w	r3, sl, fp
 8010800:	ea4e 0303 	orr.w	r3, lr, r3
 8010804:	433b      	orrs	r3, r7
 8010806:	ea48 0303 	orr.w	r3, r8, r3
 801080a:	4333      	orrs	r3, r6
 801080c:	ea59 0303 	orrs.w	r3, r9, r3
 8010810:	d145      	bne.n	801089e <jpeg_idct_islow+0xe6>
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 8010812:	00a4      	lsls	r4, r4, #2
      wsptr[DCTSIZE*0] = dcval;
 8010814:	f841 4c04 	str.w	r4, [r1, #-4]
      wsptr[DCTSIZE*1] = dcval;
 8010818:	61cc      	str	r4, [r1, #28]
      wsptr[DCTSIZE*2] = dcval;
 801081a:	63cc      	str	r4, [r1, #60]	; 0x3c
      wsptr[DCTSIZE*3] = dcval;
 801081c:	65cc      	str	r4, [r1, #92]	; 0x5c
      wsptr[DCTSIZE*4] = dcval;
 801081e:	67cc      	str	r4, [r1, #124]	; 0x7c
      wsptr[DCTSIZE*5] = dcval;
 8010820:	f8c1 409c 	str.w	r4, [r1, #156]	; 0x9c
      wsptr[DCTSIZE*6] = dcval;
 8010824:	f8c1 40bc 	str.w	r4, [r1, #188]	; 0xbc
      wsptr[DCTSIZE*7] = dcval;
 8010828:	f8c1 40dc 	str.w	r4, [r1, #220]	; 0xdc
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 801082c:	9b05      	ldr	r3, [sp, #20]
 801082e:	42ab      	cmp	r3, r5
 8010830:	d1d0      	bne.n	80107d4 <jpeg_idct_islow+0x1c>
 8010832:	9b04      	ldr	r3, [sp, #16]

  /* Pass 2: process rows from work array, store into output array. */
  /* Note that we must descale the results by a factor of 8 == 2**3, */
  /* and also undo the PASS1_BITS scaling. */

  wsptr = workspace;
 8010834:	ad06      	add	r5, sp, #24
 8010836:	f1a3 0904 	sub.w	r9, r3, #4
 801083a:	331c      	adds	r3, #28
 801083c:	9305      	str	r3, [sp, #20]
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
    outptr = output_buf[ctr] + output_col;
 801083e:	f859 3f04 	ldr.w	r3, [r9, #4]!
 8010842:	9a50      	ldr	r2, [sp, #320]	; 0x140
 8010844:	9302      	str	r3, [sp, #8]
 8010846:	4413      	add	r3, r2
     * may be commented out.
     */

#ifndef NO_ZERO_ROW_TEST
    if (wsptr[1] == 0 && wsptr[2] == 0 && wsptr[3] == 0 && wsptr[4] == 0 &&
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 8010848:	f8d5 c01c 	ldr.w	ip, [r5, #28]
    if (wsptr[1] == 0 && wsptr[2] == 0 && wsptr[3] == 0 && wsptr[4] == 0 &&
 801084c:	e9d5 a001 	ldrd	sl, r0, [r5, #4]
 8010850:	e9d5 e703 	ldrd	lr, r7, [r5, #12]
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 8010854:	ea4a 0200 	orr.w	r2, sl, r0
 8010858:	ea42 020e 	orr.w	r2, r2, lr
 801085c:	e9d5 8105 	ldrd	r8, r1, [r5, #20]
 8010860:	433a      	orrs	r2, r7
      /* AC terms all zero */
      JSAMPLE dcval = range_limit[(int) DESCALE((INT32) wsptr[0], PASS1_BITS+3)
 8010862:	f855 6b20 	ldr.w	r6, [r5], #32
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 8010866:	ea42 0208 	orr.w	r2, r2, r8
      JSAMPLE dcval = range_limit[(int) DESCALE((INT32) wsptr[0], PASS1_BITS+3)
 801086a:	3610      	adds	r6, #16
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 801086c:	430a      	orrs	r2, r1
 801086e:	ea52 020c 	orrs.w	r2, r2, ip
 8010872:	f040 8098 	bne.w	80109a6 <jpeg_idct_islow+0x1ee>
      JSAMPLE dcval = range_limit[(int) DESCALE((INT32) wsptr[0], PASS1_BITS+3)
 8010876:	9901      	ldr	r1, [sp, #4]
				  & RANGE_MASK];
 8010878:	f3c6 1249 	ubfx	r2, r6, #5, #10

      outptr[0] = dcval;
 801087c:	9850      	ldr	r0, [sp, #320]	; 0x140
      JSAMPLE dcval = range_limit[(int) DESCALE((INT32) wsptr[0], PASS1_BITS+3)
 801087e:	5c8a      	ldrb	r2, [r1, r2]
      outptr[0] = dcval;
 8010880:	9902      	ldr	r1, [sp, #8]
 8010882:	540a      	strb	r2, [r1, r0]
      outptr[1] = dcval;
 8010884:	705a      	strb	r2, [r3, #1]
      outptr[2] = dcval;
 8010886:	709a      	strb	r2, [r3, #2]
      outptr[3] = dcval;
 8010888:	70da      	strb	r2, [r3, #3]
      outptr[4] = dcval;
 801088a:	711a      	strb	r2, [r3, #4]
      outptr[5] = dcval;
 801088c:	715a      	strb	r2, [r3, #5]
      outptr[6] = dcval;
 801088e:	719a      	strb	r2, [r3, #6]
      outptr[7] = dcval;
 8010890:	71da      	strb	r2, [r3, #7]
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
 8010892:	9b05      	ldr	r3, [sp, #20]
 8010894:	454b      	cmp	r3, r9
 8010896:	d1d2      	bne.n	801083e <jpeg_idct_islow+0x86>
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += DCTSIZE;		/* advance pointer to next row */
  }
}
 8010898:	b047      	add	sp, #284	; 0x11c
 801089a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801089e:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 80108a0:	fb00 fb0b 	mul.w	fp, r0, fp
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80108a4:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
 80108a8:	4370      	muls	r0, r6
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 80108aa:	f241 1651 	movw	r6, #4433	; 0x1151
 80108ae:	eb0b 0300 	add.w	r3, fp, r0
 80108b2:	4373      	muls	r3, r6
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 80108b4:	f641 067e 	movw	r6, #6270	; 0x187e
 80108b8:	fb06 3b0b 	mla	fp, r6, fp, r3
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 80108bc:	4e7a      	ldr	r6, [pc, #488]	; (8010aa8 <jpeg_idct_islow+0x2f0>)
 80108be:	fb06 3600 	mla	r6, r6, r0, r3
    z2 <<= CONST_BITS;
 80108c2:	0363      	lsls	r3, r4, #13
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80108c4:	6fe8      	ldr	r0, [r5, #124]	; 0x7c
    z2 += ONE << (CONST_BITS-PASS1_BITS-1);
 80108c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80108ca:	4378      	muls	r0, r7
    tmp0 = z2 + z3;
 80108cc:	eb03 3440 	add.w	r4, r3, r0, lsl #13
    tmp1 = z2 - z3;
 80108d0:	eba3 3340 	sub.w	r3, r3, r0, lsl #13
    tmp13 = tmp0 - tmp2;
 80108d4:	eba4 000b 	sub.w	r0, r4, fp
    tmp10 = tmp0 + tmp2;
 80108d8:	eb0b 0c04 	add.w	ip, fp, r4
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80108dc:	69ec      	ldr	r4, [r5, #28]
    tmp11 = tmp1 + tmp3;
 80108de:	18f7      	adds	r7, r6, r3
    tmp13 = tmp0 - tmp2;
 80108e0:	9002      	str	r0, [sp, #8]
    tmp12 = tmp1 - tmp3;
 80108e2:	1b9b      	subs	r3, r3, r6
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80108e4:	f8d5 00dc 	ldr.w	r0, [r5, #220]	; 0xdc
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80108e8:	fb04 fa0a 	mul.w	sl, r4, sl
    tmp12 = tmp1 - tmp3;
 80108ec:	9303      	str	r3, [sp, #12]
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 80108ee:	f242 53a1 	movw	r3, #9633	; 0x25a1
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80108f2:	fb00 f909 	mul.w	r9, r0, r9
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80108f6:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
 80108fa:	fb00 f808 	mul.w	r8, r0, r8
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80108fe:	6de8      	ldr	r0, [r5, #92]	; 0x5c
 8010900:	fb00 fe0e 	mul.w	lr, r0, lr
    z3 = tmp1 + tmp3;
 8010904:	eb08 040a 	add.w	r4, r8, sl
    z2 = tmp0 + tmp2;
 8010908:	eb09 060e 	add.w	r6, r9, lr
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 801090c:	1930      	adds	r0, r6, r4
 801090e:	4358      	muls	r0, r3
    z2 += z1;
 8010910:	4b66      	ldr	r3, [pc, #408]	; (8010aac <jpeg_idct_islow+0x2f4>)
 8010912:	fb03 0606 	mla	r6, r3, r6, r0
    z3 += z1;
 8010916:	4b66      	ldr	r3, [pc, #408]	; (8010ab0 <jpeg_idct_islow+0x2f8>)
 8010918:	fb03 0004 	mla	r0, r3, r4, r0
    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 801091c:	eb09 040a 	add.w	r4, r9, sl
 8010920:	4b64      	ldr	r3, [pc, #400]	; (8010ab4 <jpeg_idct_islow+0x2fc>)
 8010922:	435c      	muls	r4, r3
    tmp0 += z1 + z2;
 8010924:	f640 138e 	movw	r3, #2446	; 0x98e
 8010928:	eb06 0b04 	add.w	fp, r6, r4
    tmp3 += z1 + z3;
 801092c:	4404      	add	r4, r0
    tmp0 += z1 + z2;
 801092e:	fb03 b909 	mla	r9, r3, r9, fp
    tmp3 += z1 + z3;
 8010932:	f243 0b0b 	movw	fp, #12299	; 0x300b
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8010936:	4b60      	ldr	r3, [pc, #384]	; (8010ab8 <jpeg_idct_islow+0x300>)
    tmp3 += z1 + z3;
 8010938:	fb0b 440a 	mla	r4, fp, sl, r4
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 801093c:	eb08 0a0e 	add.w	sl, r8, lr
    tmp1 += z1 + z3;
 8010940:	f244 1bb3 	movw	fp, #16819	; 0x41b3
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8010944:	fb03 fa0a 	mul.w	sl, r3, sl
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 8010948:	9b03      	ldr	r3, [sp, #12]
    tmp2 += z1 + z2;
 801094a:	4456      	add	r6, sl
    tmp1 += z1 + z3;
 801094c:	4450      	add	r0, sl
    tmp2 += z1 + z2;
 801094e:	f246 2a54 	movw	sl, #25172	; 0x6254
    tmp1 += z1 + z3;
 8010952:	fb0b 0008 	mla	r0, fp, r8, r0
    tmp2 += z1 + z2;
 8010956:	fb0a 6a0e 	mla	sl, sl, lr, r6
    wsptr[DCTSIZE*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 801095a:	eb0c 0604 	add.w	r6, ip, r4
    wsptr[DCTSIZE*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 801095e:	ebac 0404 	sub.w	r4, ip, r4
    wsptr[DCTSIZE*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 8010962:	12f6      	asrs	r6, r6, #11
    wsptr[DCTSIZE*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 8010964:	12e4      	asrs	r4, r4, #11
    wsptr[DCTSIZE*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 8010966:	f841 6c04 	str.w	r6, [r1, #-4]
    wsptr[DCTSIZE*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 801096a:	f8c1 40dc 	str.w	r4, [r1, #220]	; 0xdc
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 801096e:	eb07 040a 	add.w	r4, r7, sl
    wsptr[DCTSIZE*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 8010972:	eba7 0a0a 	sub.w	sl, r7, sl
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 8010976:	12e4      	asrs	r4, r4, #11
    wsptr[DCTSIZE*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 8010978:	ea4f 27ea 	mov.w	r7, sl, asr #11
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 801097c:	61cc      	str	r4, [r1, #28]
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 801097e:	181c      	adds	r4, r3, r0
    wsptr[DCTSIZE*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 8010980:	1a18      	subs	r0, r3, r0
    wsptr[DCTSIZE*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 8010982:	9b02      	ldr	r3, [sp, #8]
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 8010984:	12e4      	asrs	r4, r4, #11
    wsptr[DCTSIZE*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 8010986:	f8c1 70bc 	str.w	r7, [r1, #188]	; 0xbc
    wsptr[DCTSIZE*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 801098a:	444b      	add	r3, r9
    wsptr[DCTSIZE*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 801098c:	12c0      	asrs	r0, r0, #11
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 801098e:	63cc      	str	r4, [r1, #60]	; 0x3c
    wsptr[DCTSIZE*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 8010990:	12db      	asrs	r3, r3, #11
    wsptr[DCTSIZE*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 8010992:	f8c1 009c 	str.w	r0, [r1, #156]	; 0x9c
    wsptr[DCTSIZE*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 8010996:	65cb      	str	r3, [r1, #92]	; 0x5c
    wsptr[DCTSIZE*4] = (int) RIGHT_SHIFT(tmp13 - tmp0, CONST_BITS-PASS1_BITS);
 8010998:	9b02      	ldr	r3, [sp, #8]
 801099a:	eba3 0909 	sub.w	r9, r3, r9
 801099e:	ea4f 23e9 	mov.w	r3, r9, asr #11
 80109a2:	67cb      	str	r3, [r1, #124]	; 0x7c
    wsptr++;
 80109a4:	e742      	b.n	801082c <jpeg_idct_islow+0x74>
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 80109a6:	1842      	adds	r2, r0, r1
 80109a8:	f241 1451 	movw	r4, #4433	; 0x1151
 80109ac:	4362      	muls	r2, r4
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 80109ae:	f641 047e 	movw	r4, #6270	; 0x187e
 80109b2:	fb04 2000 	mla	r0, r4, r0, r2
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 80109b6:	4c3c      	ldr	r4, [pc, #240]	; (8010aa8 <jpeg_idct_islow+0x2f0>)
 80109b8:	fb04 2101 	mla	r1, r4, r1, r2
    tmp0 = (z2 + z3) << CONST_BITS;
 80109bc:	19bc      	adds	r4, r7, r6
    tmp1 = (z2 - z3) << CONST_BITS;
 80109be:	1bf2      	subs	r2, r6, r7
    tmp10 = tmp0 + tmp2;
 80109c0:	eb00 3744 	add.w	r7, r0, r4, lsl #13
    tmp13 = tmp0 - tmp2;
 80109c4:	ebc0 3044 	rsb	r0, r0, r4, lsl #13
    z2 = tmp0 + tmp2;
 80109c8:	eb0e 040c 	add.w	r4, lr, ip
    tmp11 = tmp1 + tmp3;
 80109cc:	eb01 3642 	add.w	r6, r1, r2, lsl #13
    tmp13 = tmp0 - tmp2;
 80109d0:	9003      	str	r0, [sp, #12]
    tmp12 = tmp1 - tmp3;
 80109d2:	ebc1 3242 	rsb	r2, r1, r2, lsl #13
    z3 = tmp1 + tmp3;
 80109d6:	eb0a 0008 	add.w	r0, sl, r8
    tmp12 = tmp1 - tmp3;
 80109da:	9204      	str	r2, [sp, #16]
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 80109dc:	f242 52a1 	movw	r2, #9633	; 0x25a1
 80109e0:	1821      	adds	r1, r4, r0
 80109e2:	4351      	muls	r1, r2
    z2 += z1;
 80109e4:	4a31      	ldr	r2, [pc, #196]	; (8010aac <jpeg_idct_islow+0x2f4>)
 80109e6:	fb02 1404 	mla	r4, r2, r4, r1
    z3 += z1;
 80109ea:	4a31      	ldr	r2, [pc, #196]	; (8010ab0 <jpeg_idct_islow+0x2f8>)
 80109ec:	fb02 1100 	mla	r1, r2, r0, r1
    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 80109f0:	eb0a 000c 	add.w	r0, sl, ip
 80109f4:	4a2f      	ldr	r2, [pc, #188]	; (8010ab4 <jpeg_idct_islow+0x2fc>)
 80109f6:	4350      	muls	r0, r2
    tmp0 += z1 + z2;
 80109f8:	f640 128e 	movw	r2, #2446	; 0x98e
 80109fc:	eb04 0b00 	add.w	fp, r4, r0
    tmp3 += z1 + z3;
 8010a00:	4408      	add	r0, r1
    tmp0 += z1 + z2;
 8010a02:	fb02 bc0c 	mla	ip, r2, ip, fp
    tmp3 += z1 + z3;
 8010a06:	f243 0b0b 	movw	fp, #12299	; 0x300b
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8010a0a:	4a2b      	ldr	r2, [pc, #172]	; (8010ab8 <jpeg_idct_islow+0x300>)
    tmp3 += z1 + z3;
 8010a0c:	fb0b 000a 	mla	r0, fp, sl, r0
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8010a10:	eb0e 0a08 	add.w	sl, lr, r8
    tmp1 += z1 + z3;
 8010a14:	f244 1bb3 	movw	fp, #16819	; 0x41b3
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8010a18:	fb02 fa0a 	mul.w	sl, r2, sl
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8010a1c:	9a01      	ldr	r2, [sp, #4]
    tmp1 += z1 + z3;
 8010a1e:	4451      	add	r1, sl
    tmp2 += z1 + z2;
 8010a20:	4454      	add	r4, sl
 8010a22:	f246 2a54 	movw	sl, #25172	; 0x6254
    tmp1 += z1 + z3;
 8010a26:	fb0b 1b08 	mla	fp, fp, r8, r1
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8010a2a:	eb07 0800 	add.w	r8, r7, r0
    tmp2 += z1 + z2;
 8010a2e:	fb0a 440e 	mla	r4, sl, lr, r4
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8010a32:	9950      	ldr	r1, [sp, #320]	; 0x140
			    & RANGE_MASK];
 8010a34:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 8010a38:	1a3f      	subs	r7, r7, r0
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 8010a3a:	eba6 0a04 	sub.w	sl, r6, r4
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8010a3e:	f812 e008 	ldrb.w	lr, [r2, r8]
			    & RANGE_MASK];
 8010a42:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8010a46:	9a02      	ldr	r2, [sp, #8]
			    & RANGE_MASK];
 8010a48:	f3ca 4a89 	ubfx	sl, sl, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8010a4c:	f802 e001 	strb.w	lr, [r2, r1]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 8010a50:	9a01      	ldr	r2, [sp, #4]
 8010a52:	5dd0      	ldrb	r0, [r2, r7]
 8010a54:	71d8      	strb	r0, [r3, #7]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 8010a56:	1930      	adds	r0, r6, r4
			    & RANGE_MASK];
 8010a58:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 8010a5c:	5c10      	ldrb	r0, [r2, r0]
 8010a5e:	7058      	strb	r0, [r3, #1]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 8010a60:	f812 000a 	ldrb.w	r0, [r2, sl]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 8010a64:	9a04      	ldr	r2, [sp, #16]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 8010a66:	7198      	strb	r0, [r3, #6]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 8010a68:	eb02 000b 	add.w	r0, r2, fp
 8010a6c:	9a01      	ldr	r2, [sp, #4]
			    & RANGE_MASK];
 8010a6e:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 8010a72:	5c10      	ldrb	r0, [r2, r0]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 8010a74:	9a04      	ldr	r2, [sp, #16]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 8010a76:	7098      	strb	r0, [r3, #2]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 8010a78:	eba2 010b 	sub.w	r1, r2, fp
 8010a7c:	9a01      	ldr	r2, [sp, #4]
			    & RANGE_MASK];
 8010a7e:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 8010a82:	5c52      	ldrb	r2, [r2, r1]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 8010a84:	9901      	ldr	r1, [sp, #4]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 8010a86:	715a      	strb	r2, [r3, #5]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 8010a88:	9a03      	ldr	r2, [sp, #12]
 8010a8a:	4462      	add	r2, ip
			    & RANGE_MASK];
 8010a8c:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 8010a90:	5c8a      	ldrb	r2, [r1, r2]
 8010a92:	70da      	strb	r2, [r3, #3]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 8010a94:	9a03      	ldr	r2, [sp, #12]
 8010a96:	eba2 0c0c 	sub.w	ip, r2, ip
			    & RANGE_MASK];
 8010a9a:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 8010a9e:	f811 200c 	ldrb.w	r2, [r1, ip]
 8010aa2:	711a      	strb	r2, [r3, #4]
    wsptr += DCTSIZE;		/* advance pointer to next row */
 8010aa4:	e6f5      	b.n	8010892 <jpeg_idct_islow+0xda>
 8010aa6:	bf00      	nop
 8010aa8:	ffffc4df 	.word	0xffffc4df
 8010aac:	ffffc13b 	.word	0xffffc13b
 8010ab0:	fffff384 	.word	0xfffff384
 8010ab4:	ffffe333 	.word	0xffffe333
 8010ab8:	ffffadfd 	.word	0xffffadfd

08010abc <jpeg_idct_7x7>:

GLOBAL(void)
jpeg_idct_7x7 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8010abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ac0:	b0b9      	sub	sp, #228	; 0xe4
 8010ac2:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 8010ac4:	1e96      	subs	r6, r2, #2
 8010ac6:	9304      	str	r3, [sp, #16]
 8010ac8:	3d04      	subs	r5, #4
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8010aca:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 8010ace:	f10d 0c1c 	add.w	ip, sp, #28
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8010ad2:	3380      	adds	r3, #128	; 0x80
 8010ad4:	9301      	str	r3, [sp, #4]
  for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 8010ad6:	f102 030c 	add.w	r3, r2, #12
 8010ada:	9305      	str	r3, [sp, #20]
    /* Even part */

    tmp13 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010adc:	f936 3f02 	ldrsh.w	r3, [r6, #2]!

    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);

    tmp10 = MULTIPLY(z2 - z3, FIX(0.881747734));     /* c4 */
 8010ae0:	f641 4137 	movw	r1, #7223	; 0x1c37
    tmp13 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010ae4:	f855 2f04 	ldr.w	r2, [r5, #4]!
  for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 8010ae8:	f10c 0c04 	add.w	ip, ip, #4
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010aec:	f9b6 4020 	ldrsh.w	r4, [r6, #32]
    tmp13 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010af0:	4353      	muls	r3, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8010af2:	f9b6 e040 	ldrsh.w	lr, [r6, #64]	; 0x40
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8010af6:	f9b6 2060 	ldrsh.w	r2, [r6, #96]	; 0x60
    tmp13 <<= CONST_BITS;
 8010afa:	035b      	lsls	r3, r3, #13
    tmp13 += ONE << (CONST_BITS-PASS1_BITS-1);
 8010afc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010b00:	9302      	str	r3, [sp, #8]
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010b02:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8010b04:	435c      	muls	r4, r3
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8010b06:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
 8010b0a:	fb03 fe0e 	mul.w	lr, r3, lr
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8010b0e:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
 8010b12:	4353      	muls	r3, r2
    tmp10 = MULTIPLY(z2 - z3, FIX(0.881747734));     /* c4 */
 8010b14:	ebae 0203 	sub.w	r2, lr, r3
    tmp12 = MULTIPLY(z1 - z2, FIX(0.314692123));     /* c6 */
    tmp11 = tmp10 + tmp12 + tmp13 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
    tmp0 = z1 + z3;
 8010b18:	eb04 0803 	add.w	r8, r4, r3
    tmp10 = MULTIPLY(z2 - z3, FIX(0.881747734));     /* c4 */
 8010b1c:	fb01 f902 	mul.w	r9, r1, r2
    tmp12 = MULTIPLY(z1 - z2, FIX(0.314692123));     /* c6 */
 8010b20:	eba4 010e 	sub.w	r1, r4, lr
 8010b24:	f640 2212 	movw	r2, #2578	; 0xa12
 8010b28:	fb02 f701 	mul.w	r7, r2, r1
    tmp11 = tmp10 + tmp12 + tmp13 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 8010b2c:	9a02      	ldr	r2, [sp, #8]
    z2 -= tmp0;
    tmp0 = MULTIPLY(tmp0, FIX(1.274162392)) + tmp13; /* c2 */
 8010b2e:	f642 01c6 	movw	r1, #10438	; 0x28c6
    tmp11 = tmp10 + tmp12 + tmp13 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 8010b32:	eb09 0007 	add.w	r0, r9, r7
 8010b36:	4410      	add	r0, r2
 8010b38:	4a87      	ldr	r2, [pc, #540]	; (8010d58 <jpeg_idct_7x7+0x29c>)
 8010b3a:	fb02 000e 	mla	r0, r2, lr, r0
    tmp0 = MULTIPLY(tmp0, FIX(1.274162392)) + tmp13; /* c2 */
 8010b3e:	9a02      	ldr	r2, [sp, #8]
    z2 -= tmp0;
 8010b40:	ebae 0e08 	sub.w	lr, lr, r8
    tmp0 = MULTIPLY(tmp0, FIX(1.274162392)) + tmp13; /* c2 */
 8010b44:	fb01 2108 	mla	r1, r1, r8, r2
    tmp10 += tmp0 - MULTIPLY(z3, FIX(0.077722536));  /* c2-c4-c6 */
 8010b48:	f46f 721f 	mvn.w	r2, #636	; 0x27c
    tmp12 += tmp0 - MULTIPLY(z1, FIX(2.470602249));  /* c2+c4+c6 */
    tmp13 += MULTIPLY(z2, FIX(1.414213562));         /* c0 */
 8010b4c:	f642 5841 	movw	r8, #11585	; 0x2d41
    tmp10 += tmp0 - MULTIPLY(z3, FIX(0.077722536));  /* c2-c4-c6 */
 8010b50:	fb02 1203 	mla	r2, r2, r3, r1
 8010b54:	eb02 0309 	add.w	r3, r2, r9

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8010b58:	f9b6 9050 	ldrsh.w	r9, [r6, #80]	; 0x50

    tmp1 = MULTIPLY(z1 + z2, FIX(0.935414347));      /* (c3+c1-c5)/2 */
 8010b5c:	f641 52ef 	movw	r2, #7663	; 0x1def
    tmp10 += tmp0 - MULTIPLY(z3, FIX(0.077722536));  /* c2-c4-c6 */
 8010b60:	9303      	str	r3, [sp, #12]
    tmp12 += tmp0 - MULTIPLY(z1, FIX(2.470602249));  /* c2+c4+c6 */
 8010b62:	4b7e      	ldr	r3, [pc, #504]	; (8010d5c <jpeg_idct_7x7+0x2a0>)
 8010b64:	fb03 1104 	mla	r1, r3, r4, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010b68:	f9b6 4010 	ldrsh.w	r4, [r6, #16]
 8010b6c:	6a2b      	ldr	r3, [r5, #32]
    tmp12 += tmp0 - MULTIPLY(z1, FIX(2.470602249));  /* c2+c4+c6 */
 8010b6e:	4439      	add	r1, r7
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8010b70:	f9b6 7030 	ldrsh.w	r7, [r6, #48]	; 0x30
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010b74:	4363      	muls	r3, r4
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8010b76:	6e2c      	ldr	r4, [r5, #96]	; 0x60
 8010b78:	437c      	muls	r4, r7
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8010b7a:	f8d5 70a0 	ldr.w	r7, [r5, #160]	; 0xa0
 8010b7e:	fb07 f709 	mul.w	r7, r7, r9
    tmp1 = MULTIPLY(z1 + z2, FIX(0.935414347));      /* (c3+c1-c5)/2 */
 8010b82:	eb03 0904 	add.w	r9, r3, r4
 8010b86:	fb02 fb09 	mul.w	fp, r2, r9
    tmp2 = MULTIPLY(z1 - z2, FIX(0.170262339));      /* (c3+c5-c1)/2 */
 8010b8a:	eba3 0904 	sub.w	r9, r3, r4
 8010b8e:	f240 5273 	movw	r2, #1395	; 0x573
    tmp0 = tmp1 - tmp2;
    tmp1 += tmp2;
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
    tmp1 += tmp2;
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));        /* c5 */
 8010b92:	443b      	add	r3, r7
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
 8010b94:	443c      	add	r4, r7
    tmp2 = MULTIPLY(z1 - z2, FIX(0.170262339));      /* (c3+c5-c1)/2 */
 8010b96:	fb02 f909 	mul.w	r9, r2, r9
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
 8010b9a:	4a71      	ldr	r2, [pc, #452]	; (8010d60 <jpeg_idct_7x7+0x2a4>)
    tmp0 = tmp1 - tmp2;
 8010b9c:	ebab 0a09 	sub.w	sl, fp, r9
    tmp1 += tmp2;
 8010ba0:	44d9      	add	r9, fp
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));        /* c5 */
 8010ba2:	f241 3ba3 	movw	fp, #5027	; 0x13a3
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
 8010ba6:	4354      	muls	r4, r2
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));        /* c5 */
 8010ba8:	fb0b f303 	mul.w	r3, fp, r3
    tmp0 += z2;
    tmp2 += z2 + MULTIPLY(z3, FIX(1.870828693));     /* c3+c1-c5 */
 8010bac:	f643 3bde 	movw	fp, #15326	; 0x3bde
    tmp1 += tmp2;
 8010bb0:	44a1      	add	r9, r4
    tmp0 += z2;
 8010bb2:	449a      	add	sl, r3
    tmp2 += z2 + MULTIPLY(z3, FIX(1.870828693));     /* c3+c1-c5 */
 8010bb4:	fb0b 3707 	mla	r7, fp, r7, r3

    /* Final output stage */

    wsptr[7*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8010bb8:	9b03      	ldr	r3, [sp, #12]
    tmp2 += z2 + MULTIPLY(z3, FIX(1.870828693));     /* c3+c1-c5 */
 8010bba:	443c      	add	r4, r7
    wsptr[7*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8010bbc:	4453      	add	r3, sl
 8010bbe:	12db      	asrs	r3, r3, #11
 8010bc0:	f84c 3c04 	str.w	r3, [ip, #-4]
    wsptr[7*6] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8010bc4:	9b03      	ldr	r3, [sp, #12]
 8010bc6:	eba3 0a0a 	sub.w	sl, r3, sl
    wsptr[7*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 8010bca:	eb00 0309 	add.w	r3, r0, r9
    wsptr[7*5] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 8010bce:	eba0 0009 	sub.w	r0, r0, r9
    wsptr[7*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 8010bd2:	12db      	asrs	r3, r3, #11
    wsptr[7*6] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8010bd4:	ea4f 22ea 	mov.w	r2, sl, asr #11
    wsptr[7*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 8010bd8:	f8cc 3018 	str.w	r3, [ip, #24]
    wsptr[7*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8010bdc:	190b      	adds	r3, r1, r4
    wsptr[7*4] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 8010bde:	1b0c      	subs	r4, r1, r4
    wsptr[7*5] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 8010be0:	12c0      	asrs	r0, r0, #11
    wsptr[7*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8010be2:	12db      	asrs	r3, r3, #11
    wsptr[7*6] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8010be4:	f8cc 20a4 	str.w	r2, [ip, #164]	; 0xa4
    wsptr[7*4] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 8010be8:	12e4      	asrs	r4, r4, #11
    wsptr[7*5] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 8010bea:	f8cc 0088 	str.w	r0, [ip, #136]	; 0x88
    wsptr[7*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8010bee:	f8cc 3034 	str.w	r3, [ip, #52]	; 0x34
    tmp13 += MULTIPLY(z2, FIX(1.414213562));         /* c0 */
 8010bf2:	9b02      	ldr	r3, [sp, #8]
    wsptr[7*4] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 8010bf4:	f8cc 406c 	str.w	r4, [ip, #108]	; 0x6c
    tmp13 += MULTIPLY(z2, FIX(1.414213562));         /* c0 */
 8010bf8:	fb08 3e0e 	mla	lr, r8, lr, r3
    wsptr[7*3] = (int) RIGHT_SHIFT(tmp13, CONST_BITS-PASS1_BITS);
 8010bfc:	ea4f 23ee 	mov.w	r3, lr, asr #11
 8010c00:	f8cc 3050 	str.w	r3, [ip, #80]	; 0x50
  for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 8010c04:	9b05      	ldr	r3, [sp, #20]
 8010c06:	42b3      	cmp	r3, r6
 8010c08:	f47f af68 	bne.w	8010adc <jpeg_idct_7x7+0x20>
 8010c0c:	9b04      	ldr	r3, [sp, #16]
  }

  /* Pass 2: process 7 rows from work array, store into output array. */

  wsptr = workspace;
 8010c0e:	ac07      	add	r4, sp, #28
 8010c10:	f1a3 0904 	sub.w	r9, r3, #4
 8010c14:	3318      	adds	r3, #24
 8010c16:	9305      	str	r3, [sp, #20]
  for (ctr = 0; ctr < 7; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8010c18:	f859 3f04 	ldr.w	r3, [r9, #4]!
			    & RANGE_MASK];
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 7;		/* advance pointer to next row */
 8010c1c:	341c      	adds	r4, #28
    outptr = output_buf[ctr] + output_col;
 8010c1e:	9a42      	ldr	r2, [sp, #264]	; 0x108
    z3 = (INT32) wsptr[6];
 8010c20:	f854 5c04 	ldr.w	r5, [r4, #-4]
    outptr = output_buf[ctr] + output_col;
 8010c24:	189e      	adds	r6, r3, r2
    tmp10 = MULTIPLY(z2 - z3, FIX(0.881747734));     /* c4 */
 8010c26:	f854 2c0c 	ldr.w	r2, [r4, #-12]
    outptr = output_buf[ctr] + output_col;
 8010c2a:	9304      	str	r3, [sp, #16]
    tmp10 = MULTIPLY(z2 - z3, FIX(0.881747734));     /* c4 */
 8010c2c:	1b51      	subs	r1, r2, r5
 8010c2e:	f641 4237 	movw	r2, #7223	; 0x1c37
    z1 = (INT32) wsptr[2];
 8010c32:	f854 3c14 	ldr.w	r3, [r4, #-20]
    tmp10 = MULTIPLY(z2 - z3, FIX(0.881747734));     /* c4 */
 8010c36:	fb02 fe01 	mul.w	lr, r2, r1
    tmp12 = MULTIPLY(z1 - z2, FIX(0.314692123));     /* c6 */
 8010c3a:	f854 2c0c 	ldr.w	r2, [r4, #-12]
    tmp13 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8010c3e:	f854 7c1c 	ldr.w	r7, [r4, #-28]
    tmp0 = z1 + z3;
 8010c42:	eb03 0805 	add.w	r8, r3, r5
    tmp12 = MULTIPLY(z1 - z2, FIX(0.314692123));     /* c6 */
 8010c46:	eba3 0c02 	sub.w	ip, r3, r2
 8010c4a:	f640 2212 	movw	r2, #2578	; 0xa12
    tmp13 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8010c4e:	3710      	adds	r7, #16
    tmp11 = tmp10 + tmp12 + tmp13 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 8010c50:	4941      	ldr	r1, [pc, #260]	; (8010d58 <jpeg_idct_7x7+0x29c>)
    tmp12 = MULTIPLY(z1 - z2, FIX(0.314692123));     /* c6 */
 8010c52:	fb02 fc0c 	mul.w	ip, r2, ip
    tmp11 = tmp10 + tmp12 + tmp13 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 8010c56:	f854 2c0c 	ldr.w	r2, [r4, #-12]
    z2 = (INT32) wsptr[3];
 8010c5a:	f854 ac10 	ldr.w	sl, [r4, #-16]
    tmp11 = tmp10 + tmp12 + tmp13 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 8010c5e:	eb0e 000c 	add.w	r0, lr, ip
 8010c62:	eb00 3047 	add.w	r0, r0, r7, lsl #13
 8010c66:	fb01 0002 	mla	r0, r1, r2, r0
    tmp0 = MULTIPLY(tmp0, FIX(1.274162392)) + tmp13; /* c2 */
 8010c6a:	f642 02c6 	movw	r2, #10438	; 0x28c6
    tmp10 += tmp0 - MULTIPLY(z3, FIX(0.077722536));  /* c2-c4-c6 */
 8010c6e:	f46f 711f 	mvn.w	r1, #636	; 0x27c
    tmp0 = MULTIPLY(tmp0, FIX(1.274162392)) + tmp13; /* c2 */
 8010c72:	fb02 f208 	mul.w	r2, r2, r8
 8010c76:	eb02 3247 	add.w	r2, r2, r7, lsl #13
    tmp10 += tmp0 - MULTIPLY(z3, FIX(0.077722536));  /* c2-c4-c6 */
 8010c7a:	fb01 2105 	mla	r1, r1, r5, r2
    tmp12 += tmp0 - MULTIPLY(z1, FIX(2.470602249));  /* c2+c4+c6 */
 8010c7e:	4d37      	ldr	r5, [pc, #220]	; (8010d5c <jpeg_idct_7x7+0x2a0>)
 8010c80:	fb05 2303 	mla	r3, r5, r3, r2
    z1 = (INT32) wsptr[1];
 8010c84:	f854 2c18 	ldr.w	r2, [r4, #-24]
    tmp10 += tmp0 - MULTIPLY(z3, FIX(0.077722536));  /* c2-c4-c6 */
 8010c88:	4471      	add	r1, lr
    z3 = (INT32) wsptr[5];
 8010c8a:	f854 ec08 	ldr.w	lr, [r4, #-8]
    tmp12 += tmp0 - MULTIPLY(z1, FIX(2.470602249));  /* c2+c4+c6 */
 8010c8e:	4463      	add	r3, ip
    tmp1 = MULTIPLY(z1 + z2, FIX(0.935414347));      /* (c3+c1-c5)/2 */
 8010c90:	eb02 050a 	add.w	r5, r2, sl
    tmp10 += tmp0 - MULTIPLY(z3, FIX(0.077722536));  /* c2-c4-c6 */
 8010c94:	9102      	str	r1, [sp, #8]
    tmp12 += tmp0 - MULTIPLY(z1, FIX(2.470602249));  /* c2+c4+c6 */
 8010c96:	9303      	str	r3, [sp, #12]
    tmp1 = MULTIPLY(z1 + z2, FIX(0.935414347));      /* (c3+c1-c5)/2 */
 8010c98:	f641 53ef 	movw	r3, #7663	; 0x1def
 8010c9c:	fb03 fb05 	mul.w	fp, r3, r5
    tmp2 = MULTIPLY(z1 - z2, FIX(0.170262339));      /* (c3+c5-c1)/2 */
 8010ca0:	eba2 050a 	sub.w	r5, r2, sl
 8010ca4:	f240 5373 	movw	r3, #1395	; 0x573
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));        /* c5 */
 8010ca8:	4472      	add	r2, lr
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
 8010caa:	44f2      	add	sl, lr
    tmp2 = MULTIPLY(z1 - z2, FIX(0.170262339));      /* (c3+c5-c1)/2 */
 8010cac:	435d      	muls	r5, r3
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
 8010cae:	4b2c      	ldr	r3, [pc, #176]	; (8010d60 <jpeg_idct_7x7+0x2a4>)
    tmp0 = tmp1 - tmp2;
 8010cb0:	ebab 0c05 	sub.w	ip, fp, r5
    tmp1 += tmp2;
 8010cb4:	445d      	add	r5, fp
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));        /* c5 */
 8010cb6:	f241 3ba3 	movw	fp, #5027	; 0x13a3
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
 8010cba:	fb03 fa0a 	mul.w	sl, r3, sl
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8010cbe:	9b01      	ldr	r3, [sp, #4]
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));        /* c5 */
 8010cc0:	fb0b f202 	mul.w	r2, fp, r2
    tmp2 += z2 + MULTIPLY(z3, FIX(1.870828693));     /* c3+c1-c5 */
 8010cc4:	f643 3bde 	movw	fp, #15326	; 0x3bde
    tmp1 += tmp2;
 8010cc8:	4455      	add	r5, sl
    tmp0 += z2;
 8010cca:	4494      	add	ip, r2
    tmp2 += z2 + MULTIPLY(z3, FIX(1.870828693));     /* c3+c1-c5 */
 8010ccc:	fb0b 220e 	mla	r2, fp, lr, r2
 8010cd0:	4492      	add	sl, r2
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8010cd2:	eb01 020c 	add.w	r2, r1, ip
 8010cd6:	9942      	ldr	r1, [sp, #264]	; 0x108
			    & RANGE_MASK];
 8010cd8:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8010cdc:	5c9a      	ldrb	r2, [r3, r2]
 8010cde:	9b04      	ldr	r3, [sp, #16]
 8010ce0:	545a      	strb	r2, [r3, r1]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8010ce2:	9b02      	ldr	r3, [sp, #8]
 8010ce4:	eba3 0c0c 	sub.w	ip, r3, ip
 8010ce8:	9b01      	ldr	r3, [sp, #4]
			    & RANGE_MASK];
 8010cea:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8010cee:	f813 200c 	ldrb.w	r2, [r3, ip]
 8010cf2:	71b2      	strb	r2, [r6, #6]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 8010cf4:	1942      	adds	r2, r0, r5
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 8010cf6:	1b40      	subs	r0, r0, r5
			    & RANGE_MASK];
 8010cf8:	f3c2 4289 	ubfx	r2, r2, #18, #10
			    & RANGE_MASK];
 8010cfc:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 8010d00:	5c9a      	ldrb	r2, [r3, r2]
 8010d02:	7072      	strb	r2, [r6, #1]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 8010d04:	5c1a      	ldrb	r2, [r3, r0]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8010d06:	9b03      	ldr	r3, [sp, #12]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 8010d08:	7172      	strb	r2, [r6, #5]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8010d0a:	eb03 020a 	add.w	r2, r3, sl
 8010d0e:	9b01      	ldr	r3, [sp, #4]
			    & RANGE_MASK];
 8010d10:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8010d14:	5c9a      	ldrb	r2, [r3, r2]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8010d16:	9b03      	ldr	r3, [sp, #12]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8010d18:	70b2      	strb	r2, [r6, #2]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8010d1a:	eba3 0a0a 	sub.w	sl, r3, sl
 8010d1e:	9b01      	ldr	r3, [sp, #4]
			    & RANGE_MASK];
 8010d20:	f3ca 4a89 	ubfx	sl, sl, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8010d24:	f813 300a 	ldrb.w	r3, [r3, sl]
 8010d28:	7133      	strb	r3, [r6, #4]
    z2 -= tmp0;
 8010d2a:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 8010d2e:	eba3 0808 	sub.w	r8, r3, r8
    tmp13 += MULTIPLY(z2, FIX(1.414213562));         /* c0 */
 8010d32:	f642 5341 	movw	r3, #11585	; 0x2d41
 8010d36:	fb03 f808 	mul.w	r8, r3, r8
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13,
 8010d3a:	9b01      	ldr	r3, [sp, #4]
    tmp13 += MULTIPLY(z2, FIX(1.414213562));         /* c0 */
 8010d3c:	eb08 3847 	add.w	r8, r8, r7, lsl #13
			    & RANGE_MASK];
 8010d40:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13,
 8010d44:	f813 3008 	ldrb.w	r3, [r3, r8]
 8010d48:	70f3      	strb	r3, [r6, #3]
  for (ctr = 0; ctr < 7; ctr++) {
 8010d4a:	9b05      	ldr	r3, [sp, #20]
 8010d4c:	454b      	cmp	r3, r9
 8010d4e:	f47f af63 	bne.w	8010c18 <jpeg_idct_7x7+0x15c>
  }
}
 8010d52:	b039      	add	sp, #228	; 0xe4
 8010d54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d58:	ffffc515 	.word	0xffffc515
 8010d5c:	ffffb0f1 	.word	0xffffb0f1
 8010d60:	ffffd3e1 	.word	0xffffd3e1

08010d64 <jpeg_idct_6x6>:

GLOBAL(void)
jpeg_idct_6x6 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8010d64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8010d68:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
{
 8010d6c:	b0a7      	sub	sp, #156	; 0x9c
 8010d6e:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 8010d70:	1e96      	subs	r6, r2, #2
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8010d72:	3080      	adds	r0, #128	; 0x80
 8010d74:	320a      	adds	r2, #10
 8010d76:	3d04      	subs	r5, #4

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 8010d78:	af02      	add	r7, sp, #8
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8010d7a:	9000      	str	r0, [sp, #0]
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 8010d7c:	9201      	str	r2, [sp, #4]
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010d7e:	f936 1f02 	ldrsh.w	r1, [r6, #2]!
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
    tmp1 = tmp0 + tmp10;
    tmp11 = RIGHT_SHIFT(tmp0 - tmp10 - tmp10, CONST_BITS-PASS1_BITS);
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 8010d82:	f242 7031 	movw	r0, #10033	; 0x2731
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010d86:	f855 2f04 	ldr.w	r2, [r5, #4]!
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 8010d8a:	3704      	adds	r7, #4
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8010d8c:	f9b6 4040 	ldrsh.w	r4, [r6, #64]	; 0x40
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010d90:	4351      	muls	r1, r2
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8010d92:	f8d5 2080 	ldr.w	r2, [r5, #128]	; 0x80
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010d96:	f9b6 c020 	ldrsh.w	ip, [r6, #32]
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8010d9a:	4362      	muls	r2, r4
    tmp0 <<= CONST_BITS;
 8010d9c:	0349      	lsls	r1, r1, #13
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 8010d9e:	f241 64a1 	movw	r4, #5793	; 0x16a1
    tmp12 = tmp1 - tmp0;

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8010da2:	f9b6 9030 	ldrsh.w	r9, [r6, #48]	; 0x30
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 8010da6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8010daa:	f9b6 8050 	ldrsh.w	r8, [r6, #80]	; 0x50
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 8010dae:	4362      	muls	r2, r4
    tmp1 = tmp0 + tmp10;
 8010db0:	188c      	adds	r4, r1, r2
    tmp11 = RIGHT_SHIFT(tmp0 - tmp10 - tmp10, CONST_BITS-PASS1_BITS);
 8010db2:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010db6:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8010db8:	fb02 f20c 	mul.w	r2, r2, ip
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010dbc:	f9b6 c010 	ldrsh.w	ip, [r6, #16]
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 8010dc0:	4342      	muls	r2, r0
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8010dc2:	6e28      	ldr	r0, [r5, #96]	; 0x60
    tmp10 = tmp1 + tmp0;
 8010dc4:	eb04 0e02 	add.w	lr, r4, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8010dc8:	fb00 f909 	mul.w	r9, r0, r9
    tmp12 = tmp1 - tmp0;
 8010dcc:	1aa4      	subs	r4, r4, r2
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8010dce:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010dd2:	6a2a      	ldr	r2, [r5, #32]
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8010dd4:	fb00 f808 	mul.w	r8, r0, r8
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8010dd8:	f640 30b6 	movw	r0, #2998	; 0xbb6
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010ddc:	fb02 f20c 	mul.w	r2, r2, ip
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 8010de0:	eba8 0b09 	sub.w	fp, r8, r9
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8010de4:	eb02 0c08 	add.w	ip, r2, r8
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 8010de8:	eb02 0a09 	add.w	sl, r2, r9
    tmp1 = (z1 - z2 - z3) << PASS1_BITS;
 8010dec:	eba2 0909 	sub.w	r9, r2, r9
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8010df0:	fb00 fc0c 	mul.w	ip, r0, ip
    tmp1 = (z1 - z2 - z3) << PASS1_BITS;
 8010df4:	eba9 0808 	sub.w	r8, r9, r8
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 8010df8:	eb0c 3a4a 	add.w	sl, ip, sl, lsl #13
    tmp1 = (z1 - z2 - z3) << PASS1_BITS;
 8010dfc:	ea4f 0888 	mov.w	r8, r8, lsl #2

    /* Final output stage */

    wsptr[6*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8010e00:	eb0e 020a 	add.w	r2, lr, sl
    wsptr[6*5] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8010e04:	ebae 0e0a 	sub.w	lr, lr, sl
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 8010e08:	eb0c 3c4b 	add.w	ip, ip, fp, lsl #13
    wsptr[6*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8010e0c:	12d2      	asrs	r2, r2, #11
 8010e0e:	f847 2c04 	str.w	r2, [r7, #-4]
    wsptr[6*5] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8010e12:	ea4f 22ee 	mov.w	r2, lr, asr #11
 8010e16:	677a      	str	r2, [r7, #116]	; 0x74
    wsptr[6*1] = (int) (tmp11 + tmp1);
 8010e18:	eb08 22e1 	add.w	r2, r8, r1, asr #11
    wsptr[6*4] = (int) (tmp11 - tmp1);
 8010e1c:	ebc8 21e1 	rsb	r1, r8, r1, asr #11
    wsptr[6*1] = (int) (tmp11 + tmp1);
 8010e20:	617a      	str	r2, [r7, #20]
    wsptr[6*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8010e22:	eb04 020c 	add.w	r2, r4, ip
    wsptr[6*3] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 8010e26:	eba4 0c0c 	sub.w	ip, r4, ip
    wsptr[6*4] = (int) (tmp11 - tmp1);
 8010e2a:	65f9      	str	r1, [r7, #92]	; 0x5c
    wsptr[6*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8010e2c:	12d2      	asrs	r2, r2, #11
    wsptr[6*3] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 8010e2e:	ea4f 24ec 	mov.w	r4, ip, asr #11
    wsptr[6*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8010e32:	62fa      	str	r2, [r7, #44]	; 0x2c
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 8010e34:	9a01      	ldr	r2, [sp, #4]
    wsptr[6*3] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 8010e36:	647c      	str	r4, [r7, #68]	; 0x44
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 8010e38:	42b2      	cmp	r2, r6
 8010e3a:	d1a0      	bne.n	8010d7e <jpeg_idct_6x6+0x1a>
 8010e3c:	f1a3 0e04 	sub.w	lr, r3, #4
 8010e40:	f103 0914 	add.w	r9, r3, #20
  }

  /* Pass 2: process 6 rows from work array, store into output array. */

  wsptr = workspace;
 8010e44:	a902      	add	r1, sp, #8
  for (ctr = 0; ctr < 6; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8010e46:	f85e af04 	ldr.w	sl, [lr, #4]!

    /* Add fudge factor here for final descale. */
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp0 <<= CONST_BITS;
    tmp2 = (INT32) wsptr[4];
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 8010e4a:	f241 60a1 	movw	r0, #5793	; 0x16a1
    outptr = output_buf[ctr] + output_col;
 8010e4e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
			    & RANGE_MASK];
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 6;		/* advance pointer to next row */
 8010e50:	3118      	adds	r1, #24
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 8010e52:	f851 2c08 	ldr.w	r2, [r1, #-8]
  for (ctr = 0; ctr < 6; ctr++) {
 8010e56:	45f1      	cmp	r9, lr
    outptr = output_buf[ctr] + output_col;
 8010e58:	eb0a 0703 	add.w	r7, sl, r3
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8010e5c:	f851 3c18 	ldr.w	r3, [r1, #-24]
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 8010e60:	fb00 f202 	mul.w	r2, r0, r2
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 8010e64:	f851 4c10 	ldr.w	r4, [r1, #-16]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8010e68:	f103 0310 	add.w	r3, r3, #16
    z3 = (INT32) wsptr[5];
 8010e6c:	f851 8c04 	ldr.w	r8, [r1, #-4]
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8010e70:	f640 30b6 	movw	r0, #2998	; 0xbb6
    tmp1 = tmp0 + tmp10;
 8010e74:	eb02 3543 	add.w	r5, r2, r3, lsl #13
    tmp11 = tmp0 - tmp10 - tmp10;
 8010e78:	ebc2 3343 	rsb	r3, r2, r3, lsl #13
 8010e7c:	eba3 0302 	sub.w	r3, r3, r2
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 8010e80:	f242 7231 	movw	r2, #10033	; 0x2731
 8010e84:	fb02 f204 	mul.w	r2, r2, r4
    z1 = (INT32) wsptr[1];
 8010e88:	f851 4c14 	ldr.w	r4, [r1, #-20]
    tmp10 = tmp1 + tmp0;
 8010e8c:	eb05 0602 	add.w	r6, r5, r2
    tmp12 = tmp1 - tmp0;
 8010e90:	eba5 0202 	sub.w	r2, r5, r2
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8010e94:	eb04 0508 	add.w	r5, r4, r8
 8010e98:	fb00 f505 	mul.w	r5, r0, r5
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 8010e9c:	f851 0c0c 	ldr.w	r0, [r1, #-12]
 8010ea0:	eb04 0c00 	add.w	ip, r4, r0
    tmp1 = (z1 - z2 - z3) << CONST_BITS;
 8010ea4:	eba4 0400 	sub.w	r4, r4, r0
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 8010ea8:	eba8 0b00 	sub.w	fp, r8, r0
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8010eac:	9800      	ldr	r0, [sp, #0]
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 8010eae:	eb05 3c4c 	add.w	ip, r5, ip, lsl #13
    tmp1 = (z1 - z2 - z3) << CONST_BITS;
 8010eb2:	eba4 0808 	sub.w	r8, r4, r8
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 8010eb6:	eb05 354b 	add.w	r5, r5, fp, lsl #13
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8010eba:	eb06 040c 	add.w	r4, r6, ip
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8010ebe:	eba6 060c 	sub.w	r6, r6, ip
			    & RANGE_MASK];
 8010ec2:	f3c4 4489 	ubfx	r4, r4, #18, #10
			    & RANGE_MASK];
 8010ec6:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8010eca:	5d04      	ldrb	r4, [r0, r4]
 8010ecc:	9830      	ldr	r0, [sp, #192]	; 0xc0
 8010ece:	f80a 4000 	strb.w	r4, [sl, r0]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8010ed2:	9800      	ldr	r0, [sp, #0]
 8010ed4:	5d84      	ldrb	r4, [r0, r6]
 8010ed6:	717c      	strb	r4, [r7, #5]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 8010ed8:	eb03 3448 	add.w	r4, r3, r8, lsl #13
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 8010edc:	eba3 3848 	sub.w	r8, r3, r8, lsl #13
			    & RANGE_MASK];
 8010ee0:	f3c4 4489 	ubfx	r4, r4, #18, #10
			    & RANGE_MASK];
 8010ee4:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 8010ee8:	5d04      	ldrb	r4, [r0, r4]
 8010eea:	707c      	strb	r4, [r7, #1]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 8010eec:	f810 3008 	ldrb.w	r3, [r0, r8]
 8010ef0:	713b      	strb	r3, [r7, #4]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8010ef2:	eb02 0305 	add.w	r3, r2, r5
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8010ef6:	eba2 0505 	sub.w	r5, r2, r5
			    & RANGE_MASK];
 8010efa:	f3c3 4389 	ubfx	r3, r3, #18, #10
			    & RANGE_MASK];
 8010efe:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8010f02:	5cc3      	ldrb	r3, [r0, r3]
 8010f04:	70bb      	strb	r3, [r7, #2]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8010f06:	5d43      	ldrb	r3, [r0, r5]
 8010f08:	70fb      	strb	r3, [r7, #3]
  for (ctr = 0; ctr < 6; ctr++) {
 8010f0a:	d19c      	bne.n	8010e46 <jpeg_idct_6x6+0xe2>
  }
}
 8010f0c:	b027      	add	sp, #156	; 0x9c
 8010f0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08010f14 <jpeg_idct_5x5>:

GLOBAL(void)
jpeg_idct_5x5 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8010f14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8010f18:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
{
 8010f1c:	b09d      	sub	sp, #116	; 0x74
 8010f1e:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 8010f20:	1e96      	subs	r6, r2, #2
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8010f22:	3080      	adds	r0, #128	; 0x80
 8010f24:	3208      	adds	r2, #8
 8010f26:	3d04      	subs	r5, #4

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 8010f28:	af03      	add	r7, sp, #12
    tmp12 <<= CONST_BITS;
    /* Add fudge factor here for final descale. */
    tmp12 += ONE << (CONST_BITS-PASS1_BITS-1);
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    z1 = MULTIPLY(tmp0 + tmp1, FIX(0.790569415)); /* (c2+c4)/2 */
 8010f2a:	f641 1e4c 	movw	lr, #6476	; 0x194c
    z2 = MULTIPLY(tmp0 - tmp1, FIX(0.353553391)); /* (c2-c4)/2 */
 8010f2e:	f44f 6c35 	mov.w	ip, #2896	; 0xb50
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8010f32:	9000      	str	r0, [sp, #0]
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 8010f34:	9201      	str	r2, [sp, #4]
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010f36:	f936 2f02 	ldrsh.w	r2, [r6, #2]!
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 8010f3a:	3704      	adds	r7, #4
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010f3c:	f855 1f04 	ldr.w	r1, [r5, #4]!
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010f40:	f9b6 4020 	ldrsh.w	r4, [r6, #32]
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010f44:	434a      	muls	r2, r1
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010f46:	6c29      	ldr	r1, [r5, #64]	; 0x40
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8010f48:	f9b6 9040 	ldrsh.w	r9, [r6, #64]	; 0x40
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010f4c:	4361      	muls	r1, r4
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8010f4e:	f8d5 4080 	ldr.w	r4, [r5, #128]	; 0x80
    tmp11 = z3 - z1;
    tmp12 -= z2 << 2;

    /* Odd part */

    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010f52:	6a28      	ldr	r0, [r5, #32]
    tmp12 <<= CONST_BITS;
 8010f54:	0352      	lsls	r2, r2, #13
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8010f56:	fb04 f909 	mul.w	r9, r4, r9
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010f5a:	f9b6 a010 	ldrsh.w	sl, [r6, #16]
    tmp12 += ONE << (CONST_BITS-PASS1_BITS-1);
 8010f5e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8010f62:	f9b6 b030 	ldrsh.w	fp, [r6, #48]	; 0x30
    z1 = MULTIPLY(tmp0 + tmp1, FIX(0.790569415)); /* (c2+c4)/2 */
 8010f66:	eb01 0409 	add.w	r4, r1, r9
    z2 = MULTIPLY(tmp0 - tmp1, FIX(0.353553391)); /* (c2-c4)/2 */
 8010f6a:	eba1 0109 	sub.w	r1, r1, r9
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010f6e:	fb00 fa0a 	mul.w	sl, r0, sl
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8010f72:	6e28      	ldr	r0, [r5, #96]	; 0x60
    z2 = MULTIPLY(tmp0 - tmp1, FIX(0.353553391)); /* (c2-c4)/2 */
 8010f74:	fb0c f101 	mul.w	r1, ip, r1
    z1 = MULTIPLY(tmp0 + tmp1, FIX(0.790569415)); /* (c2+c4)/2 */
 8010f78:	fb0e f804 	mul.w	r8, lr, r4
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8010f7c:	fb00 fb0b 	mul.w	fp, r0, fp
    z3 = tmp12 + z2;
 8010f80:	1854      	adds	r4, r2, r1

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));     /* c3 */
 8010f82:	f641 209a 	movw	r0, #6810	; 0x1a9a
    tmp12 -= z2 << 2;
 8010f86:	eba2 0281 	sub.w	r2, r2, r1, lsl #2
    tmp10 = z3 + z1;
 8010f8a:	eb08 0904 	add.w	r9, r8, r4
    tmp11 = z3 - z1;
 8010f8e:	eba4 0408 	sub.w	r4, r4, r8
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));     /* c3 */
 8010f92:	eb0a 080b 	add.w	r8, sl, fp

    wsptr[5*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
    wsptr[5*4] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
    wsptr[5*3] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
    wsptr[5*2] = (int) RIGHT_SHIFT(tmp12, CONST_BITS-PASS1_BITS);
 8010f96:	12d2      	asrs	r2, r2, #11
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));     /* c3 */
 8010f98:	fb00 f808 	mul.w	r8, r0, r8
    tmp0 = z1 + MULTIPLY(z2, FIX(0.513743148));   /* c1-c3 */
 8010f9c:	f241 0071 	movw	r0, #4209	; 0x1071
    wsptr[5*2] = (int) RIGHT_SHIFT(tmp12, CONST_BITS-PASS1_BITS);
 8010fa0:	627a      	str	r2, [r7, #36]	; 0x24
    tmp0 = z1 + MULTIPLY(z2, FIX(0.513743148));   /* c1-c3 */
 8010fa2:	fb00 8a0a 	mla	sl, r0, sl, r8
    tmp1 = z1 - MULTIPLY(z3, FIX(2.176250899));   /* c1+c3 */
 8010fa6:	483b      	ldr	r0, [pc, #236]	; (8011094 <jpeg_idct_5x5+0x180>)
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 8010fa8:	9a01      	ldr	r2, [sp, #4]
    tmp1 = z1 - MULTIPLY(z3, FIX(2.176250899));   /* c1+c3 */
 8010faa:	fb00 880b 	mla	r8, r0, fp, r8
    wsptr[5*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8010fae:	eb09 0b0a 	add.w	fp, r9, sl
    wsptr[5*4] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8010fb2:	eba9 0a0a 	sub.w	sl, r9, sl
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 8010fb6:	42b2      	cmp	r2, r6
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 8010fb8:	eb04 0908 	add.w	r9, r4, r8
    wsptr[5*3] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 8010fbc:	eba4 0808 	sub.w	r8, r4, r8
    wsptr[5*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8010fc0:	ea4f 2beb 	mov.w	fp, fp, asr #11
    wsptr[5*4] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8010fc4:	ea4f 2aea 	mov.w	sl, sl, asr #11
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 8010fc8:	ea4f 29e9 	mov.w	r9, r9, asr #11
    wsptr[5*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8010fcc:	f847 bc04 	str.w	fp, [r7, #-4]
    wsptr[5*3] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 8010fd0:	ea4f 24e8 	mov.w	r4, r8, asr #11
    wsptr[5*4] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8010fd4:	f8c7 a04c 	str.w	sl, [r7, #76]	; 0x4c
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 8010fd8:	f8c7 9010 	str.w	r9, [r7, #16]
    wsptr[5*3] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 8010fdc:	63bc      	str	r4, [r7, #56]	; 0x38
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 8010fde:	d1aa      	bne.n	8010f36 <jpeg_idct_5x5+0x22>
 8010fe0:	f1a3 0e04 	sub.w	lr, r3, #4
  }

  /* Pass 2: process 5 rows from work array, store into output array. */

  wsptr = workspace;
 8010fe4:	a903      	add	r1, sp, #12
 8010fe6:	3310      	adds	r3, #16
    /* Add fudge factor here for final descale. */
    tmp12 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp12 <<= CONST_BITS;
    tmp0 = (INT32) wsptr[2];
    tmp1 = (INT32) wsptr[4];
    z1 = MULTIPLY(tmp0 + tmp1, FIX(0.790569415)); /* (c2+c4)/2 */
 8010fe8:	f641 1a4c 	movw	sl, #6476	; 0x194c
    z2 = MULTIPLY(tmp0 - tmp1, FIX(0.353553391)); /* (c2-c4)/2 */
 8010fec:	f44f 6935 	mov.w	r9, #2896	; 0xb50
 8010ff0:	9301      	str	r3, [sp, #4]
    outptr = output_buf[ctr] + output_col;
 8010ff2:	f85e 8f04 	ldr.w	r8, [lr, #4]!
    /* Odd part */

    z2 = (INT32) wsptr[1];
    z3 = (INT32) wsptr[3];

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));     /* c3 */
 8010ff6:	f641 209a 	movw	r0, #6810	; 0x1a9a
    outptr = output_buf[ctr] + output_col;
 8010ffa:	9b26      	ldr	r3, [sp, #152]	; 0x98
			    & RANGE_MASK];
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 5;		/* advance pointer to next row */
 8010ffc:	3114      	adds	r1, #20
    tmp1 = (INT32) wsptr[4];
 8010ffe:	f851 4c04 	ldr.w	r4, [r1, #-4]
    outptr = output_buf[ctr] + output_col;
 8011002:	eb08 0703 	add.w	r7, r8, r3
    tmp12 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8011006:	f851 3c14 	ldr.w	r3, [r1, #-20]
    z3 = (INT32) wsptr[3];
 801100a:	f851 bc08 	ldr.w	fp, [r1, #-8]
    tmp12 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801100e:	f103 0c10 	add.w	ip, r3, #16
    tmp0 = (INT32) wsptr[2];
 8011012:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    z2 = (INT32) wsptr[1];
 8011016:	f851 6c10 	ldr.w	r6, [r1, #-16]
    z1 = MULTIPLY(tmp0 + tmp1, FIX(0.790569415)); /* (c2+c4)/2 */
 801101a:	191a      	adds	r2, r3, r4
    z2 = MULTIPLY(tmp0 - tmp1, FIX(0.353553391)); /* (c2-c4)/2 */
 801101c:	1b1b      	subs	r3, r3, r4
 801101e:	fb09 f303 	mul.w	r3, r9, r3
    z1 = MULTIPLY(tmp0 + tmp1, FIX(0.790569415)); /* (c2+c4)/2 */
 8011022:	fb0a f202 	mul.w	r2, sl, r2
    z3 = tmp12 + z2;
 8011026:	eb03 344c 	add.w	r4, r3, ip, lsl #13
    tmp12 -= z2 << 2;
 801102a:	009b      	lsls	r3, r3, #2
    tmp10 = z3 + z1;
 801102c:	1915      	adds	r5, r2, r4
    tmp11 = z3 - z1;
 801102e:	1aa2      	subs	r2, r4, r2
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));     /* c3 */
 8011030:	eb06 040b 	add.w	r4, r6, fp
    tmp12 -= z2 << 2;
 8011034:	ebc3 3c4c 	rsb	ip, r3, ip, lsl #13
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));     /* c3 */
 8011038:	4344      	muls	r4, r0
    tmp0 = z1 + MULTIPLY(z2, FIX(0.513743148));   /* c1-c3 */
 801103a:	f241 0071 	movw	r0, #4209	; 0x1071
			    & RANGE_MASK];
 801103e:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    tmp0 = z1 + MULTIPLY(z2, FIX(0.513743148));   /* c1-c3 */
 8011042:	fb00 4606 	mla	r6, r0, r6, r4
    tmp1 = z1 - MULTIPLY(z3, FIX(2.176250899));   /* c1+c3 */
 8011046:	4813      	ldr	r0, [pc, #76]	; (8011094 <jpeg_idct_5x5+0x180>)
 8011048:	fb00 440b 	mla	r4, r0, fp, r4
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 801104c:	eb05 0b06 	add.w	fp, r5, r6
 8011050:	9800      	ldr	r0, [sp, #0]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8011052:	1bad      	subs	r5, r5, r6
			    & RANGE_MASK];
 8011054:	f3cb 4b89 	ubfx	fp, fp, #18, #10
			    & RANGE_MASK];
 8011058:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 801105c:	f810 b00b 	ldrb.w	fp, [r0, fp]
 8011060:	9826      	ldr	r0, [sp, #152]	; 0x98
 8011062:	f808 b000 	strb.w	fp, [r8, r0]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8011066:	9800      	ldr	r0, [sp, #0]
 8011068:	5d45      	ldrb	r5, [r0, r5]
 801106a:	713d      	strb	r5, [r7, #4]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 801106c:	1915      	adds	r5, r2, r4
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 801106e:	1b12      	subs	r2, r2, r4
			    & RANGE_MASK];
 8011070:	f3c5 4589 	ubfx	r5, r5, #18, #10
			    & RANGE_MASK];
 8011074:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 8011078:	5d45      	ldrb	r5, [r0, r5]
 801107a:	707d      	strb	r5, [r7, #1]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 801107c:	5c82      	ldrb	r2, [r0, r2]
 801107e:	70fa      	strb	r2, [r7, #3]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12,
 8011080:	f810 300c 	ldrb.w	r3, [r0, ip]
 8011084:	70bb      	strb	r3, [r7, #2]
  for (ctr = 0; ctr < 5; ctr++) {
 8011086:	9b01      	ldr	r3, [sp, #4]
 8011088:	4573      	cmp	r3, lr
 801108a:	d1b2      	bne.n	8010ff2 <jpeg_idct_5x5+0xde>
  }
}
 801108c:	b01d      	add	sp, #116	; 0x74
 801108e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011092:	bf00      	nop
 8011094:	ffffba5c 	.word	0xffffba5c

08011098 <jpeg_idct_4x4>:

GLOBAL(void)
jpeg_idct_4x4 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8011098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801109c:	6d4c      	ldr	r4, [r1, #84]	; 0x54
 801109e:	b093      	sub	sp, #76	; 0x4c
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80110a0:	f8d0 514c 	ldr.w	r5, [r0, #332]	; 0x14c
 80110a4:	1e96      	subs	r6, r2, #2
 80110a6:	3c04      	subs	r4, #4
 80110a8:	1d97      	adds	r7, r2, #6
 80110aa:	3580      	adds	r5, #128	; 0x80

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 80110ac:	a902      	add	r1, sp, #8
    /* Same rotation as in the even part of the 8x8 LL&M IDCT */

    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);               /* c6 */
 80110ae:	f241 1851 	movw	r8, #4433	; 0x1151
    /* Add fudge factor here for final descale. */
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
    tmp0 = RIGHT_SHIFT(z1 + MULTIPLY(z2, FIX_0_765366865), /* c2-c6 */
 80110b2:	f641 0e7e 	movw	lr, #6270	; 0x187e
		       CONST_BITS-PASS1_BITS);
    tmp2 = RIGHT_SHIFT(z1 - MULTIPLY(z3, FIX_1_847759065), /* c2+c6 */
 80110b6:	f8df c108 	ldr.w	ip, [pc, #264]	; 80111c0 <jpeg_idct_4x4+0x128>
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80110ba:	f936 0f02 	ldrsh.w	r0, [r6, #2]!
  for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 80110be:	3104      	adds	r1, #4
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80110c0:	f854 2f04 	ldr.w	r2, [r4, #4]!
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80110c4:	f9b6 9020 	ldrsh.w	r9, [r6, #32]
  for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 80110c8:	42b7      	cmp	r7, r6
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80110ca:	fb02 f000 	mul.w	r0, r2, r0
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80110ce:	6c22      	ldr	r2, [r4, #64]	; 0x40
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80110d0:	f9b6 a010 	ldrsh.w	sl, [r6, #16]
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80110d4:	fb02 f209 	mul.w	r2, r2, r9
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80110d8:	f9b6 b030 	ldrsh.w	fp, [r6, #48]	; 0x30
    tmp10 = (tmp0 + tmp2) << PASS1_BITS;
 80110dc:	eb00 0902 	add.w	r9, r0, r2
    tmp12 = (tmp0 - tmp2) << PASS1_BITS;
 80110e0:	eba0 0002 	sub.w	r0, r0, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80110e4:	6a22      	ldr	r2, [r4, #32]
 80110e6:	fb02 fa0a 	mul.w	sl, r2, sl
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80110ea:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80110ec:	fb02 fb0b 	mul.w	fp, r2, fp
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);               /* c6 */
 80110f0:	eb0a 020b 	add.w	r2, sl, fp
 80110f4:	fb08 f202 	mul.w	r2, r8, r2
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 80110f8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
    tmp0 = RIGHT_SHIFT(z1 + MULTIPLY(z2, FIX_0_765366865), /* c2-c6 */
 80110fc:	fb0e 2a0a 	mla	sl, lr, sl, r2
    tmp2 = RIGHT_SHIFT(z1 - MULTIPLY(z3, FIX_1_847759065), /* c2+c6 */
 8011100:	fb0c 220b 	mla	r2, ip, fp, r2
    tmp0 = RIGHT_SHIFT(z1 + MULTIPLY(z2, FIX_0_765366865), /* c2-c6 */
 8011104:	ea4f 2aea 	mov.w	sl, sl, asr #11
    tmp2 = RIGHT_SHIFT(z1 - MULTIPLY(z3, FIX_1_847759065), /* c2+c6 */
 8011108:	ea4f 22e2 	mov.w	r2, r2, asr #11
		       CONST_BITS-PASS1_BITS);

    /* Final output stage */

    wsptr[4*0] = (int) (tmp10 + tmp0);
 801110c:	eb0a 0b89 	add.w	fp, sl, r9, lsl #2
    wsptr[4*3] = (int) (tmp10 - tmp0);
 8011110:	ebca 0a89 	rsb	sl, sl, r9, lsl #2
    wsptr[4*1] = (int) (tmp12 + tmp2);
 8011114:	eb02 0980 	add.w	r9, r2, r0, lsl #2
    wsptr[4*0] = (int) (tmp10 + tmp0);
 8011118:	f841 bc04 	str.w	fp, [r1, #-4]
    wsptr[4*2] = (int) (tmp12 - tmp2);
 801111c:	ebc2 0280 	rsb	r2, r2, r0, lsl #2
    wsptr[4*3] = (int) (tmp10 - tmp0);
 8011120:	f8c1 a02c 	str.w	sl, [r1, #44]	; 0x2c
    wsptr[4*1] = (int) (tmp12 + tmp2);
 8011124:	f8c1 900c 	str.w	r9, [r1, #12]
    wsptr[4*2] = (int) (tmp12 - tmp2);
 8011128:	61ca      	str	r2, [r1, #28]
  for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 801112a:	d1c6      	bne.n	80110ba <jpeg_idct_4x4+0x22>
 801112c:	1f1e      	subs	r6, r3, #4
 801112e:	f103 0c0c 	add.w	ip, r3, #12
  }

  /* Pass 2: process 4 rows from work array, store into output array. */

  wsptr = workspace;
 8011132:	ac02      	add	r4, sp, #8
    /* Same rotation as in the even part of the 8x8 LL&M IDCT */

    z2 = (INT32) wsptr[1];
    z3 = (INT32) wsptr[3];

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 8011134:	f241 1951 	movw	r9, #4433	; 0x1151
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 8011138:	f641 087e 	movw	r8, #6270	; 0x187e
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 801113c:	f8df e080 	ldr.w	lr, [pc, #128]	; 80111c0 <jpeg_idct_4x4+0x128>
    outptr = output_buf[ctr] + output_col;
 8011140:	f856 3f04 	ldr.w	r3, [r6, #4]!
			    & RANGE_MASK];
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 4;		/* advance pointer to next row */
 8011144:	3410      	adds	r4, #16
    outptr = output_buf[ctr] + output_col;
 8011146:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8011148:	f854 0c10 	ldr.w	r0, [r4, #-16]
  for (ctr = 0; ctr < 4; ctr++) {
 801114c:	45b4      	cmp	ip, r6
    outptr = output_buf[ctr] + output_col;
 801114e:	eb03 0702 	add.w	r7, r3, r2
    z3 = (INT32) wsptr[3];
 8011152:	f854 bc04 	ldr.w	fp, [r4, #-4]
    tmp2 = (INT32) wsptr[2];
 8011156:	f854 2c08 	ldr.w	r2, [r4, #-8]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801115a:	f100 0010 	add.w	r0, r0, #16
    z2 = (INT32) wsptr[1];
 801115e:	f854 1c0c 	ldr.w	r1, [r4, #-12]
    tmp10 = (tmp0 + tmp2) << CONST_BITS;
 8011162:	eb00 0a02 	add.w	sl, r0, r2
    tmp12 = (tmp0 - tmp2) << CONST_BITS;
 8011166:	eba0 0002 	sub.w	r0, r0, r2
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 801116a:	eb01 020b 	add.w	r2, r1, fp
 801116e:	fb09 f202 	mul.w	r2, r9, r2
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 8011172:	fb08 2101 	mla	r1, r8, r1, r2
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 8011176:	fb0e 220b 	mla	r2, lr, fp, r2
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 801117a:	eb01 3b4a 	add.w	fp, r1, sl, lsl #13
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 801117e:	ebc1 314a 	rsb	r1, r1, sl, lsl #13
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 8011182:	9201      	str	r2, [sp, #4]
			    & RANGE_MASK];
 8011184:	f3cb 4b89 	ubfx	fp, fp, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8011188:	9a1c      	ldr	r2, [sp, #112]	; 0x70
			    & RANGE_MASK];
 801118a:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 801118e:	f815 b00b 	ldrb.w	fp, [r5, fp]
 8011192:	f803 b002 	strb.w	fp, [r3, r2]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8011196:	5c6b      	ldrb	r3, [r5, r1]
 8011198:	70fb      	strb	r3, [r7, #3]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 801119a:	9b01      	ldr	r3, [sp, #4]
 801119c:	eb03 3340 	add.w	r3, r3, r0, lsl #13
			    & RANGE_MASK];
 80111a0:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 80111a4:	5ceb      	ldrb	r3, [r5, r3]
 80111a6:	707b      	strb	r3, [r7, #1]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 80111a8:	9b01      	ldr	r3, [sp, #4]
 80111aa:	ebc3 3240 	rsb	r2, r3, r0, lsl #13
			    & RANGE_MASK];
 80111ae:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 80111b2:	5cab      	ldrb	r3, [r5, r2]
 80111b4:	70bb      	strb	r3, [r7, #2]
  for (ctr = 0; ctr < 4; ctr++) {
 80111b6:	d1c3      	bne.n	8011140 <jpeg_idct_4x4+0xa8>
  }
}
 80111b8:	b013      	add	sp, #76	; 0x4c
 80111ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111be:	bf00      	nop
 80111c0:	ffffc4df 	.word	0xffffc4df

080111c4 <jpeg_idct_3x3>:

GLOBAL(void)
jpeg_idct_3x3 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80111c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111c8:	b08b      	sub	sp, #44	; 0x2c
  INT32 tmp0, tmp2, tmp10, tmp12;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80111ca:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
 80111ce:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80111d0:	f1a2 0802 	sub.w	r8, r2, #2

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 80111d4:	ac01      	add	r4, sp, #4
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80111d6:	f100 0e80 	add.w	lr, r0, #128	; 0x80
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 80111da:	f1a1 0c04 	sub.w	ip, r1, #4
 80111de:	1d10      	adds	r0, r2, #4
 80111e0:	4621      	mov	r1, r4
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
    tmp0 <<= CONST_BITS;
    /* Add fudge factor here for final descale. */
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 80111e2:	f241 6aa1 	movw	sl, #5793	; 0x16a1
    tmp2 = tmp0 - tmp12 - tmp12;

    /* Odd part */

    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 80111e6:	f242 7931 	movw	r9, #10033	; 0x2731
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80111ea:	f938 2f02 	ldrsh.w	r2, [r8, #2]!
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 80111ee:	3404      	adds	r4, #4
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80111f0:	f85c 5f04 	ldr.w	r5, [ip, #4]!
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80111f4:	f9b8 6020 	ldrsh.w	r6, [r8, #32]
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 80111f8:	4540      	cmp	r0, r8
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80111fa:	fb05 f202 	mul.w	r2, r5, r2
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80111fe:	f8dc 5040 	ldr.w	r5, [ip, #64]	; 0x40
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011202:	f9b8 b010 	ldrsh.w	fp, [r8, #16]
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8011206:	fb06 f505 	mul.w	r5, r6, r5
    tmp0 <<= CONST_BITS;
 801120a:	ea4f 3242 	mov.w	r2, r2, lsl #13
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801120e:	f8dc 7020 	ldr.w	r7, [ip, #32]
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 8011212:	f502 6280 	add.w	r2, r2, #1024	; 0x400
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 8011216:	fb0a f505 	mul.w	r5, sl, r5
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801121a:	fb07 f70b 	mul.w	r7, r7, fp
    tmp10 = tmp0 + tmp12;
 801121e:	eb02 0605 	add.w	r6, r2, r5
    tmp2 = tmp0 - tmp12 - tmp12;
 8011222:	eba2 0245 	sub.w	r2, r2, r5, lsl #1
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 8011226:	fb09 f707 	mul.w	r7, r9, r7

    /* Final output stage */

    wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
    wsptr[3*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
    wsptr[3*1] = (int) RIGHT_SHIFT(tmp2, CONST_BITS-PASS1_BITS);
 801122a:	ea4f 22e2 	mov.w	r2, r2, asr #11
    wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 801122e:	eb06 0b07 	add.w	fp, r6, r7
    wsptr[3*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8011232:	eba6 0707 	sub.w	r7, r6, r7
    wsptr[3*1] = (int) RIGHT_SHIFT(tmp2, CONST_BITS-PASS1_BITS);
 8011236:	60a2      	str	r2, [r4, #8]
    wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8011238:	ea4f 2beb 	mov.w	fp, fp, asr #11
    wsptr[3*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 801123c:	ea4f 27e7 	mov.w	r7, r7, asr #11
    wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8011240:	f844 bc04 	str.w	fp, [r4, #-4]
    wsptr[3*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8011244:	6167      	str	r7, [r4, #20]
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 8011246:	d1d0      	bne.n	80111ea <jpeg_idct_3x3+0x26>
 8011248:	1f1d      	subs	r5, r3, #4

    /* Add fudge factor here for final descale. */
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp0 <<= CONST_BITS;
    tmp2 = (INT32) wsptr[2];
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 801124a:	f241 6ca1 	movw	ip, #5793	; 0x16a1
 801124e:	3308      	adds	r3, #8
    tmp2 = tmp0 - tmp12 - tmp12;

    /* Odd part */

    tmp12 = (INT32) wsptr[1];
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 8011250:	f242 7b31 	movw	fp, #10033	; 0x2731
    outptr = output_buf[ctr] + output_col;
 8011254:	f855 9f04 	ldr.w	r9, [r5, #4]!
			    & RANGE_MASK];
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 3;		/* advance pointer to next row */
 8011258:	310c      	adds	r1, #12
    outptr = output_buf[ctr] + output_col;
 801125a:	9a14      	ldr	r2, [sp, #80]	; 0x50
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 801125c:	f851 0c04 	ldr.w	r0, [r1, #-4]
  for (ctr = 0; ctr < 3; ctr++) {
 8011260:	42ab      	cmp	r3, r5
    outptr = output_buf[ctr] + output_col;
 8011262:	eb09 0602 	add.w	r6, r9, r2
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8011266:	f851 2c0c 	ldr.w	r2, [r1, #-12]
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 801126a:	fb0c f000 	mul.w	r0, ip, r0
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 801126e:	f851 4c08 	ldr.w	r4, [r1, #-8]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8011272:	f102 0210 	add.w	r2, r2, #16
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8011276:	9f14      	ldr	r7, [sp, #80]	; 0x50
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 8011278:	fb0b f404 	mul.w	r4, fp, r4
    tmp10 = tmp0 + tmp12;
 801127c:	eb00 3842 	add.w	r8, r0, r2, lsl #13
    tmp2 = tmp0 - tmp12 - tmp12;
 8011280:	ebc0 3242 	rsb	r2, r0, r2, lsl #13
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8011284:	eb08 0a04 	add.w	sl, r8, r4
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8011288:	eba8 0804 	sub.w	r8, r8, r4
    tmp2 = tmp0 - tmp12 - tmp12;
 801128c:	eba2 0200 	sub.w	r2, r2, r0
			    & RANGE_MASK];
 8011290:	f3ca 4a89 	ubfx	sl, sl, #18, #10
			    & RANGE_MASK];
 8011294:	f3c8 4889 	ubfx	r8, r8, #18, #10
			    & RANGE_MASK];
 8011298:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 801129c:	f81e a00a 	ldrb.w	sl, [lr, sl]
 80112a0:	f809 a007 	strb.w	sl, [r9, r7]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 80112a4:	f81e 4008 	ldrb.w	r4, [lr, r8]
 80112a8:	70b4      	strb	r4, [r6, #2]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2,
 80112aa:	f81e 2002 	ldrb.w	r2, [lr, r2]
 80112ae:	7072      	strb	r2, [r6, #1]
  for (ctr = 0; ctr < 3; ctr++) {
 80112b0:	d1d0      	bne.n	8011254 <jpeg_idct_3x3+0x90>
  }
}
 80112b2:	b00b      	add	sp, #44	; 0x2c
 80112b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080112b8 <jpeg_idct_2x2>:

GLOBAL(void)
jpeg_idct_2x2 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80112b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
  SHIFT_TEMPS

  /* Pass 1: process columns from input. */

  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 80112bc:	6d4f      	ldr	r7, [r1, #84]	; 0x54
{
 80112be:	4698      	mov	r8, r3
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80112c0:	f8d0 514c 	ldr.w	r5, [r0, #332]	; 0x14c

  /* Column 0 */
  tmp4 = DEQUANTIZE(coef_block[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80112c4:	f9b2 1000 	ldrsh.w	r1, [r2]
 80112c8:	6838      	ldr	r0, [r7, #0]
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80112ca:	3580      	adds	r5, #128	; 0x80
  tmp5 = DEQUANTIZE(coef_block[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80112cc:	f9b2 4010 	ldrsh.w	r4, [r2, #16]
  tmp4 = DEQUANTIZE(coef_block[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80112d0:	4341      	muls	r1, r0
  tmp5 = DEQUANTIZE(coef_block[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80112d2:	6a38      	ldr	r0, [r7, #32]

  tmp0 = tmp4 + tmp5;
  tmp2 = tmp4 - tmp5;

  /* Column 1 */
  tmp4 = DEQUANTIZE(coef_block[DCTSIZE*0+1], quantptr[DCTSIZE*0+1]);
 80112d4:	687b      	ldr	r3, [r7, #4]
  tmp5 = DEQUANTIZE(coef_block[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80112d6:	4344      	muls	r4, r0
  tmp4 += ONE << 2;
 80112d8:	3104      	adds	r1, #4
  tmp5 = DEQUANTIZE(coef_block[DCTSIZE*1+1], quantptr[DCTSIZE*1+1]);
 80112da:	6a7f      	ldr	r7, [r7, #36]	; 0x24
  tmp0 = tmp4 + tmp5;
 80112dc:	1860      	adds	r0, r4, r1
  tmp2 = tmp4 - tmp5;
 80112de:	1b09      	subs	r1, r1, r4
  tmp4 = DEQUANTIZE(coef_block[DCTSIZE*0+1], quantptr[DCTSIZE*0+1]);
 80112e0:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
  tmp5 = DEQUANTIZE(coef_block[DCTSIZE*1+1], quantptr[DCTSIZE*1+1]);
 80112e4:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
  tmp4 = DEQUANTIZE(coef_block[DCTSIZE*0+1], quantptr[DCTSIZE*0+1]);
 80112e8:	435c      	muls	r4, r3
  tmp3 = tmp4 - tmp5;

  /* Pass 2: process 2 rows, store into output array. */

  /* Row 0 */
  outptr = output_buf[0] + output_col;
 80112ea:	f8d8 c000 	ldr.w	ip, [r8]
  tmp5 = DEQUANTIZE(coef_block[DCTSIZE*1+1], quantptr[DCTSIZE*1+1]);
 80112ee:	437a      	muls	r2, r7
{
 80112f0:	9e06      	ldr	r6, [sp, #24]
  tmp1 = tmp4 + tmp5;
 80112f2:	18a7      	adds	r7, r4, r2
  tmp3 = tmp4 - tmp5;
 80112f4:	1aa2      	subs	r2, r4, r2
  outptr = output_buf[0] + output_col;
 80112f6:	eb0c 0e06 	add.w	lr, ip, r6

  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp0 + tmp1, 3) & RANGE_MASK];
 80112fa:	19c4      	adds	r4, r0, r7
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp0 - tmp1, 3) & RANGE_MASK];
 80112fc:	1bc0      	subs	r0, r0, r7

  /* Row 1 */
  outptr = output_buf[1] + output_col;

  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp2 + tmp3, 3) & RANGE_MASK];
 80112fe:	188b      	adds	r3, r1, r2
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2 - tmp3, 3) & RANGE_MASK];
 8011300:	1a89      	subs	r1, r1, r2
  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp0 + tmp1, 3) & RANGE_MASK];
 8011302:	f3c4 04c9 	ubfx	r4, r4, #3, #10
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp0 - tmp1, 3) & RANGE_MASK];
 8011306:	f3c0 00c9 	ubfx	r0, r0, #3, #10
  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp2 + tmp3, 3) & RANGE_MASK];
 801130a:	f3c3 03c9 	ubfx	r3, r3, #3, #10
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2 - tmp3, 3) & RANGE_MASK];
 801130e:	f3c1 01c9 	ubfx	r1, r1, #3, #10
  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp0 + tmp1, 3) & RANGE_MASK];
 8011312:	5d2c      	ldrb	r4, [r5, r4]
 8011314:	f80c 4006 	strb.w	r4, [ip, r6]
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp0 - tmp1, 3) & RANGE_MASK];
 8011318:	5c28      	ldrb	r0, [r5, r0]
 801131a:	f88e 0001 	strb.w	r0, [lr, #1]
  outptr = output_buf[1] + output_col;
 801131e:	f8d8 0004 	ldr.w	r0, [r8, #4]
  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp2 + tmp3, 3) & RANGE_MASK];
 8011322:	5ceb      	ldrb	r3, [r5, r3]
  outptr = output_buf[1] + output_col;
 8011324:	1984      	adds	r4, r0, r6
  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp2 + tmp3, 3) & RANGE_MASK];
 8011326:	5583      	strb	r3, [r0, r6]
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2 - tmp3, 3) & RANGE_MASK];
 8011328:	5c6b      	ldrb	r3, [r5, r1]
 801132a:	7063      	strb	r3, [r4, #1]
}
 801132c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011330 <jpeg_idct_1x1>:
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
  SHIFT_TEMPS

  /* 1x1 is trivial: just take the DC coefficient divided by 8. */
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  dcval = DEQUANTIZE(coef_block[0], quantptr[0]);
 8011330:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8011332:	f9b2 2000 	ldrsh.w	r2, [r2]
 8011336:	6809      	ldr	r1, [r1, #0]
 8011338:	434a      	muls	r2, r1
  dcval = (int) DESCALE((INT32) dcval, 3);

  output_buf[0][output_col] = range_limit[dcval & RANGE_MASK];
 801133a:	f8d0 114c 	ldr.w	r1, [r0, #332]	; 0x14c
  dcval = (int) DESCALE((INT32) dcval, 3);
 801133e:	3204      	adds	r2, #4
  output_buf[0][output_col] = range_limit[dcval & RANGE_MASK];
 8011340:	f3c2 02c9 	ubfx	r2, r2, #3, #10
 8011344:	440a      	add	r2, r1
 8011346:	f892 1080 	ldrb.w	r1, [r2, #128]	; 0x80
 801134a:	681a      	ldr	r2, [r3, #0]
 801134c:	9b00      	ldr	r3, [sp, #0]
 801134e:	54d1      	strb	r1, [r2, r3]
}
 8011350:	4770      	bx	lr
	...

08011354 <jpeg_idct_9x9>:

GLOBAL(void)
jpeg_idct_9x9 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8011354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011358:	b0d1      	sub	sp, #324	; 0x144
 801135a:	6d4c      	ldr	r4, [r1, #84]	; 0x54
 801135c:	1e96      	subs	r6, r2, #2
 801135e:	9306      	str	r3, [sp, #24]
 8011360:	3c04      	subs	r4, #4
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8011362:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 8011366:	a808      	add	r0, sp, #32
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8011368:	f103 0a80 	add.w	sl, r3, #128	; 0x80
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801136c:	f102 030e 	add.w	r3, r2, #14
 8011370:	9307      	str	r3, [sp, #28]
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011372:	f936 5f02 	ldrsh.w	r5, [r6, #2]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011376:	3004      	adds	r0, #4
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011378:	f854 3f04 	ldr.w	r3, [r4, #4]!
    tmp0 <<= CONST_BITS;
    /* Add fudge factor here for final descale. */
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);

    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801137c:	f9b6 1020 	ldrsh.w	r1, [r6, #32]
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011380:	435d      	muls	r5, r3
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8011382:	6c23      	ldr	r3, [r4, #64]	; 0x40
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011384:	f9b6 2040 	ldrsh.w	r2, [r6, #64]	; 0x40
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8011388:	4359      	muls	r1, r3
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801138a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801138e:	f8d4 70c0 	ldr.w	r7, [r4, #192]	; 0xc0
    tmp0 <<= CONST_BITS;
 8011392:	036d      	lsls	r5, r5, #13
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011394:	435a      	muls	r2, r3
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8011396:	f9b6 3060 	ldrsh.w	r3, [r6, #96]	; 0x60
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 801139a:	f505 6580 	add.w	r5, r5, #1024	; 0x400

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801139e:	f9b6 c050 	ldrsh.w	ip, [r6, #80]	; 0x50
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80113a2:	437b      	muls	r3, r7
    tmp3 = MULTIPLY(z3, FIX(0.707106781));      /* c6 */
 80113a4:	f241 67a1 	movw	r7, #5793	; 0x16a1
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80113a8:	f9b6 e070 	ldrsh.w	lr, [r6, #112]	; 0x70
    tmp3 = MULTIPLY(z3, FIX(0.707106781));      /* c6 */
 80113ac:	437b      	muls	r3, r7
    tmp1 = tmp0 + tmp3;
 80113ae:	18ef      	adds	r7, r5, r3
    tmp2 = tmp0 - tmp3 - tmp3;
 80113b0:	eba5 0343 	sub.w	r3, r5, r3, lsl #1
    tmp0 = MULTIPLY(z1 - z2, FIX(0.707106781)); /* c6 */
 80113b4:	f241 65a1 	movw	r5, #5793	; 0x16a1
    tmp2 = tmp0 - tmp3 - tmp3;
 80113b8:	9301      	str	r3, [sp, #4]
    tmp0 = MULTIPLY(z1 - z2, FIX(0.707106781)); /* c6 */
 80113ba:	1a8b      	subs	r3, r1, r2
 80113bc:	436b      	muls	r3, r5
 80113be:	9302      	str	r3, [sp, #8]
    tmp11 = tmp2 + tmp0;
 80113c0:	e9dd 3501 	ldrd	r3, r5, [sp, #4]
 80113c4:	442b      	add	r3, r5
    tmp0 = MULTIPLY(z1 + z2, FIX(1.328926049)); /* c2 */
 80113c6:	f642 2587 	movw	r5, #10887	; 0x2a87
    tmp11 = tmp2 + tmp0;
 80113ca:	9303      	str	r3, [sp, #12]
    tmp0 = MULTIPLY(z1 + z2, FIX(1.328926049)); /* c2 */
 80113cc:	188b      	adds	r3, r1, r2
 80113ce:	436b      	muls	r3, r5
    tmp2 = MULTIPLY(z1, FIX(1.083350441));      /* c4 */
 80113d0:	f242 25ab 	movw	r5, #8875	; 0x22ab
 80113d4:	4369      	muls	r1, r5
    tmp3 = MULTIPLY(z2, FIX(0.245575608));      /* c8 */
 80113d6:	f240 75dc 	movw	r5, #2012	; 0x7dc
 80113da:	436a      	muls	r2, r5
    tmp10 = tmp1 + tmp0 - tmp3;
 80113dc:	18fd      	adds	r5, r7, r3
    tmp12 = tmp1 - tmp0 + tmp2;
 80113de:	1afb      	subs	r3, r7, r3
    tmp10 = tmp1 + tmp0 - tmp3;
 80113e0:	1aad      	subs	r5, r5, r2
    tmp12 = tmp1 - tmp0 + tmp2;
 80113e2:	440b      	add	r3, r1
    tmp13 = tmp1 - tmp2 + tmp3;
 80113e4:	1a79      	subs	r1, r7, r1
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80113e6:	f9b6 7030 	ldrsh.w	r7, [r6, #48]	; 0x30
    tmp13 = tmp1 - tmp2 + tmp3;
 80113ea:	188a      	adds	r2, r1, r2
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80113ec:	f9b6 1010 	ldrsh.w	r1, [r6, #16]
    tmp12 = tmp1 - tmp0 + tmp2;
 80113f0:	9304      	str	r3, [sp, #16]
    tmp13 = tmp1 - tmp2 + tmp3;
 80113f2:	9205      	str	r2, [sp, #20]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80113f4:	6a22      	ldr	r2, [r4, #32]

    z2 = MULTIPLY(z2, - FIX(1.224744871));           /* -c3 */
 80113f6:	4b89      	ldr	r3, [pc, #548]	; (801161c <jpeg_idct_9x9+0x2c8>)
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80113f8:	4351      	muls	r1, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80113fa:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80113fc:	437a      	muls	r2, r7
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80113fe:	f8d4 70a0 	ldr.w	r7, [r4, #160]	; 0xa0
 8011402:	fb07 fc0c 	mul.w	ip, r7, ip
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8011406:	f8d4 70e0 	ldr.w	r7, [r4, #224]	; 0xe0
    z2 = MULTIPLY(z2, - FIX(1.224744871));           /* -c3 */
 801140a:	435a      	muls	r2, r3

    tmp2 = MULTIPLY(z1 + z3, FIX(0.909038955));      /* c5 */
 801140c:	f641 5317 	movw	r3, #7447	; 0x1d17
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8011410:	fb07 f70e 	mul.w	r7, r7, lr
    tmp2 = MULTIPLY(z1 + z3, FIX(0.909038955));      /* c5 */
 8011414:	eb01 0b0c 	add.w	fp, r1, ip
    tmp3 = MULTIPLY(z1 + z4, FIX(0.483689525));      /* c7 */
 8011418:	eb01 0907 	add.w	r9, r1, r7
    tmp2 = MULTIPLY(z1 + z3, FIX(0.909038955));      /* c5 */
 801141c:	fb03 fb0b 	mul.w	fp, r3, fp
    tmp3 = MULTIPLY(z1 + z4, FIX(0.483689525));      /* c7 */
 8011420:	f640 737a 	movw	r3, #3962	; 0xf7a
    tmp0 = tmp2 + tmp3 - z2;
    tmp1 = MULTIPLY(z3 - z4, FIX(1.392728481));      /* c1 */
 8011424:	ebac 0e07 	sub.w	lr, ip, r7
    tmp2 += z2 - tmp1;
    tmp3 += z2 + tmp1;
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 8011428:	eba1 0c0c 	sub.w	ip, r1, ip
    tmp3 = MULTIPLY(z1 + z4, FIX(0.483689525));      /* c7 */
 801142c:	fb03 f909 	mul.w	r9, r3, r9
    tmp1 = MULTIPLY(z3 - z4, FIX(1.392728481));      /* c1 */
 8011430:	f642 4391 	movw	r3, #11409	; 0x2c91
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 8011434:	ebac 0707 	sub.w	r7, ip, r7
    tmp0 = tmp2 + tmp3 - z2;
 8011438:	eb0b 0809 	add.w	r8, fp, r9
    tmp1 = MULTIPLY(z3 - z4, FIX(1.392728481));      /* c1 */
 801143c:	fb03 f30e 	mul.w	r3, r3, lr
    tmp0 = tmp2 + tmp3 - z2;
 8011440:	eba8 0802 	sub.w	r8, r8, r2
    tmp2 += z2 - tmp1;
 8011444:	eba2 0e03 	sub.w	lr, r2, r3
    tmp3 += z2 + tmp1;
 8011448:	441a      	add	r2, r3
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 801144a:	f242 7331 	movw	r3, #10033	; 0x2731

    /* Final output stage */

    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 801144e:	eb05 0108 	add.w	r1, r5, r8
    tmp2 += z2 - tmp1;
 8011452:	44de      	add	lr, fp
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 8011454:	435f      	muls	r7, r3
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 8011456:	9b03      	ldr	r3, [sp, #12]
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8011458:	12c9      	asrs	r1, r1, #11
    tmp3 += z2 + tmp1;
 801145a:	444a      	add	r2, r9
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 801145c:	eba5 0508 	sub.w	r5, r5, r8
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8011460:	f840 1c04 	str.w	r1, [r0, #-4]
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 8011464:	19d9      	adds	r1, r3, r7
    wsptr[8*7] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 8011466:	1bdf      	subs	r7, r3, r7
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8011468:	9b04      	ldr	r3, [sp, #16]
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 801146a:	12c9      	asrs	r1, r1, #11
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 801146c:	12ed      	asrs	r5, r5, #11
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 801146e:	61c1      	str	r1, [r0, #28]
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8011470:	eb03 010e 	add.w	r1, r3, lr
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 8011474:	eba3 0e0e 	sub.w	lr, r3, lr
    wsptr[8*7] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 8011478:	12ff      	asrs	r7, r7, #11
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 801147a:	12c9      	asrs	r1, r1, #11
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 801147c:	f8c0 50fc 	str.w	r5, [r0, #252]	; 0xfc
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 8011480:	ea4f 23ee 	mov.w	r3, lr, asr #11
    wsptr[8*7] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 8011484:	f8c0 70dc 	str.w	r7, [r0, #220]	; 0xdc
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8011488:	63c1      	str	r1, [r0, #60]	; 0x3c
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 801148a:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp13 + tmp3, CONST_BITS-PASS1_BITS);
 801148e:	9b05      	ldr	r3, [sp, #20]
 8011490:	4413      	add	r3, r2
 8011492:	12db      	asrs	r3, r3, #11
 8011494:	65c3      	str	r3, [r0, #92]	; 0x5c
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp13 - tmp3, CONST_BITS-PASS1_BITS);
 8011496:	9b05      	ldr	r3, [sp, #20]
 8011498:	1a9a      	subs	r2, r3, r2
 801149a:	12d2      	asrs	r2, r2, #11
 801149c:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
    tmp14 = tmp2 - tmp0 - tmp0;
 80114a0:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
 80114a4:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp14, CONST_BITS-PASS1_BITS);
 80114a8:	12db      	asrs	r3, r3, #11
 80114aa:	67c3      	str	r3, [r0, #124]	; 0x7c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80114ac:	9b07      	ldr	r3, [sp, #28]
 80114ae:	42b3      	cmp	r3, r6
 80114b0:	f47f af5f 	bne.w	8011372 <jpeg_idct_9x9+0x1e>
 80114b4:	9b06      	ldr	r3, [sp, #24]
  }

  /* Pass 2: process 9 rows from work array, store into output array. */

  wsptr = workspace;
 80114b6:	aa08      	add	r2, sp, #32
 80114b8:	3b04      	subs	r3, #4
 80114ba:	9301      	str	r3, [sp, #4]
 80114bc:	9b06      	ldr	r3, [sp, #24]
 80114be:	3320      	adds	r3, #32
 80114c0:	9307      	str	r3, [sp, #28]
  for (ctr = 0; ctr < 9; ctr++) {
    outptr = output_buf[ctr] + output_col;
 80114c2:	9b01      	ldr	r3, [sp, #4]

    z1 = (INT32) wsptr[2];
    z2 = (INT32) wsptr[4];
    z3 = (INT32) wsptr[6];

    tmp3 = MULTIPLY(z3, FIX(0.707106781));      /* c6 */
 80114c4:	f241 6ca1 	movw	ip, #5793	; 0x16a1
    z1 = (INT32) wsptr[2];
 80114c8:	6890      	ldr	r0, [r2, #8]
			    & RANGE_MASK];
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp14,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 80114ca:	3220      	adds	r2, #32
    outptr = output_buf[ctr] + output_col;
 80114cc:	f853 1f04 	ldr.w	r1, [r3, #4]!
    z4 = (INT32) wsptr[7];
 80114d0:	f852 9c04 	ldr.w	r9, [r2, #-4]
    outptr = output_buf[ctr] + output_col;
 80114d4:	9106      	str	r1, [sp, #24]
 80114d6:	9301      	str	r3, [sp, #4]
 80114d8:	460b      	mov	r3, r1
 80114da:	995a      	ldr	r1, [sp, #360]	; 0x168
 80114dc:	185c      	adds	r4, r3, r1
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80114de:	f852 3c20 	ldr.w	r3, [r2, #-32]
    z2 = (INT32) wsptr[4];
 80114e2:	f852 1c10 	ldr.w	r1, [r2, #-16]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80114e6:	f103 0510 	add.w	r5, r3, #16
    tmp3 = MULTIPLY(z3, FIX(0.707106781));      /* c6 */
 80114ea:	f852 3c08 	ldr.w	r3, [r2, #-8]
 80114ee:	fb0c f603 	mul.w	r6, ip, r3
    tmp2 = tmp0 - tmp3 - tmp3;
 80114f2:	ebc6 3345 	rsb	r3, r6, r5, lsl #13
    tmp1 = tmp0 + tmp3;
 80114f6:	eb06 3745 	add.w	r7, r6, r5, lsl #13
    tmp0 = MULTIPLY(z1 + z2, FIX(1.328926049)); /* c2 */
 80114fa:	f642 2587 	movw	r5, #10887	; 0x2a87
    tmp2 = tmp0 - tmp3 - tmp3;
 80114fe:	1b9e      	subs	r6, r3, r6
    tmp0 = MULTIPLY(z1 - z2, FIX(0.707106781)); /* c6 */
 8011500:	1a43      	subs	r3, r0, r1
 8011502:	fb0c f303 	mul.w	r3, ip, r3
 8011506:	9302      	str	r3, [sp, #8]
    tmp11 = tmp2 + tmp0;
 8011508:	18f3      	adds	r3, r6, r3
 801150a:	9303      	str	r3, [sp, #12]
    tmp0 = MULTIPLY(z1 + z2, FIX(1.328926049)); /* c2 */
 801150c:	1843      	adds	r3, r0, r1
 801150e:	436b      	muls	r3, r5
    tmp2 = MULTIPLY(z1, FIX(1.083350441));      /* c4 */
 8011510:	f242 25ab 	movw	r5, #8875	; 0x22ab
 8011514:	4368      	muls	r0, r5
    tmp3 = MULTIPLY(z2, FIX(0.245575608));      /* c8 */
 8011516:	f240 75dc 	movw	r5, #2012	; 0x7dc
 801151a:	4369      	muls	r1, r5
    tmp10 = tmp1 + tmp0 - tmp3;
 801151c:	18fd      	adds	r5, r7, r3
    tmp12 = tmp1 - tmp0 + tmp2;
 801151e:	1afb      	subs	r3, r7, r3
    tmp10 = tmp1 + tmp0 - tmp3;
 8011520:	1a6d      	subs	r5, r5, r1
    tmp12 = tmp1 - tmp0 + tmp2;
 8011522:	4403      	add	r3, r0
    tmp13 = tmp1 - tmp2 + tmp3;
 8011524:	1a38      	subs	r0, r7, r0
    z2 = MULTIPLY(z2, - FIX(1.224744871));           /* -c3 */
 8011526:	4f3d      	ldr	r7, [pc, #244]	; (801161c <jpeg_idct_9x9+0x2c8>)
    tmp13 = tmp1 - tmp2 + tmp3;
 8011528:	1841      	adds	r1, r0, r1
    z1 = (INT32) wsptr[1];
 801152a:	f852 0c1c 	ldr.w	r0, [r2, #-28]
    tmp12 = tmp1 - tmp0 + tmp2;
 801152e:	9304      	str	r3, [sp, #16]
    tmp2 = MULTIPLY(z1 + z3, FIX(0.909038955));      /* c5 */
 8011530:	f641 5317 	movw	r3, #7447	; 0x1d17
    tmp13 = tmp1 - tmp2 + tmp3;
 8011534:	9105      	str	r1, [sp, #20]
    tmp3 = MULTIPLY(z1 + z4, FIX(0.483689525));      /* c7 */
 8011536:	eb00 0e09 	add.w	lr, r0, r9
    z2 = (INT32) wsptr[3];
 801153a:	f852 1c14 	ldr.w	r1, [r2, #-20]
    z2 = MULTIPLY(z2, - FIX(1.224744871));           /* -c3 */
 801153e:	4379      	muls	r1, r7
    tmp2 = MULTIPLY(z1 + z3, FIX(0.909038955));      /* c5 */
 8011540:	f852 7c0c 	ldr.w	r7, [r2, #-12]
 8011544:	eb00 0b07 	add.w	fp, r0, r7
    tmp1 = MULTIPLY(z3 - z4, FIX(1.392728481));      /* c1 */
 8011548:	eba7 0809 	sub.w	r8, r7, r9
    tmp2 = MULTIPLY(z1 + z3, FIX(0.909038955));      /* c5 */
 801154c:	fb03 fb0b 	mul.w	fp, r3, fp
    tmp3 = MULTIPLY(z1 + z4, FIX(0.483689525));      /* c7 */
 8011550:	f640 737a 	movw	r3, #3962	; 0xf7a
 8011554:	fb03 fe0e 	mul.w	lr, r3, lr
    tmp1 = MULTIPLY(z3 - z4, FIX(1.392728481));      /* c1 */
 8011558:	f642 4391 	movw	r3, #11409	; 0x2c91
    tmp0 = tmp2 + tmp3 - z2;
 801155c:	eb0b 0c0e 	add.w	ip, fp, lr
    tmp1 = MULTIPLY(z3 - z4, FIX(1.392728481));      /* c1 */
 8011560:	fb03 f808 	mul.w	r8, r3, r8
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 8011564:	f852 3c0c 	ldr.w	r3, [r2, #-12]
    tmp0 = tmp2 + tmp3 - z2;
 8011568:	ebac 0c01 	sub.w	ip, ip, r1
    tmp2 += z2 - tmp1;
 801156c:	eba1 0708 	sub.w	r7, r1, r8
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 8011570:	1ac0      	subs	r0, r0, r3
    tmp3 += z2 + tmp1;
 8011572:	4441      	add	r1, r8
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 8011574:	f242 7331 	movw	r3, #10033	; 0x2731
    tmp2 += z2 - tmp1;
 8011578:	445f      	add	r7, fp
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 801157a:	eba0 0909 	sub.w	r9, r0, r9
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 801157e:	eb05 000c 	add.w	r0, r5, ip
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8011582:	eba5 050c 	sub.w	r5, r5, ip
    tmp3 += z2 + tmp1;
 8011586:	448e      	add	lr, r1
			    & RANGE_MASK];
 8011588:	f3c0 4089 	ubfx	r0, r0, #18, #10
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 801158c:	fb03 f909 	mul.w	r9, r3, r9
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8011590:	995a      	ldr	r1, [sp, #360]	; 0x168
			    & RANGE_MASK];
 8011592:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8011596:	f81a 0000 	ldrb.w	r0, [sl, r0]
 801159a:	9b06      	ldr	r3, [sp, #24]
 801159c:	5458      	strb	r0, [r3, r1]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 801159e:	9b03      	ldr	r3, [sp, #12]
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 80115a0:	f81a 0005 	ldrb.w	r0, [sl, r5]
 80115a4:	7220      	strb	r0, [r4, #8]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 80115a6:	eb03 0009 	add.w	r0, r3, r9
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 80115aa:	eba3 0909 	sub.w	r9, r3, r9
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 80115ae:	9b04      	ldr	r3, [sp, #16]
			    & RANGE_MASK];
 80115b0:	f3c0 4089 	ubfx	r0, r0, #18, #10
			    & RANGE_MASK];
 80115b4:	f3c9 4989 	ubfx	r9, r9, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 80115b8:	f81a 0000 	ldrb.w	r0, [sl, r0]
 80115bc:	7060      	strb	r0, [r4, #1]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 80115be:	f81a 0009 	ldrb.w	r0, [sl, r9]
 80115c2:	71e0      	strb	r0, [r4, #7]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 80115c4:	19d8      	adds	r0, r3, r7
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 80115c6:	1bdf      	subs	r7, r3, r7
			    & RANGE_MASK];
 80115c8:	f3c0 4089 	ubfx	r0, r0, #18, #10
			    & RANGE_MASK];
 80115cc:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 80115d0:	f81a 0000 	ldrb.w	r0, [sl, r0]
 80115d4:	70a0      	strb	r0, [r4, #2]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 80115d6:	f81a 3007 	ldrb.w	r3, [sl, r7]
 80115da:	71a3      	strb	r3, [r4, #6]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp3,
 80115dc:	9b05      	ldr	r3, [sp, #20]
 80115de:	4473      	add	r3, lr
			    & RANGE_MASK];
 80115e0:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp3,
 80115e4:	f81a 3003 	ldrb.w	r3, [sl, r3]
 80115e8:	70e3      	strb	r3, [r4, #3]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp3,
 80115ea:	9b05      	ldr	r3, [sp, #20]
 80115ec:	eba3 010e 	sub.w	r1, r3, lr
			    & RANGE_MASK];
 80115f0:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp3,
 80115f4:	f81a 3001 	ldrb.w	r3, [sl, r1]
  for (ctr = 0; ctr < 9; ctr++) {
 80115f8:	9901      	ldr	r1, [sp, #4]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp3,
 80115fa:	7163      	strb	r3, [r4, #5]
    tmp14 = tmp2 - tmp0 - tmp0;
 80115fc:	9b02      	ldr	r3, [sp, #8]
 80115fe:	eba6 0343 	sub.w	r3, r6, r3, lsl #1
			    & RANGE_MASK];
 8011602:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp14,
 8011606:	f81a 3003 	ldrb.w	r3, [sl, r3]
 801160a:	7123      	strb	r3, [r4, #4]
  for (ctr = 0; ctr < 9; ctr++) {
 801160c:	9b07      	ldr	r3, [sp, #28]
 801160e:	428b      	cmp	r3, r1
 8011610:	f47f af57 	bne.w	80114c2 <jpeg_idct_9x9+0x16e>
  }
}
 8011614:	b051      	add	sp, #324	; 0x144
 8011616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801161a:	bf00      	nop
 801161c:	ffffd8cf 	.word	0xffffd8cf

08011620 <jpeg_idct_10x10>:

GLOBAL(void)
jpeg_idct_10x10 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8011620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3, z4, z5;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8011624:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
{
 8011628:	b0d7      	sub	sp, #348	; 0x15c
 801162a:	6d4c      	ldr	r4, [r1, #84]	; 0x54
 801162c:	f1a2 0b02 	sub.w	fp, r2, #2
 8011630:	9303      	str	r3, [sp, #12]
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8011632:	f100 0380 	add.w	r3, r0, #128	; 0x80
 8011636:	3c04      	subs	r4, #4

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 8011638:	a906      	add	r1, sp, #24
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801163a:	9300      	str	r3, [sp, #0]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801163c:	f102 030e 	add.w	r3, r2, #14
 8011640:	9305      	str	r3, [sp, #20]
    /* Even part */

    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011642:	f93b 6f02 	ldrsh.w	r6, [fp, #2]!
			CONST_BITS-PASS1_BITS);

    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 8011646:	f641 209a 	movw	r0, #6810	; 0x1a9a
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801164a:	f854 3f04 	ldr.w	r3, [r4, #4]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801164e:	3104      	adds	r1, #4
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011650:	f9bb 2040 	ldrsh.w	r2, [fp, #64]	; 0x40
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011654:	435e      	muls	r6, r3
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011656:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801165a:	f9bb e050 	ldrsh.w	lr, [fp, #80]	; 0x50
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801165e:	4353      	muls	r3, r2
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 8011660:	f242 429d 	movw	r2, #9373	; 0x249d
    z3 <<= CONST_BITS;
 8011664:	0376      	lsls	r6, r6, #13
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 8011666:	fb02 f703 	mul.w	r7, r2, r3
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 801166a:	f640 52fc 	movw	r2, #3580	; 0xdfc
    z3 += ONE << (CONST_BITS-PASS1_BITS-1);
 801166e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 8011672:	4353      	muls	r3, r2
    tmp10 = z3 + z1;
 8011674:	19f5      	adds	r5, r6, r7
    tmp11 = z3 - z2;
 8011676:	1af2      	subs	r2, r6, r3
    tmp22 = RIGHT_SHIFT(z3 - ((z1 - z2) << 1),   /* c0 = (c4-c8)*2 */
 8011678:	1afb      	subs	r3, r7, r3
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801167a:	f9bb 7060 	ldrsh.w	r7, [fp, #96]	; 0x60
    tmp22 = RIGHT_SHIFT(z3 - ((z1 - z2) << 1),   /* c0 = (c4-c8)*2 */
 801167e:	eba6 0343 	sub.w	r3, r6, r3, lsl #1
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8011682:	f9bb 6020 	ldrsh.w	r6, [fp, #32]
    tmp22 = RIGHT_SHIFT(z3 - ((z1 - z2) << 1),   /* c0 = (c4-c8)*2 */
 8011686:	9304      	str	r3, [sp, #16]
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8011688:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801168a:	435e      	muls	r6, r3
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801168c:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 8011690:	435f      	muls	r7, r3
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 8011692:	19f3      	adds	r3, r6, r7
 8011694:	4343      	muls	r3, r0
    tmp12 = z1 + MULTIPLY(z2, FIX(0.513743148)); /* c2-c6 */
 8011696:	f241 0071 	movw	r0, #4209	; 0x1071
 801169a:	fb00 3606 	mla	r6, r0, r6, r3
    tmp13 = z1 - MULTIPLY(z3, FIX(2.176250899)); /* c2+c6 */
 801169e:	489d      	ldr	r0, [pc, #628]	; (8011914 <jpeg_idct_10x10+0x2f4>)
 80116a0:	fb00 3307 	mla	r3, r0, r7, r3
    tmp20 = tmp10 + tmp12;
 80116a4:	eb05 0c06 	add.w	ip, r5, r6
    tmp24 = tmp10 - tmp12;
 80116a8:	1ba8      	subs	r0, r5, r6
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80116aa:	f9bb 5030 	ldrsh.w	r5, [fp, #48]	; 0x30
    tmp21 = tmp11 + tmp13;
 80116ae:	18d7      	adds	r7, r2, r3
    tmp23 = tmp11 - tmp13;
 80116b0:	1ad3      	subs	r3, r2, r3
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80116b2:	f9bb 2010 	ldrsh.w	r2, [fp, #16]
    tmp23 = tmp11 - tmp13;
 80116b6:	9302      	str	r3, [sp, #8]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80116b8:	6a23      	ldr	r3, [r4, #32]
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80116ba:	f9bb 6070 	ldrsh.w	r6, [fp, #112]	; 0x70
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80116be:	435a      	muls	r2, r3
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80116c0:	6e23      	ldr	r3, [r4, #96]	; 0x60
    tmp24 = tmp10 - tmp12;
 80116c2:	9001      	str	r0, [sp, #4]

    tmp11 = z2 + z4;
    tmp13 = z2 - z4;

    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 80116c4:	f640 10e3 	movw	r0, #2531	; 0x9e3
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80116c8:	436b      	muls	r3, r5
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80116ca:	f8d4 50a0 	ldr.w	r5, [r4, #160]	; 0xa0
 80116ce:	fb05 fe0e 	mul.w	lr, r5, lr
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80116d2:	f8d4 50e0 	ldr.w	r5, [r4, #224]	; 0xe0
 80116d6:	4375      	muls	r5, r6
    tmp11 = z2 + z4;
 80116d8:	eb03 0905 	add.w	r9, r3, r5
    tmp13 = z2 - z4;
 80116dc:	1b5b      	subs	r3, r3, r5
    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 80116de:	fb00 f503 	mul.w	r5, r0, r3
    z5 = z3 << CONST_BITS;

    z2 = MULTIPLY(tmp11, FIX(0.951056516));           /* (c3+c7)/2 */
 80116e2:	f641 606f 	movw	r0, #7791	; 0x1e6f
 80116e6:	fb00 f609 	mul.w	r6, r0, r9
    z4 = z5 + tmp12;

    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 80116ea:	f642 40b3 	movw	r0, #11443	; 0x2cb3
    z4 = z5 + tmp12;
 80116ee:	eb05 3a4e 	add.w	sl, r5, lr, lsl #13
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 80116f2:	fb00 6802 	mla	r8, r0, r2, r6
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 80116f6:	f240 7014 	movw	r0, #1812	; 0x714

    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
    z4 = z5 - tmp12 - (tmp13 << (CONST_BITS - 1));
 80116fa:	ebc5 354e 	rsb	r5, r5, lr, lsl #13
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 80116fe:	4350      	muls	r0, r2
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8011700:	44d0      	add	r8, sl
    z4 = z5 - tmp12 - (tmp13 << (CONST_BITS - 1));
 8011702:	eba5 3503 	sub.w	r5, r5, r3, lsl #12

    tmp12 = (z1 - tmp13 - z3) << PASS1_BITS;
 8011706:	1ad3      	subs	r3, r2, r3
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8011708:	1b86      	subs	r6, r0, r6
    tmp12 = (z1 - tmp13 - z3) << PASS1_BITS;
 801170a:	eba3 0e0e 	sub.w	lr, r3, lr

    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 801170e:	f642 0353 	movw	r3, #10323	; 0x2853
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8011712:	44b2      	add	sl, r6
    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 8011714:	f241 26cf 	movw	r6, #4815	; 0x12cf
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8011718:	4353      	muls	r3, r2
    tmp12 = (z1 - tmp13 - z3) << PASS1_BITS;
 801171a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 801171e:	fb06 f909 	mul.w	r9, r6, r9
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8011722:	f241 468c 	movw	r6, #5260	; 0x148c
 8011726:	4372      	muls	r2, r6
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8011728:	eba3 0309 	sub.w	r3, r3, r9
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 801172c:	eba2 0909 	sub.w	r9, r2, r9

    /* Final output stage */

    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8011730:	eb0c 0208 	add.w	r2, ip, r8
    wsptr[8*9] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8011734:	ebac 0c08 	sub.w	ip, ip, r8
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8011738:	1b5b      	subs	r3, r3, r5
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 801173a:	12d2      	asrs	r2, r2, #11
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 801173c:	444d      	add	r5, r9
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 801173e:	f841 2c04 	str.w	r2, [r1, #-4]
    wsptr[8*9] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8011742:	ea4f 22ec 	mov.w	r2, ip, asr #11
 8011746:	f8c1 211c 	str.w	r2, [r1, #284]	; 0x11c
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 801174a:	18fa      	adds	r2, r7, r3
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 801174c:	1aff      	subs	r7, r7, r3
    wsptr[8*2] = (int) (tmp22 + tmp12);
 801174e:	9b04      	ldr	r3, [sp, #16]
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8011750:	12d2      	asrs	r2, r2, #11
    wsptr[8*2] = (int) (tmp22 + tmp12);
 8011752:	eb0e 23e3 	add.w	r3, lr, r3, asr #11
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8011756:	12ff      	asrs	r7, r7, #11
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8011758:	61ca      	str	r2, [r1, #28]
    wsptr[8*2] = (int) (tmp22 + tmp12);
 801175a:	63cb      	str	r3, [r1, #60]	; 0x3c
    wsptr[8*7] = (int) (tmp22 - tmp12);
 801175c:	9b04      	ldr	r3, [sp, #16]
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 801175e:	f8c1 70fc 	str.w	r7, [r1, #252]	; 0xfc
    wsptr[8*7] = (int) (tmp22 - tmp12);
 8011762:	ebce 23e3 	rsb	r3, lr, r3, asr #11
 8011766:	f8c1 30dc 	str.w	r3, [r1, #220]	; 0xdc
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 801176a:	9b02      	ldr	r3, [sp, #8]
 801176c:	442b      	add	r3, r5
 801176e:	12db      	asrs	r3, r3, #11
 8011770:	65cb      	str	r3, [r1, #92]	; 0x5c
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8011772:	9b02      	ldr	r3, [sp, #8]
 8011774:	1b5d      	subs	r5, r3, r5
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8011776:	9b01      	ldr	r3, [sp, #4]
 8011778:	4453      	add	r3, sl
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 801177a:	12ed      	asrs	r5, r5, #11
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 801177c:	12db      	asrs	r3, r3, #11
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 801177e:	f8c1 50bc 	str.w	r5, [r1, #188]	; 0xbc
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8011782:	67cb      	str	r3, [r1, #124]	; 0x7c
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8011784:	9b01      	ldr	r3, [sp, #4]
 8011786:	eba3 0a0a 	sub.w	sl, r3, sl
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801178a:	9b05      	ldr	r3, [sp, #20]
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 801178c:	ea4f 26ea 	mov.w	r6, sl, asr #11
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011790:	455b      	cmp	r3, fp
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8011792:	f8c1 609c 	str.w	r6, [r1, #156]	; 0x9c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011796:	f47f af54 	bne.w	8011642 <jpeg_idct_10x10+0x22>
 801179a:	9b03      	ldr	r3, [sp, #12]
  }

  /* Pass 2: process 10 rows from work array, store into output array. */

  wsptr = workspace;
 801179c:	a906      	add	r1, sp, #24
 801179e:	f1a3 0b04 	sub.w	fp, r3, #4
 80117a2:	3324      	adds	r3, #36	; 0x24
 80117a4:	9305      	str	r3, [sp, #20]
  for (ctr = 0; ctr < 10; ctr++) {
    outptr = output_buf[ctr] + output_col;
 80117a6:	f85b 3f04 	ldr.w	r3, [fp, #4]!
    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */

    z2 = (INT32) wsptr[2];
    z3 = (INT32) wsptr[6];

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 80117aa:	f641 209a 	movw	r0, #6810	; 0x1a9a
    outptr = output_buf[ctr] + output_col;
 80117ae:	9a60      	ldr	r2, [sp, #384]	; 0x180
			    & RANGE_MASK];
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 80117b0:	3120      	adds	r1, #32
    z4 = (INT32) wsptr[4];
 80117b2:	f851 7c10 	ldr.w	r7, [r1, #-16]
    outptr = output_buf[ctr] + output_col;
 80117b6:	189c      	adds	r4, r3, r2
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 80117b8:	f242 429d 	movw	r2, #9373	; 0x249d
    outptr = output_buf[ctr] + output_col;
 80117bc:	9304      	str	r3, [sp, #16]
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 80117be:	fb02 f507 	mul.w	r5, r2, r7
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80117c2:	f851 3c20 	ldr.w	r3, [r1, #-32]
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 80117c6:	f640 52fc 	movw	r2, #3580	; 0xdfc
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80117ca:	3310      	adds	r3, #16
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 80117cc:	4357      	muls	r7, r2
    tmp10 = z3 + z1;
 80117ce:	eb05 3643 	add.w	r6, r5, r3, lsl #13
    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */
 80117d2:	1bed      	subs	r5, r5, r7
    tmp11 = z3 - z2;
 80117d4:	ebc7 3243 	rsb	r2, r7, r3, lsl #13
    z3 = (INT32) wsptr[6];
 80117d8:	f851 7c08 	ldr.w	r7, [r1, #-8]
    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */
 80117dc:	006d      	lsls	r5, r5, #1
 80117de:	ebc5 3343 	rsb	r3, r5, r3, lsl #13
    z2 = (INT32) wsptr[2];
 80117e2:	f851 5c18 	ldr.w	r5, [r1, #-24]
    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */
 80117e6:	9301      	str	r3, [sp, #4]
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 80117e8:	19eb      	adds	r3, r5, r7
 80117ea:	4343      	muls	r3, r0
    tmp12 = z1 + MULTIPLY(z2, FIX(0.513743148)); /* c2-c6 */
 80117ec:	f241 0071 	movw	r0, #4209	; 0x1071
 80117f0:	fb00 3505 	mla	r5, r0, r5, r3
    tmp13 = z1 - MULTIPLY(z3, FIX(2.176250899)); /* c2+c6 */
 80117f4:	4847      	ldr	r0, [pc, #284]	; (8011914 <jpeg_idct_10x10+0x2f4>)
 80117f6:	fb00 3307 	mla	r3, r0, r7, r3
    tmp20 = tmp10 + tmp12;
 80117fa:	eb06 0c05 	add.w	ip, r6, r5
    tmp24 = tmp10 - tmp12;
 80117fe:	1b70      	subs	r0, r6, r5
    z2 = (INT32) wsptr[3];
 8011800:	f851 5c14 	ldr.w	r5, [r1, #-20]
    tmp21 = tmp11 + tmp13;
 8011804:	18d7      	adds	r7, r2, r3
    tmp23 = tmp11 - tmp13;
 8011806:	1ad3      	subs	r3, r2, r3
    tmp24 = tmp10 - tmp12;
 8011808:	9002      	str	r0, [sp, #8]
    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 801180a:	f640 10e3 	movw	r0, #2531	; 0x9e3
    tmp23 = tmp11 - tmp13;
 801180e:	9303      	str	r3, [sp, #12]
    z4 = (INT32) wsptr[7];
 8011810:	f851 3c04 	ldr.w	r3, [r1, #-4]
    z1 = (INT32) wsptr[1];
 8011814:	f851 2c1c 	ldr.w	r2, [r1, #-28]
    tmp11 = z2 + z4;
 8011818:	eb05 0903 	add.w	r9, r5, r3
    tmp13 = z2 - z4;
 801181c:	1aeb      	subs	r3, r5, r3
    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 801181e:	fb00 f503 	mul.w	r5, r0, r3
    z2 = MULTIPLY(tmp11, FIX(0.951056516));           /* (c3+c7)/2 */
 8011822:	f641 606f 	movw	r0, #7791	; 0x1e6f
 8011826:	fb00 f809 	mul.w	r8, r0, r9
    z4 = z3 + tmp12;
 801182a:	f851 0c0c 	ldr.w	r0, [r1, #-12]
 801182e:	eb05 3a40 	add.w	sl, r5, r0, lsl #13
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8011832:	f642 40b3 	movw	r0, #11443	; 0x2cb3
 8011836:	fb00 8e02 	mla	lr, r0, r2, r8
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 801183a:	f240 7014 	movw	r0, #1812	; 0x714
 801183e:	fb00 f602 	mul.w	r6, r0, r2
    z4 = z3 - tmp12 - (tmp13 << (CONST_BITS - 1));
 8011842:	f851 0c0c 	ldr.w	r0, [r1, #-12]
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8011846:	44d6      	add	lr, sl
    z4 = z3 - tmp12 - (tmp13 << (CONST_BITS - 1));
 8011848:	ebc5 3540 	rsb	r5, r5, r0, lsl #13
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 801184c:	eba6 0608 	sub.w	r6, r6, r8
    z4 = z3 - tmp12 - (tmp13 << (CONST_BITS - 1));
 8011850:	eba5 3503 	sub.w	r5, r5, r3, lsl #12
    tmp12 = ((z1 - tmp13) << CONST_BITS) - z3;
 8011854:	1ad3      	subs	r3, r2, r3
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8011856:	44b2      	add	sl, r6
    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 8011858:	f241 26cf 	movw	r6, #4815	; 0x12cf
    tmp12 = ((z1 - tmp13) << CONST_BITS) - z3;
 801185c:	035b      	lsls	r3, r3, #13
    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 801185e:	fb06 f909 	mul.w	r9, r6, r9
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8011862:	f241 468c 	movw	r6, #5260	; 0x148c
    tmp12 = ((z1 - tmp13) << CONST_BITS) - z3;
 8011866:	eba3 3840 	sub.w	r8, r3, r0, lsl #13
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 801186a:	f642 0353 	movw	r3, #10323	; 0x2853
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801186e:	9800      	ldr	r0, [sp, #0]
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8011870:	4353      	muls	r3, r2
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8011872:	4372      	muls	r2, r6
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8011874:	9e60      	ldr	r6, [sp, #384]	; 0x180
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8011876:	eba3 0309 	sub.w	r3, r3, r9
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 801187a:	eba2 0909 	sub.w	r9, r2, r9
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801187e:	eb0c 020e 	add.w	r2, ip, lr
    outptr[9] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8011882:	ebac 0c0e 	sub.w	ip, ip, lr
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8011886:	1b5b      	subs	r3, r3, r5
			    & RANGE_MASK];
 8011888:	f3c2 4289 	ubfx	r2, r2, #18, #10
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 801188c:	444d      	add	r5, r9
			    & RANGE_MASK];
 801188e:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8011892:	5c82      	ldrb	r2, [r0, r2]
 8011894:	9804      	ldr	r0, [sp, #16]
 8011896:	5582      	strb	r2, [r0, r6]
    outptr[9] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8011898:	9a00      	ldr	r2, [sp, #0]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801189a:	9800      	ldr	r0, [sp, #0]
    outptr[9] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 801189c:	f812 200c 	ldrb.w	r2, [r2, ip]
 80118a0:	7262      	strb	r2, [r4, #9]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80118a2:	18fa      	adds	r2, r7, r3
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80118a4:	1aff      	subs	r7, r7, r3
			    & RANGE_MASK];
 80118a6:	f3c2 4289 	ubfx	r2, r2, #18, #10
			    & RANGE_MASK];
 80118aa:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80118ae:	5c82      	ldrb	r2, [r0, r2]
 80118b0:	7062      	strb	r2, [r4, #1]
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80118b2:	5dc3      	ldrb	r3, [r0, r7]
 80118b4:	7223      	strb	r3, [r4, #8]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80118b6:	9b01      	ldr	r3, [sp, #4]
 80118b8:	4443      	add	r3, r8
			    & RANGE_MASK];
 80118ba:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80118be:	5cc3      	ldrb	r3, [r0, r3]
 80118c0:	70a3      	strb	r3, [r4, #2]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80118c2:	9b01      	ldr	r3, [sp, #4]
 80118c4:	eba3 0808 	sub.w	r8, r3, r8
			    & RANGE_MASK];
 80118c8:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80118cc:	f810 3008 	ldrb.w	r3, [r0, r8]
 80118d0:	71e3      	strb	r3, [r4, #7]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80118d2:	9b03      	ldr	r3, [sp, #12]
 80118d4:	442b      	add	r3, r5
			    & RANGE_MASK];
 80118d6:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80118da:	5cc3      	ldrb	r3, [r0, r3]
 80118dc:	70e3      	strb	r3, [r4, #3]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80118de:	9b03      	ldr	r3, [sp, #12]
 80118e0:	1b5d      	subs	r5, r3, r5
			    & RANGE_MASK];
 80118e2:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80118e6:	5d43      	ldrb	r3, [r0, r5]
 80118e8:	71a3      	strb	r3, [r4, #6]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80118ea:	9b02      	ldr	r3, [sp, #8]
 80118ec:	4453      	add	r3, sl
			    & RANGE_MASK];
 80118ee:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80118f2:	5cc3      	ldrb	r3, [r0, r3]
 80118f4:	7123      	strb	r3, [r4, #4]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 80118f6:	9b02      	ldr	r3, [sp, #8]
 80118f8:	eba3 0a0a 	sub.w	sl, r3, sl
			    & RANGE_MASK];
 80118fc:	f3ca 4a89 	ubfx	sl, sl, #18, #10
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8011900:	f810 300a 	ldrb.w	r3, [r0, sl]
 8011904:	7163      	strb	r3, [r4, #5]
  for (ctr = 0; ctr < 10; ctr++) {
 8011906:	9b05      	ldr	r3, [sp, #20]
 8011908:	455b      	cmp	r3, fp
 801190a:	f47f af4c 	bne.w	80117a6 <jpeg_idct_10x10+0x186>
  }
}
 801190e:	b057      	add	sp, #348	; 0x15c
 8011910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011914:	ffffba5c 	.word	0xffffba5c

08011918 <jpeg_idct_11x11>:

GLOBAL(void)
jpeg_idct_11x11 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8011918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801191c:	b0e5      	sub	sp, #404	; 0x194
 801191e:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8011920:	f1a2 0a02 	sub.w	sl, r2, #2
 8011924:	9308      	str	r3, [sp, #32]
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8011926:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 801192a:	3380      	adds	r3, #128	; 0x80
 801192c:	9301      	str	r3, [sp, #4]
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801192e:	1f0b      	subs	r3, r1, #4
 8011930:	9302      	str	r3, [sp, #8]
 8011932:	f102 030e 	add.w	r3, r2, #14
  wsptr = workspace;
 8011936:	aa0c      	add	r2, sp, #48	; 0x30
 8011938:	930a      	str	r3, [sp, #40]	; 0x28
    /* Even part */

    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801193a:	9902      	ldr	r1, [sp, #8]
    tmp20 = MULTIPLY(z2 - z3, FIX(2.546640132));     /* c2+c4 */
    tmp23 = MULTIPLY(z2 - z1, FIX(0.430815045));     /* c2-c6 */
    z4 = z1 + z3;
    tmp24 = MULTIPLY(z4, - FIX(1.155664402));        /* -(c2-c10) */
    z4 -= z2;
    tmp25 = tmp10 + MULTIPLY(z4, FIX(1.356927976));  /* c2 */
 801193c:	f642 3c6c 	movw	ip, #11116	; 0x2b6c
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011940:	f93a 3f02 	ldrsh.w	r3, [sl, #2]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011944:	3204      	adds	r2, #4
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011946:	f851 0f04 	ldr.w	r0, [r1, #4]!
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801194a:	f9ba 4020 	ldrsh.w	r4, [sl, #32]
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801194e:	4343      	muls	r3, r0
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8011950:	6c08      	ldr	r0, [r1, #64]	; 0x40
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011952:	f9ba 5040 	ldrsh.w	r5, [sl, #64]	; 0x40
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8011956:	4360      	muls	r0, r4
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011958:	f8d1 4080 	ldr.w	r4, [r1, #128]	; 0x80
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801195c:	f9ba 6060 	ldrsh.w	r6, [sl, #96]	; 0x60
    tmp10 <<= CONST_BITS;
 8011960:	035b      	lsls	r3, r3, #13
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011962:	436c      	muls	r4, r5
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8011964:	f8d1 50c0 	ldr.w	r5, [r1, #192]	; 0xc0
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011968:	9102      	str	r1, [sp, #8]
    tmp10 += ONE << (CONST_BITS-PASS1_BITS-1);
 801196a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801196e:	436e      	muls	r6, r5
    tmp20 = MULTIPLY(z2 - z3, FIX(2.546640132));     /* c2+c4 */
 8011970:	f245 157e 	movw	r5, #20862	; 0x517e
    tmp23 = MULTIPLY(z2 - z1, FIX(0.430815045));     /* c2-c6 */
 8011974:	1a27      	subs	r7, r4, r0
	     MULTIPLY(z1, FIX(1.390975730));         /* c4+c10 */
    tmp25 = tmp10 - MULTIPLY(z4, FIX(1.414213562));  /* c0 */

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011976:	f9ba e010 	ldrsh.w	lr, [sl, #16]
    tmp20 = MULTIPLY(z2 - z3, FIX(2.546640132));     /* c2+c4 */
 801197a:	eba4 0b06 	sub.w	fp, r4, r6
 801197e:	fb05 fb0b 	mul.w	fp, r5, fp
    tmp23 = MULTIPLY(z2 - z1, FIX(0.430815045));     /* c2-c6 */
 8011982:	f640 55c9 	movw	r5, #3529	; 0xdc9
 8011986:	436f      	muls	r7, r5
    z4 = z1 + z3;
 8011988:	1985      	adds	r5, r0, r6
    z4 -= z2;
 801198a:	1b29      	subs	r1, r5, r4
    tmp25 = tmp10 + MULTIPLY(z4, FIX(1.356927976));  /* c2 */
 801198c:	fb0c 3301 	mla	r3, ip, r1, r3
    tmp21 = tmp20 + tmp23 + tmp25 -
 8011990:	eb0b 0c07 	add.w	ip, fp, r7
    z4 -= z2;
 8011994:	9109      	str	r1, [sp, #36]	; 0x24
    tmp21 = tmp20 + tmp23 + tmp25 -
 8011996:	449c      	add	ip, r3
 8011998:	49d0      	ldr	r1, [pc, #832]	; (8011cdc <jpeg_idct_11x11+0x3c4>)
 801199a:	fb01 c104 	mla	r1, r1, r4, ip
    tmp20 += tmp25 + MULTIPLY(z3, FIX(2.115825087)); /* c4+c6 */
 801199e:	f244 3cb5 	movw	ip, #17333	; 0x43b5
    tmp21 = tmp20 + tmp23 + tmp25 -
 80119a2:	9103      	str	r1, [sp, #12]
    tmp20 += tmp25 + MULTIPLY(z3, FIX(2.115825087)); /* c4+c6 */
 80119a4:	fb0c 3c06 	mla	ip, ip, r6, r3
    tmp23 += tmp25 - MULTIPLY(z1, FIX(1.513598477)); /* c6+c8 */
 80119a8:	49cd      	ldr	r1, [pc, #820]	; (8011ce0 <jpeg_idct_11x11+0x3c8>)
    tmp20 += tmp25 + MULTIPLY(z3, FIX(2.115825087)); /* c4+c6 */
 80119aa:	44e3      	add	fp, ip
    tmp23 += tmp25 - MULTIPLY(z1, FIX(1.513598477)); /* c6+c8 */
 80119ac:	fb01 3c00 	mla	ip, r1, r0, r3
 80119b0:	eb0c 0107 	add.w	r1, ip, r7
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80119b4:	f9ba 7030 	ldrsh.w	r7, [sl, #48]	; 0x30
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80119b8:	f9ba c050 	ldrsh.w	ip, [sl, #80]	; 0x50
    tmp23 += tmp25 - MULTIPLY(z1, FIX(1.513598477)); /* c6+c8 */
 80119bc:	9104      	str	r1, [sp, #16]
    tmp24 += tmp25;
 80119be:	49c9      	ldr	r1, [pc, #804]	; (8011ce4 <jpeg_idct_11x11+0x3cc>)
 80119c0:	fb01 3505 	mla	r5, r1, r5, r3
    tmp22 = tmp24 - MULTIPLY(z3, FIX(0.788749120));  /* c8+c10 */
 80119c4:	f601 31be 	addw	r1, r1, #3006	; 0xbbe
 80119c8:	fb01 5106 	mla	r1, r1, r6, r5
    tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
 80119cc:	f643 6639 	movw	r6, #15929	; 0x3e39
    tmp22 = tmp24 - MULTIPLY(z3, FIX(0.788749120));  /* c8+c10 */
 80119d0:	9105      	str	r1, [sp, #20]
	     MULTIPLY(z1, FIX(1.390975730));         /* c4+c10 */
 80119d2:	49c5      	ldr	r1, [pc, #788]	; (8011ce8 <jpeg_idct_11x11+0x3d0>)
 80119d4:	4348      	muls	r0, r1
    tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
 80119d6:	fb06 0004 	mla	r0, r6, r4, r0
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80119da:	f9ba 6070 	ldrsh.w	r6, [sl, #112]	; 0x70

    tmp11 = z1 + z2;
    tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
 80119de:	f44f 644c 	mov.w	r4, #3264	; 0xcc0
    tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
 80119e2:	1941      	adds	r1, r0, r5
 80119e4:	9106      	str	r1, [sp, #24]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80119e6:	9902      	ldr	r1, [sp, #8]
 80119e8:	6a08      	ldr	r0, [r1, #32]
 80119ea:	fb00 f90e 	mul.w	r9, r0, lr
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80119ee:	6e08      	ldr	r0, [r1, #96]	; 0x60
    tmp11 = MULTIPLY(tmp11, FIX(0.887983902));           /* c3-c9 */
    tmp12 = MULTIPLY(z1 + z3, FIX(0.670361295));         /* c5-c9 */
 80119f0:	f241 5e74 	movw	lr, #5492	; 0x1574
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80119f4:	4347      	muls	r7, r0
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80119f6:	f8d1 00a0 	ldr.w	r0, [r1, #160]	; 0xa0
 80119fa:	fb00 fc0c 	mul.w	ip, r0, ip
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80119fe:	f8d1 00e0 	ldr.w	r0, [r1, #224]	; 0xe0
 8011a02:	4346      	muls	r6, r0
    tmp11 = z1 + z2;
 8011a04:	eb09 0007 	add.w	r0, r9, r7
    tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
 8011a08:	eb0c 0500 	add.w	r5, ip, r0
    tmp13 = tmp14 + MULTIPLY(z1 + z4, FIX(0.366151574)); /* c7-c9 */
 8011a0c:	eb09 0806 	add.w	r8, r9, r6
    tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
 8011a10:	4435      	add	r5, r6
 8011a12:	4365      	muls	r5, r4
    tmp11 = MULTIPLY(tmp11, FIX(0.887983902));           /* c3-c9 */
 8011a14:	f641 446a 	movw	r4, #7274	; 0x1c6a
 8011a18:	4360      	muls	r0, r4
    tmp12 = MULTIPLY(z1 + z3, FIX(0.670361295));         /* c5-c9 */
 8011a1a:	eb09 040c 	add.w	r4, r9, ip
 8011a1e:	fb0e f104 	mul.w	r1, lr, r4
    tmp13 = tmp14 + MULTIPLY(z1 + z4, FIX(0.366151574)); /* c7-c9 */
 8011a22:	f640 34b8 	movw	r4, #3000	; 0xbb8
    tmp10 = tmp11 + tmp12 + tmp13 -
 8011a26:	eb00 0e01 	add.w	lr, r0, r1
    tmp13 = tmp14 + MULTIPLY(z1 + z4, FIX(0.366151574)); /* c7-c9 */
 8011a2a:	fb04 5808 	mla	r8, r4, r8, r5
    tmp12 = MULTIPLY(z1 + z3, FIX(0.670361295));         /* c5-c9 */
 8011a2e:	9107      	str	r1, [sp, #28]
	    MULTIPLY(z1, FIX(0.923107866));              /* c7+c5+c3-c1-2*c9 */
    z1    = tmp14 - MULTIPLY(z2 + z3, FIX(1.163011579)); /* c7+c9 */
 8011a30:	eb07 040c 	add.w	r4, r7, ip
    tmp10 = tmp11 + tmp12 + tmp13 -
 8011a34:	44c6      	add	lr, r8
 8011a36:	49ad      	ldr	r1, [pc, #692]	; (8011cec <jpeg_idct_11x11+0x3d4>)
 8011a38:	fb01 ee09 	mla	lr, r1, r9, lr
    z1    = tmp14 - MULTIPLY(z2 + z3, FIX(1.163011579)); /* c7+c9 */
 8011a3c:	f2a1 71ad 	subw	r1, r1, #1965	; 0x7ad
    tmp11 += z1 + MULTIPLY(z2, FIX(2.073276588));        /* c1+c7+3*c9-c3 */
 8011a40:	f244 2958 	movw	r9, #16984	; 0x4258
    z1    = tmp14 - MULTIPLY(z2 + z3, FIX(1.163011579)); /* c7+c9 */
 8011a44:	fb01 5404 	mla	r4, r1, r4, r5
    tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
 8011a48:	39ef      	subs	r1, #239	; 0xef
    tmp11 += z1 + MULTIPLY(z2, FIX(2.073276588));        /* c1+c7+3*c9-c3 */
 8011a4a:	fb09 4907 	mla	r9, r9, r7, r4
    tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
 8011a4e:	fb01 440c 	mla	r4, r1, ip, r4
 8011a52:	9907      	ldr	r1, [sp, #28]
    tmp11 += z1 + MULTIPLY(z2, FIX(2.073276588));        /* c1+c7+3*c9-c3 */
 8011a54:	4481      	add	r9, r0
    z1    = MULTIPLY(z2 + z4, - FIX(1.798248910));       /* -(c1+c9) */
 8011a56:	19b8      	adds	r0, r7, r6
    tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
 8011a58:	440c      	add	r4, r1
    z1    = MULTIPLY(z2 + z4, - FIX(1.798248910));       /* -(c1+c9) */
 8011a5a:	49a5      	ldr	r1, [pc, #660]	; (8011cf0 <jpeg_idct_11x11+0x3d8>)
 8011a5c:	4348      	muls	r0, r1
    tmp11 += z1;
    tmp13 += z1 + MULTIPLY(z4, FIX(2.102458632));        /* c1+c5+c9-c7 */
 8011a5e:	f244 3147 	movw	r1, #17223	; 0x4347
    tmp11 += z1;
 8011a62:	4481      	add	r9, r0
    tmp13 += z1 + MULTIPLY(z4, FIX(2.102458632));        /* c1+c5+c9-c7 */
 8011a64:	fb01 0006 	mla	r0, r1, r6, r0

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8011a68:	9903      	ldr	r1, [sp, #12]
    tmp13 += z1 + MULTIPLY(z4, FIX(2.102458632));        /* c1+c5+c9-c7 */
 8011a6a:	4480      	add	r8, r0
	     MULTIPLY(z3, FIX(1.001388905)) -            /* c1-c9 */
 8011a6c:	f242 000b 	movw	r0, #8203	; 0x200b
 8011a70:	fb00 fc0c 	mul.w	ip, r0, ip
    tmp14 += MULTIPLY(z2, - FIX(1.467221301)) +          /* -(c5+c9) */
 8011a74:	489f      	ldr	r0, [pc, #636]	; (8011cf4 <jpeg_idct_11x11+0x3dc>)
 8011a76:	fb00 cc07 	mla	ip, r0, r7, ip
	     MULTIPLY(z3, FIX(1.001388905)) -            /* c1-c9 */
 8011a7a:	f2a0 60f7 	subw	r0, r0, #1783	; 0x6f7
 8011a7e:	fb00 cc06 	mla	ip, r0, r6, ip
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8011a82:	eb0b 000e 	add.w	r0, fp, lr
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8011a86:	ebab 0e0e 	sub.w	lr, fp, lr
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8011a8a:	12c0      	asrs	r0, r0, #11
    tmp14 += MULTIPLY(z2, - FIX(1.467221301)) +          /* -(c5+c9) */
 8011a8c:	4465      	add	r5, ip
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8011a8e:	f842 0c04 	str.w	r0, [r2, #-4]
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8011a92:	ea4f 20ee 	mov.w	r0, lr, asr #11
 8011a96:	f8c2 013c 	str.w	r0, [r2, #316]	; 0x13c
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8011a9a:	eb01 0009 	add.w	r0, r1, r9
 8011a9e:	12c0      	asrs	r0, r0, #11
 8011aa0:	61d0      	str	r0, [r2, #28]
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8011aa2:	eba1 0009 	sub.w	r0, r1, r9
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8011aa6:	9905      	ldr	r1, [sp, #20]
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8011aa8:	12c0      	asrs	r0, r0, #11
 8011aaa:	f8c2 011c 	str.w	r0, [r2, #284]	; 0x11c
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8011aae:	1908      	adds	r0, r1, r4
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8011ab0:	1b0c      	subs	r4, r1, r4
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8011ab2:	12c0      	asrs	r0, r0, #11
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8011ab4:	12e4      	asrs	r4, r4, #11
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8011ab6:	63d0      	str	r0, [r2, #60]	; 0x3c
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8011ab8:	9904      	ldr	r1, [sp, #16]
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8011aba:	f8c2 40fc 	str.w	r4, [r2, #252]	; 0xfc
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8011abe:	eb01 0008 	add.w	r0, r1, r8
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8011ac2:	eba1 0808 	sub.w	r8, r1, r8
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8011ac6:	9906      	ldr	r1, [sp, #24]
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8011ac8:	12c0      	asrs	r0, r0, #11
 8011aca:	65d0      	str	r0, [r2, #92]	; 0x5c
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8011acc:	ea4f 20e8 	mov.w	r0, r8, asr #11
 8011ad0:	f8c2 00dc 	str.w	r0, [r2, #220]	; 0xdc
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8011ad4:	1948      	adds	r0, r1, r5
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8011ad6:	1b4d      	subs	r5, r1, r5
    tmp25 = tmp10 - MULTIPLY(z4, FIX(1.414213562));  /* c0 */
 8011ad8:	9909      	ldr	r1, [sp, #36]	; 0x24
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8011ada:	12c0      	asrs	r0, r0, #11
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8011adc:	12ed      	asrs	r5, r5, #11
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8011ade:	67d0      	str	r0, [r2, #124]	; 0x7c
    tmp25 = tmp10 - MULTIPLY(z4, FIX(1.414213562));  /* c0 */
 8011ae0:	f645 00ad 	movw	r0, #22701	; 0x58ad
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8011ae4:	f8c2 50bc 	str.w	r5, [r2, #188]	; 0xbc
    tmp25 = tmp10 - MULTIPLY(z4, FIX(1.414213562));  /* c0 */
 8011ae8:	fb00 3311 	mls	r3, r0, r1, r3
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25, CONST_BITS-PASS1_BITS);
 8011aec:	12db      	asrs	r3, r3, #11
 8011aee:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011af2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011af4:	4553      	cmp	r3, sl
 8011af6:	f47f af20 	bne.w	801193a <jpeg_idct_11x11+0x22>
 8011afa:	9b08      	ldr	r3, [sp, #32]
 8011afc:	3b04      	subs	r3, #4
 8011afe:	9303      	str	r3, [sp, #12]
 8011b00:	9b08      	ldr	r3, [sp, #32]
 8011b02:	3328      	adds	r3, #40	; 0x28
 8011b04:	930b      	str	r3, [sp, #44]	; 0x2c
  }

  /* Pass 2: process 11 rows from work array, store into output array. */

  wsptr = workspace;
 8011b06:	ab0c      	add	r3, sp, #48	; 0x30
 8011b08:	9302      	str	r3, [sp, #8]
  for (ctr = 0; ctr < 11; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8011b0a:	9b03      	ldr	r3, [sp, #12]

    z1 = (INT32) wsptr[2];
    z2 = (INT32) wsptr[4];
    z3 = (INT32) wsptr[6];

    tmp20 = MULTIPLY(z2 - z3, FIX(2.546640132));     /* c2+c4 */
 8011b0c:	f245 1e7e 	movw	lr, #20862	; 0x517e
    z1 = (INT32) wsptr[2];
 8011b10:	9a02      	ldr	r2, [sp, #8]
    z4 = (INT32) wsptr[7];

    tmp11 = z1 + z2;
    tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
    tmp11 = MULTIPLY(tmp11, FIX(0.887983902));           /* c3-c9 */
    tmp12 = MULTIPLY(z1 + z3, FIX(0.670361295));         /* c5-c9 */
 8011b12:	f241 5b74 	movw	fp, #5492	; 0x1574
    outptr = output_buf[ctr] + output_col;
 8011b16:	f853 1f04 	ldr.w	r1, [r3, #4]!
    tmp13 = tmp14 + MULTIPLY(z1 + z4, FIX(0.366151574)); /* c7-c9 */
    tmp10 = tmp11 + tmp12 + tmp13 -
	    MULTIPLY(z1, FIX(0.923107866));              /* c7+c5+c3-c1-2*c9 */
    z1    = tmp14 - MULTIPLY(z2 + z3, FIX(1.163011579)); /* c7+c9 */
    tmp11 += z1 + MULTIPLY(z2, FIX(2.073276588));        /* c1+c7+3*c9-c3 */
 8011b1a:	f244 2a58 	movw	sl, #16984	; 0x4258
    z2 = (INT32) wsptr[4];
 8011b1e:	6916      	ldr	r6, [r2, #16]
    z3 = (INT32) wsptr[6];
 8011b20:	6997      	ldr	r7, [r2, #24]
    outptr = output_buf[ctr] + output_col;
 8011b22:	9109      	str	r1, [sp, #36]	; 0x24
 8011b24:	9303      	str	r3, [sp, #12]
 8011b26:	460b      	mov	r3, r1
 8011b28:	996e      	ldr	r1, [sp, #440]	; 0x1b8
    tmp20 = MULTIPLY(z2 - z3, FIX(2.546640132));     /* c2+c4 */
 8011b2a:	1bf0      	subs	r0, r6, r7
    z1 = (INT32) wsptr[2];
 8011b2c:	6894      	ldr	r4, [r2, #8]
    outptr = output_buf[ctr] + output_col;
 8011b2e:	1859      	adds	r1, r3, r1
    tmp10 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8011b30:	9b02      	ldr	r3, [sp, #8]
    z4 = z1 + z3;
 8011b32:	19e5      	adds	r5, r4, r7
    tmp20 = MULTIPLY(z2 - z3, FIX(2.546640132));     /* c2+c4 */
 8011b34:	fb0e fe00 	mul.w	lr, lr, r0
    tmp23 = MULTIPLY(z2 - z1, FIX(0.430815045));     /* c2-c6 */
 8011b38:	eba6 0c04 	sub.w	ip, r6, r4
    tmp10 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8011b3c:	681b      	ldr	r3, [r3, #0]
    tmp23 = MULTIPLY(z2 - z1, FIX(0.430815045));     /* c2-c6 */
 8011b3e:	f640 50c9 	movw	r0, #3529	; 0xdc9
    tmp25 = tmp10 + MULTIPLY(z4, FIX(1.356927976));  /* c2 */
 8011b42:	1baa      	subs	r2, r5, r6
    tmp10 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8011b44:	3310      	adds	r3, #16
    tmp23 = MULTIPLY(z2 - z1, FIX(0.430815045));     /* c2-c6 */
 8011b46:	fb00 fc0c 	mul.w	ip, r0, ip
    z4 -= z2;
 8011b4a:	1ba8      	subs	r0, r5, r6
    tmp10 <<= CONST_BITS;
 8011b4c:	035b      	lsls	r3, r3, #13
    z4 -= z2;
 8011b4e:	900a      	str	r0, [sp, #40]	; 0x28
    tmp25 = tmp10 + MULTIPLY(z4, FIX(1.356927976));  /* c2 */
 8011b50:	f642 306c 	movw	r0, #11116	; 0x2b6c
 8011b54:	fb00 3302 	mla	r3, r0, r2, r3
    tmp21 = tmp20 + tmp23 + tmp25 -
 8011b58:	eb0e 000c 	add.w	r0, lr, ip
 8011b5c:	4a5f      	ldr	r2, [pc, #380]	; (8011cdc <jpeg_idct_11x11+0x3c4>)
 8011b5e:	4418      	add	r0, r3
 8011b60:	fb02 0206 	mla	r2, r2, r6, r0
    tmp20 += tmp25 + MULTIPLY(z3, FIX(2.115825087)); /* c4+c6 */
 8011b64:	f244 30b5 	movw	r0, #17333	; 0x43b5
 8011b68:	fb00 3007 	mla	r0, r0, r7, r3
    tmp21 = tmp20 + tmp23 + tmp25 -
 8011b6c:	9204      	str	r2, [sp, #16]
    tmp20 += tmp25 + MULTIPLY(z3, FIX(2.115825087)); /* c4+c6 */
 8011b6e:	eb00 020e 	add.w	r2, r0, lr
	     MULTIPLY(z3, FIX(1.001388905)) -            /* c1-c9 */
	     MULTIPLY(z4, FIX(1.684843907));             /* c3+c9 */

    /* Final output stage */

    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8011b72:	986e      	ldr	r0, [sp, #440]	; 0x1b8
    tmp20 += tmp25 + MULTIPLY(z3, FIX(2.115825087)); /* c4+c6 */
 8011b74:	9205      	str	r2, [sp, #20]
    tmp23 += tmp25 - MULTIPLY(z1, FIX(1.513598477)); /* c6+c8 */
 8011b76:	4a5a      	ldr	r2, [pc, #360]	; (8011ce0 <jpeg_idct_11x11+0x3c8>)
 8011b78:	fb02 3e04 	mla	lr, r2, r4, r3
 8011b7c:	eb0e 020c 	add.w	r2, lr, ip
 8011b80:	9206      	str	r2, [sp, #24]
    tmp24 += tmp25;
 8011b82:	4a58      	ldr	r2, [pc, #352]	; (8011ce4 <jpeg_idct_11x11+0x3cc>)
 8011b84:	fb02 3505 	mla	r5, r2, r5, r3
    tmp22 = tmp24 - MULTIPLY(z3, FIX(0.788749120));  /* c8+c10 */
 8011b88:	f602 32be 	addw	r2, r2, #3006	; 0xbbe
 8011b8c:	fb02 5207 	mla	r2, r2, r7, r5
    tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
 8011b90:	f643 6739 	movw	r7, #15929	; 0x3e39
    tmp22 = tmp24 - MULTIPLY(z3, FIX(0.788749120));  /* c8+c10 */
 8011b94:	9207      	str	r2, [sp, #28]
	     MULTIPLY(z1, FIX(1.390975730));         /* c4+c10 */
 8011b96:	4a54      	ldr	r2, [pc, #336]	; (8011ce8 <jpeg_idct_11x11+0x3d0>)
 8011b98:	4354      	muls	r4, r2
    tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
 8011b9a:	fb07 4406 	mla	r4, r7, r6, r4
 8011b9e:	1962      	adds	r2, r4, r5
    tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
 8011ba0:	f44f 654c 	mov.w	r5, #3264	; 0xcc0
    tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
 8011ba4:	9208      	str	r2, [sp, #32]
    z1 = (INT32) wsptr[1];
 8011ba6:	9a02      	ldr	r2, [sp, #8]
    z2 = (INT32) wsptr[3];
 8011ba8:	f8d2 e00c 	ldr.w	lr, [r2, #12]
    z1 = (INT32) wsptr[1];
 8011bac:	6857      	ldr	r7, [r2, #4]
    z3 = (INT32) wsptr[5];
 8011bae:	f8d2 8014 	ldr.w	r8, [r2, #20]
    tmp11 = z1 + z2;
 8011bb2:	eb07 040e 	add.w	r4, r7, lr
    z4 = (INT32) wsptr[7];
 8011bb6:	f8d2 c01c 	ldr.w	ip, [r2, #28]
    tmp10 = tmp11 + tmp12 + tmp13 -
 8011bba:	4a4c      	ldr	r2, [pc, #304]	; (8011cec <jpeg_idct_11x11+0x3d4>)
    tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
 8011bbc:	eb08 0604 	add.w	r6, r8, r4
    tmp13 = tmp14 + MULTIPLY(z1 + z4, FIX(0.366151574)); /* c7-c9 */
 8011bc0:	eb07 090c 	add.w	r9, r7, ip
    tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
 8011bc4:	4466      	add	r6, ip
 8011bc6:	436e      	muls	r6, r5
    tmp11 = MULTIPLY(tmp11, FIX(0.887983902));           /* c3-c9 */
 8011bc8:	f641 456a 	movw	r5, #7274	; 0x1c6a
 8011bcc:	436c      	muls	r4, r5
    tmp12 = MULTIPLY(z1 + z3, FIX(0.670361295));         /* c5-c9 */
 8011bce:	eb07 0508 	add.w	r5, r7, r8
 8011bd2:	fb0b fb05 	mul.w	fp, fp, r5
    tmp13 = tmp14 + MULTIPLY(z1 + z4, FIX(0.366151574)); /* c7-c9 */
 8011bd6:	f640 35b8 	movw	r5, #3000	; 0xbb8
 8011bda:	fb05 6909 	mla	r9, r5, r9, r6
    tmp10 = tmp11 + tmp12 + tmp13 -
 8011bde:	eb04 050b 	add.w	r5, r4, fp
 8011be2:	444d      	add	r5, r9
 8011be4:	fb02 5707 	mla	r7, r2, r7, r5
    z1    = tmp14 - MULTIPLY(z2 + z3, FIX(1.163011579)); /* c7+c9 */
 8011be8:	eb0e 0508 	add.w	r5, lr, r8
 8011bec:	f2a2 72ad 	subw	r2, r2, #1965	; 0x7ad
 8011bf0:	fb02 6505 	mla	r5, r2, r5, r6
    tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
 8011bf4:	3aef      	subs	r2, #239	; 0xef
    tmp11 += z1 + MULTIPLY(z2, FIX(2.073276588));        /* c1+c7+3*c9-c3 */
 8011bf6:	fb0a 5a0e 	mla	sl, sl, lr, r5
    tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
 8011bfa:	fb02 5508 	mla	r5, r2, r8, r5
    z1    = MULTIPLY(z2 + z4, - FIX(1.798248910));       /* -(c1+c9) */
 8011bfe:	4a3c      	ldr	r2, [pc, #240]	; (8011cf0 <jpeg_idct_11x11+0x3d8>)
    tmp11 += z1 + MULTIPLY(z2, FIX(2.073276588));        /* c1+c7+3*c9-c3 */
 8011c00:	44a2      	add	sl, r4
    z1    = MULTIPLY(z2 + z4, - FIX(1.798248910));       /* -(c1+c9) */
 8011c02:	eb0e 040c 	add.w	r4, lr, ip
    tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
 8011c06:	445d      	add	r5, fp
    tmp13 += z1 + MULTIPLY(z4, FIX(2.102458632));        /* c1+c5+c9-c7 */
 8011c08:	f244 3b47 	movw	fp, #17223	; 0x4347
    z1    = MULTIPLY(z2 + z4, - FIX(1.798248910));       /* -(c1+c9) */
 8011c0c:	4354      	muls	r4, r2
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8011c0e:	9a05      	ldr	r2, [sp, #20]
    tmp11 += z1;
 8011c10:	44a2      	add	sl, r4
    tmp13 += z1 + MULTIPLY(z4, FIX(2.102458632));        /* c1+c5+c9-c7 */
 8011c12:	fb0b 440c 	mla	r4, fp, ip, r4
 8011c16:	44a1      	add	r9, r4
	     MULTIPLY(z3, FIX(1.001388905)) -            /* c1-c9 */
 8011c18:	f242 040b 	movw	r4, #8203	; 0x200b
 8011c1c:	fb04 f808 	mul.w	r8, r4, r8
    tmp14 += MULTIPLY(z2, - FIX(1.467221301)) +          /* -(c5+c9) */
 8011c20:	4c34      	ldr	r4, [pc, #208]	; (8011cf4 <jpeg_idct_11x11+0x3dc>)
 8011c22:	fb04 880e 	mla	r8, r4, lr, r8
	     MULTIPLY(z3, FIX(1.001388905)) -            /* c1-c9 */
 8011c26:	f2a4 64f7 	subw	r4, r4, #1783	; 0x6f7
 8011c2a:	fb04 880c 	mla	r8, r4, ip, r8
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8011c2e:	19d4      	adds	r4, r2, r7
 8011c30:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8011c32:	f3c4 4489 	ubfx	r4, r4, #18, #10
    tmp14 += MULTIPLY(z2, - FIX(1.467221301)) +          /* -(c5+c9) */
 8011c36:	4446      	add	r6, r8
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8011c38:	5d14      	ldrb	r4, [r2, r4]
 8011c3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011c3c:	5414      	strb	r4, [r2, r0]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8011c3e:	9a05      	ldr	r2, [sp, #20]
 8011c40:	1bd0      	subs	r0, r2, r7
 8011c42:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8011c44:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8011c48:	5c10      	ldrb	r0, [r2, r0]
 8011c4a:	7288      	strb	r0, [r1, #10]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8011c4c:	9a04      	ldr	r2, [sp, #16]
 8011c4e:	eb02 000a 	add.w	r0, r2, sl
 8011c52:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8011c54:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8011c58:	5c10      	ldrb	r0, [r2, r0]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8011c5a:	9a04      	ldr	r2, [sp, #16]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8011c5c:	7048      	strb	r0, [r1, #1]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8011c5e:	eba2 0a0a 	sub.w	sl, r2, sl
 8011c62:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8011c64:	f3ca 4a89 	ubfx	sl, sl, #18, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8011c68:	f812 000a 	ldrb.w	r0, [r2, sl]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8011c6c:	9a07      	ldr	r2, [sp, #28]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8011c6e:	7248      	strb	r0, [r1, #9]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8011c70:	1950      	adds	r0, r2, r5
 8011c72:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8011c74:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8011c78:	5c10      	ldrb	r0, [r2, r0]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8011c7a:	9a07      	ldr	r2, [sp, #28]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8011c7c:	7088      	strb	r0, [r1, #2]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8011c7e:	1b55      	subs	r5, r2, r5
 8011c80:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8011c82:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8011c86:	5d50      	ldrb	r0, [r2, r5]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8011c88:	9a06      	ldr	r2, [sp, #24]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8011c8a:	7208      	strb	r0, [r1, #8]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8011c8c:	eb02 0009 	add.w	r0, r2, r9
 8011c90:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8011c92:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8011c96:	5c10      	ldrb	r0, [r2, r0]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8011c98:	9a06      	ldr	r2, [sp, #24]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8011c9a:	70c8      	strb	r0, [r1, #3]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8011c9c:	eba2 0909 	sub.w	r9, r2, r9
 8011ca0:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8011ca2:	f3c9 4989 	ubfx	r9, r9, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8011ca6:	f812 0009 	ldrb.w	r0, [r2, r9]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8011caa:	9a08      	ldr	r2, [sp, #32]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8011cac:	71c8      	strb	r0, [r1, #7]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8011cae:	1990      	adds	r0, r2, r6
 8011cb0:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8011cb2:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8011cb6:	5c10      	ldrb	r0, [r2, r0]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8011cb8:	9a08      	ldr	r2, [sp, #32]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8011cba:	7108      	strb	r0, [r1, #4]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8011cbc:	1b96      	subs	r6, r2, r6
 8011cbe:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8011cc0:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8011cc4:	5d90      	ldrb	r0, [r2, r6]
 8011cc6:	7188      	strb	r0, [r1, #6]
    tmp25 = tmp10 - MULTIPLY(z4, FIX(1.414213562));  /* c0 */
 8011cc8:	f645 00ad 	movw	r0, #22701	; 0x58ad
 8011ccc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011cce:	fb00 3312 	mls	r3, r0, r2, r3
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25,
 8011cd2:	9a01      	ldr	r2, [sp, #4]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8011cd4:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25,
 8011cd8:	5cd3      	ldrb	r3, [r2, r3]
 8011cda:	e00d      	b.n	8011cf8 <jpeg_idct_11x11+0x3e0>
 8011cdc:	ffffc5b4 	.word	0xffffc5b4
 8011ce0:	ffffcf91 	.word	0xffffcf91
 8011ce4:	ffffdb05 	.word	0xffffdb05
 8011ce8:	ffffd37d 	.word	0xffffd37d
 8011cec:	ffffe276 	.word	0xffffe276
 8011cf0:	ffffc675 	.word	0xffffc675
 8011cf4:	ffffd10d 	.word	0xffffd10d
  for (ctr = 0; ctr < 11; ctr++) {
 8011cf8:	9a03      	ldr	r2, [sp, #12]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25,
 8011cfa:	714b      	strb	r3, [r1, #5]

    wsptr += 8;		/* advance pointer to next row */
 8011cfc:	9b02      	ldr	r3, [sp, #8]
 8011cfe:	3320      	adds	r3, #32
 8011d00:	9302      	str	r3, [sp, #8]
  for (ctr = 0; ctr < 11; ctr++) {
 8011d02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011d04:	4293      	cmp	r3, r2
 8011d06:	f47f af00 	bne.w	8011b0a <jpeg_idct_11x11+0x1f2>
  }
}
 8011d0a:	b065      	add	sp, #404	; 0x194
 8011d0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011d10 <jpeg_idct_12x12>:

GLOBAL(void)
jpeg_idct_12x12 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8011d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d14:	b0eb      	sub	sp, #428	; 0x1ac
 8011d16:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8011d18:	f1a2 0902 	sub.w	r9, r2, #2
 8011d1c:	9308      	str	r3, [sp, #32]
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8011d1e:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8011d22:	f103 0b80 	add.w	fp, r3, #128	; 0x80
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011d26:	1f0b      	subs	r3, r1, #4
 8011d28:	9300      	str	r3, [sp, #0]
 8011d2a:	f102 030e 	add.w	r3, r2, #14
 8011d2e:	9309      	str	r3, [sp, #36]	; 0x24
  wsptr = workspace;
 8011d30:	ab0a      	add	r3, sp, #40	; 0x28
    /* Even part */

    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011d32:	9900      	ldr	r1, [sp, #0]

    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */

    tmp10 = z1 + z3;
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 8011d34:	f641 388d 	movw	r8, #7053	; 0x1b8d
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011d38:	f939 7f02 	ldrsh.w	r7, [r9, #2]!
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 8011d3c:	f640 0a5b 	movw	sl, #2139	; 0x85b
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011d40:	f851 2f04 	ldr.w	r2, [r1, #4]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011d44:	3304      	adds	r3, #4
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011d46:	f9b9 0040 	ldrsh.w	r0, [r9, #64]	; 0x40
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011d4a:	4357      	muls	r7, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011d4c:	f8d1 2080 	ldr.w	r2, [r1, #128]	; 0x80
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8011d50:	f9b9 5020 	ldrsh.w	r5, [r9, #32]
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011d54:	4342      	muls	r2, r0
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 8011d56:	f242 7031 	movw	r0, #10033	; 0x2731
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011d5a:	9100      	str	r1, [sp, #0]
    z3 <<= CONST_BITS;
 8011d5c:	037f      	lsls	r7, r7, #13
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 8011d5e:	4342      	muls	r2, r0
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8011d60:	6c08      	ldr	r0, [r1, #64]	; 0x40
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 8011d62:	f642 31b6 	movw	r1, #11190	; 0x2bb6
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8011d66:	f9b9 c060 	ldrsh.w	ip, [r9, #96]	; 0x60
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8011d6a:	4345      	muls	r5, r0
    z3 += ONE << (CONST_BITS-PASS1_BITS-1);
 8011d6c:	f507 6780 	add.w	r7, r7, #1024	; 0x400
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 8011d70:	fb01 f005 	mul.w	r0, r1, r5
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8011d74:	9900      	ldr	r1, [sp, #0]
    tmp10 = z3 + z4;
 8011d76:	18be      	adds	r6, r7, r2
    tmp11 = z3 - z4;
 8011d78:	1aba      	subs	r2, r7, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8011d7a:	f8d1 40c0 	ldr.w	r4, [r1, #192]	; 0xc0
 8011d7e:	fb04 f40c 	mul.w	r4, r4, ip
    z2 <<= CONST_BITS;
 8011d82:	0364      	lsls	r4, r4, #13
    tmp12 = z1 - z2;
 8011d84:	ebc4 3c45 	rsb	ip, r4, r5, lsl #13
    tmp21 = z3 + tmp12;
 8011d88:	eb07 010c 	add.w	r1, r7, ip
 8011d8c:	9101      	str	r1, [sp, #4]
    tmp24 = z3 - tmp12;
 8011d8e:	eba7 010c 	sub.w	r1, r7, ip
    tmp12 = z4 + z2;
 8011d92:	1907      	adds	r7, r0, r4
    tmp12 = z4 - z1 - z2;
 8011d94:	eba0 3045 	sub.w	r0, r0, r5, lsl #13
    tmp24 = z3 - tmp12;
 8011d98:	9102      	str	r1, [sp, #8]
    tmp20 = tmp10 + tmp12;
 8011d9a:	19f1      	adds	r1, r6, r7
    tmp12 = z4 - z1 - z2;
 8011d9c:	1b04      	subs	r4, r0, r4
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8011d9e:	f9b9 c030 	ldrsh.w	ip, [r9, #48]	; 0x30
    tmp20 = tmp10 + tmp12;
 8011da2:	9103      	str	r1, [sp, #12]
    tmp25 = tmp10 - tmp12;
 8011da4:	1bf1      	subs	r1, r6, r7
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011da6:	f9b9 7010 	ldrsh.w	r7, [r9, #16]
    tmp25 = tmp10 - tmp12;
 8011daa:	9104      	str	r1, [sp, #16]
    tmp22 = tmp11 + tmp12;
 8011dac:	1911      	adds	r1, r2, r4
    tmp23 = tmp11 - tmp12;
 8011dae:	1b12      	subs	r2, r2, r4
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8011db0:	f9b9 5050 	ldrsh.w	r5, [r9, #80]	; 0x50
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8011db4:	f9b9 0070 	ldrsh.w	r0, [r9, #112]	; 0x70
    tmp23 = tmp11 - tmp12;
 8011db8:	9206      	str	r2, [sp, #24]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011dba:	9a00      	ldr	r2, [sp, #0]
    tmp22 = tmp11 + tmp12;
 8011dbc:	9105      	str	r1, [sp, #20]
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 8011dbe:	f642 11cf 	movw	r1, #10703	; 0x29cf
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011dc2:	6a12      	ldr	r2, [r2, #32]
 8011dc4:	4357      	muls	r7, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8011dc6:	9a00      	ldr	r2, [sp, #0]
 8011dc8:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8011dca:	fb02 fc0c 	mul.w	ip, r2, ip
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8011dce:	9a00      	ldr	r2, [sp, #0]
 8011dd0:	f8d2 20a0 	ldr.w	r2, [r2, #160]	; 0xa0
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 8011dd4:	fb01 f40c 	mul.w	r4, r1, ip
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 8011dd8:	49b6      	ldr	r1, [pc, #728]	; (80120b4 <jpeg_idct_12x12+0x3a4>)
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8011dda:	4355      	muls	r5, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8011ddc:	9a00      	ldr	r2, [sp, #0]
 8011dde:	f8d2 20e0 	ldr.w	r2, [r2, #224]	; 0xe0
    tmp10 = z1 + z3;
 8011de2:	197e      	adds	r6, r7, r5
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8011de4:	4342      	muls	r2, r0
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 8011de6:	fb01 f00c 	mul.w	r0, r1, ip
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 8011dea:	49b3      	ldr	r1, [pc, #716]	; (80120b8 <jpeg_idct_12x12+0x3a8>)
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 8011dec:	eb02 0e06 	add.w	lr, r2, r6
 8011df0:	fb08 fe0e 	mul.w	lr, r8, lr
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 8011df4:	fb0a ea06 	mla	sl, sl, r6, lr
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 8011df8:	f640 06f7 	movw	r6, #2295	; 0x8f7
 8011dfc:	eb04 080a 	add.w	r8, r4, sl
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8011e00:	ebae 0404 	sub.w	r4, lr, r4
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 8011e04:	fb06 8807 	mla	r8, r6, r7, r8
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 8011e08:	18ae      	adds	r6, r5, r2
 8011e0a:	4371      	muls	r1, r6
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 8011e0c:	1846      	adds	r6, r0, r1
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 8011e0e:	9107      	str	r1, [sp, #28]
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 8011e10:	49aa      	ldr	r1, [pc, #680]	; (80120bc <jpeg_idct_12x12+0x3ac>)
 8011e12:	fb01 6605 	mla	r6, r1, r5, r6
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8011e16:	9907      	ldr	r1, [sp, #28]
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
	     MULTIPLY(z4, FIX(1.982889723));                 /* c5+c7 */

    z1 -= z4;
    z2 -= z3;
 8011e18:	ebac 0505 	sub.w	r5, ip, r5
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 8011e1c:	f241 1c51 	movw	ip, #4433	; 0x1151
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 8011e20:	4456      	add	r6, sl
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8011e22:	f243 2ac6 	movw	sl, #12998	; 0x32c6
 8011e26:	fb0a 4402 	mla	r4, sl, r2, r4
 8011e2a:	440c      	add	r4, r1
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8011e2c:	49a4      	ldr	r1, [pc, #656]	; (80120c0 <jpeg_idct_12x12+0x3b0>)
 8011e2e:	fb01 0007 	mla	r0, r1, r7, r0
 8011e32:	49a4      	ldr	r1, [pc, #656]	; (80120c4 <jpeg_idct_12x12+0x3b4>)
 8011e34:	fb01 0002 	mla	r0, r1, r2, r0
    z1 -= z4;
 8011e38:	1aba      	subs	r2, r7, r2
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 8011e3a:	f201 4153 	addw	r1, r1, #1107	; 0x453
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
 8011e3e:	f641 077e 	movw	r7, #6270	; 0x187e
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8011e42:	4470      	add	r0, lr
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 8011e44:	eb02 0e05 	add.w	lr, r2, r5
 8011e48:	fb0c fe0e 	mul.w	lr, ip, lr
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 8011e4c:	fb01 e505 	mla	r5, r1, r5, lr

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8011e50:	9903      	ldr	r1, [sp, #12]
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
 8011e52:	fb07 e202 	mla	r2, r7, r2, lr
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8011e56:	eb01 0708 	add.w	r7, r1, r8
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8011e5a:	eba1 0808 	sub.w	r8, r1, r8
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8011e5e:	12ff      	asrs	r7, r7, #11
 8011e60:	f843 7c04 	str.w	r7, [r3, #-4]
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8011e64:	ea4f 27e8 	mov.w	r7, r8, asr #11
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8011e68:	9901      	ldr	r1, [sp, #4]
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8011e6a:	f8c3 715c 	str.w	r7, [r3, #348]	; 0x15c
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8011e6e:	188f      	adds	r7, r1, r2
 8011e70:	12ff      	asrs	r7, r7, #11
 8011e72:	61df      	str	r7, [r3, #28]
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8011e74:	1a8f      	subs	r7, r1, r2
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8011e76:	9a05      	ldr	r2, [sp, #20]
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8011e78:	12ff      	asrs	r7, r7, #11
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8011e7a:	4432      	add	r2, r6
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8011e7c:	f8c3 713c 	str.w	r7, [r3, #316]	; 0x13c
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8011e80:	12d2      	asrs	r2, r2, #11
 8011e82:	63da      	str	r2, [r3, #60]	; 0x3c
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8011e84:	9a05      	ldr	r2, [sp, #20]
 8011e86:	1b96      	subs	r6, r2, r6
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8011e88:	9a06      	ldr	r2, [sp, #24]
 8011e8a:	4422      	add	r2, r4
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8011e8c:	12f6      	asrs	r6, r6, #11
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8011e8e:	12d2      	asrs	r2, r2, #11
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8011e90:	f8c3 611c 	str.w	r6, [r3, #284]	; 0x11c
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8011e94:	65da      	str	r2, [r3, #92]	; 0x5c
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8011e96:	9a06      	ldr	r2, [sp, #24]
 8011e98:	1b14      	subs	r4, r2, r4
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8011e9a:	9a02      	ldr	r2, [sp, #8]
 8011e9c:	442a      	add	r2, r5
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8011e9e:	12e4      	asrs	r4, r4, #11
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8011ea0:	12d2      	asrs	r2, r2, #11
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8011ea2:	f8c3 40fc 	str.w	r4, [r3, #252]	; 0xfc
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8011ea6:	67da      	str	r2, [r3, #124]	; 0x7c
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8011ea8:	9a02      	ldr	r2, [sp, #8]
 8011eaa:	1b55      	subs	r5, r2, r5
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8011eac:	9a04      	ldr	r2, [sp, #16]
 8011eae:	4402      	add	r2, r0
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8011eb0:	12ed      	asrs	r5, r5, #11
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8011eb2:	12d2      	asrs	r2, r2, #11
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8011eb4:	f8c3 50dc 	str.w	r5, [r3, #220]	; 0xdc
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8011eb8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8011ebc:	9a04      	ldr	r2, [sp, #16]
 8011ebe:	1a10      	subs	r0, r2, r0
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011ec0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8011ec2:	12c0      	asrs	r0, r0, #11
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011ec4:	454a      	cmp	r2, r9
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8011ec6:	f8c3 00bc 	str.w	r0, [r3, #188]	; 0xbc
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011eca:	f47f af32 	bne.w	8011d32 <jpeg_idct_12x12+0x22>
 8011ece:	9b08      	ldr	r3, [sp, #32]
  }

  /* Pass 2: process 12 rows from work array, store into output array. */

  wsptr = workspace;
 8011ed0:	aa0a      	add	r2, sp, #40	; 0x28
 8011ed2:	f1a3 0a04 	sub.w	sl, r3, #4
 8011ed6:	332c      	adds	r3, #44	; 0x2c
 8011ed8:	9307      	str	r3, [sp, #28]
  for (ctr = 0; ctr < 12; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8011eda:	f85a 3f04 	ldr.w	r3, [sl, #4]!

    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */

    tmp10 = z1 + z3;
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 8011ede:	f641 3e8d 	movw	lr, #7053	; 0x1b8d
    outptr = output_buf[ctr] + output_col;
 8011ee2:	9974      	ldr	r1, [sp, #464]	; 0x1d0
			     & RANGE_MASK];
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 8011ee4:	3220      	adds	r2, #32
    z2 = (INT32) wsptr[6];
 8011ee6:	f852 4c08 	ldr.w	r4, [r2, #-8]
    z1 = (INT32) wsptr[2];
 8011eea:	f852 5c18 	ldr.w	r5, [r2, #-24]
    z2 <<= CONST_BITS;
 8011eee:	0364      	lsls	r4, r4, #13
    outptr = output_buf[ctr] + output_col;
 8011ef0:	9306      	str	r3, [sp, #24]
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8011ef2:	f852 7c20 	ldr.w	r7, [r2, #-32]
    outptr = output_buf[ctr] + output_col;
 8011ef6:	440b      	add	r3, r1
    tmp12 = z1 - z2;
 8011ef8:	ebc4 3c45 	rsb	ip, r4, r5, lsl #13
    z4 = (INT32) wsptr[4];
 8011efc:	f852 0c10 	ldr.w	r0, [r2, #-16]
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8011f00:	3710      	adds	r7, #16
    outptr = output_buf[ctr] + output_col;
 8011f02:	9300      	str	r3, [sp, #0]
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 8011f04:	f242 7131 	movw	r1, #10033	; 0x2731
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 8011f08:	f642 33b6 	movw	r3, #11190	; 0x2bb6
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 8011f0c:	4348      	muls	r0, r1
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 8011f0e:	fb03 f105 	mul.w	r1, r3, r5
    tmp21 = z3 + tmp12;
 8011f12:	eb0c 3347 	add.w	r3, ip, r7, lsl #13
    tmp10 = z3 + z4;
 8011f16:	eb00 3647 	add.w	r6, r0, r7, lsl #13
    tmp21 = z3 + tmp12;
 8011f1a:	9301      	str	r3, [sp, #4]
    tmp24 = z3 - tmp12;
 8011f1c:	ebcc 3347 	rsb	r3, ip, r7, lsl #13
    tmp12 = z4 + z2;
 8011f20:	eb01 0c04 	add.w	ip, r1, r4
    tmp12 = z4 - z1 - z2;
 8011f24:	eba1 3145 	sub.w	r1, r1, r5, lsl #13
    tmp11 = z3 - z4;
 8011f28:	ebc0 3047 	rsb	r0, r0, r7, lsl #13
    tmp24 = z3 - tmp12;
 8011f2c:	9302      	str	r3, [sp, #8]
    tmp12 = z4 - z1 - z2;
 8011f2e:	1b0c      	subs	r4, r1, r4
    tmp25 = tmp10 - tmp12;
 8011f30:	eba6 030c 	sub.w	r3, r6, ip
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 8011f34:	f642 11cf 	movw	r1, #10703	; 0x29cf
    z3 = (INT32) wsptr[5];
 8011f38:	f852 5c0c 	ldr.w	r5, [r2, #-12]
    tmp25 = tmp10 - tmp12;
 8011f3c:	9303      	str	r3, [sp, #12]
    tmp22 = tmp11 + tmp12;
 8011f3e:	1903      	adds	r3, r0, r4
    tmp20 = tmp10 + tmp12;
 8011f40:	eb06 070c 	add.w	r7, r6, ip
    tmp22 = tmp11 + tmp12;
 8011f44:	9304      	str	r3, [sp, #16]
    tmp23 = tmp11 - tmp12;
 8011f46:	1b03      	subs	r3, r0, r4
    z4 = (INT32) wsptr[7];
 8011f48:	f852 4c04 	ldr.w	r4, [r2, #-4]
    tmp23 = tmp11 - tmp12;
 8011f4c:	9305      	str	r3, [sp, #20]
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 8011f4e:	f852 3c14 	ldr.w	r3, [r2, #-20]
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 8011f52:	eb05 0904 	add.w	r9, r5, r4
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 8011f56:	fb01 f003 	mul.w	r0, r1, r3
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 8011f5a:	4956      	ldr	r1, [pc, #344]	; (80120b4 <jpeg_idct_12x12+0x3a4>)
 8011f5c:	4359      	muls	r1, r3
    tmp10 = z1 + z3;
 8011f5e:	f852 3c1c 	ldr.w	r3, [r2, #-28]
 8011f62:	195e      	adds	r6, r3, r5
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 8011f64:	eb04 0c06 	add.w	ip, r4, r6
 8011f68:	fb0e fc0c 	mul.w	ip, lr, ip
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 8011f6c:	f640 0e5b 	movw	lr, #2139	; 0x85b
 8011f70:	fb0e c806 	mla	r8, lr, r6, ip
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 8011f74:	f640 06f7 	movw	r6, #2295	; 0x8f7
 8011f78:	eb00 0e08 	add.w	lr, r0, r8
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8011f7c:	ebac 0000 	sub.w	r0, ip, r0
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 8011f80:	fb06 ee03 	mla	lr, r6, r3, lr
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 8011f84:	4b4c      	ldr	r3, [pc, #304]	; (80120b8 <jpeg_idct_12x12+0x3a8>)
 8011f86:	fb03 f909 	mul.w	r9, r3, r9
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 8011f8a:	f6a3 53db 	subw	r3, r3, #3547	; 0xddb
 8011f8e:	eb01 0609 	add.w	r6, r1, r9
 8011f92:	fb03 6605 	mla	r6, r3, r5, r6
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8011f96:	f852 3c1c 	ldr.w	r3, [r2, #-28]
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 8011f9a:	4446      	add	r6, r8
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8011f9c:	f243 28c6 	movw	r8, #12998	; 0x32c6
 8011fa0:	fb08 0004 	mla	r0, r8, r4, r0
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 8011fa4:	f241 1851 	movw	r8, #4433	; 0x1151
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8011fa8:	4481      	add	r9, r0
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8011faa:	4845      	ldr	r0, [pc, #276]	; (80120c0 <jpeg_idct_12x12+0x3b0>)
 8011fac:	fb00 1103 	mla	r1, r0, r3, r1
 8011fb0:	4b44      	ldr	r3, [pc, #272]	; (80120c4 <jpeg_idct_12x12+0x3b4>)
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8011fb2:	9874      	ldr	r0, [sp, #464]	; 0x1d0
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8011fb4:	fb03 1104 	mla	r1, r3, r4, r1
    z1 -= z4;
 8011fb8:	f852 3c1c 	ldr.w	r3, [r2, #-28]
 8011fbc:	1b1c      	subs	r4, r3, r4
    z2 -= z3;
 8011fbe:	f852 3c14 	ldr.w	r3, [r2, #-20]
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8011fc2:	4461      	add	r1, ip
    z2 -= z3;
 8011fc4:	1b5d      	subs	r5, r3, r5
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 8011fc6:	4b40      	ldr	r3, [pc, #256]	; (80120c8 <jpeg_idct_12x12+0x3b8>)
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 8011fc8:	eb04 0c05 	add.w	ip, r4, r5
 8011fcc:	fb08 fc0c 	mul.w	ip, r8, ip
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
 8011fd0:	f641 087e 	movw	r8, #6270	; 0x187e
 8011fd4:	fb08 c404 	mla	r4, r8, r4, ip
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8011fd8:	eb07 080e 	add.w	r8, r7, lr
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8011fdc:	eba7 070e 	sub.w	r7, r7, lr
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 8011fe0:	fb03 c505 	mla	r5, r3, r5, ip
			     & RANGE_MASK];
 8011fe4:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8011fe8:	9b06      	ldr	r3, [sp, #24]
			     & RANGE_MASK];
 8011fea:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8011fee:	f81b c008 	ldrb.w	ip, [fp, r8]
 8011ff2:	f803 c000 	strb.w	ip, [r3, r0]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8011ff6:	9b00      	ldr	r3, [sp, #0]
 8011ff8:	f81b 7007 	ldrb.w	r7, [fp, r7]
 8011ffc:	72df      	strb	r7, [r3, #11]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8011ffe:	9b01      	ldr	r3, [sp, #4]
 8012000:	191f      	adds	r7, r3, r4
 8012002:	9b00      	ldr	r3, [sp, #0]
			     & RANGE_MASK];
 8012004:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8012008:	f81b 7007 	ldrb.w	r7, [fp, r7]
 801200c:	705f      	strb	r7, [r3, #1]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 801200e:	9b01      	ldr	r3, [sp, #4]
 8012010:	eba3 0804 	sub.w	r8, r3, r4
			     & RANGE_MASK];
 8012014:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8012018:	f81b 4008 	ldrb.w	r4, [fp, r8]
 801201c:	9b00      	ldr	r3, [sp, #0]
 801201e:	729c      	strb	r4, [r3, #10]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8012020:	9b04      	ldr	r3, [sp, #16]
 8012022:	199c      	adds	r4, r3, r6
 8012024:	9b00      	ldr	r3, [sp, #0]
			     & RANGE_MASK];
 8012026:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801202a:	f81b 4004 	ldrb.w	r4, [fp, r4]
 801202e:	709c      	strb	r4, [r3, #2]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8012030:	9b04      	ldr	r3, [sp, #16]
 8012032:	1b9e      	subs	r6, r3, r6
 8012034:	9b00      	ldr	r3, [sp, #0]
			     & RANGE_MASK];
 8012036:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801203a:	f81b 4006 	ldrb.w	r4, [fp, r6]
 801203e:	725c      	strb	r4, [r3, #9]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8012040:	9b05      	ldr	r3, [sp, #20]
 8012042:	eb03 0409 	add.w	r4, r3, r9
 8012046:	9b00      	ldr	r3, [sp, #0]
			     & RANGE_MASK];
 8012048:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 801204c:	f81b 4004 	ldrb.w	r4, [fp, r4]
 8012050:	70dc      	strb	r4, [r3, #3]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8012052:	9b05      	ldr	r3, [sp, #20]
 8012054:	eba3 0009 	sub.w	r0, r3, r9
 8012058:	9b00      	ldr	r3, [sp, #0]
			     & RANGE_MASK];
 801205a:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 801205e:	f81b 0000 	ldrb.w	r0, [fp, r0]
 8012062:	7218      	strb	r0, [r3, #8]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8012064:	9b02      	ldr	r3, [sp, #8]
 8012066:	1958      	adds	r0, r3, r5
 8012068:	9b00      	ldr	r3, [sp, #0]
			     & RANGE_MASK];
 801206a:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 801206e:	f81b 0000 	ldrb.w	r0, [fp, r0]
 8012072:	7118      	strb	r0, [r3, #4]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8012074:	9b02      	ldr	r3, [sp, #8]
 8012076:	1b5d      	subs	r5, r3, r5
 8012078:	9b00      	ldr	r3, [sp, #0]
			     & RANGE_MASK];
 801207a:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 801207e:	f81b 0005 	ldrb.w	r0, [fp, r5]
 8012082:	71d8      	strb	r0, [r3, #7]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8012084:	9b03      	ldr	r3, [sp, #12]
 8012086:	1858      	adds	r0, r3, r1
 8012088:	9b00      	ldr	r3, [sp, #0]
			     & RANGE_MASK];
 801208a:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 801208e:	f81b 0000 	ldrb.w	r0, [fp, r0]
 8012092:	7158      	strb	r0, [r3, #5]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8012094:	9b03      	ldr	r3, [sp, #12]
 8012096:	1a59      	subs	r1, r3, r1
			     & RANGE_MASK];
 8012098:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 801209c:	f81b 1001 	ldrb.w	r1, [fp, r1]
 80120a0:	9b00      	ldr	r3, [sp, #0]
 80120a2:	7199      	strb	r1, [r3, #6]
  for (ctr = 0; ctr < 12; ctr++) {
 80120a4:	9b07      	ldr	r3, [sp, #28]
 80120a6:	4553      	cmp	r3, sl
 80120a8:	f47f af17 	bne.w	8011eda <jpeg_idct_12x12+0x1ca>
  }
}
 80120ac:	b06b      	add	sp, #428	; 0x1ac
 80120ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120b2:	bf00      	nop
 80120b4:	ffffeeaf 	.word	0xffffeeaf
 80120b8:	ffffde8b 	.word	0xffffde8b
 80120bc:	ffffd0b0 	.word	0xffffd0b0
 80120c0:	ffffea5c 	.word	0xffffea5c
 80120c4:	ffffc08c 	.word	0xffffc08c
 80120c8:	ffffc4df 	.word	0xffffc4df

080120cc <jpeg_idct_13x13>:

GLOBAL(void)
jpeg_idct_13x13 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80120cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120d0:	b0f9      	sub	sp, #484	; 0x1e4
 80120d2:	6d4f      	ldr	r7, [r1, #84]	; 0x54
 80120d4:	f1a2 0b02 	sub.w	fp, r2, #2
 80120d8:	930c      	str	r3, [sp, #48]	; 0x30
 80120da:	3f04      	subs	r7, #4
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80120dc:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 80120e0:	f103 0c80 	add.w	ip, r3, #128	; 0x80
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80120e4:	f102 030e 	add.w	r3, r2, #14
  wsptr = workspace;
 80120e8:	aa10      	add	r2, sp, #64	; 0x40
 80120ea:	930f      	str	r3, [sp, #60]	; 0x3c
    /* Even part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80120ec:	f93b 3f02 	ldrsh.w	r3, [fp, #2]!
    z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);

    tmp10 = z3 + z4;
    tmp11 = z3 - z4;

    tmp12 = MULTIPLY(tmp10, FIX(1.155388986));                /* (c4+c6)/2 */
 80120f0:	f242 45f9 	movw	r5, #9465	; 0x24f9
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80120f4:	f857 1f04 	ldr.w	r1, [r7, #4]!
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);

    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
    tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
    tmp15 = z1 + z4;
    tmp13 = MULTIPLY(tmp15, FIX(0.937797057));       /* c7 */
 80120f8:	f641 6802 	movw	r8, #7682	; 0x1e02
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80120fc:	f9bb 4020 	ldrsh.w	r4, [fp, #32]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8012100:	3204      	adds	r2, #4
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012102:	434b      	muls	r3, r1
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8012104:	f9bb 1040 	ldrsh.w	r1, [fp, #64]	; 0x40
    z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8012108:	f9bb 0060 	ldrsh.w	r0, [fp, #96]	; 0x60
    z1 <<= CONST_BITS;
 801210c:	035b      	lsls	r3, r3, #13
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 801210e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012112:	9305      	str	r3, [sp, #20]
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8012114:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012116:	435c      	muls	r4, r3
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8012118:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801211c:	4359      	muls	r1, r3
    z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801211e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8012122:	4358      	muls	r0, r3
    tmp10 = z3 + z4;
 8012124:	180b      	adds	r3, r1, r0
    tmp11 = z3 - z4;
 8012126:	1a09      	subs	r1, r1, r0
 8012128:	9104      	str	r1, [sp, #16]
    tmp13 = MULTIPLY(tmp11, FIX(0.096834934)) + z1;           /* (c4-c6)/2 */
 801212a:	f240 3119 	movw	r1, #793	; 0x319
    tmp12 = MULTIPLY(tmp10, FIX(1.155388986));                /* (c4+c6)/2 */
 801212e:	435d      	muls	r5, r3
    tmp13 = MULTIPLY(tmp11, FIX(0.096834934)) + z1;           /* (c4-c6)/2 */
 8012130:	e9dd 6004 	ldrd	r6, r0, [sp, #16]
 8012134:	fb01 0106 	mla	r1, r1, r6, r0
    tmp20 = MULTIPLY(z2, FIX(1.373119086)) + tmp12 + tmp13;   /* c2 */
 8012138:	f642 30f1 	movw	r0, #11249	; 0x2bf1
 801213c:	fb00 5004 	mla	r0, r0, r4, r5
 8012140:	4408      	add	r0, r1
 8012142:	9006      	str	r0, [sp, #24]
    tmp22 = MULTIPLY(z2, FIX(0.501487041)) - tmp12 + tmp13;   /* c10 */
 8012144:	f241 000c 	movw	r0, #4108	; 0x100c
 8012148:	4360      	muls	r0, r4
 801214a:	1b40      	subs	r0, r0, r5
    tmp13 = MULTIPLY(tmp11, FIX(0.486914739)) + z1;           /* (c8+c12)/2 */
 801214c:	f640 457c 	movw	r5, #3196	; 0xc7c
    tmp22 = MULTIPLY(z2, FIX(0.501487041)) - tmp12 + tmp13;   /* c10 */
 8012150:	4408      	add	r0, r1
    tmp13 = MULTIPLY(tmp11, FIX(0.486914739)) + z1;           /* (c8+c12)/2 */
 8012152:	fb05 1106 	mla	r1, r5, r6, r1
    tmp21 = MULTIPLY(z2, FIX(1.058554052)) - tmp12 + tmp13;   /* c6 */
 8012156:	f242 15e0 	movw	r5, #8672	; 0x21e0
    tmp22 = MULTIPLY(z2, FIX(0.501487041)) - tmp12 + tmp13;   /* c10 */
 801215a:	9007      	str	r0, [sp, #28]
    tmp12 = MULTIPLY(tmp10, FIX(0.316450131));                /* (c8-c12)/2 */
 801215c:	f44f 6022 	mov.w	r0, #2592	; 0xa20
    tmp21 = MULTIPLY(z2, FIX(1.058554052)) - tmp12 + tmp13;   /* c6 */
 8012160:	4365      	muls	r5, r4
    tmp12 = MULTIPLY(tmp10, FIX(0.316450131));                /* (c8-c12)/2 */
 8012162:	4358      	muls	r0, r3
    tmp21 = MULTIPLY(z2, FIX(1.058554052)) - tmp12 + tmp13;   /* c6 */
 8012164:	1a2d      	subs	r5, r5, r0
 8012166:	440d      	add	r5, r1
 8012168:	9508      	str	r5, [sp, #32]
    tmp25 = MULTIPLY(z2, - FIX(1.252223920)) + tmp12 + tmp13; /* c4 */
 801216a:	4dd0      	ldr	r5, [pc, #832]	; (80124ac <jpeg_idct_13x13+0x3e0>)
 801216c:	fb05 0004 	mla	r0, r5, r4, r0
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8012170:	f8d7 50a0 	ldr.w	r5, [r7, #160]	; 0xa0
    tmp25 = MULTIPLY(z2, - FIX(1.252223920)) + tmp12 + tmp13; /* c4 */
 8012174:	1841      	adds	r1, r0, r1
    tmp13 = MULTIPLY(tmp11, FIX(0.937303064)) - z1;           /* (c2+c10)/2 */
 8012176:	9805      	ldr	r0, [sp, #20]
    tmp25 = MULTIPLY(z2, - FIX(1.252223920)) + tmp12 + tmp13; /* c4 */
 8012178:	9109      	str	r1, [sp, #36]	; 0x24
    tmp12 = MULTIPLY(tmp10, FIX(0.435816023));                /* (c2-c10)/2 */
 801217a:	f640 51f2 	movw	r1, #3570	; 0xdf2
 801217e:	434b      	muls	r3, r1
    tmp13 = MULTIPLY(tmp11, FIX(0.937303064)) - z1;           /* (c2+c10)/2 */
 8012180:	f641 51fe 	movw	r1, #7678	; 0x1dfe
 8012184:	4371      	muls	r1, r6
 8012186:	1a09      	subs	r1, r1, r0
    tmp23 = MULTIPLY(z2, - FIX(0.170464608)) - tmp12 - tmp13; /* c12 */
 8012188:	48c9      	ldr	r0, [pc, #804]	; (80124b0 <jpeg_idct_13x13+0x3e4>)
 801218a:	4360      	muls	r0, r4
 801218c:	1ac0      	subs	r0, r0, r3
 801218e:	1a40      	subs	r0, r0, r1
 8012190:	900a      	str	r0, [sp, #40]	; 0x28
    tmp24 = MULTIPLY(z2, - FIX(0.803364869)) + tmp12 - tmp13; /* c8 */
 8012192:	48c8      	ldr	r0, [pc, #800]	; (80124b4 <jpeg_idct_13x13+0x3e8>)
 8012194:	fb00 3304 	mla	r3, r0, r4, r3
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8012198:	f9bb 0030 	ldrsh.w	r0, [fp, #48]	; 0x30
    tmp24 = MULTIPLY(z2, - FIX(0.803364869)) + tmp12 - tmp13; /* c8 */
 801219c:	1a5b      	subs	r3, r3, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801219e:	f9bb 1010 	ldrsh.w	r1, [fp, #16]
    tmp24 = MULTIPLY(z2, - FIX(0.803364869)) + tmp12 - tmp13; /* c8 */
 80121a2:	930b      	str	r3, [sp, #44]	; 0x2c
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80121a4:	6a3b      	ldr	r3, [r7, #32]
 80121a6:	434b      	muls	r3, r1
 80121a8:	9302      	str	r3, [sp, #8]
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80121aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
 80121ac:	9902      	ldr	r1, [sp, #8]
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80121ae:	4343      	muls	r3, r0
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80121b0:	f9bb 0050 	ldrsh.w	r0, [fp, #80]	; 0x50
 80121b4:	4368      	muls	r0, r5
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80121b6:	f8d7 50e0 	ldr.w	r5, [r7, #224]	; 0xe0
    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
 80121ba:	18ce      	adds	r6, r1, r3
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80121bc:	9001      	str	r0, [sp, #4]
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80121be:	f9bb 0070 	ldrsh.w	r0, [fp, #112]	; 0x70
 80121c2:	4368      	muls	r0, r5
 80121c4:	9003      	str	r0, [sp, #12]
    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
 80121c6:	f642 2050 	movw	r0, #10832	; 0x2a50
 80121ca:	4370      	muls	r0, r6
 80121cc:	4601      	mov	r1, r0
    tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
 80121ce:	e9dd 0501 	ldrd	r0, r5, [sp, #4]
 80121d2:	4428      	add	r0, r5
 80121d4:	f242 553e 	movw	r5, #9534	; 0x253e
 80121d8:	4345      	muls	r5, r0
    tmp15 = z1 + z4;
 80121da:	e9dd 6002 	ldrd	r6, r0, [sp, #8]
    tmp10 = tmp11 + tmp12 + tmp13 -
 80121de:	eb01 0e05 	add.w	lr, r1, r5
    tmp15 = z1 + z4;
 80121e2:	eb06 0900 	add.w	r9, r6, r0
    tmp10 = tmp11 + tmp12 + tmp13 -
 80121e6:	48b4      	ldr	r0, [pc, #720]	; (80124b8 <jpeg_idct_13x13+0x3ec>)
    tmp13 = MULTIPLY(tmp15, FIX(0.937797057));       /* c7 */
 80121e8:	fb08 fa09 	mul.w	sl, r8, r9
    tmp10 = tmp11 + tmp12 + tmp13 -
 80121ec:	44d6      	add	lr, sl
 80121ee:	fb00 ee06 	mla	lr, r0, r6, lr
	    MULTIPLY(z1, FIX(2.020082300));          /* c7+c5+c3-c1 */
    tmp14 = MULTIPLY(z2 + z3, - FIX(0.338443458));   /* -c11 */
 80121f2:	9801      	ldr	r0, [sp, #4]
 80121f4:	4eb1      	ldr	r6, [pc, #708]	; (80124bc <jpeg_idct_13x13+0x3f0>)
 80121f6:	1818      	adds	r0, r3, r0
 80121f8:	4370      	muls	r0, r6
    tmp11 += tmp14 + MULTIPLY(z2, FIX(0.837223564)); /* c5+c9+c11-c3 */
 80121fa:	f641 26cb 	movw	r6, #6859	; 0x1acb
 80121fe:	fb06 0603 	mla	r6, r6, r3, r0
 8012202:	1871      	adds	r1, r6, r1
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 8012204:	4eae      	ldr	r6, [pc, #696]	; (80124c0 <jpeg_idct_13x13+0x3f4>)
    tmp11 += tmp14 + MULTIPLY(z2, FIX(0.837223564)); /* c5+c9+c11-c3 */
 8012206:	910d      	str	r1, [sp, #52]	; 0x34
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 8012208:	9901      	ldr	r1, [sp, #4]
 801220a:	fb06 0001 	mla	r0, r6, r1, r0
    tmp14 = MULTIPLY(z2 + z4, - FIX(1.163874945));   /* -c5 */
    tmp11 += tmp14;
 801220e:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 8012210:	1941      	adds	r1, r0, r5
    tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
 8012212:	f244 6094 	movw	r0, #18068	; 0x4694
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 8012216:	910e      	str	r1, [sp, #56]	; 0x38
    tmp14 = MULTIPLY(z2 + z4, - FIX(1.163874945));   /* -c5 */
 8012218:	9903      	ldr	r1, [sp, #12]
 801221a:	185d      	adds	r5, r3, r1
 801221c:	49a9      	ldr	r1, [pc, #676]	; (80124c4 <jpeg_idct_13x13+0x3f8>)
 801221e:	434d      	muls	r5, r1
    tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
 8012220:	9903      	ldr	r1, [sp, #12]
    tmp11 += tmp14;
 8012222:	442e      	add	r6, r5
    tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
 8012224:	fb00 5501 	mla	r5, r0, r1, r5
    tmp14 = MULTIPLY(z3 + z4, - FIX(0.657217813));   /* -c9 */
 8012228:	9901      	ldr	r1, [sp, #4]
 801222a:	9803      	ldr	r0, [sp, #12]
    tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
 801222c:	4455      	add	r5, sl
    tmp14 = MULTIPLY(z3 + z4, - FIX(0.657217813));   /* -c9 */
 801222e:	eb01 0a00 	add.w	sl, r1, r0
 8012232:	49a5      	ldr	r1, [pc, #660]	; (80124c8 <jpeg_idct_13x13+0x3fc>)
    tmp12 += tmp14;
 8012234:	980e      	ldr	r0, [sp, #56]	; 0x38
    tmp14 = MULTIPLY(z3 + z4, - FIX(0.657217813));   /* -c9 */
 8012236:	fb01 fa0a 	mul.w	sl, r1, sl
    tmp13 += tmp14;
    tmp15 = MULTIPLY(tmp15, FIX(0.338443458));       /* c11 */
    tmp14 = tmp15 + MULTIPLY(z1, FIX(0.318774355)) - /* c9-c11 */
 801223a:	9902      	ldr	r1, [sp, #8]
    tmp12 += tmp14;
 801223c:	4450      	add	r0, sl
    tmp13 += tmp14;
 801223e:	44aa      	add	sl, r5
    tmp15 = MULTIPLY(tmp15, FIX(0.338443458));       /* c11 */
 8012240:	f640 25d5 	movw	r5, #2773	; 0xad5
 8012244:	fb05 f909 	mul.w	r9, r5, r9
    tmp14 = tmp15 + MULTIPLY(z1, FIX(0.318774355)) - /* c9-c11 */
 8012248:	f640 2533 	movw	r5, #2611	; 0xa33
 801224c:	fb05 9101 	mla	r1, r5, r1, r9
 8012250:	4d9e      	ldr	r5, [pc, #632]	; (80124cc <jpeg_idct_13x13+0x400>)
 8012252:	fb05 1103 	mla	r1, r5, r3, r1
	    MULTIPLY(z2, FIX(0.466105296));          /* c1-c7 */
    z1    = MULTIPLY(z3 - z2, FIX(0.937797057));     /* c7 */
 8012256:	9d01      	ldr	r5, [sp, #4]
 8012258:	1aeb      	subs	r3, r5, r3
 801225a:	fb08 f803 	mul.w	r8, r8, r3
    tmp14 += z1;
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 801225e:	f640 434e 	movw	r3, #3150	; 0xc4e
    tmp14 += z1;
 8012262:	4441      	add	r1, r8
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 8012264:	fb03 8805 	mla	r8, r3, r5, r8
 8012268:	9d03      	ldr	r5, [sp, #12]
 801226a:	f46f 535f 	mvn.w	r3, #14272	; 0x37c0
 801226e:	fb03 8805 	mla	r8, r3, r5, r8
	     MULTIPLY(z4, FIX(1.742345811));         /* c1+c11 */

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8012272:	9b06      	ldr	r3, [sp, #24]
 8012274:	4473      	add	r3, lr
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 8012276:	44c1      	add	r9, r8
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8012278:	12db      	asrs	r3, r3, #11
 801227a:	f842 3c04 	str.w	r3, [r2, #-4]
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 801227e:	9b06      	ldr	r3, [sp, #24]
 8012280:	eba3 0e0e 	sub.w	lr, r3, lr
 8012284:	ea4f 23ee 	mov.w	r3, lr, asr #11
 8012288:	f8c2 317c 	str.w	r3, [r2, #380]	; 0x17c
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 801228c:	9b08      	ldr	r3, [sp, #32]
 801228e:	4433      	add	r3, r6
 8012290:	12db      	asrs	r3, r3, #11
 8012292:	61d3      	str	r3, [r2, #28]
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8012294:	9b08      	ldr	r3, [sp, #32]
 8012296:	1b9e      	subs	r6, r3, r6
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8012298:	9b07      	ldr	r3, [sp, #28]
 801229a:	4403      	add	r3, r0
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 801229c:	12f6      	asrs	r6, r6, #11
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 801229e:	12db      	asrs	r3, r3, #11
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 80122a0:	f8c2 615c 	str.w	r6, [r2, #348]	; 0x15c
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 80122a4:	63d3      	str	r3, [r2, #60]	; 0x3c
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 80122a6:	9b07      	ldr	r3, [sp, #28]
 80122a8:	1a18      	subs	r0, r3, r0
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 80122aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80122ac:	4453      	add	r3, sl
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 80122ae:	12c0      	asrs	r0, r0, #11
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 80122b0:	12db      	asrs	r3, r3, #11
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 80122b2:	f8c2 013c 	str.w	r0, [r2, #316]	; 0x13c
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 80122b6:	65d3      	str	r3, [r2, #92]	; 0x5c
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 80122b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80122ba:	eba3 0a0a 	sub.w	sl, r3, sl
 80122be:	ea4f 25ea 	mov.w	r5, sl, asr #11
 80122c2:	f8c2 511c 	str.w	r5, [r2, #284]	; 0x11c
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 80122c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80122c8:	440b      	add	r3, r1
 80122ca:	12db      	asrs	r3, r3, #11
 80122cc:	67d3      	str	r3, [r2, #124]	; 0x7c
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 80122ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80122d0:	1a59      	subs	r1, r3, r1
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 80122d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80122d4:	444b      	add	r3, r9
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 80122d6:	12c9      	asrs	r1, r1, #11
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 80122d8:	12db      	asrs	r3, r3, #11
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 80122da:	f8c2 10fc 	str.w	r1, [r2, #252]	; 0xfc
    tmp26 = MULTIPLY(tmp11 - z2, FIX(1.414213562)) + z1;      /* c0 */
 80122de:	9905      	ldr	r1, [sp, #20]
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 80122e0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 80122e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80122e6:	eba3 0909 	sub.w	r9, r3, r9
 80122ea:	ea4f 23e9 	mov.w	r3, r9, asr #11
 80122ee:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
    tmp26 = MULTIPLY(tmp11 - z2, FIX(1.414213562)) + z1;      /* c0 */
 80122f2:	9b04      	ldr	r3, [sp, #16]
 80122f4:	1b1c      	subs	r4, r3, r4
 80122f6:	f642 5341 	movw	r3, #11585	; 0x2d41
 80122fa:	fb03 1404 	mla	r4, r3, r4, r1
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80122fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26, CONST_BITS-PASS1_BITS);
 8012300:	12e4      	asrs	r4, r4, #11
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8012302:	455b      	cmp	r3, fp
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26, CONST_BITS-PASS1_BITS);
 8012304:	f8c2 40bc 	str.w	r4, [r2, #188]	; 0xbc
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8012308:	f47f aef0 	bne.w	80120ec <jpeg_idct_13x13+0x20>
 801230c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  }

  /* Pass 2: process 13 rows from work array, store into output array. */

  wsptr = workspace;
 801230e:	ac10      	add	r4, sp, #64	; 0x40
 8012310:	3b04      	subs	r3, #4
 8012312:	9303      	str	r3, [sp, #12]
 8012314:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012316:	3330      	adds	r3, #48	; 0x30
 8012318:	930d      	str	r3, [sp, #52]	; 0x34
  for (ctr = 0; ctr < 13; ctr++) {
    outptr = output_buf[ctr] + output_col;
 801231a:	9b03      	ldr	r3, [sp, #12]
    z4 = (INT32) wsptr[6];

    tmp10 = z3 + z4;
    tmp11 = z3 - z4;

    tmp12 = MULTIPLY(tmp10, FIX(1.155388986));                /* (c4+c6)/2 */
 801231c:	f242 45f9 	movw	r5, #9465	; 0x24f9
    z3 = (INT32) wsptr[4];
 8012320:	6920      	ldr	r0, [r4, #16]
    z1 = (INT32) wsptr[1];
    z2 = (INT32) wsptr[3];
    z3 = (INT32) wsptr[5];
    z4 = (INT32) wsptr[7];

    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
 8012322:	f642 2b50 	movw	fp, #10832	; 0x2a50
    outptr = output_buf[ctr] + output_col;
 8012326:	f853 2f04 	ldr.w	r2, [r3, #4]!
    tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
    tmp15 = z1 + z4;
    tmp13 = MULTIPLY(tmp15, FIX(0.937797057));       /* c7 */
 801232a:	f641 6802 	movw	r8, #7682	; 0x1e02
    z4 = (INT32) wsptr[6];
 801232e:	69a1      	ldr	r1, [r4, #24]
			     & RANGE_MASK];
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 8012330:	3420      	adds	r4, #32
    outptr = output_buf[ctr] + output_col;
 8012332:	920b      	str	r2, [sp, #44]	; 0x2c
 8012334:	9303      	str	r3, [sp, #12]
 8012336:	4613      	mov	r3, r2
 8012338:	9a82      	ldr	r2, [sp, #520]	; 0x208
    z2 = (INT32) wsptr[2];
 801233a:	f854 ec18 	ldr.w	lr, [r4, #-24]
    outptr = output_buf[ctr] + output_col;
 801233e:	189a      	adds	r2, r3, r2
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8012340:	f854 3c20 	ldr.w	r3, [r4, #-32]
 8012344:	3310      	adds	r3, #16
 8012346:	9302      	str	r3, [sp, #8]
    tmp10 = z3 + z4;
 8012348:	1843      	adds	r3, r0, r1
    tmp11 = z3 - z4;
 801234a:	1a41      	subs	r1, r0, r1
    tmp12 = MULTIPLY(tmp10, FIX(1.155388986));                /* (c4+c6)/2 */
 801234c:	435d      	muls	r5, r3
    tmp11 = z3 - z4;
 801234e:	9101      	str	r1, [sp, #4]
    tmp13 = MULTIPLY(tmp11, FIX(0.096834934)) + z1;           /* (c4-c6)/2 */
 8012350:	f240 3119 	movw	r1, #793	; 0x319
 8012354:	9801      	ldr	r0, [sp, #4]
    tmp13 = MULTIPLY(tmp11, FIX(0.486914739)) + z1;           /* (c8+c12)/2 */
 8012356:	9e01      	ldr	r6, [sp, #4]
    tmp13 = MULTIPLY(tmp11, FIX(0.096834934)) + z1;           /* (c4-c6)/2 */
 8012358:	4341      	muls	r1, r0
 801235a:	9802      	ldr	r0, [sp, #8]
 801235c:	eb01 3140 	add.w	r1, r1, r0, lsl #13
    tmp20 = MULTIPLY(z2, FIX(1.373119086)) + tmp12 + tmp13;   /* c2 */
 8012360:	f642 30f1 	movw	r0, #11249	; 0x2bf1
 8012364:	fb00 500e 	mla	r0, r0, lr, r5
 8012368:	4408      	add	r0, r1
 801236a:	9004      	str	r0, [sp, #16]
    tmp22 = MULTIPLY(z2, FIX(0.501487041)) - tmp12 + tmp13;   /* c10 */
 801236c:	f241 000c 	movw	r0, #4108	; 0x100c
 8012370:	fb00 f00e 	mul.w	r0, r0, lr
 8012374:	1b40      	subs	r0, r0, r5
    tmp13 = MULTIPLY(tmp11, FIX(0.486914739)) + z1;           /* (c8+c12)/2 */
 8012376:	f640 457c 	movw	r5, #3196	; 0xc7c
    tmp22 = MULTIPLY(z2, FIX(0.501487041)) - tmp12 + tmp13;   /* c10 */
 801237a:	4408      	add	r0, r1
    tmp13 = MULTIPLY(tmp11, FIX(0.486914739)) + z1;           /* (c8+c12)/2 */
 801237c:	fb05 1106 	mla	r1, r5, r6, r1
    tmp21 = MULTIPLY(z2, FIX(1.058554052)) - tmp12 + tmp13;   /* c6 */
 8012380:	f242 15e0 	movw	r5, #8672	; 0x21e0
    tmp22 = MULTIPLY(z2, FIX(0.501487041)) - tmp12 + tmp13;   /* c10 */
 8012384:	9005      	str	r0, [sp, #20]
    tmp12 = MULTIPLY(tmp10, FIX(0.316450131));                /* (c8-c12)/2 */
 8012386:	f44f 6022 	mov.w	r0, #2592	; 0xa20
    tmp21 = MULTIPLY(z2, FIX(1.058554052)) - tmp12 + tmp13;   /* c6 */
 801238a:	fb05 f50e 	mul.w	r5, r5, lr
    tmp12 = MULTIPLY(tmp10, FIX(0.316450131));                /* (c8-c12)/2 */
 801238e:	4358      	muls	r0, r3
    tmp21 = MULTIPLY(z2, FIX(1.058554052)) - tmp12 + tmp13;   /* c6 */
 8012390:	1a2d      	subs	r5, r5, r0
 8012392:	440d      	add	r5, r1
 8012394:	9506      	str	r5, [sp, #24]
    tmp25 = MULTIPLY(z2, - FIX(1.252223920)) + tmp12 + tmp13; /* c4 */
 8012396:	4d45      	ldr	r5, [pc, #276]	; (80124ac <jpeg_idct_13x13+0x3e0>)
 8012398:	fb05 000e 	mla	r0, r5, lr, r0
    tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
 801239c:	f242 553e 	movw	r5, #9534	; 0x253e
    tmp25 = MULTIPLY(z2, - FIX(1.252223920)) + tmp12 + tmp13; /* c4 */
 80123a0:	1841      	adds	r1, r0, r1
    tmp13 = MULTIPLY(tmp11, FIX(0.937303064)) - z1;           /* (c2+c10)/2 */
 80123a2:	9802      	ldr	r0, [sp, #8]
    tmp25 = MULTIPLY(z2, - FIX(1.252223920)) + tmp12 + tmp13; /* c4 */
 80123a4:	9107      	str	r1, [sp, #28]
    tmp12 = MULTIPLY(tmp10, FIX(0.435816023));                /* (c2-c10)/2 */
 80123a6:	f640 51f2 	movw	r1, #3570	; 0xdf2
 80123aa:	434b      	muls	r3, r1
    tmp13 = MULTIPLY(tmp11, FIX(0.937303064)) - z1;           /* (c2+c10)/2 */
 80123ac:	f641 51fe 	movw	r1, #7678	; 0x1dfe
 80123b0:	4371      	muls	r1, r6
 80123b2:	eba1 3140 	sub.w	r1, r1, r0, lsl #13
    tmp23 = MULTIPLY(z2, - FIX(0.170464608)) - tmp12 - tmp13; /* c12 */
 80123b6:	483e      	ldr	r0, [pc, #248]	; (80124b0 <jpeg_idct_13x13+0x3e4>)
 80123b8:	fb00 f00e 	mul.w	r0, r0, lr
 80123bc:	1ac0      	subs	r0, r0, r3
 80123be:	1a40      	subs	r0, r0, r1
 80123c0:	9008      	str	r0, [sp, #32]
    tmp24 = MULTIPLY(z2, - FIX(0.803364869)) + tmp12 - tmp13; /* c8 */
 80123c2:	483c      	ldr	r0, [pc, #240]	; (80124b4 <jpeg_idct_13x13+0x3e8>)
 80123c4:	fb00 330e 	mla	r3, r0, lr, r3
    tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
 80123c8:	f854 0c0c 	ldr.w	r0, [r4, #-12]
    tmp24 = MULTIPLY(z2, - FIX(0.803364869)) + tmp12 - tmp13; /* c8 */
 80123cc:	1a5b      	subs	r3, r3, r1
    z1 = (INT32) wsptr[1];
 80123ce:	f854 1c1c 	ldr.w	r1, [r4, #-28]
    tmp24 = MULTIPLY(z2, - FIX(0.803364869)) + tmp12 - tmp13; /* c8 */
 80123d2:	9309      	str	r3, [sp, #36]	; 0x24
    tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
 80123d4:	1808      	adds	r0, r1, r0
    z2 = (INT32) wsptr[3];
 80123d6:	f854 3c14 	ldr.w	r3, [r4, #-20]
    tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
 80123da:	4345      	muls	r5, r0
    tmp15 = z1 + z4;
 80123dc:	f854 0c04 	ldr.w	r0, [r4, #-4]
    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
 80123e0:	18ce      	adds	r6, r1, r3
    tmp15 = z1 + z4;
 80123e2:	eb01 0900 	add.w	r9, r1, r0
    tmp10 = tmp11 + tmp12 + tmp13 -
 80123e6:	4834      	ldr	r0, [pc, #208]	; (80124b8 <jpeg_idct_13x13+0x3ec>)
    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
 80123e8:	fb0b fb06 	mul.w	fp, fp, r6
    tmp14 = MULTIPLY(z2 + z3, - FIX(0.338443458));   /* -c11 */
 80123ec:	4e33      	ldr	r6, [pc, #204]	; (80124bc <jpeg_idct_13x13+0x3f0>)
    tmp13 = MULTIPLY(tmp15, FIX(0.937797057));       /* c7 */
 80123ee:	fb08 fa09 	mul.w	sl, r8, r9
    tmp10 = tmp11 + tmp12 + tmp13 -
 80123f2:	eb0b 0705 	add.w	r7, fp, r5
 80123f6:	4457      	add	r7, sl
 80123f8:	fb00 7001 	mla	r0, r0, r1, r7
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 80123fc:	f854 7c0c 	ldr.w	r7, [r4, #-12]
    tmp10 = tmp11 + tmp12 + tmp13 -
 8012400:	900a      	str	r0, [sp, #40]	; 0x28
    tmp14 = MULTIPLY(z2 + z3, - FIX(0.338443458));   /* -c11 */
 8012402:	f854 0c0c 	ldr.w	r0, [r4, #-12]
 8012406:	1818      	adds	r0, r3, r0
 8012408:	4370      	muls	r0, r6
    tmp11 += tmp14 + MULTIPLY(z2, FIX(0.837223564)); /* c5+c9+c11-c3 */
 801240a:	f641 26cb 	movw	r6, #6859	; 0x1acb
 801240e:	fb06 0603 	mla	r6, r6, r3, r0
 8012412:	44b3      	add	fp, r6
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 8012414:	4e2a      	ldr	r6, [pc, #168]	; (80124c0 <jpeg_idct_13x13+0x3f4>)
 8012416:	fb06 0007 	mla	r0, r6, r7, r0
    tmp14 = MULTIPLY(z2 + z4, - FIX(1.163874945));   /* -c5 */
 801241a:	f606 5611 	addw	r6, r6, #3345	; 0xd11
    tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
 801241e:	f854 7c04 	ldr.w	r7, [r4, #-4]
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 8012422:	4428      	add	r0, r5
    tmp14 = MULTIPLY(z2 + z4, - FIX(1.163874945));   /* -c5 */
 8012424:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8012428:	195d      	adds	r5, r3, r5
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 801242a:	900c      	str	r0, [sp, #48]	; 0x30
    tmp14 = MULTIPLY(z2 + z4, - FIX(1.163874945));   /* -c5 */
 801242c:	4375      	muls	r5, r6
    tmp11 += tmp14;
 801242e:	eb0b 0605 	add.w	r6, fp, r5
    tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
 8012432:	f244 6b94 	movw	fp, #18068	; 0x4694
 8012436:	fb0b 5507 	mla	r5, fp, r7, r5
    tmp14 = MULTIPLY(z3 + z4, - FIX(0.657217813));   /* -c9 */
 801243a:	f854 7c0c 	ldr.w	r7, [r4, #-12]
 801243e:	f854 0c04 	ldr.w	r0, [r4, #-4]
    tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
 8012442:	4455      	add	r5, sl
    tmp14 = MULTIPLY(z3 + z4, - FIX(0.657217813));   /* -c9 */
 8012444:	eb07 0a00 	add.w	sl, r7, r0
 8012448:	481f      	ldr	r0, [pc, #124]	; (80124c8 <jpeg_idct_13x13+0x3fc>)
 801244a:	fb00 fa0a 	mul.w	sl, r0, sl
    tmp12 += tmp14;
 801244e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8012450:	4450      	add	r0, sl
    tmp13 += tmp14;
 8012452:	44aa      	add	sl, r5
    tmp15 = MULTIPLY(tmp15, FIX(0.338443458));       /* c11 */
 8012454:	f640 25d5 	movw	r5, #2773	; 0xad5
 8012458:	fb05 f909 	mul.w	r9, r5, r9
    tmp14 = tmp15 + MULTIPLY(z1, FIX(0.318774355)) - /* c9-c11 */
 801245c:	f640 2533 	movw	r5, #2611	; 0xa33
 8012460:	fb05 9101 	mla	r1, r5, r1, r9
 8012464:	4d19      	ldr	r5, [pc, #100]	; (80124cc <jpeg_idct_13x13+0x400>)
 8012466:	fb05 1103 	mla	r1, r5, r3, r1
    z1    = MULTIPLY(z3 - z2, FIX(0.937797057));     /* c7 */
 801246a:	1afb      	subs	r3, r7, r3
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 801246c:	f854 5c04 	ldr.w	r5, [r4, #-4]
    z1    = MULTIPLY(z3 - z2, FIX(0.937797057));     /* c7 */
 8012470:	fb08 f803 	mul.w	r8, r8, r3
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 8012474:	f640 434e 	movw	r3, #3150	; 0xc4e
    tmp14 += z1;
 8012478:	4441      	add	r1, r8
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 801247a:	fb03 8807 	mla	r8, r3, r7, r8
 801247e:	f46f 535f 	mvn.w	r3, #14272	; 0x37c0
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8012482:	9f82      	ldr	r7, [sp, #520]	; 0x208
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 8012484:	fb03 8805 	mla	r8, r3, r5, r8
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8012488:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801248a:	9b04      	ldr	r3, [sp, #16]
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 801248c:	44c1      	add	r9, r8
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801248e:	442b      	add	r3, r5
 8012490:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
			     & RANGE_MASK];
 8012492:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8012496:	f81c 3003 	ldrb.w	r3, [ip, r3]
 801249a:	55eb      	strb	r3, [r5, r7]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 801249c:	9b04      	ldr	r3, [sp, #16]
 801249e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80124a0:	1b5f      	subs	r7, r3, r5
			     & RANGE_MASK];
 80124a2:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80124a6:	f81c 3007 	ldrb.w	r3, [ip, r7]
 80124aa:	e011      	b.n	80124d0 <jpeg_idct_13x13+0x404>
 80124ac:	ffffd7ee 	.word	0xffffd7ee
 80124b0:	fffffa8c 	.word	0xfffffa8c
 80124b4:	ffffe64b 	.word	0xffffe64b
 80124b8:	ffffbf5b 	.word	0xffffbf5b
 80124bc:	fffff52b 	.word	0xfffff52b
 80124c0:	ffffcdb1 	.word	0xffffcdb1
 80124c4:	ffffdac2 	.word	0xffffdac2
 80124c8:	ffffeaf8 	.word	0xffffeaf8
 80124cc:	fffff116 	.word	0xfffff116
 80124d0:	7313      	strb	r3, [r2, #12]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80124d2:	9b06      	ldr	r3, [sp, #24]
 80124d4:	4433      	add	r3, r6
			     & RANGE_MASK];
 80124d6:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80124da:	f81c 3003 	ldrb.w	r3, [ip, r3]
 80124de:	7053      	strb	r3, [r2, #1]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80124e0:	9b06      	ldr	r3, [sp, #24]
 80124e2:	1b9e      	subs	r6, r3, r6
			     & RANGE_MASK];
 80124e4:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80124e8:	f81c 3006 	ldrb.w	r3, [ip, r6]
 80124ec:	72d3      	strb	r3, [r2, #11]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80124ee:	9b05      	ldr	r3, [sp, #20]
 80124f0:	4403      	add	r3, r0
			     & RANGE_MASK];
 80124f2:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80124f6:	f81c 3003 	ldrb.w	r3, [ip, r3]
 80124fa:	7093      	strb	r3, [r2, #2]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80124fc:	9b05      	ldr	r3, [sp, #20]
 80124fe:	1a18      	subs	r0, r3, r0
			     & RANGE_MASK];
 8012500:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8012504:	f81c 3000 	ldrb.w	r3, [ip, r0]
 8012508:	7293      	strb	r3, [r2, #10]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 801250a:	9b08      	ldr	r3, [sp, #32]
 801250c:	4453      	add	r3, sl
			     & RANGE_MASK];
 801250e:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8012512:	f81c 3003 	ldrb.w	r3, [ip, r3]
 8012516:	70d3      	strb	r3, [r2, #3]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8012518:	9b08      	ldr	r3, [sp, #32]
 801251a:	eba3 0a0a 	sub.w	sl, r3, sl
			     & RANGE_MASK];
 801251e:	f3ca 4a89 	ubfx	sl, sl, #18, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8012522:	f81c 300a 	ldrb.w	r3, [ip, sl]
 8012526:	7253      	strb	r3, [r2, #9]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8012528:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801252a:	440b      	add	r3, r1
			     & RANGE_MASK];
 801252c:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8012530:	f81c 3003 	ldrb.w	r3, [ip, r3]
 8012534:	7113      	strb	r3, [r2, #4]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8012536:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012538:	1a59      	subs	r1, r3, r1
			     & RANGE_MASK];
 801253a:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 801253e:	f81c 3001 	ldrb.w	r3, [ip, r1]
    tmp26 = MULTIPLY(tmp11 - z2, FIX(1.414213562)) + z1;      /* c0 */
 8012542:	f642 5141 	movw	r1, #11585	; 0x2d41
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8012546:	7213      	strb	r3, [r2, #8]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8012548:	9b07      	ldr	r3, [sp, #28]
 801254a:	444b      	add	r3, r9
			     & RANGE_MASK];
 801254c:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8012550:	f81c 3003 	ldrb.w	r3, [ip, r3]
 8012554:	7153      	strb	r3, [r2, #5]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8012556:	9b07      	ldr	r3, [sp, #28]
 8012558:	eba3 0909 	sub.w	r9, r3, r9
			     & RANGE_MASK];
 801255c:	f3c9 4989 	ubfx	r9, r9, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8012560:	f81c 3009 	ldrb.w	r3, [ip, r9]
 8012564:	71d3      	strb	r3, [r2, #7]
    tmp26 = MULTIPLY(tmp11 - z2, FIX(1.414213562)) + z1;      /* c0 */
 8012566:	9b01      	ldr	r3, [sp, #4]
 8012568:	eba3 030e 	sub.w	r3, r3, lr
 801256c:	434b      	muls	r3, r1
 801256e:	9902      	ldr	r1, [sp, #8]
 8012570:	eb03 3341 	add.w	r3, r3, r1, lsl #13
			     & RANGE_MASK];
 8012574:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26,
 8012578:	f81c 3003 	ldrb.w	r3, [ip, r3]
 801257c:	7193      	strb	r3, [r2, #6]
  for (ctr = 0; ctr < 13; ctr++) {
 801257e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012580:	9a03      	ldr	r2, [sp, #12]
 8012582:	4293      	cmp	r3, r2
 8012584:	f47f aec9 	bne.w	801231a <jpeg_idct_13x13+0x24e>
  }
}
 8012588:	b079      	add	sp, #484	; 0x1e4
 801258a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801258e:	bf00      	nop

08012590 <jpeg_idct_14x14>:

GLOBAL(void)
jpeg_idct_14x14 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8012590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012594:	b0ff      	sub	sp, #508	; 0x1fc
 8012596:	f1a2 0a02 	sub.w	sl, r2, #2
 801259a:	930a      	str	r3, [sp, #40]	; 0x28
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801259c:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 80125a0:	6d48      	ldr	r0, [r1, #84]	; 0x54
 80125a2:	f103 0b80 	add.w	fp, r3, #128	; 0x80
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80125a6:	1f03      	subs	r3, r0, #4
 80125a8:	9301      	str	r3, [sp, #4]
 80125aa:	f102 030e 	add.w	r3, r2, #14
 80125ae:	930c      	str	r3, [sp, #48]	; 0x30
  wsptr = workspace;
 80125b0:	ab0e      	add	r3, sp, #56	; 0x38
    /* Even part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80125b2:	9901      	ldr	r1, [sp, #4]

    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */

    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 80125b4:	f241 3ea3 	movw	lr, #5027	; 0x13a3
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80125b8:	f93a 4f02 	ldrsh.w	r4, [sl, #2]!
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
    tmp10 = tmp11 + tmp12 + tmp13 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
    z1    -= z2;
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - tmp13;        /* c11 */
 80125bc:	f640 68f2 	movw	r8, #3826	; 0xef2
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80125c0:	f851 2f04 	ldr.w	r2, [r1, #4]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80125c4:	3304      	adds	r3, #4
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80125c6:	9101      	str	r1, [sp, #4]
 80125c8:	4354      	muls	r4, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80125ca:	9a01      	ldr	r2, [sp, #4]
 80125cc:	f9ba 1040 	ldrsh.w	r1, [sl, #64]	; 0x40
 80125d0:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
    z1 <<= CONST_BITS;
 80125d4:	0364      	lsls	r4, r4, #13
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80125d6:	9801      	ldr	r0, [sp, #4]
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80125d8:	434a      	muls	r2, r1
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 80125da:	f642 01c6 	movw	r1, #10438	; 0x28c6
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 80125de:	f504 6480 	add.w	r4, r4, #1024	; 0x400
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 80125e2:	fb01 f602 	mul.w	r6, r1, r2
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 80125e6:	f640 2112 	movw	r1, #2578	; 0xa12
 80125ea:	fb01 fc02 	mul.w	ip, r1, r2
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 80125ee:	f641 4137 	movw	r1, #7223	; 0x1c37
    tmp10 = z1 + z2;
 80125f2:	19a7      	adds	r7, r4, r6
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 80125f4:	434a      	muls	r2, r1
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 80125f6:	4466      	add	r6, ip
    tmp11 = z1 + z3;
 80125f8:	eb04 050c 	add.w	r5, r4, ip
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 80125fc:	f242 3c62 	movw	ip, #9058	; 0x2362
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 8012600:	1ab6      	subs	r6, r6, r2
    tmp12 = z1 - z4;
 8012602:	1aa1      	subs	r1, r4, r2
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 8012604:	eba4 0246 	sub.w	r2, r4, r6, lsl #1
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8012608:	f9ba 4020 	ldrsh.w	r4, [sl, #32]
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801260c:	f9ba 6060 	ldrsh.w	r6, [sl, #96]	; 0x60
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 8012610:	920b      	str	r2, [sp, #44]	; 0x2c
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8012612:	9a01      	ldr	r2, [sp, #4]
 8012614:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8012616:	4362      	muls	r2, r4
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8012618:	f8d0 40c0 	ldr.w	r4, [r0, #192]	; 0xc0
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 801261c:	48d2      	ldr	r0, [pc, #840]	; (8012968 <jpeg_idct_14x14+0x3d8>)
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801261e:	4374      	muls	r4, r6
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 8012620:	1916      	adds	r6, r2, r4
 8012622:	fb0c f606 	mul.w	r6, ip, r6
    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
 8012626:	f640 0cbd 	movw	ip, #2237	; 0x8bd
 801262a:	fb0c 6c02 	mla	ip, ip, r2, r6
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 801262e:	fb00 6604 	mla	r6, r0, r4, r6
	    MULTIPLY(z2, FIX(1.378756276));      /* c2 */
 8012632:	f600 20e5 	addw	r0, r0, #2789	; 0xae5
 8012636:	4344      	muls	r4, r0
    tmp20 = tmp10 + tmp13;
 8012638:	eb07 000c 	add.w	r0, r7, ip
 801263c:	9002      	str	r0, [sp, #8]
    tmp26 = tmp10 - tmp13;
 801263e:	eba7 000c 	sub.w	r0, r7, ip
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 8012642:	fb0e 4202 	mla	r2, lr, r2, r4
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8012646:	f9ba 4010 	ldrsh.w	r4, [sl, #16]
    tmp26 = tmp10 - tmp13;
 801264a:	9003      	str	r0, [sp, #12]
    tmp21 = tmp11 + tmp14;
 801264c:	19a8      	adds	r0, r5, r6
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801264e:	f9ba 7030 	ldrsh.w	r7, [sl, #48]	; 0x30
    tmp21 = tmp11 + tmp14;
 8012652:	9004      	str	r0, [sp, #16]
    tmp25 = tmp11 - tmp14;
 8012654:	1ba8      	subs	r0, r5, r6
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8012656:	f9ba 6050 	ldrsh.w	r6, [sl, #80]	; 0x50
    tmp25 = tmp11 - tmp14;
 801265a:	9005      	str	r0, [sp, #20]
    tmp22 = tmp12 + tmp15;
 801265c:	1888      	adds	r0, r1, r2
    tmp24 = tmp12 - tmp15;
 801265e:	1a8a      	subs	r2, r1, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8012660:	f9ba 1070 	ldrsh.w	r1, [sl, #112]	; 0x70
    tmp22 = tmp12 + tmp15;
 8012664:	9006      	str	r0, [sp, #24]
    tmp24 = tmp12 - tmp15;
 8012666:	9207      	str	r2, [sp, #28]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8012668:	9a01      	ldr	r2, [sp, #4]
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
 801266a:	48c0      	ldr	r0, [pc, #768]	; (801296c <jpeg_idct_14x14+0x3dc>)
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801266c:	6a12      	ldr	r2, [r2, #32]
 801266e:	4354      	muls	r4, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8012670:	9a01      	ldr	r2, [sp, #4]
 8012672:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8012674:	4357      	muls	r7, r2
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8012676:	9a01      	ldr	r2, [sp, #4]
 8012678:	f8d2 20a0 	ldr.w	r2, [r2, #160]	; 0xa0
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 801267c:	eb04 0907 	add.w	r9, r4, r7
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8012680:	4356      	muls	r6, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8012682:	9a01      	ldr	r2, [sp, #4]
 8012684:	f8d2 20e0 	ldr.w	r2, [r2, #224]	; 0xe0
    tmp14 = z1 + z3;
 8012688:	eb04 0c06 	add.w	ip, r4, r6
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 801268c:	434a      	muls	r2, r1
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 801268e:	f642 21b7 	movw	r1, #10935	; 0x2ab7
 8012692:	fb01 f909 	mul.w	r9, r1, r9
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 8012696:	f242 6152 	movw	r1, #9810	; 0x2652
 801269a:	fb01 f50c 	mul.w	r5, r1, ip
    tmp10 = tmp11 + tmp12 + tmp13 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
 801269e:	49b4      	ldr	r1, [pc, #720]	; (8012970 <jpeg_idct_14x14+0x3e0>)
 80126a0:	eb09 0e05 	add.w	lr, r9, r5
 80126a4:	eb0e 3e42 	add.w	lr, lr, r2, lsl #13
 80126a8:	fb01 ee04 	mla	lr, r1, r4, lr
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 80126ac:	f641 0114 	movw	r1, #6164	; 0x1814
 80126b0:	fb01 f10c 	mul.w	r1, r1, ip
    tmp16 += tmp15;
    z1    += z4;
    z4    = MULTIPLY(z2 + z3, - FIX(0.158341681)) - tmp13; /* -c13 */
 80126b4:	f46f 6ca2 	mvn.w	ip, #1296	; 0x510
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 80126b8:	9108      	str	r1, [sp, #32]
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
 80126ba:	fb00 1104 	mla	r1, r0, r4, r1
    z1    -= z2;
 80126be:	1be4      	subs	r4, r4, r7
    tmp11 += z4 - MULTIPLY(z2, FIX(0.424103948));          /* c3-c9-c13 */
 80126c0:	48ac      	ldr	r0, [pc, #688]	; (8012974 <jpeg_idct_14x14+0x3e4>)
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - tmp13;        /* c11 */
 80126c2:	fb08 f804 	mul.w	r8, r8, r4
 80126c6:	eba8 3842 	sub.w	r8, r8, r2, lsl #13
    tmp16 += tmp15;
 80126ca:	4441      	add	r1, r8
 80126cc:	9109      	str	r1, [sp, #36]	; 0x24
    z4    = MULTIPLY(z2 + z3, - FIX(0.158341681)) - tmp13; /* -c13 */
 80126ce:	19b9      	adds	r1, r7, r6
 80126d0:	fb0c f101 	mul.w	r1, ip, r1
 80126d4:	eba1 3142 	sub.w	r1, r1, r2, lsl #13
    tmp11 += z4 - MULTIPLY(z2, FIX(0.424103948));          /* c3-c9-c13 */
 80126d8:	fb00 1c07 	mla	ip, r0, r7, r1
    tmp12 += z4 - MULTIPLY(z3, FIX(2.373959773));          /* c3+c5-c13 */
 80126dc:	48a6      	ldr	r0, [pc, #664]	; (8012978 <jpeg_idct_14x14+0x3e8>)
 80126de:	fb00 1106 	mla	r1, r0, r6, r1
    tmp11 += z4 - MULTIPLY(z2, FIX(0.424103948));          /* c3-c9-c13 */
 80126e2:	44e1      	add	r9, ip
    z4    = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 80126e4:	f642 4cf8 	movw	ip, #11512	; 0x2cf8
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 80126e8:	48a4      	ldr	r0, [pc, #656]	; (801297c <jpeg_idct_14x14+0x3ec>)
    tmp12 += z4 - MULTIPLY(z3, FIX(2.373959773));          /* c3+c5-c13 */
 80126ea:	4429      	add	r1, r5
    z4    = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 80126ec:	1bf5      	subs	r5, r6, r7
 80126ee:	fb0c f505 	mul.w	r5, ip, r5
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 80126f2:	eb05 3c42 	add.w	ip, r5, r2, lsl #13
    z1    += z4;
 80126f6:	4422      	add	r2, r4
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 80126f8:	fb00 cc06 	mla	ip, r0, r6, ip
    tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */

    tmp13 = (z1 - z3) << PASS1_BITS;
 80126fc:	1b96      	subs	r6, r2, r6

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 80126fe:	9a02      	ldr	r2, [sp, #8]
    tmp13 = (z1 - z3) << PASS1_BITS;
 8012700:	00b6      	lsls	r6, r6, #2
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8012702:	9808      	ldr	r0, [sp, #32]
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8012704:	4472      	add	r2, lr
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8012706:	4484      	add	ip, r0
    tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */
 8012708:	f241 5099 	movw	r0, #5529	; 0x1599
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 801270c:	12d2      	asrs	r2, r2, #11
    tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */
 801270e:	fb00 5507 	mla	r5, r0, r7, r5
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8012712:	f843 2c04 	str.w	r2, [r3, #-4]
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8012716:	9a02      	ldr	r2, [sp, #8]
    tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */
 8012718:	4445      	add	r5, r8
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 801271a:	eba2 0e0e 	sub.w	lr, r2, lr
 801271e:	ea4f 22ee 	mov.w	r2, lr, asr #11
 8012722:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8012726:	9a04      	ldr	r2, [sp, #16]
 8012728:	444a      	add	r2, r9
 801272a:	12d2      	asrs	r2, r2, #11
 801272c:	61da      	str	r2, [r3, #28]
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 801272e:	9a04      	ldr	r2, [sp, #16]
 8012730:	eba2 0909 	sub.w	r9, r2, r9
 8012734:	ea4f 22e9 	mov.w	r2, r9, asr #11
 8012738:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 801273c:	9a06      	ldr	r2, [sp, #24]
 801273e:	440a      	add	r2, r1
 8012740:	12d2      	asrs	r2, r2, #11
 8012742:	63da      	str	r2, [r3, #60]	; 0x3c
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8012744:	9a06      	ldr	r2, [sp, #24]
 8012746:	1a51      	subs	r1, r2, r1
    wsptr[8*3]  = (int) (tmp23 + tmp13);
 8012748:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801274a:	eb06 22e2 	add.w	r2, r6, r2, asr #11
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 801274e:	12c9      	asrs	r1, r1, #11
    wsptr[8*3]  = (int) (tmp23 + tmp13);
 8012750:	65da      	str	r2, [r3, #92]	; 0x5c
    wsptr[8*10] = (int) (tmp23 - tmp13);
 8012752:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8012754:	f8c3 115c 	str.w	r1, [r3, #348]	; 0x15c
    wsptr[8*10] = (int) (tmp23 - tmp13);
 8012758:	ebc6 26e2 	rsb	r6, r6, r2, asr #11
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 801275c:	9a07      	ldr	r2, [sp, #28]
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 801275e:	9909      	ldr	r1, [sp, #36]	; 0x24
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8012760:	4462      	add	r2, ip
    wsptr[8*10] = (int) (tmp23 - tmp13);
 8012762:	f8c3 613c 	str.w	r6, [r3, #316]	; 0x13c
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8012766:	12d2      	asrs	r2, r2, #11
 8012768:	67da      	str	r2, [r3, #124]	; 0x7c
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 801276a:	9a07      	ldr	r2, [sp, #28]
 801276c:	eba2 0c0c 	sub.w	ip, r2, ip
 8012770:	ea4f 22ec 	mov.w	r2, ip, asr #11
 8012774:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8012778:	9a05      	ldr	r2, [sp, #20]
 801277a:	442a      	add	r2, r5
 801277c:	12d2      	asrs	r2, r2, #11
 801277e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8012782:	9a05      	ldr	r2, [sp, #20]
 8012784:	1b55      	subs	r5, r2, r5
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 8012786:	9a03      	ldr	r2, [sp, #12]
 8012788:	440a      	add	r2, r1
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 801278a:	12ed      	asrs	r5, r5, #11
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 801278c:	12d2      	asrs	r2, r2, #11
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 801278e:	f8c3 50fc 	str.w	r5, [r3, #252]	; 0xfc
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 8012792:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp26 - tmp16, CONST_BITS-PASS1_BITS);
 8012796:	9a03      	ldr	r2, [sp, #12]
 8012798:	1a52      	subs	r2, r2, r1
 801279a:	12d2      	asrs	r2, r2, #11
 801279c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80127a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80127a2:	4552      	cmp	r2, sl
 80127a4:	f47f af05 	bne.w	80125b2 <jpeg_idct_14x14+0x22>
 80127a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80127aa:	3b04      	subs	r3, #4
 80127ac:	9302      	str	r3, [sp, #8]
 80127ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80127b0:	3334      	adds	r3, #52	; 0x34
 80127b2:	930d      	str	r3, [sp, #52]	; 0x34
  }

  /* Pass 2: process 14 rows from work array, store into output array. */

  wsptr = workspace;
 80127b4:	ab0e      	add	r3, sp, #56	; 0x38
 80127b6:	9301      	str	r3, [sp, #4]
  for (ctr = 0; ctr < 14; ctr++) {
    outptr = output_buf[ctr] + output_col;
 80127b8:	9b02      	ldr	r3, [sp, #8]
    /* Add fudge factor here for final descale. */
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    z1 <<= CONST_BITS;
    z4 = (INT32) wsptr[4];
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 80127ba:	f640 2012 	movw	r0, #2578	; 0xa12
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 80127be:	f641 4437 	movw	r4, #7223	; 0x1c37

    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */

    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 80127c2:	f241 3ea3 	movw	lr, #5027	; 0x13a3
    outptr = output_buf[ctr] + output_col;
 80127c6:	f853 2f04 	ldr.w	r2, [r3, #4]!
 80127ca:	920c      	str	r2, [sp, #48]	; 0x30
 80127cc:	9302      	str	r3, [sp, #8]
 80127ce:	4613      	mov	r3, r2
 80127d0:	9a88      	ldr	r2, [sp, #544]	; 0x220
 80127d2:	189a      	adds	r2, r3, r2
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80127d4:	9b01      	ldr	r3, [sp, #4]
    z4 = (INT32) wsptr[4];
 80127d6:	691e      	ldr	r6, [r3, #16]
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80127d8:	6819      	ldr	r1, [r3, #0]
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 80127da:	f642 03c6 	movw	r3, #10438	; 0x28c6
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 80127de:	fb00 f706 	mul.w	r7, r0, r6
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 80127e2:	4861      	ldr	r0, [pc, #388]	; (8012968 <jpeg_idct_14x14+0x3d8>)
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80127e4:	3110      	adds	r1, #16
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 80127e6:	4373      	muls	r3, r6
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 80127e8:	4366      	muls	r6, r4
    tmp10 = z1 + z2;
 80127ea:	eb03 3c41 	add.w	ip, r3, r1, lsl #13
    tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */
 80127ee:	443b      	add	r3, r7
    tmp12 = z1 - z4;
 80127f0:	ebc6 3441 	rsb	r4, r6, r1, lsl #13
    tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */
 80127f4:	1b9b      	subs	r3, r3, r6
    tmp11 = z1 + z3;
 80127f6:	eb07 3541 	add.w	r5, r7, r1, lsl #13
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 80127fa:	f242 3762 	movw	r7, #9058	; 0x2362
    tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */
 80127fe:	005b      	lsls	r3, r3, #1
 8012800:	ebc3 3341 	rsb	r3, r3, r1, lsl #13
 8012804:	9303      	str	r3, [sp, #12]
    z1 = (INT32) wsptr[2];
 8012806:	9b01      	ldr	r3, [sp, #4]
 8012808:	689e      	ldr	r6, [r3, #8]
    z2 = (INT32) wsptr[6];
 801280a:	699b      	ldr	r3, [r3, #24]
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 801280c:	18f1      	adds	r1, r6, r3
 801280e:	4379      	muls	r1, r7
    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
 8012810:	f640 07bd 	movw	r7, #2237	; 0x8bd
 8012814:	fb07 1706 	mla	r7, r7, r6, r1
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 8012818:	fb00 1103 	mla	r1, r0, r3, r1
	    MULTIPLY(z2, FIX(1.378756276));      /* c2 */
 801281c:	f600 20e5 	addw	r0, r0, #2789	; 0xae5
 8012820:	4343      	muls	r3, r0

    tmp20 = tmp10 + tmp13;
    tmp26 = tmp10 - tmp13;
 8012822:	ebac 0007 	sub.w	r0, ip, r7
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 8012826:	fb0e 3306 	mla	r3, lr, r6, r3
    tmp20 = tmp10 + tmp13;
 801282a:	eb0c 0607 	add.w	r6, ip, r7
    tmp26 = tmp10 - tmp13;
 801282e:	9004      	str	r0, [sp, #16]
    tmp21 = tmp11 + tmp14;
 8012830:	1868      	adds	r0, r5, r1
    tmp25 = tmp11 - tmp14;
 8012832:	1a69      	subs	r1, r5, r1
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
    tmp10 = tmp11 + tmp12 + z4 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
    z1    -= z2;
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
 8012834:	f640 6ef2 	movw	lr, #3826	; 0xef2
    tmp21 = tmp11 + tmp14;
 8012838:	9005      	str	r0, [sp, #20]
    tmp25 = tmp11 - tmp14;
 801283a:	9106      	str	r1, [sp, #24]
    tmp22 = tmp12 + tmp15;
 801283c:	18e1      	adds	r1, r4, r3
    tmp24 = tmp12 - tmp15;
 801283e:	1ae3      	subs	r3, r4, r3
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
 8012840:	484a      	ldr	r0, [pc, #296]	; (801296c <jpeg_idct_14x14+0x3dc>)
    tmp22 = tmp12 + tmp15;
 8012842:	9107      	str	r1, [sp, #28]
    tmp24 = tmp12 - tmp15;
 8012844:	9308      	str	r3, [sp, #32]
    z2 = (INT32) wsptr[3];
 8012846:	9901      	ldr	r1, [sp, #4]
    z1 = (INT32) wsptr[1];
 8012848:	9b01      	ldr	r3, [sp, #4]
    z2 = (INT32) wsptr[3];
 801284a:	f8d1 800c 	ldr.w	r8, [r1, #12]
    z1 = (INT32) wsptr[1];
 801284e:	685b      	ldr	r3, [r3, #4]
    z3 = (INT32) wsptr[5];
 8012850:	f8d1 c014 	ldr.w	ip, [r1, #20]
    z4 = (INT32) wsptr[7];
 8012854:	f8d1 901c 	ldr.w	r9, [r1, #28]
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 8012858:	eb03 0a08 	add.w	sl, r3, r8
 801285c:	f642 21b7 	movw	r1, #10935	; 0x2ab7
    tmp14 = z1 + z3;
 8012860:	eb03 050c 	add.w	r5, r3, ip
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 8012864:	fb01 fa0a 	mul.w	sl, r1, sl
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 8012868:	f242 6152 	movw	r1, #9810	; 0x2652
 801286c:	fb01 f405 	mul.w	r4, r1, r5
    tmp10 = tmp11 + tmp12 + z4 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
 8012870:	493f      	ldr	r1, [pc, #252]	; (8012970 <jpeg_idct_14x14+0x3e0>)
 8012872:	eb0a 0704 	add.w	r7, sl, r4
 8012876:	eb07 3749 	add.w	r7, r7, r9, lsl #13
 801287a:	fb01 7703 	mla	r7, r1, r3, r7
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 801287e:	f641 0114 	movw	r1, #6164	; 0x1814
 8012882:	4369      	muls	r1, r5
    tmp16 += tmp15;
    tmp13 = MULTIPLY(z2 + z3, - FIX(0.158341681)) - z4;    /* -c13 */
 8012884:	f46f 65a2 	mvn.w	r5, #1296	; 0x510
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 8012888:	9109      	str	r1, [sp, #36]	; 0x24
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
 801288a:	fb00 1103 	mla	r1, r0, r3, r1
    z1    -= z2;
 801288e:	eba3 0308 	sub.w	r3, r3, r8
    tmp11 += tmp13 - MULTIPLY(z2, FIX(0.424103948));       /* c3-c9-c13 */
 8012892:	4838      	ldr	r0, [pc, #224]	; (8012974 <jpeg_idct_14x14+0x3e4>)
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
 8012894:	fb0e fe03 	mul.w	lr, lr, r3
    tmp12 += tmp13 - MULTIPLY(z3, FIX(2.373959773));       /* c3+c5-c13 */
    tmp13 = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
    tmp15 += tmp13 + MULTIPLY(z2, FIX(0.674957567));       /* c1+c11-c5 */

    tmp13 = ((z1 - z3) << CONST_BITS) + z4;
 8012898:	eba3 030c 	sub.w	r3, r3, ip
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
 801289c:	ebae 3e49 	sub.w	lr, lr, r9, lsl #13
    tmp13 = ((z1 - z3) << CONST_BITS) + z4;
 80128a0:	035b      	lsls	r3, r3, #13
    tmp16 += tmp15;
 80128a2:	4471      	add	r1, lr
 80128a4:	910a      	str	r1, [sp, #40]	; 0x28
    tmp13 = MULTIPLY(z2 + z3, - FIX(0.158341681)) - z4;    /* -c13 */
 80128a6:	eb08 010c 	add.w	r1, r8, ip
 80128aa:	4369      	muls	r1, r5
 80128ac:	eba1 3149 	sub.w	r1, r1, r9, lsl #13
    tmp11 += tmp13 - MULTIPLY(z2, FIX(0.424103948));       /* c3-c9-c13 */
 80128b0:	fb00 1508 	mla	r5, r0, r8, r1
    tmp12 += tmp13 - MULTIPLY(z3, FIX(2.373959773));       /* c3+c5-c13 */
 80128b4:	4830      	ldr	r0, [pc, #192]	; (8012978 <jpeg_idct_14x14+0x3e8>)
 80128b6:	fb00 110c 	mla	r1, r0, ip, r1
    tmp11 += tmp13 - MULTIPLY(z2, FIX(0.424103948));       /* c3-c9-c13 */
 80128ba:	44aa      	add	sl, r5
    tmp13 = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 80128bc:	f642 45f8 	movw	r5, #11512	; 0x2cf8
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 80128c0:	482e      	ldr	r0, [pc, #184]	; (801297c <jpeg_idct_14x14+0x3ec>)
    tmp12 += tmp13 - MULTIPLY(z3, FIX(2.373959773));       /* c3+c5-c13 */
 80128c2:	4421      	add	r1, r4
    tmp13 = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 80128c4:	ebac 0408 	sub.w	r4, ip, r8
 80128c8:	436c      	muls	r4, r5
    tmp12 += tmp13 - MULTIPLY(z3, FIX(2.373959773));       /* c3+c5-c13 */
 80128ca:	910b      	str	r1, [sp, #44]	; 0x2c
    tmp15 += tmp13 + MULTIPLY(z2, FIX(0.674957567));       /* c1+c11-c5 */
 80128cc:	f241 5199 	movw	r1, #5529	; 0x1599
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 80128d0:	eb04 3549 	add.w	r5, r4, r9, lsl #13
    tmp13 = ((z1 - z3) << CONST_BITS) + z4;
 80128d4:	eb03 3949 	add.w	r9, r3, r9, lsl #13

    /* Final output stage */

    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80128d8:	19f3      	adds	r3, r6, r7
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 80128da:	fb00 550c 	mla	r5, r0, ip, r5
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80128de:	1bf6      	subs	r6, r6, r7
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 80128e0:	9809      	ldr	r0, [sp, #36]	; 0x24
			     & RANGE_MASK];
 80128e2:	f3c3 4389 	ubfx	r3, r3, #18, #10
    tmp15 += tmp13 + MULTIPLY(z2, FIX(0.674957567));       /* c1+c11-c5 */
 80128e6:	fb01 4408 	mla	r4, r1, r8, r4
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80128ea:	f3c6 4689 	ubfx	r6, r6, #18, #10
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 80128ee:	4405      	add	r5, r0
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80128f0:	f81b 3003 	ldrb.w	r3, [fp, r3]
 80128f4:	9988      	ldr	r1, [sp, #544]	; 0x220
    tmp15 += tmp13 + MULTIPLY(z2, FIX(0.674957567));       /* c1+c11-c5 */
 80128f6:	4474      	add	r4, lr
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80128f8:	980c      	ldr	r0, [sp, #48]	; 0x30
 80128fa:	5443      	strb	r3, [r0, r1]
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80128fc:	f81b 3006 	ldrb.w	r3, [fp, r6]
 8012900:	7353      	strb	r3, [r2, #13]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8012902:	9b05      	ldr	r3, [sp, #20]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8012904:	990b      	ldr	r1, [sp, #44]	; 0x2c
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8012906:	4453      	add	r3, sl
			     & RANGE_MASK];
 8012908:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801290c:	f81b 3003 	ldrb.w	r3, [fp, r3]
 8012910:	7053      	strb	r3, [r2, #1]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8012912:	9b05      	ldr	r3, [sp, #20]
 8012914:	eba3 0a0a 	sub.w	sl, r3, sl
			     & RANGE_MASK];
 8012918:	f3ca 4a89 	ubfx	sl, sl, #18, #10
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 801291c:	f81b 300a 	ldrb.w	r3, [fp, sl]
 8012920:	7313      	strb	r3, [r2, #12]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8012922:	9b07      	ldr	r3, [sp, #28]
 8012924:	440b      	add	r3, r1
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8012926:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801292a:	f81b 3003 	ldrb.w	r3, [fp, r3]
 801292e:	7093      	strb	r3, [r2, #2]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8012930:	9b07      	ldr	r3, [sp, #28]
 8012932:	1a59      	subs	r1, r3, r1
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8012934:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8012938:	f81b 3001 	ldrb.w	r3, [fp, r1]
 801293c:	72d3      	strb	r3, [r2, #11]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 801293e:	9b03      	ldr	r3, [sp, #12]
 8012940:	444b      	add	r3, r9
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8012942:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8012946:	f81b 3003 	ldrb.w	r3, [fp, r3]
 801294a:	70d3      	strb	r3, [r2, #3]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 801294c:	9b03      	ldr	r3, [sp, #12]
 801294e:	eba3 0909 	sub.w	r9, r3, r9
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8012952:	f3c9 4989 	ubfx	r9, r9, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8012956:	f81b 3009 	ldrb.w	r3, [fp, r9]
 801295a:	7293      	strb	r3, [r2, #10]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 801295c:	9b08      	ldr	r3, [sp, #32]
 801295e:	442b      	add	r3, r5
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8012960:	f3c3 4389 	ubfx	r3, r3, #18, #10
 8012964:	e00c      	b.n	8012980 <jpeg_idct_14x14+0x3f0>
 8012966:	bf00      	nop
 8012968:	ffffc8fc 	.word	0xffffc8fc
 801296c:	ffffde0b 	.word	0xffffde0b
 8012970:	ffffdbf0 	.word	0xffffdbf0
 8012974:	fffff26e 	.word	0xfffff26e
 8012978:	ffffb409 	.word	0xffffb409
 801297c:	ffffc9e6 	.word	0xffffc9e6
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8012980:	f81b 3003 	ldrb.w	r3, [fp, r3]
 8012984:	7113      	strb	r3, [r2, #4]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8012986:	9b08      	ldr	r3, [sp, #32]
 8012988:	1b5d      	subs	r5, r3, r5
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801298a:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 801298e:	f81b 3005 	ldrb.w	r3, [fp, r5]
 8012992:	7253      	strb	r3, [r2, #9]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8012994:	9b06      	ldr	r3, [sp, #24]
 8012996:	4423      	add	r3, r4
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8012998:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 801299c:	f81b 3003 	ldrb.w	r3, [fp, r3]
 80129a0:	7153      	strb	r3, [r2, #5]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 80129a2:	9b06      	ldr	r3, [sp, #24]
 80129a4:	1b1c      	subs	r4, r3, r4
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80129a6:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 80129aa:	f81b 3004 	ldrb.w	r3, [fp, r4]
 80129ae:	7213      	strb	r3, [r2, #8]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 80129b0:	9b04      	ldr	r3, [sp, #16]
 80129b2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80129b4:	440b      	add	r3, r1
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80129b6:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 80129ba:	f81b 3003 	ldrb.w	r3, [fp, r3]
 80129be:	7193      	strb	r3, [r2, #6]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 80129c0:	9b04      	ldr	r3, [sp, #16]
 80129c2:	1a59      	subs	r1, r3, r1
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80129c4:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 80129c8:	f81b 3001 	ldrb.w	r3, [fp, r1]
 80129cc:	71d3      	strb	r3, [r2, #7]

    wsptr += 8;		/* advance pointer to next row */
 80129ce:	9b01      	ldr	r3, [sp, #4]
  for (ctr = 0; ctr < 14; ctr++) {
 80129d0:	9a02      	ldr	r2, [sp, #8]
    wsptr += 8;		/* advance pointer to next row */
 80129d2:	3320      	adds	r3, #32
 80129d4:	9301      	str	r3, [sp, #4]
  for (ctr = 0; ctr < 14; ctr++) {
 80129d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80129d8:	4293      	cmp	r3, r2
 80129da:	f47f aeed 	bne.w	80127b8 <jpeg_idct_14x14+0x228>
  }
}
 80129de:	b07f      	add	sp, #508	; 0x1fc
 80129e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080129e4 <jpeg_idct_15x15>:

GLOBAL(void)
jpeg_idct_15x15 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80129e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129e8:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
 80129ec:	f1a2 0b02 	sub.w	fp, r2, #2
 80129f0:	930b      	str	r3, [sp, #44]	; 0x2c
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80129f2:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 80129f6:	6d48      	ldr	r0, [r1, #84]	; 0x54
 80129f8:	f103 0a80 	add.w	sl, r3, #128	; 0x80
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80129fc:	1f03      	subs	r3, r0, #4
 80129fe:	9300      	str	r3, [sp, #0]
 8012a00:	f102 030e 	add.w	r3, r2, #14
 8012a04:	930c      	str	r3, [sp, #48]	; 0x30
  wsptr = workspace;
 8012a06:	ab0e      	add	r3, sp, #56	; 0x38
    /* Even part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012a08:	9900      	ldr	r1, [sp, #0]

    z4 = z2 - z3;
    z3 += z2;
    tmp10 = MULTIPLY(z3, FIX(1.337628990)); /* (c2+c4)/2 */
    tmp11 = MULTIPLY(z4, FIX(0.045680613)); /* (c2-c4)/2 */
    z2 = MULTIPLY(z2, FIX(1.439773946));    /* c4+c14 */
 8012a0a:	f642 6e13 	movw	lr, #11795	; 0x2e13
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012a0e:	f93b 5f02 	ldrsh.w	r5, [fp, #2]!
    z3 = MULTIPLY(z4, FIX(1.224744871));                    /* c5 */
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);

    tmp13 = z2 - z4;
    tmp15 = MULTIPLY(z1 + tmp13, FIX(0.831253876));         /* c9 */
    tmp11 = tmp15 + MULTIPLY(z1, FIX(0.513743148));         /* c3-c9 */
 8012a12:	f241 0971 	movw	r9, #4209	; 0x1071
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012a16:	f851 2f04 	ldr.w	r2, [r1, #4]!
    tmp13 = MULTIPLY(z2, - FIX(0.831253876));               /* -c9 */
    tmp15 = MULTIPLY(z2, - FIX(1.344997024));               /* -c3 */
    z2 = z1 - z4;
    tmp12 = z3 + MULTIPLY(z2, FIX(1.406466353));            /* c1 */

    tmp10 = tmp12 + MULTIPLY(z4, FIX(2.457431844)) - tmp15; /* c1+c7 */
 8012a1a:	f644 68a3 	movw	r8, #20131	; 0x4ea3
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8012a1e:	f9bb 4040 	ldrsh.w	r4, [fp, #64]	; 0x40
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8012a22:	3304      	adds	r3, #4
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012a24:	9100      	str	r1, [sp, #0]
 8012a26:	4355      	muls	r5, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8012a28:	9a00      	ldr	r2, [sp, #0]
 8012a2a:	f9bb 1020 	ldrsh.w	r1, [fp, #32]
 8012a2e:	6c12      	ldr	r2, [r2, #64]	; 0x40
    z1 <<= CONST_BITS;
 8012a30:	036d      	lsls	r5, r5, #13
    z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8012a32:	9800      	ldr	r0, [sp, #0]
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8012a34:	4351      	muls	r1, r2
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8012a36:	9a00      	ldr	r2, [sp, #0]
    z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8012a38:	f9bb 6060 	ldrsh.w	r6, [fp, #96]	; 0x60
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 8012a3c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8012a40:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8012a44:	4362      	muls	r2, r4
    z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8012a46:	f8d0 40c0 	ldr.w	r4, [r0, #192]	; 0xc0
    tmp10 = MULTIPLY(z4, FIX(0.437016024)); /* c12 */
 8012a4a:	f640 50fc 	movw	r0, #3580	; 0xdfc
    z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8012a4e:	4374      	muls	r4, r6
    tmp11 = MULTIPLY(z4, FIX(1.144122806)); /* c6 */
 8012a50:	f242 469d 	movw	r6, #9373	; 0x249d
    tmp10 = MULTIPLY(z4, FIX(0.437016024)); /* c12 */
 8012a54:	fb00 fc04 	mul.w	ip, r0, r4
    tmp10 = MULTIPLY(z3, FIX(1.337628990)); /* (c2+c4)/2 */
 8012a58:	f642 20ce 	movw	r0, #10958	; 0x2ace
    tmp11 = MULTIPLY(z4, FIX(1.144122806)); /* c6 */
 8012a5c:	4374      	muls	r4, r6
    tmp12 = z1 - tmp10;
 8012a5e:	eba5 070c 	sub.w	r7, r5, ip
    tmp13 = z1 + tmp11;
 8012a62:	192e      	adds	r6, r5, r4
    z1 -= (tmp11 - tmp10) << 1;             /* c0 = (c6-c12)*2 */
 8012a64:	eba4 040c 	sub.w	r4, r4, ip
 8012a68:	eba5 0444 	sub.w	r4, r5, r4, lsl #1
    z4 = z2 - z3;
 8012a6c:	1a8d      	subs	r5, r1, r2
    z3 += z2;
 8012a6e:	440a      	add	r2, r1
    z2 = MULTIPLY(z2, FIX(1.439773946));    /* c4+c14 */
 8012a70:	fb0e f101 	mul.w	r1, lr, r1
    z1 -= (tmp11 - tmp10) << 1;             /* c0 = (c6-c12)*2 */
 8012a74:	9401      	str	r4, [sp, #4]
    tmp10 = MULTIPLY(z3, FIX(1.337628990)); /* (c2+c4)/2 */
 8012a76:	fb00 f402 	mul.w	r4, r0, r2
    tmp11 = MULTIPLY(z4, FIX(0.045680613)); /* (c2-c4)/2 */
 8012a7a:	f44f 70bb 	mov.w	r0, #374	; 0x176
    tmp20 = tmp13 + tmp10 + tmp11;
 8012a7e:	eb06 0e04 	add.w	lr, r6, r4
    tmp11 = MULTIPLY(z4, FIX(0.045680613)); /* (c2-c4)/2 */
 8012a82:	fb00 fc05 	mul.w	ip, r0, r5
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 8012a86:	1b3c      	subs	r4, r7, r4
    tmp20 = tmp13 + tmp10 + tmp11;
 8012a88:	eb0e 000c 	add.w	r0, lr, ip
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 8012a8c:	4464      	add	r4, ip
    tmp11 = MULTIPLY(z4, FIX(0.399234004)); /* (c8-c14)/2 */
 8012a8e:	f640 4cc7 	movw	ip, #3271	; 0xcc7
    tmp20 = tmp13 + tmp10 + tmp11;
 8012a92:	9002      	str	r0, [sp, #8]
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 8012a94:	1860      	adds	r0, r4, r1
    tmp10 = MULTIPLY(z3, FIX(0.547059574)); /* (c8+c14)/2 */
 8012a96:	f241 1482 	movw	r4, #4482	; 0x1182
    tmp11 = MULTIPLY(z4, FIX(0.399234004)); /* (c8-c14)/2 */
 8012a9a:	fb0c fc05 	mul.w	ip, ip, r5
    tmp10 = MULTIPLY(z3, FIX(0.547059574)); /* (c8+c14)/2 */
 8012a9e:	4354      	muls	r4, r2
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 8012aa0:	9003      	str	r0, [sp, #12]
    tmp25 = tmp13 - tmp10 - tmp11;
 8012aa2:	eba6 0e04 	sub.w	lr, r6, r4
    tmp26 = tmp12 + tmp10 - tmp11 - z2;
 8012aa6:	443c      	add	r4, r7
 8012aa8:	eba4 040c 	sub.w	r4, r4, ip
    tmp25 = tmp13 - tmp10 - tmp11;
 8012aac:	ebae 000c 	sub.w	r0, lr, ip
    tmp15 = MULTIPLY(z1 + tmp13, FIX(0.831253876));         /* c9 */
 8012ab0:	f641 2c9a 	movw	ip, #6810	; 0x1a9a
    tmp26 = tmp12 + tmp10 - tmp11 - z2;
 8012ab4:	1a61      	subs	r1, r4, r1
    tmp25 = tmp13 - tmp10 - tmp11;
 8012ab6:	9004      	str	r0, [sp, #16]
    tmp26 = tmp12 + tmp10 - tmp11 - z2;
 8012ab8:	9105      	str	r1, [sp, #20]
    tmp10 = MULTIPLY(z3, FIX(0.790569415)); /* (c6+c12)/2 */
 8012aba:	f641 114c 	movw	r1, #6476	; 0x194c
 8012abe:	434a      	muls	r2, r1
    tmp11 = MULTIPLY(z4, FIX(0.353553391)); /* (c6-c12)/2 */
 8012ac0:	f44f 6135 	mov.w	r1, #2896	; 0xb50
    tmp21 = tmp12 + tmp10 + tmp11;
 8012ac4:	4417      	add	r7, r2
    tmp11 = MULTIPLY(z4, FIX(0.353553391)); /* (c6-c12)/2 */
 8012ac6:	4369      	muls	r1, r5
    tmp24 = tmp13 - tmp10 + tmp11;
 8012ac8:	1ab2      	subs	r2, r6, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8012aca:	f9bb 6050 	ldrsh.w	r6, [fp, #80]	; 0x50
    tmp21 = tmp12 + tmp10 + tmp11;
 8012ace:	1878      	adds	r0, r7, r1
    tmp24 = tmp13 - tmp10 + tmp11;
 8012ad0:	440a      	add	r2, r1
    tmp21 = tmp12 + tmp10 + tmp11;
 8012ad2:	9006      	str	r0, [sp, #24]
    tmp24 = tmp13 - tmp10 + tmp11;
 8012ad4:	9207      	str	r2, [sp, #28]
    tmp11 += tmp11;
 8012ad6:	f44f 52b5 	mov.w	r2, #5792	; 0x16a0
 8012ada:	436a      	muls	r2, r5
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8012adc:	f9bb 5030 	ldrsh.w	r5, [fp, #48]	; 0x30
    tmp11 += tmp11;
 8012ae0:	9208      	str	r2, [sp, #32]
    tmp22 = z1 + tmp11;                     /* c10 = c6-c12 */
 8012ae2:	9908      	ldr	r1, [sp, #32]
 8012ae4:	9a01      	ldr	r2, [sp, #4]
 8012ae6:	440a      	add	r2, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8012ae8:	f9bb 1010 	ldrsh.w	r1, [fp, #16]
    tmp22 = z1 + tmp11;                     /* c10 = c6-c12 */
 8012aec:	9209      	str	r2, [sp, #36]	; 0x24
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8012aee:	9a00      	ldr	r2, [sp, #0]
 8012af0:	6a12      	ldr	r2, [r2, #32]
 8012af2:	434a      	muls	r2, r1
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8012af4:	9900      	ldr	r1, [sp, #0]
 8012af6:	6e09      	ldr	r1, [r1, #96]	; 0x60
 8012af8:	434d      	muls	r5, r1
    z4 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8012afa:	9900      	ldr	r1, [sp, #0]
 8012afc:	f8d1 10a0 	ldr.w	r1, [r1, #160]	; 0xa0
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8012b00:	9800      	ldr	r0, [sp, #0]
 8012b02:	f9bb e070 	ldrsh.w	lr, [fp, #112]	; 0x70
    z4 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8012b06:	434e      	muls	r6, r1
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8012b08:	f8d0 40e0 	ldr.w	r4, [r0, #224]	; 0xe0
    z3 = MULTIPLY(z4, FIX(1.224744871));                    /* c5 */
 8012b0c:	f242 7131 	movw	r1, #10033	; 0x2731
    tmp14 = tmp15 - MULTIPLY(tmp13, FIX(2.176250899));      /* c3+c9 */
 8012b10:	48d2      	ldr	r0, [pc, #840]	; (8012e5c <jpeg_idct_15x15+0x478>)
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8012b12:	fb04 fe0e 	mul.w	lr, r4, lr
    z3 = MULTIPLY(z4, FIX(1.224744871));                    /* c5 */
 8012b16:	434e      	muls	r6, r1
    tmp13 = z2 - z4;
 8012b18:	eba5 040e 	sub.w	r4, r5, lr
    tmp15 = MULTIPLY(z1 + tmp13, FIX(0.831253876));         /* c9 */
 8012b1c:	1917      	adds	r7, r2, r4
 8012b1e:	fb0c f707 	mul.w	r7, ip, r7
    z2 = z1 - z4;
 8012b22:	eba2 0c0e 	sub.w	ip, r2, lr
    tmp11 = tmp15 + MULTIPLY(z1, FIX(0.513743148));         /* c3-c9 */
 8012b26:	fb09 7902 	mla	r9, r9, r2, r7
    tmp14 = tmp15 - MULTIPLY(tmp13, FIX(2.176250899));      /* c3+c9 */
 8012b2a:	fb00 7704 	mla	r7, r0, r4, r7
    tmp13 = MULTIPLY(z2, - FIX(0.831253876));               /* -c9 */
 8012b2e:	48cc      	ldr	r0, [pc, #816]	; (8012e60 <jpeg_idct_15x15+0x47c>)
    tmp12 = z3 + MULTIPLY(z2, FIX(1.406466353));            /* c1 */
 8012b30:	f642 5402 	movw	r4, #11522	; 0x2d02
    tmp13 = MULTIPLY(z2, - FIX(0.831253876));               /* -c9 */
 8012b34:	4368      	muls	r0, r5
    tmp12 = z3 + MULTIPLY(z2, FIX(1.406466353));            /* c1 */
 8012b36:	fb04 640c 	mla	r4, r4, ip, r6
    tmp13 = MULTIPLY(z2, - FIX(0.831253876));               /* -c9 */
 8012b3a:	900a      	str	r0, [sp, #40]	; 0x28
    tmp15 = MULTIPLY(z2, - FIX(1.344997024));               /* -c3 */
 8012b3c:	48c9      	ldr	r0, [pc, #804]	; (8012e64 <jpeg_idct_15x15+0x480>)
    tmp10 = tmp12 + MULTIPLY(z4, FIX(2.457431844)) - tmp15; /* c1+c7 */
 8012b3e:	fb08 480e 	mla	r8, r8, lr, r4
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
    tmp12 = MULTIPLY(z2, FIX(1.224744871)) - z3;            /* c5 */
 8012b42:	fb01 fc0c 	mul.w	ip, r1, ip
    z2 = MULTIPLY(z1 + z4, FIX(0.575212477));               /* c11 */
 8012b46:	eb02 010e 	add.w	r1, r2, lr
    tmp15 = MULTIPLY(z2, - FIX(1.344997024));               /* -c3 */
 8012b4a:	4345      	muls	r5, r0
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
 8012b4c:	f200 7071 	addw	r0, r0, #1905	; 0x771
    tmp12 = MULTIPLY(z2, FIX(1.224744871)) - z3;            /* c5 */
 8012b50:	ebac 0c06 	sub.w	ip, ip, r6
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
 8012b54:	fb00 4402 	mla	r4, r0, r2, r4
 8012b58:	980a      	ldr	r0, [sp, #40]	; 0x28
    tmp10 = tmp12 + MULTIPLY(z4, FIX(2.457431844)) - tmp15; /* c1+c7 */
 8012b5a:	eba8 0805 	sub.w	r8, r8, r5
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
 8012b5e:	4404      	add	r4, r0
    z2 = MULTIPLY(z1 + z4, FIX(0.575212477));               /* c11 */
 8012b60:	f241 2068 	movw	r0, #4712	; 0x1268
 8012b64:	4341      	muls	r1, r0
    tmp13 += z2 + MULTIPLY(z1, FIX(0.475753014)) - z3;      /* c7-c11 */
 8012b66:	f640 7039 	movw	r0, #3897	; 0xf39
 8012b6a:	fb00 1202 	mla	r2, r0, r2, r1
 8012b6e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8012b70:	1b92      	subs	r2, r2, r6
 8012b72:	4402      	add	r2, r0
    tmp15 += z2 - MULTIPLY(z4, FIX(0.869244010)) + z3;      /* c11+c13 */
 8012b74:	48bc      	ldr	r0, [pc, #752]	; (8012e68 <jpeg_idct_15x15+0x484>)
 8012b76:	fb00 110e 	mla	r1, r0, lr, r1
 8012b7a:	4431      	add	r1, r6
 8012b7c:	440d      	add	r5, r1

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8012b7e:	9902      	ldr	r1, [sp, #8]
 8012b80:	4441      	add	r1, r8
 8012b82:	12c9      	asrs	r1, r1, #11
 8012b84:	f843 1c04 	str.w	r1, [r3, #-4]
    wsptr[8*14] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8012b88:	9902      	ldr	r1, [sp, #8]
 8012b8a:	eba1 0808 	sub.w	r8, r1, r8
 8012b8e:	ea4f 21e8 	mov.w	r1, r8, asr #11
 8012b92:	f8c3 11bc 	str.w	r1, [r3, #444]	; 0x1bc
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8012b96:	9906      	ldr	r1, [sp, #24]
 8012b98:	4449      	add	r1, r9
 8012b9a:	12c9      	asrs	r1, r1, #11
 8012b9c:	61d9      	str	r1, [r3, #28]
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8012b9e:	9906      	ldr	r1, [sp, #24]
 8012ba0:	eba1 0909 	sub.w	r9, r1, r9
 8012ba4:	ea4f 21e9 	mov.w	r1, r9, asr #11
 8012ba8:	f8c3 119c 	str.w	r1, [r3, #412]	; 0x19c
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8012bac:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012bae:	4461      	add	r1, ip
 8012bb0:	12c9      	asrs	r1, r1, #11
 8012bb2:	63d9      	str	r1, [r3, #60]	; 0x3c
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8012bb4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012bb6:	eba1 0c0c 	sub.w	ip, r1, ip
 8012bba:	ea4f 21ec 	mov.w	r1, ip, asr #11
 8012bbe:	f8c3 117c 	str.w	r1, [r3, #380]	; 0x17c
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8012bc2:	9903      	ldr	r1, [sp, #12]
 8012bc4:	4411      	add	r1, r2
 8012bc6:	12c9      	asrs	r1, r1, #11
 8012bc8:	65d9      	str	r1, [r3, #92]	; 0x5c
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8012bca:	9903      	ldr	r1, [sp, #12]
 8012bcc:	1a8a      	subs	r2, r1, r2
 8012bce:	12d2      	asrs	r2, r2, #11
 8012bd0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8012bd4:	9a07      	ldr	r2, [sp, #28]
 8012bd6:	443a      	add	r2, r7
 8012bd8:	12d2      	asrs	r2, r2, #11
 8012bda:	67da      	str	r2, [r3, #124]	; 0x7c
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8012bdc:	9a07      	ldr	r2, [sp, #28]
 8012bde:	1bd7      	subs	r7, r2, r7
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8012be0:	9a04      	ldr	r2, [sp, #16]
 8012be2:	442a      	add	r2, r5
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8012be4:	12ff      	asrs	r7, r7, #11
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8012be6:	12d2      	asrs	r2, r2, #11
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8012be8:	f8c3 713c 	str.w	r7, [r3, #316]	; 0x13c
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8012bec:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8012bf0:	9a04      	ldr	r2, [sp, #16]
 8012bf2:	1b55      	subs	r5, r2, r5
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 8012bf4:	9a05      	ldr	r2, [sp, #20]
 8012bf6:	4422      	add	r2, r4
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8012bf8:	12ed      	asrs	r5, r5, #11
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 8012bfa:	12d2      	asrs	r2, r2, #11
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8012bfc:	f8c3 511c 	str.w	r5, [r3, #284]	; 0x11c
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 8012c00:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp26 - tmp16, CONST_BITS-PASS1_BITS);
 8012c04:	9a05      	ldr	r2, [sp, #20]
    tmp27 = z1 - tmp11 - tmp11;             /* c0 = (c6-c12)*2 */
 8012c06:	9908      	ldr	r1, [sp, #32]
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp26 - tmp16, CONST_BITS-PASS1_BITS);
 8012c08:	1b14      	subs	r4, r2, r4
    tmp27 = z1 - tmp11 - tmp11;             /* c0 = (c6-c12)*2 */
 8012c0a:	9a01      	ldr	r2, [sp, #4]
 8012c0c:	eba2 0241 	sub.w	r2, r2, r1, lsl #1
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp26 - tmp16, CONST_BITS-PASS1_BITS);
 8012c10:	12e4      	asrs	r4, r4, #11
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp27, CONST_BITS-PASS1_BITS);
 8012c12:	12d2      	asrs	r2, r2, #11
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp26 - tmp16, CONST_BITS-PASS1_BITS);
 8012c14:	f8c3 40fc 	str.w	r4, [r3, #252]	; 0xfc
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp27, CONST_BITS-PASS1_BITS);
 8012c18:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8012c1c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012c1e:	455a      	cmp	r2, fp
 8012c20:	f47f aef2 	bne.w	8012a08 <jpeg_idct_15x15+0x24>
 8012c24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012c26:	f1a3 0904 	sub.w	r9, r3, #4
 8012c2a:	3338      	adds	r3, #56	; 0x38
 8012c2c:	930d      	str	r3, [sp, #52]	; 0x34
  }

  /* Pass 2: process 15 rows from work array, store into output array. */

  wsptr = workspace;
 8012c2e:	ab0e      	add	r3, sp, #56	; 0x38
 8012c30:	9300      	str	r3, [sp, #0]
  for (ctr = 0; ctr < 15; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8012c32:	f859 3f04 	ldr.w	r3, [r9, #4]!

    z2 = (INT32) wsptr[2];
    z3 = (INT32) wsptr[4];
    z4 = (INT32) wsptr[6];

    tmp10 = MULTIPLY(z4, FIX(0.437016024)); /* c12 */
 8012c36:	f640 51fc 	movw	r1, #3580	; 0xdfc
    outptr = output_buf[ctr] + output_col;
 8012c3a:	9a90      	ldr	r2, [sp, #576]	; 0x240
    z1 -= (tmp11 - tmp10) << 1;             /* c0 = (c6-c12)*2 */

    z4 = z2 - z3;
    z3 += z2;
    tmp10 = MULTIPLY(z3, FIX(1.337628990)); /* (c2+c4)/2 */
    tmp11 = MULTIPLY(z4, FIX(0.045680613)); /* (c2-c4)/2 */
 8012c3c:	f44f 74bb 	mov.w	r4, #374	; 0x176
    outptr = output_buf[ctr] + output_col;
 8012c40:	930c      	str	r3, [sp, #48]	; 0x30
    z2 = MULTIPLY(z2, FIX(1.439773946));    /* c4+c14 */
 8012c42:	f642 6e13 	movw	lr, #11795	; 0x2e13
    outptr = output_buf[ctr] + output_col;
 8012c46:	4413      	add	r3, r2
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8012c48:	9a00      	ldr	r2, [sp, #0]
    z3 = MULTIPLY(z4, FIX(1.224744871));                    /* c5 */
    z4 = (INT32) wsptr[7];

    tmp13 = z2 - z4;
    tmp15 = MULTIPLY(z1 + tmp13, FIX(0.831253876));         /* c9 */
    tmp11 = tmp15 + MULTIPLY(z1, FIX(0.513743148));         /* c3-c9 */
 8012c4a:	f241 0871 	movw	r8, #4209	; 0x1071
    z2 = (INT32) wsptr[2];
 8012c4e:	6895      	ldr	r5, [r2, #8]
    z3 = (INT32) wsptr[4];
 8012c50:	6910      	ldr	r0, [r2, #16]
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8012c52:	6816      	ldr	r6, [r2, #0]
    z4 = (INT32) wsptr[6];
 8012c54:	6992      	ldr	r2, [r2, #24]
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8012c56:	3610      	adds	r6, #16
    tmp10 = MULTIPLY(z4, FIX(0.437016024)); /* c12 */
 8012c58:	fb01 fc02 	mul.w	ip, r1, r2
    tmp11 = MULTIPLY(z4, FIX(1.144122806)); /* c6 */
 8012c5c:	f242 419d 	movw	r1, #9373	; 0x249d
 8012c60:	434a      	muls	r2, r1
    tmp12 = z1 - tmp10;
 8012c62:	ebcc 3146 	rsb	r1, ip, r6, lsl #13
    tmp13 = z1 + tmp11;
 8012c66:	eb02 3746 	add.w	r7, r2, r6, lsl #13
    z1 -= (tmp11 - tmp10) << 1;             /* c0 = (c6-c12)*2 */
 8012c6a:	eba2 020c 	sub.w	r2, r2, ip
 8012c6e:	0052      	lsls	r2, r2, #1
 8012c70:	ebc2 3246 	rsb	r2, r2, r6, lsl #13
    z4 = z2 - z3;
 8012c74:	1a2e      	subs	r6, r5, r0
    z3 += z2;
 8012c76:	4428      	add	r0, r5
    z2 = MULTIPLY(z2, FIX(1.439773946));    /* c4+c14 */
 8012c78:	fb0e f505 	mul.w	r5, lr, r5
    z1 -= (tmp11 - tmp10) << 1;             /* c0 = (c6-c12)*2 */
 8012c7c:	9201      	str	r2, [sp, #4]
    tmp10 = MULTIPLY(z3, FIX(1.337628990)); /* (c2+c4)/2 */
 8012c7e:	f642 22ce 	movw	r2, #10958	; 0x2ace
    tmp11 = MULTIPLY(z4, FIX(0.045680613)); /* (c2-c4)/2 */
 8012c82:	fb04 fc06 	mul.w	ip, r4, r6
    tmp10 = MULTIPLY(z3, FIX(1.337628990)); /* (c2+c4)/2 */
 8012c86:	4342      	muls	r2, r0
    tmp20 = tmp13 + tmp10 + tmp11;
 8012c88:	eb07 0e02 	add.w	lr, r7, r2
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 8012c8c:	1a8a      	subs	r2, r1, r2
 8012c8e:	4462      	add	r2, ip
    tmp20 = tmp13 + tmp10 + tmp11;
 8012c90:	eb0e 040c 	add.w	r4, lr, ip
    tmp11 = MULTIPLY(z4, FIX(0.399234004)); /* (c8-c14)/2 */
 8012c94:	f640 4cc7 	movw	ip, #3271	; 0xcc7
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 8012c98:	442a      	add	r2, r5
    tmp20 = tmp13 + tmp10 + tmp11;
 8012c9a:	9402      	str	r4, [sp, #8]
    tmp11 = MULTIPLY(z4, FIX(0.399234004)); /* (c8-c14)/2 */
 8012c9c:	fb0c fc06 	mul.w	ip, ip, r6
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 8012ca0:	9203      	str	r2, [sp, #12]
    tmp10 = MULTIPLY(z3, FIX(0.547059574)); /* (c8+c14)/2 */
 8012ca2:	f241 1282 	movw	r2, #4482	; 0x1182
 8012ca6:	4342      	muls	r2, r0
    tmp25 = tmp13 - tmp10 - tmp11;
 8012ca8:	eba7 0e02 	sub.w	lr, r7, r2
    tmp26 = tmp12 + tmp10 - tmp11 - z2;
 8012cac:	440a      	add	r2, r1
 8012cae:	eba2 020c 	sub.w	r2, r2, ip
    tmp25 = tmp13 - tmp10 - tmp11;
 8012cb2:	ebae 040c 	sub.w	r4, lr, ip
    tmp26 = tmp12 + tmp10 - tmp11 - z2;
 8012cb6:	1b52      	subs	r2, r2, r5
    tmp25 = tmp13 - tmp10 - tmp11;
 8012cb8:	9404      	str	r4, [sp, #16]
    tmp14 = tmp15 - MULTIPLY(tmp13, FIX(2.176250899));      /* c3+c9 */
 8012cba:	4c68      	ldr	r4, [pc, #416]	; (8012e5c <jpeg_idct_15x15+0x478>)
    tmp26 = tmp12 + tmp10 - tmp11 - z2;
 8012cbc:	9205      	str	r2, [sp, #20]
    tmp10 = MULTIPLY(z3, FIX(0.790569415)); /* (c6+c12)/2 */
 8012cbe:	f641 124c 	movw	r2, #6476	; 0x194c
 8012cc2:	4350      	muls	r0, r2
    tmp11 = MULTIPLY(z4, FIX(0.353553391)); /* (c6-c12)/2 */
 8012cc4:	f44f 6235 	mov.w	r2, #2896	; 0xb50
    tmp21 = tmp12 + tmp10 + tmp11;
 8012cc8:	4401      	add	r1, r0
    tmp11 = MULTIPLY(z4, FIX(0.353553391)); /* (c6-c12)/2 */
 8012cca:	4372      	muls	r2, r6
    tmp24 = tmp13 - tmp10 + tmp11;
 8012ccc:	1a38      	subs	r0, r7, r0
    tmp21 = tmp12 + tmp10 + tmp11;
 8012cce:	4411      	add	r1, r2
    tmp24 = tmp13 - tmp10 + tmp11;
 8012cd0:	1882      	adds	r2, r0, r2
    tmp21 = tmp12 + tmp10 + tmp11;
 8012cd2:	9106      	str	r1, [sp, #24]
    tmp24 = tmp13 - tmp10 + tmp11;
 8012cd4:	9207      	str	r2, [sp, #28]
    tmp11 += tmp11;
 8012cd6:	f44f 52b5 	mov.w	r2, #5792	; 0x16a0
    z2 = (INT32) wsptr[3];
 8012cda:	9900      	ldr	r1, [sp, #0]
    tmp11 += tmp11;
 8012cdc:	4372      	muls	r2, r6
    tmp15 = MULTIPLY(z1 + tmp13, FIX(0.831253876));         /* c9 */
 8012cde:	f641 269a 	movw	r6, #6810	; 0x1a9a
    z2 = (INT32) wsptr[3];
 8012ce2:	68cf      	ldr	r7, [r1, #12]
    tmp11 += tmp11;
 8012ce4:	9208      	str	r2, [sp, #32]
    tmp22 = z1 + tmp11;                     /* c10 = c6-c12 */
 8012ce6:	9808      	ldr	r0, [sp, #32]
 8012ce8:	9a01      	ldr	r2, [sp, #4]
 8012cea:	eb02 0b00 	add.w	fp, r2, r0
    z3 = MULTIPLY(z4, FIX(1.224744871));                    /* c5 */
 8012cee:	6948      	ldr	r0, [r1, #20]
 8012cf0:	f242 7131 	movw	r1, #10033	; 0x2731
    z1 = (INT32) wsptr[1];
 8012cf4:	9a00      	ldr	r2, [sp, #0]
    z3 = MULTIPLY(z4, FIX(1.224744871));                    /* c5 */
 8012cf6:	fb01 fc00 	mul.w	ip, r1, r0
    z4 = (INT32) wsptr[7];
 8012cfa:	9800      	ldr	r0, [sp, #0]
    z1 = (INT32) wsptr[1];
 8012cfc:	6852      	ldr	r2, [r2, #4]
    z4 = (INT32) wsptr[7];
 8012cfe:	f8d0 e01c 	ldr.w	lr, [r0, #28]
    tmp13 = z2 - z4;
 8012d02:	eba7 050e 	sub.w	r5, r7, lr
    tmp15 = MULTIPLY(z1 + tmp13, FIX(0.831253876));         /* c9 */
 8012d06:	1950      	adds	r0, r2, r5
 8012d08:	4370      	muls	r0, r6
    tmp13 = MULTIPLY(z2, - FIX(0.831253876));               /* -c9 */
    tmp15 = MULTIPLY(z2, - FIX(1.344997024));               /* -c3 */
    z2 = z1 - z4;
    tmp12 = z3 + MULTIPLY(z2, FIX(1.406466353));            /* c1 */

    tmp10 = tmp12 + MULTIPLY(z4, FIX(2.457431844)) - tmp15; /* c1+c7 */
 8012d0a:	f644 66a3 	movw	r6, #20131	; 0x4ea3
    tmp11 = tmp15 + MULTIPLY(z1, FIX(0.513743148));         /* c3-c9 */
 8012d0e:	fb08 0802 	mla	r8, r8, r2, r0
    tmp14 = tmp15 - MULTIPLY(tmp13, FIX(2.176250899));      /* c3+c9 */
 8012d12:	fb04 0005 	mla	r0, r4, r5, r0
    z2 = z1 - z4;
 8012d16:	eba2 050e 	sub.w	r5, r2, lr
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
 8012d1a:	4c54      	ldr	r4, [pc, #336]	; (8012e6c <jpeg_idct_15x15+0x488>)
    tmp14 = tmp15 - MULTIPLY(tmp13, FIX(2.176250899));      /* c3+c9 */
 8012d1c:	9009      	str	r0, [sp, #36]	; 0x24
    tmp13 = MULTIPLY(z2, - FIX(0.831253876));               /* -c9 */
 8012d1e:	4850      	ldr	r0, [pc, #320]	; (8012e60 <jpeg_idct_15x15+0x47c>)
 8012d20:	4378      	muls	r0, r7
 8012d22:	900a      	str	r0, [sp, #40]	; 0x28
    tmp15 = MULTIPLY(z2, - FIX(1.344997024));               /* -c3 */
 8012d24:	484f      	ldr	r0, [pc, #316]	; (8012e64 <jpeg_idct_15x15+0x480>)
 8012d26:	4347      	muls	r7, r0
    tmp12 = z3 + MULTIPLY(z2, FIX(1.406466353));            /* c1 */
 8012d28:	f642 5002 	movw	r0, #11522	; 0x2d02
 8012d2c:	fb00 c005 	mla	r0, r0, r5, ip
    tmp12 = MULTIPLY(z2, FIX(1.224744871)) - z3;            /* c5 */
 8012d30:	434d      	muls	r5, r1
    z2 = MULTIPLY(z1 + z4, FIX(0.575212477));               /* c11 */
    tmp13 += z2 + MULTIPLY(z1, FIX(0.475753014)) - z3;      /* c7-c11 */
 8012d32:	f640 7139 	movw	r1, #3897	; 0xf39
    tmp10 = tmp12 + MULTIPLY(z4, FIX(2.457431844)) - tmp15; /* c1+c7 */
 8012d36:	fb06 060e 	mla	r6, r6, lr, r0
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
 8012d3a:	fb04 0002 	mla	r0, r4, r2, r0
 8012d3e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    tmp10 = tmp12 + MULTIPLY(z4, FIX(2.457431844)) - tmp15; /* c1+c7 */
 8012d40:	1bf6      	subs	r6, r6, r7
    tmp12 = MULTIPLY(z2, FIX(1.224744871)) - z3;            /* c5 */
 8012d42:	eba5 050c 	sub.w	r5, r5, ip
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
 8012d46:	4420      	add	r0, r4
    z2 = MULTIPLY(z1 + z4, FIX(0.575212477));               /* c11 */
 8012d48:	f241 2468 	movw	r4, #4712	; 0x1268
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
 8012d4c:	900b      	str	r0, [sp, #44]	; 0x2c
    z2 = MULTIPLY(z1 + z4, FIX(0.575212477));               /* c11 */
 8012d4e:	eb02 000e 	add.w	r0, r2, lr
 8012d52:	4360      	muls	r0, r4
    tmp13 += z2 + MULTIPLY(z1, FIX(0.475753014)) - z3;      /* c7-c11 */
 8012d54:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8012d56:	fb01 0202 	mla	r2, r1, r2, r0
 8012d5a:	eba2 020c 	sub.w	r2, r2, ip
 8012d5e:	4422      	add	r2, r4
    tmp15 += z2 - MULTIPLY(z4, FIX(0.869244010)) + z3;      /* c11+c13 */
 8012d60:	4c41      	ldr	r4, [pc, #260]	; (8012e68 <jpeg_idct_15x15+0x484>)
 8012d62:	fb04 000e 	mla	r0, r4, lr, r0
 8012d66:	4460      	add	r0, ip
 8012d68:	4407      	add	r7, r0

    /* Final output stage */

    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8012d6a:	9802      	ldr	r0, [sp, #8]
 8012d6c:	4430      	add	r0, r6
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8012d6e:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8012d72:	f81a 0000 	ldrb.w	r0, [sl, r0]
 8012d76:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8012d78:	9990      	ldr	r1, [sp, #576]	; 0x240
 8012d7a:	5460      	strb	r0, [r4, r1]
    outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8012d7c:	9902      	ldr	r1, [sp, #8]
 8012d7e:	1b8e      	subs	r6, r1, r6
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8012d80:	9906      	ldr	r1, [sp, #24]
			     & RANGE_MASK];
 8012d82:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8012d86:	f81a 0006 	ldrb.w	r0, [sl, r6]
 8012d8a:	7398      	strb	r0, [r3, #14]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8012d8c:	eb01 0008 	add.w	r0, r1, r8
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8012d90:	eba1 0108 	sub.w	r1, r1, r8
			     & RANGE_MASK];
 8012d94:	f3c0 4089 	ubfx	r0, r0, #18, #10
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8012d98:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8012d9c:	f81a 0000 	ldrb.w	r0, [sl, r0]
 8012da0:	7058      	strb	r0, [r3, #1]
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8012da2:	f81a 1001 	ldrb.w	r1, [sl, r1]
 8012da6:	7359      	strb	r1, [r3, #13]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8012da8:	eb0b 0105 	add.w	r1, fp, r5
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8012dac:	ebab 0b05 	sub.w	fp, fp, r5
			     & RANGE_MASK];
 8012db0:	f3c1 4189 	ubfx	r1, r1, #18, #10
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8012db4:	f3cb 4b89 	ubfx	fp, fp, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8012db8:	f81a 1001 	ldrb.w	r1, [sl, r1]
 8012dbc:	7099      	strb	r1, [r3, #2]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8012dbe:	f81a 100b 	ldrb.w	r1, [sl, fp]
 8012dc2:	7319      	strb	r1, [r3, #12]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8012dc4:	9903      	ldr	r1, [sp, #12]
 8012dc6:	4411      	add	r1, r2
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8012dc8:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8012dcc:	f81a 1001 	ldrb.w	r1, [sl, r1]
 8012dd0:	70d9      	strb	r1, [r3, #3]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8012dd2:	9903      	ldr	r1, [sp, #12]
 8012dd4:	1a8a      	subs	r2, r1, r2
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8012dd6:	9909      	ldr	r1, [sp, #36]	; 0x24
			     & RANGE_MASK];
 8012dd8:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8012ddc:	f81a 2002 	ldrb.w	r2, [sl, r2]
 8012de0:	72da      	strb	r2, [r3, #11]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8012de2:	9a07      	ldr	r2, [sp, #28]
 8012de4:	440a      	add	r2, r1
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8012de6:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8012dea:	f81a 2002 	ldrb.w	r2, [sl, r2]
 8012dee:	711a      	strb	r2, [r3, #4]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8012df0:	9a07      	ldr	r2, [sp, #28]
 8012df2:	1a52      	subs	r2, r2, r1
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8012df4:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8012df8:	f81a 2002 	ldrb.w	r2, [sl, r2]
 8012dfc:	729a      	strb	r2, [r3, #10]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8012dfe:	9a04      	ldr	r2, [sp, #16]
 8012e00:	443a      	add	r2, r7
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8012e02:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8012e06:	f81a 2002 	ldrb.w	r2, [sl, r2]
 8012e0a:	715a      	strb	r2, [r3, #5]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8012e0c:	9a04      	ldr	r2, [sp, #16]
 8012e0e:	1bd7      	subs	r7, r2, r7
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8012e10:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8012e14:	f81a 2007 	ldrb.w	r2, [sl, r7]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 8012e18:	990b      	ldr	r1, [sp, #44]	; 0x2c
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8012e1a:	725a      	strb	r2, [r3, #9]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 8012e1c:	9a05      	ldr	r2, [sp, #20]
 8012e1e:	440a      	add	r2, r1
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8012e20:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 8012e24:	f81a 2002 	ldrb.w	r2, [sl, r2]
 8012e28:	719a      	strb	r2, [r3, #6]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 8012e2a:	9a05      	ldr	r2, [sp, #20]
 8012e2c:	1a50      	subs	r0, r2, r1
    tmp27 = z1 - tmp11 - tmp11;             /* c0 = (c6-c12)*2 */
 8012e2e:	9908      	ldr	r1, [sp, #32]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8012e30:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 8012e34:	f81a 2000 	ldrb.w	r2, [sl, r0]
 8012e38:	721a      	strb	r2, [r3, #8]
    tmp27 = z1 - tmp11 - tmp11;             /* c0 = (c6-c12)*2 */
 8012e3a:	9a01      	ldr	r2, [sp, #4]
 8012e3c:	eba2 0241 	sub.w	r2, r2, r1, lsl #1
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8012e40:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27,
 8012e44:	f81a 2002 	ldrb.w	r2, [sl, r2]
 8012e48:	71da      	strb	r2, [r3, #7]

    wsptr += 8;		/* advance pointer to next row */
 8012e4a:	9b00      	ldr	r3, [sp, #0]
 8012e4c:	3320      	adds	r3, #32
 8012e4e:	9300      	str	r3, [sp, #0]
  for (ctr = 0; ctr < 15; ctr++) {
 8012e50:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012e52:	454b      	cmp	r3, r9
 8012e54:	f47f aeed 	bne.w	8012c32 <jpeg_idct_15x15+0x24e>
 8012e58:	e00a      	b.n	8012e70 <jpeg_idct_15x15+0x48c>
 8012e5a:	bf00      	nop
 8012e5c:	ffffba5c 	.word	0xffffba5c
 8012e60:	ffffe566 	.word	0xffffe566
 8012e64:	ffffd4f6 	.word	0xffffd4f6
 8012e68:	ffffe42f 	.word	0xffffe42f
 8012e6c:	ffffdc67 	.word	0xffffdc67
  }
}
 8012e70:	f50d 7d07 	add.w	sp, sp, #540	; 0x21c
 8012e74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012e78 <jpeg_idct_16x16>:

GLOBAL(void)
jpeg_idct_16x16 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8012e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e7c:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 8012e80:	930c      	str	r3, [sp, #48]	; 0x30
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8012e82:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8012e86:	f103 0880 	add.w	r8, r3, #128	; 0x80
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8012e8a:	1e93      	subs	r3, r2, #2
 8012e8c:	9300      	str	r3, [sp, #0]
 8012e8e:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8012e90:	f1a3 0904 	sub.w	r9, r3, #4
 8012e94:	f102 030e 	add.w	r3, r2, #14
 8012e98:	930d      	str	r3, [sp, #52]	; 0x34
  wsptr = workspace;
 8012e9a:	ab0e      	add	r3, sp, #56	; 0x38
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012e9c:	9900      	ldr	r1, [sp, #0]
    /* Add fudge factor here for final descale. */
    tmp0 += 1 << (CONST_BITS-PASS1_BITS-1);

    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 8012e9e:	f241 1451 	movw	r4, #4433	; 0x1151
    tmp13 = tmp0 - tmp2;

    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
    z3 = z1 - z2;
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 8012ea2:	f640 05d4 	movw	r5, #2260	; 0x8d4
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */

    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 8012ea6:	f245 2c03 	movw	ip, #20995	; 0x5203
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012eaa:	f931 2f02 	ldrsh.w	r2, [r1, #2]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8012eae:	3304      	adds	r3, #4
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012eb0:	9100      	str	r1, [sp, #0]
 8012eb2:	f859 1f04 	ldr.w	r1, [r9, #4]!
 8012eb6:	434a      	muls	r2, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8012eb8:	9900      	ldr	r1, [sp, #0]
 8012eba:	f9b1 0040 	ldrsh.w	r0, [r1, #64]	; 0x40
    tmp0 <<= CONST_BITS;
 8012ebe:	0352      	lsls	r2, r2, #13
    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8012ec0:	f8d9 1080 	ldr.w	r1, [r9, #128]	; 0x80
    tmp0 += 1 << (CONST_BITS-PASS1_BITS-1);
 8012ec4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8012ec8:	4341      	muls	r1, r0
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 8012eca:	f642 10cf 	movw	r0, #10703	; 0x29cf
 8012ece:	4348      	muls	r0, r1
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 8012ed0:	4361      	muls	r1, r4
    tmp10 = tmp0 + tmp1;
 8012ed2:	1817      	adds	r7, r2, r0
    tmp11 = tmp0 - tmp1;
 8012ed4:	1a10      	subs	r0, r2, r0
    tmp12 = tmp0 + tmp2;
 8012ed6:	1856      	adds	r6, r2, r1
    tmp13 = tmp0 - tmp2;
 8012ed8:	eba2 0b01 	sub.w	fp, r2, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8012edc:	9900      	ldr	r1, [sp, #0]
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 8012ede:	4ad6      	ldr	r2, [pc, #856]	; (8013238 <jpeg_idct_16x16+0x3c0>)
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8012ee0:	f9b1 4020 	ldrsh.w	r4, [r1, #32]
 8012ee4:	f8d9 1040 	ldr.w	r1, [r9, #64]	; 0x40
 8012ee8:	fb01 fe04 	mul.w	lr, r1, r4
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8012eec:	9900      	ldr	r1, [sp, #0]
 8012eee:	f9b1 4060 	ldrsh.w	r4, [r1, #96]	; 0x60
 8012ef2:	f8d9 10c0 	ldr.w	r1, [r9, #192]	; 0xc0
 8012ef6:	4361      	muls	r1, r4
    z3 = z1 - z2;
 8012ef8:	ebae 0401 	sub.w	r4, lr, r1
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 8012efc:	fb05 fa04 	mul.w	sl, r5, r4
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 8012f00:	f642 4563 	movw	r5, #11363	; 0x2c63
 8012f04:	436c      	muls	r4, r5
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 8012f06:	f641 45cd 	movw	r5, #7373	; 0x1ccd
    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 8012f0a:	fb0c 4c01 	mla	ip, ip, r1, r4
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 8012f0e:	fb02 440e 	mla	r4, r2, lr, r4
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 8012f12:	f202 22ee 	addw	r2, r2, #750	; 0x2ee
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 8012f16:	fb05 a50e 	mla	r5, r5, lr, sl
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 8012f1a:	fb02 a101 	mla	r1, r2, r1, sl

    tmp20 = tmp10 + tmp0;
 8012f1e:	eb07 020c 	add.w	r2, r7, ip
 8012f22:	9201      	str	r2, [sp, #4]
    tmp27 = tmp10 - tmp0;
 8012f24:	eba7 020c 	sub.w	r2, r7, ip
 8012f28:	9202      	str	r2, [sp, #8]
    tmp21 = tmp12 + tmp1;
 8012f2a:	1972      	adds	r2, r6, r5
 8012f2c:	9203      	str	r2, [sp, #12]
    tmp26 = tmp12 - tmp1;
 8012f2e:	1b72      	subs	r2, r6, r5
 8012f30:	9204      	str	r2, [sp, #16]
    tmp22 = tmp13 + tmp2;
 8012f32:	eb0b 0204 	add.w	r2, fp, r4
 8012f36:	9205      	str	r2, [sp, #20]
    tmp25 = tmp13 - tmp2;
 8012f38:	ebab 0204 	sub.w	r2, fp, r4
 8012f3c:	9206      	str	r2, [sp, #24]
    tmp23 = tmp11 + tmp3;
 8012f3e:	1842      	adds	r2, r0, r1
 8012f40:	9207      	str	r2, [sp, #28]
    tmp24 = tmp11 - tmp3;
 8012f42:	1a42      	subs	r2, r0, r1
 8012f44:	9208      	str	r2, [sp, #32]

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8012f46:	9a00      	ldr	r2, [sp, #0]
 8012f48:	f9b2 1010 	ldrsh.w	r1, [r2, #16]
 8012f4c:	f8d9 2020 	ldr.w	r2, [r9, #32]
 8012f50:	4351      	muls	r1, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8012f52:	9a00      	ldr	r2, [sp, #0]
 8012f54:	f9b2 0030 	ldrsh.w	r0, [r2, #48]	; 0x30
 8012f58:	f8d9 2060 	ldr.w	r2, [r9, #96]	; 0x60
 8012f5c:	4342      	muls	r2, r0
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8012f5e:	9800      	ldr	r0, [sp, #0]
 8012f60:	f9b0 5050 	ldrsh.w	r5, [r0, #80]	; 0x50
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);

    tmp11 = z1 + z3;

    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8012f64:	188e      	adds	r6, r1, r2
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8012f66:	f8d9 00a0 	ldr.w	r0, [r9, #160]	; 0xa0
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8012f6a:	eba1 0b02 	sub.w	fp, r1, r2
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8012f6e:	4345      	muls	r5, r0
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8012f70:	9800      	ldr	r0, [sp, #0]
 8012f72:	f9b0 4070 	ldrsh.w	r4, [r0, #112]	; 0x70
    tmp11 = z1 + z3;
 8012f76:	194f      	adds	r7, r1, r5
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8012f78:	f8d9 00e0 	ldr.w	r0, [r9, #224]	; 0xe0
 8012f7c:	4360      	muls	r0, r4
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8012f7e:	f642 344e 	movw	r4, #11086	; 0x2b4e
 8012f82:	4366      	muls	r6, r4
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 8012f84:	f242 74e9 	movw	r4, #10217	; 0x27e9
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 8012f88:	eb01 0e00 	add.w	lr, r1, r0
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 8012f8c:	eba1 0c00 	sub.w	ip, r1, r0
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 8012f90:	fb04 fa07 	mul.w	sl, r4, r7
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 8012f94:	f242 24fc 	movw	r4, #8956	; 0x22fc
 8012f98:	fb04 fe0e 	mul.w	lr, r4, lr
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 8012f9c:	f641 44b6 	movw	r4, #7350	; 0x1cb6
 8012fa0:	fb04 fc0c 	mul.w	ip, r4, ip
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
 8012fa4:	f241 5455 	movw	r4, #5461	; 0x1555
 8012fa8:	437c      	muls	r4, r7
    tmp0  = tmp1 + tmp2 + tmp3 -
 8012faa:	eb06 070a 	add.w	r7, r6, sl
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
 8012fae:	9409      	str	r4, [sp, #36]	; 0x24
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8012fb0:	f640 5423 	movw	r4, #3363	; 0xd23
    tmp0  = tmp1 + tmp2 + tmp3 -
 8012fb4:	4477      	add	r7, lr
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8012fb6:	fb04 fb0b 	mul.w	fp, r4, fp
    tmp0  = tmp1 + tmp2 + tmp3 -
 8012fba:	4ca0      	ldr	r4, [pc, #640]	; (801323c <jpeg_idct_16x16+0x3c4>)
 8012fbc:	fb04 7401 	mla	r4, r4, r1, r7
	    MULTIPLY(z1, FIX(2.286341144));        /* c7+c5+c3-c1 */
    tmp13 = tmp10 + tmp11 + tmp12 -
 8012fc0:	4f9f      	ldr	r7, [pc, #636]	; (8013240 <jpeg_idct_16x16+0x3c8>)
    tmp0  = tmp1 + tmp2 + tmp3 -
 8012fc2:	940a      	str	r4, [sp, #40]	; 0x28
    tmp13 = tmp10 + tmp11 + tmp12 -
 8012fc4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8012fc6:	4464      	add	r4, ip
 8012fc8:	445c      	add	r4, fp
 8012fca:	fb07 4101 	mla	r1, r7, r1, r4
	    MULTIPLY(z1, FIX(1.835730603));        /* c9+c11+c13-c15 */
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 8012fce:	1954      	adds	r4, r2, r5
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8012fd0:	4f9c      	ldr	r7, [pc, #624]	; (8013244 <jpeg_idct_16x16+0x3cc>)
    tmp13 = tmp10 + tmp11 + tmp12 -
 8012fd2:	910b      	str	r1, [sp, #44]	; 0x2c
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 8012fd4:	f44f 618e 	mov.w	r1, #1136	; 0x470
 8012fd8:	434c      	muls	r4, r1
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
 8012fda:	f240 214d 	movw	r1, #589	; 0x24d
 8012fde:	fb01 4102 	mla	r1, r1, r2, r4
 8012fe2:	440e      	add	r6, r1
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 8012fe4:	4998      	ldr	r1, [pc, #608]	; (8013248 <jpeg_idct_16x16+0x3d0>)
 8012fe6:	fb01 4405 	mla	r4, r1, r5, r4
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 8012fea:	1aa9      	subs	r1, r5, r2
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 8012fec:	4454      	add	r4, sl
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 8012fee:	f642 5a09 	movw	sl, #11529	; 0x2d09
 8012ff2:	fb0a f101 	mul.w	r1, sl, r1
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8012ff6:	fb07 1a05 	mla	sl, r7, r5, r1
 8012ffa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8012ffc:	4457      	add	r7, sl
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 8012ffe:	f643 7a1a 	movw	sl, #16154	; 0x3f1a
 8013002:	fb0a 1a02 	mla	sl, sl, r2, r1
    z2    += z4;
 8013006:	4402      	add	r2, r0
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 8013008:	4990      	ldr	r1, [pc, #576]	; (801324c <jpeg_idct_16x16+0x3d4>)
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 801300a:	44da      	add	sl, fp
    tmp1  += z1;
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 801300c:	f242 2b18 	movw	fp, #8728	; 0x2218
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 8013010:	4351      	muls	r1, r2
    tmp1  += z1;
 8013012:	440e      	add	r6, r1
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 8013014:	fb0b 1100 	mla	r1, fp, r0, r1
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8013018:	f246 4b85 	movw	fp, #25733	; 0x6485
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 801301c:	448e      	add	lr, r1
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
 801301e:	498c      	ldr	r1, [pc, #560]	; (8013250 <jpeg_idct_16x16+0x3d8>)
 8013020:	434a      	muls	r2, r1
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8013022:	fb0b 2b00 	mla	fp, fp, r0, r2
    tmp12 += z2;
 8013026:	4452      	add	r2, sl
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8013028:	f46f 7a59 	mvn.w	sl, #868	; 0x364
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 801302c:	44dc      	add	ip, fp
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 801302e:	eb05 0b00 	add.w	fp, r5, r0
 8013032:	4451      	add	r1, sl
    tmp2  += z2;
    tmp3  += z2;
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 8013034:	1b40      	subs	r0, r0, r5
    tmp10 += z2;
    tmp11 += z2;

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 8013036:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8013038:	fb01 fb0b 	mul.w	fp, r1, fp
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 801303c:	f640 5123 	movw	r1, #3363	; 0xd23
 8013040:	4348      	muls	r0, r1
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 8013042:	9901      	ldr	r1, [sp, #4]
    tmp2  += z2;
 8013044:	445c      	add	r4, fp
    tmp3  += z2;
 8013046:	44de      	add	lr, fp
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 8013048:	4429      	add	r1, r5
    tmp10 += z2;
 801304a:	4484      	add	ip, r0
    tmp11 += z2;
 801304c:	4438      	add	r0, r7
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 801304e:	12c9      	asrs	r1, r1, #11
 8013050:	f843 1c04 	str.w	r1, [r3, #-4]
    wsptr[8*15] = (int) RIGHT_SHIFT(tmp20 - tmp0,  CONST_BITS-PASS1_BITS);
 8013054:	9901      	ldr	r1, [sp, #4]
 8013056:	1b4f      	subs	r7, r1, r5
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp1,  CONST_BITS-PASS1_BITS);
 8013058:	9903      	ldr	r1, [sp, #12]
 801305a:	4431      	add	r1, r6
    wsptr[8*15] = (int) RIGHT_SHIFT(tmp20 - tmp0,  CONST_BITS-PASS1_BITS);
 801305c:	12ff      	asrs	r7, r7, #11
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp1,  CONST_BITS-PASS1_BITS);
 801305e:	12c9      	asrs	r1, r1, #11
    wsptr[8*15] = (int) RIGHT_SHIFT(tmp20 - tmp0,  CONST_BITS-PASS1_BITS);
 8013060:	f8c3 71dc 	str.w	r7, [r3, #476]	; 0x1dc
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp1,  CONST_BITS-PASS1_BITS);
 8013064:	61d9      	str	r1, [r3, #28]
    wsptr[8*14] = (int) RIGHT_SHIFT(tmp21 - tmp1,  CONST_BITS-PASS1_BITS);
 8013066:	9903      	ldr	r1, [sp, #12]
 8013068:	1b8e      	subs	r6, r1, r6
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp2,  CONST_BITS-PASS1_BITS);
 801306a:	9905      	ldr	r1, [sp, #20]
 801306c:	4421      	add	r1, r4
    wsptr[8*14] = (int) RIGHT_SHIFT(tmp21 - tmp1,  CONST_BITS-PASS1_BITS);
 801306e:	12f6      	asrs	r6, r6, #11
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp2,  CONST_BITS-PASS1_BITS);
 8013070:	12c9      	asrs	r1, r1, #11
    wsptr[8*14] = (int) RIGHT_SHIFT(tmp21 - tmp1,  CONST_BITS-PASS1_BITS);
 8013072:	f8c3 61bc 	str.w	r6, [r3, #444]	; 0x1bc
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp2,  CONST_BITS-PASS1_BITS);
 8013076:	63d9      	str	r1, [r3, #60]	; 0x3c
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp22 - tmp2,  CONST_BITS-PASS1_BITS);
 8013078:	9905      	ldr	r1, [sp, #20]
 801307a:	1b0c      	subs	r4, r1, r4
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp3,  CONST_BITS-PASS1_BITS);
 801307c:	9907      	ldr	r1, [sp, #28]
 801307e:	4471      	add	r1, lr
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp22 - tmp2,  CONST_BITS-PASS1_BITS);
 8013080:	12e4      	asrs	r4, r4, #11
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp3,  CONST_BITS-PASS1_BITS);
 8013082:	12c9      	asrs	r1, r1, #11
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp22 - tmp2,  CONST_BITS-PASS1_BITS);
 8013084:	f8c3 419c 	str.w	r4, [r3, #412]	; 0x19c
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp3,  CONST_BITS-PASS1_BITS);
 8013088:	65d9      	str	r1, [r3, #92]	; 0x5c
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp23 - tmp3,  CONST_BITS-PASS1_BITS);
 801308a:	9907      	ldr	r1, [sp, #28]
 801308c:	eba1 0e0e 	sub.w	lr, r1, lr
 8013090:	ea4f 21ee 	mov.w	r1, lr, asr #11
 8013094:	f8c3 117c 	str.w	r1, [r3, #380]	; 0x17c
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp10, CONST_BITS-PASS1_BITS);
 8013098:	9908      	ldr	r1, [sp, #32]
 801309a:	4461      	add	r1, ip
 801309c:	12c9      	asrs	r1, r1, #11
 801309e:	67d9      	str	r1, [r3, #124]	; 0x7c
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp24 - tmp10, CONST_BITS-PASS1_BITS);
 80130a0:	9908      	ldr	r1, [sp, #32]
 80130a2:	eba1 0c0c 	sub.w	ip, r1, ip
 80130a6:	ea4f 21ec 	mov.w	r1, ip, asr #11
 80130aa:	f8c3 115c 	str.w	r1, [r3, #348]	; 0x15c
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp11, CONST_BITS-PASS1_BITS);
 80130ae:	9906      	ldr	r1, [sp, #24]
 80130b0:	4401      	add	r1, r0
 80130b2:	12c9      	asrs	r1, r1, #11
 80130b4:	f8c3 109c 	str.w	r1, [r3, #156]	; 0x9c
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp25 - tmp11, CONST_BITS-PASS1_BITS);
 80130b8:	9906      	ldr	r1, [sp, #24]
 80130ba:	1a08      	subs	r0, r1, r0
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp12, CONST_BITS-PASS1_BITS);
 80130bc:	9904      	ldr	r1, [sp, #16]
 80130be:	4411      	add	r1, r2
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp25 - tmp11, CONST_BITS-PASS1_BITS);
 80130c0:	12c0      	asrs	r0, r0, #11
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp12, CONST_BITS-PASS1_BITS);
 80130c2:	12c9      	asrs	r1, r1, #11
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp25 - tmp11, CONST_BITS-PASS1_BITS);
 80130c4:	f8c3 013c 	str.w	r0, [r3, #316]	; 0x13c
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp12, CONST_BITS-PASS1_BITS);
 80130c8:	f8c3 10bc 	str.w	r1, [r3, #188]	; 0xbc
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp26 - tmp12, CONST_BITS-PASS1_BITS);
 80130cc:	9904      	ldr	r1, [sp, #16]
 80130ce:	1a8a      	subs	r2, r1, r2
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp27 + tmp13, CONST_BITS-PASS1_BITS);
 80130d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp26 - tmp12, CONST_BITS-PASS1_BITS);
 80130d2:	12d2      	asrs	r2, r2, #11
 80130d4:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp27 + tmp13, CONST_BITS-PASS1_BITS);
 80130d8:	9a02      	ldr	r2, [sp, #8]
 80130da:	440a      	add	r2, r1
 80130dc:	12d2      	asrs	r2, r2, #11
 80130de:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp27 - tmp13, CONST_BITS-PASS1_BITS);
 80130e2:	9a02      	ldr	r2, [sp, #8]
 80130e4:	1a54      	subs	r4, r2, r1
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80130e6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80130e8:	9900      	ldr	r1, [sp, #0]
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp27 - tmp13, CONST_BITS-PASS1_BITS);
 80130ea:	12e4      	asrs	r4, r4, #11
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80130ec:	428a      	cmp	r2, r1
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp27 - tmp13, CONST_BITS-PASS1_BITS);
 80130ee:	f8c3 40fc 	str.w	r4, [r3, #252]	; 0xfc
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80130f2:	f47f aed3 	bne.w	8012e9c <jpeg_idct_16x16+0x24>
 80130f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  }

  /* Pass 2: process 16 rows from work array, store into output array. */

  wsptr = workspace;
 80130f8:	ad0e      	add	r5, sp, #56	; 0x38
 80130fa:	3b04      	subs	r3, #4
 80130fc:	9300      	str	r3, [sp, #0]
 80130fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013100:	333c      	adds	r3, #60	; 0x3c
 8013102:	930d      	str	r3, [sp, #52]	; 0x34
  for (ctr = 0; ctr < 16; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8013104:	9b00      	ldr	r3, [sp, #0]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp0 <<= CONST_BITS;

    z1 = (INT32) wsptr[4];
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 8013106:	f241 1051 	movw	r0, #4433	; 0x1151
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 801310a:	f642 14cf 	movw	r4, #10703	; 0x29cf
    tmp10 = tmp0 + tmp1;
    tmp11 = tmp0 - tmp1;
    tmp12 = tmp0 + tmp2;
    tmp13 = tmp0 - tmp2;

    z1 = (INT32) wsptr[2];
 801310e:	f8d5 9008 	ldr.w	r9, [r5, #8]
    outptr = output_buf[ctr] + output_col;
 8013112:	f853 2f04 	ldr.w	r2, [r3, #4]!
    z2 = (INT32) wsptr[6];
    z3 = z1 - z2;
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 8013116:	f642 4663 	movw	r6, #11363	; 0x2c63
    z2 = (INT32) wsptr[6];
 801311a:	f8d5 a018 	ldr.w	sl, [r5, #24]

    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 801311e:	f245 2703 	movw	r7, #20995	; 0x5203
    outptr = output_buf[ctr] + output_col;
 8013122:	920c      	str	r2, [sp, #48]	; 0x30
			     & RANGE_MASK];
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp27 - tmp13,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 8013124:	3520      	adds	r5, #32
    outptr = output_buf[ctr] + output_col;
 8013126:	9300      	str	r3, [sp, #0]
 8013128:	4613      	mov	r3, r2
 801312a:	9a98      	ldr	r2, [sp, #608]	; 0x260
 801312c:	1899      	adds	r1, r3, r2
    z1 = (INT32) wsptr[4];
 801312e:	f855 3c10 	ldr.w	r3, [r5, #-16]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8013132:	f855 2c20 	ldr.w	r2, [r5, #-32]
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 8013136:	435c      	muls	r4, r3
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8013138:	3210      	adds	r2, #16
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 801313a:	4343      	muls	r3, r0
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 801313c:	f640 00d4 	movw	r0, #2260	; 0x8d4
    tmp12 = tmp0 + tmp2;
 8013140:	eb03 3c42 	add.w	ip, r3, r2, lsl #13
    tmp13 = tmp0 - tmp2;
 8013144:	ebc3 3b42 	rsb	fp, r3, r2, lsl #13
    z3 = z1 - z2;
 8013148:	eba9 030a 	sub.w	r3, r9, sl
    tmp10 = tmp0 + tmp1;
 801314c:	eb04 3e42 	add.w	lr, r4, r2, lsl #13
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 8013150:	4358      	muls	r0, r3
    tmp11 = tmp0 - tmp1;
 8013152:	ebc4 3442 	rsb	r4, r4, r2, lsl #13
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 8013156:	4373      	muls	r3, r6
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 8013158:	4a37      	ldr	r2, [pc, #220]	; (8013238 <jpeg_idct_16x16+0x3c0>)
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 801315a:	f641 46cd 	movw	r6, #7373	; 0x1ccd
    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 801315e:	fb07 370a 	mla	r7, r7, sl, r3
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 8013162:	fb02 3309 	mla	r3, r2, r9, r3
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 8013166:	f202 22ee 	addw	r2, r2, #750	; 0x2ee
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 801316a:	fb06 0609 	mla	r6, r6, r9, r0
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 801316e:	fb02 000a 	mla	r0, r2, sl, r0
    tmp20 = tmp10 + tmp0;
 8013172:	eb0e 0207 	add.w	r2, lr, r7
 8013176:	9201      	str	r2, [sp, #4]
    tmp27 = tmp10 - tmp0;
 8013178:	ebae 0207 	sub.w	r2, lr, r7
    z3 = (INT32) wsptr[5];
 801317c:	f855 7c0c 	ldr.w	r7, [r5, #-12]
    tmp27 = tmp10 - tmp0;
 8013180:	9202      	str	r2, [sp, #8]
    tmp21 = tmp12 + tmp1;
 8013182:	eb0c 0206 	add.w	r2, ip, r6
 8013186:	9203      	str	r2, [sp, #12]
    tmp26 = tmp12 - tmp1;
 8013188:	ebac 0206 	sub.w	r2, ip, r6
 801318c:	9204      	str	r2, [sp, #16]
    tmp22 = tmp13 + tmp2;
 801318e:	eb0b 0203 	add.w	r2, fp, r3
    tmp25 = tmp13 - tmp2;
 8013192:	ebab 0303 	sub.w	r3, fp, r3
    tmp22 = tmp13 + tmp2;
 8013196:	9205      	str	r2, [sp, #20]
    tmp25 = tmp13 - tmp2;
 8013198:	9306      	str	r3, [sp, #24]
    tmp23 = tmp11 + tmp3;
 801319a:	1823      	adds	r3, r4, r0
    z1 = (INT32) wsptr[1];
 801319c:	f855 2c1c 	ldr.w	r2, [r5, #-28]
    tmp23 = tmp11 + tmp3;
 80131a0:	9307      	str	r3, [sp, #28]
    tmp24 = tmp11 - tmp3;
 80131a2:	1a23      	subs	r3, r4, r0
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 80131a4:	f642 344e 	movw	r4, #11086	; 0x2b4e
    z4 = (INT32) wsptr[7];
 80131a8:	f855 0c04 	ldr.w	r0, [r5, #-4]
    tmp24 = tmp11 - tmp3;
 80131ac:	9308      	str	r3, [sp, #32]
    tmp11 = z1 + z3;
 80131ae:	eb02 0907 	add.w	r9, r2, r7
    z2 = (INT32) wsptr[3];
 80131b2:	f855 3c14 	ldr.w	r3, [r5, #-20]
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 80131b6:	eb02 0e00 	add.w	lr, r2, r0
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 80131ba:	eba2 0c00 	sub.w	ip, r2, r0
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 80131be:	18d6      	adds	r6, r2, r3
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 80131c0:	eba2 0b03 	sub.w	fp, r2, r3
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 80131c4:	4374      	muls	r4, r6
    tmp0  = tmp1 + tmp2 + tmp3 -
 80131c6:	4e1d      	ldr	r6, [pc, #116]	; (801323c <jpeg_idct_16x16+0x3c4>)
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 80131c8:	9409      	str	r4, [sp, #36]	; 0x24
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 80131ca:	f242 74e9 	movw	r4, #10217	; 0x27e9
 80131ce:	fb04 fa09 	mul.w	sl, r4, r9
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 80131d2:	f242 24fc 	movw	r4, #8956	; 0x22fc
 80131d6:	fb04 fe0e 	mul.w	lr, r4, lr
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 80131da:	f641 44b6 	movw	r4, #7350	; 0x1cb6
 80131de:	fb04 fc0c 	mul.w	ip, r4, ip
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
 80131e2:	f241 5455 	movw	r4, #5461	; 0x1555
 80131e6:	fb04 f909 	mul.w	r9, r4, r9
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 80131ea:	f640 5423 	movw	r4, #3363	; 0xd23
 80131ee:	fb04 fb0b 	mul.w	fp, r4, fp
    tmp0  = tmp1 + tmp2 + tmp3 -
 80131f2:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80131f4:	4454      	add	r4, sl
 80131f6:	4474      	add	r4, lr
 80131f8:	fb06 4402 	mla	r4, r6, r2, r4
    tmp13 = tmp10 + tmp11 + tmp12 -
 80131fc:	f606 666c 	addw	r6, r6, #3692	; 0xe6c
    tmp0  = tmp1 + tmp2 + tmp3 -
 8013200:	940a      	str	r4, [sp, #40]	; 0x28
    tmp13 = tmp10 + tmp11 + tmp12 -
 8013202:	eb0c 0409 	add.w	r4, ip, r9
 8013206:	445c      	add	r4, fp
 8013208:	fb06 4202 	mla	r2, r6, r2, r4
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 801320c:	19dc      	adds	r4, r3, r7
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
 801320e:	9e09      	ldr	r6, [sp, #36]	; 0x24
    tmp13 = tmp10 + tmp11 + tmp12 -
 8013210:	920b      	str	r2, [sp, #44]	; 0x2c
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 8013212:	f44f 628e 	mov.w	r2, #1136	; 0x470
 8013216:	4354      	muls	r4, r2
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
 8013218:	f240 224d 	movw	r2, #589	; 0x24d
 801321c:	fb02 4203 	mla	r2, r2, r3, r4
 8013220:	4416      	add	r6, r2
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 8013222:	4a09      	ldr	r2, [pc, #36]	; (8013248 <jpeg_idct_16x16+0x3d0>)
 8013224:	fb02 4407 	mla	r4, r2, r7, r4
 8013228:	eb04 020a 	add.w	r2, r4, sl
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 801322c:	f642 5a09 	movw	sl, #11529	; 0x2d09
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8013230:	4c04      	ldr	r4, [pc, #16]	; (8013244 <jpeg_idct_16x16+0x3cc>)
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 8013232:	9209      	str	r2, [sp, #36]	; 0x24
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 8013234:	1afa      	subs	r2, r7, r3
 8013236:	e00d      	b.n	8013254 <jpeg_idct_16x16+0x3dc>
 8013238:	ffffecc2 	.word	0xffffecc2
 801323c:	ffffb6d6 	.word	0xffffb6d6
 8013240:	ffffc542 	.word	0xffffc542
 8013244:	ffffe77a 	.word	0xffffe77a
 8013248:	ffffdbfa 	.word	0xffffdbfa
 801324c:	ffffeaab 	.word	0xffffeaab
 8013250:	ffffd817 	.word	0xffffd817
 8013254:	fb0a f202 	mul.w	r2, sl, r2
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8013258:	fb04 2a07 	mla	sl, r4, r7, r2
    tmp2  += z2;
 801325c:	9c09      	ldr	r4, [sp, #36]	; 0x24
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 801325e:	44d1      	add	r9, sl
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 8013260:	f643 7a1a 	movw	sl, #16154	; 0x3f1a
 8013264:	fb0a 2a03 	mla	sl, sl, r3, r2
    z2    += z4;
 8013268:	4403      	add	r3, r0
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 801326a:	4a4f      	ldr	r2, [pc, #316]	; (80133a8 <jpeg_idct_16x16+0x530>)
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 801326c:	44da      	add	sl, fp
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 801326e:	f242 2b18 	movw	fp, #8728	; 0x2218
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 8013272:	435a      	muls	r2, r3
    tmp1  += z1;
 8013274:	4416      	add	r6, r2
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 8013276:	fb0b 2200 	mla	r2, fp, r0, r2
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 801327a:	f246 4b85 	movw	fp, #25733	; 0x6485
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 801327e:	4496      	add	lr, r2
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
 8013280:	4a4a      	ldr	r2, [pc, #296]	; (80133ac <jpeg_idct_16x16+0x534>)
 8013282:	4353      	muls	r3, r2
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8013284:	fb0b 3b00 	mla	fp, fp, r0, r3
    tmp12 += z2;
 8013288:	449a      	add	sl, r3
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 801328a:	f46f 7359 	mvn.w	r3, #868	; 0x364
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 801328e:	44dc      	add	ip, fp
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8013290:	eb07 0b00 	add.w	fp, r7, r0
 8013294:	441a      	add	r2, r3
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 8013296:	1bc0      	subs	r0, r0, r7
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 8013298:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 801329a:	fb02 fb0b 	mul.w	fp, r2, fp
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 801329e:	f640 5223 	movw	r2, #3363	; 0xd23
 80132a2:	4350      	muls	r0, r2
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 80132a4:	9a01      	ldr	r2, [sp, #4]
    tmp2  += z2;
 80132a6:	445c      	add	r4, fp
    tmp3  += z2;
 80132a8:	44de      	add	lr, fp
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 80132aa:	443a      	add	r2, r7
 80132ac:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    tmp10 += z2;
 80132ae:	4484      	add	ip, r0
    tmp11 += z2;
 80132b0:	4448      	add	r0, r9
			     & RANGE_MASK];
 80132b2:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 80132b6:	f818 2002 	ldrb.w	r2, [r8, r2]
 80132ba:	9b98      	ldr	r3, [sp, #608]	; 0x260
 80132bc:	54fa      	strb	r2, [r7, r3]
    outptr[15] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp0,
 80132be:	9b01      	ldr	r3, [sp, #4]
 80132c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80132c2:	1a9a      	subs	r2, r3, r2
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp1,
 80132c4:	9b03      	ldr	r3, [sp, #12]
			     & RANGE_MASK];
 80132c6:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[15] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp0,
 80132ca:	f818 2002 	ldrb.w	r2, [r8, r2]
 80132ce:	73ca      	strb	r2, [r1, #15]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp1,
 80132d0:	199a      	adds	r2, r3, r6
    outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp1,
 80132d2:	1b9e      	subs	r6, r3, r6
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp2,
 80132d4:	9b05      	ldr	r3, [sp, #20]
			     & RANGE_MASK];
 80132d6:	f3c2 4289 	ubfx	r2, r2, #18, #10
			     & RANGE_MASK];
 80132da:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp1,
 80132de:	f818 2002 	ldrb.w	r2, [r8, r2]
 80132e2:	704a      	strb	r2, [r1, #1]
    outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp1,
 80132e4:	f818 2006 	ldrb.w	r2, [r8, r6]
 80132e8:	738a      	strb	r2, [r1, #14]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp2,
 80132ea:	191a      	adds	r2, r3, r4
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp2,
 80132ec:	1b1c      	subs	r4, r3, r4
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp3,
 80132ee:	9b07      	ldr	r3, [sp, #28]
			     & RANGE_MASK];
 80132f0:	f3c2 4289 	ubfx	r2, r2, #18, #10
			     & RANGE_MASK];
 80132f4:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp2,
 80132f8:	f818 2002 	ldrb.w	r2, [r8, r2]
 80132fc:	708a      	strb	r2, [r1, #2]
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp2,
 80132fe:	f818 2004 	ldrb.w	r2, [r8, r4]
 8013302:	734a      	strb	r2, [r1, #13]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp3,
 8013304:	eb03 020e 	add.w	r2, r3, lr
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp3,
 8013308:	eba3 0e0e 	sub.w	lr, r3, lr
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp10,
 801330c:	9b08      	ldr	r3, [sp, #32]
			     & RANGE_MASK];
 801330e:	f3c2 4289 	ubfx	r2, r2, #18, #10
			     & RANGE_MASK];
 8013312:	f3ce 4e89 	ubfx	lr, lr, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp3,
 8013316:	f818 2002 	ldrb.w	r2, [r8, r2]
 801331a:	70ca      	strb	r2, [r1, #3]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp3,
 801331c:	f818 200e 	ldrb.w	r2, [r8, lr]
 8013320:	730a      	strb	r2, [r1, #12]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp10,
 8013322:	eb03 020c 	add.w	r2, r3, ip
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp10,
 8013326:	eba3 0c0c 	sub.w	ip, r3, ip
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp11,
 801332a:	9b06      	ldr	r3, [sp, #24]
			     & RANGE_MASK];
 801332c:	f3c2 4289 	ubfx	r2, r2, #18, #10
			     & RANGE_MASK];
 8013330:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp10,
 8013334:	f818 2002 	ldrb.w	r2, [r8, r2]
 8013338:	710a      	strb	r2, [r1, #4]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp10,
 801333a:	f818 200c 	ldrb.w	r2, [r8, ip]
 801333e:	72ca      	strb	r2, [r1, #11]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp11,
 8013340:	181a      	adds	r2, r3, r0
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp11,
 8013342:	1a18      	subs	r0, r3, r0
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp12,
 8013344:	9b04      	ldr	r3, [sp, #16]
			     & RANGE_MASK];
 8013346:	f3c2 4289 	ubfx	r2, r2, #18, #10
			     & RANGE_MASK];
 801334a:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp11,
 801334e:	f818 2002 	ldrb.w	r2, [r8, r2]
 8013352:	714a      	strb	r2, [r1, #5]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp11,
 8013354:	f818 2000 	ldrb.w	r2, [r8, r0]
 8013358:	728a      	strb	r2, [r1, #10]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp12,
 801335a:	eb03 020a 	add.w	r2, r3, sl
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp12,
 801335e:	eba3 030a 	sub.w	r3, r3, sl
			     & RANGE_MASK];
 8013362:	f3c2 4289 	ubfx	r2, r2, #18, #10
			     & RANGE_MASK];
 8013366:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp12,
 801336a:	f818 2002 	ldrb.w	r2, [r8, r2]
 801336e:	718a      	strb	r2, [r1, #6]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp12,
 8013370:	f818 3003 	ldrb.w	r3, [r8, r3]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27 + tmp13,
 8013374:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp12,
 8013376:	724b      	strb	r3, [r1, #9]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27 + tmp13,
 8013378:	9b02      	ldr	r3, [sp, #8]
 801337a:	4413      	add	r3, r2
			     & RANGE_MASK];
 801337c:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27 + tmp13,
 8013380:	f818 3003 	ldrb.w	r3, [r8, r3]
 8013384:	71cb      	strb	r3, [r1, #7]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp27 - tmp13,
 8013386:	9b02      	ldr	r3, [sp, #8]
 8013388:	eba3 0e02 	sub.w	lr, r3, r2
  for (ctr = 0; ctr < 16; ctr++) {
 801338c:	9a00      	ldr	r2, [sp, #0]
			     & RANGE_MASK];
 801338e:	f3ce 4e89 	ubfx	lr, lr, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp27 - tmp13,
 8013392:	f818 300e 	ldrb.w	r3, [r8, lr]
 8013396:	720b      	strb	r3, [r1, #8]
  for (ctr = 0; ctr < 16; ctr++) {
 8013398:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801339a:	4293      	cmp	r3, r2
 801339c:	f47f aeb2 	bne.w	8013104 <jpeg_idct_16x16+0x28c>
  }
}
 80133a0:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 80133a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80133a8:	ffffeaab 	.word	0xffffeaab
 80133ac:	ffffd817 	.word	0xffffd817

080133b0 <jpeg_idct_16x8>:

GLOBAL(void)
jpeg_idct_16x8 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80133b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80133b4:	b0cf      	sub	sp, #316	; 0x13c
  /* Pass 1: process columns from input, store into work array. */
  /* Note results are scaled up by sqrt(8) compared to a true IDCT; */
  /* furthermore, we scale the results by 2**PASS1_BITS. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 80133b6:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 80133b8:	3a02      	subs	r2, #2
{
 80133ba:	9303      	str	r3, [sp, #12]
  wsptr = workspace;
 80133bc:	a90e      	add	r1, sp, #56	; 0x38
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80133be:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 80133c2:	f103 0880 	add.w	r8, r3, #128	; 0x80
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 80133c6:	f105 0320 	add.w	r3, r5, #32
 80133ca:	9304      	str	r3, [sp, #16]
     * DC coefficient (with scale factor as needed).
     * With typical images and quantization tables, half or more of the
     * column DCT calculations can be simplified this way.
     */
    
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 80133cc:	f9b2 a012 	ldrsh.w	sl, [r2, #18]
      wsptr[DCTSIZE*6] = dcval;
      wsptr[DCTSIZE*7] = dcval;
      
      inptr++;			/* advance pointers to next column */
      quantptr++;
      wsptr++;
 80133d0:	3104      	adds	r1, #4
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 80133d2:	f9b2 b022 	ldrsh.w	fp, [r2, #34]	; 0x22
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 80133d6:	f9b2 e032 	ldrsh.w	lr, [r2, #50]	; 0x32
 80133da:	f9b2 c042 	ldrsh.w	ip, [r2, #66]	; 0x42
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 80133de:	f9b2 7052 	ldrsh.w	r7, [r2, #82]	; 0x52
 80133e2:	f9b2 6062 	ldrsh.w	r6, [r2, #98]	; 0x62
	inptr[DCTSIZE*7] == 0) {
 80133e6:	f9b2 9072 	ldrsh.w	r9, [r2, #114]	; 0x72
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 80133ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80133ee:	f932 4f02 	ldrsh.w	r4, [r2, #2]!
 80133f2:	435c      	muls	r4, r3
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 80133f4:	ea4a 030b 	orr.w	r3, sl, fp
 80133f8:	ea4e 0303 	orr.w	r3, lr, r3
 80133fc:	ea4c 0303 	orr.w	r3, ip, r3
 8013400:	433b      	orrs	r3, r7
 8013402:	4333      	orrs	r3, r6
 8013404:	ea59 0303 	orrs.w	r3, r9, r3
 8013408:	f040 8159 	bne.w	80136be <jpeg_idct_16x8+0x30e>
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 801340c:	00a4      	lsls	r4, r4, #2
      wsptr[DCTSIZE*0] = dcval;
 801340e:	f841 4c04 	str.w	r4, [r1, #-4]
      wsptr[DCTSIZE*1] = dcval;
 8013412:	61cc      	str	r4, [r1, #28]
      wsptr[DCTSIZE*2] = dcval;
 8013414:	63cc      	str	r4, [r1, #60]	; 0x3c
      wsptr[DCTSIZE*3] = dcval;
 8013416:	65cc      	str	r4, [r1, #92]	; 0x5c
      wsptr[DCTSIZE*4] = dcval;
 8013418:	67cc      	str	r4, [r1, #124]	; 0x7c
      wsptr[DCTSIZE*5] = dcval;
 801341a:	f8c1 409c 	str.w	r4, [r1, #156]	; 0x9c
      wsptr[DCTSIZE*6] = dcval;
 801341e:	f8c1 40bc 	str.w	r4, [r1, #188]	; 0xbc
      wsptr[DCTSIZE*7] = dcval;
 8013422:	f8c1 40dc 	str.w	r4, [r1, #220]	; 0xdc
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 8013426:	9b04      	ldr	r3, [sp, #16]
 8013428:	42ab      	cmp	r3, r5
 801342a:	d1cf      	bne.n	80133cc <jpeg_idct_16x8+0x1c>
 801342c:	9b03      	ldr	r3, [sp, #12]
  }

  /* Pass 2: process 8 rows from work array, store into output array.
   * 16-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/32).
   */
  wsptr = workspace;
 801342e:	ad0e      	add	r5, sp, #56	; 0x38
 8013430:	3b04      	subs	r3, #4
 8013432:	9300      	str	r3, [sp, #0]
 8013434:	9b03      	ldr	r3, [sp, #12]
 8013436:	331c      	adds	r3, #28
 8013438:	930d      	str	r3, [sp, #52]	; 0x34
  for (ctr = 0; ctr < 8; ctr++) {
    outptr = output_buf[ctr] + output_col;
 801343a:	9b00      	ldr	r3, [sp, #0]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp0 <<= CONST_BITS;

    z1 = (INT32) wsptr[4];
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 801343c:	f241 1051 	movw	r0, #4433	; 0x1151
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 8013440:	f642 14cf 	movw	r4, #10703	; 0x29cf
    tmp10 = tmp0 + tmp1;
    tmp11 = tmp0 - tmp1;
    tmp12 = tmp0 + tmp2;
    tmp13 = tmp0 - tmp2;

    z1 = (INT32) wsptr[2];
 8013444:	f8d5 9008 	ldr.w	r9, [r5, #8]
    outptr = output_buf[ctr] + output_col;
 8013448:	f853 2f04 	ldr.w	r2, [r3, #4]!
    z2 = (INT32) wsptr[6];
    z3 = z1 - z2;
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 801344c:	f642 4663 	movw	r6, #11363	; 0x2c63
    z2 = (INT32) wsptr[6];
 8013450:	f8d5 a018 	ldr.w	sl, [r5, #24]

    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 8013454:	f245 2703 	movw	r7, #20995	; 0x5203
    outptr = output_buf[ctr] + output_col;
 8013458:	920c      	str	r2, [sp, #48]	; 0x30
			     & RANGE_MASK];
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp27 - tmp13,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 801345a:	3520      	adds	r5, #32
    outptr = output_buf[ctr] + output_col;
 801345c:	9300      	str	r3, [sp, #0]
 801345e:	4613      	mov	r3, r2
 8013460:	9a58      	ldr	r2, [sp, #352]	; 0x160
 8013462:	1899      	adds	r1, r3, r2
    z1 = (INT32) wsptr[4];
 8013464:	f855 3c10 	ldr.w	r3, [r5, #-16]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8013468:	f855 2c20 	ldr.w	r2, [r5, #-32]
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 801346c:	435c      	muls	r4, r3
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801346e:	3210      	adds	r2, #16
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 8013470:	4343      	muls	r3, r0
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 8013472:	f640 00d4 	movw	r0, #2260	; 0x8d4
    tmp12 = tmp0 + tmp2;
 8013476:	eb03 3c42 	add.w	ip, r3, r2, lsl #13
    tmp13 = tmp0 - tmp2;
 801347a:	ebc3 3b42 	rsb	fp, r3, r2, lsl #13
    z3 = z1 - z2;
 801347e:	eba9 030a 	sub.w	r3, r9, sl
    tmp10 = tmp0 + tmp1;
 8013482:	eb04 3e42 	add.w	lr, r4, r2, lsl #13
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 8013486:	4358      	muls	r0, r3
    tmp11 = tmp0 - tmp1;
 8013488:	ebc4 3442 	rsb	r4, r4, r2, lsl #13
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 801348c:	4373      	muls	r3, r6
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 801348e:	4acf      	ldr	r2, [pc, #828]	; (80137cc <jpeg_idct_16x8+0x41c>)
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 8013490:	f641 46cd 	movw	r6, #7373	; 0x1ccd
    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 8013494:	fb07 370a 	mla	r7, r7, sl, r3
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 8013498:	fb02 3309 	mla	r3, r2, r9, r3
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 801349c:	f202 22ee 	addw	r2, r2, #750	; 0x2ee
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 80134a0:	fb06 0609 	mla	r6, r6, r9, r0
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 80134a4:	fb02 000a 	mla	r0, r2, sl, r0
    tmp20 = tmp10 + tmp0;
 80134a8:	eb0e 0207 	add.w	r2, lr, r7
 80134ac:	9201      	str	r2, [sp, #4]
    tmp27 = tmp10 - tmp0;
 80134ae:	ebae 0207 	sub.w	r2, lr, r7
    z3 = (INT32) wsptr[5];
 80134b2:	f855 7c0c 	ldr.w	r7, [r5, #-12]
    tmp27 = tmp10 - tmp0;
 80134b6:	9202      	str	r2, [sp, #8]
    tmp21 = tmp12 + tmp1;
 80134b8:	eb0c 0206 	add.w	r2, ip, r6
 80134bc:	9203      	str	r2, [sp, #12]
    tmp26 = tmp12 - tmp1;
 80134be:	ebac 0206 	sub.w	r2, ip, r6
 80134c2:	9204      	str	r2, [sp, #16]
    tmp22 = tmp13 + tmp2;
 80134c4:	eb0b 0203 	add.w	r2, fp, r3
    tmp25 = tmp13 - tmp2;
 80134c8:	ebab 0303 	sub.w	r3, fp, r3
    tmp22 = tmp13 + tmp2;
 80134cc:	9205      	str	r2, [sp, #20]
    tmp25 = tmp13 - tmp2;
 80134ce:	9306      	str	r3, [sp, #24]
    tmp23 = tmp11 + tmp3;
 80134d0:	1823      	adds	r3, r4, r0
    z1 = (INT32) wsptr[1];
 80134d2:	f855 2c1c 	ldr.w	r2, [r5, #-28]
    tmp23 = tmp11 + tmp3;
 80134d6:	9307      	str	r3, [sp, #28]
    tmp24 = tmp11 - tmp3;
 80134d8:	1a23      	subs	r3, r4, r0
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 80134da:	f642 344e 	movw	r4, #11086	; 0x2b4e
    z4 = (INT32) wsptr[7];
 80134de:	f855 0c04 	ldr.w	r0, [r5, #-4]
    tmp24 = tmp11 - tmp3;
 80134e2:	9308      	str	r3, [sp, #32]
    tmp11 = z1 + z3;
 80134e4:	eb02 0907 	add.w	r9, r2, r7
    z2 = (INT32) wsptr[3];
 80134e8:	f855 3c14 	ldr.w	r3, [r5, #-20]
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 80134ec:	eb02 0e00 	add.w	lr, r2, r0
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 80134f0:	eba2 0c00 	sub.w	ip, r2, r0
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 80134f4:	18d6      	adds	r6, r2, r3
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 80134f6:	eba2 0b03 	sub.w	fp, r2, r3
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 80134fa:	4374      	muls	r4, r6
    tmp0  = tmp1 + tmp2 + tmp3 -
 80134fc:	4eb4      	ldr	r6, [pc, #720]	; (80137d0 <jpeg_idct_16x8+0x420>)
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 80134fe:	9409      	str	r4, [sp, #36]	; 0x24
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 8013500:	f242 74e9 	movw	r4, #10217	; 0x27e9
 8013504:	fb04 fa09 	mul.w	sl, r4, r9
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 8013508:	f242 24fc 	movw	r4, #8956	; 0x22fc
 801350c:	fb04 fe0e 	mul.w	lr, r4, lr
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 8013510:	f641 44b6 	movw	r4, #7350	; 0x1cb6
 8013514:	fb04 fc0c 	mul.w	ip, r4, ip
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
 8013518:	f241 5455 	movw	r4, #5461	; 0x1555
 801351c:	fb04 f909 	mul.w	r9, r4, r9
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8013520:	f640 5423 	movw	r4, #3363	; 0xd23
 8013524:	fb04 fb0b 	mul.w	fp, r4, fp
    tmp0  = tmp1 + tmp2 + tmp3 -
 8013528:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801352a:	4454      	add	r4, sl
 801352c:	4474      	add	r4, lr
 801352e:	fb06 4402 	mla	r4, r6, r2, r4
    tmp13 = tmp10 + tmp11 + tmp12 -
 8013532:	f606 666c 	addw	r6, r6, #3692	; 0xe6c
    tmp0  = tmp1 + tmp2 + tmp3 -
 8013536:	940a      	str	r4, [sp, #40]	; 0x28
    tmp13 = tmp10 + tmp11 + tmp12 -
 8013538:	eb0c 0409 	add.w	r4, ip, r9
 801353c:	445c      	add	r4, fp
 801353e:	fb06 4202 	mla	r2, r6, r2, r4
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 8013542:	19dc      	adds	r4, r3, r7
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
 8013544:	9e09      	ldr	r6, [sp, #36]	; 0x24
    tmp13 = tmp10 + tmp11 + tmp12 -
 8013546:	920b      	str	r2, [sp, #44]	; 0x2c
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 8013548:	f44f 628e 	mov.w	r2, #1136	; 0x470
 801354c:	4354      	muls	r4, r2
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
 801354e:	f240 224d 	movw	r2, #589	; 0x24d
 8013552:	fb02 4203 	mla	r2, r2, r3, r4
 8013556:	4416      	add	r6, r2
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 8013558:	4a9e      	ldr	r2, [pc, #632]	; (80137d4 <jpeg_idct_16x8+0x424>)
 801355a:	fb02 4407 	mla	r4, r2, r7, r4
 801355e:	eb04 020a 	add.w	r2, r4, sl
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 8013562:	f642 5a09 	movw	sl, #11529	; 0x2d09
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8013566:	4c9c      	ldr	r4, [pc, #624]	; (80137d8 <jpeg_idct_16x8+0x428>)
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 8013568:	9209      	str	r2, [sp, #36]	; 0x24
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 801356a:	1afa      	subs	r2, r7, r3
 801356c:	fb0a f202 	mul.w	r2, sl, r2
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8013570:	fb04 2a07 	mla	sl, r4, r7, r2
    tmp2  += z2;
 8013574:	9c09      	ldr	r4, [sp, #36]	; 0x24
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8013576:	44d1      	add	r9, sl
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 8013578:	f643 7a1a 	movw	sl, #16154	; 0x3f1a
 801357c:	fb0a 2a03 	mla	sl, sl, r3, r2
    z2    += z4;
 8013580:	4403      	add	r3, r0
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 8013582:	4a96      	ldr	r2, [pc, #600]	; (80137dc <jpeg_idct_16x8+0x42c>)
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 8013584:	44da      	add	sl, fp
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 8013586:	f242 2b18 	movw	fp, #8728	; 0x2218
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 801358a:	435a      	muls	r2, r3
    tmp1  += z1;
 801358c:	4416      	add	r6, r2
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 801358e:	fb0b 2200 	mla	r2, fp, r0, r2
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8013592:	f246 4b85 	movw	fp, #25733	; 0x6485
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 8013596:	4496      	add	lr, r2
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
 8013598:	4a91      	ldr	r2, [pc, #580]	; (80137e0 <jpeg_idct_16x8+0x430>)
 801359a:	4353      	muls	r3, r2
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 801359c:	fb0b 3b00 	mla	fp, fp, r0, r3
    tmp12 += z2;
 80135a0:	449a      	add	sl, r3
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 80135a2:	f46f 7359 	mvn.w	r3, #868	; 0x364
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 80135a6:	44dc      	add	ip, fp
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 80135a8:	eb07 0b00 	add.w	fp, r7, r0
 80135ac:	441a      	add	r2, r3
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 80135ae:	1bc0      	subs	r0, r0, r7
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 80135b0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 80135b2:	fb02 fb0b 	mul.w	fp, r2, fp
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 80135b6:	f640 5223 	movw	r2, #3363	; 0xd23
 80135ba:	4350      	muls	r0, r2
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 80135bc:	9a01      	ldr	r2, [sp, #4]
    tmp2  += z2;
 80135be:	445c      	add	r4, fp
    tmp3  += z2;
 80135c0:	44de      	add	lr, fp
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 80135c2:	443a      	add	r2, r7
 80135c4:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    tmp10 += z2;
 80135c6:	4484      	add	ip, r0
    tmp11 += z2;
 80135c8:	4448      	add	r0, r9
			     & RANGE_MASK];
 80135ca:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 80135ce:	f818 2002 	ldrb.w	r2, [r8, r2]
 80135d2:	9b58      	ldr	r3, [sp, #352]	; 0x160
 80135d4:	54fa      	strb	r2, [r7, r3]
    outptr[15] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp0,
 80135d6:	9b01      	ldr	r3, [sp, #4]
 80135d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80135da:	1a9a      	subs	r2, r3, r2
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp1,
 80135dc:	9b03      	ldr	r3, [sp, #12]
			     & RANGE_MASK];
 80135de:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[15] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp0,
 80135e2:	f818 2002 	ldrb.w	r2, [r8, r2]
 80135e6:	73ca      	strb	r2, [r1, #15]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp1,
 80135e8:	199a      	adds	r2, r3, r6
    outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp1,
 80135ea:	1b9e      	subs	r6, r3, r6
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp2,
 80135ec:	9b05      	ldr	r3, [sp, #20]
			     & RANGE_MASK];
 80135ee:	f3c2 4289 	ubfx	r2, r2, #18, #10
			     & RANGE_MASK];
 80135f2:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp1,
 80135f6:	f818 2002 	ldrb.w	r2, [r8, r2]
 80135fa:	704a      	strb	r2, [r1, #1]
    outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp1,
 80135fc:	f818 2006 	ldrb.w	r2, [r8, r6]
 8013600:	738a      	strb	r2, [r1, #14]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp2,
 8013602:	191a      	adds	r2, r3, r4
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp2,
 8013604:	1b1c      	subs	r4, r3, r4
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp3,
 8013606:	9b07      	ldr	r3, [sp, #28]
			     & RANGE_MASK];
 8013608:	f3c2 4289 	ubfx	r2, r2, #18, #10
			     & RANGE_MASK];
 801360c:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp2,
 8013610:	f818 2002 	ldrb.w	r2, [r8, r2]
 8013614:	708a      	strb	r2, [r1, #2]
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp2,
 8013616:	f818 2004 	ldrb.w	r2, [r8, r4]
 801361a:	734a      	strb	r2, [r1, #13]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp3,
 801361c:	eb03 020e 	add.w	r2, r3, lr
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp3,
 8013620:	eba3 0e0e 	sub.w	lr, r3, lr
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp10,
 8013624:	9b08      	ldr	r3, [sp, #32]
			     & RANGE_MASK];
 8013626:	f3c2 4289 	ubfx	r2, r2, #18, #10
			     & RANGE_MASK];
 801362a:	f3ce 4e89 	ubfx	lr, lr, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp3,
 801362e:	f818 2002 	ldrb.w	r2, [r8, r2]
 8013632:	70ca      	strb	r2, [r1, #3]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp3,
 8013634:	f818 200e 	ldrb.w	r2, [r8, lr]
 8013638:	730a      	strb	r2, [r1, #12]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp10,
 801363a:	eb03 020c 	add.w	r2, r3, ip
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp10,
 801363e:	eba3 0c0c 	sub.w	ip, r3, ip
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp11,
 8013642:	9b06      	ldr	r3, [sp, #24]
			     & RANGE_MASK];
 8013644:	f3c2 4289 	ubfx	r2, r2, #18, #10
			     & RANGE_MASK];
 8013648:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp10,
 801364c:	f818 2002 	ldrb.w	r2, [r8, r2]
 8013650:	710a      	strb	r2, [r1, #4]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp10,
 8013652:	f818 200c 	ldrb.w	r2, [r8, ip]
 8013656:	72ca      	strb	r2, [r1, #11]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp11,
 8013658:	181a      	adds	r2, r3, r0
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp11,
 801365a:	1a18      	subs	r0, r3, r0
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp12,
 801365c:	9b04      	ldr	r3, [sp, #16]
			     & RANGE_MASK];
 801365e:	f3c2 4289 	ubfx	r2, r2, #18, #10
			     & RANGE_MASK];
 8013662:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp11,
 8013666:	f818 2002 	ldrb.w	r2, [r8, r2]
 801366a:	714a      	strb	r2, [r1, #5]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp11,
 801366c:	f818 2000 	ldrb.w	r2, [r8, r0]
 8013670:	728a      	strb	r2, [r1, #10]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp12,
 8013672:	eb03 020a 	add.w	r2, r3, sl
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp12,
 8013676:	eba3 030a 	sub.w	r3, r3, sl
			     & RANGE_MASK];
 801367a:	f3c2 4289 	ubfx	r2, r2, #18, #10
			     & RANGE_MASK];
 801367e:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp12,
 8013682:	f818 2002 	ldrb.w	r2, [r8, r2]
 8013686:	718a      	strb	r2, [r1, #6]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp12,
 8013688:	f818 3003 	ldrb.w	r3, [r8, r3]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27 + tmp13,
 801368c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp12,
 801368e:	724b      	strb	r3, [r1, #9]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27 + tmp13,
 8013690:	9b02      	ldr	r3, [sp, #8]
 8013692:	4413      	add	r3, r2
			     & RANGE_MASK];
 8013694:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27 + tmp13,
 8013698:	f818 3003 	ldrb.w	r3, [r8, r3]
 801369c:	71cb      	strb	r3, [r1, #7]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp27 - tmp13,
 801369e:	9b02      	ldr	r3, [sp, #8]
 80136a0:	eba3 0e02 	sub.w	lr, r3, r2
  for (ctr = 0; ctr < 8; ctr++) {
 80136a4:	9a00      	ldr	r2, [sp, #0]
			     & RANGE_MASK];
 80136a6:	f3ce 4e89 	ubfx	lr, lr, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp27 - tmp13,
 80136aa:	f818 300e 	ldrb.w	r3, [r8, lr]
 80136ae:	720b      	strb	r3, [r1, #8]
  for (ctr = 0; ctr < 8; ctr++) {
 80136b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80136b2:	4293      	cmp	r3, r2
 80136b4:	f47f aec1 	bne.w	801343a <jpeg_idct_16x8+0x8a>
  }
}
 80136b8:	b04f      	add	sp, #316	; 0x13c
 80136ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80136be:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 80136c0:	fb00 fb0b 	mul.w	fp, r0, fp
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80136c4:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
 80136c8:	4370      	muls	r0, r6
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 80136ca:	f241 1651 	movw	r6, #4433	; 0x1151
 80136ce:	eb0b 0300 	add.w	r3, fp, r0
 80136d2:	4373      	muls	r3, r6
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 80136d4:	f641 067e 	movw	r6, #6270	; 0x187e
 80136d8:	fb06 3b0b 	mla	fp, r6, fp, r3
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 80136dc:	4e41      	ldr	r6, [pc, #260]	; (80137e4 <jpeg_idct_16x8+0x434>)
 80136de:	fb06 3600 	mla	r6, r6, r0, r3
    z2 <<= CONST_BITS;
 80136e2:	0363      	lsls	r3, r4, #13
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80136e4:	6fe8      	ldr	r0, [r5, #124]	; 0x7c
    z2 += ONE << (CONST_BITS-PASS1_BITS-1);
 80136e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80136ea:	fb00 f00c 	mul.w	r0, r0, ip
    tmp0 = z2 + z3;
 80136ee:	eb03 3440 	add.w	r4, r3, r0, lsl #13
    tmp1 = z2 - z3;
 80136f2:	eba3 3340 	sub.w	r3, r3, r0, lsl #13
    tmp13 = tmp0 - tmp2;
 80136f6:	eba4 000b 	sub.w	r0, r4, fp
    tmp10 = tmp0 + tmp2;
 80136fa:	eb0b 0c04 	add.w	ip, fp, r4
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80136fe:	69ec      	ldr	r4, [r5, #28]
    tmp13 = tmp0 - tmp2;
 8013700:	9000      	str	r0, [sp, #0]
    tmp11 = tmp1 + tmp3;
 8013702:	18f0      	adds	r0, r6, r3
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013704:	fb04 fa0a 	mul.w	sl, r4, sl
    tmp12 = tmp1 - tmp3;
 8013708:	1b9b      	subs	r3, r3, r6
    tmp11 = tmp1 + tmp3;
 801370a:	9001      	str	r0, [sp, #4]
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 801370c:	f8d5 00dc 	ldr.w	r0, [r5, #220]	; 0xdc
    tmp12 = tmp1 - tmp3;
 8013710:	9302      	str	r3, [sp, #8]
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 8013712:	f242 53a1 	movw	r3, #9633	; 0x25a1
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8013716:	fb00 f909 	mul.w	r9, r0, r9
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801371a:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
 801371e:	4347      	muls	r7, r0
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8013720:	6de8      	ldr	r0, [r5, #92]	; 0x5c
 8013722:	fb00 fe0e 	mul.w	lr, r0, lr
    z3 = tmp1 + tmp3;
 8013726:	eb07 040a 	add.w	r4, r7, sl
    z2 = tmp0 + tmp2;
 801372a:	eb09 060e 	add.w	r6, r9, lr
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 801372e:	1930      	adds	r0, r6, r4
 8013730:	4358      	muls	r0, r3
    z2 += z1;
 8013732:	4b2d      	ldr	r3, [pc, #180]	; (80137e8 <jpeg_idct_16x8+0x438>)
 8013734:	fb03 0606 	mla	r6, r3, r6, r0
    z3 += z1;
 8013738:	4b2c      	ldr	r3, [pc, #176]	; (80137ec <jpeg_idct_16x8+0x43c>)
 801373a:	fb03 0004 	mla	r0, r3, r4, r0
    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 801373e:	eb09 040a 	add.w	r4, r9, sl
 8013742:	4b2b      	ldr	r3, [pc, #172]	; (80137f0 <jpeg_idct_16x8+0x440>)
 8013744:	435c      	muls	r4, r3
    tmp0 += z1 + z2;
 8013746:	f640 138e 	movw	r3, #2446	; 0x98e
 801374a:	eb06 0b04 	add.w	fp, r6, r4
    tmp3 += z1 + z3;
 801374e:	4404      	add	r4, r0
    tmp0 += z1 + z2;
 8013750:	fb03 b909 	mla	r9, r3, r9, fp
    tmp3 += z1 + z3;
 8013754:	f243 0b0b 	movw	fp, #12299	; 0x300b
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8013758:	4b26      	ldr	r3, [pc, #152]	; (80137f4 <jpeg_idct_16x8+0x444>)
    tmp3 += z1 + z3;
 801375a:	fb0b 440a 	mla	r4, fp, sl, r4
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 801375e:	eb07 0a0e 	add.w	sl, r7, lr
    tmp1 += z1 + z3;
 8013762:	f244 1bb3 	movw	fp, #16819	; 0x41b3
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8013766:	fb03 fa0a 	mul.w	sl, r3, sl
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 801376a:	9b01      	ldr	r3, [sp, #4]
    tmp2 += z1 + z2;
 801376c:	4456      	add	r6, sl
    tmp1 += z1 + z3;
 801376e:	4450      	add	r0, sl
    tmp2 += z1 + z2;
 8013770:	f246 2a54 	movw	sl, #25172	; 0x6254
    tmp1 += z1 + z3;
 8013774:	fb0b 0007 	mla	r0, fp, r7, r0
    tmp2 += z1 + z2;
 8013778:	fb0a 6a0e 	mla	sl, sl, lr, r6
    wsptr[DCTSIZE*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 801377c:	eb0c 0604 	add.w	r6, ip, r4
    wsptr[DCTSIZE*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 8013780:	ebac 0404 	sub.w	r4, ip, r4
    wsptr[DCTSIZE*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 8013784:	12f6      	asrs	r6, r6, #11
    wsptr[DCTSIZE*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 8013786:	12e4      	asrs	r4, r4, #11
    wsptr[DCTSIZE*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 8013788:	f841 6c04 	str.w	r6, [r1, #-4]
    wsptr[DCTSIZE*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 801378c:	f8c1 40dc 	str.w	r4, [r1, #220]	; 0xdc
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 8013790:	eb03 040a 	add.w	r4, r3, sl
    wsptr[DCTSIZE*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 8013794:	eba3 0a0a 	sub.w	sl, r3, sl
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 8013798:	9b02      	ldr	r3, [sp, #8]
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 801379a:	12e4      	asrs	r4, r4, #11
    wsptr[DCTSIZE*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 801379c:	ea4f 27ea 	mov.w	r7, sl, asr #11
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 80137a0:	61cc      	str	r4, [r1, #28]
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 80137a2:	181c      	adds	r4, r3, r0
    wsptr[DCTSIZE*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 80137a4:	1a18      	subs	r0, r3, r0
    wsptr[DCTSIZE*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 80137a6:	9b00      	ldr	r3, [sp, #0]
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 80137a8:	12e4      	asrs	r4, r4, #11
    wsptr[DCTSIZE*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 80137aa:	f8c1 70bc 	str.w	r7, [r1, #188]	; 0xbc
    wsptr[DCTSIZE*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 80137ae:	444b      	add	r3, r9
    wsptr[DCTSIZE*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 80137b0:	12c0      	asrs	r0, r0, #11
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 80137b2:	63cc      	str	r4, [r1, #60]	; 0x3c
    wsptr[DCTSIZE*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 80137b4:	12db      	asrs	r3, r3, #11
    wsptr[DCTSIZE*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 80137b6:	f8c1 009c 	str.w	r0, [r1, #156]	; 0x9c
    wsptr[DCTSIZE*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 80137ba:	65cb      	str	r3, [r1, #92]	; 0x5c
    wsptr[DCTSIZE*4] = (int) RIGHT_SHIFT(tmp13 - tmp0, CONST_BITS-PASS1_BITS);
 80137bc:	9b00      	ldr	r3, [sp, #0]
 80137be:	eba3 0909 	sub.w	r9, r3, r9
 80137c2:	ea4f 20e9 	mov.w	r0, r9, asr #11
 80137c6:	67c8      	str	r0, [r1, #124]	; 0x7c
    wsptr++;
 80137c8:	e62d      	b.n	8013426 <jpeg_idct_16x8+0x76>
 80137ca:	bf00      	nop
 80137cc:	ffffecc2 	.word	0xffffecc2
 80137d0:	ffffb6d6 	.word	0xffffb6d6
 80137d4:	ffffdbfa 	.word	0xffffdbfa
 80137d8:	ffffe77a 	.word	0xffffe77a
 80137dc:	ffffeaab 	.word	0xffffeaab
 80137e0:	ffffd817 	.word	0xffffd817
 80137e4:	ffffc4df 	.word	0xffffc4df
 80137e8:	ffffc13b 	.word	0xffffc13b
 80137ec:	fffff384 	.word	0xfffff384
 80137f0:	ffffe333 	.word	0xffffe333
 80137f4:	ffffadfd 	.word	0xffffadfd

080137f8 <jpeg_idct_14x7>:

GLOBAL(void)
jpeg_idct_14x7 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80137f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80137fc:	b0c5      	sub	sp, #276	; 0x114
 80137fe:	6d4e      	ldr	r6, [r1, #84]	; 0x54
 8013800:	f1a2 0c02 	sub.w	ip, r2, #2
 8013804:	320e      	adds	r2, #14
 8013806:	9302      	str	r3, [sp, #8]
 8013808:	3e04      	subs	r6, #4
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801380a:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
  /* Pass 1: process columns from input, store into work array.
   * 7-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/14).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 801380e:	f10d 0e30 	add.w	lr, sp, #48	; 0x30
 8013812:	9204      	str	r2, [sp, #16]
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8013814:	3380      	adds	r3, #128	; 0x80
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
    /* Even part */

    tmp23 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013816:	f93c 2f02 	ldrsh.w	r2, [ip, #2]!

    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);

    tmp20 = MULTIPLY(z2 - z3, FIX(0.881747734));       /* c4 */
 801381a:	f641 4037 	movw	r0, #7223	; 0x1c37
    tmp23 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801381e:	f856 1f04 	ldr.w	r1, [r6, #4]!
    tmp22 = MULTIPLY(z1 - z2, FIX(0.314692123));       /* c6 */
    tmp21 = tmp20 + tmp22 + tmp23 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
    tmp10 = z1 + z3;
    z2 -= tmp10;
    tmp10 = MULTIPLY(tmp10, FIX(1.274162392)) + tmp23; /* c2 */
 8013822:	f642 0ac6 	movw	sl, #10438	; 0x28c6
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013826:	f9bc 5020 	ldrsh.w	r5, [ip, #32]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801382a:	f10e 0e04 	add.w	lr, lr, #4
    tmp23 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801382e:	434a      	muls	r2, r1
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8013830:	f9bc 8040 	ldrsh.w	r8, [ip, #64]	; 0x40
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8013834:	f9bc 1060 	ldrsh.w	r1, [ip, #96]	; 0x60
    tmp23 <<= CONST_BITS;
 8013838:	0352      	lsls	r2, r2, #13
    tmp23 += ONE << (CONST_BITS-PASS1_BITS-1);
 801383a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801383e:	9200      	str	r2, [sp, #0]
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013840:	6c32      	ldr	r2, [r6, #64]	; 0x40
 8013842:	4355      	muls	r5, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8013844:	f8d6 2080 	ldr.w	r2, [r6, #128]	; 0x80
 8013848:	fb02 f808 	mul.w	r8, r2, r8
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801384c:	f8d6 20c0 	ldr.w	r2, [r6, #192]	; 0xc0
 8013850:	434a      	muls	r2, r1
    tmp20 = MULTIPLY(z2 - z3, FIX(0.881747734));       /* c4 */
 8013852:	eba8 0102 	sub.w	r1, r8, r2
 8013856:	fb00 f901 	mul.w	r9, r0, r1
    tmp22 = MULTIPLY(z1 - z2, FIX(0.314692123));       /* c6 */
 801385a:	eba5 0008 	sub.w	r0, r5, r8
 801385e:	f640 2112 	movw	r1, #2578	; 0xa12
 8013862:	fb01 f700 	mul.w	r7, r1, r0
    tmp21 = tmp20 + tmp22 + tmp23 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 8013866:	9900      	ldr	r1, [sp, #0]
    tmp10 = MULTIPLY(tmp10, FIX(1.274162392)) + tmp23; /* c2 */
 8013868:	18a8      	adds	r0, r5, r2
    tmp21 = tmp20 + tmp22 + tmp23 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 801386a:	eb09 0407 	add.w	r4, r9, r7
 801386e:	440c      	add	r4, r1
 8013870:	49ba      	ldr	r1, [pc, #744]	; (8013b5c <jpeg_idct_14x7+0x364>)
 8013872:	fb01 4408 	mla	r4, r1, r8, r4
    tmp10 = z1 + z3;
 8013876:	18a9      	adds	r1, r5, r2
 8013878:	9103      	str	r1, [sp, #12]
    tmp10 = MULTIPLY(tmp10, FIX(1.274162392)) + tmp23; /* c2 */
 801387a:	9900      	ldr	r1, [sp, #0]
 801387c:	fb0a 1000 	mla	r0, sl, r0, r1
    tmp20 += tmp10 - MULTIPLY(z3, FIX(0.077722536));   /* c2-c4-c6 */
 8013880:	f46f 711f 	mvn.w	r1, #636	; 0x27c
 8013884:	fb01 0102 	mla	r1, r1, r2, r0
 8013888:	eb01 0209 	add.w	r2, r1, r9

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801388c:	f9bc 9050 	ldrsh.w	r9, [ip, #80]	; 0x50

    tmp11 = MULTIPLY(z1 + z2, FIX(0.935414347));       /* (c3+c1-c5)/2 */
 8013890:	f641 51ef 	movw	r1, #7663	; 0x1def
    tmp20 += tmp10 - MULTIPLY(z3, FIX(0.077722536));   /* c2-c4-c6 */
 8013894:	9201      	str	r2, [sp, #4]
    tmp22 += tmp10 - MULTIPLY(z1, FIX(2.470602249));   /* c2+c4+c6 */
 8013896:	4ab2      	ldr	r2, [pc, #712]	; (8013b60 <jpeg_idct_14x7+0x368>)
 8013898:	fb02 0005 	mla	r0, r2, r5, r0
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801389c:	f9bc 5010 	ldrsh.w	r5, [ip, #16]
 80138a0:	6a32      	ldr	r2, [r6, #32]
    tmp22 += tmp10 - MULTIPLY(z1, FIX(2.470602249));   /* c2+c4+c6 */
 80138a2:	4438      	add	r0, r7
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80138a4:	f9bc 7030 	ldrsh.w	r7, [ip, #48]	; 0x30
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80138a8:	436a      	muls	r2, r5
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80138aa:	6e35      	ldr	r5, [r6, #96]	; 0x60
 80138ac:	437d      	muls	r5, r7
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80138ae:	f8d6 70a0 	ldr.w	r7, [r6, #160]	; 0xa0
 80138b2:	fb07 f709 	mul.w	r7, r7, r9
    tmp11 = MULTIPLY(z1 + z2, FIX(0.935414347));       /* (c3+c1-c5)/2 */
 80138b6:	eb02 0905 	add.w	r9, r2, r5
 80138ba:	fb01 fb09 	mul.w	fp, r1, r9
    tmp12 = MULTIPLY(z1 - z2, FIX(0.170262339));       /* (c3+c5-c1)/2 */
 80138be:	eba2 0905 	sub.w	r9, r2, r5
 80138c2:	f240 5173 	movw	r1, #1395	; 0x573
    tmp10 = tmp11 - tmp12;
    tmp11 += tmp12;
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
    tmp11 += tmp12;
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));          /* c5 */
 80138c6:	443a      	add	r2, r7
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
 80138c8:	443d      	add	r5, r7
    tmp12 = MULTIPLY(z1 - z2, FIX(0.170262339));       /* (c3+c5-c1)/2 */
 80138ca:	fb01 f909 	mul.w	r9, r1, r9
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
 80138ce:	49a5      	ldr	r1, [pc, #660]	; (8013b64 <jpeg_idct_14x7+0x36c>)
    tmp10 = tmp11 - tmp12;
 80138d0:	ebab 0a09 	sub.w	sl, fp, r9
    tmp11 += tmp12;
 80138d4:	44d9      	add	r9, fp
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));          /* c5 */
 80138d6:	f241 3ba3 	movw	fp, #5027	; 0x13a3
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
 80138da:	434d      	muls	r5, r1
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));          /* c5 */
 80138dc:	fb0b f202 	mul.w	r2, fp, r2
    tmp10 += z2;
    tmp12 += z2 + MULTIPLY(z3, FIX(1.870828693));      /* c3+c1-c5 */
 80138e0:	f643 3bde 	movw	fp, #15326	; 0x3bde
    tmp11 += tmp12;
 80138e4:	44a9      	add	r9, r5
    tmp10 += z2;
 80138e6:	4492      	add	sl, r2
    tmp12 += z2 + MULTIPLY(z3, FIX(1.870828693));      /* c3+c1-c5 */
 80138e8:	fb0b 2707 	mla	r7, fp, r7, r2

    /* Final output stage */

    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 80138ec:	9a01      	ldr	r2, [sp, #4]
    tmp12 += z2 + MULTIPLY(z3, FIX(1.870828693));      /* c3+c1-c5 */
 80138ee:	443d      	add	r5, r7
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 80138f0:	4452      	add	r2, sl
 80138f2:	12d2      	asrs	r2, r2, #11
 80138f4:	f84e 2c04 	str.w	r2, [lr, #-4]
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 80138f8:	9a01      	ldr	r2, [sp, #4]
 80138fa:	eba2 0a0a 	sub.w	sl, r2, sl
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 80138fe:	eb04 0209 	add.w	r2, r4, r9
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8013902:	eba4 0409 	sub.w	r4, r4, r9
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8013906:	12d2      	asrs	r2, r2, #11
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8013908:	ea4f 21ea 	mov.w	r1, sl, asr #11
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 801390c:	f8ce 201c 	str.w	r2, [lr, #28]
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8013910:	1942      	adds	r2, r0, r5
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8013912:	f8ce 10bc 	str.w	r1, [lr, #188]	; 0xbc
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8013916:	1b45      	subs	r5, r0, r5
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8013918:	12d2      	asrs	r2, r2, #11
    tmp23 += MULTIPLY(z2, FIX(1.414213562));           /* c0 */
 801391a:	9900      	ldr	r1, [sp, #0]
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 801391c:	12e4      	asrs	r4, r4, #11
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 801391e:	f8ce 203c 	str.w	r2, [lr, #60]	; 0x3c
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8013922:	12ed      	asrs	r5, r5, #11
    z2 -= tmp10;
 8013924:	9a03      	ldr	r2, [sp, #12]
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8013926:	f8ce 409c 	str.w	r4, [lr, #156]	; 0x9c
    z2 -= tmp10;
 801392a:	eba8 0802 	sub.w	r8, r8, r2
    tmp23 += MULTIPLY(z2, FIX(1.414213562));           /* c0 */
 801392e:	f642 5241 	movw	r2, #11585	; 0x2d41
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8013932:	f8ce 507c 	str.w	r5, [lr, #124]	; 0x7c
    tmp23 += MULTIPLY(z2, FIX(1.414213562));           /* c0 */
 8013936:	fb02 1808 	mla	r8, r2, r8, r1
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp23, CONST_BITS-PASS1_BITS);
 801393a:	ea4f 22e8 	mov.w	r2, r8, asr #11
 801393e:	f8ce 205c 	str.w	r2, [lr, #92]	; 0x5c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8013942:	9a04      	ldr	r2, [sp, #16]
 8013944:	4562      	cmp	r2, ip
 8013946:	f47f af66 	bne.w	8013816 <jpeg_idct_14x7+0x1e>
 801394a:	9a02      	ldr	r2, [sp, #8]
  }

  /* Pass 2: process 7 rows from work array, store into output array.
   * 14-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/28).
   */
  wsptr = workspace;
 801394c:	ac0c      	add	r4, sp, #48	; 0x30
 801394e:	3a04      	subs	r2, #4
 8013950:	9200      	str	r2, [sp, #0]
 8013952:	9a02      	ldr	r2, [sp, #8]
 8013954:	3218      	adds	r2, #24
 8013956:	920b      	str	r2, [sp, #44]	; 0x2c
  for (ctr = 0; ctr < 7; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8013958:	9a00      	ldr	r2, [sp, #0]
    /* Add fudge factor here for final descale. */
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    z1 <<= CONST_BITS;
    z4 = (INT32) wsptr[4];
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 801395a:	f640 2512 	movw	r5, #2578	; 0xa12
    z4 = (INT32) wsptr[4];
 801395e:	6927      	ldr	r7, [r4, #16]

    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */

    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 8013960:	f241 38a3 	movw	r8, #5027	; 0x13a3
    outptr = output_buf[ctr] + output_col;
 8013964:	f852 1f04 	ldr.w	r1, [r2, #4]!

    tmp14 = z1 + z3;
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
    tmp10 = tmp11 + tmp12 + z4 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 8013968:	f641 0b14 	movw	fp, #6164	; 0x1814
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801396c:	6820      	ldr	r0, [r4, #0]
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 801396e:	fb05 fe07 	mul.w	lr, r5, r7
    outptr = output_buf[ctr] + output_col;
 8013972:	910a      	str	r1, [sp, #40]	; 0x28
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 8013974:	f641 4537 	movw	r5, #7223	; 0x1c37
    outptr = output_buf[ctr] + output_col;
 8013978:	9200      	str	r2, [sp, #0]
 801397a:	460a      	mov	r2, r1
 801397c:	994e      	ldr	r1, [sp, #312]	; 0x138
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801397e:	3010      	adds	r0, #16
			     & RANGE_MASK];
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 8013980:	3420      	adds	r4, #32
    outptr = output_buf[ctr] + output_col;
 8013982:	1851      	adds	r1, r2, r1
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 8013984:	f642 02c6 	movw	r2, #10438	; 0x28c6
    tmp11 = z1 + z3;
 8013988:	eb0e 3640 	add.w	r6, lr, r0, lsl #13
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 801398c:	437a      	muls	r2, r7
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 801398e:	436f      	muls	r7, r5
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 8013990:	4d75      	ldr	r5, [pc, #468]	; (8013b68 <jpeg_idct_14x7+0x370>)
    tmp10 = z1 + z2;
 8013992:	eb02 3c40 	add.w	ip, r2, r0, lsl #13
    tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */
 8013996:	4472      	add	r2, lr
    z1 = (INT32) wsptr[2];
 8013998:	f854 ec18 	ldr.w	lr, [r4, #-24]
    tmp12 = z1 - z4;
 801399c:	ebc7 3940 	rsb	r9, r7, r0, lsl #13
    tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */
 80139a0:	1bd2      	subs	r2, r2, r7
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 80139a2:	f242 3762 	movw	r7, #9058	; 0x2362
    tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */
 80139a6:	0052      	lsls	r2, r2, #1
 80139a8:	ebc2 3240 	rsb	r2, r2, r0, lsl #13
 80139ac:	9201      	str	r2, [sp, #4]
    z2 = (INT32) wsptr[6];
 80139ae:	f854 2c08 	ldr.w	r2, [r4, #-8]
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 80139b2:	eb0e 0002 	add.w	r0, lr, r2
 80139b6:	4378      	muls	r0, r7
    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
 80139b8:	f640 07bd 	movw	r7, #2237	; 0x8bd
 80139bc:	fb07 070e 	mla	r7, r7, lr, r0
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 80139c0:	fb05 0002 	mla	r0, r5, r2, r0
	    MULTIPLY(z2, FIX(1.378756276));      /* c2 */
 80139c4:	f605 25e5 	addw	r5, r5, #2789	; 0xae5
 80139c8:	436a      	muls	r2, r5
    tmp20 = tmp10 + tmp13;
 80139ca:	eb0c 0507 	add.w	r5, ip, r7
 80139ce:	9502      	str	r5, [sp, #8]
    tmp26 = tmp10 - tmp13;
 80139d0:	ebac 0507 	sub.w	r5, ip, r7
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 80139d4:	fb08 220e 	mla	r2, r8, lr, r2
    z2 = (INT32) wsptr[3];
 80139d8:	f854 8c14 	ldr.w	r8, [r4, #-20]
    tmp26 = tmp10 - tmp13;
 80139dc:	9503      	str	r5, [sp, #12]
    tmp21 = tmp11 + tmp14;
 80139de:	1835      	adds	r5, r6, r0
    tmp25 = tmp11 - tmp14;
 80139e0:	1a30      	subs	r0, r6, r0
    z3 = (INT32) wsptr[5];
 80139e2:	f854 cc0c 	ldr.w	ip, [r4, #-12]
    tmp21 = tmp11 + tmp14;
 80139e6:	9504      	str	r5, [sp, #16]
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
 80139e8:	f640 6ef2 	movw	lr, #3826	; 0xef2
    tmp25 = tmp11 - tmp14;
 80139ec:	9005      	str	r0, [sp, #20]
    tmp22 = tmp12 + tmp15;
 80139ee:	eb09 0002 	add.w	r0, r9, r2
    tmp24 = tmp12 - tmp15;
 80139f2:	eba9 0202 	sub.w	r2, r9, r2
    z4 = (INT32) wsptr[7];
 80139f6:	f854 9c04 	ldr.w	r9, [r4, #-4]
    tmp22 = tmp12 + tmp15;
 80139fa:	9006      	str	r0, [sp, #24]
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 80139fc:	f642 20b7 	movw	r0, #10935	; 0x2ab7
    tmp24 = tmp12 - tmp15;
 8013a00:	9207      	str	r2, [sp, #28]
    z1 = (INT32) wsptr[1];
 8013a02:	f854 2c1c 	ldr.w	r2, [r4, #-28]
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 8013a06:	eb02 0a08 	add.w	sl, r2, r8
    tmp14 = z1 + z3;
 8013a0a:	eb02 060c 	add.w	r6, r2, ip
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 8013a0e:	fb00 fa0a 	mul.w	sl, r0, sl
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 8013a12:	f242 6052 	movw	r0, #9810	; 0x2652
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 8013a16:	fb0b fb06 	mul.w	fp, fp, r6
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 8013a1a:	fb00 f506 	mul.w	r5, r0, r6
    tmp10 = tmp11 + tmp12 + z4 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
 8013a1e:	4853      	ldr	r0, [pc, #332]	; (8013b6c <jpeg_idct_14x7+0x374>)
    tmp13 = MULTIPLY(z2 + z3, - FIX(0.158341681)) - z4;    /* -c13 */
 8013a20:	f46f 66a2 	mvn.w	r6, #1296	; 0x510
    tmp10 = tmp11 + tmp12 + z4 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
 8013a24:	eb0a 0705 	add.w	r7, sl, r5
 8013a28:	eb07 3749 	add.w	r7, r7, r9, lsl #13
 8013a2c:	fb00 7702 	mla	r7, r0, r2, r7
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
 8013a30:	f200 201b 	addw	r0, r0, #539	; 0x21b
 8013a34:	fb00 b002 	mla	r0, r0, r2, fp
    z1    -= z2;
 8013a38:	eba2 0208 	sub.w	r2, r2, r8
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
 8013a3c:	fb0e fe02 	mul.w	lr, lr, r2
    tmp13 = ((z1 - z3) << CONST_BITS) + z4;
 8013a40:	eba2 020c 	sub.w	r2, r2, ip
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
 8013a44:	ebae 3e49 	sub.w	lr, lr, r9, lsl #13
    tmp13 = ((z1 - z3) << CONST_BITS) + z4;
 8013a48:	0352      	lsls	r2, r2, #13
    tmp16 += tmp15;
 8013a4a:	4470      	add	r0, lr
 8013a4c:	9008      	str	r0, [sp, #32]
    tmp13 = MULTIPLY(z2 + z3, - FIX(0.158341681)) - z4;    /* -c13 */
 8013a4e:	eb08 000c 	add.w	r0, r8, ip
 8013a52:	4370      	muls	r0, r6
    tmp11 += tmp13 - MULTIPLY(z2, FIX(0.424103948));       /* c3-c9-c13 */
 8013a54:	f6a6 0681 	subw	r6, r6, #2177	; 0x881
    tmp13 = MULTIPLY(z2 + z3, - FIX(0.158341681)) - z4;    /* -c13 */
 8013a58:	eba0 3049 	sub.w	r0, r0, r9, lsl #13
    tmp11 += tmp13 - MULTIPLY(z2, FIX(0.424103948));       /* c3-c9-c13 */
 8013a5c:	fb06 0608 	mla	r6, r6, r8, r0
 8013a60:	44b2      	add	sl, r6
    tmp12 += tmp13 - MULTIPLY(z3, FIX(2.373959773));       /* c3+c5-c13 */
 8013a62:	4e43      	ldr	r6, [pc, #268]	; (8013b70 <jpeg_idct_14x7+0x378>)
 8013a64:	fb06 000c 	mla	r0, r6, ip, r0
    tmp13 = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 8013a68:	f642 46f8 	movw	r6, #11512	; 0x2cf8
    tmp12 += tmp13 - MULTIPLY(z3, FIX(2.373959773));       /* c3+c5-c13 */
 8013a6c:	4428      	add	r0, r5
    tmp13 = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 8013a6e:	ebac 0508 	sub.w	r5, ip, r8
 8013a72:	4375      	muls	r5, r6
    tmp12 += tmp13 - MULTIPLY(z3, FIX(2.373959773));       /* c3+c5-c13 */
 8013a74:	9009      	str	r0, [sp, #36]	; 0x24
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8013a76:	eb05 3649 	add.w	r6, r5, r9, lsl #13
 8013a7a:	483e      	ldr	r0, [pc, #248]	; (8013b74 <jpeg_idct_14x7+0x37c>)
    tmp13 = ((z1 - z3) << CONST_BITS) + z4;
 8013a7c:	eb02 3949 	add.w	r9, r2, r9, lsl #13
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8013a80:	9a02      	ldr	r2, [sp, #8]
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8013a82:	fb00 660c 	mla	r6, r0, ip, r6
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8013a86:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013a88:	443a      	add	r2, r7
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8013a8a:	445e      	add	r6, fp
    tmp15 += tmp13 + MULTIPLY(z2, FIX(0.674957567));       /* c1+c11-c5 */
 8013a8c:	f241 5b99 	movw	fp, #5529	; 0x1599
			     & RANGE_MASK];
 8013a90:	f3c2 4289 	ubfx	r2, r2, #18, #10
    tmp15 += tmp13 + MULTIPLY(z2, FIX(0.674957567));       /* c1+c11-c5 */
 8013a94:	fb0b 5508 	mla	r5, fp, r8, r5
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8013a98:	5c9a      	ldrb	r2, [r3, r2]
    tmp15 += tmp13 + MULTIPLY(z2, FIX(0.674957567));       /* c1+c11-c5 */
 8013a9a:	44ae      	add	lr, r5
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8013a9c:	9d4e      	ldr	r5, [sp, #312]	; 0x138
 8013a9e:	5542      	strb	r2, [r0, r5]
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8013aa0:	9a02      	ldr	r2, [sp, #8]
 8013aa2:	1bd7      	subs	r7, r2, r7
			     & RANGE_MASK];
 8013aa4:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8013aa8:	5dda      	ldrb	r2, [r3, r7]
 8013aaa:	734a      	strb	r2, [r1, #13]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8013aac:	9a04      	ldr	r2, [sp, #16]
 8013aae:	4452      	add	r2, sl
			     & RANGE_MASK];
 8013ab0:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8013ab4:	5c9a      	ldrb	r2, [r3, r2]
 8013ab6:	704a      	strb	r2, [r1, #1]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8013ab8:	9a04      	ldr	r2, [sp, #16]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8013aba:	9809      	ldr	r0, [sp, #36]	; 0x24
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8013abc:	eba2 0a0a 	sub.w	sl, r2, sl
			     & RANGE_MASK];
 8013ac0:	f3ca 4a89 	ubfx	sl, sl, #18, #10
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8013ac4:	f813 200a 	ldrb.w	r2, [r3, sl]
 8013ac8:	730a      	strb	r2, [r1, #12]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8013aca:	9a06      	ldr	r2, [sp, #24]
 8013acc:	4402      	add	r2, r0
			     & RANGE_MASK];
 8013ace:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8013ad2:	5c9a      	ldrb	r2, [r3, r2]
 8013ad4:	708a      	strb	r2, [r1, #2]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8013ad6:	9a06      	ldr	r2, [sp, #24]
 8013ad8:	1a10      	subs	r0, r2, r0
			     & RANGE_MASK];
 8013ada:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8013ade:	5c1a      	ldrb	r2, [r3, r0]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 8013ae0:	9808      	ldr	r0, [sp, #32]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8013ae2:	72ca      	strb	r2, [r1, #11]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8013ae4:	9a01      	ldr	r2, [sp, #4]
 8013ae6:	444a      	add	r2, r9
			     & RANGE_MASK];
 8013ae8:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8013aec:	5c9a      	ldrb	r2, [r3, r2]
 8013aee:	70ca      	strb	r2, [r1, #3]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8013af0:	9a01      	ldr	r2, [sp, #4]
 8013af2:	eba2 0909 	sub.w	r9, r2, r9
			     & RANGE_MASK];
 8013af6:	f3c9 4989 	ubfx	r9, r9, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8013afa:	f813 2009 	ldrb.w	r2, [r3, r9]
 8013afe:	728a      	strb	r2, [r1, #10]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8013b00:	9a07      	ldr	r2, [sp, #28]
 8013b02:	4432      	add	r2, r6
			     & RANGE_MASK];
 8013b04:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8013b08:	5c9a      	ldrb	r2, [r3, r2]
 8013b0a:	710a      	strb	r2, [r1, #4]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8013b0c:	9a07      	ldr	r2, [sp, #28]
 8013b0e:	1b96      	subs	r6, r2, r6
			     & RANGE_MASK];
 8013b10:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8013b14:	5d9a      	ldrb	r2, [r3, r6]
 8013b16:	724a      	strb	r2, [r1, #9]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8013b18:	9a05      	ldr	r2, [sp, #20]
 8013b1a:	4472      	add	r2, lr
			     & RANGE_MASK];
 8013b1c:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8013b20:	5c9a      	ldrb	r2, [r3, r2]
 8013b22:	714a      	strb	r2, [r1, #5]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8013b24:	9a05      	ldr	r2, [sp, #20]
 8013b26:	eba2 050e 	sub.w	r5, r2, lr
			     & RANGE_MASK];
 8013b2a:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8013b2e:	5d5a      	ldrb	r2, [r3, r5]
 8013b30:	720a      	strb	r2, [r1, #8]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 8013b32:	9a03      	ldr	r2, [sp, #12]
 8013b34:	4402      	add	r2, r0
			     & RANGE_MASK];
 8013b36:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 8013b3a:	5c9a      	ldrb	r2, [r3, r2]
 8013b3c:	718a      	strb	r2, [r1, #6]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 8013b3e:	9a03      	ldr	r2, [sp, #12]
 8013b40:	1a10      	subs	r0, r2, r0
			     & RANGE_MASK];
 8013b42:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 8013b46:	5c1a      	ldrb	r2, [r3, r0]
 8013b48:	71ca      	strb	r2, [r1, #7]
  for (ctr = 0; ctr < 7; ctr++) {
 8013b4a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013b4c:	9900      	ldr	r1, [sp, #0]
 8013b4e:	428a      	cmp	r2, r1
 8013b50:	f47f af02 	bne.w	8013958 <jpeg_idct_14x7+0x160>
  }
}
 8013b54:	b045      	add	sp, #276	; 0x114
 8013b56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b5a:	bf00      	nop
 8013b5c:	ffffc515 	.word	0xffffc515
 8013b60:	ffffb0f1 	.word	0xffffb0f1
 8013b64:	ffffd3e1 	.word	0xffffd3e1
 8013b68:	ffffc8fc 	.word	0xffffc8fc
 8013b6c:	ffffdbf0 	.word	0xffffdbf0
 8013b70:	ffffb409 	.word	0xffffb409
 8013b74:	ffffc9e6 	.word	0xffffc9e6

08013b78 <jpeg_idct_12x6>:

GLOBAL(void)
jpeg_idct_12x6 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8013b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8013b7c:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
{
 8013b80:	b0bb      	sub	sp, #236	; 0xec
 8013b82:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 8013b84:	1e96      	subs	r6, r2, #2
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8013b86:	3080      	adds	r0, #128	; 0x80
 8013b88:	320e      	adds	r2, #14
 8013b8a:	3d04      	subs	r5, #4
  /* Pass 1: process columns from input, store into work array.
   * 6-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/12).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 8013b8c:	af0a      	add	r7, sp, #40	; 0x28
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8013b8e:	9001      	str	r0, [sp, #4]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8013b90:	9202      	str	r2, [sp, #8]
    /* Even part */

    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013b92:	f936 1f02 	ldrsh.w	r1, [r6, #2]!
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    tmp20 = MULTIPLY(tmp12, FIX(0.707106781));   /* c4 */
    tmp11 = tmp10 + tmp20;
    tmp21 = RIGHT_SHIFT(tmp10 - tmp20 - tmp20, CONST_BITS-PASS1_BITS);
    tmp20 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    tmp10 = MULTIPLY(tmp20, FIX(1.224744871));   /* c2 */
 8013b96:	f242 7031 	movw	r0, #10033	; 0x2731
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013b9a:	f855 2f04 	ldr.w	r2, [r5, #4]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8013b9e:	3704      	adds	r7, #4
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8013ba0:	f9b6 4040 	ldrsh.w	r4, [r6, #64]	; 0x40
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013ba4:	4351      	muls	r1, r2
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8013ba6:	f8d5 2080 	ldr.w	r2, [r5, #128]	; 0x80
    tmp20 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013baa:	f9b6 c020 	ldrsh.w	ip, [r6, #32]
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8013bae:	4362      	muls	r2, r4
    tmp10 <<= CONST_BITS;
 8013bb0:	0349      	lsls	r1, r1, #13
    tmp20 = MULTIPLY(tmp12, FIX(0.707106781));   /* c4 */
 8013bb2:	f241 64a1 	movw	r4, #5793	; 0x16a1
    tmp22 = tmp11 - tmp10;

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8013bb6:	f9b6 9030 	ldrsh.w	r9, [r6, #48]	; 0x30
    tmp10 += ONE << (CONST_BITS-PASS1_BITS-1);
 8013bba:	f501 6180 	add.w	r1, r1, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8013bbe:	f9b6 8050 	ldrsh.w	r8, [r6, #80]	; 0x50
    tmp20 = MULTIPLY(tmp12, FIX(0.707106781));   /* c4 */
 8013bc2:	4362      	muls	r2, r4
    tmp11 = tmp10 + tmp20;
 8013bc4:	188c      	adds	r4, r1, r2
    tmp21 = RIGHT_SHIFT(tmp10 - tmp20 - tmp20, CONST_BITS-PASS1_BITS);
 8013bc6:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
    tmp20 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013bca:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8013bcc:	fb02 f20c 	mul.w	r2, r2, ip
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013bd0:	f9b6 c010 	ldrsh.w	ip, [r6, #16]
    tmp10 = MULTIPLY(tmp20, FIX(1.224744871));   /* c2 */
 8013bd4:	4342      	muls	r2, r0
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8013bd6:	6e28      	ldr	r0, [r5, #96]	; 0x60
    tmp20 = tmp11 + tmp10;
 8013bd8:	eb04 0e02 	add.w	lr, r4, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8013bdc:	fb00 f909 	mul.w	r9, r0, r9
    tmp22 = tmp11 - tmp10;
 8013be0:	1aa4      	subs	r4, r4, r2
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8013be2:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013be6:	6a2a      	ldr	r2, [r5, #32]
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8013be8:	fb00 f808 	mul.w	r8, r0, r8
    tmp11 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8013bec:	f640 30b6 	movw	r0, #2998	; 0xbb6
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013bf0:	fb02 f20c 	mul.w	r2, r2, ip
    tmp10 = tmp11 + ((z1 + z2) << CONST_BITS);
    tmp12 = tmp11 + ((z3 - z2) << CONST_BITS);
 8013bf4:	eba8 0b09 	sub.w	fp, r8, r9
    tmp11 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8013bf8:	eb02 0c08 	add.w	ip, r2, r8
    tmp10 = tmp11 + ((z1 + z2) << CONST_BITS);
 8013bfc:	eb02 0a09 	add.w	sl, r2, r9
    tmp11 = (z1 - z2 - z3) << PASS1_BITS;
 8013c00:	eba2 0909 	sub.w	r9, r2, r9
    tmp11 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8013c04:	fb00 fc0c 	mul.w	ip, r0, ip
    tmp11 = (z1 - z2 - z3) << PASS1_BITS;
 8013c08:	eba9 0808 	sub.w	r8, r9, r8
    tmp10 = tmp11 + ((z1 + z2) << CONST_BITS);
 8013c0c:	eb0c 3a4a 	add.w	sl, ip, sl, lsl #13
    tmp11 = (z1 - z2 - z3) << PASS1_BITS;
 8013c10:	ea4f 0888 	mov.w	r8, r8, lsl #2

    /* Final output stage */

    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8013c14:	eb0e 020a 	add.w	r2, lr, sl
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8013c18:	ebae 0e0a 	sub.w	lr, lr, sl
    tmp12 = tmp11 + ((z3 - z2) << CONST_BITS);
 8013c1c:	eb0c 3c4b 	add.w	ip, ip, fp, lsl #13
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8013c20:	12d2      	asrs	r2, r2, #11
 8013c22:	f847 2c04 	str.w	r2, [r7, #-4]
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8013c26:	ea4f 22ee 	mov.w	r2, lr, asr #11
 8013c2a:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
    wsptr[8*1] = (int) (tmp21 + tmp11);
 8013c2e:	eb08 22e1 	add.w	r2, r8, r1, asr #11
    wsptr[8*4] = (int) (tmp21 - tmp11);
 8013c32:	ebc8 21e1 	rsb	r1, r8, r1, asr #11
    wsptr[8*1] = (int) (tmp21 + tmp11);
 8013c36:	61fa      	str	r2, [r7, #28]
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8013c38:	eb04 020c 	add.w	r2, r4, ip
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8013c3c:	eba4 0c0c 	sub.w	ip, r4, ip
    wsptr[8*4] = (int) (tmp21 - tmp11);
 8013c40:	67f9      	str	r1, [r7, #124]	; 0x7c
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8013c42:	12d2      	asrs	r2, r2, #11
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8013c44:	ea4f 24ec 	mov.w	r4, ip, asr #11
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8013c48:	63fa      	str	r2, [r7, #60]	; 0x3c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8013c4a:	9a02      	ldr	r2, [sp, #8]
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8013c4c:	65fc      	str	r4, [r7, #92]	; 0x5c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8013c4e:	42b2      	cmp	r2, r6
 8013c50:	d19f      	bne.n	8013b92 <jpeg_idct_12x6+0x1a>
 8013c52:	f1a3 0a04 	sub.w	sl, r3, #4
  }

  /* Pass 2: process 6 rows from work array, store into output array.
   * 12-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/24).
   */
  wsptr = workspace;
 8013c56:	aa0a      	add	r2, sp, #40	; 0x28
 8013c58:	3314      	adds	r3, #20
 8013c5a:	9309      	str	r3, [sp, #36]	; 0x24
  for (ctr = 0; ctr < 6; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8013c5c:	f85a 3f04 	ldr.w	r3, [sl, #4]!
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */

    tmp10 = z1 + z3;
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 8013c60:	f640 0b5b 	movw	fp, #2139	; 0x85b
    outptr = output_buf[ctr] + output_col;
 8013c64:	9944      	ldr	r1, [sp, #272]	; 0x110
			     & RANGE_MASK];
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 8013c66:	3220      	adds	r2, #32
    outptr = output_buf[ctr] + output_col;
 8013c68:	9308      	str	r3, [sp, #32]
    z2 = (INT32) wsptr[6];
 8013c6a:	f852 5c08 	ldr.w	r5, [r2, #-8]
    outptr = output_buf[ctr] + output_col;
 8013c6e:	440b      	add	r3, r1
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8013c70:	f852 1c20 	ldr.w	r1, [r2, #-32]
    z1 = (INT32) wsptr[2];
 8013c74:	f852 6c18 	ldr.w	r6, [r2, #-24]
    z2 <<= CONST_BITS;
 8013c78:	036d      	lsls	r5, r5, #13
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8013c7a:	f101 0c10 	add.w	ip, r1, #16
    z4 = (INT32) wsptr[4];
 8013c7e:	f852 4c10 	ldr.w	r4, [r2, #-16]
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 8013c82:	f242 7131 	movw	r1, #10033	; 0x2731
    tmp12 = z1 - z2;
 8013c86:	ebc5 3e46 	rsb	lr, r5, r6, lsl #13
    z1 = (INT32) wsptr[1];
 8013c8a:	f852 8c1c 	ldr.w	r8, [r2, #-28]
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 8013c8e:	434c      	muls	r4, r1
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 8013c90:	f642 31b6 	movw	r1, #11190	; 0x2bb6
    tmp21 = z3 + tmp12;
 8013c94:	eb0e 304c 	add.w	r0, lr, ip, lsl #13
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 8013c98:	4371      	muls	r1, r6
    tmp10 = z3 + z4;
 8013c9a:	eb04 374c 	add.w	r7, r4, ip, lsl #13
    tmp21 = z3 + tmp12;
 8013c9e:	9002      	str	r0, [sp, #8]
    tmp11 = z3 - z4;
 8013ca0:	ebc4 344c 	rsb	r4, r4, ip, lsl #13
    tmp24 = z3 - tmp12;
 8013ca4:	ebce 304c 	rsb	r0, lr, ip, lsl #13
    tmp12 = z4 + z2;
 8013ca8:	eb01 0c05 	add.w	ip, r1, r5
    tmp12 = z4 - z1 - z2;
 8013cac:	eba1 3146 	sub.w	r1, r1, r6, lsl #13
    z3 = (INT32) wsptr[5];
 8013cb0:	f852 6c0c 	ldr.w	r6, [r2, #-12]
    tmp24 = z3 - tmp12;
 8013cb4:	9003      	str	r0, [sp, #12]
    tmp20 = tmp10 + tmp12;
 8013cb6:	eb07 000c 	add.w	r0, r7, ip
    tmp12 = z4 - z1 - z2;
 8013cba:	1b4d      	subs	r5, r1, r5
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 8013cbc:	f641 3e8d 	movw	lr, #7053	; 0x1b8d
    tmp20 = tmp10 + tmp12;
 8013cc0:	9004      	str	r0, [sp, #16]
    tmp25 = tmp10 - tmp12;
 8013cc2:	eba7 000c 	sub.w	r0, r7, ip
    tmp22 = tmp11 + tmp12;
 8013cc6:	1961      	adds	r1, r4, r5
    tmp10 = z1 + z3;
 8013cc8:	eb08 0706 	add.w	r7, r8, r6
    tmp25 = tmp10 - tmp12;
 8013ccc:	9005      	str	r0, [sp, #20]
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 8013cce:	f642 10cf 	movw	r0, #10703	; 0x29cf
    tmp22 = tmp11 + tmp12;
 8013cd2:	9106      	str	r1, [sp, #24]
    tmp23 = tmp11 - tmp12;
 8013cd4:	1b61      	subs	r1, r4, r5
    z4 = (INT32) wsptr[7];
 8013cd6:	f852 5c04 	ldr.w	r5, [r2, #-4]
    tmp23 = tmp11 - tmp12;
 8013cda:	9107      	str	r1, [sp, #28]
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 8013cdc:	eb05 0c07 	add.w	ip, r5, r7
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 8013ce0:	f852 1c14 	ldr.w	r1, [r2, #-20]
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 8013ce4:	eb06 0905 	add.w	r9, r6, r5
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 8013ce8:	fb0e fc0c 	mul.w	ip, lr, ip
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 8013cec:	fb00 f401 	mul.w	r4, r0, r1
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 8013cf0:	484f      	ldr	r0, [pc, #316]	; (8013e30 <jpeg_idct_12x6+0x2b8>)
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 8013cf2:	fb0b cb07 	mla	fp, fp, r7, ip
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 8013cf6:	f640 07f7 	movw	r7, #2295	; 0x8f7
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 8013cfa:	4341      	muls	r1, r0
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 8013cfc:	484d      	ldr	r0, [pc, #308]	; (8013e34 <jpeg_idct_12x6+0x2bc>)
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 8013cfe:	eb04 0e0b 	add.w	lr, r4, fp
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8013d02:	ebac 0404 	sub.w	r4, ip, r4
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 8013d06:	fb00 f909 	mul.w	r9, r0, r9
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 8013d0a:	f6a0 50db 	subw	r0, r0, #3547	; 0xddb
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 8013d0e:	fb07 ee08 	mla	lr, r7, r8, lr
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 8013d12:	eb01 0709 	add.w	r7, r1, r9
 8013d16:	fb00 7706 	mla	r7, r0, r6, r7
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8013d1a:	4847      	ldr	r0, [pc, #284]	; (8013e38 <jpeg_idct_12x6+0x2c0>)
 8013d1c:	fb00 1108 	mla	r1, r0, r8, r1
 8013d20:	4846      	ldr	r0, [pc, #280]	; (8013e3c <jpeg_idct_12x6+0x2c4>)
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 8013d22:	445f      	add	r7, fp
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8013d24:	f243 2bc6 	movw	fp, #12998	; 0x32c6
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8013d28:	fb00 1105 	mla	r1, r0, r5, r1
    z2 -= z3;
 8013d2c:	f852 0c14 	ldr.w	r0, [r2, #-20]
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8013d30:	fb0b 4405 	mla	r4, fp, r5, r4
    z1 -= z4;
 8013d34:	eba8 0505 	sub.w	r5, r8, r5
    z2 -= z3;
 8013d38:	1b86      	subs	r6, r0, r6
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 8013d3a:	f241 1851 	movw	r8, #4433	; 0x1151
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8013d3e:	444c      	add	r4, r9
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8013d40:	eb01 090c 	add.w	r9, r1, ip
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 8013d44:	eb05 0c06 	add.w	ip, r5, r6
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 8013d48:	483d      	ldr	r0, [pc, #244]	; (8013e40 <jpeg_idct_12x6+0x2c8>)
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8013d4a:	9901      	ldr	r1, [sp, #4]
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 8013d4c:	fb08 fc0c 	mul.w	ip, r8, ip
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
 8013d50:	f641 087e 	movw	r8, #6270	; 0x187e
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 8013d54:	fb00 c606 	mla	r6, r0, r6, ip
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8013d58:	9804      	ldr	r0, [sp, #16]
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
 8013d5a:	fb08 c505 	mla	r5, r8, r5, ip
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8013d5e:	eb00 080e 	add.w	r8, r0, lr
 8013d62:	9808      	ldr	r0, [sp, #32]
			     & RANGE_MASK];
 8013d64:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8013d68:	f811 c008 	ldrb.w	ip, [r1, r8]
 8013d6c:	9944      	ldr	r1, [sp, #272]	; 0x110
 8013d6e:	f800 c001 	strb.w	ip, [r0, r1]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8013d72:	9904      	ldr	r1, [sp, #16]
 8013d74:	eba1 0e0e 	sub.w	lr, r1, lr
 8013d78:	9901      	ldr	r1, [sp, #4]
			     & RANGE_MASK];
 8013d7a:	f3ce 4e89 	ubfx	lr, lr, #18, #10
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8013d7e:	f811 c00e 	ldrb.w	ip, [r1, lr]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8013d82:	9902      	ldr	r1, [sp, #8]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8013d84:	f883 c00b 	strb.w	ip, [r3, #11]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8013d88:	eb01 0c05 	add.w	ip, r1, r5
 8013d8c:	9901      	ldr	r1, [sp, #4]
			     & RANGE_MASK];
 8013d8e:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8013d92:	f811 c00c 	ldrb.w	ip, [r1, ip]
 8013d96:	f883 c001 	strb.w	ip, [r3, #1]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8013d9a:	9902      	ldr	r1, [sp, #8]
 8013d9c:	eba1 0805 	sub.w	r8, r1, r5
 8013da0:	9901      	ldr	r1, [sp, #4]
			     & RANGE_MASK];
 8013da2:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8013da6:	f811 5008 	ldrb.w	r5, [r1, r8]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8013daa:	9906      	ldr	r1, [sp, #24]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8013dac:	729d      	strb	r5, [r3, #10]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8013dae:	19cd      	adds	r5, r1, r7
 8013db0:	9901      	ldr	r1, [sp, #4]
			     & RANGE_MASK];
 8013db2:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8013db6:	5d4d      	ldrb	r5, [r1, r5]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8013db8:	9906      	ldr	r1, [sp, #24]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8013dba:	709d      	strb	r5, [r3, #2]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8013dbc:	1bcf      	subs	r7, r1, r7
 8013dbe:	9901      	ldr	r1, [sp, #4]
			     & RANGE_MASK];
 8013dc0:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8013dc4:	5dcd      	ldrb	r5, [r1, r7]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8013dc6:	9907      	ldr	r1, [sp, #28]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8013dc8:	725d      	strb	r5, [r3, #9]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8013dca:	190d      	adds	r5, r1, r4
 8013dcc:	9901      	ldr	r1, [sp, #4]
			     & RANGE_MASK];
 8013dce:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8013dd2:	5d4d      	ldrb	r5, [r1, r5]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8013dd4:	9907      	ldr	r1, [sp, #28]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8013dd6:	70dd      	strb	r5, [r3, #3]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8013dd8:	1b0c      	subs	r4, r1, r4
 8013dda:	9901      	ldr	r1, [sp, #4]
			     & RANGE_MASK];
 8013ddc:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8013de0:	5d0c      	ldrb	r4, [r1, r4]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8013de2:	9903      	ldr	r1, [sp, #12]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8013de4:	721c      	strb	r4, [r3, #8]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8013de6:	198c      	adds	r4, r1, r6
 8013de8:	9901      	ldr	r1, [sp, #4]
			     & RANGE_MASK];
 8013dea:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8013dee:	5d0c      	ldrb	r4, [r1, r4]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8013df0:	9903      	ldr	r1, [sp, #12]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8013df2:	711c      	strb	r4, [r3, #4]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8013df4:	1b8e      	subs	r6, r1, r6
 8013df6:	9901      	ldr	r1, [sp, #4]
			     & RANGE_MASK];
 8013df8:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8013dfc:	5d8c      	ldrb	r4, [r1, r6]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8013dfe:	9905      	ldr	r1, [sp, #20]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8013e00:	71dc      	strb	r4, [r3, #7]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8013e02:	eb01 0409 	add.w	r4, r1, r9
 8013e06:	9901      	ldr	r1, [sp, #4]
			     & RANGE_MASK];
 8013e08:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8013e0c:	5d0c      	ldrb	r4, [r1, r4]
 8013e0e:	715c      	strb	r4, [r3, #5]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8013e10:	9905      	ldr	r1, [sp, #20]
 8013e12:	9801      	ldr	r0, [sp, #4]
 8013e14:	eba1 0109 	sub.w	r1, r1, r9
			     & RANGE_MASK];
 8013e18:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8013e1c:	5c41      	ldrb	r1, [r0, r1]
 8013e1e:	7199      	strb	r1, [r3, #6]
  for (ctr = 0; ctr < 6; ctr++) {
 8013e20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013e22:	4553      	cmp	r3, sl
 8013e24:	f47f af1a 	bne.w	8013c5c <jpeg_idct_12x6+0xe4>
  }
}
 8013e28:	b03b      	add	sp, #236	; 0xec
 8013e2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e2e:	bf00      	nop
 8013e30:	ffffeeaf 	.word	0xffffeeaf
 8013e34:	ffffde8b 	.word	0xffffde8b
 8013e38:	ffffea5c 	.word	0xffffea5c
 8013e3c:	ffffc08c 	.word	0xffffc08c
 8013e40:	ffffc4df 	.word	0xffffc4df

08013e44 <jpeg_idct_10x5>:

GLOBAL(void)
jpeg_idct_10x5 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8013e44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8013e48:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
{
 8013e4c:	b0af      	sub	sp, #188	; 0xbc
 8013e4e:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 8013e50:	1e96      	subs	r6, r2, #2
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8013e52:	3080      	adds	r0, #128	; 0x80
   * 5-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/10).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8013e54:	320e      	adds	r2, #14
 8013e56:	3d04      	subs	r5, #4
  wsptr = workspace;
 8013e58:	af06      	add	r7, sp, #24
    tmp12 <<= CONST_BITS;
    /* Add fudge factor here for final descale. */
    tmp12 += ONE << (CONST_BITS-PASS1_BITS-1);
    tmp13 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    tmp14 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    z1 = MULTIPLY(tmp13 + tmp14, FIX(0.790569415)); /* (c2+c4)/2 */
 8013e5a:	f641 1e4c 	movw	lr, #6476	; 0x194c
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 8013e5e:	f44f 6c35 	mov.w	ip, #2896	; 0xb50
{
 8013e62:	9300      	str	r3, [sp, #0]
 8013e64:	9201      	str	r2, [sp, #4]
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013e66:	f936 2f02 	ldrsh.w	r2, [r6, #2]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8013e6a:	3704      	adds	r7, #4
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013e6c:	f855 1f04 	ldr.w	r1, [r5, #4]!
    tmp13 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013e70:	f9b6 4020 	ldrsh.w	r4, [r6, #32]
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013e74:	434a      	muls	r2, r1
    tmp13 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013e76:	6c29      	ldr	r1, [r5, #64]	; 0x40
    tmp14 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8013e78:	f9b6 9040 	ldrsh.w	r9, [r6, #64]	; 0x40
    tmp13 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013e7c:	4361      	muls	r1, r4
    tmp14 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8013e7e:	f8d5 4080 	ldr.w	r4, [r5, #128]	; 0x80
    tmp11 = z3 - z1;
    tmp12 -= z2 << 2;

    /* Odd part */

    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013e82:	6a2b      	ldr	r3, [r5, #32]
    tmp12 <<= CONST_BITS;
 8013e84:	0352      	lsls	r2, r2, #13
    tmp14 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8013e86:	fb04 f909 	mul.w	r9, r4, r9
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013e8a:	f9b6 a010 	ldrsh.w	sl, [r6, #16]
    tmp12 += ONE << (CONST_BITS-PASS1_BITS-1);
 8013e8e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8013e92:	f9b6 b030 	ldrsh.w	fp, [r6, #48]	; 0x30
    z1 = MULTIPLY(tmp13 + tmp14, FIX(0.790569415)); /* (c2+c4)/2 */
 8013e96:	eb01 0409 	add.w	r4, r1, r9
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 8013e9a:	eba1 0109 	sub.w	r1, r1, r9
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013e9e:	fb03 fa0a 	mul.w	sl, r3, sl
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8013ea2:	6e2b      	ldr	r3, [r5, #96]	; 0x60
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 8013ea4:	fb0c f101 	mul.w	r1, ip, r1
    z1 = MULTIPLY(tmp13 + tmp14, FIX(0.790569415)); /* (c2+c4)/2 */
 8013ea8:	fb0e f804 	mul.w	r8, lr, r4
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8013eac:	fb03 fb0b 	mul.w	fp, r3, fp
    z3 = tmp12 + z2;
 8013eb0:	1854      	adds	r4, r2, r1

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));       /* c3 */
 8013eb2:	f641 239a 	movw	r3, #6810	; 0x1a9a
    tmp12 -= z2 << 2;
 8013eb6:	eba2 0281 	sub.w	r2, r2, r1, lsl #2
    tmp10 = z3 + z1;
 8013eba:	eb08 0904 	add.w	r9, r8, r4
    tmp11 = z3 - z1;
 8013ebe:	eba4 0408 	sub.w	r4, r4, r8
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));       /* c3 */
 8013ec2:	eb0a 080b 	add.w	r8, sl, fp

    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp13, CONST_BITS-PASS1_BITS);
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp10 - tmp13, CONST_BITS-PASS1_BITS);
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp14, CONST_BITS-PASS1_BITS);
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp11 - tmp14, CONST_BITS-PASS1_BITS);
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp12, CONST_BITS-PASS1_BITS);
 8013ec6:	12d2      	asrs	r2, r2, #11
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));       /* c3 */
 8013ec8:	fb03 f808 	mul.w	r8, r3, r8
    tmp13 = z1 + MULTIPLY(z2, FIX(0.513743148));    /* c1-c3 */
 8013ecc:	f241 0371 	movw	r3, #4209	; 0x1071
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp12, CONST_BITS-PASS1_BITS);
 8013ed0:	63fa      	str	r2, [r7, #60]	; 0x3c
    tmp13 = z1 + MULTIPLY(z2, FIX(0.513743148));    /* c1-c3 */
 8013ed2:	fb03 8a0a 	mla	sl, r3, sl, r8
    tmp14 = z1 - MULTIPLY(z3, FIX(2.176250899));    /* c1+c3 */
 8013ed6:	4b6c      	ldr	r3, [pc, #432]	; (8014088 <jpeg_idct_10x5+0x244>)
 8013ed8:	fb03 880b 	mla	r8, r3, fp, r8
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp13, CONST_BITS-PASS1_BITS);
 8013edc:	eb09 0b0a 	add.w	fp, r9, sl
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8013ee0:	9b01      	ldr	r3, [sp, #4]
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp10 - tmp13, CONST_BITS-PASS1_BITS);
 8013ee2:	eba9 0a0a 	sub.w	sl, r9, sl
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp14, CONST_BITS-PASS1_BITS);
 8013ee6:	eb04 0908 	add.w	r9, r4, r8
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp11 - tmp14, CONST_BITS-PASS1_BITS);
 8013eea:	eba4 0808 	sub.w	r8, r4, r8
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp13, CONST_BITS-PASS1_BITS);
 8013eee:	ea4f 2beb 	mov.w	fp, fp, asr #11
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8013ef2:	42b3      	cmp	r3, r6
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp10 - tmp13, CONST_BITS-PASS1_BITS);
 8013ef4:	ea4f 2aea 	mov.w	sl, sl, asr #11
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp14, CONST_BITS-PASS1_BITS);
 8013ef8:	ea4f 29e9 	mov.w	r9, r9, asr #11
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp13, CONST_BITS-PASS1_BITS);
 8013efc:	f847 bc04 	str.w	fp, [r7, #-4]
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp11 - tmp14, CONST_BITS-PASS1_BITS);
 8013f00:	ea4f 24e8 	mov.w	r4, r8, asr #11
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp10 - tmp13, CONST_BITS-PASS1_BITS);
 8013f04:	f8c7 a07c 	str.w	sl, [r7, #124]	; 0x7c
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp14, CONST_BITS-PASS1_BITS);
 8013f08:	f8c7 901c 	str.w	r9, [r7, #28]
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp11 - tmp14, CONST_BITS-PASS1_BITS);
 8013f0c:	65fc      	str	r4, [r7, #92]	; 0x5c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8013f0e:	d1aa      	bne.n	8013e66 <jpeg_idct_10x5+0x22>
 8013f10:	9b00      	ldr	r3, [sp, #0]
  }

  /* Pass 2: process 5 rows from work array, store into output array.
   * 10-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/20).
   */
  wsptr = workspace;
 8013f12:	a906      	add	r1, sp, #24
 8013f14:	f1a3 0b04 	sub.w	fp, r3, #4
 8013f18:	3310      	adds	r3, #16
 8013f1a:	9305      	str	r3, [sp, #20]
  for (ctr = 0; ctr < 5; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8013f1c:	f85b 3f04 	ldr.w	r3, [fp, #4]!
			    & RANGE_MASK];
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 8013f20:	3120      	adds	r1, #32
    outptr = output_buf[ctr] + output_col;
 8013f22:	9a38      	ldr	r2, [sp, #224]	; 0xe0
    z4 = (INT32) wsptr[4];
 8013f24:	f851 7c10 	ldr.w	r7, [r1, #-16]
    outptr = output_buf[ctr] + output_col;
 8013f28:	189c      	adds	r4, r3, r2
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 8013f2a:	f242 429d 	movw	r2, #9373	; 0x249d
    outptr = output_buf[ctr] + output_col;
 8013f2e:	9304      	str	r3, [sp, #16]
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 8013f30:	fb02 f507 	mul.w	r5, r2, r7
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8013f34:	f851 3c20 	ldr.w	r3, [r1, #-32]
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 8013f38:	f640 52fc 	movw	r2, #3580	; 0xdfc
    z3 = (INT32) wsptr[6];
 8013f3c:	f851 cc08 	ldr.w	ip, [r1, #-8]
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8013f40:	3310      	adds	r3, #16
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 8013f42:	4357      	muls	r7, r2
    tmp10 = z3 + z1;
 8013f44:	eb05 3643 	add.w	r6, r5, r3, lsl #13
    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */
 8013f48:	1bed      	subs	r5, r5, r7
    tmp11 = z3 - z2;
 8013f4a:	ebc7 3243 	rsb	r2, r7, r3, lsl #13
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 8013f4e:	f641 279a 	movw	r7, #6810	; 0x1a9a
    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */
 8013f52:	006d      	lsls	r5, r5, #1
 8013f54:	ebc5 3343 	rsb	r3, r5, r3, lsl #13
    z2 = (INT32) wsptr[2];
 8013f58:	f851 5c18 	ldr.w	r5, [r1, #-24]
    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */
 8013f5c:	9300      	str	r3, [sp, #0]
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 8013f5e:	eb05 030c 	add.w	r3, r5, ip
 8013f62:	437b      	muls	r3, r7
    tmp12 = z1 + MULTIPLY(z2, FIX(0.513743148)); /* c2-c6 */
 8013f64:	f241 0771 	movw	r7, #4209	; 0x1071
 8013f68:	fb07 3505 	mla	r5, r7, r5, r3
    tmp13 = z1 - MULTIPLY(z3, FIX(2.176250899)); /* c2+c6 */
 8013f6c:	4f46      	ldr	r7, [pc, #280]	; (8014088 <jpeg_idct_10x5+0x244>)
 8013f6e:	fb07 330c 	mla	r3, r7, ip, r3
    tmp20 = tmp10 + tmp12;
 8013f72:	eb06 0c05 	add.w	ip, r6, r5
    tmp24 = tmp10 - tmp12;
 8013f76:	1b75      	subs	r5, r6, r5
    z2 = MULTIPLY(tmp11, FIX(0.951056516));           /* (c3+c7)/2 */
 8013f78:	f641 666f 	movw	r6, #7791	; 0x1e6f
    tmp21 = tmp11 + tmp13;
 8013f7c:	18d7      	adds	r7, r2, r3
    tmp23 = tmp11 - tmp13;
 8013f7e:	1ad3      	subs	r3, r2, r3
    tmp24 = tmp10 - tmp12;
 8013f80:	9501      	str	r5, [sp, #4]
    tmp23 = tmp11 - tmp13;
 8013f82:	9302      	str	r3, [sp, #8]
    z2 = (INT32) wsptr[3];
 8013f84:	f851 5c14 	ldr.w	r5, [r1, #-20]
    z4 = (INT32) wsptr[7];
 8013f88:	f851 3c04 	ldr.w	r3, [r1, #-4]
    z1 = (INT32) wsptr[1];
 8013f8c:	f851 2c1c 	ldr.w	r2, [r1, #-28]
    tmp11 = z2 + z4;
 8013f90:	eb05 0903 	add.w	r9, r5, r3
    tmp13 = z2 - z4;
 8013f94:	1aeb      	subs	r3, r5, r3
    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 8013f96:	f640 15e3 	movw	r5, #2531	; 0x9e3
    z2 = MULTIPLY(tmp11, FIX(0.951056516));           /* (c3+c7)/2 */
 8013f9a:	fb06 f809 	mul.w	r8, r6, r9
    z4 = z3 + tmp12;
 8013f9e:	f851 6c0c 	ldr.w	r6, [r1, #-12]
    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 8013fa2:	435d      	muls	r5, r3
    z4 = z3 + tmp12;
 8013fa4:	eb05 3a46 	add.w	sl, r5, r6, lsl #13
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8013fa8:	f642 46b3 	movw	r6, #11443	; 0x2cb3
 8013fac:	fb06 8e02 	mla	lr, r6, r2, r8
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8013fb0:	f240 7614 	movw	r6, #1812	; 0x714
 8013fb4:	4356      	muls	r6, r2
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8013fb6:	44d6      	add	lr, sl
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8013fb8:	eba6 0608 	sub.w	r6, r6, r8
 8013fbc:	44b2      	add	sl, r6
    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 8013fbe:	f241 26cf 	movw	r6, #4815	; 0x12cf
 8013fc2:	fb06 f909 	mul.w	r9, r6, r9
    z4 = z3 - tmp12 - (tmp13 << (CONST_BITS - 1));
 8013fc6:	f851 6c0c 	ldr.w	r6, [r1, #-12]
 8013fca:	ebc5 3546 	rsb	r5, r5, r6, lsl #13
 8013fce:	eba5 3503 	sub.w	r5, r5, r3, lsl #12
    tmp12 = ((z1 - tmp13) << CONST_BITS) - z3;
 8013fd2:	1ad3      	subs	r3, r2, r3
 8013fd4:	035b      	lsls	r3, r3, #13
 8013fd6:	eba3 3846 	sub.w	r8, r3, r6, lsl #13
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8013fda:	f241 468c 	movw	r6, #5260	; 0x148c
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8013fde:	f642 0353 	movw	r3, #10323	; 0x2853
 8013fe2:	4353      	muls	r3, r2
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8013fe4:	4372      	muls	r2, r6
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8013fe6:	9e04      	ldr	r6, [sp, #16]
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8013fe8:	eba3 0309 	sub.w	r3, r3, r9
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8013fec:	eba2 0909 	sub.w	r9, r2, r9
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8013ff0:	eb0c 020e 	add.w	r2, ip, lr
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8013ff4:	1b5b      	subs	r3, r3, r5
    outptr[9] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8013ff6:	ebac 0c0e 	sub.w	ip, ip, lr
			    & RANGE_MASK];
 8013ffa:	f3c2 4289 	ubfx	r2, r2, #18, #10
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8013ffe:	444d      	add	r5, r9
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8014000:	9303      	str	r3, [sp, #12]
			    & RANGE_MASK];
 8014002:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8014006:	5c82      	ldrb	r2, [r0, r2]
 8014008:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 801400a:	54f2      	strb	r2, [r6, r3]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801400c:	9b03      	ldr	r3, [sp, #12]
    outptr[9] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 801400e:	f810 200c 	ldrb.w	r2, [r0, ip]
 8014012:	7262      	strb	r2, [r4, #9]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8014014:	18fa      	adds	r2, r7, r3
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8014016:	1aff      	subs	r7, r7, r3
			    & RANGE_MASK];
 8014018:	f3c2 4289 	ubfx	r2, r2, #18, #10
			    & RANGE_MASK];
 801401c:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8014020:	5c82      	ldrb	r2, [r0, r2]
 8014022:	7062      	strb	r2, [r4, #1]
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8014024:	5dc3      	ldrb	r3, [r0, r7]
 8014026:	7223      	strb	r3, [r4, #8]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8014028:	9b00      	ldr	r3, [sp, #0]
 801402a:	4443      	add	r3, r8
			    & RANGE_MASK];
 801402c:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8014030:	5cc3      	ldrb	r3, [r0, r3]
 8014032:	70a3      	strb	r3, [r4, #2]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8014034:	9b00      	ldr	r3, [sp, #0]
 8014036:	eba3 0808 	sub.w	r8, r3, r8
			    & RANGE_MASK];
 801403a:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801403e:	f810 3008 	ldrb.w	r3, [r0, r8]
 8014042:	71e3      	strb	r3, [r4, #7]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8014044:	9b02      	ldr	r3, [sp, #8]
 8014046:	442b      	add	r3, r5
			    & RANGE_MASK];
 8014048:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 801404c:	5cc3      	ldrb	r3, [r0, r3]
 801404e:	70e3      	strb	r3, [r4, #3]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8014050:	9b02      	ldr	r3, [sp, #8]
 8014052:	1b5d      	subs	r5, r3, r5
			    & RANGE_MASK];
 8014054:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8014058:	5d43      	ldrb	r3, [r0, r5]
 801405a:	71a3      	strb	r3, [r4, #6]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 801405c:	9b01      	ldr	r3, [sp, #4]
 801405e:	4453      	add	r3, sl
			    & RANGE_MASK];
 8014060:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8014064:	5cc3      	ldrb	r3, [r0, r3]
 8014066:	7123      	strb	r3, [r4, #4]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8014068:	9b01      	ldr	r3, [sp, #4]
 801406a:	eba3 0a0a 	sub.w	sl, r3, sl
			    & RANGE_MASK];
 801406e:	f3ca 4a89 	ubfx	sl, sl, #18, #10
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8014072:	f810 300a 	ldrb.w	r3, [r0, sl]
 8014076:	7163      	strb	r3, [r4, #5]
  for (ctr = 0; ctr < 5; ctr++) {
 8014078:	9b05      	ldr	r3, [sp, #20]
 801407a:	455b      	cmp	r3, fp
 801407c:	f47f af4e 	bne.w	8013f1c <jpeg_idct_10x5+0xd8>
  }
}
 8014080:	b02f      	add	sp, #188	; 0xbc
 8014082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014086:	bf00      	nop
 8014088:	ffffba5c 	.word	0xffffba5c

0801408c <jpeg_idct_8x4>:

GLOBAL(void)
jpeg_idct_8x4 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 801408c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8014090:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
{
 8014094:	b0a5      	sub	sp, #148	; 0x94
 8014096:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 8014098:	1e96      	subs	r6, r2, #2
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801409a:	f100 0c80 	add.w	ip, r0, #128	; 0x80
   * 4-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/16).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801409e:	f102 070e 	add.w	r7, r2, #14
 80140a2:	3d04      	subs	r5, #4
  wsptr = workspace;
 80140a4:	a804      	add	r0, sp, #16
    /* Same rotation as in the even part of the 8x8 LL&M IDCT */

    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);               /* c6 */
 80140a6:	f241 1851 	movw	r8, #4433	; 0x1151
    /* Add fudge factor here for final descale. */
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
    tmp0 = RIGHT_SHIFT(z1 + MULTIPLY(z2, FIX_0_765366865), /* c2-c6 */
 80140aa:	f641 0e7e 	movw	lr, #6270	; 0x187e
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80140ae:	f936 4f02 	ldrsh.w	r4, [r6, #2]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80140b2:	3004      	adds	r0, #4
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80140b4:	f855 2f04 	ldr.w	r2, [r5, #4]!
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80140b8:	f9b6 9020 	ldrsh.w	r9, [r6, #32]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80140bc:	42b7      	cmp	r7, r6
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80140be:	fb02 f404 	mul.w	r4, r2, r4
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80140c2:	6c2a      	ldr	r2, [r5, #64]	; 0x40
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80140c4:	f9b6 a010 	ldrsh.w	sl, [r6, #16]
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80140c8:	fb02 f209 	mul.w	r2, r2, r9
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80140cc:	f9b6 b030 	ldrsh.w	fp, [r6, #48]	; 0x30
		       CONST_BITS-PASS1_BITS);
    tmp2 = RIGHT_SHIFT(z1 - MULTIPLY(z3, FIX_1_847759065), /* c2+c6 */
 80140d0:	4966      	ldr	r1, [pc, #408]	; (801426c <jpeg_idct_8x4+0x1e0>)
    tmp10 = (tmp0 + tmp2) << PASS1_BITS;
 80140d2:	eb04 0902 	add.w	r9, r4, r2
    tmp12 = (tmp0 - tmp2) << PASS1_BITS;
 80140d6:	eba4 0402 	sub.w	r4, r4, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80140da:	6a2a      	ldr	r2, [r5, #32]
 80140dc:	fb02 fa0a 	mul.w	sl, r2, sl
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80140e0:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 80140e2:	fb02 fb0b 	mul.w	fp, r2, fp
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);               /* c6 */
 80140e6:	eb0a 020b 	add.w	r2, sl, fp
 80140ea:	fb08 f202 	mul.w	r2, r8, r2
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 80140ee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
    tmp0 = RIGHT_SHIFT(z1 + MULTIPLY(z2, FIX_0_765366865), /* c2-c6 */
 80140f2:	fb0e 2a0a 	mla	sl, lr, sl, r2
    tmp2 = RIGHT_SHIFT(z1 - MULTIPLY(z3, FIX_1_847759065), /* c2+c6 */
 80140f6:	fb01 220b 	mla	r2, r1, fp, r2
    tmp0 = RIGHT_SHIFT(z1 + MULTIPLY(z2, FIX_0_765366865), /* c2-c6 */
 80140fa:	ea4f 2aea 	mov.w	sl, sl, asr #11
    tmp2 = RIGHT_SHIFT(z1 - MULTIPLY(z3, FIX_1_847759065), /* c2+c6 */
 80140fe:	ea4f 22e2 	mov.w	r2, r2, asr #11
		       CONST_BITS-PASS1_BITS);

    /* Final output stage */

    wsptr[8*0] = (int) (tmp10 + tmp0);
 8014102:	eb0a 0b89 	add.w	fp, sl, r9, lsl #2
    wsptr[8*3] = (int) (tmp10 - tmp0);
 8014106:	ebca 0a89 	rsb	sl, sl, r9, lsl #2
    wsptr[8*1] = (int) (tmp12 + tmp2);
 801410a:	eb02 0984 	add.w	r9, r2, r4, lsl #2
    wsptr[8*0] = (int) (tmp10 + tmp0);
 801410e:	f840 bc04 	str.w	fp, [r0, #-4]
    wsptr[8*2] = (int) (tmp12 - tmp2);
 8014112:	ebc2 0284 	rsb	r2, r2, r4, lsl #2
    wsptr[8*3] = (int) (tmp10 - tmp0);
 8014116:	f8c0 a05c 	str.w	sl, [r0, #92]	; 0x5c
    wsptr[8*1] = (int) (tmp12 + tmp2);
 801411a:	f8c0 901c 	str.w	r9, [r0, #28]
    wsptr[8*2] = (int) (tmp12 - tmp2);
 801411e:	63c2      	str	r2, [r0, #60]	; 0x3c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8014120:	d1c5      	bne.n	80140ae <jpeg_idct_8x4+0x22>
 8014122:	f1a3 0804 	sub.w	r8, r3, #4

  /* Pass 2: process rows from work array, store into output array. */
  /* Note that we must descale the results by a factor of 8 == 2**3, */
  /* and also undo the PASS1_BITS scaling. */

  wsptr = workspace;
 8014126:	a904      	add	r1, sp, #16
 8014128:	330c      	adds	r3, #12
 801412a:	9303      	str	r3, [sp, #12]
  for (ctr = 0; ctr < 4; ctr++) {
    outptr = output_buf[ctr] + output_col;
 801412c:	f858 3f04 	ldr.w	r3, [r8, #4]!
    /* The rotator is sqrt(2)*c(-6). */

    z2 = (INT32) wsptr[2];
    z3 = (INT32) wsptr[6];
    
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 8014130:	f241 1051 	movw	r0, #4433	; 0x1151
    outptr = output_buf[ctr] + output_col;
 8014134:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
			    & RANGE_MASK];
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += DCTSIZE;		/* advance pointer to next row */
 8014136:	3120      	adds	r1, #32
    outptr = output_buf[ctr] + output_col;
 8014138:	9302      	str	r3, [sp, #8]
 801413a:	189c      	adds	r4, r3, r2
    z3 = (INT32) wsptr[6];
 801413c:	f851 3c08 	ldr.w	r3, [r1, #-8]
    z2 = (INT32) wsptr[2];
 8014140:	f851 2c18 	ldr.w	r2, [r1, #-24]
    z3 = (INT32) wsptr[4];
 8014144:	f851 5c10 	ldr.w	r5, [r1, #-16]
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 8014148:	eb02 0b03 	add.w	fp, r2, r3
    tmp1 = (INT32) wsptr[5];
 801414c:	f851 ec0c 	ldr.w	lr, [r1, #-12]
    tmp3 = (INT32) wsptr[1];
 8014150:	f851 9c1c 	ldr.w	r9, [r1, #-28]
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 8014154:	fb00 fb0b 	mul.w	fp, r0, fp
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 8014158:	f641 007e 	movw	r0, #6270	; 0x187e
    tmp0 = (INT32) wsptr[7];
 801415c:	f851 7c04 	ldr.w	r7, [r1, #-4]
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 8014160:	fb00 b202 	mla	r2, r0, r2, fp
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 8014164:	4841      	ldr	r0, [pc, #260]	; (801426c <jpeg_idct_8x4+0x1e0>)
 8014166:	fb00 bb03 	mla	fp, r0, r3, fp
    z2 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801416a:	f851 3c20 	ldr.w	r3, [r1, #-32]
 801416e:	3310      	adds	r3, #16
    tmp0 = (z2 + z3) << CONST_BITS;
 8014170:	1958      	adds	r0, r3, r5
    tmp1 = (z2 - z3) << CONST_BITS;
 8014172:	1b5b      	subs	r3, r3, r5
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 8014174:	f242 55a1 	movw	r5, #9633	; 0x25a1
    tmp10 = tmp0 + tmp2;
 8014178:	eb02 3640 	add.w	r6, r2, r0, lsl #13
    tmp13 = tmp0 - tmp2;
 801417c:	ebc2 3240 	rsb	r2, r2, r0, lsl #13
 8014180:	9200      	str	r2, [sp, #0]
    tmp11 = tmp1 + tmp3;
 8014182:	eb0b 3243 	add.w	r2, fp, r3, lsl #13
    tmp12 = tmp1 - tmp3;
 8014186:	ebcb 3b43 	rsb	fp, fp, r3, lsl #13
    z2 = tmp0 + tmp2;
 801418a:	f851 3c14 	ldr.w	r3, [r1, #-20]
    tmp11 = tmp1 + tmp3;
 801418e:	9201      	str	r2, [sp, #4]
    z3 = tmp1 + tmp3;
 8014190:	eb0e 0209 	add.w	r2, lr, r9
    z2 = tmp0 + tmp2;
 8014194:	18f8      	adds	r0, r7, r3
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 8014196:	1883      	adds	r3, r0, r2
 8014198:	436b      	muls	r3, r5
    z2 += z1;
 801419a:	4d35      	ldr	r5, [pc, #212]	; (8014270 <jpeg_idct_8x4+0x1e4>)
 801419c:	fb05 3000 	mla	r0, r5, r0, r3
    z3 += z1;
 80141a0:	4d34      	ldr	r5, [pc, #208]	; (8014274 <jpeg_idct_8x4+0x1e8>)
 80141a2:	fb05 3302 	mla	r3, r5, r2, r3
    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 80141a6:	eb07 0209 	add.w	r2, r7, r9
 80141aa:	4d33      	ldr	r5, [pc, #204]	; (8014278 <jpeg_idct_8x4+0x1ec>)
 80141ac:	436a      	muls	r2, r5
    tmp0 += z1 + z2;
 80141ae:	f640 158e 	movw	r5, #2446	; 0x98e
 80141b2:	eb00 0a02 	add.w	sl, r0, r2
    tmp3 += z1 + z3;
 80141b6:	441a      	add	r2, r3
    tmp0 += z1 + z2;
 80141b8:	fb05 a707 	mla	r7, r5, r7, sl
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 80141bc:	f851 5c14 	ldr.w	r5, [r1, #-20]
    tmp3 += z1 + z3;
 80141c0:	f243 0a0b 	movw	sl, #12299	; 0x300b
 80141c4:	fb0a 2209 	mla	r2, sl, r9, r2
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 80141c8:	eb0e 0905 	add.w	r9, lr, r5
 80141cc:	4d2b      	ldr	r5, [pc, #172]	; (801427c <jpeg_idct_8x4+0x1f0>)
    tmp1 += z1 + z3;
 80141ce:	f244 1ab3 	movw	sl, #16819	; 0x41b3
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 80141d2:	fb05 f909 	mul.w	r9, r5, r9
    tmp2 += z1 + z2;
 80141d6:	f851 5c14 	ldr.w	r5, [r1, #-20]
    tmp1 += z1 + z3;
 80141da:	444b      	add	r3, r9
    tmp2 += z1 + z2;
 80141dc:	4448      	add	r0, r9
 80141de:	f246 2954 	movw	r9, #25172	; 0x6254
    tmp1 += z1 + z3;
 80141e2:	fb0a 3a0e 	mla	sl, sl, lr, r3
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 80141e6:	eb06 0e02 	add.w	lr, r6, r2
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 80141ea:	1ab6      	subs	r6, r6, r2
    tmp2 += z1 + z2;
 80141ec:	fb09 0005 	mla	r0, r9, r5, r0
			    & RANGE_MASK];
 80141f0:	f3ce 4e89 	ubfx	lr, lr, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 80141f4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80141f6:	9d02      	ldr	r5, [sp, #8]
			    & RANGE_MASK];
 80141f8:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 80141fc:	f81c e00e 	ldrb.w	lr, [ip, lr]
 8014200:	f805 e003 	strb.w	lr, [r5, r3]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 8014204:	9b01      	ldr	r3, [sp, #4]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 8014206:	f81c 2006 	ldrb.w	r2, [ip, r6]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 801420a:	eba3 0900 	sub.w	r9, r3, r0
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 801420e:	71e2      	strb	r2, [r4, #7]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 8014210:	181a      	adds	r2, r3, r0
			    & RANGE_MASK];
 8014212:	f3c9 4989 	ubfx	r9, r9, #18, #10
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 8014216:	ebab 030a 	sub.w	r3, fp, sl
			    & RANGE_MASK];
 801421a:	f3c2 4289 	ubfx	r2, r2, #18, #10
			    & RANGE_MASK];
 801421e:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 8014222:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8014226:	7062      	strb	r2, [r4, #1]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 8014228:	f81c 2009 	ldrb.w	r2, [ip, r9]
 801422c:	71a2      	strb	r2, [r4, #6]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 801422e:	eb0b 020a 	add.w	r2, fp, sl
			    & RANGE_MASK];
 8014232:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 8014236:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801423a:	70a2      	strb	r2, [r4, #2]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 801423c:	f81c 3003 	ldrb.w	r3, [ip, r3]
 8014240:	7163      	strb	r3, [r4, #5]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 8014242:	9b00      	ldr	r3, [sp, #0]
 8014244:	443b      	add	r3, r7
			    & RANGE_MASK];
 8014246:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 801424a:	f81c 3003 	ldrb.w	r3, [ip, r3]
 801424e:	70e3      	strb	r3, [r4, #3]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 8014250:	9b00      	ldr	r3, [sp, #0]
 8014252:	1bdf      	subs	r7, r3, r7
			    & RANGE_MASK];
 8014254:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 8014258:	f81c 3007 	ldrb.w	r3, [ip, r7]
 801425c:	7123      	strb	r3, [r4, #4]
  for (ctr = 0; ctr < 4; ctr++) {
 801425e:	9b03      	ldr	r3, [sp, #12]
 8014260:	4543      	cmp	r3, r8
 8014262:	f47f af63 	bne.w	801412c <jpeg_idct_8x4+0xa0>
  }
}
 8014266:	b025      	add	sp, #148	; 0x94
 8014268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801426c:	ffffc4df 	.word	0xffffc4df
 8014270:	ffffc13b 	.word	0xffffc13b
 8014274:	fffff384 	.word	0xfffff384
 8014278:	ffffe333 	.word	0xffffe333
 801427c:	ffffadfd 	.word	0xffffadfd

08014280 <jpeg_idct_6x3>:

GLOBAL(void)
jpeg_idct_6x3 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8014280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014284:	b095      	sub	sp, #84	; 0x54
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8014286:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
 801428a:	6d49      	ldr	r1, [r1, #84]	; 0x54
 801428c:	f1a2 0e02 	sub.w	lr, r2, #2
  /* Pass 1: process columns from input, store into work array.
   * 3-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/6).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 8014290:	ad02      	add	r5, sp, #8
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8014292:	3080      	adds	r0, #128	; 0x80
 8014294:	f102 040a 	add.w	r4, r2, #10
 8014298:	f1a1 0c04 	sub.w	ip, r1, #4
 801429c:	462a      	mov	r2, r5
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
    tmp0 <<= CONST_BITS;
    /* Add fudge factor here for final descale. */
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 801429e:	f241 69a1 	movw	r9, #5793	; 0x16a1
    tmp2 = tmp0 - tmp12 - tmp12;

    /* Odd part */

    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 80142a2:	f242 7831 	movw	r8, #10033	; 0x2731
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80142a6:	9001      	str	r0, [sp, #4]
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80142a8:	f93e 1f02 	ldrsh.w	r1, [lr, #2]!
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 80142ac:	3504      	adds	r5, #4
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80142ae:	f85c 6f04 	ldr.w	r6, [ip, #4]!
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80142b2:	f9be 7020 	ldrsh.w	r7, [lr, #32]
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 80142b6:	4574      	cmp	r4, lr
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80142b8:	fb06 f101 	mul.w	r1, r6, r1
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80142bc:	f8dc 6040 	ldr.w	r6, [ip, #64]	; 0x40
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80142c0:	f9be a010 	ldrsh.w	sl, [lr, #16]
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80142c4:	fb07 f606 	mul.w	r6, r7, r6
    tmp0 <<= CONST_BITS;
 80142c8:	ea4f 3141 	mov.w	r1, r1, lsl #13
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80142cc:	f8dc 0020 	ldr.w	r0, [ip, #32]
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 80142d0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 80142d4:	fb09 f606 	mul.w	r6, r9, r6
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80142d8:	fb00 fa0a 	mul.w	sl, r0, sl
    tmp10 = tmp0 + tmp12;
 80142dc:	eb01 0706 	add.w	r7, r1, r6
    tmp2 = tmp0 - tmp12 - tmp12;
 80142e0:	eba1 0146 	sub.w	r1, r1, r6, lsl #1
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 80142e4:	fb08 fa0a 	mul.w	sl, r8, sl

    /* Final output stage */

    wsptr[6*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
    wsptr[6*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
    wsptr[6*1] = (int) RIGHT_SHIFT(tmp2, CONST_BITS-PASS1_BITS);
 80142e8:	ea4f 21e1 	mov.w	r1, r1, asr #11
    wsptr[6*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 80142ec:	eb07 0b0a 	add.w	fp, r7, sl
    wsptr[6*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 80142f0:	eba7 070a 	sub.w	r7, r7, sl
    wsptr[6*1] = (int) RIGHT_SHIFT(tmp2, CONST_BITS-PASS1_BITS);
 80142f4:	6169      	str	r1, [r5, #20]
    wsptr[6*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 80142f6:	ea4f 2beb 	mov.w	fp, fp, asr #11
    wsptr[6*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 80142fa:	ea4f 27e7 	mov.w	r7, r7, asr #11
    wsptr[6*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 80142fe:	f845 bc04 	str.w	fp, [r5, #-4]
    wsptr[6*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8014302:	62ef      	str	r7, [r5, #44]	; 0x2c
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 8014304:	d1d0      	bne.n	80142a8 <jpeg_idct_6x3+0x28>
 8014306:	f1a3 0e04 	sub.w	lr, r3, #4
 801430a:	f103 0908 	add.w	r9, r3, #8
  /* Pass 2: process 3 rows from work array, store into output array.
   * 6-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/12).
   */
  wsptr = workspace;
  for (ctr = 0; ctr < 3; ctr++) {
    outptr = output_buf[ctr] + output_col;
 801430e:	f85e af04 	ldr.w	sl, [lr, #4]!

    /* Add fudge factor here for final descale. */
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp0 <<= CONST_BITS;
    tmp2 = (INT32) wsptr[4];
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 8014312:	f241 60a1 	movw	r0, #5793	; 0x16a1
    outptr = output_buf[ctr] + output_col;
 8014316:	9b1e      	ldr	r3, [sp, #120]	; 0x78
			    & RANGE_MASK];
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 6;		/* advance pointer to next row */
 8014318:	3218      	adds	r2, #24
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 801431a:	f852 1c08 	ldr.w	r1, [r2, #-8]
  for (ctr = 0; ctr < 3; ctr++) {
 801431e:	45f1      	cmp	r9, lr
    outptr = output_buf[ctr] + output_col;
 8014320:	eb0a 0703 	add.w	r7, sl, r3
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8014324:	f852 3c18 	ldr.w	r3, [r2, #-24]
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 8014328:	fb00 f101 	mul.w	r1, r0, r1
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 801432c:	f852 4c10 	ldr.w	r4, [r2, #-16]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8014330:	f103 0310 	add.w	r3, r3, #16
    z3 = (INT32) wsptr[5];
 8014334:	f852 8c04 	ldr.w	r8, [r2, #-4]
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8014338:	f640 30b6 	movw	r0, #2998	; 0xbb6
    tmp1 = tmp0 + tmp10;
 801433c:	eb01 3543 	add.w	r5, r1, r3, lsl #13
    tmp11 = tmp0 - tmp10 - tmp10;
 8014340:	ebc1 3343 	rsb	r3, r1, r3, lsl #13
 8014344:	eba3 0301 	sub.w	r3, r3, r1
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 8014348:	f242 7131 	movw	r1, #10033	; 0x2731
 801434c:	fb01 f104 	mul.w	r1, r1, r4
    z1 = (INT32) wsptr[1];
 8014350:	f852 4c14 	ldr.w	r4, [r2, #-20]
    tmp10 = tmp1 + tmp0;
 8014354:	eb05 0601 	add.w	r6, r5, r1
    tmp12 = tmp1 - tmp0;
 8014358:	eba5 0101 	sub.w	r1, r5, r1
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 801435c:	eb04 0508 	add.w	r5, r4, r8
 8014360:	fb00 f505 	mul.w	r5, r0, r5
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 8014364:	f852 0c0c 	ldr.w	r0, [r2, #-12]
 8014368:	eb04 0c00 	add.w	ip, r4, r0
    tmp1 = (z1 - z2 - z3) << CONST_BITS;
 801436c:	eba4 0400 	sub.w	r4, r4, r0
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 8014370:	eba8 0b00 	sub.w	fp, r8, r0
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8014374:	9801      	ldr	r0, [sp, #4]
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 8014376:	eb05 3c4c 	add.w	ip, r5, ip, lsl #13
    tmp1 = (z1 - z2 - z3) << CONST_BITS;
 801437a:	eba4 0808 	sub.w	r8, r4, r8
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 801437e:	eb05 354b 	add.w	r5, r5, fp, lsl #13
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8014382:	eb06 040c 	add.w	r4, r6, ip
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8014386:	eba6 060c 	sub.w	r6, r6, ip
			    & RANGE_MASK];
 801438a:	f3c4 4489 	ubfx	r4, r4, #18, #10
			    & RANGE_MASK];
 801438e:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8014392:	5d04      	ldrb	r4, [r0, r4]
 8014394:	981e      	ldr	r0, [sp, #120]	; 0x78
 8014396:	f80a 4000 	strb.w	r4, [sl, r0]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 801439a:	9801      	ldr	r0, [sp, #4]
 801439c:	5d84      	ldrb	r4, [r0, r6]
 801439e:	717c      	strb	r4, [r7, #5]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 80143a0:	eb03 3448 	add.w	r4, r3, r8, lsl #13
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 80143a4:	eba3 3848 	sub.w	r8, r3, r8, lsl #13
			    & RANGE_MASK];
 80143a8:	f3c4 4489 	ubfx	r4, r4, #18, #10
			    & RANGE_MASK];
 80143ac:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 80143b0:	5d04      	ldrb	r4, [r0, r4]
 80143b2:	707c      	strb	r4, [r7, #1]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 80143b4:	f810 3008 	ldrb.w	r3, [r0, r8]
 80143b8:	713b      	strb	r3, [r7, #4]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 80143ba:	eb01 0305 	add.w	r3, r1, r5
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 80143be:	eba1 0505 	sub.w	r5, r1, r5
			    & RANGE_MASK];
 80143c2:	f3c3 4389 	ubfx	r3, r3, #18, #10
			    & RANGE_MASK];
 80143c6:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 80143ca:	5cc3      	ldrb	r3, [r0, r3]
 80143cc:	70bb      	strb	r3, [r7, #2]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 80143ce:	5d43      	ldrb	r3, [r0, r5]
 80143d0:	70fb      	strb	r3, [r7, #3]
  for (ctr = 0; ctr < 3; ctr++) {
 80143d2:	d19c      	bne.n	801430e <jpeg_idct_6x3+0x8e>
  }
}
 80143d4:	b015      	add	sp, #84	; 0x54
 80143d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080143dc <jpeg_idct_4x2>:

GLOBAL(void)
jpeg_idct_4x2 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80143dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80143e0:	b08b      	sub	sp, #44	; 0x2c
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  INT32 * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80143e2:	f8d0 514c 	ldr.w	r5, [r0, #332]	; 0x14c
 80143e6:	6d4c      	ldr	r4, [r1, #84]	; 0x54
 80143e8:	1e96      	subs	r6, r2, #2
 80143ea:	f10d 0c08 	add.w	ip, sp, #8
 80143ee:	3580      	adds	r5, #128	; 0x80
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 80143f0:	3c04      	subs	r4, #4
 80143f2:	f102 0e06 	add.w	lr, r2, #6
 80143f6:	4660      	mov	r0, ip
{
 80143f8:	9301      	str	r3, [sp, #4]
    /* Even part */

    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80143fa:	f936 2f02 	ldrsh.w	r2, [r6, #2]!
 80143fe:	f854 1f04 	ldr.w	r1, [r4, #4]!
  for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 8014402:	45b6      	cmp	lr, r6
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014404:	fb01 f202 	mul.w	r2, r1, r2

    /* Odd part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8014408:	6a27      	ldr	r7, [r4, #32]
 801440a:	f9b6 1010 	ldrsh.w	r1, [r6, #16]
 801440e:	fb07 f101 	mul.w	r1, r7, r1

    /* Final output stage */

    wsptr[4*0] = tmp10 + tmp0;
 8014412:	eb02 0701 	add.w	r7, r2, r1
    wsptr[4*1] = tmp10 - tmp0;
 8014416:	eba2 0201 	sub.w	r2, r2, r1
    wsptr[4*0] = tmp10 + tmp0;
 801441a:	f84c 7b04 	str.w	r7, [ip], #4
    wsptr[4*1] = tmp10 - tmp0;
 801441e:	f8cc 200c 	str.w	r2, [ip, #12]
  for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 8014422:	d1ea      	bne.n	80143fa <jpeg_idct_4x2+0x1e>
 8014424:	9b01      	ldr	r3, [sp, #4]
    /* Same rotation as in the even part of the 8x8 LL&M IDCT */

    z2 = wsptr[1];
    z3 = wsptr[3];

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 8014426:	f241 1a51 	movw	sl, #4433	; 0x1151
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 801442a:	f641 097e 	movw	r9, #6270	; 0x187e
 801442e:	f1a3 0c04 	sub.w	ip, r3, #4
    outptr = output_buf[ctr] + output_col;
 8014432:	46e0      	mov	r8, ip
 8014434:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014436:	f85c ef04 	ldr.w	lr, [ip, #4]!
			    & RANGE_MASK];
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
					      CONST_BITS+3)
			    & RANGE_MASK];

    wsptr += 4;		/* advance pointer to next row */
 801443a:	3010      	adds	r0, #16
    tmp0 = wsptr[0] + (ONE << 2);
 801443c:	f850 4c10 	ldr.w	r4, [r0, #-16]
    outptr = output_buf[ctr] + output_col;
 8014440:	eb0e 0602 	add.w	r6, lr, r2
    z3 = wsptr[3];
 8014444:	f850 7c04 	ldr.w	r7, [r0, #-4]
    tmp2 = wsptr[2];
 8014448:	f850 2c08 	ldr.w	r2, [r0, #-8]
    tmp0 = wsptr[0] + (ONE << 2);
 801444c:	3404      	adds	r4, #4
    z2 = wsptr[1];
 801444e:	f850 1c0c 	ldr.w	r1, [r0, #-12]
    tmp10 = (tmp0 + tmp2) << CONST_BITS;
 8014452:	eb04 0b02 	add.w	fp, r4, r2
    tmp12 = (tmp0 - tmp2) << CONST_BITS;
 8014456:	1aa4      	subs	r4, r4, r2
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 8014458:	19ca      	adds	r2, r1, r7
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 801445a:	4b13      	ldr	r3, [pc, #76]	; (80144a8 <jpeg_idct_4x2+0xcc>)
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 801445c:	fb0a f202 	mul.w	r2, sl, r2
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 8014460:	fb09 2101 	mla	r1, r9, r1, r2
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 8014464:	fb03 2207 	mla	r2, r3, r7, r2
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8014468:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801446a:	eb01 374b 	add.w	r7, r1, fp, lsl #13
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 801446e:	ebc1 314b 	rsb	r1, r1, fp, lsl #13
			    & RANGE_MASK];
 8014472:	f3c7 4709 	ubfx	r7, r7, #16, #10
			    & RANGE_MASK];
 8014476:	f3c1 4109 	ubfx	r1, r1, #16, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 801447a:	5def      	ldrb	r7, [r5, r7]
 801447c:	f80e 7003 	strb.w	r7, [lr, r3]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8014480:	5c69      	ldrb	r1, [r5, r1]
  for (ctr = 0; ctr < 2; ctr++) {
 8014482:	9b01      	ldr	r3, [sp, #4]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8014484:	70f1      	strb	r1, [r6, #3]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8014486:	eb02 3144 	add.w	r1, r2, r4, lsl #13
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 801448a:	ebc2 3244 	rsb	r2, r2, r4, lsl #13
  for (ctr = 0; ctr < 2; ctr++) {
 801448e:	4543      	cmp	r3, r8
			    & RANGE_MASK];
 8014490:	f3c1 4109 	ubfx	r1, r1, #16, #10
			    & RANGE_MASK];
 8014494:	f3c2 4209 	ubfx	r2, r2, #16, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8014498:	5c69      	ldrb	r1, [r5, r1]
 801449a:	7071      	strb	r1, [r6, #1]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 801449c:	5caa      	ldrb	r2, [r5, r2]
 801449e:	70b2      	strb	r2, [r6, #2]
  for (ctr = 0; ctr < 2; ctr++) {
 80144a0:	d1c7      	bne.n	8014432 <jpeg_idct_4x2+0x56>
  }
}
 80144a2:	b00b      	add	sp, #44	; 0x2c
 80144a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80144a8:	ffffc4df 	.word	0xffffc4df

080144ac <jpeg_idct_2x1>:

  /* Pass 1: empty. */

  /* Pass 2: process 1 row from input, store into output array. */

  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 80144ac:	6d49      	ldr	r1, [r1, #84]	; 0x54
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80144ae:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
{
 80144b2:	b5f0      	push	{r4, r5, r6, r7, lr}
  outptr = output_buf[0] + output_col;
 80144b4:	681d      	ldr	r5, [r3, #0]
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80144b6:	3080      	adds	r0, #128	; 0x80

  /* Even part */

  tmp10 = DEQUANTIZE(coef_block[0], quantptr[0]);
 80144b8:	f9b2 3000 	ldrsh.w	r3, [r2]
 80144bc:	680f      	ldr	r7, [r1, #0]
  /* Add fudge factor here for final descale. */
  tmp10 += ONE << 2;

  /* Odd part */

  tmp0 = DEQUANTIZE(coef_block[1], quantptr[1]);
 80144be:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80144c2:	6849      	ldr	r1, [r1, #4]
  tmp10 = DEQUANTIZE(coef_block[0], quantptr[0]);
 80144c4:	437b      	muls	r3, r7
{
 80144c6:	9c05      	ldr	r4, [sp, #20]
  tmp10 += ONE << 2;
 80144c8:	3304      	adds	r3, #4
  tmp0 = DEQUANTIZE(coef_block[1], quantptr[1]);
 80144ca:	434a      	muls	r2, r1
  outptr = output_buf[0] + output_col;
 80144cc:	192e      	adds	r6, r5, r4

  /* Final output stage */

  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, 3) & RANGE_MASK];
 80144ce:	1899      	adds	r1, r3, r2
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, 3) & RANGE_MASK];
 80144d0:	1a9b      	subs	r3, r3, r2
  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, 3) & RANGE_MASK];
 80144d2:	f3c1 01c9 	ubfx	r1, r1, #3, #10
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, 3) & RANGE_MASK];
 80144d6:	f3c3 03c9 	ubfx	r3, r3, #3, #10
  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, 3) & RANGE_MASK];
 80144da:	5c41      	ldrb	r1, [r0, r1]
 80144dc:	5529      	strb	r1, [r5, r4]
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, 3) & RANGE_MASK];
 80144de:	5cc3      	ldrb	r3, [r0, r3]
 80144e0:	7073      	strb	r3, [r6, #1]
}
 80144e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080144e4 <jpeg_idct_8x16>:

GLOBAL(void)
jpeg_idct_8x16 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80144e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80144e8:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 80144ec:	f1a2 0802 	sub.w	r8, r2, #2
 80144f0:	930c      	str	r3, [sp, #48]	; 0x30
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80144f2:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 80144f6:	3380      	adds	r3, #128	; 0x80
 80144f8:	9300      	str	r3, [sp, #0]
   * 16-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/32).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80144fa:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 80144fc:	f1a3 0904 	sub.w	r9, r3, #4
 8014500:	f102 030e 	add.w	r3, r2, #14
 8014504:	930d      	str	r3, [sp, #52]	; 0x34
  wsptr = workspace;
 8014506:	ab0e      	add	r3, sp, #56	; 0x38
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014508:	f938 2f02 	ldrsh.w	r2, [r8, #2]!
    /* Add fudge factor here for final descale. */
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);

    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 801450c:	f241 1451 	movw	r4, #4433	; 0x1151
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014510:	f859 1f04 	ldr.w	r1, [r9, #4]!
    tmp13 = tmp0 - tmp2;

    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
    z3 = z1 - z2;
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 8014514:	f640 05d4 	movw	r5, #2260	; 0x8d4
    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8014518:	f9b8 0040 	ldrsh.w	r0, [r8, #64]	; 0x40
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */

    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 801451c:	f245 2c03 	movw	ip, #20995	; 0x5203
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014520:	434a      	muls	r2, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8014522:	f8d9 1080 	ldr.w	r1, [r9, #128]	; 0x80
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8014526:	3304      	adds	r3, #4
    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8014528:	4341      	muls	r1, r0
    tmp0 <<= CONST_BITS;
 801452a:	0352      	lsls	r2, r2, #13
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 801452c:	f642 10cf 	movw	r0, #10703	; 0x29cf
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 8014530:	f502 6280 	add.w	r2, r2, #1024	; 0x400
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 8014534:	4348      	muls	r0, r1
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 8014536:	4361      	muls	r1, r4
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8014538:	f9b8 4020 	ldrsh.w	r4, [r8, #32]
    tmp10 = tmp0 + tmp1;
 801453c:	1817      	adds	r7, r2, r0
    tmp11 = tmp0 - tmp1;
 801453e:	1a10      	subs	r0, r2, r0
    tmp12 = tmp0 + tmp2;
 8014540:	1856      	adds	r6, r2, r1
    tmp13 = tmp0 - tmp2;
 8014542:	eba2 0b01 	sub.w	fp, r2, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8014546:	f8d9 1040 	ldr.w	r1, [r9, #64]	; 0x40
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 801454a:	4ad3      	ldr	r2, [pc, #844]	; (8014898 <jpeg_idct_8x16+0x3b4>)
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801454c:	fb01 fe04 	mul.w	lr, r1, r4
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8014550:	f9b8 4060 	ldrsh.w	r4, [r8, #96]	; 0x60
 8014554:	f8d9 10c0 	ldr.w	r1, [r9, #192]	; 0xc0
 8014558:	4361      	muls	r1, r4
    z3 = z1 - z2;
 801455a:	ebae 0401 	sub.w	r4, lr, r1
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 801455e:	fb05 fa04 	mul.w	sl, r5, r4
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 8014562:	f642 4563 	movw	r5, #11363	; 0x2c63
 8014566:	436c      	muls	r4, r5
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 8014568:	f641 45cd 	movw	r5, #7373	; 0x1ccd
    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 801456c:	fb0c 4c01 	mla	ip, ip, r1, r4
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 8014570:	fb02 440e 	mla	r4, r2, lr, r4
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 8014574:	f202 22ee 	addw	r2, r2, #750	; 0x2ee
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 8014578:	fb05 a50e 	mla	r5, r5, lr, sl
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 801457c:	fb02 a101 	mla	r1, r2, r1, sl

    tmp20 = tmp10 + tmp0;
 8014580:	eb07 020c 	add.w	r2, r7, ip
 8014584:	9201      	str	r2, [sp, #4]
    tmp27 = tmp10 - tmp0;
 8014586:	eba7 020c 	sub.w	r2, r7, ip
 801458a:	9202      	str	r2, [sp, #8]
    tmp21 = tmp12 + tmp1;
 801458c:	1972      	adds	r2, r6, r5
 801458e:	9203      	str	r2, [sp, #12]
    tmp26 = tmp12 - tmp1;
 8014590:	1b72      	subs	r2, r6, r5

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8014592:	f9b8 5050 	ldrsh.w	r5, [r8, #80]	; 0x50
    tmp26 = tmp12 - tmp1;
 8014596:	9204      	str	r2, [sp, #16]
    tmp22 = tmp13 + tmp2;
 8014598:	eb0b 0204 	add.w	r2, fp, r4
 801459c:	9205      	str	r2, [sp, #20]
    tmp25 = tmp13 - tmp2;
 801459e:	ebab 0204 	sub.w	r2, fp, r4
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80145a2:	f9b8 4070 	ldrsh.w	r4, [r8, #112]	; 0x70
    tmp25 = tmp13 - tmp2;
 80145a6:	9206      	str	r2, [sp, #24]
    tmp23 = tmp11 + tmp3;
 80145a8:	1842      	adds	r2, r0, r1
 80145aa:	9207      	str	r2, [sp, #28]
    tmp24 = tmp11 - tmp3;
 80145ac:	1a42      	subs	r2, r0, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80145ae:	f9b8 1010 	ldrsh.w	r1, [r8, #16]
    tmp24 = tmp11 - tmp3;
 80145b2:	9208      	str	r2, [sp, #32]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80145b4:	f8d9 2020 	ldr.w	r2, [r9, #32]
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80145b8:	f9b8 0030 	ldrsh.w	r0, [r8, #48]	; 0x30
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80145bc:	4351      	muls	r1, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80145be:	f8d9 2060 	ldr.w	r2, [r9, #96]	; 0x60
 80145c2:	4342      	muls	r2, r0
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80145c4:	f8d9 00a0 	ldr.w	r0, [r9, #160]	; 0xa0
 80145c8:	4345      	muls	r5, r0
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80145ca:	f8d9 00e0 	ldr.w	r0, [r9, #224]	; 0xe0

    tmp11 = z1 + z3;

    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 80145ce:	188e      	adds	r6, r1, r2
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 80145d0:	eba1 0b02 	sub.w	fp, r1, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80145d4:	4360      	muls	r0, r4
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 80145d6:	f642 344e 	movw	r4, #11086	; 0x2b4e
    tmp11 = z1 + z3;
 80145da:	194f      	adds	r7, r1, r5
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 80145dc:	4366      	muls	r6, r4
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 80145de:	f242 74e9 	movw	r4, #10217	; 0x27e9
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 80145e2:	eb01 0e00 	add.w	lr, r1, r0
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 80145e6:	eba1 0c00 	sub.w	ip, r1, r0
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 80145ea:	fb04 fa07 	mul.w	sl, r4, r7
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 80145ee:	f242 24fc 	movw	r4, #8956	; 0x22fc
 80145f2:	fb04 fe0e 	mul.w	lr, r4, lr
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 80145f6:	f641 44b6 	movw	r4, #7350	; 0x1cb6
 80145fa:	fb04 fc0c 	mul.w	ip, r4, ip
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
 80145fe:	f241 5455 	movw	r4, #5461	; 0x1555
 8014602:	437c      	muls	r4, r7
    tmp0  = tmp1 + tmp2 + tmp3 -
 8014604:	eb06 070a 	add.w	r7, r6, sl
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
 8014608:	9409      	str	r4, [sp, #36]	; 0x24
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 801460a:	f640 5423 	movw	r4, #3363	; 0xd23
    tmp0  = tmp1 + tmp2 + tmp3 -
 801460e:	4477      	add	r7, lr
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8014610:	fb04 fb0b 	mul.w	fp, r4, fp
    tmp0  = tmp1 + tmp2 + tmp3 -
 8014614:	4ca1      	ldr	r4, [pc, #644]	; (801489c <jpeg_idct_8x16+0x3b8>)
 8014616:	fb04 7401 	mla	r4, r4, r1, r7
	    MULTIPLY(z1, FIX(2.286341144));        /* c7+c5+c3-c1 */
    tmp13 = tmp10 + tmp11 + tmp12 -
 801461a:	4fa1      	ldr	r7, [pc, #644]	; (80148a0 <jpeg_idct_8x16+0x3bc>)
    tmp0  = tmp1 + tmp2 + tmp3 -
 801461c:	940a      	str	r4, [sp, #40]	; 0x28
    tmp13 = tmp10 + tmp11 + tmp12 -
 801461e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8014620:	4464      	add	r4, ip
 8014622:	445c      	add	r4, fp
 8014624:	fb07 4101 	mla	r1, r7, r1, r4
	    MULTIPLY(z1, FIX(1.835730603));        /* c9+c11+c13-c15 */
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 8014628:	1954      	adds	r4, r2, r5
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 801462a:	4f9e      	ldr	r7, [pc, #632]	; (80148a4 <jpeg_idct_8x16+0x3c0>)
    tmp13 = tmp10 + tmp11 + tmp12 -
 801462c:	910b      	str	r1, [sp, #44]	; 0x2c
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 801462e:	f44f 618e 	mov.w	r1, #1136	; 0x470
 8014632:	434c      	muls	r4, r1
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
 8014634:	f240 214d 	movw	r1, #589	; 0x24d
 8014638:	fb01 4102 	mla	r1, r1, r2, r4
 801463c:	440e      	add	r6, r1
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 801463e:	499a      	ldr	r1, [pc, #616]	; (80148a8 <jpeg_idct_8x16+0x3c4>)
 8014640:	fb01 4405 	mla	r4, r1, r5, r4
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 8014644:	1aa9      	subs	r1, r5, r2
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 8014646:	4454      	add	r4, sl
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 8014648:	f642 5a09 	movw	sl, #11529	; 0x2d09
 801464c:	fb0a f101 	mul.w	r1, sl, r1
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8014650:	fb07 1a05 	mla	sl, r7, r5, r1
 8014654:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8014656:	4457      	add	r7, sl
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 8014658:	f643 7a1a 	movw	sl, #16154	; 0x3f1a
 801465c:	fb0a 1a02 	mla	sl, sl, r2, r1
    z2    += z4;
 8014660:	4402      	add	r2, r0
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 8014662:	4992      	ldr	r1, [pc, #584]	; (80148ac <jpeg_idct_8x16+0x3c8>)
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 8014664:	44da      	add	sl, fp
    tmp1  += z1;
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 8014666:	f242 2b18 	movw	fp, #8728	; 0x2218
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 801466a:	4351      	muls	r1, r2
    tmp1  += z1;
 801466c:	440e      	add	r6, r1
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 801466e:	fb0b 1100 	mla	r1, fp, r0, r1
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8014672:	f246 4b85 	movw	fp, #25733	; 0x6485
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 8014676:	448e      	add	lr, r1
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
 8014678:	498d      	ldr	r1, [pc, #564]	; (80148b0 <jpeg_idct_8x16+0x3cc>)
 801467a:	434a      	muls	r2, r1
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 801467c:	fb0b 2b00 	mla	fp, fp, r0, r2
    tmp12 += z2;
 8014680:	4452      	add	r2, sl
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8014682:	f46f 7a59 	mvn.w	sl, #868	; 0x364
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8014686:	44dc      	add	ip, fp
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8014688:	eb05 0b00 	add.w	fp, r5, r0
 801468c:	4451      	add	r1, sl
    tmp2  += z2;
    tmp3  += z2;
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 801468e:	1b40      	subs	r0, r0, r5
    tmp10 += z2;
    tmp11 += z2;

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 8014690:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8014692:	fb01 fb0b 	mul.w	fp, r1, fp
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 8014696:	f640 5123 	movw	r1, #3363	; 0xd23
 801469a:	4348      	muls	r0, r1
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 801469c:	9901      	ldr	r1, [sp, #4]
    tmp2  += z2;
 801469e:	445c      	add	r4, fp
    tmp3  += z2;
 80146a0:	44de      	add	lr, fp
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 80146a2:	4429      	add	r1, r5
    tmp10 += z2;
 80146a4:	4484      	add	ip, r0
    tmp11 += z2;
 80146a6:	4438      	add	r0, r7
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 80146a8:	12c9      	asrs	r1, r1, #11
 80146aa:	f843 1c04 	str.w	r1, [r3, #-4]
    wsptr[8*15] = (int) RIGHT_SHIFT(tmp20 - tmp0,  CONST_BITS-PASS1_BITS);
 80146ae:	9901      	ldr	r1, [sp, #4]
 80146b0:	1b4f      	subs	r7, r1, r5
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp1,  CONST_BITS-PASS1_BITS);
 80146b2:	9903      	ldr	r1, [sp, #12]
 80146b4:	4431      	add	r1, r6
    wsptr[8*15] = (int) RIGHT_SHIFT(tmp20 - tmp0,  CONST_BITS-PASS1_BITS);
 80146b6:	12ff      	asrs	r7, r7, #11
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp1,  CONST_BITS-PASS1_BITS);
 80146b8:	12c9      	asrs	r1, r1, #11
    wsptr[8*15] = (int) RIGHT_SHIFT(tmp20 - tmp0,  CONST_BITS-PASS1_BITS);
 80146ba:	f8c3 71dc 	str.w	r7, [r3, #476]	; 0x1dc
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp1,  CONST_BITS-PASS1_BITS);
 80146be:	61d9      	str	r1, [r3, #28]
    wsptr[8*14] = (int) RIGHT_SHIFT(tmp21 - tmp1,  CONST_BITS-PASS1_BITS);
 80146c0:	9903      	ldr	r1, [sp, #12]
 80146c2:	1b8e      	subs	r6, r1, r6
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp2,  CONST_BITS-PASS1_BITS);
 80146c4:	9905      	ldr	r1, [sp, #20]
 80146c6:	4421      	add	r1, r4
    wsptr[8*14] = (int) RIGHT_SHIFT(tmp21 - tmp1,  CONST_BITS-PASS1_BITS);
 80146c8:	12f6      	asrs	r6, r6, #11
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp2,  CONST_BITS-PASS1_BITS);
 80146ca:	12c9      	asrs	r1, r1, #11
    wsptr[8*14] = (int) RIGHT_SHIFT(tmp21 - tmp1,  CONST_BITS-PASS1_BITS);
 80146cc:	f8c3 61bc 	str.w	r6, [r3, #444]	; 0x1bc
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp2,  CONST_BITS-PASS1_BITS);
 80146d0:	63d9      	str	r1, [r3, #60]	; 0x3c
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp22 - tmp2,  CONST_BITS-PASS1_BITS);
 80146d2:	9905      	ldr	r1, [sp, #20]
 80146d4:	1b0c      	subs	r4, r1, r4
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp3,  CONST_BITS-PASS1_BITS);
 80146d6:	9907      	ldr	r1, [sp, #28]
 80146d8:	4471      	add	r1, lr
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp22 - tmp2,  CONST_BITS-PASS1_BITS);
 80146da:	12e4      	asrs	r4, r4, #11
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp3,  CONST_BITS-PASS1_BITS);
 80146dc:	12c9      	asrs	r1, r1, #11
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp22 - tmp2,  CONST_BITS-PASS1_BITS);
 80146de:	f8c3 419c 	str.w	r4, [r3, #412]	; 0x19c
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp3,  CONST_BITS-PASS1_BITS);
 80146e2:	65d9      	str	r1, [r3, #92]	; 0x5c
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp23 - tmp3,  CONST_BITS-PASS1_BITS);
 80146e4:	9907      	ldr	r1, [sp, #28]
 80146e6:	eba1 0e0e 	sub.w	lr, r1, lr
 80146ea:	ea4f 21ee 	mov.w	r1, lr, asr #11
 80146ee:	f8c3 117c 	str.w	r1, [r3, #380]	; 0x17c
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp10, CONST_BITS-PASS1_BITS);
 80146f2:	9908      	ldr	r1, [sp, #32]
 80146f4:	4461      	add	r1, ip
 80146f6:	12c9      	asrs	r1, r1, #11
 80146f8:	67d9      	str	r1, [r3, #124]	; 0x7c
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp24 - tmp10, CONST_BITS-PASS1_BITS);
 80146fa:	9908      	ldr	r1, [sp, #32]
 80146fc:	eba1 0c0c 	sub.w	ip, r1, ip
 8014700:	ea4f 21ec 	mov.w	r1, ip, asr #11
 8014704:	f8c3 115c 	str.w	r1, [r3, #348]	; 0x15c
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp11, CONST_BITS-PASS1_BITS);
 8014708:	9906      	ldr	r1, [sp, #24]
 801470a:	4401      	add	r1, r0
 801470c:	12c9      	asrs	r1, r1, #11
 801470e:	f8c3 109c 	str.w	r1, [r3, #156]	; 0x9c
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp25 - tmp11, CONST_BITS-PASS1_BITS);
 8014712:	9906      	ldr	r1, [sp, #24]
 8014714:	1a08      	subs	r0, r1, r0
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp12, CONST_BITS-PASS1_BITS);
 8014716:	9904      	ldr	r1, [sp, #16]
 8014718:	4411      	add	r1, r2
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp25 - tmp11, CONST_BITS-PASS1_BITS);
 801471a:	12c0      	asrs	r0, r0, #11
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp12, CONST_BITS-PASS1_BITS);
 801471c:	12c9      	asrs	r1, r1, #11
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp25 - tmp11, CONST_BITS-PASS1_BITS);
 801471e:	f8c3 013c 	str.w	r0, [r3, #316]	; 0x13c
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp12, CONST_BITS-PASS1_BITS);
 8014722:	f8c3 10bc 	str.w	r1, [r3, #188]	; 0xbc
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp26 - tmp12, CONST_BITS-PASS1_BITS);
 8014726:	9904      	ldr	r1, [sp, #16]
 8014728:	1a8a      	subs	r2, r1, r2
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp27 + tmp13, CONST_BITS-PASS1_BITS);
 801472a:	990b      	ldr	r1, [sp, #44]	; 0x2c
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp26 - tmp12, CONST_BITS-PASS1_BITS);
 801472c:	12d2      	asrs	r2, r2, #11
 801472e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp27 + tmp13, CONST_BITS-PASS1_BITS);
 8014732:	9a02      	ldr	r2, [sp, #8]
 8014734:	440a      	add	r2, r1
 8014736:	12d2      	asrs	r2, r2, #11
 8014738:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp27 - tmp13, CONST_BITS-PASS1_BITS);
 801473c:	9a02      	ldr	r2, [sp, #8]
 801473e:	1a54      	subs	r4, r2, r1
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8014740:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp27 - tmp13, CONST_BITS-PASS1_BITS);
 8014742:	12e4      	asrs	r4, r4, #11
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8014744:	4542      	cmp	r2, r8
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp27 - tmp13, CONST_BITS-PASS1_BITS);
 8014746:	f8c3 40fc 	str.w	r4, [r3, #252]	; 0xfc
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801474a:	f47f aedd 	bne.w	8014508 <jpeg_idct_8x16+0x24>
 801474e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  
  /* Pass 2: process rows from work array, store into output array. */
  /* Note that we must descale the results by a factor of 8 == 2**3, */
  /* and also undo the PASS1_BITS scaling. */

  wsptr = workspace;
 8014750:	a80e      	add	r0, sp, #56	; 0x38
 8014752:	f1a3 0904 	sub.w	r9, r3, #4
 8014756:	333c      	adds	r3, #60	; 0x3c
 8014758:	9304      	str	r3, [sp, #16]
  for (ctr = 0; ctr < 16; ctr++) {
    outptr = output_buf[ctr] + output_col;
 801475a:	f859 3f04 	ldr.w	r3, [r9, #4]!
    /* The rotator is sqrt(2)*c(-6). */
    
    z2 = (INT32) wsptr[2];
    z3 = (INT32) wsptr[6];
    
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 801475e:	f241 1451 	movw	r4, #4433	; 0x1151
    outptr = output_buf[ctr] + output_col;
 8014762:	9a98      	ldr	r2, [sp, #608]	; 0x260
			    & RANGE_MASK];
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
    
    wsptr += DCTSIZE;		/* advance pointer to next row */
 8014764:	3020      	adds	r0, #32
    z2 = (INT32) wsptr[2];
 8014766:	f850 1c18 	ldr.w	r1, [r0, #-24]
    outptr = output_buf[ctr] + output_col;
 801476a:	189d      	adds	r5, r3, r2
    z3 = (INT32) wsptr[6];
 801476c:	f850 2c08 	ldr.w	r2, [r0, #-8]
    outptr = output_buf[ctr] + output_col;
 8014770:	9303      	str	r3, [sp, #12]
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 8014772:	188b      	adds	r3, r1, r2
    z3 = (INT32) wsptr[4];
 8014774:	f850 6c10 	ldr.w	r6, [r0, #-16]
    tmp1 = (INT32) wsptr[5];
 8014778:	f850 8c0c 	ldr.w	r8, [r0, #-12]
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 801477c:	4363      	muls	r3, r4
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 801477e:	f641 047e 	movw	r4, #6270	; 0x187e
    tmp2 = (INT32) wsptr[3];
 8014782:	f850 ec14 	ldr.w	lr, [r0, #-20]
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 8014786:	fb04 3101 	mla	r1, r4, r1, r3
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 801478a:	4c4a      	ldr	r4, [pc, #296]	; (80148b4 <jpeg_idct_8x16+0x3d0>)
    tmp3 = (INT32) wsptr[1];
 801478c:	f850 ac1c 	ldr.w	sl, [r0, #-28]
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 8014790:	fb04 3302 	mla	r3, r4, r2, r3
    z2 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8014794:	f850 2c20 	ldr.w	r2, [r0, #-32]
    tmp0 = (INT32) wsptr[7];
 8014798:	f850 cc04 	ldr.w	ip, [r0, #-4]
    z2 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801479c:	3210      	adds	r2, #16
    tmp0 = (z2 + z3) << CONST_BITS;
 801479e:	1994      	adds	r4, r2, r6
    tmp1 = (z2 - z3) << CONST_BITS;
 80147a0:	1b92      	subs	r2, r2, r6
    tmp10 = tmp0 + tmp2;
 80147a2:	eb01 3744 	add.w	r7, r1, r4, lsl #13
    tmp13 = tmp0 - tmp2;
 80147a6:	ebc1 3144 	rsb	r1, r1, r4, lsl #13
    z2 = tmp0 + tmp2;
 80147aa:	eb0c 040e 	add.w	r4, ip, lr
    tmp11 = tmp1 + tmp3;
 80147ae:	eb03 3642 	add.w	r6, r3, r2, lsl #13
    tmp13 = tmp0 - tmp2;
 80147b2:	9101      	str	r1, [sp, #4]
    tmp12 = tmp1 - tmp3;
 80147b4:	ebc3 3342 	rsb	r3, r3, r2, lsl #13
    z3 = tmp1 + tmp3;
 80147b8:	eb08 010a 	add.w	r1, r8, sl
    tmp12 = tmp1 - tmp3;
 80147bc:	9302      	str	r3, [sp, #8]
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 80147be:	f242 53a1 	movw	r3, #9633	; 0x25a1
 80147c2:	1862      	adds	r2, r4, r1
 80147c4:	435a      	muls	r2, r3
    z2 += z1;
 80147c6:	4b3c      	ldr	r3, [pc, #240]	; (80148b8 <jpeg_idct_8x16+0x3d4>)
 80147c8:	fb03 2404 	mla	r4, r3, r4, r2
    z3 += z1;
 80147cc:	4b3b      	ldr	r3, [pc, #236]	; (80148bc <jpeg_idct_8x16+0x3d8>)
 80147ce:	fb03 2201 	mla	r2, r3, r1, r2
    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 80147d2:	eb0c 010a 	add.w	r1, ip, sl
 80147d6:	4b3a      	ldr	r3, [pc, #232]	; (80148c0 <jpeg_idct_8x16+0x3dc>)
 80147d8:	4359      	muls	r1, r3
    tmp0 += z1 + z2;
 80147da:	f640 138e 	movw	r3, #2446	; 0x98e
 80147de:	eb04 0b01 	add.w	fp, r4, r1
    tmp3 += z1 + z3;
 80147e2:	4411      	add	r1, r2
    tmp0 += z1 + z2;
 80147e4:	fb03 bc0c 	mla	ip, r3, ip, fp
    tmp3 += z1 + z3;
 80147e8:	f243 0b0b 	movw	fp, #12299	; 0x300b
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 80147ec:	4b35      	ldr	r3, [pc, #212]	; (80148c4 <jpeg_idct_8x16+0x3e0>)
    tmp3 += z1 + z3;
 80147ee:	fb0b 110a 	mla	r1, fp, sl, r1
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 80147f2:	eb08 0a0e 	add.w	sl, r8, lr
    tmp1 += z1 + z3;
 80147f6:	f244 1bb3 	movw	fp, #16819	; 0x41b3
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 80147fa:	fb03 fa0a 	mul.w	sl, r3, sl
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 80147fe:	9b00      	ldr	r3, [sp, #0]
    tmp1 += z1 + z3;
 8014800:	4452      	add	r2, sl
    tmp2 += z1 + z2;
 8014802:	4454      	add	r4, sl
 8014804:	f246 2a54 	movw	sl, #25172	; 0x6254
    tmp1 += z1 + z3;
 8014808:	fb0b 2b08 	mla	fp, fp, r8, r2
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 801480c:	eb07 0801 	add.w	r8, r7, r1
    tmp2 += z1 + z2;
 8014810:	fb0a 440e 	mla	r4, sl, lr, r4
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8014814:	9a98      	ldr	r2, [sp, #608]	; 0x260
			    & RANGE_MASK];
 8014816:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 801481a:	1a7f      	subs	r7, r7, r1
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 801481c:	eba6 0a04 	sub.w	sl, r6, r4
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8014820:	f813 e008 	ldrb.w	lr, [r3, r8]
			    & RANGE_MASK];
 8014824:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8014828:	9b03      	ldr	r3, [sp, #12]
			    & RANGE_MASK];
 801482a:	f3ca 4a89 	ubfx	sl, sl, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 801482e:	f803 e002 	strb.w	lr, [r3, r2]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 8014832:	9b00      	ldr	r3, [sp, #0]
 8014834:	5dd9      	ldrb	r1, [r3, r7]
 8014836:	71e9      	strb	r1, [r5, #7]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 8014838:	1931      	adds	r1, r6, r4
			    & RANGE_MASK];
 801483a:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 801483e:	5c59      	ldrb	r1, [r3, r1]
 8014840:	7069      	strb	r1, [r5, #1]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 8014842:	f813 100a 	ldrb.w	r1, [r3, sl]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 8014846:	9b02      	ldr	r3, [sp, #8]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 8014848:	71a9      	strb	r1, [r5, #6]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 801484a:	eb03 010b 	add.w	r1, r3, fp
 801484e:	9b00      	ldr	r3, [sp, #0]
			    & RANGE_MASK];
 8014850:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 8014854:	5c59      	ldrb	r1, [r3, r1]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 8014856:	9b02      	ldr	r3, [sp, #8]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 8014858:	70a9      	strb	r1, [r5, #2]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 801485a:	eba3 020b 	sub.w	r2, r3, fp
 801485e:	9b00      	ldr	r3, [sp, #0]
			    & RANGE_MASK];
 8014860:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 8014864:	5c9b      	ldrb	r3, [r3, r2]
 8014866:	716b      	strb	r3, [r5, #5]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 8014868:	9b01      	ldr	r3, [sp, #4]
 801486a:	9a00      	ldr	r2, [sp, #0]
 801486c:	4463      	add	r3, ip
			    & RANGE_MASK];
 801486e:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 8014872:	5cd3      	ldrb	r3, [r2, r3]
 8014874:	70eb      	strb	r3, [r5, #3]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 8014876:	9b01      	ldr	r3, [sp, #4]
 8014878:	eba3 0c0c 	sub.w	ip, r3, ip
			    & RANGE_MASK];
 801487c:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 8014880:	f812 300c 	ldrb.w	r3, [r2, ip]
 8014884:	712b      	strb	r3, [r5, #4]
  for (ctr = 0; ctr < 16; ctr++) {
 8014886:	9b04      	ldr	r3, [sp, #16]
 8014888:	454b      	cmp	r3, r9
 801488a:	f47f af66 	bne.w	801475a <jpeg_idct_8x16+0x276>
  }
}
 801488e:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 8014892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014896:	bf00      	nop
 8014898:	ffffecc2 	.word	0xffffecc2
 801489c:	ffffb6d6 	.word	0xffffb6d6
 80148a0:	ffffc542 	.word	0xffffc542
 80148a4:	ffffe77a 	.word	0xffffe77a
 80148a8:	ffffdbfa 	.word	0xffffdbfa
 80148ac:	ffffeaab 	.word	0xffffeaab
 80148b0:	ffffd817 	.word	0xffffd817
 80148b4:	ffffc4df 	.word	0xffffc4df
 80148b8:	ffffc13b 	.word	0xffffc13b
 80148bc:	fffff384 	.word	0xfffff384
 80148c0:	ffffe333 	.word	0xffffe333
 80148c4:	ffffadfd 	.word	0xffffadfd

080148c8 <jpeg_idct_7x14>:

GLOBAL(void)
jpeg_idct_7x14 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80148c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80148cc:	b0ef      	sub	sp, #444	; 0x1bc
 80148ce:	f1a2 0e02 	sub.w	lr, r2, #2
 80148d2:	9309      	str	r3, [sp, #36]	; 0x24
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80148d4:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 80148d8:	6d48      	ldr	r0, [r1, #84]	; 0x54
 80148da:	3380      	adds	r3, #128	; 0x80
 80148dc:	3804      	subs	r0, #4
 80148de:	9300      	str	r3, [sp, #0]
   * 14-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/28).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 80148e0:	f102 030c 	add.w	r3, r2, #12
 80148e4:	930b      	str	r3, [sp, #44]	; 0x2c
  wsptr = workspace;
 80148e6:	ab0c      	add	r3, sp, #48	; 0x30
    /* Even part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80148e8:	f93e 2f02 	ldrsh.w	r2, [lr, #2]!

    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */

    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 80148ec:	f241 38a3 	movw	r8, #5027	; 0x13a3
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80148f0:	f850 1f04 	ldr.w	r1, [r0, #4]!

    tmp14 = z1 + z3;
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
    tmp10 = tmp11 + tmp12 + tmp13 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 80148f4:	f641 0b14 	movw	fp, #6164	; 0x1814
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80148f8:	f9be 4040 	ldrsh.w	r4, [lr, #64]	; 0x40
  for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 80148fc:	3304      	adds	r3, #4
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80148fe:	434a      	muls	r2, r1
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8014900:	f8d0 1080 	ldr.w	r1, [r0, #128]	; 0x80
 8014904:	434c      	muls	r4, r1
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 8014906:	f642 01c6 	movw	r1, #10438	; 0x28c6
    z1 <<= CONST_BITS;
 801490a:	0352      	lsls	r2, r2, #13
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 801490c:	fb01 f604 	mul.w	r6, r1, r4
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 8014910:	f640 2112 	movw	r1, #2578	; 0xa12
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 8014914:	f502 6280 	add.w	r2, r2, #1024	; 0x400
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 8014918:	fb01 fc04 	mul.w	ip, r1, r4
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 801491c:	f641 4137 	movw	r1, #7223	; 0x1c37
    tmp10 = z1 + z2;
 8014920:	1997      	adds	r7, r2, r6
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 8014922:	434c      	muls	r4, r1
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 8014924:	4466      	add	r6, ip
    tmp11 = z1 + z3;
 8014926:	eb02 050c 	add.w	r5, r2, ip
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 801492a:	f242 3c62 	movw	ip, #9058	; 0x2362
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 801492e:	1b36      	subs	r6, r6, r4
    tmp12 = z1 - z4;
 8014930:	eba2 0904 	sub.w	r9, r2, r4
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8014934:	f9be 4020 	ldrsh.w	r4, [lr, #32]
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 8014938:	eba2 0246 	sub.w	r2, r2, r6, lsl #1
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801493c:	f9be 6060 	ldrsh.w	r6, [lr, #96]	; 0x60
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 8014940:	49b7      	ldr	r1, [pc, #732]	; (8014c20 <jpeg_idct_7x14+0x358>)
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 8014942:	920a      	str	r2, [sp, #40]	; 0x28
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8014944:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8014946:	4362      	muls	r2, r4
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8014948:	f8d0 40c0 	ldr.w	r4, [r0, #192]	; 0xc0
 801494c:	4374      	muls	r4, r6
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 801494e:	1916      	adds	r6, r2, r4
 8014950:	fb0c f606 	mul.w	r6, ip, r6
    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
 8014954:	f640 0cbd 	movw	ip, #2237	; 0x8bd
 8014958:	fb0c 6c02 	mla	ip, ip, r2, r6
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 801495c:	fb01 6604 	mla	r6, r1, r4, r6
	    MULTIPLY(z2, FIX(1.378756276));      /* c2 */
 8014960:	f601 21e5 	addw	r1, r1, #2789	; 0xae5
 8014964:	434c      	muls	r4, r1
    tmp20 = tmp10 + tmp13;
 8014966:	eb07 010c 	add.w	r1, r7, ip
 801496a:	9101      	str	r1, [sp, #4]
    tmp26 = tmp10 - tmp13;
 801496c:	eba7 010c 	sub.w	r1, r7, ip
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 8014970:	fb08 4202 	mla	r2, r8, r2, r4
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8014974:	f9be 4010 	ldrsh.w	r4, [lr, #16]
    tmp26 = tmp10 - tmp13;
 8014978:	9102      	str	r1, [sp, #8]
    tmp21 = tmp11 + tmp14;
 801497a:	19a9      	adds	r1, r5, r6
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801497c:	f9be 7030 	ldrsh.w	r7, [lr, #48]	; 0x30
    tmp21 = tmp11 + tmp14;
 8014980:	9103      	str	r1, [sp, #12]
    tmp25 = tmp11 - tmp14;
 8014982:	1ba9      	subs	r1, r5, r6
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8014984:	f9be 6050 	ldrsh.w	r6, [lr, #80]	; 0x50
    tmp25 = tmp11 - tmp14;
 8014988:	9104      	str	r1, [sp, #16]
    tmp22 = tmp12 + tmp15;
 801498a:	eb09 0102 	add.w	r1, r9, r2
    tmp24 = tmp12 - tmp15;
 801498e:	eba9 0202 	sub.w	r2, r9, r2
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
    z1    -= z2;
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - tmp13;        /* c11 */
 8014992:	f640 69f2 	movw	r9, #3826	; 0xef2
    tmp22 = tmp12 + tmp15;
 8014996:	9105      	str	r1, [sp, #20]
    tmp24 = tmp12 - tmp15;
 8014998:	9206      	str	r2, [sp, #24]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801499a:	6a02      	ldr	r2, [r0, #32]
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 801499c:	f9be 1070 	ldrsh.w	r1, [lr, #112]	; 0x70
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80149a0:	4354      	muls	r4, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80149a2:	6e02      	ldr	r2, [r0, #96]	; 0x60
 80149a4:	4357      	muls	r7, r2
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80149a6:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
 80149aa:	4356      	muls	r6, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80149ac:	f8d0 20e0 	ldr.w	r2, [r0, #224]	; 0xe0
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 80149b0:	eb04 0a07 	add.w	sl, r4, r7
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80149b4:	434a      	muls	r2, r1
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 80149b6:	f642 21b7 	movw	r1, #10935	; 0x2ab7
    tmp14 = z1 + z3;
 80149ba:	eb04 0c06 	add.w	ip, r4, r6
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 80149be:	fb01 fa0a 	mul.w	sl, r1, sl
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 80149c2:	f242 6152 	movw	r1, #9810	; 0x2652
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 80149c6:	fb0b fb0c 	mul.w	fp, fp, ip
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 80149ca:	fb01 f50c 	mul.w	r5, r1, ip
    tmp10 = tmp11 + tmp12 + tmp13 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
 80149ce:	4995      	ldr	r1, [pc, #596]	; (8014c24 <jpeg_idct_7x14+0x35c>)
    tmp16 += tmp15;
    z1    += z4;
    z4    = MULTIPLY(z2 + z3, - FIX(0.158341681)) - tmp13; /* -c13 */
 80149d0:	f46f 6ca2 	mvn.w	ip, #1296	; 0x510
    tmp10 = tmp11 + tmp12 + tmp13 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
 80149d4:	eb0a 0805 	add.w	r8, sl, r5
 80149d8:	eb08 3842 	add.w	r8, r8, r2, lsl #13
 80149dc:	fb01 8804 	mla	r8, r1, r4, r8
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
 80149e0:	f201 211b 	addw	r1, r1, #539	; 0x21b
 80149e4:	fb01 b104 	mla	r1, r1, r4, fp
    z1    -= z2;
 80149e8:	1be4      	subs	r4, r4, r7
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - tmp13;        /* c11 */
 80149ea:	fb09 f904 	mul.w	r9, r9, r4
    z1    -= z2;
 80149ee:	9407      	str	r4, [sp, #28]
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - tmp13;        /* c11 */
 80149f0:	eba9 3942 	sub.w	r9, r9, r2, lsl #13
    tmp11 += z4 - MULTIPLY(z2, FIX(0.424103948));          /* c3-c9-c13 */
 80149f4:	4c8c      	ldr	r4, [pc, #560]	; (8014c28 <jpeg_idct_7x14+0x360>)
    tmp16 += tmp15;
 80149f6:	4449      	add	r1, r9
 80149f8:	9108      	str	r1, [sp, #32]
    z4    = MULTIPLY(z2 + z3, - FIX(0.158341681)) - tmp13; /* -c13 */
 80149fa:	19b9      	adds	r1, r7, r6
 80149fc:	fb0c f101 	mul.w	r1, ip, r1
 8014a00:	eba1 3142 	sub.w	r1, r1, r2, lsl #13
    tmp11 += z4 - MULTIPLY(z2, FIX(0.424103948));          /* c3-c9-c13 */
 8014a04:	fb04 1c07 	mla	ip, r4, r7, r1
    tmp12 += z4 - MULTIPLY(z3, FIX(2.373959773));          /* c3+c5-c13 */
 8014a08:	4c88      	ldr	r4, [pc, #544]	; (8014c2c <jpeg_idct_7x14+0x364>)
 8014a0a:	fb04 1106 	mla	r1, r4, r6, r1
    tmp11 += z4 - MULTIPLY(z2, FIX(0.424103948));          /* c3-c9-c13 */
 8014a0e:	44e2      	add	sl, ip
    z4    = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 8014a10:	f642 4cf8 	movw	ip, #11512	; 0x2cf8
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8014a14:	4c86      	ldr	r4, [pc, #536]	; (8014c30 <jpeg_idct_7x14+0x368>)
    tmp12 += z4 - MULTIPLY(z3, FIX(2.373959773));          /* c3+c5-c13 */
 8014a16:	4429      	add	r1, r5
    z4    = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 8014a18:	1bf5      	subs	r5, r6, r7
 8014a1a:	fb0c f505 	mul.w	r5, ip, r5
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8014a1e:	eb05 3c42 	add.w	ip, r5, r2, lsl #13
 8014a22:	fb04 cc06 	mla	ip, r4, r6, ip
    z1    += z4;
 8014a26:	9c07      	ldr	r4, [sp, #28]
 8014a28:	4422      	add	r2, r4
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8014a2a:	44dc      	add	ip, fp
    tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */
 8014a2c:	f241 5b99 	movw	fp, #5529	; 0x1599

    tmp13 = (z1 - z3) << PASS1_BITS;
 8014a30:	1b96      	subs	r6, r2, r6

    /* Final output stage */

    wsptr[7*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8014a32:	9a01      	ldr	r2, [sp, #4]
    tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */
 8014a34:	fb0b 5507 	mla	r5, fp, r7, r5
    wsptr[7*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8014a38:	4442      	add	r2, r8
    tmp13 = (z1 - z3) << PASS1_BITS;
 8014a3a:	00b6      	lsls	r6, r6, #2
    tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */
 8014a3c:	444d      	add	r5, r9
    wsptr[7*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8014a3e:	12d2      	asrs	r2, r2, #11
 8014a40:	f843 2c04 	str.w	r2, [r3, #-4]
    wsptr[7*13] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8014a44:	9a01      	ldr	r2, [sp, #4]
 8014a46:	eba2 0208 	sub.w	r2, r2, r8
 8014a4a:	12d2      	asrs	r2, r2, #11
 8014a4c:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
    wsptr[7*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8014a50:	9a03      	ldr	r2, [sp, #12]
 8014a52:	4452      	add	r2, sl
 8014a54:	12d2      	asrs	r2, r2, #11
 8014a56:	619a      	str	r2, [r3, #24]
    wsptr[7*12] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8014a58:	9a03      	ldr	r2, [sp, #12]
 8014a5a:	eba2 0a0a 	sub.w	sl, r2, sl
 8014a5e:	ea4f 22ea 	mov.w	r2, sl, asr #11
 8014a62:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
    wsptr[7*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8014a66:	9a05      	ldr	r2, [sp, #20]
 8014a68:	440a      	add	r2, r1
 8014a6a:	12d2      	asrs	r2, r2, #11
 8014a6c:	635a      	str	r2, [r3, #52]	; 0x34
    wsptr[7*11] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8014a6e:	9a05      	ldr	r2, [sp, #20]
 8014a70:	1a51      	subs	r1, r2, r1
    wsptr[7*3]  = (int) (tmp23 + tmp13);
 8014a72:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014a74:	eb06 22e2 	add.w	r2, r6, r2, asr #11
    wsptr[7*11] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8014a78:	12c9      	asrs	r1, r1, #11
    wsptr[7*3]  = (int) (tmp23 + tmp13);
 8014a7a:	651a      	str	r2, [r3, #80]	; 0x50
    wsptr[7*10] = (int) (tmp23 - tmp13);
 8014a7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    wsptr[7*11] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8014a7e:	f8c3 1130 	str.w	r1, [r3, #304]	; 0x130
    wsptr[7*10] = (int) (tmp23 - tmp13);
 8014a82:	ebc6 26e2 	rsb	r6, r6, r2, asr #11
    wsptr[7*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8014a86:	9a06      	ldr	r2, [sp, #24]
    wsptr[7*9]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
    wsptr[7*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
    wsptr[7*8]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
    wsptr[7*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 8014a88:	9908      	ldr	r1, [sp, #32]
    wsptr[7*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8014a8a:	4462      	add	r2, ip
    wsptr[7*10] = (int) (tmp23 - tmp13);
 8014a8c:	f8c3 6114 	str.w	r6, [r3, #276]	; 0x114
    wsptr[7*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8014a90:	12d2      	asrs	r2, r2, #11
 8014a92:	66da      	str	r2, [r3, #108]	; 0x6c
    wsptr[7*9]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8014a94:	9a06      	ldr	r2, [sp, #24]
 8014a96:	eba2 0c0c 	sub.w	ip, r2, ip
 8014a9a:	ea4f 22ec 	mov.w	r2, ip, asr #11
 8014a9e:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
    wsptr[7*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8014aa2:	9a04      	ldr	r2, [sp, #16]
 8014aa4:	442a      	add	r2, r5
 8014aa6:	12d2      	asrs	r2, r2, #11
 8014aa8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    wsptr[7*8]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8014aac:	9a04      	ldr	r2, [sp, #16]
 8014aae:	1b55      	subs	r5, r2, r5
    wsptr[7*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 8014ab0:	9a02      	ldr	r2, [sp, #8]
 8014ab2:	440a      	add	r2, r1
    wsptr[7*8]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8014ab4:	12ed      	asrs	r5, r5, #11
    wsptr[7*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 8014ab6:	12d2      	asrs	r2, r2, #11
    wsptr[7*8]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8014ab8:	f8c3 50dc 	str.w	r5, [r3, #220]	; 0xdc
    wsptr[7*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 8014abc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    wsptr[7*7]  = (int) RIGHT_SHIFT(tmp26 - tmp16, CONST_BITS-PASS1_BITS);
 8014ac0:	9a02      	ldr	r2, [sp, #8]
 8014ac2:	1a52      	subs	r2, r2, r1
 8014ac4:	12d2      	asrs	r2, r2, #11
 8014ac6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 8014aca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014acc:	4572      	cmp	r2, lr
 8014ace:	f47f af0b 	bne.w	80148e8 <jpeg_idct_7x14+0x20>
 8014ad2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  }

  /* Pass 2: process 14 rows from work array, store into output array.
   * 7-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/14).
   */
  wsptr = workspace;
 8014ad4:	ac0c      	add	r4, sp, #48	; 0x30
 8014ad6:	f1a3 0904 	sub.w	r9, r3, #4
 8014ada:	3334      	adds	r3, #52	; 0x34
 8014adc:	9304      	str	r3, [sp, #16]
  for (ctr = 0; ctr < 14; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8014ade:	f859 3f04 	ldr.w	r3, [r9, #4]!
			    & RANGE_MASK];
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 7;		/* advance pointer to next row */
 8014ae2:	341c      	adds	r4, #28
    outptr = output_buf[ctr] + output_col;
 8014ae4:	9a78      	ldr	r2, [sp, #480]	; 0x1e0
    z3 = (INT32) wsptr[6];
 8014ae6:	f854 5c04 	ldr.w	r5, [r4, #-4]
    outptr = output_buf[ctr] + output_col;
 8014aea:	189e      	adds	r6, r3, r2
    tmp20 = MULTIPLY(z2 - z3, FIX(0.881747734));       /* c4 */
 8014aec:	f854 2c0c 	ldr.w	r2, [r4, #-12]
    outptr = output_buf[ctr] + output_col;
 8014af0:	9303      	str	r3, [sp, #12]
    tmp20 = MULTIPLY(z2 - z3, FIX(0.881747734));       /* c4 */
 8014af2:	1b51      	subs	r1, r2, r5
 8014af4:	f641 4237 	movw	r2, #7223	; 0x1c37
    z1 = (INT32) wsptr[2];
 8014af8:	f854 3c14 	ldr.w	r3, [r4, #-20]
    tmp20 = MULTIPLY(z2 - z3, FIX(0.881747734));       /* c4 */
 8014afc:	fb02 fe01 	mul.w	lr, r2, r1
    tmp22 = MULTIPLY(z1 - z2, FIX(0.314692123));       /* c6 */
 8014b00:	f854 2c0c 	ldr.w	r2, [r4, #-12]
    tmp23 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8014b04:	f854 7c1c 	ldr.w	r7, [r4, #-28]
    tmp10 = z1 + z3;
 8014b08:	eb03 0805 	add.w	r8, r3, r5
    tmp22 = MULTIPLY(z1 - z2, FIX(0.314692123));       /* c6 */
 8014b0c:	eba3 0c02 	sub.w	ip, r3, r2
 8014b10:	f640 2212 	movw	r2, #2578	; 0xa12
    tmp23 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8014b14:	3710      	adds	r7, #16
    tmp21 = tmp20 + tmp22 + tmp23 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 8014b16:	4947      	ldr	r1, [pc, #284]	; (8014c34 <jpeg_idct_7x14+0x36c>)
    tmp22 = MULTIPLY(z1 - z2, FIX(0.314692123));       /* c6 */
 8014b18:	fb02 fc0c 	mul.w	ip, r2, ip
    tmp21 = tmp20 + tmp22 + tmp23 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 8014b1c:	f854 2c0c 	ldr.w	r2, [r4, #-12]
    z2 = (INT32) wsptr[3];
 8014b20:	f854 ac10 	ldr.w	sl, [r4, #-16]
    tmp21 = tmp20 + tmp22 + tmp23 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 8014b24:	eb0e 000c 	add.w	r0, lr, ip
 8014b28:	eb00 3047 	add.w	r0, r0, r7, lsl #13
 8014b2c:	fb01 0002 	mla	r0, r1, r2, r0
    tmp10 = MULTIPLY(tmp10, FIX(1.274162392)) + tmp23; /* c2 */
 8014b30:	f642 02c6 	movw	r2, #10438	; 0x28c6
    tmp20 += tmp10 - MULTIPLY(z3, FIX(0.077722536));   /* c2-c4-c6 */
 8014b34:	f46f 711f 	mvn.w	r1, #636	; 0x27c
    tmp10 = MULTIPLY(tmp10, FIX(1.274162392)) + tmp23; /* c2 */
 8014b38:	fb02 f208 	mul.w	r2, r2, r8
 8014b3c:	eb02 3247 	add.w	r2, r2, r7, lsl #13
    tmp20 += tmp10 - MULTIPLY(z3, FIX(0.077722536));   /* c2-c4-c6 */
 8014b40:	fb01 2105 	mla	r1, r1, r5, r2
    tmp22 += tmp10 - MULTIPLY(z1, FIX(2.470602249));   /* c2+c4+c6 */
 8014b44:	4d3c      	ldr	r5, [pc, #240]	; (8014c38 <jpeg_idct_7x14+0x370>)
 8014b46:	fb05 2303 	mla	r3, r5, r3, r2
    z1 = (INT32) wsptr[1];
 8014b4a:	f854 2c18 	ldr.w	r2, [r4, #-24]
    tmp20 += tmp10 - MULTIPLY(z3, FIX(0.077722536));   /* c2-c4-c6 */
 8014b4e:	4471      	add	r1, lr
    z3 = (INT32) wsptr[5];
 8014b50:	f854 ec08 	ldr.w	lr, [r4, #-8]
    tmp22 += tmp10 - MULTIPLY(z1, FIX(2.470602249));   /* c2+c4+c6 */
 8014b54:	4463      	add	r3, ip
    tmp11 = MULTIPLY(z1 + z2, FIX(0.935414347));       /* (c3+c1-c5)/2 */
 8014b56:	eb02 050a 	add.w	r5, r2, sl
    tmp20 += tmp10 - MULTIPLY(z3, FIX(0.077722536));   /* c2-c4-c6 */
 8014b5a:	9101      	str	r1, [sp, #4]
    tmp22 += tmp10 - MULTIPLY(z1, FIX(2.470602249));   /* c2+c4+c6 */
 8014b5c:	9302      	str	r3, [sp, #8]
    tmp11 = MULTIPLY(z1 + z2, FIX(0.935414347));       /* (c3+c1-c5)/2 */
 8014b5e:	f641 53ef 	movw	r3, #7663	; 0x1def
 8014b62:	fb03 fb05 	mul.w	fp, r3, r5
    tmp12 = MULTIPLY(z1 - z2, FIX(0.170262339));       /* (c3+c5-c1)/2 */
 8014b66:	eba2 050a 	sub.w	r5, r2, sl
 8014b6a:	f240 5373 	movw	r3, #1395	; 0x573
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));          /* c5 */
 8014b6e:	4472      	add	r2, lr
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
 8014b70:	44f2      	add	sl, lr
    tmp12 = MULTIPLY(z1 - z2, FIX(0.170262339));       /* (c3+c5-c1)/2 */
 8014b72:	435d      	muls	r5, r3
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
 8014b74:	4b31      	ldr	r3, [pc, #196]	; (8014c3c <jpeg_idct_7x14+0x374>)
    tmp10 = tmp11 - tmp12;
 8014b76:	ebab 0c05 	sub.w	ip, fp, r5
    tmp11 += tmp12;
 8014b7a:	445d      	add	r5, fp
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));          /* c5 */
 8014b7c:	f241 3ba3 	movw	fp, #5027	; 0x13a3
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
 8014b80:	fb03 fa0a 	mul.w	sl, r3, sl
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8014b84:	9b00      	ldr	r3, [sp, #0]
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));          /* c5 */
 8014b86:	fb0b f202 	mul.w	r2, fp, r2
    tmp12 += z2 + MULTIPLY(z3, FIX(1.870828693));      /* c3+c1-c5 */
 8014b8a:	f643 3bde 	movw	fp, #15326	; 0x3bde
    tmp11 += tmp12;
 8014b8e:	4455      	add	r5, sl
    tmp10 += z2;
 8014b90:	4494      	add	ip, r2
    tmp12 += z2 + MULTIPLY(z3, FIX(1.870828693));      /* c3+c1-c5 */
 8014b92:	fb0b 220e 	mla	r2, fp, lr, r2
 8014b96:	4492      	add	sl, r2
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8014b98:	eb01 020c 	add.w	r2, r1, ip
 8014b9c:	9978      	ldr	r1, [sp, #480]	; 0x1e0
			    & RANGE_MASK];
 8014b9e:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8014ba2:	5c9a      	ldrb	r2, [r3, r2]
 8014ba4:	9b03      	ldr	r3, [sp, #12]
 8014ba6:	545a      	strb	r2, [r3, r1]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8014ba8:	9b01      	ldr	r3, [sp, #4]
 8014baa:	eba3 0c0c 	sub.w	ip, r3, ip
 8014bae:	9b00      	ldr	r3, [sp, #0]
			    & RANGE_MASK];
 8014bb0:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8014bb4:	f813 200c 	ldrb.w	r2, [r3, ip]
 8014bb8:	71b2      	strb	r2, [r6, #6]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8014bba:	1942      	adds	r2, r0, r5
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8014bbc:	1b40      	subs	r0, r0, r5
			    & RANGE_MASK];
 8014bbe:	f3c2 4289 	ubfx	r2, r2, #18, #10
			    & RANGE_MASK];
 8014bc2:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8014bc6:	5c9a      	ldrb	r2, [r3, r2]
 8014bc8:	7072      	strb	r2, [r6, #1]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8014bca:	5c1a      	ldrb	r2, [r3, r0]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8014bcc:	9b02      	ldr	r3, [sp, #8]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8014bce:	7172      	strb	r2, [r6, #5]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8014bd0:	eb03 020a 	add.w	r2, r3, sl
 8014bd4:	9b00      	ldr	r3, [sp, #0]
			    & RANGE_MASK];
 8014bd6:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8014bda:	5c9a      	ldrb	r2, [r3, r2]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8014bdc:	9b02      	ldr	r3, [sp, #8]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8014bde:	70b2      	strb	r2, [r6, #2]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8014be0:	eba3 0a0a 	sub.w	sl, r3, sl
 8014be4:	9b00      	ldr	r3, [sp, #0]
			    & RANGE_MASK];
 8014be6:	f3ca 4a89 	ubfx	sl, sl, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8014bea:	f813 300a 	ldrb.w	r3, [r3, sl]
 8014bee:	7133      	strb	r3, [r6, #4]
    z2 -= tmp10;
 8014bf0:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 8014bf4:	eba3 0808 	sub.w	r8, r3, r8
    tmp23 += MULTIPLY(z2, FIX(1.414213562));           /* c0 */
 8014bf8:	f642 5341 	movw	r3, #11585	; 0x2d41
 8014bfc:	fb03 f808 	mul.w	r8, r3, r8
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23,
 8014c00:	9b00      	ldr	r3, [sp, #0]
    tmp23 += MULTIPLY(z2, FIX(1.414213562));           /* c0 */
 8014c02:	eb08 3847 	add.w	r8, r8, r7, lsl #13
			    & RANGE_MASK];
 8014c06:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23,
 8014c0a:	f813 3008 	ldrb.w	r3, [r3, r8]
 8014c0e:	70f3      	strb	r3, [r6, #3]
  for (ctr = 0; ctr < 14; ctr++) {
 8014c10:	9b04      	ldr	r3, [sp, #16]
 8014c12:	454b      	cmp	r3, r9
 8014c14:	f47f af63 	bne.w	8014ade <jpeg_idct_7x14+0x216>
  }
}
 8014c18:	b06f      	add	sp, #444	; 0x1bc
 8014c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c1e:	bf00      	nop
 8014c20:	ffffc8fc 	.word	0xffffc8fc
 8014c24:	ffffdbf0 	.word	0xffffdbf0
 8014c28:	fffff26e 	.word	0xfffff26e
 8014c2c:	ffffb409 	.word	0xffffb409
 8014c30:	ffffc9e6 	.word	0xffffc9e6
 8014c34:	ffffc515 	.word	0xffffc515
 8014c38:	ffffb0f1 	.word	0xffffb0f1
 8014c3c:	ffffd3e1 	.word	0xffffd3e1

08014c40 <jpeg_idct_6x12>:

GLOBAL(void)
jpeg_idct_6x12 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8014c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c44:	b0d3      	sub	sp, #332	; 0x14c
 8014c46:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8014c48:	f1a2 0a02 	sub.w	sl, r2, #2
 8014c4c:	9308      	str	r3, [sp, #32]
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8014c4e:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8014c52:	3380      	adds	r3, #128	; 0x80
 8014c54:	9301      	str	r3, [sp, #4]
   * 12-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/24).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 8014c56:	1f0b      	subs	r3, r1, #4
 8014c58:	9300      	str	r3, [sp, #0]
 8014c5a:	f102 030a 	add.w	r3, r2, #10
 8014c5e:	9309      	str	r3, [sp, #36]	; 0x24
  wsptr = workspace;
 8014c60:	ab0a      	add	r3, sp, #40	; 0x28
    /* Even part */

    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014c62:	9900      	ldr	r1, [sp, #0]

    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */

    tmp10 = z1 + z3;
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 8014c64:	f641 398d 	movw	r9, #7053	; 0x1b8d
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014c68:	f93a 7f02 	ldrsh.w	r7, [sl, #2]!
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 8014c6c:	f640 0b5b 	movw	fp, #2139	; 0x85b
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014c70:	f851 2f04 	ldr.w	r2, [r1, #4]!
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 8014c74:	3304      	adds	r3, #4
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8014c76:	f9ba 0040 	ldrsh.w	r0, [sl, #64]	; 0x40
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014c7a:	4357      	muls	r7, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8014c7c:	f8d1 2080 	ldr.w	r2, [r1, #128]	; 0x80
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8014c80:	f9ba 5020 	ldrsh.w	r5, [sl, #32]
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8014c84:	4342      	muls	r2, r0
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 8014c86:	f242 7031 	movw	r0, #10033	; 0x2731
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014c8a:	9100      	str	r1, [sp, #0]
    z3 <<= CONST_BITS;
 8014c8c:	037f      	lsls	r7, r7, #13
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 8014c8e:	4342      	muls	r2, r0
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8014c90:	6c08      	ldr	r0, [r1, #64]	; 0x40
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 8014c92:	f642 31b6 	movw	r1, #11190	; 0x2bb6
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8014c96:	f9ba c060 	ldrsh.w	ip, [sl, #96]	; 0x60
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8014c9a:	4345      	muls	r5, r0
    z3 += ONE << (CONST_BITS-PASS1_BITS-1);
 8014c9c:	f507 6780 	add.w	r7, r7, #1024	; 0x400
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8014ca0:	f9ba e030 	ldrsh.w	lr, [sl, #48]	; 0x30
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 8014ca4:	fb01 f005 	mul.w	r0, r1, r5
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8014ca8:	9900      	ldr	r1, [sp, #0]
    tmp10 = z3 + z4;
 8014caa:	18be      	adds	r6, r7, r2
    tmp11 = z3 - z4;
 8014cac:	1aba      	subs	r2, r7, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8014cae:	f8d1 40c0 	ldr.w	r4, [r1, #192]	; 0xc0
 8014cb2:	fb04 f40c 	mul.w	r4, r4, ip
    z2 <<= CONST_BITS;
 8014cb6:	0364      	lsls	r4, r4, #13
    tmp12 = z1 - z2;
 8014cb8:	ebc4 3c45 	rsb	ip, r4, r5, lsl #13
    tmp21 = z3 + tmp12;
 8014cbc:	eb07 010c 	add.w	r1, r7, ip
 8014cc0:	9102      	str	r1, [sp, #8]
    tmp24 = z3 - tmp12;
 8014cc2:	eba7 010c 	sub.w	r1, r7, ip
    tmp12 = z4 + z2;
 8014cc6:	eb00 0c04 	add.w	ip, r0, r4
    tmp12 = z4 - z1 - z2;
 8014cca:	eba0 3045 	sub.w	r0, r0, r5, lsl #13
    tmp24 = z3 - tmp12;
 8014cce:	9103      	str	r1, [sp, #12]
    tmp12 = z4 - z1 - z2;
 8014cd0:	1b04      	subs	r4, r0, r4
    tmp25 = tmp10 - tmp12;
 8014cd2:	eba6 010c 	sub.w	r1, r6, ip
    tmp20 = tmp10 + tmp12;
 8014cd6:	eb06 070c 	add.w	r7, r6, ip
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8014cda:	f9ba c010 	ldrsh.w	ip, [sl, #16]
    tmp25 = tmp10 - tmp12;
 8014cde:	9104      	str	r1, [sp, #16]
    tmp22 = tmp11 + tmp12;
 8014ce0:	1911      	adds	r1, r2, r4
    tmp23 = tmp11 - tmp12;
 8014ce2:	1b12      	subs	r2, r2, r4
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8014ce4:	f9ba 5050 	ldrsh.w	r5, [sl, #80]	; 0x50
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8014ce8:	f9ba 0070 	ldrsh.w	r0, [sl, #112]	; 0x70
    tmp23 = tmp11 - tmp12;
 8014cec:	9206      	str	r2, [sp, #24]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8014cee:	9a00      	ldr	r2, [sp, #0]
    tmp22 = tmp11 + tmp12;
 8014cf0:	9105      	str	r1, [sp, #20]
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 8014cf2:	f642 11cf 	movw	r1, #10703	; 0x29cf
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8014cf6:	6a12      	ldr	r2, [r2, #32]
 8014cf8:	fb02 fc0c 	mul.w	ip, r2, ip
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8014cfc:	9a00      	ldr	r2, [sp, #0]
 8014cfe:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8014d00:	fb02 fe0e 	mul.w	lr, r2, lr
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8014d04:	9a00      	ldr	r2, [sp, #0]
 8014d06:	f8d2 20a0 	ldr.w	r2, [r2, #160]	; 0xa0
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 8014d0a:	fb01 f40e 	mul.w	r4, r1, lr
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 8014d0e:	4977      	ldr	r1, [pc, #476]	; (8014eec <jpeg_idct_6x12+0x2ac>)
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8014d10:	4355      	muls	r5, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8014d12:	9a00      	ldr	r2, [sp, #0]
 8014d14:	f8d2 20e0 	ldr.w	r2, [r2, #224]	; 0xe0
    tmp10 = z1 + z3;
 8014d18:	eb0c 0605 	add.w	r6, ip, r5
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8014d1c:	4342      	muls	r2, r0
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 8014d1e:	fb01 f00e 	mul.w	r0, r1, lr
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 8014d22:	4973      	ldr	r1, [pc, #460]	; (8014ef0 <jpeg_idct_6x12+0x2b0>)
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 8014d24:	eb02 0806 	add.w	r8, r2, r6
 8014d28:	fb09 f808 	mul.w	r8, r9, r8
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 8014d2c:	fb0b 8b06 	mla	fp, fp, r6, r8
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 8014d30:	f640 06f7 	movw	r6, #2295	; 0x8f7
 8014d34:	eb04 090b 	add.w	r9, r4, fp
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8014d38:	eba8 0404 	sub.w	r4, r8, r4
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 8014d3c:	fb06 990c 	mla	r9, r6, ip, r9
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 8014d40:	18ae      	adds	r6, r5, r2
 8014d42:	4371      	muls	r1, r6
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 8014d44:	1846      	adds	r6, r0, r1
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 8014d46:	9107      	str	r1, [sp, #28]
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 8014d48:	496a      	ldr	r1, [pc, #424]	; (8014ef4 <jpeg_idct_6x12+0x2b4>)
 8014d4a:	fb01 6605 	mla	r6, r1, r5, r6
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8014d4e:	9907      	ldr	r1, [sp, #28]
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
	     MULTIPLY(z4, FIX(1.982889723));                 /* c5+c7 */

    z1 -= z4;
    z2 -= z3;
 8014d50:	ebae 0505 	sub.w	r5, lr, r5
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 8014d54:	f241 1e51 	movw	lr, #4433	; 0x1151
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 8014d58:	445e      	add	r6, fp
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8014d5a:	f243 2bc6 	movw	fp, #12998	; 0x32c6
 8014d5e:	fb0b 4402 	mla	r4, fp, r2, r4
 8014d62:	440c      	add	r4, r1
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8014d64:	4964      	ldr	r1, [pc, #400]	; (8014ef8 <jpeg_idct_6x12+0x2b8>)
 8014d66:	fb01 000c 	mla	r0, r1, ip, r0
 8014d6a:	4964      	ldr	r1, [pc, #400]	; (8014efc <jpeg_idct_6x12+0x2bc>)
 8014d6c:	fb01 0002 	mla	r0, r1, r2, r0
    z1 -= z4;
 8014d70:	ebac 0202 	sub.w	r2, ip, r2
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 8014d74:	f201 4153 	addw	r1, r1, #1107	; 0x453
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
 8014d78:	f641 0c7e 	movw	ip, #6270	; 0x187e
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8014d7c:	4440      	add	r0, r8
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 8014d7e:	eb02 0805 	add.w	r8, r2, r5
 8014d82:	fb0e f808 	mul.w	r8, lr, r8
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 8014d86:	fb01 8e05 	mla	lr, r1, r5, r8

    /* Final output stage */

    wsptr[6*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8014d8a:	eb07 0509 	add.w	r5, r7, r9
    wsptr[6*11] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8014d8e:	eba7 0709 	sub.w	r7, r7, r9
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
 8014d92:	fb0c 8202 	mla	r2, ip, r2, r8
    wsptr[6*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8014d96:	12ed      	asrs	r5, r5, #11
    wsptr[6*11] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8014d98:	12ff      	asrs	r7, r7, #11
    wsptr[6*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8014d9a:	f843 5c04 	str.w	r5, [r3, #-4]
    wsptr[6*11] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8014d9e:	f8c3 7104 	str.w	r7, [r3, #260]	; 0x104
    wsptr[6*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8014da2:	9902      	ldr	r1, [sp, #8]
 8014da4:	188d      	adds	r5, r1, r2
    wsptr[6*10] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8014da6:	1a8a      	subs	r2, r1, r2
 8014da8:	12d2      	asrs	r2, r2, #11
    wsptr[6*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8014daa:	12ed      	asrs	r5, r5, #11
    wsptr[6*10] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8014dac:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
    wsptr[6*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8014db0:	9a05      	ldr	r2, [sp, #20]
    wsptr[6*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8014db2:	615d      	str	r5, [r3, #20]
    wsptr[6*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8014db4:	4432      	add	r2, r6
 8014db6:	12d2      	asrs	r2, r2, #11
 8014db8:	62da      	str	r2, [r3, #44]	; 0x2c
    wsptr[6*9]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8014dba:	9a05      	ldr	r2, [sp, #20]
 8014dbc:	1b96      	subs	r6, r2, r6
    wsptr[6*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8014dbe:	9a06      	ldr	r2, [sp, #24]
 8014dc0:	4422      	add	r2, r4
    wsptr[6*9]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8014dc2:	12f6      	asrs	r6, r6, #11
    wsptr[6*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8014dc4:	12d2      	asrs	r2, r2, #11
    wsptr[6*9]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8014dc6:	f8c3 60d4 	str.w	r6, [r3, #212]	; 0xd4
    wsptr[6*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8014dca:	645a      	str	r2, [r3, #68]	; 0x44
    wsptr[6*8]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8014dcc:	9a06      	ldr	r2, [sp, #24]
 8014dce:	1b14      	subs	r4, r2, r4
    wsptr[6*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8014dd0:	9a03      	ldr	r2, [sp, #12]
 8014dd2:	4472      	add	r2, lr
    wsptr[6*8]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8014dd4:	12e4      	asrs	r4, r4, #11
    wsptr[6*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8014dd6:	12d2      	asrs	r2, r2, #11
    wsptr[6*8]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8014dd8:	f8c3 40bc 	str.w	r4, [r3, #188]	; 0xbc
    wsptr[6*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8014ddc:	65da      	str	r2, [r3, #92]	; 0x5c
    wsptr[6*7]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8014dde:	9a03      	ldr	r2, [sp, #12]
 8014de0:	eba2 050e 	sub.w	r5, r2, lr
    wsptr[6*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8014de4:	9a04      	ldr	r2, [sp, #16]
 8014de6:	4402      	add	r2, r0
    wsptr[6*7]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8014de8:	12ed      	asrs	r5, r5, #11
    wsptr[6*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8014dea:	12d2      	asrs	r2, r2, #11
    wsptr[6*7]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8014dec:	f8c3 50a4 	str.w	r5, [r3, #164]	; 0xa4
    wsptr[6*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8014df0:	675a      	str	r2, [r3, #116]	; 0x74
    wsptr[6*6]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8014df2:	9a04      	ldr	r2, [sp, #16]
 8014df4:	1a10      	subs	r0, r2, r0
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 8014df6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    wsptr[6*6]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8014df8:	12c0      	asrs	r0, r0, #11
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 8014dfa:	4552      	cmp	r2, sl
    wsptr[6*6]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8014dfc:	f8c3 008c 	str.w	r0, [r3, #140]	; 0x8c
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 8014e00:	f47f af2f 	bne.w	8014c62 <jpeg_idct_6x12+0x22>
 8014e04:	9b08      	ldr	r3, [sp, #32]
  }

  /* Pass 2: process 12 rows from work array, store into output array.
   * 6-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/12).
   */
  wsptr = workspace;
 8014e06:	a90a      	add	r1, sp, #40	; 0x28

    /* Add fudge factor here for final descale. */
    tmp10 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp10 <<= CONST_BITS;
    tmp12 = (INT32) wsptr[4];
    tmp20 = MULTIPLY(tmp12, FIX(0.707106781));   /* c4 */
 8014e08:	f241 6ba1 	movw	fp, #5793	; 0x16a1
 8014e0c:	f1a3 0c04 	sub.w	ip, r3, #4
 8014e10:	f103 082c 	add.w	r8, r3, #44	; 0x2c
    outptr = output_buf[ctr] + output_col;
 8014e14:	f85c 9f04 	ldr.w	r9, [ip, #4]!
    /* Odd part */

    z1 = (INT32) wsptr[1];
    z2 = (INT32) wsptr[3];
    z3 = (INT32) wsptr[5];
    tmp11 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8014e18:	f640 37b6 	movw	r7, #2998	; 0xbb6
    outptr = output_buf[ctr] + output_col;
 8014e1c:	9b5c      	ldr	r3, [sp, #368]	; 0x170
			    & RANGE_MASK];
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 6;		/* advance pointer to next row */
 8014e1e:	3118      	adds	r1, #24
    tmp20 = MULTIPLY(tmp12, FIX(0.707106781));   /* c4 */
 8014e20:	f851 2c08 	ldr.w	r2, [r1, #-8]
  for (ctr = 0; ctr < 12; ctr++) {
 8014e24:	45e0      	cmp	r8, ip
    outptr = output_buf[ctr] + output_col;
 8014e26:	eb09 0603 	add.w	r6, r9, r3
    tmp10 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8014e2a:	f851 3c18 	ldr.w	r3, [r1, #-24]
    tmp20 = MULTIPLY(tmp12, FIX(0.707106781));   /* c4 */
 8014e2e:	fb0b f202 	mul.w	r2, fp, r2
    tmp10 = MULTIPLY(tmp20, FIX(1.224744871));   /* c2 */
 8014e32:	f851 0c10 	ldr.w	r0, [r1, #-16]
    tmp10 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8014e36:	f103 0310 	add.w	r3, r3, #16
    z3 = (INT32) wsptr[5];
 8014e3a:	f851 ec04 	ldr.w	lr, [r1, #-4]
    tmp11 = tmp10 + tmp20;
 8014e3e:	eb02 3443 	add.w	r4, r2, r3, lsl #13
    tmp21 = tmp10 - tmp20 - tmp20;
 8014e42:	ebc2 3343 	rsb	r3, r2, r3, lsl #13
 8014e46:	eba3 0302 	sub.w	r3, r3, r2
 8014e4a:	9300      	str	r3, [sp, #0]
    tmp10 = MULTIPLY(tmp20, FIX(1.224744871));   /* c2 */
 8014e4c:	f242 7331 	movw	r3, #10033	; 0x2731
 8014e50:	fb03 f200 	mul.w	r2, r3, r0
    z1 = (INT32) wsptr[1];
 8014e54:	f851 0c14 	ldr.w	r0, [r1, #-20]
    tmp12 = tmp11 + ((z3 - z2) << CONST_BITS);
 8014e58:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    tmp20 = tmp11 + tmp10;
 8014e5c:	eb04 0502 	add.w	r5, r4, r2
    tmp22 = tmp11 - tmp10;
 8014e60:	eba4 0202 	sub.w	r2, r4, r2
    tmp11 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8014e64:	eb00 040e 	add.w	r4, r0, lr
    tmp12 = tmp11 + ((z3 - z2) << CONST_BITS);
 8014e68:	ebae 0a03 	sub.w	sl, lr, r3
    tmp11 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8014e6c:	fb07 f404 	mul.w	r4, r7, r4
    tmp10 = tmp11 + ((z1 + z2) << CONST_BITS);
 8014e70:	f851 7c0c 	ldr.w	r7, [r1, #-12]
 8014e74:	4407      	add	r7, r0
    tmp11 = (z1 - z2 - z3) << CONST_BITS;
 8014e76:	eba0 0003 	sub.w	r0, r0, r3
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8014e7a:	9b01      	ldr	r3, [sp, #4]
    tmp10 = tmp11 + ((z1 + z2) << CONST_BITS);
 8014e7c:	eb04 3747 	add.w	r7, r4, r7, lsl #13
    tmp11 = (z1 - z2 - z3) << CONST_BITS;
 8014e80:	eba0 0e0e 	sub.w	lr, r0, lr
    tmp12 = tmp11 + ((z3 - z2) << CONST_BITS);
 8014e84:	eb04 344a 	add.w	r4, r4, sl, lsl #13
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8014e88:	eb05 0007 	add.w	r0, r5, r7
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8014e8c:	eba5 0507 	sub.w	r5, r5, r7
			    & RANGE_MASK];
 8014e90:	f3c0 4089 	ubfx	r0, r0, #18, #10
			    & RANGE_MASK];
 8014e94:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8014e98:	5c18      	ldrb	r0, [r3, r0]
 8014e9a:	9b5c      	ldr	r3, [sp, #368]	; 0x170
 8014e9c:	f809 0003 	strb.w	r0, [r9, r3]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8014ea0:	9b01      	ldr	r3, [sp, #4]
 8014ea2:	5d58      	ldrb	r0, [r3, r5]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8014ea4:	9b00      	ldr	r3, [sp, #0]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8014ea6:	7170      	strb	r0, [r6, #5]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8014ea8:	eb03 304e 	add.w	r0, r3, lr, lsl #13
 8014eac:	9b01      	ldr	r3, [sp, #4]
			    & RANGE_MASK];
 8014eae:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8014eb2:	5c18      	ldrb	r0, [r3, r0]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8014eb4:	9b00      	ldr	r3, [sp, #0]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8014eb6:	7070      	strb	r0, [r6, #1]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8014eb8:	eba3 3e4e 	sub.w	lr, r3, lr, lsl #13
 8014ebc:	9b01      	ldr	r3, [sp, #4]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8014ebe:	9801      	ldr	r0, [sp, #4]
			    & RANGE_MASK];
 8014ec0:	f3ce 4e89 	ubfx	lr, lr, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8014ec4:	f813 300e 	ldrb.w	r3, [r3, lr]
 8014ec8:	7133      	strb	r3, [r6, #4]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8014eca:	eb02 0304 	add.w	r3, r2, r4
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8014ece:	eba2 0404 	sub.w	r4, r2, r4
			    & RANGE_MASK];
 8014ed2:	f3c3 4389 	ubfx	r3, r3, #18, #10
			    & RANGE_MASK];
 8014ed6:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8014eda:	5cc3      	ldrb	r3, [r0, r3]
 8014edc:	70b3      	strb	r3, [r6, #2]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8014ede:	5d03      	ldrb	r3, [r0, r4]
 8014ee0:	70f3      	strb	r3, [r6, #3]
  for (ctr = 0; ctr < 12; ctr++) {
 8014ee2:	d197      	bne.n	8014e14 <jpeg_idct_6x12+0x1d4>
  }
}
 8014ee4:	b053      	add	sp, #332	; 0x14c
 8014ee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014eea:	bf00      	nop
 8014eec:	ffffeeaf 	.word	0xffffeeaf
 8014ef0:	ffffde8b 	.word	0xffffde8b
 8014ef4:	ffffd0b0 	.word	0xffffd0b0
 8014ef8:	ffffea5c 	.word	0xffffea5c
 8014efc:	ffffc08c 	.word	0xffffc08c

08014f00 <jpeg_idct_5x10>:

GLOBAL(void)
jpeg_idct_5x10 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8014f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f04:	b0b9      	sub	sp, #228	; 0xe4
 8014f06:	1e94      	subs	r4, r2, #2
 8014f08:	9303      	str	r3, [sp, #12]
  INT32 z1, z2, z3, z4, z5;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8014f0a:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8014f0e:	6d48      	ldr	r0, [r1, #84]	; 0x54
  /* Pass 1: process columns from input, store into work array.
   * 10-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/20).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 8014f10:	a906      	add	r1, sp, #24
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8014f12:	3380      	adds	r3, #128	; 0x80
 8014f14:	3804      	subs	r0, #4
 8014f16:	9300      	str	r3, [sp, #0]
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 8014f18:	f102 0308 	add.w	r3, r2, #8
 8014f1c:	9305      	str	r3, [sp, #20]
    /* Even part */

    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014f1e:	f934 6f02 	ldrsh.w	r6, [r4, #2]!
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 8014f22:	3104      	adds	r1, #4
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014f24:	f850 3f04 	ldr.w	r3, [r0, #4]!
    z3 <<= CONST_BITS;
    /* Add fudge factor here for final descale. */
    z3 += ONE << (CONST_BITS-PASS1_BITS-1);
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8014f28:	f9b4 2040 	ldrsh.w	r2, [r4, #64]	; 0x40
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014f2c:	435e      	muls	r6, r3
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8014f2e:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8014f32:	4353      	muls	r3, r2
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 8014f34:	f242 429d 	movw	r2, #9373	; 0x249d
    z3 <<= CONST_BITS;
 8014f38:	0376      	lsls	r6, r6, #13
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 8014f3a:	fb02 f703 	mul.w	r7, r2, r3
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 8014f3e:	f640 52fc 	movw	r2, #3580	; 0xdfc
    z3 += ONE << (CONST_BITS-PASS1_BITS-1);
 8014f42:	f506 6680 	add.w	r6, r6, #1024	; 0x400
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 8014f46:	4353      	muls	r3, r2
			CONST_BITS-PASS1_BITS);

    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 8014f48:	f641 229a 	movw	r2, #6810	; 0x1a9a
    tmp10 = z3 + z1;
 8014f4c:	19f5      	adds	r5, r6, r7
    tmp11 = z3 - z2;
 8014f4e:	eba6 0e03 	sub.w	lr, r6, r3
    tmp22 = RIGHT_SHIFT(z3 - ((z1 - z2) << 1),   /* c0 = (c4-c8)*2 */
 8014f52:	1afb      	subs	r3, r7, r3
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8014f54:	f9b4 7060 	ldrsh.w	r7, [r4, #96]	; 0x60
    tmp22 = RIGHT_SHIFT(z3 - ((z1 - z2) << 1),   /* c0 = (c4-c8)*2 */
 8014f58:	eba6 0343 	sub.w	r3, r6, r3, lsl #1
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8014f5c:	f9b4 6020 	ldrsh.w	r6, [r4, #32]
    tmp22 = RIGHT_SHIFT(z3 - ((z1 - z2) << 1),   /* c0 = (c4-c8)*2 */
 8014f60:	9304      	str	r3, [sp, #16]
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8014f62:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8014f64:	435e      	muls	r6, r3
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8014f66:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
 8014f6a:	435f      	muls	r7, r3
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 8014f6c:	19f3      	adds	r3, r6, r7
 8014f6e:	4353      	muls	r3, r2
    tmp12 = z1 + MULTIPLY(z2, FIX(0.513743148)); /* c2-c6 */
 8014f70:	f241 0271 	movw	r2, #4209	; 0x1071
 8014f74:	fb02 3606 	mla	r6, r2, r6, r3
    tmp13 = z1 - MULTIPLY(z3, FIX(2.176250899)); /* c2+c6 */
 8014f78:	4a6d      	ldr	r2, [pc, #436]	; (8015130 <jpeg_idct_5x10+0x230>)
 8014f7a:	fb02 3307 	mla	r3, r2, r7, r3

    tmp20 = tmp10 + tmp12;
    tmp24 = tmp10 - tmp12;
 8014f7e:	1baa      	subs	r2, r5, r6
    tmp20 = tmp10 + tmp12;
 8014f80:	eb05 0c06 	add.w	ip, r5, r6
    tmp23 = tmp11 - tmp13;

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8014f84:	f9b4 5030 	ldrsh.w	r5, [r4, #48]	; 0x30
    tmp21 = tmp11 + tmp13;
 8014f88:	eb0e 0703 	add.w	r7, lr, r3
    tmp23 = tmp11 - tmp13;
 8014f8c:	ebae 0303 	sub.w	r3, lr, r3
    tmp24 = tmp10 - tmp12;
 8014f90:	9201      	str	r2, [sp, #4]
    tmp23 = tmp11 - tmp13;
 8014f92:	9302      	str	r3, [sp, #8]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8014f94:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
 8014f98:	6a03      	ldr	r3, [r0, #32]
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8014f9a:	f9b4 e050 	ldrsh.w	lr, [r4, #80]	; 0x50
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8014f9e:	435a      	muls	r2, r3
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8014fa0:	6e03      	ldr	r3, [r0, #96]	; 0x60
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8014fa2:	f9b4 6070 	ldrsh.w	r6, [r4, #112]	; 0x70
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8014fa6:	436b      	muls	r3, r5
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8014fa8:	f8d0 50a0 	ldr.w	r5, [r0, #160]	; 0xa0
 8014fac:	fb05 fe0e 	mul.w	lr, r5, lr
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8014fb0:	f8d0 50e0 	ldr.w	r5, [r0, #224]	; 0xe0
 8014fb4:	4375      	muls	r5, r6
    tmp13 = z2 - z4;

    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
    z5 = z3 << CONST_BITS;

    z2 = MULTIPLY(tmp11, FIX(0.951056516));           /* (c3+c7)/2 */
 8014fb6:	f641 666f 	movw	r6, #7791	; 0x1e6f
    tmp11 = z2 + z4;
 8014fba:	eb03 0905 	add.w	r9, r3, r5
    tmp13 = z2 - z4;
 8014fbe:	1b5b      	subs	r3, r3, r5
    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 8014fc0:	f640 15e3 	movw	r5, #2531	; 0x9e3
    z2 = MULTIPLY(tmp11, FIX(0.951056516));           /* (c3+c7)/2 */
 8014fc4:	fb06 fb09 	mul.w	fp, r6, r9
    z4 = z5 + tmp12;

    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8014fc8:	f642 46b3 	movw	r6, #11443	; 0x2cb3
    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 8014fcc:	435d      	muls	r5, r3
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8014fce:	fb06 b802 	mla	r8, r6, r2, fp
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8014fd2:	f240 7614 	movw	r6, #1812	; 0x714
    z4 = z5 + tmp12;
 8014fd6:	eb05 3a4e 	add.w	sl, r5, lr, lsl #13
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8014fda:	4356      	muls	r6, r2

    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
    z4 = z5 - tmp12 - (tmp13 << (CONST_BITS - 1));
 8014fdc:	ebc5 354e 	rsb	r5, r5, lr, lsl #13
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8014fe0:	44d0      	add	r8, sl
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8014fe2:	eba6 060b 	sub.w	r6, r6, fp
    z4 = z5 - tmp12 - (tmp13 << (CONST_BITS - 1));
 8014fe6:	eba5 3503 	sub.w	r5, r5, r3, lsl #12

    tmp12 = (z1 - tmp13 - z3) << PASS1_BITS;
 8014fea:	1ad3      	subs	r3, r2, r3
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8014fec:	44b2      	add	sl, r6
    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 8014fee:	f241 26cf 	movw	r6, #4815	; 0x12cf
    tmp12 = (z1 - tmp13 - z3) << PASS1_BITS;
 8014ff2:	eba3 0e0e 	sub.w	lr, r3, lr

    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8014ff6:	f642 0353 	movw	r3, #10323	; 0x2853
    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 8014ffa:	fb06 f909 	mul.w	r9, r6, r9
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8014ffe:	f241 468c 	movw	r6, #5260	; 0x148c
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8015002:	4353      	muls	r3, r2
    tmp12 = (z1 - tmp13 - z3) << PASS1_BITS;
 8015004:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8015008:	4372      	muls	r2, r6
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 801500a:	eba3 0309 	sub.w	r3, r3, r9
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 801500e:	eba2 0909 	sub.w	r9, r2, r9

    /* Final output stage */

    wsptr[5*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8015012:	eb0c 0208 	add.w	r2, ip, r8
    wsptr[5*9] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8015016:	ebac 0c08 	sub.w	ip, ip, r8
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 801501a:	1b5b      	subs	r3, r3, r5
    wsptr[5*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 801501c:	12d2      	asrs	r2, r2, #11
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 801501e:	444d      	add	r5, r9
    wsptr[5*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8015020:	f841 2c04 	str.w	r2, [r1, #-4]
    wsptr[5*9] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8015024:	ea4f 22ec 	mov.w	r2, ip, asr #11
 8015028:	f8c1 20b0 	str.w	r2, [r1, #176]	; 0xb0
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 801502c:	18fa      	adds	r2, r7, r3
    wsptr[5*8] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 801502e:	1aff      	subs	r7, r7, r3
    wsptr[5*2] = (int) (tmp22 + tmp12);
 8015030:	9b04      	ldr	r3, [sp, #16]
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8015032:	12d2      	asrs	r2, r2, #11
    wsptr[5*2] = (int) (tmp22 + tmp12);
 8015034:	eb0e 23e3 	add.w	r3, lr, r3, asr #11
    wsptr[5*8] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8015038:	12ff      	asrs	r7, r7, #11
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 801503a:	610a      	str	r2, [r1, #16]
    wsptr[5*2] = (int) (tmp22 + tmp12);
 801503c:	624b      	str	r3, [r1, #36]	; 0x24
    wsptr[5*7] = (int) (tmp22 - tmp12);
 801503e:	9b04      	ldr	r3, [sp, #16]
    wsptr[5*8] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8015040:	f8c1 709c 	str.w	r7, [r1, #156]	; 0x9c
    wsptr[5*7] = (int) (tmp22 - tmp12);
 8015044:	ebce 23e3 	rsb	r3, lr, r3, asr #11
 8015048:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    wsptr[5*3] = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 801504c:	9b02      	ldr	r3, [sp, #8]
 801504e:	442b      	add	r3, r5
 8015050:	12db      	asrs	r3, r3, #11
 8015052:	638b      	str	r3, [r1, #56]	; 0x38
    wsptr[5*6] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8015054:	9b02      	ldr	r3, [sp, #8]
 8015056:	1b5d      	subs	r5, r3, r5
    wsptr[5*4] = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8015058:	9b01      	ldr	r3, [sp, #4]
 801505a:	4453      	add	r3, sl
    wsptr[5*6] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 801505c:	12ed      	asrs	r5, r5, #11
    wsptr[5*4] = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 801505e:	12db      	asrs	r3, r3, #11
    wsptr[5*6] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8015060:	674d      	str	r5, [r1, #116]	; 0x74
    wsptr[5*4] = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8015062:	64cb      	str	r3, [r1, #76]	; 0x4c
    wsptr[5*5] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8015064:	9b01      	ldr	r3, [sp, #4]
 8015066:	eba3 0a0a 	sub.w	sl, r3, sl
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 801506a:	9b05      	ldr	r3, [sp, #20]
    wsptr[5*5] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 801506c:	ea4f 26ea 	mov.w	r6, sl, asr #11
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 8015070:	42a3      	cmp	r3, r4
    wsptr[5*5] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8015072:	660e      	str	r6, [r1, #96]	; 0x60
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 8015074:	f47f af53 	bne.w	8014f1e <jpeg_idct_5x10+0x1e>
 8015078:	9b03      	ldr	r3, [sp, #12]
  }

  /* Pass 2: process 10 rows from work array, store into output array.
   * 5-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/10).
   */
  wsptr = workspace;
 801507a:	a906      	add	r1, sp, #24
    /* Add fudge factor here for final descale. */
    tmp12 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp12 <<= CONST_BITS;
    tmp13 = (INT32) wsptr[2];
    tmp14 = (INT32) wsptr[4];
    z1 = MULTIPLY(tmp13 + tmp14, FIX(0.790569415)); /* (c2+c4)/2 */
 801507c:	f641 1a4c 	movw	sl, #6476	; 0x194c
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 8015080:	f44f 6935 	mov.w	r9, #2896	; 0xb50
 8015084:	f1a3 0c04 	sub.w	ip, r3, #4
    /* Odd part */

    z2 = (INT32) wsptr[1];
    z3 = (INT32) wsptr[3];

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));       /* c3 */
 8015088:	f641 289a 	movw	r8, #6810	; 0x1a9a
 801508c:	3324      	adds	r3, #36	; 0x24
 801508e:	9302      	str	r3, [sp, #8]
    outptr = output_buf[ctr] + output_col;
 8015090:	f85c ef04 	ldr.w	lr, [ip, #4]!
			    & RANGE_MASK];
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 5;		/* advance pointer to next row */
 8015094:	3114      	adds	r1, #20
    outptr = output_buf[ctr] + output_col;
 8015096:	9b42      	ldr	r3, [sp, #264]	; 0x108
    tmp14 = (INT32) wsptr[4];
 8015098:	f851 0c04 	ldr.w	r0, [r1, #-4]
    outptr = output_buf[ctr] + output_col;
 801509c:	eb0e 0603 	add.w	r6, lr, r3
    tmp13 = (INT32) wsptr[2];
 80150a0:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    tmp12 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80150a4:	f851 7c14 	ldr.w	r7, [r1, #-20]
    z1 = MULTIPLY(tmp13 + tmp14, FIX(0.790569415)); /* (c2+c4)/2 */
 80150a8:	181a      	adds	r2, r3, r0
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 80150aa:	1a1b      	subs	r3, r3, r0
    tmp12 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80150ac:	3710      	adds	r7, #16
    z3 = (INT32) wsptr[3];
 80150ae:	f851 bc08 	ldr.w	fp, [r1, #-8]
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 80150b2:	fb09 f303 	mul.w	r3, r9, r3
    z2 = (INT32) wsptr[1];
 80150b6:	f851 5c10 	ldr.w	r5, [r1, #-16]
    z1 = MULTIPLY(tmp13 + tmp14, FIX(0.790569415)); /* (c2+c4)/2 */
 80150ba:	fb0a f202 	mul.w	r2, sl, r2
    z3 = tmp12 + z2;
 80150be:	eb03 3047 	add.w	r0, r3, r7, lsl #13
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 80150c2:	9301      	str	r3, [sp, #4]
    tmp13 = z1 + MULTIPLY(z2, FIX(0.513743148));    /* c1-c3 */
 80150c4:	f241 0371 	movw	r3, #4209	; 0x1071
    tmp10 = z3 + z1;
 80150c8:	1814      	adds	r4, r2, r0
    tmp11 = z3 - z1;
 80150ca:	1a82      	subs	r2, r0, r2
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));       /* c3 */
 80150cc:	eb05 000b 	add.w	r0, r5, fp
 80150d0:	fb08 f000 	mul.w	r0, r8, r0
    tmp13 = z1 + MULTIPLY(z2, FIX(0.513743148));    /* c1-c3 */
 80150d4:	fb03 0505 	mla	r5, r3, r5, r0
    tmp14 = z1 - MULTIPLY(z3, FIX(2.176250899));    /* c1+c3 */
 80150d8:	4b15      	ldr	r3, [pc, #84]	; (8015130 <jpeg_idct_5x10+0x230>)
 80150da:	fb03 000b 	mla	r0, r3, fp, r0
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp13,
 80150de:	eb04 0b05 	add.w	fp, r4, r5
 80150e2:	9b00      	ldr	r3, [sp, #0]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp13,
 80150e4:	1b64      	subs	r4, r4, r5
			    & RANGE_MASK];
 80150e6:	f3cb 4b89 	ubfx	fp, fp, #18, #10
			    & RANGE_MASK];
 80150ea:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp13,
 80150ee:	f813 b00b 	ldrb.w	fp, [r3, fp]
 80150f2:	9b42      	ldr	r3, [sp, #264]	; 0x108
 80150f4:	f80e b003 	strb.w	fp, [lr, r3]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp13,
 80150f8:	9b00      	ldr	r3, [sp, #0]
 80150fa:	5d1c      	ldrb	r4, [r3, r4]
 80150fc:	7134      	strb	r4, [r6, #4]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp14,
 80150fe:	1814      	adds	r4, r2, r0
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp14,
 8015100:	1a12      	subs	r2, r2, r0
			    & RANGE_MASK];
 8015102:	f3c4 4489 	ubfx	r4, r4, #18, #10
			    & RANGE_MASK];
 8015106:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp14,
 801510a:	5d1c      	ldrb	r4, [r3, r4]
 801510c:	7074      	strb	r4, [r6, #1]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp14,
 801510e:	5c9a      	ldrb	r2, [r3, r2]
    tmp12 -= z2 << 2;
 8015110:	9b01      	ldr	r3, [sp, #4]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp14,
 8015112:	70f2      	strb	r2, [r6, #3]
    tmp12 -= z2 << 2;
 8015114:	009b      	lsls	r3, r3, #2
 8015116:	ebc3 3747 	rsb	r7, r3, r7, lsl #13
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12,
 801511a:	9b00      	ldr	r3, [sp, #0]
			    & RANGE_MASK];
 801511c:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12,
 8015120:	5ddb      	ldrb	r3, [r3, r7]
 8015122:	70b3      	strb	r3, [r6, #2]
  for (ctr = 0; ctr < 10; ctr++) {
 8015124:	9b02      	ldr	r3, [sp, #8]
 8015126:	4563      	cmp	r3, ip
 8015128:	d1b2      	bne.n	8015090 <jpeg_idct_5x10+0x190>
  }
}
 801512a:	b039      	add	sp, #228	; 0xe4
 801512c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015130:	ffffba5c 	.word	0xffffba5c

08015134 <jpeg_idct_4x8>:

GLOBAL(void)
jpeg_idct_4x8 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8015134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015138:	b0a7      	sub	sp, #156	; 0x9c
  /* Pass 1: process columns from input, store into work array. */
  /* Note results are scaled up by sqrt(8) compared to a true IDCT; */
  /* furthermore, we scale the results by 2**PASS1_BITS. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 801513a:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 801513c:	3a02      	subs	r2, #2
{
 801513e:	9304      	str	r3, [sp, #16]
  wsptr = workspace;
 8015140:	a906      	add	r1, sp, #24
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8015142:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8015146:	f103 0c80 	add.w	ip, r3, #128	; 0x80
  for (ctr = 4; ctr > 0; ctr--) {
 801514a:	f105 0310 	add.w	r3, r5, #16
 801514e:	9305      	str	r3, [sp, #20]
     * DC coefficient (with scale factor as needed).
     * With typical images and quantization tables, half or more of the
     * column DCT calculations can be simplified this way.
     */

    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 8015150:	f9b2 a012 	ldrsh.w	sl, [r2, #18]
      wsptr[4*6] = dcval;
      wsptr[4*7] = dcval;

      inptr++;			/* advance pointers to next column */
      quantptr++;
      wsptr++;
 8015154:	3104      	adds	r1, #4
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 8015156:	f9b2 b022 	ldrsh.w	fp, [r2, #34]	; 0x22
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 801515a:	f9b2 e032 	ldrsh.w	lr, [r2, #50]	; 0x32
 801515e:	f9b2 7042 	ldrsh.w	r7, [r2, #66]	; 0x42
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 8015162:	f9b2 8052 	ldrsh.w	r8, [r2, #82]	; 0x52
 8015166:	f9b2 6062 	ldrsh.w	r6, [r2, #98]	; 0x62
	inptr[DCTSIZE*7] == 0) {
 801516a:	f9b2 9072 	ldrsh.w	r9, [r2, #114]	; 0x72
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 801516e:	f855 3b04 	ldr.w	r3, [r5], #4
 8015172:	f932 4f02 	ldrsh.w	r4, [r2, #2]!
 8015176:	435c      	muls	r4, r3
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 8015178:	ea4a 030b 	orr.w	r3, sl, fp
 801517c:	ea4e 0303 	orr.w	r3, lr, r3
 8015180:	433b      	orrs	r3, r7
 8015182:	ea48 0303 	orr.w	r3, r8, r3
 8015186:	4333      	orrs	r3, r6
 8015188:	ea59 0303 	orrs.w	r3, r9, r3
 801518c:	d154      	bne.n	8015238 <jpeg_idct_4x8+0x104>
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 801518e:	00a4      	lsls	r4, r4, #2
      wsptr[4*0] = dcval;
 8015190:	f841 4c04 	str.w	r4, [r1, #-4]
      wsptr[4*1] = dcval;
 8015194:	60cc      	str	r4, [r1, #12]
      wsptr[4*2] = dcval;
 8015196:	61cc      	str	r4, [r1, #28]
      wsptr[4*3] = dcval;
 8015198:	62cc      	str	r4, [r1, #44]	; 0x2c
      wsptr[4*4] = dcval;
 801519a:	63cc      	str	r4, [r1, #60]	; 0x3c
      wsptr[4*5] = dcval;
 801519c:	64cc      	str	r4, [r1, #76]	; 0x4c
      wsptr[4*6] = dcval;
 801519e:	65cc      	str	r4, [r1, #92]	; 0x5c
      wsptr[4*7] = dcval;
 80151a0:	66cc      	str	r4, [r1, #108]	; 0x6c
  for (ctr = 4; ctr > 0; ctr--) {
 80151a2:	9b05      	ldr	r3, [sp, #20]
 80151a4:	42ab      	cmp	r3, r5
 80151a6:	d1d3      	bne.n	8015150 <jpeg_idct_4x8+0x1c>
 80151a8:	9b04      	ldr	r3, [sp, #16]
  }

  /* Pass 2: process 8 rows from work array, store into output array.
   * 4-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/16).
   */
  wsptr = workspace;
 80151aa:	ac06      	add	r4, sp, #24
    /* Same rotation as in the even part of the 8x8 LL&M IDCT */

    z2 = (INT32) wsptr[1];
    z3 = (INT32) wsptr[3];

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 80151ac:	f241 1851 	movw	r8, #4433	; 0x1151
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 80151b0:	f641 0e7e 	movw	lr, #6270	; 0x187e
 80151b4:	1f1d      	subs	r5, r3, #4
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 80151b6:	f8df b184 	ldr.w	fp, [pc, #388]	; 801533c <jpeg_idct_4x8+0x208>
 80151ba:	331c      	adds	r3, #28
 80151bc:	9301      	str	r3, [sp, #4]
    outptr = output_buf[ctr] + output_col;
 80151be:	f855 7f04 	ldr.w	r7, [r5, #4]!
			    & RANGE_MASK];
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
    
    wsptr += 4;		/* advance pointer to next row */
 80151c2:	3410      	adds	r4, #16
    outptr = output_buf[ctr] + output_col;
 80151c4:	9a30      	ldr	r2, [sp, #192]	; 0xc0
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80151c6:	f854 0c10 	ldr.w	r0, [r4, #-16]
    outptr = output_buf[ctr] + output_col;
 80151ca:	18be      	adds	r6, r7, r2
    z3 = (INT32) wsptr[3];
 80151cc:	f854 ac04 	ldr.w	sl, [r4, #-4]
    tmp2 = (INT32) wsptr[2];
 80151d0:	f854 2c08 	ldr.w	r2, [r4, #-8]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80151d4:	3010      	adds	r0, #16
    z2 = (INT32) wsptr[1];
 80151d6:	f854 1c0c 	ldr.w	r1, [r4, #-12]
    tmp10 = (tmp0 + tmp2) << CONST_BITS;
 80151da:	eb00 0902 	add.w	r9, r0, r2
    tmp12 = (tmp0 - tmp2) << CONST_BITS;
 80151de:	1a80      	subs	r0, r0, r2
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 80151e0:	eb01 020a 	add.w	r2, r1, sl
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 80151e4:	9b30      	ldr	r3, [sp, #192]	; 0xc0
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 80151e6:	fb08 f202 	mul.w	r2, r8, r2
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 80151ea:	fb0e 2101 	mla	r1, lr, r1, r2
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 80151ee:	fb0b 220a 	mla	r2, fp, sl, r2
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 80151f2:	eb01 3a49 	add.w	sl, r1, r9, lsl #13
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 80151f6:	ebc1 3149 	rsb	r1, r1, r9, lsl #13
			    & RANGE_MASK];
 80151fa:	f3ca 4a89 	ubfx	sl, sl, #18, #10
			    & RANGE_MASK];
 80151fe:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8015202:	f81c a00a 	ldrb.w	sl, [ip, sl]
 8015206:	f807 a003 	strb.w	sl, [r7, r3]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 801520a:	f81c 1001 	ldrb.w	r1, [ip, r1]
  for (ctr = 0; ctr < 8; ctr++) {
 801520e:	9b01      	ldr	r3, [sp, #4]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8015210:	70f1      	strb	r1, [r6, #3]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8015212:	eb02 3140 	add.w	r1, r2, r0, lsl #13
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8015216:	ebc2 3240 	rsb	r2, r2, r0, lsl #13
  for (ctr = 0; ctr < 8; ctr++) {
 801521a:	42ab      	cmp	r3, r5
			    & RANGE_MASK];
 801521c:	f3c1 4189 	ubfx	r1, r1, #18, #10
			    & RANGE_MASK];
 8015220:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8015224:	f81c 1001 	ldrb.w	r1, [ip, r1]
 8015228:	7071      	strb	r1, [r6, #1]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 801522a:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801522e:	70b2      	strb	r2, [r6, #2]
  for (ctr = 0; ctr < 8; ctr++) {
 8015230:	d1c5      	bne.n	80151be <jpeg_idct_4x8+0x8a>
  }
}
 8015232:	b027      	add	sp, #156	; 0x9c
 8015234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8015238:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 801523a:	fb00 fb0b 	mul.w	fp, r0, fp
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801523e:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
 8015242:	4370      	muls	r0, r6
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 8015244:	f241 1651 	movw	r6, #4433	; 0x1151
 8015248:	eb0b 0300 	add.w	r3, fp, r0
 801524c:	4373      	muls	r3, r6
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 801524e:	f641 067e 	movw	r6, #6270	; 0x187e
 8015252:	fb06 3b0b 	mla	fp, r6, fp, r3
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 8015256:	4e39      	ldr	r6, [pc, #228]	; (801533c <jpeg_idct_4x8+0x208>)
 8015258:	fb06 3600 	mla	r6, r6, r0, r3
    z2 <<= CONST_BITS;
 801525c:	0363      	lsls	r3, r4, #13
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801525e:	6fe8      	ldr	r0, [r5, #124]	; 0x7c
    z2 += ONE << (CONST_BITS-PASS1_BITS-1);
 8015260:	f503 6380 	add.w	r3, r3, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8015264:	4378      	muls	r0, r7
    tmp0 = z2 + z3;
 8015266:	eb03 3440 	add.w	r4, r3, r0, lsl #13
    tmp1 = z2 - z3;
 801526a:	eba3 3340 	sub.w	r3, r3, r0, lsl #13
    tmp10 = tmp0 + tmp2;
 801526e:	eb0b 0004 	add.w	r0, fp, r4
    tmp11 = tmp1 + tmp3;
 8015272:	18f7      	adds	r7, r6, r3
    tmp12 = tmp1 - tmp3;
 8015274:	1b9b      	subs	r3, r3, r6
    tmp10 = tmp0 + tmp2;
 8015276:	9001      	str	r0, [sp, #4]
    tmp13 = tmp0 - tmp2;
 8015278:	eba4 000b 	sub.w	r0, r4, fp
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801527c:	69ec      	ldr	r4, [r5, #28]
    tmp13 = tmp0 - tmp2;
 801527e:	9002      	str	r0, [sp, #8]
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8015280:	f8d5 00dc 	ldr.w	r0, [r5, #220]	; 0xdc
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8015284:	fb04 fa0a 	mul.w	sl, r4, sl
    tmp12 = tmp1 - tmp3;
 8015288:	9303      	str	r3, [sp, #12]
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 801528a:	f242 53a1 	movw	r3, #9633	; 0x25a1
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 801528e:	fb00 f909 	mul.w	r9, r0, r9
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8015292:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
 8015296:	fb00 f808 	mul.w	r8, r0, r8
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801529a:	6de8      	ldr	r0, [r5, #92]	; 0x5c
 801529c:	fb00 fe0e 	mul.w	lr, r0, lr
    z3 = tmp1 + tmp3;
 80152a0:	eb08 040a 	add.w	r4, r8, sl
    z2 = tmp0 + tmp2;
 80152a4:	eb09 060e 	add.w	r6, r9, lr
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 80152a8:	1930      	adds	r0, r6, r4
 80152aa:	4358      	muls	r0, r3
    z2 += z1;
 80152ac:	4b24      	ldr	r3, [pc, #144]	; (8015340 <jpeg_idct_4x8+0x20c>)
 80152ae:	fb03 0606 	mla	r6, r3, r6, r0
    z3 += z1;
 80152b2:	4b24      	ldr	r3, [pc, #144]	; (8015344 <jpeg_idct_4x8+0x210>)
 80152b4:	fb03 0004 	mla	r0, r3, r4, r0
    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 80152b8:	eb09 040a 	add.w	r4, r9, sl
 80152bc:	4b22      	ldr	r3, [pc, #136]	; (8015348 <jpeg_idct_4x8+0x214>)
 80152be:	435c      	muls	r4, r3
    tmp0 += z1 + z2;
 80152c0:	f640 138e 	movw	r3, #2446	; 0x98e
 80152c4:	eb06 0b04 	add.w	fp, r6, r4
    tmp3 += z1 + z3;
 80152c8:	4404      	add	r4, r0
    tmp0 += z1 + z2;
 80152ca:	fb03 b909 	mla	r9, r3, r9, fp
    tmp3 += z1 + z3;
 80152ce:	f243 0b0b 	movw	fp, #12299	; 0x300b
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 80152d2:	4b1e      	ldr	r3, [pc, #120]	; (801534c <jpeg_idct_4x8+0x218>)
    tmp3 += z1 + z3;
 80152d4:	fb0b 440a 	mla	r4, fp, sl, r4
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 80152d8:	eb08 0a0e 	add.w	sl, r8, lr
    tmp1 += z1 + z3;
 80152dc:	f244 1bb3 	movw	fp, #16819	; 0x41b3
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 80152e0:	fb03 fa0a 	mul.w	sl, r3, sl
    wsptr[4*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 80152e4:	9b01      	ldr	r3, [sp, #4]
    tmp2 += z1 + z2;
 80152e6:	4456      	add	r6, sl
    tmp1 += z1 + z3;
 80152e8:	4450      	add	r0, sl
    tmp2 += z1 + z2;
 80152ea:	f246 2a54 	movw	sl, #25172	; 0x6254
    tmp1 += z1 + z3;
 80152ee:	fb0b 0008 	mla	r0, fp, r8, r0
    tmp2 += z1 + z2;
 80152f2:	fb0a 6a0e 	mla	sl, sl, lr, r6
    wsptr[4*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 80152f6:	191e      	adds	r6, r3, r4
    wsptr[4*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 80152f8:	1b1c      	subs	r4, r3, r4
    wsptr[4*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 80152fa:	9b03      	ldr	r3, [sp, #12]
    wsptr[4*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 80152fc:	12f6      	asrs	r6, r6, #11
    wsptr[4*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 80152fe:	12e4      	asrs	r4, r4, #11
    wsptr[4*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 8015300:	f841 6c04 	str.w	r6, [r1, #-4]
    wsptr[4*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 8015304:	66cc      	str	r4, [r1, #108]	; 0x6c
    wsptr[4*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 8015306:	eb07 040a 	add.w	r4, r7, sl
    wsptr[4*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 801530a:	eba7 0a0a 	sub.w	sl, r7, sl
    wsptr[4*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 801530e:	12e4      	asrs	r4, r4, #11
    wsptr[4*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 8015310:	ea4f 27ea 	mov.w	r7, sl, asr #11
    wsptr[4*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 8015314:	60cc      	str	r4, [r1, #12]
    wsptr[4*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 8015316:	181c      	adds	r4, r3, r0
    wsptr[4*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 8015318:	1a18      	subs	r0, r3, r0
    wsptr[4*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 801531a:	9b02      	ldr	r3, [sp, #8]
    wsptr[4*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 801531c:	12e4      	asrs	r4, r4, #11
    wsptr[4*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 801531e:	65cf      	str	r7, [r1, #92]	; 0x5c
    wsptr[4*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 8015320:	444b      	add	r3, r9
    wsptr[4*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 8015322:	12c0      	asrs	r0, r0, #11
    wsptr[4*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 8015324:	61cc      	str	r4, [r1, #28]
    wsptr[4*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 8015326:	12db      	asrs	r3, r3, #11
    wsptr[4*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 8015328:	64c8      	str	r0, [r1, #76]	; 0x4c
    wsptr[4*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 801532a:	62cb      	str	r3, [r1, #44]	; 0x2c
    wsptr[4*4] = (int) RIGHT_SHIFT(tmp13 - tmp0, CONST_BITS-PASS1_BITS);
 801532c:	9b02      	ldr	r3, [sp, #8]
 801532e:	eba3 0909 	sub.w	r9, r3, r9
 8015332:	ea4f 23e9 	mov.w	r3, r9, asr #11
 8015336:	63cb      	str	r3, [r1, #60]	; 0x3c
    wsptr++;
 8015338:	e733      	b.n	80151a2 <jpeg_idct_4x8+0x6e>
 801533a:	bf00      	nop
 801533c:	ffffc4df 	.word	0xffffc4df
 8015340:	ffffc13b 	.word	0xffffc13b
 8015344:	fffff384 	.word	0xfffff384
 8015348:	ffffe333 	.word	0xffffe333
 801534c:	ffffadfd 	.word	0xffffadfd

08015350 <jpeg_idct_3x6>:

GLOBAL(void)
jpeg_idct_3x6 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8015350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8015354:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
{
 8015358:	b095      	sub	sp, #84	; 0x54
 801535a:	6d4c      	ldr	r4, [r1, #84]	; 0x54
 801535c:	1e95      	subs	r5, r2, #2
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801535e:	f100 0e80 	add.w	lr, r0, #128	; 0x80
   * 6-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/12).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 8015362:	3204      	adds	r2, #4
 8015364:	3c04      	subs	r4, #4
  wsptr = workspace;
 8015366:	ae02      	add	r6, sp, #8
{
 8015368:	9300      	str	r3, [sp, #0]
 801536a:	9201      	str	r2, [sp, #4]
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801536c:	f935 1f02 	ldrsh.w	r1, [r5, #2]!
    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8015370:	f640 33b6 	movw	r3, #2998	; 0xbb6
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8015374:	f854 2f04 	ldr.w	r2, [r4, #4]!
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 8015378:	3604      	adds	r6, #4
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801537a:	f9b5 0040 	ldrsh.w	r0, [r5, #64]	; 0x40
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801537e:	4351      	muls	r1, r2
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8015380:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8015384:	f9b5 7020 	ldrsh.w	r7, [r5, #32]
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8015388:	4342      	muls	r2, r0
    tmp0 <<= CONST_BITS;
 801538a:	0349      	lsls	r1, r1, #13
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 801538c:	f241 60a1 	movw	r0, #5793	; 0x16a1
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8015390:	f9b5 9030 	ldrsh.w	r9, [r5, #48]	; 0x30
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 8015394:	f501 6180 	add.w	r1, r1, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8015398:	f9b5 8050 	ldrsh.w	r8, [r5, #80]	; 0x50
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 801539c:	4342      	muls	r2, r0
    tmp1 = tmp0 + tmp10;
 801539e:	1888      	adds	r0, r1, r2
    tmp11 = RIGHT_SHIFT(tmp0 - tmp10 - tmp10, CONST_BITS-PASS1_BITS);
 80153a0:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80153a4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80153a6:	437a      	muls	r2, r7
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 80153a8:	f242 7731 	movw	r7, #10033	; 0x2731
 80153ac:	437a      	muls	r2, r7
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80153ae:	f9b5 7010 	ldrsh.w	r7, [r5, #16]
    tmp10 = tmp1 + tmp0;
 80153b2:	eb00 0c02 	add.w	ip, r0, r2
    tmp12 = tmp1 - tmp0;
 80153b6:	1a80      	subs	r0, r0, r2
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80153b8:	6a22      	ldr	r2, [r4, #32]
 80153ba:	437a      	muls	r2, r7
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80153bc:	6e27      	ldr	r7, [r4, #96]	; 0x60
 80153be:	fb07 f909 	mul.w	r9, r7, r9
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80153c2:	f8d4 70a0 	ldr.w	r7, [r4, #160]	; 0xa0
 80153c6:	fb07 f808 	mul.w	r8, r7, r8
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 80153ca:	eb02 0a09 	add.w	sl, r2, r9
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 80153ce:	eb02 0708 	add.w	r7, r2, r8
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 80153d2:	eba8 0b09 	sub.w	fp, r8, r9
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 80153d6:	435f      	muls	r7, r3
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 80153d8:	9b01      	ldr	r3, [sp, #4]
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 80153da:	eb07 3a4a 	add.w	sl, r7, sl, lsl #13
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 80153de:	42ab      	cmp	r3, r5
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 80153e0:	eb07 3b4b 	add.w	fp, r7, fp, lsl #13
    tmp1 = (z1 - z2 - z3) << PASS1_BITS;
 80153e4:	eba2 0709 	sub.w	r7, r2, r9

    /* Final output stage */

    wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 80153e8:	eb0c 020a 	add.w	r2, ip, sl
    wsptr[3*5] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 80153ec:	ebac 0c0a 	sub.w	ip, ip, sl
    tmp1 = (z1 - z2 - z3) << PASS1_BITS;
 80153f0:	eba7 0708 	sub.w	r7, r7, r8
    wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 80153f4:	ea4f 22e2 	mov.w	r2, r2, asr #11
    tmp1 = (z1 - z2 - z3) << PASS1_BITS;
 80153f8:	ea4f 0887 	mov.w	r8, r7, lsl #2
    wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 80153fc:	f846 2c04 	str.w	r2, [r6, #-4]
    wsptr[3*5] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8015400:	ea4f 22ec 	mov.w	r2, ip, asr #11
 8015404:	63b2      	str	r2, [r6, #56]	; 0x38
    wsptr[3*1] = (int) (tmp11 + tmp1);
 8015406:	eb08 22e1 	add.w	r2, r8, r1, asr #11
    wsptr[3*4] = (int) (tmp11 - tmp1);
 801540a:	ebc8 21e1 	rsb	r1, r8, r1, asr #11
    wsptr[3*1] = (int) (tmp11 + tmp1);
 801540e:	60b2      	str	r2, [r6, #8]
    wsptr[3*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8015410:	eb00 020b 	add.w	r2, r0, fp
    wsptr[3*3] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 8015414:	eba0 0b0b 	sub.w	fp, r0, fp
    wsptr[3*4] = (int) (tmp11 - tmp1);
 8015418:	62f1      	str	r1, [r6, #44]	; 0x2c
    wsptr[3*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 801541a:	ea4f 22e2 	mov.w	r2, r2, asr #11
    wsptr[3*3] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 801541e:	ea4f 20eb 	mov.w	r0, fp, asr #11
    wsptr[3*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8015422:	6172      	str	r2, [r6, #20]
    wsptr[3*3] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 8015424:	6230      	str	r0, [r6, #32]
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 8015426:	d1a1      	bne.n	801536c <jpeg_idct_3x6+0x1c>
 8015428:	9b00      	ldr	r3, [sp, #0]
  }

  /* Pass 2: process 6 rows from work array, store into output array.
   * 3-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/6).
   */
  wsptr = workspace;
 801542a:	a902      	add	r1, sp, #8

    /* Add fudge factor here for final descale. */
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp0 <<= CONST_BITS;
    tmp2 = (INT32) wsptr[2];
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 801542c:	f241 6ca1 	movw	ip, #5793	; 0x16a1
    tmp2 = tmp0 - tmp12 - tmp12;

    /* Odd part */

    tmp12 = (INT32) wsptr[1];
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 8015430:	f242 7b31 	movw	fp, #10033	; 0x2731
 8015434:	1f1d      	subs	r5, r3, #4
 8015436:	3314      	adds	r3, #20
    outptr = output_buf[ctr] + output_col;
 8015438:	f855 9f04 	ldr.w	r9, [r5, #4]!
			    & RANGE_MASK];
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 3;		/* advance pointer to next row */
 801543c:	310c      	adds	r1, #12
    outptr = output_buf[ctr] + output_col;
 801543e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 8015440:	f851 0c04 	ldr.w	r0, [r1, #-4]
  for (ctr = 0; ctr < 6; ctr++) {
 8015444:	42ab      	cmp	r3, r5
    outptr = output_buf[ctr] + output_col;
 8015446:	eb09 0602 	add.w	r6, r9, r2
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801544a:	f851 2c0c 	ldr.w	r2, [r1, #-12]
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 801544e:	fb0c f000 	mul.w	r0, ip, r0
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 8015452:	f851 4c08 	ldr.w	r4, [r1, #-8]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8015456:	f102 0210 	add.w	r2, r2, #16
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 801545a:	9f1e      	ldr	r7, [sp, #120]	; 0x78
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 801545c:	fb0b f404 	mul.w	r4, fp, r4
    tmp10 = tmp0 + tmp12;
 8015460:	eb00 3842 	add.w	r8, r0, r2, lsl #13
    tmp2 = tmp0 - tmp12 - tmp12;
 8015464:	ebc0 3242 	rsb	r2, r0, r2, lsl #13
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8015468:	eb08 0a04 	add.w	sl, r8, r4
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 801546c:	eba8 0804 	sub.w	r8, r8, r4
    tmp2 = tmp0 - tmp12 - tmp12;
 8015470:	eba2 0200 	sub.w	r2, r2, r0
			    & RANGE_MASK];
 8015474:	f3ca 4a89 	ubfx	sl, sl, #18, #10
			    & RANGE_MASK];
 8015478:	f3c8 4889 	ubfx	r8, r8, #18, #10
			    & RANGE_MASK];
 801547c:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8015480:	f81e a00a 	ldrb.w	sl, [lr, sl]
 8015484:	f809 a007 	strb.w	sl, [r9, r7]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8015488:	f81e 4008 	ldrb.w	r4, [lr, r8]
 801548c:	70b4      	strb	r4, [r6, #2]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2,
 801548e:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8015492:	7072      	strb	r2, [r6, #1]
  for (ctr = 0; ctr < 6; ctr++) {
 8015494:	d1d0      	bne.n	8015438 <jpeg_idct_3x6+0xe8>
  }
}
 8015496:	b015      	add	sp, #84	; 0x54
 8015498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801549c <jpeg_idct_2x4>:

GLOBAL(void)
jpeg_idct_2x4 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 801549c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  INT32 * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80154a0:	f8d0 714c 	ldr.w	r7, [r0, #332]	; 0x14c
{
 80154a4:	b08b      	sub	sp, #44	; 0x2c
 80154a6:	6d4c      	ldr	r4, [r1, #84]	; 0x54
 80154a8:	1e96      	subs	r6, r2, #2
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80154aa:	f107 0080 	add.w	r0, r7, #128	; 0x80
   * 4-point IDCT kernel,
   * cK represents sqrt(2) * cos(K*pi/16) [refers to 8-point IDCT].
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 80154ae:	ad02      	add	r5, sp, #8
 80154b0:	3c04      	subs	r4, #4
    /* Same rotation as in the even part of the 8x8 LL&M IDCT */

    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 80154b2:	f241 1851 	movw	r8, #4433	; 0x1151
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 80154b6:	f641 0e7e 	movw	lr, #6270	; 0x187e
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80154ba:	9001      	str	r0, [sp, #4]
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80154bc:	f854 1f04 	ldr.w	r1, [r4, #4]!
 80154c0:	46b4      	mov	ip, r6
 80154c2:	f936 0f02 	ldrsh.w	r0, [r6, #2]!
  for (ctr = 0; ctr < 2; ctr++, inptr++, quantptr++, wsptr++) {
 80154c6:	3504      	adds	r5, #4
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 80154c8:	4f29      	ldr	r7, [pc, #164]	; (8015570 <jpeg_idct_2x4+0xd4>)
  for (ctr = 0; ctr < 2; ctr++, inptr++, quantptr++, wsptr++) {
 80154ca:	4562      	cmp	r2, ip
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80154cc:	fb01 f000 	mul.w	r0, r1, r0
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80154d0:	f9b6 9020 	ldrsh.w	r9, [r6, #32]
 80154d4:	6c21      	ldr	r1, [r4, #64]	; 0x40
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80154d6:	f9b6 a010 	ldrsh.w	sl, [r6, #16]
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80154da:	fb01 f109 	mul.w	r1, r1, r9
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80154de:	f9b6 b030 	ldrsh.w	fp, [r6, #48]	; 0x30
    tmp10 = (tmp0 + tmp2) << CONST_BITS;
 80154e2:	eb00 0901 	add.w	r9, r0, r1
    tmp12 = (tmp0 - tmp2) << CONST_BITS;
 80154e6:	eba0 0001 	sub.w	r0, r0, r1
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80154ea:	6a21      	ldr	r1, [r4, #32]
 80154ec:	fb01 fa0a 	mul.w	sl, r1, sl
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80154f0:	6e21      	ldr	r1, [r4, #96]	; 0x60
 80154f2:	fb01 fb0b 	mul.w	fp, r1, fp
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 80154f6:	eb0a 010b 	add.w	r1, sl, fp
 80154fa:	fb08 f101 	mul.w	r1, r8, r1
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 80154fe:	fb0e 1a0a 	mla	sl, lr, sl, r1
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 8015502:	fb07 110b 	mla	r1, r7, fp, r1

    /* Final output stage */

    wsptr[2*0] = tmp10 + tmp0;
 8015506:	eb0a 3b49 	add.w	fp, sl, r9, lsl #13
    wsptr[2*3] = tmp10 - tmp0;
 801550a:	ebca 3a49 	rsb	sl, sl, r9, lsl #13
    wsptr[2*1] = tmp12 + tmp2;
 801550e:	eb01 3940 	add.w	r9, r1, r0, lsl #13
    wsptr[2*0] = tmp10 + tmp0;
 8015512:	f845 bc04 	str.w	fp, [r5, #-4]
    wsptr[2*2] = tmp12 - tmp2;
 8015516:	ebc1 3140 	rsb	r1, r1, r0, lsl #13
    wsptr[2*3] = tmp10 - tmp0;
 801551a:	f8c5 a014 	str.w	sl, [r5, #20]
    wsptr[2*1] = tmp12 + tmp2;
 801551e:	f8c5 9004 	str.w	r9, [r5, #4]
    wsptr[2*2] = tmp12 - tmp2;
 8015522:	60e9      	str	r1, [r5, #12]
  for (ctr = 0; ctr < 2; ctr++, inptr++, quantptr++, wsptr++) {
 8015524:	d1ca      	bne.n	80154bc <jpeg_idct_2x4+0x20>
 8015526:	1f18      	subs	r0, r3, #4
  }

  /* Pass 2: process 4 rows from work array, store into output array. */

  wsptr = workspace;
 8015528:	a902      	add	r1, sp, #8
 801552a:	330c      	adds	r3, #12
  for (ctr = 0; ctr < 4; ctr++) {
    outptr = output_buf[ctr] + output_col;
 801552c:	f850 6f04 	ldr.w	r6, [r0, #4]!
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS+3)
			    & RANGE_MASK];
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS+3)
			    & RANGE_MASK];

    wsptr += 2;		/* advance pointer to next row */
 8015530:	3108      	adds	r1, #8
    outptr = output_buf[ctr] + output_col;
 8015532:	9a14      	ldr	r2, [sp, #80]	; 0x50
    tmp0 = wsptr[1];
 8015534:	f851 5c04 	ldr.w	r5, [r1, #-4]
  for (ctr = 0; ctr < 4; ctr++) {
 8015538:	4283      	cmp	r3, r0
    outptr = output_buf[ctr] + output_col;
 801553a:	eb06 0c02 	add.w	ip, r6, r2
    tmp10 = wsptr[0] + (ONE << (CONST_BITS+2));
 801553e:	f851 2c08 	ldr.w	r2, [r1, #-8]
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS+3)
 8015542:	9f01      	ldr	r7, [sp, #4]
    tmp10 = wsptr[0] + (ONE << (CONST_BITS+2));
 8015544:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS+3)
 8015548:	eb02 0405 	add.w	r4, r2, r5
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS+3)
 801554c:	eba2 0205 	sub.w	r2, r2, r5
			    & RANGE_MASK];
 8015550:	f3c4 4409 	ubfx	r4, r4, #16, #10
			    & RANGE_MASK];
 8015554:	f3c2 4209 	ubfx	r2, r2, #16, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS+3)
 8015558:	5d3c      	ldrb	r4, [r7, r4]
 801555a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 801555c:	55f4      	strb	r4, [r6, r7]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS+3)
 801555e:	9c01      	ldr	r4, [sp, #4]
 8015560:	5ca2      	ldrb	r2, [r4, r2]
 8015562:	f88c 2001 	strb.w	r2, [ip, #1]
  for (ctr = 0; ctr < 4; ctr++) {
 8015566:	d1e1      	bne.n	801552c <jpeg_idct_2x4+0x90>
  }
}
 8015568:	b00b      	add	sp, #44	; 0x2c
 801556a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801556e:	bf00      	nop
 8015570:	ffffc4df 	.word	0xffffc4df

08015574 <jpeg_idct_1x2>:

GLOBAL(void)
jpeg_idct_1x2 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8015574:	b570      	push	{r4, r5, r6, lr}
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
  SHIFT_TEMPS

  /* Process 1 column from input, store into output array. */

  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 8015576:	6d4c      	ldr	r4, [r1, #84]	; 0x54

  /* Even part */
    
  tmp10 = DEQUANTIZE(coef_block[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8015578:	f9b2 1000 	ldrsh.w	r1, [r2]
 801557c:	6826      	ldr	r6, [r4, #0]
  /* Add fudge factor here for final descale. */
  tmp10 += ONE << 2;

  /* Odd part */

  tmp0 = DEQUANTIZE(coef_block[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801557e:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8015582:	6a24      	ldr	r4, [r4, #32]
  tmp10 = DEQUANTIZE(coef_block[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8015584:	4371      	muls	r1, r6
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8015586:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
  tmp0 = DEQUANTIZE(coef_block[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801558a:	4362      	muls	r2, r4
  tmp10 += ONE << 2;
 801558c:	3104      	adds	r1, #4
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801558e:	3080      	adds	r0, #128	; 0x80
{
 8015590:	9d04      	ldr	r5, [sp, #16]

  /* Final output stage */

  output_buf[0][output_col] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, 3)
 8015592:	188c      	adds	r4, r1, r2
					  & RANGE_MASK];
  output_buf[1][output_col] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, 3)
 8015594:	1a89      	subs	r1, r1, r2
					  & RANGE_MASK];
 8015596:	f3c4 04c9 	ubfx	r4, r4, #3, #10
					  & RANGE_MASK];
 801559a:	f3c1 01c9 	ubfx	r1, r1, #3, #10
  output_buf[0][output_col] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, 3)
 801559e:	5d06      	ldrb	r6, [r0, r4]
 80155a0:	681c      	ldr	r4, [r3, #0]
 80155a2:	5566      	strb	r6, [r4, r5]
  output_buf[1][output_col] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, 3)
 80155a4:	5c42      	ldrb	r2, [r0, r1]
 80155a6:	685b      	ldr	r3, [r3, #4]
 80155a8:	555a      	strb	r2, [r3, r5]
}
 80155aa:	bd70      	pop	{r4, r5, r6, pc}

080155ac <out_of_memory>:
/* If we compiled MEM_STATS support, report alloc requests before dying */
{
#ifdef MEM_STATS
  cinfo->err->trace_level = 2;	/* force self_destruct to report stats */
#endif
  ERREXIT1(cinfo, JERR_OUT_OF_MEMORY, which);
 80155ac:	6803      	ldr	r3, [r0, #0]
 80155ae:	2238      	movs	r2, #56	; 0x38
 80155b0:	e9c3 2105 	strd	r2, r1, [r3, #20]
 80155b4:	681b      	ldr	r3, [r3, #0]
 80155b6:	4718      	bx	r3

080155b8 <do_barray_io>:
do_barray_io (j_common_ptr cinfo, jvirt_barray_ptr ptr, boolean writing)
/* Do backing store read or write of a virtual coefficient-block array */
{
  long bytesperrow, file_offset, byte_count, rows, thisrow, i;

  bytesperrow = (long) ptr->blocksperrow * SIZEOF(JBLOCK);
 80155b8:	688b      	ldr	r3, [r1, #8]
{
 80155ba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  bytesperrow = (long) ptr->blocksperrow * SIZEOF(JBLOCK);
 80155be:	ea4f 18c3 	mov.w	r8, r3, lsl #7
  file_offset = ptr->cur_start_row * bytesperrow;
 80155c2:	698b      	ldr	r3, [r1, #24]
{
 80155c4:	b085      	sub	sp, #20
 80155c6:	4681      	mov	r9, r0
 80155c8:	460c      	mov	r4, r1
 80155ca:	4692      	mov	sl, r2
  file_offset = ptr->cur_start_row * bytesperrow;
 80155cc:	fb03 f708 	mul.w	r7, r3, r8
  /* Loop to read or write each allocation chunk in mem_buffer */
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 80155d0:	2600      	movs	r6, #0
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
    if (rows <= 0)		/* this chunk might be past end of file! */
      break;
    byte_count = rows * bytesperrow;
    if (writing)
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 80155d2:	f101 0b30 	add.w	fp, r1, #48	; 0x30
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 80155d6:	6922      	ldr	r2, [r4, #16]
 80155d8:	42b2      	cmp	r2, r6
 80155da:	dc02      	bgt.n	80155e2 <do_barray_io+0x2a>
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
					   (void FAR *) ptr->mem_buffer[i],
					   file_offset, byte_count);
    file_offset += byte_count;
  }
}
 80155dc:	b005      	add	sp, #20
 80155de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 80155e2:	1b92      	subs	r2, r2, r6
 80155e4:	6961      	ldr	r1, [r4, #20]
    thisrow = (long) ptr->cur_start_row + i;
 80155e6:	69a0      	ldr	r0, [r4, #24]
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 80155e8:	428a      	cmp	r2, r1
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
 80155ea:	6863      	ldr	r3, [r4, #4]
    thisrow = (long) ptr->cur_start_row + i;
 80155ec:	eb06 0500 	add.w	r5, r6, r0
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 80155f0:	bfa8      	it	ge
 80155f2:	460a      	movge	r2, r1
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 80155f4:	69e1      	ldr	r1, [r4, #28]
 80155f6:	1b49      	subs	r1, r1, r5
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
 80155f8:	1b5d      	subs	r5, r3, r5
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 80155fa:	428a      	cmp	r2, r1
 80155fc:	bfa8      	it	ge
 80155fe:	460a      	movge	r2, r1
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
 8015600:	42aa      	cmp	r2, r5
 8015602:	bfa8      	it	ge
 8015604:	462a      	movge	r2, r5
    if (rows <= 0)		/* this chunk might be past end of file! */
 8015606:	2a00      	cmp	r2, #0
 8015608:	dde8      	ble.n	80155dc <do_barray_io+0x24>
    byte_count = rows * bytesperrow;
 801560a:	fb02 f308 	mul.w	r3, r2, r8
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 801560e:	6822      	ldr	r2, [r4, #0]
    byte_count = rows * bytesperrow;
 8015610:	9303      	str	r3, [sp, #12]
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 8015612:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
    if (writing)
 8015616:	f1ba 0f00 	cmp.w	sl, #0
 801561a:	d00a      	beq.n	8015632 <do_barray_io+0x7a>
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 801561c:	9300      	str	r3, [sp, #0]
 801561e:	4659      	mov	r1, fp
 8015620:	463b      	mov	r3, r7
 8015622:	4648      	mov	r0, r9
 8015624:	6b65      	ldr	r5, [r4, #52]	; 0x34
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
 8015626:	47a8      	blx	r5
    file_offset += byte_count;
 8015628:	9b03      	ldr	r3, [sp, #12]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 801562a:	6962      	ldr	r2, [r4, #20]
    file_offset += byte_count;
 801562c:	441f      	add	r7, r3
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 801562e:	4416      	add	r6, r2
 8015630:	e7d1      	b.n	80155d6 <do_barray_io+0x1e>
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
 8015632:	9b03      	ldr	r3, [sp, #12]
 8015634:	4659      	mov	r1, fp
 8015636:	4648      	mov	r0, r9
 8015638:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801563a:	9300      	str	r3, [sp, #0]
 801563c:	463b      	mov	r3, r7
 801563e:	e7f2      	b.n	8015626 <do_barray_io+0x6e>

08015640 <alloc_small>:
{
 8015640:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(small_pool_hdr)))
 8015644:	f64f 73f0 	movw	r3, #65520	; 0xfff0
{
 8015648:	4606      	mov	r6, r0
 801564a:	460d      	mov	r5, r1
 801564c:	4614      	mov	r4, r2
  if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(small_pool_hdr)))
 801564e:	429a      	cmp	r2, r3
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 8015650:	6847      	ldr	r7, [r0, #4]
  if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(small_pool_hdr)))
 8015652:	d902      	bls.n	801565a <alloc_small+0x1a>
    out_of_memory(cinfo, 1);	/* request exceeds malloc's ability */
 8015654:	2101      	movs	r1, #1
 8015656:	f7ff ffa9 	bl	80155ac <out_of_memory>
  if (odd_bytes > 0)
 801565a:	f014 0307 	ands.w	r3, r4, #7
    sizeofobject += SIZEOF(ALIGN_TYPE) - odd_bytes;
 801565e:	bf1c      	itt	ne
 8015660:	3408      	addne	r4, #8
 8015662:	1ae4      	subne	r4, r4, r3
  if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
 8015664:	2d01      	cmp	r5, #1
 8015666:	d906      	bls.n	8015676 <alloc_small+0x36>
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 8015668:	6833      	ldr	r3, [r6, #0]
 801566a:	220f      	movs	r2, #15
 801566c:	4630      	mov	r0, r6
 801566e:	e9c3 2505 	strd	r2, r5, [r3, #20]
 8015672:	681b      	ldr	r3, [r3, #0]
 8015674:	4798      	blx	r3
  hdr_ptr = mem->small_list[pool_id];
 8015676:	eb07 0885 	add.w	r8, r7, r5, lsl #2
  prev_hdr_ptr = NULL;
 801567a:	f04f 0a00 	mov.w	sl, #0
  hdr_ptr = mem->small_list[pool_id];
 801567e:	f8d8 0034 	ldr.w	r0, [r8, #52]	; 0x34
  while (hdr_ptr != NULL) {
 8015682:	b9e8      	cbnz	r0, 80156c0 <alloc_small+0x80>
    min_request = sizeofobject + SIZEOF(small_pool_hdr);
 8015684:	f104 0910 	add.w	r9, r4, #16
    if (prev_hdr_ptr == NULL)	/* first pool in class? */
 8015688:	f1ba 0f00 	cmp.w	sl, #0
 801568c:	d11e      	bne.n	80156cc <alloc_small+0x8c>
      slop = first_pool_slop[pool_id];
 801568e:	4b1d      	ldr	r3, [pc, #116]	; (8015704 <alloc_small+0xc4>)
      slop = extra_pool_slop[pool_id];
 8015690:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    if (slop > (size_t) (MAX_ALLOC_CHUNK-min_request))
 8015694:	f5c9 3580 	rsb	r5, r9, #65536	; 0x10000
 8015698:	429d      	cmp	r5, r3
 801569a:	bf28      	it	cs
 801569c:	461d      	movcs	r5, r3
      hdr_ptr = (small_pool_ptr) jpeg_get_small(cinfo, min_request + slop);
 801569e:	eb05 0b09 	add.w	fp, r5, r9
 80156a2:	4630      	mov	r0, r6
 80156a4:	4659      	mov	r1, fp
 80156a6:	f000 fbcf 	bl	8015e48 <jpeg_get_small>
      if (hdr_ptr != NULL)
 80156aa:	b988      	cbnz	r0, 80156d0 <alloc_small+0x90>
      if (slop < MIN_SLOP)	/* give up when it gets real small */
 80156ac:	2d63      	cmp	r5, #99	; 0x63
      slop /= 2;
 80156ae:	ea4f 0b55 	mov.w	fp, r5, lsr #1
      if (slop < MIN_SLOP)	/* give up when it gets real small */
 80156b2:	d803      	bhi.n	80156bc <alloc_small+0x7c>
	out_of_memory(cinfo, 2); /* jpeg_get_small failed */
 80156b4:	2102      	movs	r1, #2
 80156b6:	4630      	mov	r0, r6
 80156b8:	f7ff ff78 	bl	80155ac <out_of_memory>
    hdr_ptr = hdr_ptr->hdr.next;
 80156bc:	465d      	mov	r5, fp
 80156be:	e7ee      	b.n	801569e <alloc_small+0x5e>
    if (hdr_ptr->hdr.bytes_left >= sizeofobject)
 80156c0:	6883      	ldr	r3, [r0, #8]
 80156c2:	42a3      	cmp	r3, r4
 80156c4:	d211      	bcs.n	80156ea <alloc_small+0xaa>
    hdr_ptr = hdr_ptr->hdr.next;
 80156c6:	4682      	mov	sl, r0
 80156c8:	6800      	ldr	r0, [r0, #0]
 80156ca:	e7da      	b.n	8015682 <alloc_small+0x42>
      slop = extra_pool_slop[pool_id];
 80156cc:	4b0e      	ldr	r3, [pc, #56]	; (8015708 <alloc_small+0xc8>)
 80156ce:	e7df      	b.n	8015690 <alloc_small+0x50>
    mem->total_space_allocated += min_request + slop;
 80156d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    hdr_ptr->hdr.bytes_left = sizeofobject + slop;
 80156d2:	4425      	add	r5, r4
    mem->total_space_allocated += min_request + slop;
 80156d4:	445b      	add	r3, fp
 80156d6:	64fb      	str	r3, [r7, #76]	; 0x4c
    hdr_ptr->hdr.next = NULL;
 80156d8:	2300      	movs	r3, #0
    hdr_ptr->hdr.bytes_left = sizeofobject + slop;
 80156da:	6085      	str	r5, [r0, #8]
    hdr_ptr->hdr.bytes_used = 0;
 80156dc:	e9c0 3300 	strd	r3, r3, [r0]
    if (prev_hdr_ptr == NULL)	/* first pool in class? */
 80156e0:	f1ba 0f00 	cmp.w	sl, #0
 80156e4:	d10b      	bne.n	80156fe <alloc_small+0xbe>
      mem->small_list[pool_id] = hdr_ptr;
 80156e6:	f8c8 0034 	str.w	r0, [r8, #52]	; 0x34
  data_ptr += hdr_ptr->hdr.bytes_used; /* point to place for object */
 80156ea:	6843      	ldr	r3, [r0, #4]
  hdr_ptr->hdr.bytes_used += sizeofobject;
 80156ec:	191a      	adds	r2, r3, r4
  data_ptr += hdr_ptr->hdr.bytes_used; /* point to place for object */
 80156ee:	3310      	adds	r3, #16
  hdr_ptr->hdr.bytes_used += sizeofobject;
 80156f0:	6042      	str	r2, [r0, #4]
  hdr_ptr->hdr.bytes_left -= sizeofobject;
 80156f2:	6882      	ldr	r2, [r0, #8]
 80156f4:	1b12      	subs	r2, r2, r4
 80156f6:	6082      	str	r2, [r0, #8]
  data_ptr += hdr_ptr->hdr.bytes_used; /* point to place for object */
 80156f8:	4418      	add	r0, r3
}
 80156fa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      prev_hdr_ptr->hdr.next = hdr_ptr;
 80156fe:	f8ca 0000 	str.w	r0, [sl]
 8015702:	e7f2      	b.n	80156ea <alloc_small+0xaa>
 8015704:	0802f434 	.word	0x0802f434
 8015708:	0802f42c 	.word	0x0802f42c

0801570c <request_virt_barray>:
  if (pool_id != JPOOL_IMAGE)
 801570c:	2901      	cmp	r1, #1
{
 801570e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015712:	4604      	mov	r4, r0
 8015714:	460d      	mov	r5, r1
 8015716:	4616      	mov	r6, r2
 8015718:	461f      	mov	r7, r3
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 801571a:	f8d0 8004 	ldr.w	r8, [r0, #4]
  if (pool_id != JPOOL_IMAGE)
 801571e:	d005      	beq.n	801572c <request_virt_barray+0x20>
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 8015720:	6803      	ldr	r3, [r0, #0]
 8015722:	220f      	movs	r2, #15
 8015724:	e9c3 2105 	strd	r2, r1, [r3, #20]
 8015728:	681b      	ldr	r3, [r3, #0]
 801572a:	4798      	blx	r3
  result = (jvirt_barray_ptr) alloc_small(cinfo, pool_id,
 801572c:	223c      	movs	r2, #60	; 0x3c
 801572e:	4629      	mov	r1, r5
 8015730:	4620      	mov	r0, r4
 8015732:	f7ff ff85 	bl	8015640 <alloc_small>
  result->mem_buffer = NULL;	/* marks array not yet realized */
 8015736:	2300      	movs	r3, #0
  result->rows_in_array = numrows;
 8015738:	9a06      	ldr	r2, [sp, #24]
  result->mem_buffer = NULL;	/* marks array not yet realized */
 801573a:	6003      	str	r3, [r0, #0]
  result->b_s_open = FALSE;	/* no associated backing-store object */
 801573c:	6283      	str	r3, [r0, #40]	; 0x28
  result->next = mem->virt_barray_list; /* add to list of virtual arrays */
 801573e:	f8d8 3048 	ldr.w	r3, [r8, #72]	; 0x48
  result->pre_zero = pre_zero;
 8015742:	6206      	str	r6, [r0, #32]
  result->next = mem->virt_barray_list; /* add to list of virtual arrays */
 8015744:	62c3      	str	r3, [r0, #44]	; 0x2c
  result->blocksperrow = blocksperrow;
 8015746:	e9c0 2701 	strd	r2, r7, [r0, #4]
  result->maxaccess = maxaccess;
 801574a:	9a07      	ldr	r2, [sp, #28]
 801574c:	60c2      	str	r2, [r0, #12]
  mem->virt_barray_list = result;
 801574e:	f8c8 0048 	str.w	r0, [r8, #72]	; 0x48
}
 8015752:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015756 <request_virt_sarray>:
  if (pool_id != JPOOL_IMAGE)
 8015756:	2901      	cmp	r1, #1
{
 8015758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801575c:	4604      	mov	r4, r0
 801575e:	460d      	mov	r5, r1
 8015760:	4616      	mov	r6, r2
 8015762:	461f      	mov	r7, r3
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 8015764:	f8d0 8004 	ldr.w	r8, [r0, #4]
  if (pool_id != JPOOL_IMAGE)
 8015768:	d005      	beq.n	8015776 <request_virt_sarray+0x20>
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 801576a:	6803      	ldr	r3, [r0, #0]
 801576c:	220f      	movs	r2, #15
 801576e:	e9c3 2105 	strd	r2, r1, [r3, #20]
 8015772:	681b      	ldr	r3, [r3, #0]
 8015774:	4798      	blx	r3
  result = (jvirt_sarray_ptr) alloc_small(cinfo, pool_id,
 8015776:	223c      	movs	r2, #60	; 0x3c
 8015778:	4629      	mov	r1, r5
 801577a:	4620      	mov	r0, r4
 801577c:	f7ff ff60 	bl	8015640 <alloc_small>
  result->mem_buffer = NULL;	/* marks array not yet realized */
 8015780:	2300      	movs	r3, #0
  result->rows_in_array = numrows;
 8015782:	9a06      	ldr	r2, [sp, #24]
  result->mem_buffer = NULL;	/* marks array not yet realized */
 8015784:	6003      	str	r3, [r0, #0]
  result->b_s_open = FALSE;	/* no associated backing-store object */
 8015786:	6283      	str	r3, [r0, #40]	; 0x28
  result->next = mem->virt_sarray_list; /* add to list of virtual arrays */
 8015788:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
  result->pre_zero = pre_zero;
 801578c:	6206      	str	r6, [r0, #32]
  result->next = mem->virt_sarray_list; /* add to list of virtual arrays */
 801578e:	62c3      	str	r3, [r0, #44]	; 0x2c
  result->samplesperrow = samplesperrow;
 8015790:	e9c0 2701 	strd	r2, r7, [r0, #4]
  result->maxaccess = maxaccess;
 8015794:	9a07      	ldr	r2, [sp, #28]
 8015796:	60c2      	str	r2, [r0, #12]
  mem->virt_sarray_list = result;
 8015798:	f8c8 0044 	str.w	r0, [r8, #68]	; 0x44
}
 801579c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080157a0 <free_pool>:
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
  small_pool_ptr shdr_ptr;
  large_pool_ptr lhdr_ptr;
  size_t space_freed;

  if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
 80157a0:	2901      	cmp	r1, #1
{
 80157a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80157a6:	4606      	mov	r6, r0
 80157a8:	4688      	mov	r8, r1
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 80157aa:	6845      	ldr	r5, [r0, #4]
  if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
 80157ac:	d910      	bls.n	80157d0 <free_pool+0x30>
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 80157ae:	6803      	ldr	r3, [r0, #0]
 80157b0:	220f      	movs	r2, #15
 80157b2:	e9c3 2105 	strd	r2, r1, [r3, #20]
 80157b6:	681b      	ldr	r3, [r3, #0]
 80157b8:	4798      	blx	r3
    }
    mem->virt_barray_list = NULL;
  }

  /* Release large objects */
  lhdr_ptr = mem->large_list[pool_id];
 80157ba:	eb05 0488 	add.w	r4, r5, r8, lsl #2
  mem->large_list[pool_id] = NULL;
 80157be:	2200      	movs	r2, #0
  lhdr_ptr = mem->large_list[pool_id];
 80157c0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  mem->large_list[pool_id] = NULL;
 80157c2:	63e2      	str	r2, [r4, #60]	; 0x3c

  while (lhdr_ptr != NULL) {
 80157c4:	bb0b      	cbnz	r3, 801580a <free_pool+0x6a>
    mem->total_space_allocated -= space_freed;
    lhdr_ptr = next_lhdr_ptr;
  }

  /* Release small objects */
  shdr_ptr = mem->small_list[pool_id];
 80157c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
  mem->small_list[pool_id] = NULL;
 80157c8:	6363      	str	r3, [r4, #52]	; 0x34

  while (shdr_ptr != NULL) {
 80157ca:	bb69      	cbnz	r1, 8015828 <free_pool+0x88>
		  SIZEOF(small_pool_hdr);
    jpeg_free_small(cinfo, (void *) shdr_ptr, space_freed);
    mem->total_space_allocated -= space_freed;
    shdr_ptr = next_shdr_ptr;
  }
}
 80157cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (pool_id == JPOOL_IMAGE) {
 80157d0:	d1f3      	bne.n	80157ba <free_pool+0x1a>
    for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 80157d2:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	sptr->b_s_open = FALSE;	/* prevent recursive close if error */
 80157d4:	2700      	movs	r7, #0
    for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 80157d6:	b924      	cbnz	r4, 80157e2 <free_pool+0x42>
    for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 80157d8:	6caf      	ldr	r7, [r5, #72]	; 0x48
    mem->virt_sarray_list = NULL;
 80157da:	646c      	str	r4, [r5, #68]	; 0x44
    for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 80157dc:	b95f      	cbnz	r7, 80157f6 <free_pool+0x56>
    mem->virt_barray_list = NULL;
 80157de:	64af      	str	r7, [r5, #72]	; 0x48
 80157e0:	e7eb      	b.n	80157ba <free_pool+0x1a>
      if (sptr->b_s_open) {	/* there may be no backing store */
 80157e2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80157e4:	b12b      	cbz	r3, 80157f2 <free_pool+0x52>
	(*sptr->b_s_info.close_backing_store) (cinfo, & sptr->b_s_info);
 80157e6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80157e8:	f104 0130 	add.w	r1, r4, #48	; 0x30
 80157ec:	4630      	mov	r0, r6
	sptr->b_s_open = FALSE;	/* prevent recursive close if error */
 80157ee:	62a7      	str	r7, [r4, #40]	; 0x28
	(*sptr->b_s_info.close_backing_store) (cinfo, & sptr->b_s_info);
 80157f0:	4798      	blx	r3
    for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 80157f2:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
 80157f4:	e7ef      	b.n	80157d6 <free_pool+0x36>
      if (bptr->b_s_open) {	/* there may be no backing store */
 80157f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157f8:	b12b      	cbz	r3, 8015806 <free_pool+0x66>
	(*bptr->b_s_info.close_backing_store) (cinfo, & bptr->b_s_info);
 80157fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80157fc:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8015800:	4630      	mov	r0, r6
	bptr->b_s_open = FALSE;	/* prevent recursive close if error */
 8015802:	62bc      	str	r4, [r7, #40]	; 0x28
	(*bptr->b_s_info.close_backing_store) (cinfo, & bptr->b_s_info);
 8015804:	4798      	blx	r3
    for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 8015806:	6aff      	ldr	r7, [r7, #44]	; 0x2c
 8015808:	e7e8      	b.n	80157dc <free_pool+0x3c>
    space_freed = lhdr_ptr->hdr.bytes_used +
 801580a:	e9d3 8700 	ldrd	r8, r7, [r3]
 801580e:	689a      	ldr	r2, [r3, #8]
    jpeg_free_large(cinfo, (void FAR *) lhdr_ptr, space_freed);
 8015810:	4619      	mov	r1, r3
 8015812:	4630      	mov	r0, r6
    space_freed = lhdr_ptr->hdr.bytes_used +
 8015814:	4417      	add	r7, r2
 8015816:	3710      	adds	r7, #16
    jpeg_free_large(cinfo, (void FAR *) lhdr_ptr, space_freed);
 8015818:	463a      	mov	r2, r7
 801581a:	f000 fb1e 	bl	8015e5a <jpeg_free_large>
    mem->total_space_allocated -= space_freed;
 801581e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8015820:	1bdb      	subs	r3, r3, r7
 8015822:	64eb      	str	r3, [r5, #76]	; 0x4c
    lhdr_ptr = next_lhdr_ptr;
 8015824:	4643      	mov	r3, r8
 8015826:	e7cd      	b.n	80157c4 <free_pool+0x24>
    space_freed = shdr_ptr->hdr.bytes_used +
 8015828:	688a      	ldr	r2, [r1, #8]
    jpeg_free_small(cinfo, (void *) shdr_ptr, space_freed);
 801582a:	4630      	mov	r0, r6
    space_freed = shdr_ptr->hdr.bytes_used +
 801582c:	e9d1 7400 	ldrd	r7, r4, [r1]
 8015830:	4414      	add	r4, r2
 8015832:	3410      	adds	r4, #16
    jpeg_free_small(cinfo, (void *) shdr_ptr, space_freed);
 8015834:	4622      	mov	r2, r4
 8015836:	f000 fb0a 	bl	8015e4e <jpeg_free_small>
    mem->total_space_allocated -= space_freed;
 801583a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
    shdr_ptr = next_shdr_ptr;
 801583c:	4639      	mov	r1, r7
    mem->total_space_allocated -= space_freed;
 801583e:	1b1b      	subs	r3, r3, r4
 8015840:	64eb      	str	r3, [r5, #76]	; 0x4c
    shdr_ptr = next_shdr_ptr;
 8015842:	e7c2      	b.n	80157ca <free_pool+0x2a>

08015844 <self_destruct>:
 * Note that this cannot be called unless cinfo->mem is non-NULL.
 */

METHODDEF(void)
self_destruct (j_common_ptr cinfo)
{
 8015844:	b510      	push	{r4, lr}
 8015846:	4604      	mov	r4, r0
  /* Close all backing store, release all memory.
   * Releasing pools in reverse order might help avoid fragmentation
   * with some (brain-damaged) malloc libraries.
   */
  for (pool = JPOOL_NUMPOOLS-1; pool >= JPOOL_PERMANENT; pool--) {
    free_pool(cinfo, pool);
 8015848:	2101      	movs	r1, #1
 801584a:	f7ff ffa9 	bl	80157a0 <free_pool>
 801584e:	2100      	movs	r1, #0
 8015850:	4620      	mov	r0, r4
 8015852:	f7ff ffa5 	bl	80157a0 <free_pool>
  }

  /* Release the memory manager control block too. */
  jpeg_free_small(cinfo, (void *) cinfo->mem, SIZEOF(my_memory_mgr));
 8015856:	4620      	mov	r0, r4
 8015858:	6861      	ldr	r1, [r4, #4]
 801585a:	2254      	movs	r2, #84	; 0x54
 801585c:	f000 faf7 	bl	8015e4e <jpeg_free_small>
  cinfo->mem = NULL;		/* ensures I will be called only once */
 8015860:	2300      	movs	r3, #0

  jpeg_mem_term(cinfo);		/* system-dependent cleanup */
 8015862:	4620      	mov	r0, r4
  cinfo->mem = NULL;		/* ensures I will be called only once */
 8015864:	6063      	str	r3, [r4, #4]
}
 8015866:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  jpeg_mem_term(cinfo);		/* system-dependent cleanup */
 801586a:	f000 bb02 	b.w	8015e72 <jpeg_mem_term>

0801586e <access_virt_barray>:
{
 801586e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  JDIMENSION end_row = start_row + num_rows;
 8015872:	18d7      	adds	r7, r2, r3
{
 8015874:	4615      	mov	r5, r2
  if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
 8015876:	684a      	ldr	r2, [r1, #4]
{
 8015878:	460c      	mov	r4, r1
 801587a:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
 801587e:	42ba      	cmp	r2, r7
 8015880:	d304      	bcc.n	801588c <access_virt_barray+0x1e>
 8015882:	68ca      	ldr	r2, [r1, #12]
 8015884:	429a      	cmp	r2, r3
 8015886:	d301      	bcc.n	801588c <access_virt_barray+0x1e>
 8015888:	680b      	ldr	r3, [r1, #0]
 801588a:	b933      	cbnz	r3, 801589a <access_virt_barray+0x2c>
    ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 801588c:	6803      	ldr	r3, [r0, #0]
 801588e:	2217      	movs	r2, #23
 8015890:	9001      	str	r0, [sp, #4]
 8015892:	615a      	str	r2, [r3, #20]
 8015894:	681b      	ldr	r3, [r3, #0]
 8015896:	4798      	blx	r3
 8015898:	9801      	ldr	r0, [sp, #4]
  if (start_row < ptr->cur_start_row ||
 801589a:	69a3      	ldr	r3, [r4, #24]
 801589c:	42ab      	cmp	r3, r5
 801589e:	d803      	bhi.n	80158a8 <access_virt_barray+0x3a>
      end_row > ptr->cur_start_row+ptr->rows_in_mem) {
 80158a0:	6922      	ldr	r2, [r4, #16]
 80158a2:	4413      	add	r3, r2
  if (start_row < ptr->cur_start_row ||
 80158a4:	42bb      	cmp	r3, r7
 80158a6:	d221      	bcs.n	80158ec <access_virt_barray+0x7e>
    if (! ptr->b_s_open)
 80158a8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80158aa:	b933      	cbnz	r3, 80158ba <access_virt_barray+0x4c>
      ERREXIT(cinfo, JERR_VIRTUAL_BUG);
 80158ac:	6803      	ldr	r3, [r0, #0]
 80158ae:	2247      	movs	r2, #71	; 0x47
 80158b0:	9001      	str	r0, [sp, #4]
 80158b2:	615a      	str	r2, [r3, #20]
 80158b4:	681b      	ldr	r3, [r3, #0]
 80158b6:	4798      	blx	r3
 80158b8:	9801      	ldr	r0, [sp, #4]
    if (ptr->dirty) {
 80158ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80158bc:	b13b      	cbz	r3, 80158ce <access_virt_barray+0x60>
      do_barray_io(cinfo, ptr, TRUE);
 80158be:	2201      	movs	r2, #1
 80158c0:	4621      	mov	r1, r4
 80158c2:	9001      	str	r0, [sp, #4]
 80158c4:	f7ff fe78 	bl	80155b8 <do_barray_io>
      ptr->dirty = FALSE;
 80158c8:	2300      	movs	r3, #0
 80158ca:	9801      	ldr	r0, [sp, #4]
 80158cc:	6263      	str	r3, [r4, #36]	; 0x24
    if (start_row > ptr->cur_start_row) {
 80158ce:	69a3      	ldr	r3, [r4, #24]
    do_barray_io(cinfo, ptr, FALSE);
 80158d0:	2200      	movs	r2, #0
 80158d2:	4621      	mov	r1, r4
 80158d4:	9001      	str	r0, [sp, #4]
    if (start_row > ptr->cur_start_row) {
 80158d6:	42ab      	cmp	r3, r5
      ltemp = (long) end_row - (long) ptr->rows_in_mem;
 80158d8:	bf29      	itett	cs
 80158da:	6923      	ldrcs	r3, [r4, #16]
 80158dc:	462b      	movcc	r3, r5
 80158de:	1afb      	subcs	r3, r7, r3
      ptr->cur_start_row = (JDIMENSION) ltemp;
 80158e0:	ea23 73e3 	biccs.w	r3, r3, r3, asr #31
 80158e4:	61a3      	str	r3, [r4, #24]
    do_barray_io(cinfo, ptr, FALSE);
 80158e6:	f7ff fe67 	bl	80155b8 <do_barray_io>
 80158ea:	9801      	ldr	r0, [sp, #4]
  if (ptr->first_undef_row < end_row) {
 80158ec:	69e6      	ldr	r6, [r4, #28]
 80158ee:	42be      	cmp	r6, r7
 80158f0:	d21c      	bcs.n	801592c <access_virt_barray+0xbe>
    if (ptr->first_undef_row < start_row) {
 80158f2:	42ae      	cmp	r6, r5
 80158f4:	d20c      	bcs.n	8015910 <access_virt_barray+0xa2>
      if (writable)		/* writer skipped over a section of array */
 80158f6:	f1b8 0f00 	cmp.w	r8, #0
 80158fa:	d01b      	beq.n	8015934 <access_virt_barray+0xc6>
	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 80158fc:	6803      	ldr	r3, [r0, #0]
 80158fe:	2217      	movs	r2, #23
 8015900:	9001      	str	r0, [sp, #4]
 8015902:	462e      	mov	r6, r5
 8015904:	615a      	str	r2, [r3, #20]
 8015906:	681b      	ldr	r3, [r3, #0]
 8015908:	4798      	blx	r3
    if (writable)
 801590a:	9801      	ldr	r0, [sp, #4]
      ptr->first_undef_row = end_row;
 801590c:	61e7      	str	r7, [r4, #28]
 801590e:	e002      	b.n	8015916 <access_virt_barray+0xa8>
    if (writable)
 8015910:	f1b8 0f00 	cmp.w	r8, #0
 8015914:	d1fa      	bne.n	801590c <access_virt_barray+0x9e>
    if (ptr->pre_zero) {
 8015916:	6a22      	ldr	r2, [r4, #32]
 8015918:	b1b2      	cbz	r2, 8015948 <access_virt_barray+0xda>
      size_t bytesperrow = (size_t) ptr->blocksperrow * SIZEOF(JBLOCK);
 801591a:	68a2      	ldr	r2, [r4, #8]
 801591c:	ea4f 19c2 	mov.w	r9, r2, lsl #7
      undef_row -= ptr->cur_start_row; /* make indexes relative to buffer */
 8015920:	69a2      	ldr	r2, [r4, #24]
 8015922:	1ab6      	subs	r6, r6, r2
      end_row -= ptr->cur_start_row;
 8015924:	1abf      	subs	r7, r7, r2
      while (undef_row < end_row) {
 8015926:	42be      	cmp	r6, r7
	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 8015928:	6823      	ldr	r3, [r4, #0]
      while (undef_row < end_row) {
 801592a:	d305      	bcc.n	8015938 <access_virt_barray+0xca>
  if (writable)
 801592c:	f1b8 0f00 	cmp.w	r8, #0
 8015930:	d10d      	bne.n	801594e <access_virt_barray+0xe0>
 8015932:	e00e      	b.n	8015952 <access_virt_barray+0xe4>
 8015934:	462e      	mov	r6, r5
 8015936:	e7ee      	b.n	8015916 <access_virt_barray+0xa8>
	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 8015938:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801593c:	464a      	mov	r2, r9
 801593e:	2100      	movs	r1, #0
	undef_row++;
 8015940:	3601      	adds	r6, #1
	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 8015942:	f014 fc67 	bl	802a214 <memset>
	undef_row++;
 8015946:	e7ee      	b.n	8015926 <access_virt_barray+0xb8>
      if (! writable)		/* reader looking at undefined data */
 8015948:	f1b8 0f00 	cmp.w	r8, #0
 801594c:	d009      	beq.n	8015962 <access_virt_barray+0xf4>
    ptr->dirty = TRUE;
 801594e:	2301      	movs	r3, #1
 8015950:	6263      	str	r3, [r4, #36]	; 0x24
  return ptr->mem_buffer + (start_row - ptr->cur_start_row);
 8015952:	69a0      	ldr	r0, [r4, #24]
 8015954:	1a2d      	subs	r5, r5, r0
 8015956:	6820      	ldr	r0, [r4, #0]
}
 8015958:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 801595c:	b003      	add	sp, #12
 801595e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 8015962:	6803      	ldr	r3, [r0, #0]
 8015964:	2217      	movs	r2, #23
 8015966:	615a      	str	r2, [r3, #20]
 8015968:	681b      	ldr	r3, [r3, #0]
 801596a:	4798      	blx	r3
  if (writable)
 801596c:	e7f1      	b.n	8015952 <access_virt_barray+0xe4>

0801596e <alloc_large>:
  if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)))
 801596e:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8015972:	429a      	cmp	r2, r3
{
 8015974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015978:	4606      	mov	r6, r0
 801597a:	4688      	mov	r8, r1
 801597c:	4614      	mov	r4, r2
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 801597e:	6847      	ldr	r7, [r0, #4]
  if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)))
 8015980:	d902      	bls.n	8015988 <alloc_large+0x1a>
    out_of_memory(cinfo, 3);	/* request exceeds malloc's ability */
 8015982:	2103      	movs	r1, #3
 8015984:	f7ff fe12 	bl	80155ac <out_of_memory>
  if (odd_bytes > 0)
 8015988:	f014 0307 	ands.w	r3, r4, #7
    sizeofobject += SIZEOF(ALIGN_TYPE) - odd_bytes;
 801598c:	bf1c      	itt	ne
 801598e:	3408      	addne	r4, #8
 8015990:	1ae4      	subne	r4, r4, r3
  if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
 8015992:	f1b8 0f01 	cmp.w	r8, #1
 8015996:	d906      	bls.n	80159a6 <alloc_large+0x38>
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 8015998:	6833      	ldr	r3, [r6, #0]
 801599a:	220f      	movs	r2, #15
 801599c:	4630      	mov	r0, r6
 801599e:	e9c3 2805 	strd	r2, r8, [r3, #20]
 80159a2:	681b      	ldr	r3, [r3, #0]
 80159a4:	4798      	blx	r3
  hdr_ptr = (large_pool_ptr) jpeg_get_large(cinfo, sizeofobject +
 80159a6:	f104 0110 	add.w	r1, r4, #16
 80159aa:	4630      	mov	r0, r6
 80159ac:	f000 fa52 	bl	8015e54 <jpeg_get_large>
  if (hdr_ptr == NULL)
 80159b0:	4605      	mov	r5, r0
 80159b2:	b918      	cbnz	r0, 80159bc <alloc_large+0x4e>
    out_of_memory(cinfo, 4);	/* jpeg_get_large failed */
 80159b4:	2104      	movs	r1, #4
 80159b6:	4630      	mov	r0, r6
 80159b8:	f7ff fdf8 	bl	80155ac <out_of_memory>
  mem->total_space_allocated += sizeofobject + SIZEOF(large_pool_hdr);
 80159bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 80159be:	f105 0010 	add.w	r0, r5, #16
  mem->total_space_allocated += sizeofobject + SIZEOF(large_pool_hdr);
 80159c2:	3310      	adds	r3, #16
 80159c4:	4423      	add	r3, r4
 80159c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  hdr_ptr->hdr.next = mem->large_list[pool_id];
 80159c8:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 80159cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  hdr_ptr->hdr.bytes_used = sizeofobject;
 80159ce:	e9c5 3400 	strd	r3, r4, [r5]
  hdr_ptr->hdr.bytes_left = 0;
 80159d2:	2300      	movs	r3, #0
 80159d4:	60ab      	str	r3, [r5, #8]
  mem->large_list[pool_id] = hdr_ptr;
 80159d6:	63fd      	str	r5, [r7, #60]	; 0x3c
}
 80159d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080159dc <alloc_barray>:
{
 80159dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	  ((long) blocksperrow * SIZEOF(JBLOCK));
 80159e0:	01d7      	lsls	r7, r2, #7
{
 80159e2:	461d      	mov	r5, r3
  ltemp = (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)) /
 80159e4:	f64f 73f0 	movw	r3, #65520	; 0xfff0
{
 80159e8:	4680      	mov	r8, r0
 80159ea:	468a      	mov	sl, r1
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 80159ec:	6846      	ldr	r6, [r0, #4]
  if (ltemp <= 0)
 80159ee:	429f      	cmp	r7, r3
  ltemp = (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)) /
 80159f0:	fbb3 f4f7 	udiv	r4, r3, r7
  if (ltemp <= 0)
 80159f4:	d904      	bls.n	8015a00 <alloc_barray+0x24>
    ERREXIT(cinfo, JERR_WIDTH_OVERFLOW);
 80159f6:	6803      	ldr	r3, [r0, #0]
 80159f8:	2248      	movs	r2, #72	; 0x48
 80159fa:	615a      	str	r2, [r3, #20]
 80159fc:	681b      	ldr	r3, [r3, #0]
 80159fe:	4798      	blx	r3
  if (ltemp < (long) numrows)
 8015a00:	42ac      	cmp	r4, r5
  result = (JBLOCKARRAY) alloc_small(cinfo, pool_id,
 8015a02:	ea4f 0285 	mov.w	r2, r5, lsl #2
 8015a06:	4651      	mov	r1, sl
 8015a08:	4640      	mov	r0, r8
  if (ltemp < (long) numrows)
 8015a0a:	bfa8      	it	ge
 8015a0c:	462c      	movge	r4, r5
  mem->last_rowsperchunk = rowsperchunk;
 8015a0e:	6534      	str	r4, [r6, #80]	; 0x50
  currow = 0;
 8015a10:	2600      	movs	r6, #0
  result = (JBLOCKARRAY) alloc_small(cinfo, pool_id,
 8015a12:	f7ff fe15 	bl	8015640 <alloc_small>
 8015a16:	4681      	mov	r9, r0
  while (currow < numrows) {
 8015a18:	42ae      	cmp	r6, r5
 8015a1a:	d302      	bcc.n	8015a22 <alloc_barray+0x46>
}
 8015a1c:	4648      	mov	r0, r9
 8015a1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    rowsperchunk = MIN(rowsperchunk, numrows - currow);
 8015a22:	1bab      	subs	r3, r5, r6
    workspace = (JBLOCKROW) alloc_large(cinfo, pool_id,
 8015a24:	4651      	mov	r1, sl
 8015a26:	4640      	mov	r0, r8
    rowsperchunk = MIN(rowsperchunk, numrows - currow);
 8015a28:	429c      	cmp	r4, r3
 8015a2a:	bf28      	it	cs
 8015a2c:	461c      	movcs	r4, r3
    workspace = (JBLOCKROW) alloc_large(cinfo, pool_id,
 8015a2e:	fb04 f207 	mul.w	r2, r4, r7
 8015a32:	f7ff ff9c 	bl	801596e <alloc_large>
    for (i = rowsperchunk; i > 0; i--) {
 8015a36:	eb09 0386 	add.w	r3, r9, r6, lsl #2
 8015a3a:	4426      	add	r6, r4
 8015a3c:	eb09 0286 	add.w	r2, r9, r6, lsl #2
 8015a40:	4293      	cmp	r3, r2
 8015a42:	d0e9      	beq.n	8015a18 <alloc_barray+0x3c>
      result[currow++] = workspace;
 8015a44:	f843 0b04 	str.w	r0, [r3], #4
      workspace += blocksperrow;
 8015a48:	4438      	add	r0, r7
    for (i = rowsperchunk; i > 0; i--) {
 8015a4a:	e7f9      	b.n	8015a40 <alloc_barray+0x64>

08015a4c <alloc_sarray>:
{
 8015a4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015a50:	461d      	mov	r5, r3
  ltemp = (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)) /
 8015a52:	f64f 73f0 	movw	r3, #65520	; 0xfff0
{
 8015a56:	4607      	mov	r7, r0
 8015a58:	468a      	mov	sl, r1
  if (ltemp <= 0)
 8015a5a:	429a      	cmp	r2, r3
{
 8015a5c:	4690      	mov	r8, r2
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 8015a5e:	6846      	ldr	r6, [r0, #4]
  ltemp = (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)) /
 8015a60:	fbb3 f4f2 	udiv	r4, r3, r2
  if (ltemp <= 0)
 8015a64:	d904      	bls.n	8015a70 <alloc_sarray+0x24>
    ERREXIT(cinfo, JERR_WIDTH_OVERFLOW);
 8015a66:	6803      	ldr	r3, [r0, #0]
 8015a68:	2248      	movs	r2, #72	; 0x48
 8015a6a:	615a      	str	r2, [r3, #20]
 8015a6c:	681b      	ldr	r3, [r3, #0]
 8015a6e:	4798      	blx	r3
  if (ltemp < (long) numrows)
 8015a70:	42ac      	cmp	r4, r5
  result = (JSAMPARRAY) alloc_small(cinfo, pool_id,
 8015a72:	ea4f 0285 	mov.w	r2, r5, lsl #2
 8015a76:	4651      	mov	r1, sl
 8015a78:	4638      	mov	r0, r7
  if (ltemp < (long) numrows)
 8015a7a:	bfa8      	it	ge
 8015a7c:	462c      	movge	r4, r5
  mem->last_rowsperchunk = rowsperchunk;
 8015a7e:	6534      	str	r4, [r6, #80]	; 0x50
  currow = 0;
 8015a80:	2600      	movs	r6, #0
  result = (JSAMPARRAY) alloc_small(cinfo, pool_id,
 8015a82:	f7ff fddd 	bl	8015640 <alloc_small>
 8015a86:	4681      	mov	r9, r0
  while (currow < numrows) {
 8015a88:	42ae      	cmp	r6, r5
 8015a8a:	d302      	bcc.n	8015a92 <alloc_sarray+0x46>
}
 8015a8c:	4648      	mov	r0, r9
 8015a8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    rowsperchunk = MIN(rowsperchunk, numrows - currow);
 8015a92:	1bab      	subs	r3, r5, r6
    workspace = (JSAMPROW) alloc_large(cinfo, pool_id,
 8015a94:	4651      	mov	r1, sl
 8015a96:	4638      	mov	r0, r7
    rowsperchunk = MIN(rowsperchunk, numrows - currow);
 8015a98:	429c      	cmp	r4, r3
 8015a9a:	bf28      	it	cs
 8015a9c:	461c      	movcs	r4, r3
    workspace = (JSAMPROW) alloc_large(cinfo, pool_id,
 8015a9e:	fb04 f208 	mul.w	r2, r4, r8
 8015aa2:	f7ff ff64 	bl	801596e <alloc_large>
    for (i = rowsperchunk; i > 0; i--) {
 8015aa6:	eb09 0386 	add.w	r3, r9, r6, lsl #2
 8015aaa:	4426      	add	r6, r4
 8015aac:	eb09 0286 	add.w	r2, r9, r6, lsl #2
 8015ab0:	4293      	cmp	r3, r2
 8015ab2:	d0e9      	beq.n	8015a88 <alloc_sarray+0x3c>
      result[currow++] = workspace;
 8015ab4:	f843 0b04 	str.w	r0, [r3], #4
      workspace += samplesperrow;
 8015ab8:	4440      	add	r0, r8
    for (i = rowsperchunk; i > 0; i--) {
 8015aba:	e7f9      	b.n	8015ab0 <alloc_sarray+0x64>

08015abc <realize_virt_arrays>:
{
 8015abc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 8015ac0:	f8d0 8004 	ldr.w	r8, [r0, #4]
  maximum_space = 0;
 8015ac4:	2500      	movs	r5, #0
{
 8015ac6:	4607      	mov	r7, r0
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 8015ac8:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
  space_per_minheight = 0;
 8015acc:	462e      	mov	r6, r5
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 8015ace:	bb03      	cbnz	r3, 8015b12 <realize_virt_arrays+0x56>
  for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 8015ad0:	f8d8 3048 	ldr.w	r3, [r8, #72]	; 0x48
 8015ad4:	bb43      	cbnz	r3, 8015b28 <realize_virt_arrays+0x6c>
  if (space_per_minheight <= 0)
 8015ad6:	2e00      	cmp	r6, #0
 8015ad8:	dd19      	ble.n	8015b0e <realize_virt_arrays+0x52>
  avail_mem = jpeg_mem_available(cinfo, space_per_minheight, maximum_space,
 8015ada:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 8015ade:	462a      	mov	r2, r5
 8015ae0:	4631      	mov	r1, r6
 8015ae2:	4638      	mov	r0, r7
 8015ae4:	f000 f9bc 	bl	8015e60 <jpeg_mem_available>
  if (avail_mem >= maximum_space)
 8015ae8:	4285      	cmp	r5, r0
 8015aea:	dd2a      	ble.n	8015b42 <realize_virt_arrays+0x86>
    max_minheights = avail_mem / space_per_minheight;
 8015aec:	fb90 f6f6 	sdiv	r6, r0, r6
 8015af0:	2e01      	cmp	r6, #1
 8015af2:	bfb8      	it	lt
 8015af4:	2601      	movlt	r6, #1
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 8015af6:	f8d8 4044 	ldr.w	r4, [r8, #68]	; 0x44
      sptr->mem_buffer = alloc_sarray(cinfo, JPOOL_IMAGE,
 8015afa:	f04f 0901 	mov.w	r9, #1
      sptr->cur_start_row = 0;
 8015afe:	2500      	movs	r5, #0
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 8015b00:	bb0c      	cbnz	r4, 8015b46 <realize_virt_arrays+0x8a>
  for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 8015b02:	f8d8 5048 	ldr.w	r5, [r8, #72]	; 0x48
      bptr->mem_buffer = alloc_barray(cinfo, JPOOL_IMAGE,
 8015b06:	f04f 0901 	mov.w	r9, #1
  for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 8015b0a:	2d00      	cmp	r5, #0
 8015b0c:	d141      	bne.n	8015b92 <realize_virt_arrays+0xd6>
}
 8015b0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (sptr->mem_buffer == NULL) { /* if not realized yet */
 8015b12:	681a      	ldr	r2, [r3, #0]
 8015b14:	b932      	cbnz	r2, 8015b24 <realize_virt_arrays+0x68>
      space_per_minheight += (long) sptr->maxaccess *
 8015b16:	e9d3 2102 	ldrd	r2, r1, [r3, #8]
 8015b1a:	fb01 6602 	mla	r6, r1, r2, r6
      maximum_space += (long) sptr->rows_in_array *
 8015b1e:	6859      	ldr	r1, [r3, #4]
 8015b20:	fb01 5502 	mla	r5, r1, r2, r5
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 8015b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015b26:	e7d2      	b.n	8015ace <realize_virt_arrays+0x12>
    if (bptr->mem_buffer == NULL) { /* if not realized yet */
 8015b28:	681a      	ldr	r2, [r3, #0]
 8015b2a:	b942      	cbnz	r2, 8015b3e <realize_virt_arrays+0x82>
      space_per_minheight += (long) bptr->maxaccess *
 8015b2c:	e9d3 2102 	ldrd	r2, r1, [r3, #8]
 8015b30:	4351      	muls	r1, r2
 8015b32:	eb06 16c1 	add.w	r6, r6, r1, lsl #7
      maximum_space += (long) bptr->rows_in_array *
 8015b36:	6859      	ldr	r1, [r3, #4]
 8015b38:	434a      	muls	r2, r1
 8015b3a:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
  for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 8015b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015b40:	e7c8      	b.n	8015ad4 <realize_virt_arrays+0x18>
    max_minheights = 1000000000L;
 8015b42:	4e27      	ldr	r6, [pc, #156]	; (8015be0 <realize_virt_arrays+0x124>)
 8015b44:	e7d7      	b.n	8015af6 <realize_virt_arrays+0x3a>
    if (sptr->mem_buffer == NULL) { /* if not realized yet */
 8015b46:	6823      	ldr	r3, [r4, #0]
 8015b48:	b9ab      	cbnz	r3, 8015b76 <realize_virt_arrays+0xba>
      minheights = ((long) sptr->rows_in_array - 1L) / sptr->maxaccess + 1L;
 8015b4a:	6862      	ldr	r2, [r4, #4]
 8015b4c:	68e1      	ldr	r1, [r4, #12]
 8015b4e:	1e53      	subs	r3, r2, #1
 8015b50:	fbb3 f3f1 	udiv	r3, r3, r1
 8015b54:	3301      	adds	r3, #1
      if (minheights <= max_minheights) {
 8015b56:	429e      	cmp	r6, r3
 8015b58:	db0f      	blt.n	8015b7a <realize_virt_arrays+0xbe>
	sptr->rows_in_mem = sptr->rows_in_array;
 8015b5a:	6122      	str	r2, [r4, #16]
      sptr->mem_buffer = alloc_sarray(cinfo, JPOOL_IMAGE,
 8015b5c:	6923      	ldr	r3, [r4, #16]
 8015b5e:	2101      	movs	r1, #1
 8015b60:	68a2      	ldr	r2, [r4, #8]
 8015b62:	4638      	mov	r0, r7
 8015b64:	f7ff ff72 	bl	8015a4c <alloc_sarray>
      sptr->rowsperchunk = mem->last_rowsperchunk;
 8015b68:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
      sptr->mem_buffer = alloc_sarray(cinfo, JPOOL_IMAGE,
 8015b6c:	6020      	str	r0, [r4, #0]
      sptr->first_undef_row = 0;
 8015b6e:	61e5      	str	r5, [r4, #28]
      sptr->dirty = FALSE;
 8015b70:	6265      	str	r5, [r4, #36]	; 0x24
      sptr->cur_start_row = 0;
 8015b72:	e9c4 3505 	strd	r3, r5, [r4, #20]
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 8015b76:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
 8015b78:	e7c2      	b.n	8015b00 <realize_virt_arrays+0x44>
				(long) sptr->samplesperrow *
 8015b7a:	68a3      	ldr	r3, [r4, #8]
	sptr->rows_in_mem = (JDIMENSION) (max_minheights * sptr->maxaccess);
 8015b7c:	4371      	muls	r1, r6
	jpeg_open_backing_store(cinfo, & sptr->b_s_info,
 8015b7e:	4638      	mov	r0, r7
	sptr->rows_in_mem = (JDIMENSION) (max_minheights * sptr->maxaccess);
 8015b80:	6121      	str	r1, [r4, #16]
	jpeg_open_backing_store(cinfo, & sptr->b_s_info,
 8015b82:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8015b86:	435a      	muls	r2, r3
 8015b88:	f000 f96c 	bl	8015e64 <jpeg_open_backing_store>
	sptr->b_s_open = TRUE;
 8015b8c:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
 8015b90:	e7e4      	b.n	8015b5c <realize_virt_arrays+0xa0>
    if (bptr->mem_buffer == NULL) { /* if not realized yet */
 8015b92:	682b      	ldr	r3, [r5, #0]
 8015b94:	b9ab      	cbnz	r3, 8015bc2 <realize_virt_arrays+0x106>
      minheights = ((long) bptr->rows_in_array - 1L) / bptr->maxaccess + 1L;
 8015b96:	6868      	ldr	r0, [r5, #4]
 8015b98:	68e9      	ldr	r1, [r5, #12]
 8015b9a:	1e43      	subs	r3, r0, #1
 8015b9c:	fbb3 f3f1 	udiv	r3, r3, r1
 8015ba0:	3301      	adds	r3, #1
      if (minheights <= max_minheights) {
 8015ba2:	429e      	cmp	r6, r3
 8015ba4:	db0f      	blt.n	8015bc6 <realize_virt_arrays+0x10a>
	bptr->rows_in_mem = bptr->rows_in_array;
 8015ba6:	6128      	str	r0, [r5, #16]
      bptr->mem_buffer = alloc_barray(cinfo, JPOOL_IMAGE,
 8015ba8:	692b      	ldr	r3, [r5, #16]
 8015baa:	2101      	movs	r1, #1
 8015bac:	68aa      	ldr	r2, [r5, #8]
 8015bae:	4638      	mov	r0, r7
 8015bb0:	f7ff ff14 	bl	80159dc <alloc_barray>
      bptr->rowsperchunk = mem->last_rowsperchunk;
 8015bb4:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
      bptr->mem_buffer = alloc_barray(cinfo, JPOOL_IMAGE,
 8015bb8:	6028      	str	r0, [r5, #0]
      bptr->first_undef_row = 0;
 8015bba:	61ec      	str	r4, [r5, #28]
      bptr->dirty = FALSE;
 8015bbc:	626c      	str	r4, [r5, #36]	; 0x24
      bptr->cur_start_row = 0;
 8015bbe:	e9c5 3405 	strd	r3, r4, [r5, #20]
  for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 8015bc2:	6aed      	ldr	r5, [r5, #44]	; 0x2c
 8015bc4:	e7a1      	b.n	8015b0a <realize_virt_arrays+0x4e>
				(long) bptr->blocksperrow *
 8015bc6:	68aa      	ldr	r2, [r5, #8]
	bptr->rows_in_mem = (JDIMENSION) (max_minheights * bptr->maxaccess);
 8015bc8:	4371      	muls	r1, r6
				(long) bptr->rows_in_array *
 8015bca:	4342      	muls	r2, r0
	jpeg_open_backing_store(cinfo, & bptr->b_s_info,
 8015bcc:	4638      	mov	r0, r7
	bptr->rows_in_mem = (JDIMENSION) (max_minheights * bptr->maxaccess);
 8015bce:	6129      	str	r1, [r5, #16]
	jpeg_open_backing_store(cinfo, & bptr->b_s_info,
 8015bd0:	f105 0130 	add.w	r1, r5, #48	; 0x30
 8015bd4:	01d2      	lsls	r2, r2, #7
 8015bd6:	f000 f945 	bl	8015e64 <jpeg_open_backing_store>
	bptr->b_s_open = TRUE;
 8015bda:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 8015bde:	e7e3      	b.n	8015ba8 <realize_virt_arrays+0xec>
 8015be0:	3b9aca00 	.word	0x3b9aca00

08015be4 <access_virt_sarray>:
{
 8015be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  JDIMENSION end_row = start_row + num_rows;
 8015be8:	eb02 0803 	add.w	r8, r2, r3
{
 8015bec:	4615      	mov	r5, r2
  if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
 8015bee:	684a      	ldr	r2, [r1, #4]
{
 8015bf0:	b087      	sub	sp, #28
 8015bf2:	460c      	mov	r4, r1
  if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
 8015bf4:	4542      	cmp	r2, r8
{
 8015bf6:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
  if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
 8015bfa:	d304      	bcc.n	8015c06 <access_virt_sarray+0x22>
 8015bfc:	68ca      	ldr	r2, [r1, #12]
 8015bfe:	429a      	cmp	r2, r3
 8015c00:	d301      	bcc.n	8015c06 <access_virt_sarray+0x22>
 8015c02:	680b      	ldr	r3, [r1, #0]
 8015c04:	b933      	cbnz	r3, 8015c14 <access_virt_sarray+0x30>
    ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 8015c06:	6803      	ldr	r3, [r0, #0]
 8015c08:	2217      	movs	r2, #23
 8015c0a:	9003      	str	r0, [sp, #12]
 8015c0c:	615a      	str	r2, [r3, #20]
 8015c0e:	681b      	ldr	r3, [r3, #0]
 8015c10:	4798      	blx	r3
 8015c12:	9803      	ldr	r0, [sp, #12]
  if (start_row < ptr->cur_start_row ||
 8015c14:	69a3      	ldr	r3, [r4, #24]
 8015c16:	42ab      	cmp	r3, r5
 8015c18:	d80c      	bhi.n	8015c34 <access_virt_sarray+0x50>
      end_row > ptr->cur_start_row+ptr->rows_in_mem) {
 8015c1a:	6922      	ldr	r2, [r4, #16]
 8015c1c:	4413      	add	r3, r2
  if (start_row < ptr->cur_start_row ||
 8015c1e:	4543      	cmp	r3, r8
 8015c20:	d308      	bcc.n	8015c34 <access_virt_sarray+0x50>
  if (ptr->first_undef_row < end_row) {
 8015c22:	69e6      	ldr	r6, [r4, #28]
 8015c24:	4546      	cmp	r6, r8
 8015c26:	f0c0 8081 	bcc.w	8015d2c <access_virt_sarray+0x148>
  if (writable)
 8015c2a:	f1ba 0f00 	cmp.w	sl, #0
 8015c2e:	f040 80a8 	bne.w	8015d82 <access_virt_sarray+0x19e>
 8015c32:	e0a8      	b.n	8015d86 <access_virt_sarray+0x1a2>
    if (! ptr->b_s_open)
 8015c34:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8015c36:	b933      	cbnz	r3, 8015c46 <access_virt_sarray+0x62>
      ERREXIT(cinfo, JERR_VIRTUAL_BUG);
 8015c38:	6803      	ldr	r3, [r0, #0]
 8015c3a:	2247      	movs	r2, #71	; 0x47
 8015c3c:	9003      	str	r0, [sp, #12]
 8015c3e:	615a      	str	r2, [r3, #20]
 8015c40:	681b      	ldr	r3, [r3, #0]
 8015c42:	4798      	blx	r3
 8015c44:	9803      	ldr	r0, [sp, #12]
    if (ptr->dirty) {
 8015c46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015c48:	b17b      	cbz	r3, 8015c6a <access_virt_sarray+0x86>
  bytesperrow = (long) ptr->samplesperrow * SIZEOF(JSAMPLE);
 8015c4a:	f8d4 b008 	ldr.w	fp, [r4, #8]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8015c4e:	f04f 0900 	mov.w	r9, #0
  file_offset = ptr->cur_start_row * bytesperrow;
 8015c52:	69a3      	ldr	r3, [r4, #24]
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 8015c54:	f104 0130 	add.w	r1, r4, #48	; 0x30
  file_offset = ptr->cur_start_row * bytesperrow;
 8015c58:	fb03 f30b 	mul.w	r3, r3, fp
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8015c5c:	6922      	ldr	r2, [r4, #16]
 8015c5e:	454a      	cmp	r2, r9
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 8015c60:	e9d4 c706 	ldrd	ip, r7, [r4, #24]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8015c64:	dc3c      	bgt.n	8015ce0 <access_virt_sarray+0xfc>
      ptr->dirty = FALSE;
 8015c66:	2300      	movs	r3, #0
 8015c68:	6263      	str	r3, [r4, #36]	; 0x24
    if (start_row > ptr->cur_start_row) {
 8015c6a:	69a2      	ldr	r2, [r4, #24]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8015c6c:	f04f 0900 	mov.w	r9, #0
      ltemp = (long) end_row - (long) ptr->rows_in_mem;
 8015c70:	6923      	ldr	r3, [r4, #16]
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
 8015c72:	f104 0130 	add.w	r1, r4, #48	; 0x30
    if (start_row > ptr->cur_start_row) {
 8015c76:	42aa      	cmp	r2, r5
  bytesperrow = (long) ptr->samplesperrow * SIZEOF(JSAMPLE);
 8015c78:	f8d4 b008 	ldr.w	fp, [r4, #8]
      ltemp = (long) end_row - (long) ptr->rows_in_mem;
 8015c7c:	bf2a      	itet	cs
 8015c7e:	eba8 0303 	subcs.w	r3, r8, r3
      ptr->cur_start_row = (JDIMENSION) ltemp;
 8015c82:	462b      	movcc	r3, r5
 8015c84:	ea23 73e3 	biccs.w	r3, r3, r3, asr #31
 8015c88:	61a3      	str	r3, [r4, #24]
  file_offset = ptr->cur_start_row * bytesperrow;
 8015c8a:	fb0b f303 	mul.w	r3, fp, r3
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8015c8e:	6922      	ldr	r2, [r4, #16]
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 8015c90:	69e6      	ldr	r6, [r4, #28]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8015c92:	454a      	cmp	r2, r9
 8015c94:	ddc5      	ble.n	8015c22 <access_virt_sarray+0x3e>
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 8015c96:	eba2 0209 	sub.w	r2, r2, r9
 8015c9a:	6967      	ldr	r7, [r4, #20]
 8015c9c:	42ba      	cmp	r2, r7
 8015c9e:	bfa8      	it	ge
 8015ca0:	463a      	movge	r2, r7
    thisrow = (long) ptr->cur_start_row + i;
 8015ca2:	69a7      	ldr	r7, [r4, #24]
 8015ca4:	444f      	add	r7, r9
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 8015ca6:	1bf6      	subs	r6, r6, r7
 8015ca8:	42b2      	cmp	r2, r6
 8015caa:	bfa8      	it	ge
 8015cac:	4632      	movge	r2, r6
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
 8015cae:	6866      	ldr	r6, [r4, #4]
 8015cb0:	1bf6      	subs	r6, r6, r7
 8015cb2:	42b2      	cmp	r2, r6
 8015cb4:	bfa8      	it	ge
 8015cb6:	4632      	movge	r2, r6
    if (rows <= 0)		/* this chunk might be past end of file! */
 8015cb8:	2a00      	cmp	r2, #0
 8015cba:	ddb2      	ble.n	8015c22 <access_virt_sarray+0x3e>
    byte_count = rows * bytesperrow;
 8015cbc:	fb02 f60b 	mul.w	r6, r2, fp
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
 8015cc0:	6822      	ldr	r2, [r4, #0]
 8015cc2:	6b27      	ldr	r7, [r4, #48]	; 0x30
 8015cc4:	9600      	str	r6, [sp, #0]
 8015cc6:	f852 2029 	ldr.w	r2, [r2, r9, lsl #2]
 8015cca:	9305      	str	r3, [sp, #20]
 8015ccc:	e9cd 0103 	strd	r0, r1, [sp, #12]
 8015cd0:	47b8      	blx	r7
    file_offset += byte_count;
 8015cd2:	9b05      	ldr	r3, [sp, #20]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8015cd4:	6962      	ldr	r2, [r4, #20]
    file_offset += byte_count;
 8015cd6:	4433      	add	r3, r6
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8015cd8:	4491      	add	r9, r2
 8015cda:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
 8015cde:	e7d6      	b.n	8015c8e <access_virt_sarray+0xaa>
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 8015ce0:	eba2 0209 	sub.w	r2, r2, r9
 8015ce4:	6966      	ldr	r6, [r4, #20]
    thisrow = (long) ptr->cur_start_row + i;
 8015ce6:	44cc      	add	ip, r9
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 8015ce8:	42b2      	cmp	r2, r6
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 8015cea:	eba7 070c 	sub.w	r7, r7, ip
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 8015cee:	bfa8      	it	ge
 8015cf0:	4632      	movge	r2, r6
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
 8015cf2:	6866      	ldr	r6, [r4, #4]
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 8015cf4:	42ba      	cmp	r2, r7
 8015cf6:	bfa8      	it	ge
 8015cf8:	463a      	movge	r2, r7
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
 8015cfa:	eba6 070c 	sub.w	r7, r6, ip
 8015cfe:	42ba      	cmp	r2, r7
 8015d00:	bfa8      	it	ge
 8015d02:	463a      	movge	r2, r7
    if (rows <= 0)		/* this chunk might be past end of file! */
 8015d04:	2a00      	cmp	r2, #0
 8015d06:	ddae      	ble.n	8015c66 <access_virt_sarray+0x82>
    byte_count = rows * bytesperrow;
 8015d08:	fb02 f70b 	mul.w	r7, r2, fp
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 8015d0c:	6822      	ldr	r2, [r4, #0]
 8015d0e:	6b66      	ldr	r6, [r4, #52]	; 0x34
 8015d10:	9700      	str	r7, [sp, #0]
 8015d12:	f852 2029 	ldr.w	r2, [r2, r9, lsl #2]
 8015d16:	9305      	str	r3, [sp, #20]
 8015d18:	e9cd 0103 	strd	r0, r1, [sp, #12]
 8015d1c:	47b0      	blx	r6
    file_offset += byte_count;
 8015d1e:	9b05      	ldr	r3, [sp, #20]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8015d20:	6962      	ldr	r2, [r4, #20]
    file_offset += byte_count;
 8015d22:	443b      	add	r3, r7
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8015d24:	4491      	add	r9, r2
 8015d26:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
 8015d2a:	e797      	b.n	8015c5c <access_virt_sarray+0x78>
    if (ptr->first_undef_row < start_row) {
 8015d2c:	42ae      	cmp	r6, r5
 8015d2e:	d20d      	bcs.n	8015d4c <access_virt_sarray+0x168>
      if (writable)		/* writer skipped over a section of array */
 8015d30:	f1ba 0f00 	cmp.w	sl, #0
 8015d34:	d020      	beq.n	8015d78 <access_virt_sarray+0x194>
	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 8015d36:	6803      	ldr	r3, [r0, #0]
 8015d38:	2217      	movs	r2, #23
 8015d3a:	9003      	str	r0, [sp, #12]
 8015d3c:	462e      	mov	r6, r5
 8015d3e:	615a      	str	r2, [r3, #20]
 8015d40:	681b      	ldr	r3, [r3, #0]
 8015d42:	4798      	blx	r3
    if (writable)
 8015d44:	9803      	ldr	r0, [sp, #12]
      ptr->first_undef_row = end_row;
 8015d46:	f8c4 801c 	str.w	r8, [r4, #28]
 8015d4a:	e002      	b.n	8015d52 <access_virt_sarray+0x16e>
    if (writable)
 8015d4c:	f1ba 0f00 	cmp.w	sl, #0
 8015d50:	d1f9      	bne.n	8015d46 <access_virt_sarray+0x162>
    if (ptr->pre_zero) {
 8015d52:	6a22      	ldr	r2, [r4, #32]
 8015d54:	b192      	cbz	r2, 8015d7c <access_virt_sarray+0x198>
      undef_row -= ptr->cur_start_row; /* make indexes relative to buffer */
 8015d56:	69a1      	ldr	r1, [r4, #24]
      size_t bytesperrow = (size_t) ptr->samplesperrow * SIZEOF(JSAMPLE);
 8015d58:	68a7      	ldr	r7, [r4, #8]
      undef_row -= ptr->cur_start_row; /* make indexes relative to buffer */
 8015d5a:	1a76      	subs	r6, r6, r1
      end_row -= ptr->cur_start_row;
 8015d5c:	eba8 0801 	sub.w	r8, r8, r1
      while (undef_row < end_row) {
 8015d60:	4546      	cmp	r6, r8
	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 8015d62:	6823      	ldr	r3, [r4, #0]
      while (undef_row < end_row) {
 8015d64:	f4bf af61 	bcs.w	8015c2a <access_virt_sarray+0x46>
	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 8015d68:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8015d6c:	463a      	mov	r2, r7
 8015d6e:	2100      	movs	r1, #0
	undef_row++;
 8015d70:	3601      	adds	r6, #1
	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 8015d72:	f014 fa4f 	bl	802a214 <memset>
	undef_row++;
 8015d76:	e7f3      	b.n	8015d60 <access_virt_sarray+0x17c>
 8015d78:	462e      	mov	r6, r5
 8015d7a:	e7ea      	b.n	8015d52 <access_virt_sarray+0x16e>
      if (! writable)		/* reader looking at undefined data */
 8015d7c:	f1ba 0f00 	cmp.w	sl, #0
 8015d80:	d009      	beq.n	8015d96 <access_virt_sarray+0x1b2>
    ptr->dirty = TRUE;
 8015d82:	2301      	movs	r3, #1
 8015d84:	6263      	str	r3, [r4, #36]	; 0x24
  return ptr->mem_buffer + (start_row - ptr->cur_start_row);
 8015d86:	69a0      	ldr	r0, [r4, #24]
 8015d88:	1a2d      	subs	r5, r5, r0
 8015d8a:	6820      	ldr	r0, [r4, #0]
}
 8015d8c:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 8015d90:	b007      	add	sp, #28
 8015d92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 8015d96:	6803      	ldr	r3, [r0, #0]
 8015d98:	2217      	movs	r2, #23
 8015d9a:	615a      	str	r2, [r3, #20]
 8015d9c:	681b      	ldr	r3, [r3, #0]
 8015d9e:	4798      	blx	r3
  if (writable)
 8015da0:	e7f1      	b.n	8015d86 <access_virt_sarray+0x1a2>
	...

08015da4 <jinit_memory_mgr>:
  my_mem_ptr mem;
  long max_to_use;
  int pool;
  size_t test_mac;

  cinfo->mem = NULL;		/* for safety if init fails */
 8015da4:	2300      	movs	r3, #0
{
 8015da6:	b570      	push	{r4, r5, r6, lr}
 8015da8:	4605      	mov	r5, r0
  cinfo->mem = NULL;		/* for safety if init fails */
 8015daa:	6043      	str	r3, [r0, #4]
  test_mac = (size_t) MAX_ALLOC_CHUNK;
  if ((long) test_mac != MAX_ALLOC_CHUNK ||
      (MAX_ALLOC_CHUNK % SIZEOF(ALIGN_TYPE)) != 0)
    ERREXIT(cinfo, JERR_BAD_ALLOC_CHUNK);

  max_to_use = jpeg_mem_init(cinfo); /* system-dependent initialization */
 8015dac:	f000 f85f 	bl	8015e6e <jpeg_mem_init>

  /* Attempt to allocate memory manager's control block */
  mem = (my_mem_ptr) jpeg_get_small(cinfo, SIZEOF(my_memory_mgr));
 8015db0:	2154      	movs	r1, #84	; 0x54
  max_to_use = jpeg_mem_init(cinfo); /* system-dependent initialization */
 8015db2:	4606      	mov	r6, r0
  mem = (my_mem_ptr) jpeg_get_small(cinfo, SIZEOF(my_memory_mgr));
 8015db4:	4628      	mov	r0, r5
 8015db6:	f000 f847 	bl	8015e48 <jpeg_get_small>

  if (mem == NULL) {
 8015dba:	4604      	mov	r4, r0
 8015dbc:	b948      	cbnz	r0, 8015dd2 <jinit_memory_mgr+0x2e>
    jpeg_mem_term(cinfo);	/* system-dependent cleanup */
 8015dbe:	4628      	mov	r0, r5
 8015dc0:	f000 f857 	bl	8015e72 <jpeg_mem_term>
    ERREXIT1(cinfo, JERR_OUT_OF_MEMORY, 0);
 8015dc4:	682b      	ldr	r3, [r5, #0]
 8015dc6:	2238      	movs	r2, #56	; 0x38
 8015dc8:	4628      	mov	r0, r5
 8015dca:	e9c3 2405 	strd	r2, r4, [r3, #20]
 8015dce:	681b      	ldr	r3, [r3, #0]
 8015dd0:	4798      	blx	r3
  }

  /* OK, fill in the method pointers */
  mem->pub.alloc_small = alloc_small;
 8015dd2:	4b12      	ldr	r3, [pc, #72]	; (8015e1c <jinit_memory_mgr+0x78>)
 8015dd4:	6023      	str	r3, [r4, #0]
  mem->pub.alloc_large = alloc_large;
 8015dd6:	4b12      	ldr	r3, [pc, #72]	; (8015e20 <jinit_memory_mgr+0x7c>)
 8015dd8:	6063      	str	r3, [r4, #4]
  mem->pub.alloc_sarray = alloc_sarray;
 8015dda:	4b12      	ldr	r3, [pc, #72]	; (8015e24 <jinit_memory_mgr+0x80>)
 8015ddc:	60a3      	str	r3, [r4, #8]
  mem->pub.alloc_barray = alloc_barray;
 8015dde:	4b12      	ldr	r3, [pc, #72]	; (8015e28 <jinit_memory_mgr+0x84>)
 8015de0:	60e3      	str	r3, [r4, #12]
  mem->pub.request_virt_sarray = request_virt_sarray;
 8015de2:	4b12      	ldr	r3, [pc, #72]	; (8015e2c <jinit_memory_mgr+0x88>)
 8015de4:	6123      	str	r3, [r4, #16]
  mem->pub.request_virt_barray = request_virt_barray;
 8015de6:	4b12      	ldr	r3, [pc, #72]	; (8015e30 <jinit_memory_mgr+0x8c>)
 8015de8:	6163      	str	r3, [r4, #20]
  mem->pub.realize_virt_arrays = realize_virt_arrays;
 8015dea:	4b12      	ldr	r3, [pc, #72]	; (8015e34 <jinit_memory_mgr+0x90>)
 8015dec:	61a3      	str	r3, [r4, #24]
  mem->pub.access_virt_sarray = access_virt_sarray;
 8015dee:	4b12      	ldr	r3, [pc, #72]	; (8015e38 <jinit_memory_mgr+0x94>)
 8015df0:	61e3      	str	r3, [r4, #28]
  mem->pub.access_virt_barray = access_virt_barray;
 8015df2:	4b12      	ldr	r3, [pc, #72]	; (8015e3c <jinit_memory_mgr+0x98>)
 8015df4:	6223      	str	r3, [r4, #32]
  mem->pub.free_pool = free_pool;
 8015df6:	4b12      	ldr	r3, [pc, #72]	; (8015e40 <jinit_memory_mgr+0x9c>)
 8015df8:	6263      	str	r3, [r4, #36]	; 0x24
  mem->pub.self_destruct = self_destruct;
 8015dfa:	4b12      	ldr	r3, [pc, #72]	; (8015e44 <jinit_memory_mgr+0xa0>)
 8015dfc:	62a3      	str	r3, [r4, #40]	; 0x28

  /* Make MAX_ALLOC_CHUNK accessible to other modules */
  mem->pub.max_alloc_chunk = MAX_ALLOC_CHUNK;
 8015dfe:	f44f 3380 	mov.w	r3, #65536	; 0x10000

  /* Initialize working state */
  mem->pub.max_memory_to_use = max_to_use;
 8015e02:	e9c4 630b 	strd	r6, r3, [r4, #44]	; 0x2c

  for (pool = JPOOL_NUMPOOLS-1; pool >= JPOOL_PERMANENT; pool--) {
    mem->small_list[pool] = NULL;
 8015e06:	2300      	movs	r3, #0
 8015e08:	63a3      	str	r3, [r4, #56]	; 0x38
    mem->large_list[pool] = NULL;
 8015e0a:	6423      	str	r3, [r4, #64]	; 0x40
    mem->small_list[pool] = NULL;
 8015e0c:	6363      	str	r3, [r4, #52]	; 0x34
    mem->large_list[pool] = NULL;
 8015e0e:	63e3      	str	r3, [r4, #60]	; 0x3c
  }
  mem->virt_sarray_list = NULL;
  mem->virt_barray_list = NULL;
 8015e10:	e9c4 3311 	strd	r3, r3, [r4, #68]	; 0x44

  mem->total_space_allocated = SIZEOF(my_memory_mgr);
 8015e14:	2354      	movs	r3, #84	; 0x54
 8015e16:	64e3      	str	r3, [r4, #76]	; 0x4c

  /* Declare ourselves open for business */
  cinfo->mem = & mem->pub;
 8015e18:	606c      	str	r4, [r5, #4]
      }
    }
  }
#endif

}
 8015e1a:	bd70      	pop	{r4, r5, r6, pc}
 8015e1c:	08015641 	.word	0x08015641
 8015e20:	0801596f 	.word	0x0801596f
 8015e24:	08015a4d 	.word	0x08015a4d
 8015e28:	080159dd 	.word	0x080159dd
 8015e2c:	08015757 	.word	0x08015757
 8015e30:	0801570d 	.word	0x0801570d
 8015e34:	08015abd 	.word	0x08015abd
 8015e38:	08015be5 	.word	0x08015be5
 8015e3c:	0801586f 	.word	0x0801586f
 8015e40:	080157a1 	.word	0x080157a1
 8015e44:	08015845 	.word	0x08015845

08015e48 <jpeg_get_small>:
 */

GLOBAL(void *)
jpeg_get_small (j_common_ptr cinfo, size_t sizeofobject)
{
  return (void *) JMALLOC(sizeofobject);
 8015e48:	4608      	mov	r0, r1
 8015e4a:	f7f2 b8a3 	b.w	8007f94 <pvPortMalloc>

08015e4e <jpeg_free_small>:
}

GLOBAL(void)
jpeg_free_small (j_common_ptr cinfo, void * object, size_t sizeofobject)
{
  JFREE(object);
 8015e4e:	4608      	mov	r0, r1
 8015e50:	f7f2 b936 	b.w	80080c0 <vPortFree>

08015e54 <jpeg_get_large>:
 8015e54:	4608      	mov	r0, r1
 8015e56:	f7f2 b89d 	b.w	8007f94 <pvPortMalloc>

08015e5a <jpeg_free_large>:
 8015e5a:	4608      	mov	r0, r1
 8015e5c:	f7f2 b930 	b.w	80080c0 <vPortFree>

08015e60 <jpeg_mem_available>:
GLOBAL(long)
jpeg_mem_available (j_common_ptr cinfo, long min_bytes_needed,
		    long max_bytes_needed, long already_allocated)
{
  return max_bytes_needed;
}
 8015e60:	4610      	mov	r0, r2
 8015e62:	4770      	bx	lr

08015e64 <jpeg_open_backing_store>:

GLOBAL(void)
jpeg_open_backing_store (j_common_ptr cinfo, backing_store_ptr info,
			 long total_bytes_needed)
{
  ERREXIT(cinfo, JERR_NO_BACKING_STORE);
 8015e64:	6803      	ldr	r3, [r0, #0]
 8015e66:	2233      	movs	r2, #51	; 0x33
 8015e68:	615a      	str	r2, [r3, #20]
 8015e6a:	681b      	ldr	r3, [r3, #0]
 8015e6c:	4718      	bx	r3

08015e6e <jpeg_mem_init>:

GLOBAL(long)
jpeg_mem_init (j_common_ptr cinfo)
{
  return 0;			/* just set max_memory_to_use to 0 */
}
 8015e6e:	2000      	movs	r0, #0
 8015e70:	4770      	bx	lr

08015e72 <jpeg_mem_term>:

GLOBAL(void)
jpeg_mem_term (j_common_ptr cinfo)
{
}
 8015e72:	4770      	bx	lr

08015e74 <create_colorindex>:
 * Create the color index table.
 */

LOCAL(void)
create_colorindex (j_decompress_ptr cinfo)
{
 8015e74:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* For ordered dither, we pad the color index tables by MAXJSAMPLE in
   * each direction (input index values can be -MAXJSAMPLE .. 2*MAXJSAMPLE).
   * This is not necessary in the other dithering modes.  However, we
   * flag whether it was done in case user changes dithering mode.
   */
  if (cinfo->dither_mode == JDITHER_ORDERED) {
 8015e78:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
  } else {
    pad = 0;
    cquantize->is_padded = FALSE;
  }

  cquantize->colorindex = (*cinfo->mem->alloc_sarray)
 8015e7c:	2101      	movs	r1, #1
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8015e7e:	f8d0 51e0 	ldr.w	r5, [r0, #480]	; 0x1e0
{
 8015e82:	4604      	mov	r4, r0
  if (cinfo->dither_mode == JDITHER_ORDERED) {
 8015e84:	2b01      	cmp	r3, #1
  return (int) (((INT32) (2*j + 1) * MAXJSAMPLE + maxj) / (2*maxj));
 8015e86:	f44f 78ff 	mov.w	r8, #510	; 0x1fe
    cquantize->is_padded = FALSE;
 8015e8a:	bf16      	itet	ne
 8015e8c:	2300      	movne	r3, #0
    pad = MAXJSAMPLE*2;
 8015e8e:	f44f 76ff 	moveq.w	r6, #510	; 0x1fe
    pad = 0;
 8015e92:	461e      	movne	r6, r3
 8015e94:	61eb      	str	r3, [r5, #28]
  cquantize->colorindex = (*cinfo->mem->alloc_sarray)
 8015e96:	6843      	ldr	r3, [r0, #4]
 8015e98:	f506 7280 	add.w	r2, r6, #256	; 0x100
 8015e9c:	689f      	ldr	r7, [r3, #8]
 8015e9e:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8015ea0:	47b8      	blx	r7
    ((j_common_ptr) cinfo, JPOOL_IMAGE,
     (JDIMENSION) (MAXJSAMPLE+1 + pad),
     (JDIMENSION) cinfo->out_color_components);

  /* blksize is number of adjacent repeated entries for a component */
  blksize = cquantize->sv_actual;
 8015ea2:	f8d5 c014 	ldr.w	ip, [r5, #20]
 8015ea6:	f105 0e20 	add.w	lr, r5, #32

  for (i = 0; i < cinfo->out_color_components; i++) {
 8015eaa:	2300      	movs	r3, #0
  cquantize->colorindex = (*cinfo->mem->alloc_sarray)
 8015eac:	61a8      	str	r0, [r5, #24]
  for (i = 0; i < cinfo->out_color_components; i++) {
 8015eae:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8015eb0:	429a      	cmp	r2, r3
 8015eb2:	dc01      	bgt.n	8015eb8 <create_colorindex+0x44>
      for (j = 1; j <= MAXJSAMPLE; j++) {
	indexptr[-j] = indexptr[0];
	indexptr[MAXJSAMPLE+j] = indexptr[MAXJSAMPLE];
      }
  }
}
 8015eb4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    nci = cquantize->Ncolors[i]; /* # of distinct values for this color */
 8015eb8:	f85e 1b04 	ldr.w	r1, [lr], #4
      cquantize->colorindex[i] += MAXJSAMPLE;
 8015ebc:	009f      	lsls	r7, r3, #2
 8015ebe:	69a8      	ldr	r0, [r5, #24]
    blksize = blksize / nci;
 8015ec0:	fb9c fcf1 	sdiv	ip, ip, r1
    if (pad)
 8015ec4:	b126      	cbz	r6, 8015ed0 <create_colorindex+0x5c>
      cquantize->colorindex[i] += MAXJSAMPLE;
 8015ec6:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 8015eca:	32ff      	adds	r2, #255	; 0xff
 8015ecc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    k = largest_input_value(cinfo, i, 0, nci-1);
 8015ed0:	f101 39ff 	add.w	r9, r1, #4294967295
  return (int) (((INT32) (2*j + 1) * MAXJSAMPLE + maxj) / (2*maxj));
 8015ed4:	f101 0afe 	add.w	sl, r1, #254	; 0xfe
    indexptr = cquantize->colorindex[i];
 8015ed8:	59c2      	ldr	r2, [r0, r7]
    val = 0;
 8015eda:	2000      	movs	r0, #0
  return (int) (((INT32) (2*j + 1) * MAXJSAMPLE + maxj) / (2*maxj));
 8015edc:	ea4f 0949 	mov.w	r9, r9, lsl #1
    for (j = 0; j <= MAXJSAMPLE; j++) {
 8015ee0:	4601      	mov	r1, r0
  return (int) (((INT32) (2*j + 1) * MAXJSAMPLE + maxj) / (2*maxj));
 8015ee2:	fb9a f7f9 	sdiv	r7, sl, r9
      while (j > k)		/* advance val if past boundary */
 8015ee6:	428f      	cmp	r7, r1
 8015ee8:	db0a      	blt.n	8015f00 <create_colorindex+0x8c>
      indexptr[j] = (JSAMPLE) (val * blksize);
 8015eea:	fb10 fb0c 	smulbb	fp, r0, ip
 8015eee:	f802 b001 	strb.w	fp, [r2, r1]
    for (j = 0; j <= MAXJSAMPLE; j++) {
 8015ef2:	3101      	adds	r1, #1
 8015ef4:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8015ef8:	d1f5      	bne.n	8015ee6 <create_colorindex+0x72>
    if (pad)
 8015efa:	b93e      	cbnz	r6, 8015f0c <create_colorindex+0x98>
  for (i = 0; i < cinfo->out_color_components; i++) {
 8015efc:	3301      	adds	r3, #1
 8015efe:	e7d6      	b.n	8015eae <create_colorindex+0x3a>
	k = largest_input_value(cinfo, i, ++val, nci-1);
 8015f00:	3001      	adds	r0, #1
  return (int) (((INT32) (2*j + 1) * MAXJSAMPLE + maxj) / (2*maxj));
 8015f02:	fb08 a700 	mla	r7, r8, r0, sl
 8015f06:	fb97 f7f9 	sdiv	r7, r7, r9
 8015f0a:	e7ec      	b.n	8015ee6 <create_colorindex+0x72>
 8015f0c:	4611      	mov	r1, r2
 8015f0e:	f102 00ff 	add.w	r0, r2, #255	; 0xff
 8015f12:	f1a2 07ff 	sub.w	r7, r2, #255	; 0xff
	indexptr[-j] = indexptr[0];
 8015f16:	f892 9000 	ldrb.w	r9, [r2]
 8015f1a:	f801 9d01 	strb.w	r9, [r1, #-1]!
      for (j = 1; j <= MAXJSAMPLE; j++) {
 8015f1e:	42b9      	cmp	r1, r7
	indexptr[MAXJSAMPLE+j] = indexptr[MAXJSAMPLE];
 8015f20:	f892 90ff 	ldrb.w	r9, [r2, #255]	; 0xff
 8015f24:	f800 9f01 	strb.w	r9, [r0, #1]!
      for (j = 1; j <= MAXJSAMPLE; j++) {
 8015f28:	d1f5      	bne.n	8015f16 <create_colorindex+0xa2>
 8015f2a:	e7e7      	b.n	8015efc <create_colorindex+0x88>

08015f2c <color_quantize>:

METHODDEF(void)
color_quantize (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
		JSAMPARRAY output_buf, int num_rows)
/* General case, no dithering */
{
 8015f2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  register int pixcode, ci;
  register JSAMPROW ptrin, ptrout;
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;
  register int nc = cinfo->out_color_components;
 8015f30:	f8d0 c078 	ldr.w	ip, [r0, #120]	; 0x78
{
 8015f34:	4698      	mov	r8, r3
  JSAMPARRAY colorindex = cquantize->colorindex;
 8015f36:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
 8015f3a:	ea2c 79ec 	bic.w	r9, ip, ip, asr #31
 8015f3e:	f8d3 e018 	ldr.w	lr, [r3, #24]
  JDIMENSION width = cinfo->output_width;
 8015f42:	6f03      	ldr	r3, [r0, #112]	; 0x70

  for (row = 0; row < num_rows; row++) {
 8015f44:	2000      	movs	r0, #0
  JDIMENSION width = cinfo->output_width;
 8015f46:	9301      	str	r3, [sp, #4]
  for (row = 0; row < num_rows; row++) {
 8015f48:	4540      	cmp	r0, r8
 8015f4a:	db02      	blt.n	8015f52 <color_quantize+0x26>
	pixcode += GETJSAMPLE(colorindex[ci][GETJSAMPLE(*ptrin++)]);
      }
      *ptrout++ = (JSAMPLE) pixcode;
    }
  }
}
 8015f4c:	b003      	add	sp, #12
 8015f4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ptrout = output_buf[row];
 8015f52:	f852 4020 	ldr.w	r4, [r2, r0, lsl #2]
 8015f56:	9b01      	ldr	r3, [sp, #4]
    ptrin = input_buf[row];
 8015f58:	f851 5020 	ldr.w	r5, [r1, r0, lsl #2]
    for (col = width; col > 0; col--) {
 8015f5c:	eb04 0a03 	add.w	sl, r4, r3
 8015f60:	4554      	cmp	r4, sl
 8015f62:	d10f      	bne.n	8015f84 <color_quantize+0x58>
  for (row = 0; row < num_rows; row++) {
 8015f64:	3001      	adds	r0, #1
 8015f66:	e7ef      	b.n	8015f48 <color_quantize+0x1c>
	pixcode += GETJSAMPLE(colorindex[ci][GETJSAMPLE(*ptrin++)]);
 8015f68:	f815 b003 	ldrb.w	fp, [r5, r3]
 8015f6c:	f85e 7023 	ldr.w	r7, [lr, r3, lsl #2]
      for (ci = 0; ci < nc; ci++) {
 8015f70:	3301      	adds	r3, #1
	pixcode += GETJSAMPLE(colorindex[ci][GETJSAMPLE(*ptrin++)]);
 8015f72:	f817 700b 	ldrb.w	r7, [r7, fp]
 8015f76:	443e      	add	r6, r7
      for (ci = 0; ci < nc; ci++) {
 8015f78:	4563      	cmp	r3, ip
 8015f7a:	dbf5      	blt.n	8015f68 <color_quantize+0x3c>
 8015f7c:	444d      	add	r5, r9
      *ptrout++ = (JSAMPLE) pixcode;
 8015f7e:	f804 6b01 	strb.w	r6, [r4], #1
    for (col = width; col > 0; col--) {
 8015f82:	e7ed      	b.n	8015f60 <color_quantize+0x34>
      for (ci = 0; ci < nc; ci++) {
 8015f84:	2300      	movs	r3, #0
      pixcode = 0;
 8015f86:	461e      	mov	r6, r3
 8015f88:	e7f6      	b.n	8015f78 <color_quantize+0x4c>

08015f8a <color_quantize3>:

METHODDEF(void)
color_quantize3 (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
		 JSAMPARRAY output_buf, int num_rows)
/* Fast path for out_color_components==3, no dithering */
{
 8015f8a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  register int pixcode;
  register JSAMPROW ptrin, ptrout;
  JSAMPROW colorindex0 = cquantize->colorindex[0];
 8015f8e:	f8d0 41e0 	ldr.w	r4, [r0, #480]	; 0x1e0
  JSAMPROW colorindex1 = cquantize->colorindex[1];
  JSAMPROW colorindex2 = cquantize->colorindex[2];
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;
 8015f92:	f8d0 9070 	ldr.w	r9, [r0, #112]	; 0x70

  for (row = 0; row < num_rows; row++) {
 8015f96:	2000      	movs	r0, #0
  JSAMPROW colorindex0 = cquantize->colorindex[0];
 8015f98:	69a4      	ldr	r4, [r4, #24]
  JSAMPROW colorindex1 = cquantize->colorindex[1];
 8015f9a:	e9d4 ce00 	ldrd	ip, lr, [r4]
  JSAMPROW colorindex2 = cquantize->colorindex[2];
 8015f9e:	f8d4 8008 	ldr.w	r8, [r4, #8]
  for (row = 0; row < num_rows; row++) {
 8015fa2:	4298      	cmp	r0, r3
 8015fa4:	db01      	blt.n	8015faa <color_quantize3+0x20>
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*ptrin++)]);
      pixcode += GETJSAMPLE(colorindex2[GETJSAMPLE(*ptrin++)]);
      *ptrout++ = (JSAMPLE) pixcode;
    }
  }
}
 8015fa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ptrout = output_buf[row];
 8015faa:	f852 5020 	ldr.w	r5, [r2, r0, lsl #2]
    for (col = width; col > 0; col--) {
 8015fae:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
 8015fb2:	eb05 0a09 	add.w	sl, r5, r9
 8015fb6:	4555      	cmp	r5, sl
 8015fb8:	f104 0403 	add.w	r4, r4, #3
 8015fbc:	d101      	bne.n	8015fc2 <color_quantize3+0x38>
  for (row = 0; row < num_rows; row++) {
 8015fbe:	3001      	adds	r0, #1
 8015fc0:	e7ef      	b.n	8015fa2 <color_quantize3+0x18>
      pixcode  = GETJSAMPLE(colorindex0[GETJSAMPLE(*ptrin++)]);
 8015fc2:	f814 6c03 	ldrb.w	r6, [r4, #-3]
 8015fc6:	f81c 7006 	ldrb.w	r7, [ip, r6]
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*ptrin++)]);
 8015fca:	f814 6c02 	ldrb.w	r6, [r4, #-2]
 8015fce:	f81e 6006 	ldrb.w	r6, [lr, r6]
 8015fd2:	4437      	add	r7, r6
      pixcode += GETJSAMPLE(colorindex2[GETJSAMPLE(*ptrin++)]);
 8015fd4:	f814 6c01 	ldrb.w	r6, [r4, #-1]
 8015fd8:	f818 6006 	ldrb.w	r6, [r8, r6]
 8015fdc:	443e      	add	r6, r7
      *ptrout++ = (JSAMPLE) pixcode;
 8015fde:	f805 6b01 	strb.w	r6, [r5], #1
    for (col = width; col > 0; col--) {
 8015fe2:	e7e8      	b.n	8015fb6 <color_quantize3+0x2c>

08015fe4 <quantize3_ord_dither>:

METHODDEF(void)
quantize3_ord_dither (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
		      JSAMPARRAY output_buf, int num_rows)
/* Fast path for out_color_components==3, with ordered dithering */
{
 8015fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015fe8:	469a      	mov	sl, r3
 8015fea:	b08b      	sub	sp, #44	; 0x2c
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8015fec:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
{
 8015ff0:	e9cd 1208 	strd	r1, r2, [sp, #32]
  register int pixcode;
  register JSAMPROW input_ptr;
  register JSAMPROW output_ptr;
  JSAMPROW colorindex0 = cquantize->colorindex[0];
 8015ff4:	699a      	ldr	r2, [r3, #24]
 8015ff6:	6811      	ldr	r1, [r2, #0]
 8015ff8:	9104      	str	r1, [sp, #16]
  JSAMPROW colorindex1 = cquantize->colorindex[1];
 8015ffa:	6851      	ldr	r1, [r2, #4]
  JSAMPROW colorindex2 = cquantize->colorindex[2];
 8015ffc:	6892      	ldr	r2, [r2, #8]
  JSAMPROW colorindex1 = cquantize->colorindex[1];
 8015ffe:	9105      	str	r1, [sp, #20]
  int row_index, col_index;	/* current indexes into dither matrix */
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;

  for (row = 0; row < num_rows; row++) {
 8016000:	2100      	movs	r1, #0
  JSAMPROW colorindex2 = cquantize->colorindex[2];
 8016002:	9206      	str	r2, [sp, #24]
  JDIMENSION width = cinfo->output_width;
 8016004:	6f02      	ldr	r2, [r0, #112]	; 0x70
 8016006:	9207      	str	r2, [sp, #28]
  for (row = 0; row < num_rows; row++) {
 8016008:	4551      	cmp	r1, sl
 801600a:	db02      	blt.n	8016012 <quantize3_ord_dither+0x2e>
      col_index = (col_index + 1) & ODITHER_MASK;
    }
    row_index = (row_index + 1) & ODITHER_MASK;
    cquantize->row_index = row_index;
  }
}
 801600c:	b00b      	add	sp, #44	; 0x2c
 801600e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    row_index = cquantize->row_index;
 8016012:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    output_ptr = output_buf[row];
 8016014:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016016:	9c07      	ldr	r4, [sp, #28]
 8016018:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
    dither0 = cquantize->odither[0][row_index];
 801601c:	0190      	lsls	r0, r2, #6
 801601e:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 8016022:	9002      	str	r0, [sp, #8]
 8016024:	eb05 0e04 	add.w	lr, r5, r4
    col_index = 0;
 8016028:	2400      	movs	r4, #0
    row_index = cquantize->row_index;
 801602a:	9201      	str	r2, [sp, #4]
    dither2 = cquantize->odither[2][row_index];
 801602c:	e9d3 900e 	ldrd	r9, r0, [r3, #56]	; 0x38
 8016030:	9003      	str	r0, [sp, #12]
    for (col = width; col > 0; col--) {
 8016032:	9808      	ldr	r0, [sp, #32]
 8016034:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 8016038:	4575      	cmp	r5, lr
 801603a:	f100 0003 	add.w	r0, r0, #3
 801603e:	d106      	bne.n	801604e <quantize3_ord_dither+0x6a>
    row_index = (row_index + 1) & ODITHER_MASK;
 8016040:	9a01      	ldr	r2, [sp, #4]
  for (row = 0; row < num_rows; row++) {
 8016042:	3101      	adds	r1, #1
    row_index = (row_index + 1) & ODITHER_MASK;
 8016044:	3201      	adds	r2, #1
 8016046:	f002 020f 	and.w	r2, r2, #15
    cquantize->row_index = row_index;
 801604a:	631a      	str	r2, [r3, #48]	; 0x30
  for (row = 0; row < num_rows; row++) {
 801604c:	e7dc      	b.n	8016008 <quantize3_ord_dither+0x24>
      pixcode  = GETJSAMPLE(colorindex0[GETJSAMPLE(*input_ptr++) +
 801604e:	9e02      	ldr	r6, [sp, #8]
 8016050:	f810 cc03 	ldrb.w	ip, [r0, #-3]
 8016054:	eb06 0684 	add.w	r6, r6, r4, lsl #2
 8016058:	9a04      	ldr	r2, [sp, #16]
      col_index = (col_index + 1) & ODITHER_MASK;
 801605a:	3401      	adds	r4, #1
      pixcode  = GETJSAMPLE(colorindex0[GETJSAMPLE(*input_ptr++) +
 801605c:	f858 7006 	ldr.w	r7, [r8, r6]
 8016060:	4494      	add	ip, r2
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*input_ptr++) +
 8016062:	9a05      	ldr	r2, [sp, #20]
      col_index = (col_index + 1) & ODITHER_MASK;
 8016064:	f004 040f 	and.w	r4, r4, #15
      pixcode  = GETJSAMPLE(colorindex0[GETJSAMPLE(*input_ptr++) +
 8016068:	f81c b007 	ldrb.w	fp, [ip, r7]
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*input_ptr++) +
 801606c:	f810 cc02 	ldrb.w	ip, [r0, #-2]
 8016070:	f859 7006 	ldr.w	r7, [r9, r6]
 8016074:	4494      	add	ip, r2
      pixcode += GETJSAMPLE(colorindex2[GETJSAMPLE(*input_ptr++) +
 8016076:	9a03      	ldr	r2, [sp, #12]
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*input_ptr++) +
 8016078:	f81c 7007 	ldrb.w	r7, [ip, r7]
      pixcode += GETJSAMPLE(colorindex2[GETJSAMPLE(*input_ptr++) +
 801607c:	5996      	ldr	r6, [r2, r6]
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*input_ptr++) +
 801607e:	44bb      	add	fp, r7
      pixcode += GETJSAMPLE(colorindex2[GETJSAMPLE(*input_ptr++) +
 8016080:	9a06      	ldr	r2, [sp, #24]
 8016082:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 8016086:	4417      	add	r7, r2
 8016088:	5dbe      	ldrb	r6, [r7, r6]
 801608a:	44b3      	add	fp, r6
      *output_ptr++ = (JSAMPLE) pixcode;
 801608c:	f805 bb01 	strb.w	fp, [r5], #1
    for (col = width; col > 0; col--) {
 8016090:	e7d2      	b.n	8016038 <quantize3_ord_dither+0x54>

08016092 <alloc_fs_workspace>:
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  size_t arraysize;
  int i;

  arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
 8016092:	6f02      	ldr	r2, [r0, #112]	; 0x70
{
 8016094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
 8016096:	3202      	adds	r2, #2
 8016098:	f8d0 61e0 	ldr.w	r6, [r0, #480]	; 0x1e0
{
 801609c:	4604      	mov	r4, r0
  for (i = 0; i < cinfo->out_color_components; i++) {
 801609e:	2700      	movs	r7, #0
  arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
 80160a0:	0055      	lsls	r5, r2, #1
  for (i = 0; i < cinfo->out_color_components; i++) {
 80160a2:	3644      	adds	r6, #68	; 0x44
 80160a4:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80160a6:	42bb      	cmp	r3, r7
 80160a8:	dc00      	bgt.n	80160ac <alloc_fs_workspace+0x1a>
    cquantize->fserrors[i] = (FSERRPTR)
      (*cinfo->mem->alloc_large)((j_common_ptr) cinfo, JPOOL_IMAGE, arraysize);
  }
}
 80160aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      (*cinfo->mem->alloc_large)((j_common_ptr) cinfo, JPOOL_IMAGE, arraysize);
 80160ac:	6863      	ldr	r3, [r4, #4]
 80160ae:	462a      	mov	r2, r5
 80160b0:	2101      	movs	r1, #1
 80160b2:	4620      	mov	r0, r4
 80160b4:	685b      	ldr	r3, [r3, #4]
  for (i = 0; i < cinfo->out_color_components; i++) {
 80160b6:	3701      	adds	r7, #1
      (*cinfo->mem->alloc_large)((j_common_ptr) cinfo, JPOOL_IMAGE, arraysize);
 80160b8:	4798      	blx	r3
    cquantize->fserrors[i] = (FSERRPTR)
 80160ba:	f846 0b04 	str.w	r0, [r6], #4
  for (i = 0; i < cinfo->out_color_components; i++) {
 80160be:	e7f1      	b.n	80160a4 <alloc_fs_workspace+0x12>

080160c0 <finish_pass_1_quant>:

METHODDEF(void)
finish_pass_1_quant (j_decompress_ptr cinfo)
{
  /* no work in 1-pass case */
}
 80160c0:	4770      	bx	lr

080160c2 <new_color_map_1_quant>:
 */

METHODDEF(void)
new_color_map_1_quant (j_decompress_ptr cinfo)
{
  ERREXIT(cinfo, JERR_MODE_CHANGE);
 80160c2:	6803      	ldr	r3, [r0, #0]
 80160c4:	222f      	movs	r2, #47	; 0x2f
 80160c6:	615a      	str	r2, [r3, #20]
 80160c8:	681b      	ldr	r3, [r3, #0]
 80160ca:	4718      	bx	r3

080160cc <start_pass_1_quant>:
{
 80160cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 80160d0:	f8d0 51e0 	ldr.w	r5, [r0, #480]	; 0x1e0
{
 80160d4:	4604      	mov	r4, r0
  cinfo->colormap = cquantize->sv_colormap;
 80160d6:	692b      	ldr	r3, [r5, #16]
 80160d8:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  cinfo->actual_number_of_colors = cquantize->sv_actual;
 80160dc:	696b      	ldr	r3, [r5, #20]
 80160de:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  switch (cinfo->dither_mode) {
 80160e2:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 80160e6:	2b01      	cmp	r3, #1
 80160e8:	d00b      	beq.n	8016102 <start_pass_1_quant+0x36>
 80160ea:	2b02      	cmp	r3, #2
 80160ec:	d05e      	beq.n	80161ac <start_pass_1_quant+0xe0>
 80160ee:	2b00      	cmp	r3, #0
 80160f0:	d174      	bne.n	80161dc <start_pass_1_quant+0x110>
    if (cinfo->out_color_components == 3)
 80160f2:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80160f4:	2b03      	cmp	r3, #3
      cquantize->pub.color_quantize = color_quantize3;
 80160f6:	bf0c      	ite	eq
 80160f8:	4b3c      	ldreq	r3, [pc, #240]	; (80161ec <start_pass_1_quant+0x120>)
      cquantize->pub.color_quantize = color_quantize;
 80160fa:	4b3d      	ldrne	r3, [pc, #244]	; (80161f0 <start_pass_1_quant+0x124>)
 80160fc:	606b      	str	r3, [r5, #4]
}
 80160fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (cinfo->out_color_components == 3)
 8016102:	6f81      	ldr	r1, [r0, #120]	; 0x78
      cquantize->pub.color_quantize = quantize_ord_dither;
 8016104:	4b3b      	ldr	r3, [pc, #236]	; (80161f4 <start_pass_1_quant+0x128>)
 8016106:	4a3c      	ldr	r2, [pc, #240]	; (80161f8 <start_pass_1_quant+0x12c>)
 8016108:	2903      	cmp	r1, #3
 801610a:	bf18      	it	ne
 801610c:	4613      	movne	r3, r2
 801610e:	606b      	str	r3, [r5, #4]
    cquantize->row_index = 0;	/* initialize state for ordered dither */
 8016110:	2300      	movs	r3, #0
 8016112:	632b      	str	r3, [r5, #48]	; 0x30
    if (! cquantize->is_padded)
 8016114:	69eb      	ldr	r3, [r5, #28]
 8016116:	b90b      	cbnz	r3, 801611c <start_pass_1_quant+0x50>
      create_colorindex(cinfo);
 8016118:	f7ff feac 	bl	8015e74 <create_colorindex>
    if (cquantize->odither[0] == NULL)
 801611c:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 801611e:	2d00      	cmp	r5, #0
 8016120:	d1ed      	bne.n	80160fe <start_pass_1_quant+0x32>
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8016122:	f8d4 71e0 	ldr.w	r7, [r4, #480]	; 0x1e0
  for (i = 0; i < cinfo->out_color_components; i++) {
 8016126:	f107 0820 	add.w	r8, r7, #32
 801612a:	4646      	mov	r6, r8
 801612c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 801612e:	429d      	cmp	r5, r3
 8016130:	dae5      	bge.n	80160fe <start_pass_1_quant+0x32>
    nci = cquantize->Ncolors[i]; /* # of distinct values for this color */
 8016132:	f856 9b04 	ldr.w	r9, [r6], #4
    for (j = 0; j < i; j++) {
 8016136:	4642      	mov	r2, r8
 8016138:	2300      	movs	r3, #0
 801613a:	429d      	cmp	r5, r3
 801613c:	d007      	beq.n	801614e <start_pass_1_quant+0x82>
      if (nci == cquantize->Ncolors[j]) {
 801613e:	f852 1b04 	ldr.w	r1, [r2], #4
 8016142:	4589      	cmp	r9, r1
 8016144:	d130      	bne.n	80161a8 <start_pass_1_quant+0xdc>
	odither = cquantize->odither[j];
 8016146:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 801614a:	6b58      	ldr	r0, [r3, #52]	; 0x34
    if (odither == NULL)	/* need a new table? */
 801614c:	bb48      	cbnz	r0, 80161a2 <start_pass_1_quant+0xd6>
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 801614e:	6863      	ldr	r3, [r4, #4]
 8016150:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8016154:	2101      	movs	r1, #1
 8016156:	4620      	mov	r0, r4
 8016158:	681b      	ldr	r3, [r3, #0]
 801615a:	4798      	blx	r3
  den = 2 * ODITHER_CELLS * ((INT32) (ncolors - 1));
 801615c:	f109 32ff 	add.w	r2, r9, #4294967295
 8016160:	f100 013c 	add.w	r1, r0, #60	; 0x3c
 8016164:	f8df c098 	ldr.w	ip, [pc, #152]	; 8016200 <start_pass_1_quant+0x134>
 8016168:	0252      	lsls	r2, r2, #9
  for (j = 0; j < ODITHER_SIZE; j++) {
 801616a:	f200 4a3c 	addw	sl, r0, #1084	; 0x43c
    for (k = 0; k < ODITHER_SIZE; k++) {
 801616e:	f1a1 0e40 	sub.w	lr, r1, #64	; 0x40
    for (j = 0; j < i; j++) {
 8016172:	46e1      	mov	r9, ip
      num = ((INT32) (ODITHER_CELLS-1 - 2*((int)base_dither_matrix[j][k])))
 8016174:	f819 3b01 	ldrb.w	r3, [r9], #1
 8016178:	005b      	lsls	r3, r3, #1
 801617a:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
      odither[j][k] = (int) (num<0 ? -((-num)/den) : num/den);
 801617e:	ebd3 2303 	rsbs	r3, r3, r3, lsl #8
 8016182:	bf45      	ittet	mi
 8016184:	425b      	negmi	r3, r3
 8016186:	fb93 f3f2 	sdivmi	r3, r3, r2
 801618a:	fb93 f3f2 	sdivpl	r3, r3, r2
 801618e:	425b      	negmi	r3, r3
 8016190:	f84e 3f04 	str.w	r3, [lr, #4]!
    for (k = 0; k < ODITHER_SIZE; k++) {
 8016194:	458e      	cmp	lr, r1
 8016196:	d1ed      	bne.n	8016174 <start_pass_1_quant+0xa8>
  for (j = 0; j < ODITHER_SIZE; j++) {
 8016198:	3140      	adds	r1, #64	; 0x40
 801619a:	f10c 0c10 	add.w	ip, ip, #16
 801619e:	458a      	cmp	sl, r1
 80161a0:	d1e5      	bne.n	801616e <start_pass_1_quant+0xa2>
  for (i = 0; i < cinfo->out_color_components; i++) {
 80161a2:	3501      	adds	r5, #1
    cquantize->odither[i] = odither;
 80161a4:	6130      	str	r0, [r6, #16]
  for (i = 0; i < cinfo->out_color_components; i++) {
 80161a6:	e7c1      	b.n	801612c <start_pass_1_quant+0x60>
    for (j = 0; j < i; j++) {
 80161a8:	3301      	adds	r3, #1
 80161aa:	e7c6      	b.n	801613a <start_pass_1_quant+0x6e>
    cquantize->pub.color_quantize = quantize_fs_dither;
 80161ac:	4b13      	ldr	r3, [pc, #76]	; (80161fc <start_pass_1_quant+0x130>)
 80161ae:	606b      	str	r3, [r5, #4]
    cquantize->on_odd_row = FALSE; /* initialize state for F-S dither */
 80161b0:	2300      	movs	r3, #0
 80161b2:	656b      	str	r3, [r5, #84]	; 0x54
    if (cquantize->fserrors[0] == NULL)
 80161b4:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80161b6:	b90b      	cbnz	r3, 80161bc <start_pass_1_quant+0xf0>
      alloc_fs_workspace(cinfo);
 80161b8:	f7ff ff6b 	bl	8016092 <alloc_fs_workspace>
    arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
 80161bc:	6f22      	ldr	r2, [r4, #112]	; 0x70
 80161be:	3544      	adds	r5, #68	; 0x44
    for (i = 0; i < cinfo->out_color_components; i++)
 80161c0:	2700      	movs	r7, #0
    arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
 80161c2:	3202      	adds	r2, #2
 80161c4:	0056      	lsls	r6, r2, #1
    for (i = 0; i < cinfo->out_color_components; i++)
 80161c6:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80161c8:	42bb      	cmp	r3, r7
 80161ca:	dd98      	ble.n	80160fe <start_pass_1_quant+0x32>
      FMEMZERO((void FAR *) cquantize->fserrors[i], arraysize);
 80161cc:	4632      	mov	r2, r6
 80161ce:	2100      	movs	r1, #0
 80161d0:	f855 0b04 	ldr.w	r0, [r5], #4
    for (i = 0; i < cinfo->out_color_components; i++)
 80161d4:	3701      	adds	r7, #1
      FMEMZERO((void FAR *) cquantize->fserrors[i], arraysize);
 80161d6:	f014 f81d 	bl	802a214 <memset>
    for (i = 0; i < cinfo->out_color_components; i++)
 80161da:	e7f4      	b.n	80161c6 <start_pass_1_quant+0xfa>
    ERREXIT(cinfo, JERR_NOT_COMPILED);
 80161dc:	6803      	ldr	r3, [r0, #0]
 80161de:	2231      	movs	r2, #49	; 0x31
}
 80161e0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ERREXIT(cinfo, JERR_NOT_COMPILED);
 80161e4:	615a      	str	r2, [r3, #20]
 80161e6:	681b      	ldr	r3, [r3, #0]
 80161e8:	4718      	bx	r3
 80161ea:	bf00      	nop
 80161ec:	08015f8b 	.word	0x08015f8b
 80161f0:	08015f2d 	.word	0x08015f2d
 80161f4:	08015fe5 	.word	0x08015fe5
 80161f8:	0801633d 	.word	0x0801633d
 80161fc:	08016205 	.word	0x08016205
 8016200:	0802f448 	.word	0x0802f448

08016204 <quantize_fs_dither>:
{
 8016204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016208:	b091      	sub	sp, #68	; 0x44
  JDIMENSION width = cinfo->output_width;
 801620a:	6f05      	ldr	r5, [r0, #112]	; 0x70
  int nc = cinfo->out_color_components;
 801620c:	f8d0 9078 	ldr.w	r9, [r0, #120]	; 0x78
 8016210:	f1a2 0b04 	sub.w	fp, r2, #4
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8016214:	f8d0 41e0 	ldr.w	r4, [r0, #480]	; 0x1e0
{
 8016218:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
  JSAMPLE *range_limit = cinfo->sample_range_limit;
 801621c:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8016220:	930a      	str	r3, [sp, #40]	; 0x28
	input_ptr += (width-1) * nc; /* so point to rightmost pixel */
 8016222:	1e6b      	subs	r3, r5, #1
 8016224:	9304      	str	r3, [sp, #16]
 8016226:	fb03 f309 	mul.w	r3, r3, r9
 801622a:	9308      	str	r3, [sp, #32]
	errorptr = cquantize->fserrors[ci] + (width+1); /* => entry after last column */
 801622c:	1c6b      	adds	r3, r5, #1
 801622e:	005b      	lsls	r3, r3, #1
 8016230:	9309      	str	r3, [sp, #36]	; 0x24
  for (row = 0; row < num_rows; row++) {
 8016232:	2300      	movs	r3, #0
 8016234:	9300      	str	r3, [sp, #0]
 8016236:	9a00      	ldr	r2, [sp, #0]
 8016238:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801623a:	429a      	cmp	r2, r3
 801623c:	db02      	blt.n	8016244 <quantize_fs_dither+0x40>
}
 801623e:	b011      	add	sp, #68	; 0x44
 8016240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    FMEMZERO((void FAR *) output_buf[row],
 8016244:	2100      	movs	r1, #0
 8016246:	462a      	mov	r2, r5
 8016248:	f85b 0f04 	ldr.w	r0, [fp, #4]!
 801624c:	f013 ffe2 	bl	802a214 <memset>
    for (ci = 0; ci < nc; ci++) {
 8016250:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016254:	2100      	movs	r1, #0
 8016256:	9305      	str	r3, [sp, #20]
	dirnc = -nc;
 8016258:	f1c9 0300 	rsb	r3, r9, #0
 801625c:	930f      	str	r3, [sp, #60]	; 0x3c
    for (ci = 0; ci < nc; ci++) {
 801625e:	4549      	cmp	r1, r9
      if (cquantize->on_odd_row) {
 8016260:	6d62      	ldr	r2, [r4, #84]	; 0x54
    for (ci = 0; ci < nc; ci++) {
 8016262:	db06      	blt.n	8016272 <quantize_fs_dither+0x6e>
    cquantize->on_odd_row = (cquantize->on_odd_row ? FALSE : TRUE);
 8016264:	fab2 f282 	clz	r2, r2
  for (row = 0; row < num_rows; row++) {
 8016268:	9b00      	ldr	r3, [sp, #0]
    cquantize->on_odd_row = (cquantize->on_odd_row ? FALSE : TRUE);
 801626a:	0952      	lsrs	r2, r2, #5
  for (row = 0; row < num_rows; row++) {
 801626c:	3301      	adds	r3, #1
    cquantize->on_odd_row = (cquantize->on_odd_row ? FALSE : TRUE);
 801626e:	6562      	str	r2, [r4, #84]	; 0x54
  for (row = 0; row < num_rows; row++) {
 8016270:	e7e0      	b.n	8016234 <quantize_fs_dither+0x30>
      input_ptr = input_buf[row] + ci;
 8016272:	9800      	ldr	r0, [sp, #0]
 8016274:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016276:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
      output_ptr = output_buf[row];
 801627a:	f8db 0000 	ldr.w	r0, [fp]
      input_ptr = input_buf[row] + ci;
 801627e:	eb03 0e01 	add.w	lr, r3, r1
	errorptr = cquantize->fserrors[ci] + (width+1); /* => entry after last column */
 8016282:	9b05      	ldr	r3, [sp, #20]
 8016284:	f853 cb04 	ldr.w	ip, [r3], #4
 8016288:	9305      	str	r3, [sp, #20]
      if (cquantize->on_odd_row) {
 801628a:	b312      	cbz	r2, 80162d2 <quantize_fs_dither+0xce>
	input_ptr += (width-1) * nc; /* so point to rightmost pixel */
 801628c:	9b08      	ldr	r3, [sp, #32]
 801628e:	449e      	add	lr, r3
	output_ptr += width-1;
 8016290:	9b04      	ldr	r3, [sp, #16]
 8016292:	4418      	add	r0, r3
	dirnc = -nc;
 8016294:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016296:	9307      	str	r3, [sp, #28]
	errorptr = cquantize->fserrors[ci] + (width+1); /* => entry after last column */
 8016298:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801629a:	449c      	add	ip, r3
	dir = -1;
 801629c:	f04f 33ff 	mov.w	r3, #4294967295
	dir = 1;
 80162a0:	9302      	str	r3, [sp, #8]
      for (col = width; col > 0; col--) {
 80162a2:	4667      	mov	r7, ip
      colorindex_ci = cquantize->colorindex[ci];
 80162a4:	69a3      	ldr	r3, [r4, #24]
      for (col = width; col > 0; col--) {
 80162a6:	9503      	str	r5, [sp, #12]
      colorindex_ci = cquantize->colorindex[ci];
 80162a8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80162ac:	930b      	str	r3, [sp, #44]	; 0x2c
      colormap_ci = cquantize->sv_colormap[ci];
 80162ae:	6923      	ldr	r3, [r4, #16]
 80162b0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80162b4:	930c      	str	r3, [sp, #48]	; 0x30
	cur = RIGHT_SHIFT(cur + errorptr[dir] + 8, 4);
 80162b6:	9b02      	ldr	r3, [sp, #8]
 80162b8:	005b      	lsls	r3, r3, #1
 80162ba:	9301      	str	r3, [sp, #4]
      belowerr = bpreverr = 0;
 80162bc:	2300      	movs	r3, #0
      cur = 0;
 80162be:	4698      	mov	r8, r3
      belowerr = bpreverr = 0;
 80162c0:	9306      	str	r3, [sp, #24]
      for (col = width; col > 0; col--) {
 80162c2:	9a03      	ldr	r2, [sp, #12]
 80162c4:	b94a      	cbnz	r2, 80162da <quantize_fs_dither+0xd6>
      errorptr[0] = (FSERROR) bpreverr; /* unload prev err into array */
 80162c6:	9a01      	ldr	r2, [sp, #4]
    for (ci = 0; ci < nc; ci++) {
 80162c8:	3101      	adds	r1, #1
      errorptr[0] = (FSERROR) bpreverr; /* unload prev err into array */
 80162ca:	436a      	muls	r2, r5
 80162cc:	f82c 3002 	strh.w	r3, [ip, r2]
    for (ci = 0; ci < nc; ci++) {
 80162d0:	e7c5      	b.n	801625e <quantize_fs_dither+0x5a>
	dir = 1;
 80162d2:	2301      	movs	r3, #1
 80162d4:	f8cd 901c 	str.w	r9, [sp, #28]
 80162d8:	e7e2      	b.n	80162a0 <quantize_fs_dither+0x9c>
	cur = RIGHT_SHIFT(cur + errorptr[dir] + 8, 4);
 80162da:	9a01      	ldr	r2, [sp, #4]
 80162dc:	f937 a002 	ldrsh.w	sl, [r7, r2]
	cur = GETJSAMPLE(range_limit[cur]);
 80162e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	cur = RIGHT_SHIFT(cur + errorptr[dir] + 8, 4);
 80162e2:	44d0      	add	r8, sl
	cur += GETJSAMPLE(*input_ptr);
 80162e4:	f89e a000 	ldrb.w	sl, [lr]
	cur = RIGHT_SHIFT(cur + errorptr[dir] + 8, 4);
 80162e8:	f108 0808 	add.w	r8, r8, #8
	cur = GETJSAMPLE(range_limit[cur]);
 80162ec:	eb02 1828 	add.w	r8, r2, r8, asr #4
	pixcode = GETJSAMPLE(colorindex_ci[cur]);
 80162f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	cur = GETJSAMPLE(range_limit[cur]);
 80162f2:	f818 a00a 	ldrb.w	sl, [r8, sl]
	*output_ptr += (JSAMPLE) pixcode;
 80162f6:	f890 8000 	ldrb.w	r8, [r0]
	pixcode = GETJSAMPLE(colorindex_ci[cur]);
 80162fa:	f812 200a 	ldrb.w	r2, [r2, sl]
	*output_ptr += (JSAMPLE) pixcode;
 80162fe:	4490      	add	r8, r2
	pixcode = GETJSAMPLE(colorindex_ci[cur]);
 8016300:	4616      	mov	r6, r2
	cur -= GETJSAMPLE(colormap_ci[pixcode]);
 8016302:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	*output_ptr += (JSAMPLE) pixcode;
 8016304:	f880 8000 	strb.w	r8, [r0]
	cur -= GETJSAMPLE(colormap_ci[pixcode]);
 8016308:	f812 8006 	ldrb.w	r8, [r2, r6]
	input_ptr += dirnc;	/* advance input ptr to next column */
 801630c:	9a07      	ldr	r2, [sp, #28]
	cur -= GETJSAMPLE(colormap_ci[pixcode]);
 801630e:	ebaa 0a08 	sub.w	sl, sl, r8
	input_ptr += dirnc;	/* advance input ptr to next column */
 8016312:	4496      	add	lr, r2
	output_ptr += dir;	/* advance output ptr to next column */
 8016314:	9a02      	ldr	r2, [sp, #8]
	cur += delta;		/* form error * 3 */
 8016316:	eb0a 084a 	add.w	r8, sl, sl, lsl #1
	output_ptr += dir;	/* advance output ptr to next column */
 801631a:	4410      	add	r0, r2
      for (col = width; col > 0; col--) {
 801631c:	9a03      	ldr	r2, [sp, #12]
	errorptr[0] = (FSERROR) (bpreverr + cur);
 801631e:	4443      	add	r3, r8
	cur += delta;		/* form error * 5 */
 8016320:	eb08 084a 	add.w	r8, r8, sl, lsl #1
      for (col = width; col > 0; col--) {
 8016324:	3a01      	subs	r2, #1
	errorptr[0] = (FSERROR) (bpreverr + cur);
 8016326:	803b      	strh	r3, [r7, #0]
      for (col = width; col > 0; col--) {
 8016328:	9203      	str	r2, [sp, #12]
	bpreverr = belowerr + cur;
 801632a:	9b06      	ldr	r3, [sp, #24]
      for (col = width; col > 0; col--) {
 801632c:	9a01      	ldr	r2, [sp, #4]
	bpreverr = belowerr + cur;
 801632e:	4443      	add	r3, r8
	belowerr = bnexterr;
 8016330:	f8cd a018 	str.w	sl, [sp, #24]
	cur += delta;		/* form error * 7 */
 8016334:	eb08 084a 	add.w	r8, r8, sl, lsl #1
      for (col = width; col > 0; col--) {
 8016338:	4417      	add	r7, r2
 801633a:	e7c2      	b.n	80162c2 <quantize_fs_dither+0xbe>

0801633c <quantize_ord_dither>:
{
 801633c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016340:	b089      	sub	sp, #36	; 0x24
 8016342:	4689      	mov	r9, r1
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8016344:	f8d0 81e0 	ldr.w	r8, [r0, #480]	; 0x1e0
  int nc = cinfo->out_color_components;
 8016348:	1f14      	subs	r4, r2, #4
{
 801634a:	9307      	str	r3, [sp, #28]
  for (row = 0; row < num_rows; row++) {
 801634c:	2700      	movs	r7, #0
  int nc = cinfo->out_color_components;
 801634e:	6f83      	ldr	r3, [r0, #120]	; 0x78
  JDIMENSION width = cinfo->output_width;
 8016350:	f8d0 a070 	ldr.w	sl, [r0, #112]	; 0x70
  int nc = cinfo->out_color_components;
 8016354:	9301      	str	r3, [sp, #4]
  for (row = 0; row < num_rows; row++) {
 8016356:	9b07      	ldr	r3, [sp, #28]
 8016358:	429f      	cmp	r7, r3
 801635a:	db02      	blt.n	8016362 <quantize_ord_dither+0x26>
}
 801635c:	b009      	add	sp, #36	; 0x24
 801635e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    FMEMZERO((void FAR *) output_buf[row],
 8016362:	4652      	mov	r2, sl
 8016364:	2100      	movs	r1, #0
 8016366:	f854 0f04 	ldr.w	r0, [r4, #4]!
 801636a:	f013 ff53 	bl	802a214 <memset>
    row_index = cquantize->row_index;
 801636e:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
    for (ci = 0; ci < nc; ci++) {
 8016372:	f108 0c34 	add.w	ip, r8, #52	; 0x34
 8016376:	2000      	movs	r0, #0
      dither = cquantize->odither[ci][row_index];
 8016378:	019a      	lsls	r2, r3, #6
 801637a:	9203      	str	r2, [sp, #12]
    for (ci = 0; ci < nc; ci++) {
 801637c:	9a01      	ldr	r2, [sp, #4]
 801637e:	4290      	cmp	r0, r2
 8016380:	db06      	blt.n	8016390 <quantize_ord_dither+0x54>
    row_index = (row_index + 1) & ODITHER_MASK;
 8016382:	3301      	adds	r3, #1
  for (row = 0; row < num_rows; row++) {
 8016384:	3701      	adds	r7, #1
    row_index = (row_index + 1) & ODITHER_MASK;
 8016386:	f003 030f 	and.w	r3, r3, #15
    cquantize->row_index = row_index;
 801638a:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
  for (row = 0; row < num_rows; row++) {
 801638e:	e7e2      	b.n	8016356 <quantize_ord_dither+0x1a>
      colorindex_ci = cquantize->colorindex[ci];
 8016390:	f8d8 2018 	ldr.w	r2, [r8, #24]
      col_index = 0;
 8016394:	2600      	movs	r6, #0
      input_ptr = input_buf[row] + ci;
 8016396:	f859 1027 	ldr.w	r1, [r9, r7, lsl #2]
      colorindex_ci = cquantize->colorindex[ci];
 801639a:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 801639e:	6825      	ldr	r5, [r4, #0]
      input_ptr = input_buf[row] + ci;
 80163a0:	4401      	add	r1, r0
      colorindex_ci = cquantize->colorindex[ci];
 80163a2:	9205      	str	r2, [sp, #20]
      dither = cquantize->odither[ci][row_index];
 80163a4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80163a8:	9202      	str	r2, [sp, #8]
      for (col = width; col > 0; col--) {
 80163aa:	eb0a 0205 	add.w	r2, sl, r5
 80163ae:	9206      	str	r2, [sp, #24]
 80163b0:	9a06      	ldr	r2, [sp, #24]
 80163b2:	4295      	cmp	r5, r2
 80163b4:	d101      	bne.n	80163ba <quantize_ord_dither+0x7e>
    for (ci = 0; ci < nc; ci++) {
 80163b6:	3001      	adds	r0, #1
 80163b8:	e7e0      	b.n	801637c <quantize_ord_dither+0x40>
	*output_ptr += colorindex_ci[GETJSAMPLE(*input_ptr)+dither[col_index]];
 80163ba:	782a      	ldrb	r2, [r5, #0]
 80163bc:	f891 e000 	ldrb.w	lr, [r1]
 80163c0:	9204      	str	r2, [sp, #16]
 80163c2:	9a02      	ldr	r2, [sp, #8]
 80163c4:	eb02 0b86 	add.w	fp, r2, r6, lsl #2
 80163c8:	9a03      	ldr	r2, [sp, #12]
	col_index = (col_index + 1) & ODITHER_MASK;
 80163ca:	3601      	adds	r6, #1
	*output_ptr += colorindex_ci[GETJSAMPLE(*input_ptr)+dither[col_index]];
 80163cc:	f85b b002 	ldr.w	fp, [fp, r2]
 80163d0:	9a05      	ldr	r2, [sp, #20]
	col_index = (col_index + 1) & ODITHER_MASK;
 80163d2:	f006 060f 	and.w	r6, r6, #15
	*output_ptr += colorindex_ci[GETJSAMPLE(*input_ptr)+dither[col_index]];
 80163d6:	4496      	add	lr, r2
 80163d8:	9a04      	ldr	r2, [sp, #16]
 80163da:	f81e e00b 	ldrb.w	lr, [lr, fp]
 80163de:	4472      	add	r2, lr
 80163e0:	f805 2b01 	strb.w	r2, [r5], #1
	input_ptr += nc;
 80163e4:	9a01      	ldr	r2, [sp, #4]
 80163e6:	4411      	add	r1, r2
      for (col = width; col > 0; col--) {
 80163e8:	e7e2      	b.n	80163b0 <quantize_ord_dither+0x74>
	...

080163ec <jinit_1pass_quantizer>:
jinit_1pass_quantizer (j_decompress_ptr cinfo)
{
  my_cquantize_ptr cquantize;

  cquantize = (my_cquantize_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80163ec:	6843      	ldr	r3, [r0, #4]
 80163ee:	2258      	movs	r2, #88	; 0x58
 80163f0:	2101      	movs	r1, #1
 80163f2:	681b      	ldr	r3, [r3, #0]
{
 80163f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80163f8:	b085      	sub	sp, #20
 80163fa:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80163fc:	4798      	blx	r3
				SIZEOF(my_cquantizer));
  cinfo->cquantize = (struct jpeg_color_quantizer *) cquantize;
  cquantize->pub.start_pass = start_pass_1_quant;
 80163fe:	4b67      	ldr	r3, [pc, #412]	; (801659c <jinit_1pass_quantizer+0x1b0>)
  cinfo->cquantize = (struct jpeg_color_quantizer *) cquantize;
 8016400:	f8c4 01e0 	str.w	r0, [r4, #480]	; 0x1e0
  cquantize->pub.start_pass = start_pass_1_quant;
 8016404:	6003      	str	r3, [r0, #0]
  cquantize->pub.finish_pass = finish_pass_1_quant;
 8016406:	4b66      	ldr	r3, [pc, #408]	; (80165a0 <jinit_1pass_quantizer+0x1b4>)
 8016408:	6083      	str	r3, [r0, #8]
  cquantize->pub.new_color_map = new_color_map_1_quant;
 801640a:	4b66      	ldr	r3, [pc, #408]	; (80165a4 <jinit_1pass_quantizer+0x1b8>)
 801640c:	60c3      	str	r3, [r0, #12]
  cquantize->fserrors[0] = NULL; /* Flag FS workspace not allocated */
 801640e:	2300      	movs	r3, #0
 8016410:	6443      	str	r3, [r0, #68]	; 0x44
  cquantize->odither[0] = NULL;	/* Also flag odither arrays not allocated */
 8016412:	6343      	str	r3, [r0, #52]	; 0x34

  /* Make sure my internal arrays won't overflow */
  if (cinfo->out_color_components > MAX_Q_COMPS)
 8016414:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8016416:	2b04      	cmp	r3, #4
 8016418:	dd07      	ble.n	801642a <jinit_1pass_quantizer+0x3e>
    ERREXIT1(cinfo, JERR_QUANT_COMPONENTS, MAX_Q_COMPS);
 801641a:	6823      	ldr	r3, [r4, #0]
 801641c:	2039      	movs	r0, #57	; 0x39
 801641e:	2204      	movs	r2, #4
 8016420:	e9c3 0205 	strd	r0, r2, [r3, #20]
 8016424:	681b      	ldr	r3, [r3, #0]
 8016426:	4620      	mov	r0, r4
 8016428:	4798      	blx	r3
  /* Make sure colormap indexes can be represented by JSAMPLEs */
  if (cinfo->desired_number_of_colors > (MAXJSAMPLE+1))
 801642a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 801642c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016430:	dd08      	ble.n	8016444 <jinit_1pass_quantizer+0x58>
    ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXJSAMPLE+1);
 8016432:	6823      	ldr	r3, [r4, #0]
 8016434:	213b      	movs	r1, #59	; 0x3b
 8016436:	f44f 7280 	mov.w	r2, #256	; 0x100
 801643a:	4620      	mov	r0, r4
 801643c:	e9c3 1205 	strd	r1, r2, [r3, #20]
 8016440:	681b      	ldr	r3, [r3, #0]
 8016442:	4798      	blx	r3
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8016444:	f8d4 61e0 	ldr.w	r6, [r4, #480]	; 0x1e0
  iroot = 1;
 8016448:	2301      	movs	r3, #1
  int nc = cinfo->out_color_components; /* number of color components */
 801644a:	f8d4 8078 	ldr.w	r8, [r4, #120]	; 0x78
  total_colors = select_ncolors(cinfo, cquantize->Ncolors);
 801644e:	f106 0720 	add.w	r7, r6, #32
  int max_colors = cinfo->desired_number_of_colors;
 8016452:	f8d4 9060 	ldr.w	r9, [r4, #96]	; 0x60
    iroot++;
 8016456:	469a      	mov	sl, r3
 8016458:	3301      	adds	r3, #1
    for (i = 1; i < nc; i++)
 801645a:	2101      	movs	r1, #1
    temp = iroot;		/* set temp = iroot ** nc */
 801645c:	461a      	mov	r2, r3
    for (i = 1; i < nc; i++)
 801645e:	4588      	cmp	r8, r1
 8016460:	dc47      	bgt.n	80164f2 <jinit_1pass_quantizer+0x106>
  } while (temp <= (long) max_colors); /* repeat till iroot exceeds root */
 8016462:	4591      	cmp	r9, r2
 8016464:	daf7      	bge.n	8016456 <jinit_1pass_quantizer+0x6a>
  if (iroot < 2)
 8016466:	f1ba 0f01 	cmp.w	sl, #1
 801646a:	d106      	bne.n	801647a <jinit_1pass_quantizer+0x8e>
    ERREXIT1(cinfo, JERR_QUANT_FEW_COLORS, (int) temp);
 801646c:	6823      	ldr	r3, [r4, #0]
 801646e:	213a      	movs	r1, #58	; 0x3a
 8016470:	4620      	mov	r0, r4
 8016472:	e9c3 1205 	strd	r1, r2, [r3, #20]
 8016476:	681b      	ldr	r3, [r3, #0]
 8016478:	4798      	blx	r3
    for (i = 1; i < nc; i++)
 801647a:	463a      	mov	r2, r7
 801647c:	2300      	movs	r3, #0
 801647e:	2501      	movs	r5, #1
 8016480:	9701      	str	r7, [sp, #4]
  for (i = 0; i < nc; i++) {
 8016482:	4598      	cmp	r8, r3
 8016484:	dc38      	bgt.n	80164f8 <jinit_1pass_quantizer+0x10c>
      j = (cinfo->out_color_space == JCS_RGB ? RGB_order[i] : i);
 8016486:	f8df c120 	ldr.w	ip, [pc, #288]	; 80165a8 <jinit_1pass_quantizer+0x1bc>
    changed = FALSE;
 801648a:	2100      	movs	r1, #0
    for (i = 0; i < nc; i++) {
 801648c:	460b      	mov	r3, r1
 801648e:	4598      	cmp	r8, r3
 8016490:	dc38      	bgt.n	8016504 <jinit_1pass_quantizer+0x118>
  } while (changed);
 8016492:	2900      	cmp	r1, #0
 8016494:	d1f9      	bne.n	801648a <jinit_1pass_quantizer+0x9e>
  if (cinfo->out_color_components == 3)
 8016496:	6fa1      	ldr	r1, [r4, #120]	; 0x78
    TRACEMS4(cinfo, 1, JTRC_QUANT_3_NCOLORS,
 8016498:	6823      	ldr	r3, [r4, #0]
  if (cinfo->out_color_components == 3)
 801649a:	2903      	cmp	r1, #3
    TRACEMS4(cinfo, 1, JTRC_QUANT_3_NCOLORS,
 801649c:	685a      	ldr	r2, [r3, #4]
  if (cinfo->out_color_components == 3)
 801649e:	d148      	bne.n	8016532 <jinit_1pass_quantizer+0x146>
    TRACEMS4(cinfo, 1, JTRC_QUANT_3_NCOLORS,
 80164a0:	619d      	str	r5, [r3, #24]
 80164a2:	6a31      	ldr	r1, [r6, #32]
 80164a4:	61d9      	str	r1, [r3, #28]
 80164a6:	6a71      	ldr	r1, [r6, #36]	; 0x24
 80164a8:	6219      	str	r1, [r3, #32]
 80164aa:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 80164ac:	6259      	str	r1, [r3, #36]	; 0x24
 80164ae:	2160      	movs	r1, #96	; 0x60
 80164b0:	6159      	str	r1, [r3, #20]
    TRACEMS1(cinfo, 1, JTRC_QUANT_NCOLORS, total_colors);
 80164b2:	2101      	movs	r1, #1
 80164b4:	4620      	mov	r0, r4
 80164b6:	4790      	blx	r2
  colormap = (*cinfo->mem->alloc_sarray)
 80164b8:	6863      	ldr	r3, [r4, #4]
 80164ba:	462a      	mov	r2, r5
 80164bc:	2101      	movs	r1, #1
 80164be:	689f      	ldr	r7, [r3, #8]
 80164c0:	4620      	mov	r0, r4
 80164c2:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80164c4:	47b8      	blx	r7
  for (i = 0; i < cinfo->out_color_components; i++) {
 80164c6:	46ae      	mov	lr, r5
 80164c8:	2200      	movs	r2, #0
  colormap = (*cinfo->mem->alloc_sarray)
 80164ca:	9002      	str	r0, [sp, #8]
  for (i = 0; i < cinfo->out_color_components; i++) {
 80164cc:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80164ce:	429a      	cmp	r2, r3
 80164d0:	db33      	blt.n	801653a <jinit_1pass_quantizer+0x14e>
  cquantize->sv_colormap = colormap;
 80164d2:	9b02      	ldr	r3, [sp, #8]

  /* Create the colormap and color index table. */
  create_colormap(cinfo);
  create_colorindex(cinfo);
 80164d4:	4620      	mov	r0, r4
  cquantize->sv_actual = total_colors;
 80164d6:	e9c6 3504 	strd	r3, r5, [r6, #16]
  create_colorindex(cinfo);
 80164da:	f7ff fccb 	bl	8015e74 <create_colorindex>
   * We do this now since it is FAR storage and may affect the memory
   * manager's space calculations.  If the user changes to FS dither
   * mode in a later pass, we will allocate the space then, and will
   * possibly overrun the max_memory_to_use setting.
   */
  if (cinfo->dither_mode == JDITHER_FS)
 80164de:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 80164e2:	2b02      	cmp	r3, #2
 80164e4:	d156      	bne.n	8016594 <jinit_1pass_quantizer+0x1a8>
    alloc_fs_workspace(cinfo);
 80164e6:	4620      	mov	r0, r4
}
 80164e8:	b005      	add	sp, #20
 80164ea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    alloc_fs_workspace(cinfo);
 80164ee:	f7ff bdd0 	b.w	8016092 <alloc_fs_workspace>
      temp *= iroot;
 80164f2:	435a      	muls	r2, r3
    for (i = 1; i < nc; i++)
 80164f4:	3101      	adds	r1, #1
 80164f6:	e7b2      	b.n	801645e <jinit_1pass_quantizer+0x72>
    total_colors *= iroot;
 80164f8:	fb0a f505 	mul.w	r5, sl, r5
  for (i = 0; i < nc; i++) {
 80164fc:	3301      	adds	r3, #1
    Ncolors[i] = iroot;
 80164fe:	f842 ab04 	str.w	sl, [r2], #4
  for (i = 0; i < nc; i++) {
 8016502:	e7be      	b.n	8016482 <jinit_1pass_quantizer+0x96>
      j = (cinfo->out_color_space == JCS_RGB ? RGB_order[i] : i);
 8016504:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
 8016508:	2a02      	cmp	r2, #2
 801650a:	bf0c      	ite	eq
 801650c:	f85c 0023 	ldreq.w	r0, [ip, r3, lsl #2]
 8016510:	4618      	movne	r0, r3
      temp = total_colors / Ncolors[j];
 8016512:	f857 a020 	ldr.w	sl, [r7, r0, lsl #2]
 8016516:	fb95 f2fa 	sdiv	r2, r5, sl
      temp *= Ncolors[j]+1;	/* done in long arith to avoid oflo */
 801651a:	fb0a 2202 	mla	r2, sl, r2, r2
 801651e:	f10a 0e01 	add.w	lr, sl, #1
      if (temp > (long) max_colors)
 8016522:	4591      	cmp	r9, r2
 8016524:	dbb5      	blt.n	8016492 <jinit_1pass_quantizer+0xa6>
    for (i = 0; i < nc; i++) {
 8016526:	3301      	adds	r3, #1
 8016528:	4615      	mov	r5, r2
      changed = TRUE;
 801652a:	2101      	movs	r1, #1
      Ncolors[j]++;		/* OK, apply the increment */
 801652c:	f847 e020 	str.w	lr, [r7, r0, lsl #2]
    for (i = 0; i < nc; i++) {
 8016530:	e7ad      	b.n	801648e <jinit_1pass_quantizer+0xa2>
    TRACEMS1(cinfo, 1, JTRC_QUANT_NCOLORS, total_colors);
 8016532:	2161      	movs	r1, #97	; 0x61
 8016534:	e9c3 1505 	strd	r1, r5, [r3, #20]
 8016538:	e7bb      	b.n	80164b2 <jinit_1pass_quantizer+0xc6>
    nci = cquantize->Ncolors[i]; /* # of distinct values for this color */
 801653a:	9b01      	ldr	r3, [sp, #4]
 801653c:	f853 9b04 	ldr.w	r9, [r3], #4
      val = output_value(cinfo, i, j, nci-1);
 8016540:	f109 3bff 	add.w	fp, r9, #4294967295
    nci = cquantize->Ncolors[i]; /* # of distinct values for this color */
 8016544:	9301      	str	r3, [sp, #4]
  return (int) (((INT32) j * MAXJSAMPLE + maxj/2) / maxj);
 8016546:	ea4f 036b 	mov.w	r3, fp, asr #1
    blksize = blkdist / nci;
 801654a:	fb9e f8f9 	sdiv	r8, lr, r9
  return (int) (((INT32) j * MAXJSAMPLE + maxj/2) / maxj);
 801654e:	9303      	str	r3, [sp, #12]
    for (j = 0; j < nci; j++) {
 8016550:	2300      	movs	r3, #0
 8016552:	469a      	mov	sl, r3
 8016554:	4599      	cmp	r9, r3
 8016556:	dc02      	bgt.n	801655e <jinit_1pass_quantizer+0x172>
  for (i = 0; i < cinfo->out_color_components; i++) {
 8016558:	3201      	adds	r2, #1
    blkdist = blksize;		/* blksize of this color is blkdist of next */
 801655a:	46c6      	mov	lr, r8
 801655c:	e7b6      	b.n	80164cc <jinit_1pass_quantizer+0xe0>
  return (int) (((INT32) j * MAXJSAMPLE + maxj/2) / maxj);
 801655e:	ebc3 2103 	rsb	r1, r3, r3, lsl #8
 8016562:	9f03      	ldr	r7, [sp, #12]
 8016564:	4439      	add	r1, r7
 8016566:	fb91 f1fb 	sdiv	r1, r1, fp
 801656a:	4608      	mov	r0, r1
      for (ptr = j * blksize; ptr < total_colors; ptr += blkdist) {
 801656c:	4651      	mov	r1, sl
 801656e:	42a9      	cmp	r1, r5
 8016570:	db0d      	blt.n	801658e <jinit_1pass_quantizer+0x1a2>
    for (j = 0; j < nci; j++) {
 8016572:	3301      	adds	r3, #1
 8016574:	44c2      	add	sl, r8
 8016576:	e7ed      	b.n	8016554 <jinit_1pass_quantizer+0x168>
	  colormap[i][ptr+k] = (JSAMPLE) val;
 8016578:	9f02      	ldr	r7, [sp, #8]
 801657a:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 801657e:	4467      	add	r7, ip
	for (k = 0; k < blksize; k++)
 8016580:	f10c 0c01 	add.w	ip, ip, #1
	  colormap[i][ptr+k] = (JSAMPLE) val;
 8016584:	5478      	strb	r0, [r7, r1]
	for (k = 0; k < blksize; k++)
 8016586:	45e0      	cmp	r8, ip
 8016588:	dcf6      	bgt.n	8016578 <jinit_1pass_quantizer+0x18c>
      for (ptr = j * blksize; ptr < total_colors; ptr += blkdist) {
 801658a:	4471      	add	r1, lr
 801658c:	e7ef      	b.n	801656e <jinit_1pass_quantizer+0x182>
	for (k = 0; k < blksize; k++)
 801658e:	f04f 0c00 	mov.w	ip, #0
 8016592:	e7f8      	b.n	8016586 <jinit_1pass_quantizer+0x19a>
}
 8016594:	b005      	add	sp, #20
 8016596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801659a:	bf00      	nop
 801659c:	080160cd 	.word	0x080160cd
 80165a0:	080160c1 	.word	0x080160c1
 80165a4:	080160c3 	.word	0x080160c3
 80165a8:	0802f43c 	.word	0x0802f43c

080165ac <prescan_quantize>:
		  JSAMPARRAY output_buf, int num_rows)
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  register JSAMPROW ptr;
  register histptr histp;
  register hist3d histogram = cquantize->histogram;
 80165ac:	f8d0 21e0 	ldr.w	r2, [r0, #480]	; 0x1e0
{
 80165b0:	b5f0      	push	{r4, r5, r6, r7, lr}
  register hist3d histogram = cquantize->histogram;
 80165b2:	f8d2 c018 	ldr.w	ip, [r2, #24]
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;

  for (row = 0; row < num_rows; row++) {
 80165b6:	2400      	movs	r4, #0
  JDIMENSION width = cinfo->output_width;
 80165b8:	f8d0 e070 	ldr.w	lr, [r0, #112]	; 0x70
  for (row = 0; row < num_rows; row++) {
 80165bc:	429c      	cmp	r4, r3
 80165be:	db00      	blt.n	80165c2 <prescan_quantize+0x16>
      if (++(*histp) <= 0)
	(*histp)--;
      ptr += 3;
    }
  }
}
 80165c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (col = width; col > 0; col--) {
 80165c2:	f851 2024 	ldr.w	r2, [r1, r4, lsl #2]
 80165c6:	4677      	mov	r7, lr
 80165c8:	3203      	adds	r2, #3
 80165ca:	b90f      	cbnz	r7, 80165d0 <prescan_quantize+0x24>
  for (row = 0; row < num_rows; row++) {
 80165cc:	3401      	adds	r4, #1
 80165ce:	e7f5      	b.n	80165bc <prescan_quantize+0x10>
      histp = & histogram[GETJSAMPLE(ptr[0]) >> C0_SHIFT]
 80165d0:	f812 6c03 	ldrb.w	r6, [r2, #-3]
			 [GETJSAMPLE(ptr[1]) >> C1_SHIFT]
 80165d4:	f812 5c02 	ldrb.w	r5, [r2, #-2]
      histp = & histogram[GETJSAMPLE(ptr[0]) >> C0_SHIFT]
 80165d8:	08f6      	lsrs	r6, r6, #3
			 [GETJSAMPLE(ptr[1]) >> C1_SHIFT]
 80165da:	08a8      	lsrs	r0, r5, #2
 80165dc:	f85c 5026 	ldr.w	r5, [ip, r6, lsl #2]
			 [GETJSAMPLE(ptr[2]) >> C2_SHIFT];
 80165e0:	f812 6c01 	ldrb.w	r6, [r2, #-1]
			 [GETJSAMPLE(ptr[1]) >> C1_SHIFT]
 80165e4:	eb05 1580 	add.w	r5, r5, r0, lsl #6
			 [GETJSAMPLE(ptr[2]) >> C2_SHIFT];
 80165e8:	08f6      	lsrs	r6, r6, #3
      if (++(*histp) <= 0)
 80165ea:	f835 0016 	ldrh.w	r0, [r5, r6, lsl #1]
 80165ee:	3001      	adds	r0, #1
 80165f0:	b280      	uxth	r0, r0
 80165f2:	b108      	cbz	r0, 80165f8 <prescan_quantize+0x4c>
 80165f4:	f825 0016 	strh.w	r0, [r5, r6, lsl #1]
    for (col = width; col > 0; col--) {
 80165f8:	3f01      	subs	r7, #1
 80165fa:	3203      	adds	r2, #3
 80165fc:	e7e5      	b.n	80165ca <prescan_quantize+0x1e>

080165fe <fill_inverse_cmap>:
LOCAL(void)
fill_inverse_cmap (j_decompress_ptr cinfo, int c0, int c1, int c2)
/* Fill the inverse-colormap entries in the update box that contains */
/* histogram cell c0/c1/c2.  (Only that one cell MUST be filled, but */
/* we can fill as many others as we wish.) */
{
 80165fe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016602:	f2ad 5dc4 	subw	sp, sp, #1476	; 0x5c4
  minmaxdist = 0x7FFFFFFFL;
 8016606:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
  for (i = 0; i < numcolors; i++) {
 801660a:	2500      	movs	r5, #0
{
 801660c:	930a      	str	r3, [sp, #40]	; 0x28
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  hist3d histogram = cquantize->histogram;
 801660e:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
{
 8016612:	9000      	str	r0, [sp, #0]
  /* This array holds the actually closest colormap index for each cell. */
  JSAMPLE bestcolor[BOX_C0_ELEMS * BOX_C1_ELEMS * BOX_C2_ELEMS];

  /* Convert cell coordinates to update box ID */
  c0 >>= BOX_C0_LOG;
  c1 >>= BOX_C1_LOG;
 8016614:	10d0      	asrs	r0, r2, #3
  hist3d histogram = cquantize->histogram;
 8016616:	699b      	ldr	r3, [r3, #24]
  /* Compute true coordinates of update box's origin corner.
   * Actually we compute the coordinates of the center of the corner
   * histogram cell, which are the lower bounds of the volume we care about.
   */
  minc0 = (c0 << BOX_C0_SHIFT) + ((1 << C0_SHIFT) >> 1);
  minc1 = (c1 << BOX_C1_SHIFT) + ((1 << C1_SHIFT) >> 1);
 8016618:	0140      	lsls	r0, r0, #5
  hist3d histogram = cquantize->histogram;
 801661a:	9305      	str	r3, [sp, #20]
  c2 >>= BOX_C2_LOG;
 801661c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  minc1 = (c1 << BOX_C1_SHIFT) + ((1 << C1_SHIFT) >> 1);
 801661e:	f100 0a02 	add.w	sl, r0, #2
  maxc1 = minc1 + ((1 << BOX_C1_SHIFT) - (1 << C1_SHIFT));
 8016622:	301e      	adds	r0, #30
  c2 >>= BOX_C2_LOG;
 8016624:	109c      	asrs	r4, r3, #2
  int numcolors = cinfo->actual_number_of_colors;
 8016626:	9b00      	ldr	r3, [sp, #0]
  centerc1 = (minc1 + maxc1) >> 1;
 8016628:	eb0a 0b00 	add.w	fp, sl, r0
  int numcolors = cinfo->actual_number_of_colors;
 801662c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
  minc2 = (c2 << BOX_C2_SHIFT) + ((1 << C2_SHIFT) >> 1);
 8016630:	0164      	lsls	r4, r4, #5
  centerc1 = (minc1 + maxc1) >> 1;
 8016632:	ea4f 0b6b 	mov.w	fp, fp, asr #1
  int numcolors = cinfo->actual_number_of_colors;
 8016636:	9301      	str	r3, [sp, #4]
  minc2 = (c2 << BOX_C2_SHIFT) + ((1 << C2_SHIFT) >> 1);
 8016638:	f104 0804 	add.w	r8, r4, #4
  maxc2 = minc2 + ((1 << BOX_C2_SHIFT) - (1 << C2_SHIFT));
 801663c:	341c      	adds	r4, #28
{
 801663e:	e9cd 1208 	strd	r1, r2, [sp, #32]
  c0 >>= BOX_C0_LOG;
 8016642:	1089      	asrs	r1, r1, #2
  minc0 = (c0 << BOX_C0_SHIFT) + ((1 << C0_SHIFT) >> 1);
 8016644:	0149      	lsls	r1, r1, #5
 8016646:	f101 0904 	add.w	r9, r1, #4
  maxc0 = minc0 + ((1 << BOX_C0_SHIFT) - (1 << C0_SHIFT));
 801664a:	311c      	adds	r1, #28
  centerc0 = (minc0 + maxc0) >> 1;
 801664c:	eb09 0301 	add.w	r3, r9, r1
 8016650:	105b      	asrs	r3, r3, #1
 8016652:	9302      	str	r3, [sp, #8]
  centerc2 = (minc2 + maxc2) >> 1;
 8016654:	eb08 0304 	add.w	r3, r8, r4
 8016658:	105b      	asrs	r3, r3, #1
 801665a:	9303      	str	r3, [sp, #12]
  for (i = 0; i < numcolors; i++) {
 801665c:	9b01      	ldr	r3, [sp, #4]
 801665e:	42ab      	cmp	r3, r5
 8016660:	dc43      	bgt.n	80166ea <fill_inverse_cmap+0xec>
  ncolors = 0;
 8016662:	2200      	movs	r2, #0
 8016664:	a970      	add	r1, sp, #448	; 0x1c0
      colorlist[ncolors++] = (JSAMPLE) i;
 8016666:	a830      	add	r0, sp, #192	; 0xc0
  for (i = 0; i < numcolors; i++) {
 8016668:	4613      	mov	r3, r2
 801666a:	9c01      	ldr	r4, [sp, #4]
 801666c:	429c      	cmp	r4, r3
 801666e:	f300 809c 	bgt.w	80167aa <fill_inverse_cmap+0x1ac>
  for (i = BOX_C0_ELEMS*BOX_C1_ELEMS*BOX_C2_ELEMS-1; i >= 0; i--)
 8016672:	2380      	movs	r3, #128	; 0x80
  bptr = bestdist;
 8016674:	a970      	add	r1, sp, #448	; 0x1c0
    *bptr++ = 0x7FFFFFFFL;
 8016676:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
  for (i = BOX_C0_ELEMS*BOX_C1_ELEMS*BOX_C2_ELEMS-1; i >= 0; i--)
 801667a:	3b01      	subs	r3, #1
    *bptr++ = 0x7FFFFFFFL;
 801667c:	f841 0b04 	str.w	r0, [r1], #4
  for (i = BOX_C0_ELEMS*BOX_C1_ELEMS*BOX_C2_ELEMS-1; i >= 0; i--)
 8016680:	d1fb      	bne.n	801667a <fill_inverse_cmap+0x7c>
 8016682:	a930      	add	r1, sp, #192	; 0xc0
  for (i = 0; i < numcolors; i++) {
 8016684:	469b      	mov	fp, r3
 8016686:	9107      	str	r1, [sp, #28]
 8016688:	4593      	cmp	fp, r2
 801668a:	f040 8096 	bne.w	80167ba <fill_inverse_cmap+0x1bc>
		   bestcolor);

  /* Save the best color numbers (plus 1) in the main cache array */
  c0 <<= BOX_C0_LOG;		/* convert ID back to base cell indexes */
  c1 <<= BOX_C1_LOG;
  c2 <<= BOX_C2_LOG;
 801668e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  cptr = bestcolor;
 8016690:	aa10      	add	r2, sp, #64	; 0x40
  c2 <<= BOX_C2_LOG;
 8016692:	f023 0003 	bic.w	r0, r3, #3
  c0 <<= BOX_C0_LOG;		/* convert ID back to base cell indexes */
 8016696:	9b08      	ldr	r3, [sp, #32]
 8016698:	f023 0103 	bic.w	r1, r3, #3
 801669c:	9b05      	ldr	r3, [sp, #20]
 801669e:	eb03 0581 	add.w	r5, r3, r1, lsl #2
  c1 <<= BOX_C1_LOG;
 80166a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80166a4:	f023 0307 	bic.w	r3, r3, #7
 80166a8:	4629      	mov	r1, r5
 80166aa:	019b      	lsls	r3, r3, #6
 80166ac:	3110      	adds	r1, #16
 80166ae:	eb03 0340 	add.w	r3, r3, r0, lsl #1
  for (ic0 = 0; ic0 < BOX_C0_ELEMS; ic0++) {
    for (ic1 = 0; ic1 < BOX_C1_ELEMS; ic1++) {
      cachep = & histogram[c0+ic0][c1+ic1][c2];
 80166b2:	f855 4b04 	ldr.w	r4, [r5], #4
 80166b6:	4610      	mov	r0, r2
    for (ic1 = 0; ic1 < BOX_C1_ELEMS; ic1++) {
 80166b8:	f102 0720 	add.w	r7, r2, #32
 80166bc:	441c      	add	r4, r3
      cachep = & histogram[c0+ic0][c1+ic1][c2];
 80166be:	4626      	mov	r6, r4
 80166c0:	4602      	mov	r2, r0
      for (ic2 = 0; ic2 < BOX_C2_ELEMS; ic2++) {
 80166c2:	f100 0c04 	add.w	ip, r0, #4
	*cachep++ = (histcell) (GETJSAMPLE(*cptr++) + 1);
 80166c6:	f812 0b01 	ldrb.w	r0, [r2], #1
 80166ca:	3001      	adds	r0, #1
      for (ic2 = 0; ic2 < BOX_C2_ELEMS; ic2++) {
 80166cc:	4562      	cmp	r2, ip
	*cachep++ = (histcell) (GETJSAMPLE(*cptr++) + 1);
 80166ce:	f826 0b02 	strh.w	r0, [r6], #2
      for (ic2 = 0; ic2 < BOX_C2_ELEMS; ic2++) {
 80166d2:	d1f8      	bne.n	80166c6 <fill_inverse_cmap+0xc8>
    for (ic1 = 0; ic1 < BOX_C1_ELEMS; ic1++) {
 80166d4:	42ba      	cmp	r2, r7
	*cachep++ = (histcell) (GETJSAMPLE(*cptr++) + 1);
 80166d6:	4610      	mov	r0, r2
    for (ic1 = 0; ic1 < BOX_C1_ELEMS; ic1++) {
 80166d8:	f104 0440 	add.w	r4, r4, #64	; 0x40
 80166dc:	d1ef      	bne.n	80166be <fill_inverse_cmap+0xc0>
  for (ic0 = 0; ic0 < BOX_C0_ELEMS; ic0++) {
 80166de:	428d      	cmp	r5, r1
 80166e0:	d1e7      	bne.n	80166b2 <fill_inverse_cmap+0xb4>
      }
    }
  }
}
 80166e2:	f20d 5dc4 	addw	sp, sp, #1476	; 0x5c4
 80166e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    x = GETJSAMPLE(cinfo->colormap[0][i]);
 80166ea:	9b00      	ldr	r3, [sp, #0]
 80166ec:	f8d3 7088 	ldr.w	r7, [r3, #136]	; 0x88
 80166f0:	683b      	ldr	r3, [r7, #0]
 80166f2:	5d5a      	ldrb	r2, [r3, r5]
    if (x < minc0) {
 80166f4:	4591      	cmp	r9, r2
 80166f6:	dd2a      	ble.n	801674e <fill_inverse_cmap+0x150>
      tdist = (x - minc0) * C0_SCALE;
 80166f8:	eba2 0c09 	sub.w	ip, r2, r9
      tdist = (x - maxc0) * C0_SCALE;
 80166fc:	1a52      	subs	r2, r2, r1
      min_dist = tdist*tdist;
 80166fe:	fb0c fc0c 	mul.w	ip, ip, ip
      max_dist = tdist*tdist;
 8016702:	4352      	muls	r2, r2
    x = GETJSAMPLE(cinfo->colormap[1][i]);
 8016704:	687b      	ldr	r3, [r7, #4]
 8016706:	5d5b      	ldrb	r3, [r3, r5]
    if (x < minc1) {
 8016708:	459a      	cmp	sl, r3
 801670a:	dd33      	ble.n	8016774 <fill_inverse_cmap+0x176>
      tdist = (x - minc1) * C1_SCALE;
 801670c:	eba3 0e0a 	sub.w	lr, r3, sl
 8016710:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
      min_dist += tdist*tdist;
 8016714:	fb0e cc0e 	mla	ip, lr, lr, ip
	tdist = (x - maxc1) * C1_SCALE;
 8016718:	1a1b      	subs	r3, r3, r0
	tdist = (x - minc1) * C1_SCALE;
 801671a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	max_dist += tdist*tdist;
 801671e:	fb03 2203 	mla	r2, r3, r3, r2
    x = GETJSAMPLE(cinfo->colormap[2][i]);
 8016722:	68bb      	ldr	r3, [r7, #8]
 8016724:	5d5b      	ldrb	r3, [r3, r5]
    if (x < minc2) {
 8016726:	4598      	cmp	r8, r3
 8016728:	dd32      	ble.n	8016790 <fill_inverse_cmap+0x192>
      tdist = (x - minc2) * C2_SCALE;
 801672a:	eba3 0708 	sub.w	r7, r3, r8
 801672e:	007f      	lsls	r7, r7, #1
      min_dist += tdist*tdist;
 8016730:	fb07 cc07 	mla	ip, r7, r7, ip
	tdist = (x - maxc2) * C2_SCALE;
 8016734:	1b1b      	subs	r3, r3, r4
	tdist = (x - minc2) * C2_SCALE;
 8016736:	005b      	lsls	r3, r3, #1
	max_dist += tdist*tdist;
 8016738:	fb03 2303 	mla	r3, r3, r3, r2
    mindist[i] = min_dist;	/* save away the results */
 801673c:	aa70      	add	r2, sp, #448	; 0x1c0
 801673e:	429e      	cmp	r6, r3
 8016740:	f842 c025 	str.w	ip, [r2, r5, lsl #2]
  for (i = 0; i < numcolors; i++) {
 8016744:	f105 0501 	add.w	r5, r5, #1
 8016748:	bfa8      	it	ge
 801674a:	461e      	movge	r6, r3
 801674c:	e786      	b.n	801665c <fill_inverse_cmap+0x5e>
    } else if (x > maxc0) {
 801674e:	4291      	cmp	r1, r2
 8016750:	da06      	bge.n	8016760 <fill_inverse_cmap+0x162>
      tdist = (x - maxc0) * C0_SCALE;
 8016752:	eba2 0c01 	sub.w	ip, r2, r1
      tdist = (x - minc0) * C0_SCALE;
 8016756:	eba2 0209 	sub.w	r2, r2, r9
      min_dist = tdist*tdist;
 801675a:	fb0c fc0c 	mul.w	ip, ip, ip
      tdist = (x - minc0) * C0_SCALE;
 801675e:	e7d0      	b.n	8016702 <fill_inverse_cmap+0x104>
      if (x <= centerc0) {
 8016760:	9b02      	ldr	r3, [sp, #8]
      min_dist = 0;
 8016762:	f04f 0c00 	mov.w	ip, #0
      if (x <= centerc0) {
 8016766:	4293      	cmp	r3, r2
	tdist = (x - maxc0) * C0_SCALE;
 8016768:	bfac      	ite	ge
 801676a:	1a52      	subge	r2, r2, r1
	tdist = (x - minc0) * C0_SCALE;
 801676c:	eba2 0209 	sublt.w	r2, r2, r9
	max_dist = tdist*tdist;
 8016770:	4352      	muls	r2, r2
 8016772:	e7c7      	b.n	8016704 <fill_inverse_cmap+0x106>
    } else if (x > maxc1) {
 8016774:	4298      	cmp	r0, r3
 8016776:	da08      	bge.n	801678a <fill_inverse_cmap+0x18c>
      tdist = (x - maxc1) * C1_SCALE;
 8016778:	eba3 0e00 	sub.w	lr, r3, r0
 801677c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
      min_dist += tdist*tdist;
 8016780:	fb0e cc0e 	mla	ip, lr, lr, ip
	tdist = (x - minc1) * C1_SCALE;
 8016784:	eba3 030a 	sub.w	r3, r3, sl
 8016788:	e7c7      	b.n	801671a <fill_inverse_cmap+0x11c>
      if (x <= centerc1) {
 801678a:	459b      	cmp	fp, r3
 801678c:	dbfa      	blt.n	8016784 <fill_inverse_cmap+0x186>
 801678e:	e7c3      	b.n	8016718 <fill_inverse_cmap+0x11a>
    } else if (x > maxc2) {
 8016790:	429c      	cmp	r4, r3
 8016792:	da06      	bge.n	80167a2 <fill_inverse_cmap+0x1a4>
      tdist = (x - maxc2) * C2_SCALE;
 8016794:	1b1f      	subs	r7, r3, r4
 8016796:	007f      	lsls	r7, r7, #1
      min_dist += tdist*tdist;
 8016798:	fb07 cc07 	mla	ip, r7, r7, ip
	tdist = (x - minc2) * C2_SCALE;
 801679c:	eba3 0308 	sub.w	r3, r3, r8
 80167a0:	e7c9      	b.n	8016736 <fill_inverse_cmap+0x138>
      if (x <= centerc2) {
 80167a2:	9f03      	ldr	r7, [sp, #12]
 80167a4:	429f      	cmp	r7, r3
 80167a6:	dbf9      	blt.n	801679c <fill_inverse_cmap+0x19e>
 80167a8:	e7c4      	b.n	8016734 <fill_inverse_cmap+0x136>
    if (mindist[i] <= minmaxdist)
 80167aa:	f851 4b04 	ldr.w	r4, [r1], #4
 80167ae:	42a6      	cmp	r6, r4
      colorlist[ncolors++] = (JSAMPLE) i;
 80167b0:	bfa4      	itt	ge
 80167b2:	5483      	strbge	r3, [r0, r2]
 80167b4:	3201      	addge	r2, #1
  for (i = 0; i < numcolors; i++) {
 80167b6:	3301      	adds	r3, #1
 80167b8:	e757      	b.n	801666a <fill_inverse_cmap+0x6c>
    icolor = GETJSAMPLE(colorlist[i]);
 80167ba:	9b07      	ldr	r3, [sp, #28]
 80167bc:	f813 6b01 	ldrb.w	r6, [r3], #1
 80167c0:	9307      	str	r3, [sp, #28]
    inc0 = (minc0 - GETJSAMPLE(cinfo->colormap[0][icolor])) * C0_SCALE;
 80167c2:	9b00      	ldr	r3, [sp, #0]
 80167c4:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 80167c8:	680b      	ldr	r3, [r1, #0]
 80167ca:	5d98      	ldrb	r0, [r3, r6]
    inc1 = (minc1 - GETJSAMPLE(cinfo->colormap[1][icolor])) * C1_SCALE;
 80167cc:	684b      	ldr	r3, [r1, #4]
    inc2 = (minc2 - GETJSAMPLE(cinfo->colormap[2][icolor])) * C2_SCALE;
 80167ce:	6889      	ldr	r1, [r1, #8]
    inc0 = (minc0 - GETJSAMPLE(cinfo->colormap[0][icolor])) * C0_SCALE;
 80167d0:	eba9 0000 	sub.w	r0, r9, r0
    inc1 = (minc1 - GETJSAMPLE(cinfo->colormap[1][icolor])) * C1_SCALE;
 80167d4:	5d9b      	ldrb	r3, [r3, r6]
    inc2 = (minc2 - GETJSAMPLE(cinfo->colormap[2][icolor])) * C2_SCALE;
 80167d6:	5d89      	ldrb	r1, [r1, r6]
    inc1 = (minc1 - GETJSAMPLE(cinfo->colormap[1][icolor])) * C1_SCALE;
 80167d8:	ebaa 0303 	sub.w	r3, sl, r3
    inc2 = (minc2 - GETJSAMPLE(cinfo->colormap[2][icolor])) * C2_SCALE;
 80167dc:	eba8 0101 	sub.w	r1, r8, r1
    inc1 = (minc1 - GETJSAMPLE(cinfo->colormap[1][icolor])) * C1_SCALE;
 80167e0:	eb03 0443 	add.w	r4, r3, r3, lsl #1
    inc2 = (minc2 - GETJSAMPLE(cinfo->colormap[2][icolor])) * C2_SCALE;
 80167e4:	0049      	lsls	r1, r1, #1
    dist0 += inc1*inc1;
 80167e6:	4364      	muls	r4, r4
 80167e8:	fb00 4400 	mla	r4, r0, r0, r4
    inc0 = inc0 * (2 * STEP_C0) + STEP_C0 * STEP_C0;
 80167ec:	3004      	adds	r0, #4
 80167ee:	0100      	lsls	r0, r0, #4
    dist0 += inc2*inc2;
 80167f0:	fb01 4401 	mla	r4, r1, r1, r4
    inc2 = inc2 * (2 * STEP_C2) + STEP_C2 * STEP_C2;
 80167f4:	3108      	adds	r1, #8
    inc0 = inc0 * (2 * STEP_C0) + STEP_C0 * STEP_C0;
 80167f6:	900b      	str	r0, [sp, #44]	; 0x2c
    inc1 = inc1 * (2 * STEP_C1) + STEP_C1 * STEP_C1;
 80167f8:	2048      	movs	r0, #72	; 0x48
    inc2 = inc2 * (2 * STEP_C2) + STEP_C2 * STEP_C2;
 80167fa:	0149      	lsls	r1, r1, #5
    dist0 += inc2*inc2;
 80167fc:	9402      	str	r4, [sp, #8]
    inc1 = inc1 * (2 * STEP_C1) + STEP_C1 * STEP_C1;
 80167fe:	4343      	muls	r3, r0
    inc2 = inc2 * (2 * STEP_C2) + STEP_C2 * STEP_C2;
 8016800:	9106      	str	r1, [sp, #24]
 8016802:	2100      	movs	r1, #0
    inc1 = inc1 * (2 * STEP_C1) + STEP_C1 * STEP_C1;
 8016804:	f103 0090 	add.w	r0, r3, #144	; 0x90
 8016808:	f503 6319 	add.w	r3, r3, #2448	; 0x990
 801680c:	930e      	str	r3, [sp, #56]	; 0x38
 801680e:	9b06      	ldr	r3, [sp, #24]
 8016810:	900c      	str	r0, [sp, #48]	; 0x30
    cptr = bestcolor;
 8016812:	a810      	add	r0, sp, #64	; 0x40
 8016814:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016818:	9003      	str	r0, [sp, #12]
 801681a:	930d      	str	r3, [sp, #52]	; 0x34
 801681c:	ab70      	add	r3, sp, #448	; 0x1c0
      xx1 = inc1;
 801681e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8016820:	eb03 0c01 	add.w	ip, r3, r1
 8016824:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016826:	440b      	add	r3, r1
 8016828:	930f      	str	r3, [sp, #60]	; 0x3c
	xx2 = inc2;
 801682a:	9b03      	ldr	r3, [sp, #12]
 801682c:	9304      	str	r3, [sp, #16]
      xx1 = inc1;
 801682e:	9b02      	ldr	r3, [sp, #8]
 8016830:	9301      	str	r3, [sp, #4]
 8016832:	e01c      	b.n	801686e <fill_inverse_cmap+0x270>
	  if (dist2 < *bptr) {
 8016834:	f853 7f04 	ldr.w	r7, [r3, #4]!
	  cptr++;
 8016838:	f10e 0e01 	add.w	lr, lr, #1
	  if (dist2 < *bptr) {
 801683c:	42a7      	cmp	r7, r4
	for (ic2 = BOX_C2_ELEMS-1; ic2 >= 0; ic2--) {
 801683e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
	    *bptr = dist2;
 8016840:	bfc8      	it	gt
 8016842:	601c      	strgt	r4, [r3, #0]
	  dist2 += xx2;
 8016844:	442c      	add	r4, r5
	  xx2 += 2 * STEP_C2 * STEP_C2;
 8016846:	f505 7500 	add.w	r5, r5, #512	; 0x200
	    *cptr = (JSAMPLE) icolor;
 801684a:	bfc8      	it	gt
 801684c:	f80e 6c01 	strbgt.w	r6, [lr, #-1]
	for (ic2 = BOX_C2_ELEMS-1; ic2 >= 0; ic2--) {
 8016850:	42af      	cmp	r7, r5
 8016852:	d1ef      	bne.n	8016834 <fill_inverse_cmap+0x236>
	  cptr++;
 8016854:	9b04      	ldr	r3, [sp, #16]
	  bptr++;
 8016856:	f10c 0c10 	add.w	ip, ip, #16
	  cptr++;
 801685a:	3304      	adds	r3, #4
 801685c:	9304      	str	r3, [sp, #16]
	dist1 += xx1;
 801685e:	9b01      	ldr	r3, [sp, #4]
 8016860:	4403      	add	r3, r0
	xx1 += 2 * STEP_C1 * STEP_C1;
 8016862:	f500 7090 	add.w	r0, r0, #288	; 0x120
	dist1 += xx1;
 8016866:	9301      	str	r3, [sp, #4]
      for (ic1 = BOX_C1_ELEMS-1; ic1 >= 0; ic1--) {
 8016868:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801686a:	4298      	cmp	r0, r3
 801686c:	d006      	beq.n	801687c <fill_inverse_cmap+0x27e>
	for (ic2 = BOX_C2_ELEMS-1; ic2 >= 0; ic2--) {
 801686e:	f1ac 0304 	sub.w	r3, ip, #4
	xx2 = inc2;
 8016872:	9d06      	ldr	r5, [sp, #24]
 8016874:	f8dd e010 	ldr.w	lr, [sp, #16]
 8016878:	9c01      	ldr	r4, [sp, #4]
 801687a:	e7db      	b.n	8016834 <fill_inverse_cmap+0x236>
	  cptr++;
 801687c:	9b03      	ldr	r3, [sp, #12]
    for (ic0 = BOX_C0_ELEMS-1; ic0 >= 0; ic0--) {
 801687e:	3180      	adds	r1, #128	; 0x80
      dist0 += xx0;
 8016880:	980f      	ldr	r0, [sp, #60]	; 0x3c
	  cptr++;
 8016882:	3320      	adds	r3, #32
    for (ic0 = BOX_C0_ELEMS-1; ic0 >= 0; ic0--) {
 8016884:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
	  cptr++;
 8016888:	9303      	str	r3, [sp, #12]
      dist0 += xx0;
 801688a:	9b02      	ldr	r3, [sp, #8]
 801688c:	4403      	add	r3, r0
 801688e:	9302      	str	r3, [sp, #8]
    for (ic0 = BOX_C0_ELEMS-1; ic0 >= 0; ic0--) {
 8016890:	d1c4      	bne.n	801681c <fill_inverse_cmap+0x21e>
  for (i = 0; i < numcolors; i++) {
 8016892:	f10b 0b01 	add.w	fp, fp, #1
 8016896:	e6f7      	b.n	8016688 <fill_inverse_cmap+0x8a>

08016898 <pass2_no_dither>:

METHODDEF(void)
pass2_no_dither (j_decompress_ptr cinfo,
		 JSAMPARRAY input_buf, JSAMPARRAY output_buf, int num_rows)
/* This version performs no dithering */
{
 8016898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801689c:	469a      	mov	sl, r3
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  hist3d histogram = cquantize->histogram;
 801689e:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
{
 80168a2:	b085      	sub	sp, #20
 80168a4:	4688      	mov	r8, r1
  hist3d histogram = cquantize->histogram;
 80168a6:	699b      	ldr	r3, [r3, #24]
{
 80168a8:	4691      	mov	r9, r2
  register int c0, c1, c2;
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;

  for (row = 0; row < num_rows; row++) {
 80168aa:	2500      	movs	r5, #0
  hist3d histogram = cquantize->histogram;
 80168ac:	9300      	str	r3, [sp, #0]
  JDIMENSION width = cinfo->output_width;
 80168ae:	6f03      	ldr	r3, [r0, #112]	; 0x70
 80168b0:	9301      	str	r3, [sp, #4]
  for (row = 0; row < num_rows; row++) {
 80168b2:	4555      	cmp	r5, sl
 80168b4:	db02      	blt.n	80168bc <pass2_no_dither+0x24>
	fill_inverse_cmap(cinfo, c0,c1,c2);
      /* Now emit the colormap index for this cell */
      *outptr++ = (JSAMPLE) (*cachep - 1);
    }
  }
}
 80168b6:	b005      	add	sp, #20
 80168b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outptr = output_buf[row];
 80168bc:	f859 6025 	ldr.w	r6, [r9, r5, lsl #2]
    for (col = width; col > 0; col--) {
 80168c0:	f858 4025 	ldr.w	r4, [r8, r5, lsl #2]
 80168c4:	9b01      	ldr	r3, [sp, #4]
 80168c6:	3403      	adds	r4, #3
 80168c8:	eb06 0b03 	add.w	fp, r6, r3
 80168cc:	455e      	cmp	r6, fp
 80168ce:	d101      	bne.n	80168d4 <pass2_no_dither+0x3c>
  for (row = 0; row < num_rows; row++) {
 80168d0:	3501      	adds	r5, #1
 80168d2:	e7ee      	b.n	80168b2 <pass2_no_dither+0x1a>
      c0 = GETJSAMPLE(*inptr++) >> C0_SHIFT;
 80168d4:	f814 cc03 	ldrb.w	ip, [r4, #-3]
      c1 = GETJSAMPLE(*inptr++) >> C1_SHIFT;
 80168d8:	f814 7c02 	ldrb.w	r7, [r4, #-2]
      c0 = GETJSAMPLE(*inptr++) >> C0_SHIFT;
 80168dc:	ea4f 01dc 	mov.w	r1, ip, lsr #3
      cachep = & histogram[c0][c1][c2];
 80168e0:	9a00      	ldr	r2, [sp, #0]
      c1 = GETJSAMPLE(*inptr++) >> C1_SHIFT;
 80168e2:	ea4f 0e97 	mov.w	lr, r7, lsr #2
      c2 = GETJSAMPLE(*inptr++) >> C2_SHIFT;
 80168e6:	f814 3c01 	ldrb.w	r3, [r4, #-1]
      cachep = & histogram[c0][c1][c2];
 80168ea:	f852 c021 	ldr.w	ip, [r2, r1, lsl #2]
      c2 = GETJSAMPLE(*inptr++) >> C2_SHIFT;
 80168ee:	08db      	lsrs	r3, r3, #3
      cachep = & histogram[c0][c1][c2];
 80168f0:	eb0c 178e 	add.w	r7, ip, lr, lsl #6
      if (*cachep == 0)
 80168f4:	f837 c013 	ldrh.w	ip, [r7, r3, lsl #1]
 80168f8:	f1bc 0f00 	cmp.w	ip, #0
 80168fc:	d106      	bne.n	801690c <pass2_no_dither+0x74>
	fill_inverse_cmap(cinfo, c0,c1,c2);
 80168fe:	4672      	mov	r2, lr
 8016900:	9303      	str	r3, [sp, #12]
 8016902:	9002      	str	r0, [sp, #8]
 8016904:	f7ff fe7b 	bl	80165fe <fill_inverse_cmap>
 8016908:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
      *outptr++ = (JSAMPLE) (*cachep - 1);
 801690c:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8016910:	3403      	adds	r4, #3
 8016912:	3b01      	subs	r3, #1
 8016914:	f806 3b01 	strb.w	r3, [r6], #1
    for (col = width; col > 0; col--) {
 8016918:	e7d8      	b.n	80168cc <pass2_no_dither+0x34>

0801691a <pass2_fs_dither>:

METHODDEF(void)
pass2_fs_dither (j_decompress_ptr cinfo,
		 JSAMPARRAY input_buf, JSAMPARRAY output_buf, int num_rows)
/* This version performs Floyd-Steinberg dithering */
{
 801691a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 801691e:	f8d0 81e0 	ldr.w	r8, [r0, #480]	; 0x1e0
{
 8016922:	b09f      	sub	sp, #124	; 0x7c
 8016924:	931b      	str	r3, [sp, #108]	; 0x6c
  hist3d histogram = cquantize->histogram;
 8016926:	f8d8 3018 	ldr.w	r3, [r8, #24]
 801692a:	9315      	str	r3, [sp, #84]	; 0x54
  histptr cachep;
  int dir;			/* +1 or -1 depending on direction */
  int dir3;			/* 3*dir, for advancing inptr & errorptr */
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;
 801692c:	6f03      	ldr	r3, [r0, #112]	; 0x70
 801692e:	9305      	str	r3, [sp, #20]
  JSAMPLE *range_limit = cinfo->sample_range_limit;
 8016930:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8016934:	930a      	str	r3, [sp, #40]	; 0x28
  int *error_limit = cquantize->error_limiter;
 8016936:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
 801693a:	930b      	str	r3, [sp, #44]	; 0x2c
  JSAMPROW colormap0 = cinfo->colormap[0];
 801693c:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
{
 8016940:	e9cd 1219 	strd	r1, r2, [sp, #100]	; 0x64
  JSAMPROW colormap0 = cinfo->colormap[0];
 8016944:	681a      	ldr	r2, [r3, #0]
 8016946:	9216      	str	r2, [sp, #88]	; 0x58
  JSAMPROW colormap1 = cinfo->colormap[1];
 8016948:	685a      	ldr	r2, [r3, #4]
  JSAMPROW colormap2 = cinfo->colormap[2];
 801694a:	689b      	ldr	r3, [r3, #8]
  JSAMPROW colormap1 = cinfo->colormap[1];
 801694c:	9217      	str	r2, [sp, #92]	; 0x5c
  JSAMPROW colormap2 = cinfo->colormap[2];
 801694e:	9318      	str	r3, [sp, #96]	; 0x60
  for (row = 0; row < num_rows; row++) {
    inptr = input_buf[row];
    outptr = output_buf[row];
    if (cquantize->on_odd_row) {
      /* work right to left in this row */
      inptr += (width-1) * 3;	/* so point to rightmost pixel */
 8016950:	9b05      	ldr	r3, [sp, #20]
      outptr += width-1;
      dir = -1;
      dir3 = -3;
      errorptr = cquantize->fserrors + (width+1)*3; /* => entry after last column */
 8016952:	9a05      	ldr	r2, [sp, #20]
      inptr += (width-1) * 3;	/* so point to rightmost pixel */
 8016954:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016958:	3b03      	subs	r3, #3
 801695a:	9310      	str	r3, [sp, #64]	; 0x40
      errorptr = cquantize->fserrors + (width+1)*3; /* => entry after last column */
 801695c:	2306      	movs	r3, #6
 801695e:	fb02 3303 	mla	r3, r2, r3, r3
 8016962:	9312      	str	r3, [sp, #72]	; 0x48
  for (row = 0; row < num_rows; row++) {
 8016964:	2300      	movs	r3, #0
 8016966:	9304      	str	r3, [sp, #16]
 8016968:	9b04      	ldr	r3, [sp, #16]
 801696a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801696c:	4293      	cmp	r3, r2
 801696e:	db02      	blt.n	8016976 <pass2_fs_dither+0x5c>
     */
    errorptr[0] = (FSERROR) bpreverr0; /* unload prev errs into array */
    errorptr[1] = (FSERROR) bpreverr1;
    errorptr[2] = (FSERROR) bpreverr2;
  }
}
 8016970:	b01f      	add	sp, #124	; 0x7c
 8016972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    inptr = input_buf[row];
 8016976:	9a04      	ldr	r2, [sp, #16]
 8016978:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801697a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801697e:	9301      	str	r3, [sp, #4]
    outptr = output_buf[row];
 8016980:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8016982:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016986:	9303      	str	r3, [sp, #12]
      errorptr = cquantize->fserrors + (width+1)*3; /* => entry after last column */
 8016988:	f8d8 3020 	ldr.w	r3, [r8, #32]
 801698c:	9302      	str	r3, [sp, #8]
    if (cquantize->on_odd_row) {
 801698e:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 8016992:	2b00      	cmp	r3, #0
 8016994:	d036      	beq.n	8016a04 <pass2_fs_dither+0xea>
      inptr += (width-1) * 3;	/* so point to rightmost pixel */
 8016996:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016998:	9a01      	ldr	r2, [sp, #4]
 801699a:	441a      	add	r2, r3
      outptr += width-1;
 801699c:	9b05      	ldr	r3, [sp, #20]
      inptr += (width-1) * 3;	/* so point to rightmost pixel */
 801699e:	9201      	str	r2, [sp, #4]
      outptr += width-1;
 80169a0:	3b01      	subs	r3, #1
 80169a2:	9a03      	ldr	r2, [sp, #12]
 80169a4:	441a      	add	r2, r3
      errorptr = cquantize->fserrors + (width+1)*3; /* => entry after last column */
 80169a6:	9b02      	ldr	r3, [sp, #8]
      outptr += width-1;
 80169a8:	9203      	str	r2, [sp, #12]
      errorptr = cquantize->fserrors + (width+1)*3; /* => entry after last column */
 80169aa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80169ac:	4413      	add	r3, r2
      dir3 = -3;
 80169ae:	f06f 0202 	mvn.w	r2, #2
      errorptr = cquantize->fserrors + (width+1)*3; /* => entry after last column */
 80169b2:	9302      	str	r3, [sp, #8]
      cquantize->on_odd_row = FALSE; /* flip for next time */
 80169b4:	2300      	movs	r3, #0
      dir3 = -3;
 80169b6:	9208      	str	r2, [sp, #32]
      dir = -1;
 80169b8:	f04f 32ff 	mov.w	r2, #4294967295
 80169bc:	920f      	str	r2, [sp, #60]	; 0x3c
 80169be:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
    bpreverr0 = bpreverr1 = bpreverr2 = 0;
 80169c2:	2400      	movs	r4, #0
      cur0 = RIGHT_SHIFT(cur0 + errorptr[dir3+0] + 8, 4);
 80169c4:	9b08      	ldr	r3, [sp, #32]
 80169c6:	9e02      	ldr	r6, [sp, #8]
    cur0 = cur1 = cur2 = 0;
 80169c8:	4621      	mov	r1, r4
      cur0 = RIGHT_SHIFT(cur0 + errorptr[dir3+0] + 8, 4);
 80169ca:	005d      	lsls	r5, r3, #1
    cur0 = cur1 = cur2 = 0;
 80169cc:	4622      	mov	r2, r4
    belowerr0 = belowerr1 = belowerr2 = 0;
 80169ce:	940c      	str	r4, [sp, #48]	; 0x30
      cur1 = RIGHT_SHIFT(cur1 + errorptr[dir3+1] + 8, 4);
 80169d0:	1cab      	adds	r3, r5, #2
 80169d2:	9313      	str	r3, [sp, #76]	; 0x4c
      cur2 = RIGHT_SHIFT(cur2 + errorptr[dir3+2] + 8, 4);
 80169d4:	1d2b      	adds	r3, r5, #4
 80169d6:	9314      	str	r3, [sp, #80]	; 0x50
    for (col = width; col > 0; col--) {
 80169d8:	9b05      	ldr	r3, [sp, #20]
 80169da:	9309      	str	r3, [sp, #36]	; 0x24
    cur0 = cur1 = cur2 = 0;
 80169dc:	4623      	mov	r3, r4
    bpreverr0 = bpreverr1 = bpreverr2 = 0;
 80169de:	e9cd 4406 	strd	r4, r4, [sp, #24]
    belowerr0 = belowerr1 = belowerr2 = 0;
 80169e2:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
    for (col = width; col > 0; col--) {
 80169e6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80169e8:	b98f      	cbnz	r7, 8016a0e <pass2_fs_dither+0xf4>
 80169ea:	9b05      	ldr	r3, [sp, #20]
    errorptr[0] = (FSERROR) bpreverr0; /* unload prev errs into array */
 80169ec:	9a02      	ldr	r2, [sp, #8]
 80169ee:	435d      	muls	r5, r3
 80169f0:	9906      	ldr	r1, [sp, #24]
 80169f2:	9b02      	ldr	r3, [sp, #8]
 80169f4:	5351      	strh	r1, [r2, r5]
 80169f6:	442b      	add	r3, r5
    errorptr[1] = (FSERROR) bpreverr1;
 80169f8:	9a07      	ldr	r2, [sp, #28]
    errorptr[2] = (FSERROR) bpreverr2;
 80169fa:	809c      	strh	r4, [r3, #4]
    errorptr[1] = (FSERROR) bpreverr1;
 80169fc:	805a      	strh	r2, [r3, #2]
  for (row = 0; row < num_rows; row++) {
 80169fe:	9b04      	ldr	r3, [sp, #16]
 8016a00:	3301      	adds	r3, #1
 8016a02:	e7b0      	b.n	8016966 <pass2_fs_dither+0x4c>
      cquantize->on_odd_row = TRUE; /* flip for next time */
 8016a04:	2301      	movs	r3, #1
      dir3 = 3;
 8016a06:	2203      	movs	r2, #3
      dir = 1;
 8016a08:	930f      	str	r3, [sp, #60]	; 0x3c
      dir3 = 3;
 8016a0a:	9208      	str	r2, [sp, #32]
 8016a0c:	e7d7      	b.n	80169be <pass2_fs_dither+0xa4>
      cur0 = RIGHT_SHIFT(cur0 + errorptr[dir3+0] + 8, 4);
 8016a0e:	f936 c005 	ldrsh.w	ip, [r6, r5]
 8016a12:	1977      	adds	r7, r6, r5
 8016a14:	4463      	add	r3, ip
 8016a16:	9711      	str	r7, [sp, #68]	; 0x44
      cur0 = error_limit[cur0];
 8016a18:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
      cur0 = RIGHT_SHIFT(cur0 + errorptr[dir3+0] + 8, 4);
 8016a1a:	f103 0c08 	add.w	ip, r3, #8
      cur1 = RIGHT_SHIFT(cur1 + errorptr[dir3+1] + 8, 4);
 8016a1e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016a20:	5ef3      	ldrsh	r3, [r6, r3]
 8016a22:	441a      	add	r2, r3
      cur2 = RIGHT_SHIFT(cur2 + errorptr[dir3+2] + 8, 4);
 8016a24:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016a26:	5ef3      	ldrsh	r3, [r6, r3]
      cur1 = RIGHT_SHIFT(cur1 + errorptr[dir3+1] + 8, 4);
 8016a28:	3208      	adds	r2, #8
      cur2 = RIGHT_SHIFT(cur2 + errorptr[dir3+2] + 8, 4);
 8016a2a:	440b      	add	r3, r1
      cur1 = RIGHT_SHIFT(cur1 + errorptr[dir3+1] + 8, 4);
 8016a2c:	1112      	asrs	r2, r2, #4
      cur0 = RIGHT_SHIFT(cur0 + errorptr[dir3+0] + 8, 4);
 8016a2e:	ea4f 112c 	mov.w	r1, ip, asr #4
      cur2 = RIGHT_SHIFT(cur2 + errorptr[dir3+2] + 8, 4);
 8016a32:	3308      	adds	r3, #8
      cur1 = error_limit[cur1];
 8016a34:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
      cur0 = error_limit[cur0];
 8016a38:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
      cur2 = RIGHT_SHIFT(cur2 + errorptr[dir3+2] + 8, 4);
 8016a3c:	111b      	asrs	r3, r3, #4
      cur2 = error_limit[cur2];
 8016a3e:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
      cur0 += GETJSAMPLE(inptr[0]);
 8016a42:	9f01      	ldr	r7, [sp, #4]
 8016a44:	f897 c000 	ldrb.w	ip, [r7]
      cur0 = GETJSAMPLE(range_limit[cur0]);
 8016a48:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8016a4a:	4439      	add	r1, r7
      cur1 = GETJSAMPLE(range_limit[cur1]);
 8016a4c:	443a      	add	r2, r7
      cur2 = GETJSAMPLE(range_limit[cur2]);
 8016a4e:	443b      	add	r3, r7
      cur0 = GETJSAMPLE(range_limit[cur0]);
 8016a50:	f811 b00c 	ldrb.w	fp, [r1, ip]
      cur1 += GETJSAMPLE(inptr[1]);
 8016a54:	9901      	ldr	r1, [sp, #4]
 8016a56:	7849      	ldrb	r1, [r1, #1]
      cur1 = GETJSAMPLE(range_limit[cur1]);
 8016a58:	f812 a001 	ldrb.w	sl, [r2, r1]
      cachep = & histogram[cur0>>C0_SHIFT][cur1>>C1_SHIFT][cur2>>C2_SHIFT];
 8016a5c:	ea4f 01eb 	mov.w	r1, fp, asr #3
      cur2 += GETJSAMPLE(inptr[2]);
 8016a60:	9a01      	ldr	r2, [sp, #4]
 8016a62:	7892      	ldrb	r2, [r2, #2]
      cur2 = GETJSAMPLE(range_limit[cur2]);
 8016a64:	f813 9002 	ldrb.w	r9, [r3, r2]
      cachep = & histogram[cur0>>C0_SHIFT][cur1>>C1_SHIFT][cur2>>C2_SHIFT];
 8016a68:	ea4f 02aa 	mov.w	r2, sl, asr #2
 8016a6c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016a6e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8016a72:	eb03 1382 	add.w	r3, r3, r2, lsl #6
 8016a76:	461f      	mov	r7, r3
 8016a78:	ea4f 03e9 	mov.w	r3, r9, asr #3
      if (*cachep == 0)
 8016a7c:	f837 c013 	ldrh.w	ip, [r7, r3, lsl #1]
 8016a80:	f1bc 0f00 	cmp.w	ip, #0
 8016a84:	d105      	bne.n	8016a92 <pass2_fs_dither+0x178>
	fill_inverse_cmap(cinfo, cur0>>C0_SHIFT,cur1>>C1_SHIFT,cur2>>C2_SHIFT);
 8016a86:	e9cd 031c 	strd	r0, r3, [sp, #112]	; 0x70
 8016a8a:	f7ff fdb8 	bl	80165fe <fill_inverse_cmap>
 8016a8e:	e9dd 031c 	ldrd	r0, r3, [sp, #112]	; 0x70
      { register int pixcode = *cachep - 1;
 8016a92:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
	*outptr = (JSAMPLE) pixcode;
 8016a96:	9a03      	ldr	r2, [sp, #12]
      { register int pixcode = *cachep - 1;
 8016a98:	3b01      	subs	r3, #1
	errorptr[1] = (FSERROR) (bpreverr1 + cur1);
 8016a9a:	9907      	ldr	r1, [sp, #28]
      inptr += dir3;		/* Advance pixel pointers to next column */
 8016a9c:	9f01      	ldr	r7, [sp, #4]
	*outptr = (JSAMPLE) pixcode;
 8016a9e:	7013      	strb	r3, [r2, #0]
	cur0 -= GETJSAMPLE(colormap0[pixcode]);
 8016aa0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8016aa2:	5cd2      	ldrb	r2, [r2, r3]
 8016aa4:	ebab 0b02 	sub.w	fp, fp, r2
	cur1 -= GETJSAMPLE(colormap1[pixcode]);
 8016aa8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8016aaa:	5cd2      	ldrb	r2, [r2, r3]
 8016aac:	ebaa 0a02 	sub.w	sl, sl, r2
	cur2 -= GETJSAMPLE(colormap2[pixcode]);
 8016ab0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8016ab2:	5cd3      	ldrb	r3, [r2, r3]
	errorptr[0] = (FSERROR) (bpreverr0 + cur0);
 8016ab4:	9a06      	ldr	r2, [sp, #24]
	cur2 -= GETJSAMPLE(colormap2[pixcode]);
 8016ab6:	eba9 0903 	sub.w	r9, r9, r3
	cur0 += delta;		/* form error * 3 */
 8016aba:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
	errorptr[0] = (FSERROR) (bpreverr0 + cur0);
 8016abe:	441a      	add	r2, r3
	cur0 += delta;		/* form error * 5 */
 8016ac0:	eb03 034b 	add.w	r3, r3, fp, lsl #1
	errorptr[0] = (FSERROR) (bpreverr0 + cur0);
 8016ac4:	8032      	strh	r2, [r6, #0]
	bpreverr0 = belowerr0 + cur0;
 8016ac6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	belowerr0 = bnexterr;
 8016ac8:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
	bpreverr0 = belowerr0 + cur0;
 8016acc:	441a      	add	r2, r3
	cur0 += delta;		/* form error * 7 */
 8016ace:	eb03 034b 	add.w	r3, r3, fp, lsl #1
	bpreverr0 = belowerr0 + cur0;
 8016ad2:	9206      	str	r2, [sp, #24]
	cur1 += delta;		/* form error * 3 */
 8016ad4:	eb0a 024a 	add.w	r2, sl, sl, lsl #1
	errorptr[1] = (FSERROR) (bpreverr1 + cur1);
 8016ad8:	4411      	add	r1, r2
	cur1 += delta;		/* form error * 5 */
 8016ada:	eb02 024a 	add.w	r2, r2, sl, lsl #1
	errorptr[1] = (FSERROR) (bpreverr1 + cur1);
 8016ade:	8071      	strh	r1, [r6, #2]
	bpreverr1 = belowerr1 + cur1;
 8016ae0:	990d      	ldr	r1, [sp, #52]	; 0x34
 8016ae2:	4411      	add	r1, r2
	cur1 += delta;		/* form error * 7 */
 8016ae4:	eb02 024a 	add.w	r2, r2, sl, lsl #1
	bpreverr1 = belowerr1 + cur1;
 8016ae8:	9107      	str	r1, [sp, #28]
	cur2 += delta;		/* form error * 3 */
 8016aea:	eb09 0149 	add.w	r1, r9, r9, lsl #1
	errorptr[2] = (FSERROR) (bpreverr2 + cur2);
 8016aee:	440c      	add	r4, r1
	cur2 += delta;		/* form error * 5 */
 8016af0:	eb01 0149 	add.w	r1, r1, r9, lsl #1
	errorptr[2] = (FSERROR) (bpreverr2 + cur2);
 8016af4:	80b4      	strh	r4, [r6, #4]
      inptr += dir3;		/* Advance pixel pointers to next column */
 8016af6:	9e08      	ldr	r6, [sp, #32]
	bpreverr2 = belowerr2 + cur2;
 8016af8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
      inptr += dir3;		/* Advance pixel pointers to next column */
 8016afa:	4437      	add	r7, r6
      outptr += dir;
 8016afc:	9e03      	ldr	r6, [sp, #12]
	bpreverr2 = belowerr2 + cur2;
 8016afe:	440c      	add	r4, r1
	cur2 += delta;		/* form error * 7 */
 8016b00:	eb01 0149 	add.w	r1, r1, r9, lsl #1
      inptr += dir3;		/* Advance pixel pointers to next column */
 8016b04:	9701      	str	r7, [sp, #4]
      outptr += dir;
 8016b06:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8016b08:	443e      	add	r6, r7
 8016b0a:	9603      	str	r6, [sp, #12]
    for (col = width; col > 0; col--) {
 8016b0c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8016b0e:	3e01      	subs	r6, #1
	belowerr1 = bnexterr;
 8016b10:	e9cd a90d 	strd	sl, r9, [sp, #52]	; 0x34
    for (col = width; col > 0; col--) {
 8016b14:	9609      	str	r6, [sp, #36]	; 0x24
 8016b16:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8016b18:	e765      	b.n	80169e6 <pass2_fs_dither+0xcc>

08016b1a <init_error_limit>:
 */

LOCAL(void)
init_error_limit (j_decompress_ptr cinfo)
/* Allocate and fill in the error_limiter table */
{
 8016b1a:	b538      	push	{r3, r4, r5, lr}
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  int * table;
  int in, out;

  table = (int *) (*cinfo->mem->alloc_small)
 8016b1c:	6843      	ldr	r3, [r0, #4]
 8016b1e:	f240 72fc 	movw	r2, #2044	; 0x7fc
 8016b22:	2101      	movs	r1, #1
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8016b24:	f8d0 41e0 	ldr.w	r4, [r0, #480]	; 0x1e0
  table = (int *) (*cinfo->mem->alloc_small)
 8016b28:	681b      	ldr	r3, [r3, #0]
 8016b2a:	4798      	blx	r3
    ((j_common_ptr) cinfo, JPOOL_IMAGE, (MAXJSAMPLE*2+1) * SIZEOF(int));
  table += MAXJSAMPLE;		/* so can index -MAXJSAMPLE .. +MAXJSAMPLE */
 8016b2c:	f500 737f 	add.w	r3, r0, #1020	; 0x3fc
 8016b30:	f500 717e 	add.w	r1, r0, #1016	; 0x3f8
 8016b34:	f500 6280 	add.w	r2, r0, #1024	; 0x400
  cquantize->error_limiter = table;
 8016b38:	62a3      	str	r3, [r4, #40]	; 0x28

#define STEPSIZE ((MAXJSAMPLE+1)/16)
  /* Map errors 1:1 up to +- MAXJSAMPLE/16 */
  out = 0;
  for (in = 0; in < STEPSIZE; in++, out++) {
 8016b3a:	2300      	movs	r3, #0
    table[in] = out; table[-in] = -out;
 8016b3c:	425c      	negs	r4, r3
 8016b3e:	f841 3f04 	str.w	r3, [r1, #4]!
  for (in = 0; in < STEPSIZE; in++, out++) {
 8016b42:	3301      	adds	r3, #1
    table[in] = out; table[-in] = -out;
 8016b44:	f842 4d04 	str.w	r4, [r2, #-4]!
  for (in = 0; in < STEPSIZE; in++, out++) {
 8016b48:	2b10      	cmp	r3, #16
 8016b4a:	d1f7      	bne.n	8016b3c <init_error_limit+0x22>
 8016b4c:	f500 6487 	add.w	r4, r0, #1080	; 0x438
 8016b50:	f500 7170 	add.w	r1, r0, #960	; 0x3c0
 8016b54:	f06f 0211 	mvn.w	r2, #17
  }
  /* Map errors 1:2 up to +- 3*MAXJSAMPLE/16 */
  for (; in < STEPSIZE*3; in++, out += (in&1) ? 0 : 1) {
    table[in] = out; table[-in] = -out;
 8016b58:	425d      	negs	r5, r3
 8016b5a:	f844 3f04 	str.w	r3, [r4, #4]!
 8016b5e:	f841 5d04 	str.w	r5, [r1, #-4]!
  for (; in < STEPSIZE*3; in++, out += (in&1) ? 0 : 1) {
 8016b62:	f002 0501 	and.w	r5, r2, #1
 8016b66:	3a01      	subs	r2, #1
 8016b68:	442b      	add	r3, r5
 8016b6a:	f112 0f32 	cmn.w	r2, #50	; 0x32
 8016b6e:	d1f3      	bne.n	8016b58 <init_error_limit+0x3e>
 8016b70:	f500 6197 	add.w	r1, r0, #1208	; 0x4b8
 8016b74:	f500 7250 	add.w	r2, r0, #832	; 0x340
  }
  /* Clamp the rest to final out value (which is (MAXJSAMPLE+1)/8) */
  for (; in <= MAXJSAMPLE; in++) {
    table[in] = out; table[-in] = -out;
 8016b78:	425c      	negs	r4, r3
 8016b7a:	f841 3f04 	str.w	r3, [r1, #4]!
 8016b7e:	f842 4d04 	str.w	r4, [r2, #-4]!
  for (; in <= MAXJSAMPLE; in++) {
 8016b82:	4282      	cmp	r2, r0
 8016b84:	d1f9      	bne.n	8016b7a <init_error_limit+0x60>
  }
#undef STEPSIZE
}
 8016b86:	bd38      	pop	{r3, r4, r5, pc}

08016b88 <finish_pass2>:

METHODDEF(void)
finish_pass2 (j_decompress_ptr cinfo)
{
  /* no work */
}
 8016b88:	4770      	bx	lr

08016b8a <new_color_map_2_quant>:
new_color_map_2_quant (j_decompress_ptr cinfo)
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;

  /* Reset the inverse color map */
  cquantize->needs_zeroed = TRUE;
 8016b8a:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
 8016b8e:	2201      	movs	r2, #1
 8016b90:	61da      	str	r2, [r3, #28]
}
 8016b92:	4770      	bx	lr

08016b94 <start_pass_2_quant>:
{
 8016b94:	b573      	push	{r0, r1, r4, r5, r6, lr}
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8016b96:	f8d0 51e0 	ldr.w	r5, [r0, #480]	; 0x1e0
{
 8016b9a:	4604      	mov	r4, r0
  if (cinfo->dither_mode != JDITHER_NONE)
 8016b9c:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
  hist3d histogram = cquantize->histogram;
 8016ba0:	69ae      	ldr	r6, [r5, #24]
  if (cinfo->dither_mode != JDITHER_NONE)
 8016ba2:	2b00      	cmp	r3, #0
 8016ba4:	d050      	beq.n	8016c48 <start_pass_2_quant+0xb4>
    cinfo->dither_mode = JDITHER_FS;
 8016ba6:	2302      	movs	r3, #2
 8016ba8:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
  if (is_pre_scan) {
 8016bac:	b189      	cbz	r1, 8016bd2 <start_pass_2_quant+0x3e>
    cquantize->pub.color_quantize = prescan_quantize;
 8016bae:	4b28      	ldr	r3, [pc, #160]	; (8016c50 <start_pass_2_quant+0xbc>)
 8016bb0:	606b      	str	r3, [r5, #4]
    cquantize->pub.finish_pass = finish_pass1;
 8016bb2:	4b28      	ldr	r3, [pc, #160]	; (8016c54 <start_pass_2_quant+0xc0>)
 8016bb4:	60ab      	str	r3, [r5, #8]
  if (cquantize->needs_zeroed) {
 8016bb6:	1f34      	subs	r4, r6, #4
 8016bb8:	367c      	adds	r6, #124	; 0x7c
      FMEMZERO((void FAR *) histogram[i],
 8016bba:	f854 0f04 	ldr.w	r0, [r4, #4]!
 8016bbe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8016bc2:	2100      	movs	r1, #0
 8016bc4:	f013 fb26 	bl	802a214 <memset>
    for (i = 0; i < HIST_C0_ELEMS; i++) {
 8016bc8:	42a6      	cmp	r6, r4
 8016bca:	d1f6      	bne.n	8016bba <start_pass_2_quant+0x26>
    cquantize->needs_zeroed = FALSE;
 8016bcc:	2300      	movs	r3, #0
 8016bce:	61eb      	str	r3, [r5, #28]
}
 8016bd0:	e02f      	b.n	8016c32 <start_pass_2_quant+0x9e>
      cquantize->pub.color_quantize = pass2_fs_dither;
 8016bd2:	4b21      	ldr	r3, [pc, #132]	; (8016c58 <start_pass_2_quant+0xc4>)
 8016bd4:	606b      	str	r3, [r5, #4]
    cquantize->pub.finish_pass = finish_pass2;
 8016bd6:	4b21      	ldr	r3, [pc, #132]	; (8016c5c <start_pass_2_quant+0xc8>)
 8016bd8:	60ab      	str	r3, [r5, #8]
    i = cinfo->actual_number_of_colors;
 8016bda:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    if (i < 1)
 8016bde:	2b00      	cmp	r3, #0
 8016be0:	dc29      	bgt.n	8016c36 <start_pass_2_quant+0xa2>
      ERREXIT1(cinfo, JERR_QUANT_FEW_COLORS, 1);
 8016be2:	223a      	movs	r2, #58	; 0x3a
 8016be4:	6823      	ldr	r3, [r4, #0]
 8016be6:	615a      	str	r2, [r3, #20]
 8016be8:	2201      	movs	r2, #1
      ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXNUMCOLORS);
 8016bea:	619a      	str	r2, [r3, #24]
 8016bec:	4620      	mov	r0, r4
 8016bee:	681b      	ldr	r3, [r3, #0]
 8016bf0:	4798      	blx	r3
    if (cinfo->dither_mode == JDITHER_FS) {
 8016bf2:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 8016bf6:	2b02      	cmp	r3, #2
 8016bf8:	d118      	bne.n	8016c2c <start_pass_2_quant+0x98>
      size_t arraysize = (size_t) ((cinfo->output_width + 2) *
 8016bfa:	2306      	movs	r3, #6
 8016bfc:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8016bfe:	435a      	muls	r2, r3
      if (cquantize->fserrors == NULL)
 8016c00:	6a2b      	ldr	r3, [r5, #32]
      size_t arraysize = (size_t) ((cinfo->output_width + 2) *
 8016c02:	320c      	adds	r2, #12
      if (cquantize->fserrors == NULL)
 8016c04:	b93b      	cbnz	r3, 8016c16 <start_pass_2_quant+0x82>
	cquantize->fserrors = (FSERRPTR) (*cinfo->mem->alloc_large)
 8016c06:	6863      	ldr	r3, [r4, #4]
 8016c08:	2101      	movs	r1, #1
 8016c0a:	4620      	mov	r0, r4
 8016c0c:	9201      	str	r2, [sp, #4]
 8016c0e:	685b      	ldr	r3, [r3, #4]
 8016c10:	4798      	blx	r3
 8016c12:	9a01      	ldr	r2, [sp, #4]
 8016c14:	6228      	str	r0, [r5, #32]
      FMEMZERO((void FAR *) cquantize->fserrors, arraysize);
 8016c16:	2100      	movs	r1, #0
 8016c18:	6a28      	ldr	r0, [r5, #32]
 8016c1a:	f013 fafb 	bl	802a214 <memset>
      if (cquantize->error_limiter == NULL)
 8016c1e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8016c20:	b913      	cbnz	r3, 8016c28 <start_pass_2_quant+0x94>
	init_error_limit(cinfo);
 8016c22:	4620      	mov	r0, r4
 8016c24:	f7ff ff79 	bl	8016b1a <init_error_limit>
      cquantize->on_odd_row = FALSE;
 8016c28:	2300      	movs	r3, #0
 8016c2a:	626b      	str	r3, [r5, #36]	; 0x24
  if (cquantize->needs_zeroed) {
 8016c2c:	69eb      	ldr	r3, [r5, #28]
 8016c2e:	2b00      	cmp	r3, #0
 8016c30:	d1c1      	bne.n	8016bb6 <start_pass_2_quant+0x22>
}
 8016c32:	b002      	add	sp, #8
 8016c34:	bd70      	pop	{r4, r5, r6, pc}
    if (i > MAXNUMCOLORS)
 8016c36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016c3a:	ddda      	ble.n	8016bf2 <start_pass_2_quant+0x5e>
      ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXNUMCOLORS);
 8016c3c:	223b      	movs	r2, #59	; 0x3b
 8016c3e:	6823      	ldr	r3, [r4, #0]
 8016c40:	615a      	str	r2, [r3, #20]
 8016c42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8016c46:	e7d0      	b.n	8016bea <start_pass_2_quant+0x56>
  if (is_pre_scan) {
 8016c48:	2900      	cmp	r1, #0
 8016c4a:	d1b0      	bne.n	8016bae <start_pass_2_quant+0x1a>
      cquantize->pub.color_quantize = pass2_no_dither;
 8016c4c:	4b04      	ldr	r3, [pc, #16]	; (8016c60 <start_pass_2_quant+0xcc>)
 8016c4e:	e7c1      	b.n	8016bd4 <start_pass_2_quant+0x40>
 8016c50:	080165ad 	.word	0x080165ad
 8016c54:	08016ea3 	.word	0x08016ea3
 8016c58:	0801691b 	.word	0x0801691b
 8016c5c:	08016b89 	.word	0x08016b89
 8016c60:	08016899 	.word	0x08016899

08016c64 <update_box.isra.0>:
update_box (j_decompress_ptr cinfo, boxptr boxp)
 8016c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  c0min = boxp->c0min;  c0max = boxp->c0max;
 8016c68:	e9d1 7b00 	ldrd	r7, fp, [r1]
  hist3d histogram = cquantize->histogram;
 8016c6c:	6983      	ldr	r3, [r0, #24]
update_box (j_decompress_ptr cinfo, boxptr boxp)
 8016c6e:	b085      	sub	sp, #20
  if (c0max > c0min)
 8016c70:	455f      	cmp	r7, fp
  hist3d histogram = cquantize->histogram;
 8016c72:	9301      	str	r3, [sp, #4]
  c1min = boxp->c1min;  c1max = boxp->c1max;
 8016c74:	463b      	mov	r3, r7
  c2min = boxp->c2min;  c2max = boxp->c2max;
 8016c76:	e9d1 5404 	ldrd	r5, r4, [r1, #16]
  c1min = boxp->c1min;  c1max = boxp->c1max;
 8016c7a:	e9d1 c002 	ldrd	ip, r0, [r1, #8]
  if (c0max > c0min)
 8016c7e:	ea4f 0e45 	mov.w	lr, r5, lsl #1
 8016c82:	db24      	blt.n	8016cce <update_box.isra.0+0x6a>
  if (c1max > c1min)
 8016c84:	4584      	cmp	ip, r0
 8016c86:	4662      	mov	r2, ip
 8016c88:	db5d      	blt.n	8016d46 <update_box.isra.0+0xe2>
  if (c2max > c2min)
 8016c8a:	42a5      	cmp	r5, r4
 8016c8c:	f280 80eb 	bge.w	8016e66 <update_box.isra.0+0x202>
	histp = & histogram[c0][c1min][c2];
 8016c90:	0196      	lsls	r6, r2, #6
 8016c92:	f06f 073f 	mvn.w	r7, #63	; 0x3f
 8016c96:	46ac      	mov	ip, r5
 8016c98:	9602      	str	r6, [sp, #8]
 8016c9a:	fb07 f602 	mul.w	r6, r7, r2
 8016c9e:	9603      	str	r6, [sp, #12]
 8016ca0:	9e02      	ldr	r6, [sp, #8]
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 8016ca2:	469e      	mov	lr, r3
 8016ca4:	eb06 094c 	add.w	r9, r6, ip, lsl #1
 8016ca8:	9e03      	ldr	r6, [sp, #12]
 8016caa:	44b1      	add	r9, r6
 8016cac:	e083      	b.n	8016db6 <update_box.isra.0+0x152>
	histp = & histogram[c0][c1][c2min];
 8016cae:	9a01      	ldr	r2, [sp, #4]
 8016cb0:	eb0e 1988 	add.w	r9, lr, r8, lsl #6
 8016cb4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8016cb8:	444a      	add	r2, r9
  c2min = boxp->c2min;  c2max = boxp->c2max;
 8016cba:	46a9      	mov	r9, r5
	for (c2 = c2min; c2 <= c2max; c2++)
 8016cbc:	454c      	cmp	r4, r9
 8016cbe:	da08      	bge.n	8016cd2 <update_box.isra.0+0x6e>
      for (c1 = c1min; c1 <= c1max; c1++) {
 8016cc0:	f108 0801 	add.w	r8, r8, #1
 8016cc4:	4540      	cmp	r0, r8
 8016cc6:	daf2      	bge.n	8016cae <update_box.isra.0+0x4a>
    for (c0 = c0min; c0 <= c0max; c0++)
 8016cc8:	3301      	adds	r3, #1
 8016cca:	459b      	cmp	fp, r3
 8016ccc:	db0f      	blt.n	8016cee <update_box.isra.0+0x8a>
  c1min = boxp->c1min;  c1max = boxp->c1max;
 8016cce:	46e0      	mov	r8, ip
 8016cd0:	e7f8      	b.n	8016cc4 <update_box.isra.0+0x60>
	  if (*histp++ != 0) {
 8016cd2:	f832 ab02 	ldrh.w	sl, [r2], #2
 8016cd6:	f1ba 0f00 	cmp.w	sl, #0
 8016cda:	d005      	beq.n	8016ce8 <update_box.isra.0+0x84>
  if (c0max > c0min)
 8016cdc:	459b      	cmp	fp, r3
	    boxp->c0min = c0min = c0;
 8016cde:	600b      	str	r3, [r1, #0]
  if (c0max > c0min)
 8016ce0:	ddd0      	ble.n	8016c84 <update_box.isra.0+0x20>
  c1min = boxp->c1min;  c1max = boxp->c1max;
 8016ce2:	465f      	mov	r7, fp
 8016ce4:	46e0      	mov	r8, ip
 8016ce6:	e00f      	b.n	8016d08 <update_box.isra.0+0xa4>
	for (c2 = c2min; c2 <= c2max; c2++)
 8016ce8:	f109 0901 	add.w	r9, r9, #1
 8016cec:	e7e6      	b.n	8016cbc <update_box.isra.0+0x58>
 have_c0min:
 8016cee:	463b      	mov	r3, r7
 8016cf0:	e7f7      	b.n	8016ce2 <update_box.isra.0+0x7e>
	histp = & histogram[c0][c1][c2min];
 8016cf2:	9a01      	ldr	r2, [sp, #4]
 8016cf4:	eb0e 1988 	add.w	r9, lr, r8, lsl #6
 8016cf8:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 8016cfc:	444a      	add	r2, r9
  c2min = boxp->c2min;  c2max = boxp->c2max;
 8016cfe:	46a9      	mov	r9, r5
	for (c2 = c2min; c2 <= c2max; c2++)
 8016d00:	454c      	cmp	r4, r9
 8016d02:	da07      	bge.n	8016d14 <update_box.isra.0+0xb0>
      for (c1 = c1min; c1 <= c1max; c1++) {
 8016d04:	f108 0801 	add.w	r8, r8, #1
 8016d08:	4540      	cmp	r0, r8
 8016d0a:	daf2      	bge.n	8016cf2 <update_box.isra.0+0x8e>
    for (c0 = c0max; c0 >= c0min; c0--)
 8016d0c:	3f01      	subs	r7, #1
 8016d0e:	429f      	cmp	r7, r3
 8016d10:	dbb8      	blt.n	8016c84 <update_box.isra.0+0x20>
 8016d12:	e7e7      	b.n	8016ce4 <update_box.isra.0+0x80>
	  if (*histp++ != 0) {
 8016d14:	f832 ab02 	ldrh.w	sl, [r2], #2
 8016d18:	f1ba 0f00 	cmp.w	sl, #0
 8016d1c:	d002      	beq.n	8016d24 <update_box.isra.0+0xc0>
	    goto have_c0max;
 8016d1e:	46bb      	mov	fp, r7
	    boxp->c0max = c0max = c0;
 8016d20:	604f      	str	r7, [r1, #4]
	    goto have_c0max;
 8016d22:	e7af      	b.n	8016c84 <update_box.isra.0+0x20>
	for (c2 = c2min; c2 <= c2max; c2++)
 8016d24:	f109 0901 	add.w	r9, r9, #1
 8016d28:	e7ea      	b.n	8016d00 <update_box.isra.0+0x9c>
	histp = & histogram[c0][c1][c2min];
 8016d2a:	9e01      	ldr	r6, [sp, #4]
  c2min = boxp->c2min;  c2max = boxp->c2max;
 8016d2c:	46a9      	mov	r9, r5
	histp = & histogram[c0][c1][c2min];
 8016d2e:	f856 7028 	ldr.w	r7, [r6, r8, lsl #2]
 8016d32:	4457      	add	r7, sl
	for (c2 = c2min; c2 <= c2max; c2++)
 8016d34:	454c      	cmp	r4, r9
 8016d36:	da0a      	bge.n	8016d4e <update_box.isra.0+0xea>
      for (c0 = c0min; c0 <= c0max; c0++) {
 8016d38:	f108 0801 	add.w	r8, r8, #1
 8016d3c:	45d8      	cmp	r8, fp
 8016d3e:	ddf4      	ble.n	8016d2a <update_box.isra.0+0xc6>
    for (c1 = c1min; c1 <= c1max; c1++)
 8016d40:	3201      	adds	r2, #1
 8016d42:	4290      	cmp	r0, r2
 8016d44:	db11      	blt.n	8016d6a <update_box.isra.0+0x106>
  c2min = boxp->c2min;  c2max = boxp->c2max;
 8016d46:	4698      	mov	r8, r3
	histp = & histogram[c0][c1][c2min];
 8016d48:	eb0e 1a82 	add.w	sl, lr, r2, lsl #6
 8016d4c:	e7f6      	b.n	8016d3c <update_box.isra.0+0xd8>
	  if (*histp++ != 0) {
 8016d4e:	f837 6b02 	ldrh.w	r6, [r7], #2
 8016d52:	b13e      	cbz	r6, 8016d64 <update_box.isra.0+0x100>
  if (c1max > c1min)
 8016d54:	4290      	cmp	r0, r2
	    boxp->c1min = c1min = c1;
 8016d56:	608a      	str	r2, [r1, #8]
  if (c1max > c1min)
 8016d58:	dd97      	ble.n	8016c8a <update_box.isra.0+0x26>
  c2min = boxp->c2min;  c2max = boxp->c2max;
 8016d5a:	4684      	mov	ip, r0
 8016d5c:	4698      	mov	r8, r3
	histp = & histogram[c0][c1][c2min];
 8016d5e:	eb0e 1a8c 	add.w	sl, lr, ip, lsl #6
 8016d62:	e00d      	b.n	8016d80 <update_box.isra.0+0x11c>
	for (c2 = c2min; c2 <= c2max; c2++)
 8016d64:	f109 0901 	add.w	r9, r9, #1
 8016d68:	e7e4      	b.n	8016d34 <update_box.isra.0+0xd0>
 have_c1min:
 8016d6a:	4662      	mov	r2, ip
 8016d6c:	e7f5      	b.n	8016d5a <update_box.isra.0+0xf6>
	histp = & histogram[c0][c1][c2min];
 8016d6e:	9e01      	ldr	r6, [sp, #4]
  c2min = boxp->c2min;  c2max = boxp->c2max;
 8016d70:	46a9      	mov	r9, r5
	histp = & histogram[c0][c1][c2min];
 8016d72:	f856 7028 	ldr.w	r7, [r6, r8, lsl #2]
 8016d76:	4457      	add	r7, sl
	for (c2 = c2min; c2 <= c2max; c2++)
 8016d78:	454c      	cmp	r4, r9
 8016d7a:	da09      	bge.n	8016d90 <update_box.isra.0+0x12c>
      for (c0 = c0min; c0 <= c0max; c0++) {
 8016d7c:	f108 0801 	add.w	r8, r8, #1
 8016d80:	45c3      	cmp	fp, r8
 8016d82:	daf4      	bge.n	8016d6e <update_box.isra.0+0x10a>
    for (c1 = c1max; c1 >= c1min; c1--)
 8016d84:	f10c 3cff 	add.w	ip, ip, #4294967295
 8016d88:	4594      	cmp	ip, r2
 8016d8a:	f6ff af7e 	blt.w	8016c8a <update_box.isra.0+0x26>
 8016d8e:	e7e5      	b.n	8016d5c <update_box.isra.0+0xf8>
	  if (*histp++ != 0) {
 8016d90:	f837 6b02 	ldrh.w	r6, [r7], #2
 8016d94:	b11e      	cbz	r6, 8016d9e <update_box.isra.0+0x13a>
	    goto have_c1max;
 8016d96:	4660      	mov	r0, ip
	    boxp->c1max = c1max = c1;
 8016d98:	f8c1 c00c 	str.w	ip, [r1, #12]
	    goto have_c1max;
 8016d9c:	e775      	b.n	8016c8a <update_box.isra.0+0x26>
	for (c2 = c2min; c2 <= c2max; c2++)
 8016d9e:	f109 0901 	add.w	r9, r9, #1
 8016da2:	e7e9      	b.n	8016d78 <update_box.isra.0+0x114>
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 8016da4:	9e01      	ldr	r6, [sp, #4]
 8016da6:	4690      	mov	r8, r2
 8016da8:	f856 702e 	ldr.w	r7, [r6, lr, lsl #2]
 8016dac:	444f      	add	r7, r9
 8016dae:	4580      	cmp	r8, r0
 8016db0:	dd11      	ble.n	8016dd6 <update_box.isra.0+0x172>
      for (c0 = c0min; c0 <= c0max; c0++) {
 8016db2:	f10e 0e01 	add.w	lr, lr, #1
 8016db6:	45f3      	cmp	fp, lr
 8016db8:	daf4      	bge.n	8016da4 <update_box.isra.0+0x140>
    for (c2 = c2min; c2 <= c2max; c2++)
 8016dba:	f10c 0c01 	add.w	ip, ip, #1
 8016dbe:	4564      	cmp	r4, ip
 8016dc0:	f6bf af6e 	bge.w	8016ca0 <update_box.isra.0+0x3c>
 have_c2min:
 8016dc4:	46ac      	mov	ip, r5
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 8016dc6:	4627      	mov	r7, r4
 8016dc8:	9d02      	ldr	r5, [sp, #8]
 8016dca:	469e      	mov	lr, r3
 8016dcc:	eb05 0947 	add.w	r9, r5, r7, lsl #1
 8016dd0:	9d03      	ldr	r5, [sp, #12]
 8016dd2:	44a9      	add	r9, r5
 8016dd4:	e034      	b.n	8016e40 <update_box.isra.0+0x1dc>
	  if (*histp != 0) {
 8016dd6:	ea4f 1a88 	mov.w	sl, r8, lsl #6
 8016dda:	f837 a00a 	ldrh.w	sl, [r7, sl]
 8016dde:	f1ba 0f00 	cmp.w	sl, #0
 8016de2:	d021      	beq.n	8016e28 <update_box.isra.0+0x1c4>
  if (c2max > c2min)
 8016de4:	4564      	cmp	r4, ip
	    boxp->c2min = c2min = c2;
 8016de6:	f8c1 c010 	str.w	ip, [r1, #16]
  if (c2max > c2min)
 8016dea:	dcec      	bgt.n	8016dc6 <update_box.isra.0+0x162>
  dist1 = ((c1max - c1min) << C1_SHIFT) * C1_SCALE;
 8016dec:	1a85      	subs	r5, r0, r2
  dist0 = ((c0max - c0min) << C0_SHIFT) * C0_SCALE;
 8016dee:	ebab 0e03 	sub.w	lr, fp, r3
  dist2 = ((c2max - c2min) << C2_SHIFT) * C2_SCALE;
 8016df2:	eba4 070c 	sub.w	r7, r4, ip
 8016df6:	ea4f 094c 	mov.w	r9, ip, lsl #1
  dist1 = ((c1max - c1min) << C1_SHIFT) * C1_SCALE;
 8016dfa:	ea4f 08c5 	mov.w	r8, r5, lsl #3
  dist0 = ((c0max - c0min) << C0_SHIFT) * C0_SCALE;
 8016dfe:	ea4f 0ece 	mov.w	lr, lr, lsl #3
  dist1 = ((c1max - c1min) << C1_SHIFT) * C1_SCALE;
 8016e02:	eb08 0885 	add.w	r8, r8, r5, lsl #2
  dist2 = ((c2max - c2min) << C2_SHIFT) * C2_SCALE;
 8016e06:	013d      	lsls	r5, r7, #4
  boxp->volume = dist0*dist0 + dist1*dist1 + dist2*dist2;
 8016e08:	fb08 f808 	mul.w	r8, r8, r8
 8016e0c:	fb0e 880e 	mla	r8, lr, lr, r8
  ccount = 0;
 8016e10:	f04f 0e00 	mov.w	lr, #0
  boxp->volume = dist0*dist0 + dist1*dist1 + dist2*dist2;
 8016e14:	fb05 8505 	mla	r5, r5, r5, r8
 8016e18:	618d      	str	r5, [r1, #24]
  for (c0 = c0min; c0 <= c0max; c0++)
 8016e1a:	459b      	cmp	fp, r3
 8016e1c:	da3f      	bge.n	8016e9e <update_box.isra.0+0x23a>
  boxp->colorcount = ccount;
 8016e1e:	f8c1 e01c 	str.w	lr, [r1, #28]
}
 8016e22:	b005      	add	sp, #20
 8016e24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 8016e28:	f108 0801 	add.w	r8, r8, #1
 8016e2c:	e7bf      	b.n	8016dae <update_box.isra.0+0x14a>
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 8016e2e:	9d01      	ldr	r5, [sp, #4]
 8016e30:	4690      	mov	r8, r2
 8016e32:	f855 502e 	ldr.w	r5, [r5, lr, lsl #2]
 8016e36:	444d      	add	r5, r9
 8016e38:	4540      	cmp	r0, r8
 8016e3a:	da07      	bge.n	8016e4c <update_box.isra.0+0x1e8>
      for (c0 = c0min; c0 <= c0max; c0++) {
 8016e3c:	f10e 0e01 	add.w	lr, lr, #1
 8016e40:	45f3      	cmp	fp, lr
 8016e42:	daf4      	bge.n	8016e2e <update_box.isra.0+0x1ca>
    for (c2 = c2max; c2 >= c2min; c2--)
 8016e44:	3f01      	subs	r7, #1
 8016e46:	4567      	cmp	r7, ip
 8016e48:	dbd0      	blt.n	8016dec <update_box.isra.0+0x188>
 8016e4a:	e7bd      	b.n	8016dc8 <update_box.isra.0+0x164>
	  if (*histp != 0) {
 8016e4c:	ea4f 1a88 	mov.w	sl, r8, lsl #6
 8016e50:	f835 a00a 	ldrh.w	sl, [r5, sl]
 8016e54:	f1ba 0f00 	cmp.w	sl, #0
 8016e58:	d002      	beq.n	8016e60 <update_box.isra.0+0x1fc>
	    goto have_c2max;
 8016e5a:	463c      	mov	r4, r7
	    boxp->c2max = c2max = c2;
 8016e5c:	614f      	str	r7, [r1, #20]
	    goto have_c2max;
 8016e5e:	e7c5      	b.n	8016dec <update_box.isra.0+0x188>
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 8016e60:	f108 0801 	add.w	r8, r8, #1
 8016e64:	e7e8      	b.n	8016e38 <update_box.isra.0+0x1d4>
 have_c2min:
 8016e66:	46ac      	mov	ip, r5
 8016e68:	e7c0      	b.n	8016dec <update_box.isra.0+0x188>
      for (c2 = c2min; c2 <= c2max; c2++, histp++)
 8016e6a:	eb09 1587 	add.w	r5, r9, r7, lsl #6
 8016e6e:	f1a5 0802 	sub.w	r8, r5, #2
 8016e72:	9d01      	ldr	r5, [sp, #4]
 8016e74:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
 8016e78:	4445      	add	r5, r8
 8016e7a:	46e0      	mov	r8, ip
 8016e7c:	4544      	cmp	r4, r8
 8016e7e:	da04      	bge.n	8016e8a <update_box.isra.0+0x226>
    for (c1 = c1min; c1 <= c1max; c1++) {
 8016e80:	3701      	adds	r7, #1
 8016e82:	42b8      	cmp	r0, r7
 8016e84:	daf1      	bge.n	8016e6a <update_box.isra.0+0x206>
  for (c0 = c0min; c0 <= c0max; c0++)
 8016e86:	3301      	adds	r3, #1
 8016e88:	e7c7      	b.n	8016e1a <update_box.isra.0+0x1b6>
	if (*histp != 0) {
 8016e8a:	f835 af02 	ldrh.w	sl, [r5, #2]!
 8016e8e:	f1ba 0f00 	cmp.w	sl, #0
 8016e92:	d001      	beq.n	8016e98 <update_box.isra.0+0x234>
	  ccount++;
 8016e94:	f10e 0e01 	add.w	lr, lr, #1
      for (c2 = c2min; c2 <= c2max; c2++, histp++)
 8016e98:	f108 0801 	add.w	r8, r8, #1
 8016e9c:	e7ee      	b.n	8016e7c <update_box.isra.0+0x218>
 8016e9e:	4617      	mov	r7, r2
 8016ea0:	e7ef      	b.n	8016e82 <update_box.isra.0+0x21e>

08016ea2 <finish_pass1>:
{
 8016ea2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8016ea6:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
{
 8016eaa:	b08b      	sub	sp, #44	; 0x2c
  boxlist = (boxptr) (*cinfo->mem->alloc_small)
 8016eac:	2101      	movs	r1, #1
  update_box(cinfo, & boxlist[0]);
 8016eae:	f04f 0b01 	mov.w	fp, #1
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8016eb2:	9302      	str	r3, [sp, #8]
  cinfo->colormap = cquantize->sv_colormap;
 8016eb4:	691b      	ldr	r3, [r3, #16]
{
 8016eb6:	9000      	str	r0, [sp, #0]
  cinfo->colormap = cquantize->sv_colormap;
 8016eb8:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  select_colors(cinfo, cquantize->desired);
 8016ebc:	9b02      	ldr	r3, [sp, #8]
 8016ebe:	695b      	ldr	r3, [r3, #20]
 8016ec0:	9301      	str	r3, [sp, #4]
  boxlist = (boxptr) (*cinfo->mem->alloc_small)
 8016ec2:	9a01      	ldr	r2, [sp, #4]
 8016ec4:	6843      	ldr	r3, [r0, #4]
 8016ec6:	0152      	lsls	r2, r2, #5
 8016ec8:	681b      	ldr	r3, [r3, #0]
 8016eca:	4798      	blx	r3
  boxlist[0].c0max = MAXJSAMPLE >> C0_SHIFT;
 8016ecc:	2300      	movs	r3, #0
 8016ece:	221f      	movs	r2, #31
  boxlist[0].c1max = MAXJSAMPLE >> C1_SHIFT;
 8016ed0:	213f      	movs	r1, #63	; 0x3f
  boxlist = (boxptr) (*cinfo->mem->alloc_small)
 8016ed2:	4605      	mov	r5, r0
  boxlist[0].c1min = 0;
 8016ed4:	6083      	str	r3, [r0, #8]
  boxlist[0].c2max = MAXJSAMPLE >> C2_SHIFT;
 8016ed6:	6142      	str	r2, [r0, #20]
 8016ed8:	46a8      	mov	r8, r5
  boxlist[0].c2min = 0;
 8016eda:	e9c0 1303 	strd	r1, r3, [r0, #12]
  boxlist[0].c0max = MAXJSAMPLE >> C0_SHIFT;
 8016ede:	e9c0 3200 	strd	r3, r2, [r0]
  update_box(cinfo, & boxlist[0]);
 8016ee2:	9b00      	ldr	r3, [sp, #0]
 8016ee4:	4601      	mov	r1, r0
 8016ee6:	f8d3 01e0 	ldr.w	r0, [r3, #480]	; 0x1e0
 8016eea:	f7ff febb 	bl	8016c64 <update_box.isra.0>
  while (numboxes < desired_colors) {
 8016eee:	9b01      	ldr	r3, [sp, #4]
 8016ef0:	455b      	cmp	r3, fp
 8016ef2:	dc24      	bgt.n	8016f3e <finish_pass1+0x9c>
 8016ef4:	2300      	movs	r3, #0
  hist3d histogram = cquantize->histogram;
 8016ef6:	9a00      	ldr	r2, [sp, #0]
 8016ef8:	f8d2 21e0 	ldr.w	r2, [r2, #480]	; 0x1e0
 8016efc:	6992      	ldr	r2, [r2, #24]
 8016efe:	9203      	str	r2, [sp, #12]
  c0min = boxp->c0min;  c0max = boxp->c0max;
 8016f00:	e9d8 7200 	ldrd	r7, r2, [r8]
 8016f04:	9204      	str	r2, [sp, #16]
  c1min = boxp->c1min;  c1max = boxp->c1max;
 8016f06:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8016f0a:	9205      	str	r2, [sp, #20]
 8016f0c:	f8d8 200c 	ldr.w	r2, [r8, #12]
 8016f10:	9206      	str	r2, [sp, #24]
  c2min = boxp->c2min;  c2max = boxp->c2max;
 8016f12:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8016f16:	9201      	str	r2, [sp, #4]
 8016f18:	f8d8 2014 	ldr.w	r2, [r8, #20]
 8016f1c:	9207      	str	r2, [sp, #28]
  for (c0 = c0min; c0 <= c0max; c0++)
 8016f1e:	9a01      	ldr	r2, [sp, #4]
 8016f20:	0052      	lsls	r2, r2, #1
 8016f22:	9209      	str	r2, [sp, #36]	; 0x24
  long c2total = 0;
 8016f24:	2200      	movs	r2, #0
  long c1total = 0;
 8016f26:	4692      	mov	sl, r2
  long c0total = 0;
 8016f28:	4691      	mov	r9, r2
  long total = 0;
 8016f2a:	4611      	mov	r1, r2
  for (c0 = c0min; c0 <= c0max; c0++)
 8016f2c:	9804      	ldr	r0, [sp, #16]
 8016f2e:	42b8      	cmp	r0, r7
 8016f30:	f2c0 8098 	blt.w	8017064 <finish_pass1+0x1c2>
 8016f34:	00f8      	lsls	r0, r7, #3
    for (c1 = c1min; c1 <= c1max; c1++) {
 8016f36:	9e05      	ldr	r6, [sp, #20]
 8016f38:	3004      	adds	r0, #4
 8016f3a:	9008      	str	r0, [sp, #32]
 8016f3c:	e07c      	b.n	8017038 <finish_pass1+0x196>
    if (numboxes*2 <= desired_colors) {
 8016f3e:	9b01      	ldr	r3, [sp, #4]
 8016f40:	ebb3 0f4b 	cmp.w	r3, fp, lsl #1
 8016f44:	db4f      	blt.n	8016fe6 <finish_pass1+0x144>
  boxptr which = NULL;
 8016f46:	2300      	movs	r3, #0
 8016f48:	4628      	mov	r0, r5
  for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
 8016f4a:	461e      	mov	r6, r3
  register long maxc = 0;
 8016f4c:	461f      	mov	r7, r3
    if (boxp->colorcount > maxc && boxp->volume > 0) {
 8016f4e:	69c2      	ldr	r2, [r0, #28]
 8016f50:	42ba      	cmp	r2, r7
 8016f52:	dd04      	ble.n	8016f5e <finish_pass1+0xbc>
 8016f54:	6984      	ldr	r4, [r0, #24]
 8016f56:	2c00      	cmp	r4, #0
 8016f58:	bfc4      	itt	gt
 8016f5a:	4603      	movgt	r3, r0
 8016f5c:	4617      	movgt	r7, r2
  for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
 8016f5e:	3601      	adds	r6, #1
 8016f60:	3020      	adds	r0, #32
 8016f62:	45b3      	cmp	fp, r6
 8016f64:	d1f3      	bne.n	8016f4e <finish_pass1+0xac>
    if (b1 == NULL)		/* no splittable boxes left! */
 8016f66:	2b00      	cmp	r3, #0
 8016f68:	d0c5      	beq.n	8016ef6 <finish_pass1+0x54>
    b2->c0max = b1->c0max; b2->c1max = b1->c1max; b2->c2max = b1->c2max;
 8016f6a:	685a      	ldr	r2, [r3, #4]
 8016f6c:	f101 0920 	add.w	r9, r1, #32
 8016f70:	624a      	str	r2, [r1, #36]	; 0x24
 8016f72:	68d8      	ldr	r0, [r3, #12]
 8016f74:	62c8      	str	r0, [r1, #44]	; 0x2c
 8016f76:	6958      	ldr	r0, [r3, #20]
 8016f78:	6348      	str	r0, [r1, #52]	; 0x34
    b2->c0min = b1->c0min; b2->c1min = b1->c1min; b2->c2min = b1->c2min;
 8016f7a:	6818      	ldr	r0, [r3, #0]
 8016f7c:	6208      	str	r0, [r1, #32]
 8016f7e:	6898      	ldr	r0, [r3, #8]
 8016f80:	6288      	str	r0, [r1, #40]	; 0x28
 8016f82:	f8d3 c010 	ldr.w	ip, [r3, #16]
 8016f86:	f8c1 c030 	str.w	ip, [r1, #48]	; 0x30
    c0 = ((b1->c0max - b1->c0min) << C0_SHIFT) * C0_SCALE;
 8016f8a:	6818      	ldr	r0, [r3, #0]
 8016f8c:	9003      	str	r0, [sp, #12]
 8016f8e:	1a10      	subs	r0, r2, r0
 8016f90:	ea4f 0ec0 	mov.w	lr, r0, lsl #3
    c1 = ((b1->c1max - b1->c1min) << C1_SHIFT) * C1_SCALE;
 8016f94:	e9d3 0602 	ldrd	r0, r6, [r3, #8]
 8016f98:	9004      	str	r0, [sp, #16]
 8016f9a:	1a30      	subs	r0, r6, r0
 8016f9c:	00c7      	lsls	r7, r0, #3
 8016f9e:	eb07 0780 	add.w	r7, r7, r0, lsl #2
    c2 = ((b1->c2max - b1->c2min) << C2_SHIFT) * C2_SCALE;
 8016fa2:	6958      	ldr	r0, [r3, #20]
 8016fa4:	eba0 0a0c 	sub.w	sl, r0, ip
    if (c2 > cmax) { cmax = c2; n = 2; }
 8016fa8:	ebb7 1f0a 	cmp.w	r7, sl, lsl #4
    c2 = ((b1->c2max - b1->c2min) << C2_SHIFT) * C2_SCALE;
 8016fac:	ea4f 140a 	mov.w	r4, sl, lsl #4
    if (c2 > cmax) { cmax = c2; n = 2; }
 8016fb0:	f2c0 808c 	blt.w	80170cc <finish_pass1+0x22a>
    if (c0 > cmax) { n = 0; }
 8016fb4:	45be      	cmp	lr, r7
 8016fb6:	dd25      	ble.n	8017004 <finish_pass1+0x162>
      lb = (b1->c0max + b1->c0min) / 2;
 8016fb8:	9803      	ldr	r0, [sp, #12]
 8016fba:	4402      	add	r2, r0
 8016fbc:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8016fc0:	1052      	asrs	r2, r2, #1
      b1->c0max = lb;
 8016fc2:	605a      	str	r2, [r3, #4]
      b2->c0min = lb+1;
 8016fc4:	3201      	adds	r2, #1
 8016fc6:	620a      	str	r2, [r1, #32]
    update_box(cinfo, b1);
 8016fc8:	4619      	mov	r1, r3
 8016fca:	9b00      	ldr	r3, [sp, #0]
    numboxes++;
 8016fcc:	f10b 0b01 	add.w	fp, fp, #1
    update_box(cinfo, b1);
 8016fd0:	f8d3 01e0 	ldr.w	r0, [r3, #480]	; 0x1e0
 8016fd4:	f7ff fe46 	bl	8016c64 <update_box.isra.0>
    update_box(cinfo, b2);
 8016fd8:	9b00      	ldr	r3, [sp, #0]
 8016fda:	4649      	mov	r1, r9
 8016fdc:	f8d3 01e0 	ldr.w	r0, [r3, #480]	; 0x1e0
 8016fe0:	f7ff fe40 	bl	8016c64 <update_box.isra.0>
    numboxes++;
 8016fe4:	e783      	b.n	8016eee <finish_pass1+0x4c>
  boxptr which = NULL;
 8016fe6:	2300      	movs	r3, #0
 8016fe8:	462a      	mov	r2, r5
  for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
 8016fea:	4618      	mov	r0, r3
  register INT32 maxv = 0;
 8016fec:	461e      	mov	r6, r3
    if (boxp->volume > maxv) {
 8016fee:	6997      	ldr	r7, [r2, #24]
  for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
 8016ff0:	3001      	adds	r0, #1
    if (boxp->volume > maxv) {
 8016ff2:	42b7      	cmp	r7, r6
 8016ff4:	bfc4      	itt	gt
 8016ff6:	4613      	movgt	r3, r2
 8016ff8:	463e      	movgt	r6, r7
  for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
 8016ffa:	4583      	cmp	fp, r0
 8016ffc:	f102 0220 	add.w	r2, r2, #32
 8017000:	d1f5      	bne.n	8016fee <finish_pass1+0x14c>
 8017002:	e7b0      	b.n	8016f66 <finish_pass1+0xc4>
      lb = (b1->c1max + b1->c1min) / 2;
 8017004:	9a04      	ldr	r2, [sp, #16]
 8017006:	4416      	add	r6, r2
 8017008:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
 801700c:	1076      	asrs	r6, r6, #1
      b1->c1max = lb;
 801700e:	60de      	str	r6, [r3, #12]
      b2->c1min = lb+1;
 8017010:	3601      	adds	r6, #1
 8017012:	628e      	str	r6, [r1, #40]	; 0x28
      break;
 8017014:	e7d8      	b.n	8016fc8 <finish_pass1+0x126>
      histp = & histogram[c0][c1][c2min];
 8017016:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017018:	ea4f 0e86 	mov.w	lr, r6, lsl #2
 801701c:	9c03      	ldr	r4, [sp, #12]
 801701e:	eb00 1086 	add.w	r0, r0, r6, lsl #6
 8017022:	f10e 0e02 	add.w	lr, lr, #2
 8017026:	f854 5027 	ldr.w	r5, [r4, r7, lsl #2]
      for (c2 = c2min; c2 <= c2max; c2++) {
 801702a:	f8dd c004 	ldr.w	ip, [sp, #4]
      histp = & histogram[c0][c1][c2min];
 801702e:	4428      	add	r0, r5
      for (c2 = c2min; c2 <= c2max; c2++) {
 8017030:	9c07      	ldr	r4, [sp, #28]
 8017032:	4564      	cmp	r4, ip
 8017034:	da05      	bge.n	8017042 <finish_pass1+0x1a0>
    for (c1 = c1min; c1 <= c1max; c1++) {
 8017036:	3601      	adds	r6, #1
 8017038:	9806      	ldr	r0, [sp, #24]
 801703a:	42b0      	cmp	r0, r6
 801703c:	daeb      	bge.n	8017016 <finish_pass1+0x174>
  for (c0 = c0min; c0 <= c0max; c0++)
 801703e:	3701      	adds	r7, #1
 8017040:	e774      	b.n	8016f2c <finish_pass1+0x8a>
	if ((count = *histp++) != 0) {
 8017042:	f830 5b02 	ldrh.w	r5, [r0], #2
 8017046:	b155      	cbz	r5, 801705e <finish_pass1+0x1bc>
	  c0total += ((c0 << C0_SHIFT) + ((1<<C0_SHIFT)>>1)) * count;
 8017048:	9c08      	ldr	r4, [sp, #32]
	  total += count;
 801704a:	4429      	add	r1, r5
	  c1total += ((c1 << C1_SHIFT) + ((1<<C1_SHIFT)>>1)) * count;
 801704c:	fb0e aa05 	mla	sl, lr, r5, sl
	  c0total += ((c0 << C0_SHIFT) + ((1<<C0_SHIFT)>>1)) * count;
 8017050:	fb04 9905 	mla	r9, r4, r5, r9
	  c2total += ((c2 << C2_SHIFT) + ((1<<C2_SHIFT)>>1)) * count;
 8017054:	ea4f 04cc 	mov.w	r4, ip, lsl #3
 8017058:	3404      	adds	r4, #4
 801705a:	fb05 2204 	mla	r2, r5, r4, r2
      for (c2 = c2min; c2 <= c2max; c2++) {
 801705e:	f10c 0c01 	add.w	ip, ip, #1
 8017062:	e7e5      	b.n	8017030 <finish_pass1+0x18e>
  cinfo->colormap[0][icolor] = (JSAMPLE) ((c0total + (total>>1)) / total);
 8017064:	eb09 0961 	add.w	r9, r9, r1, asr #1
 8017068:	9800      	ldr	r0, [sp, #0]
  cinfo->colormap[1][icolor] = (JSAMPLE) ((c1total + (total>>1)) / total);
 801706a:	eb0a 0a61 	add.w	sl, sl, r1, asr #1
  for (i = 0; i < numboxes; i++)
 801706e:	f108 0820 	add.w	r8, r8, #32
  cinfo->colormap[0][icolor] = (JSAMPLE) ((c0total + (total>>1)) / total);
 8017072:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
  cinfo->colormap[2][icolor] = (JSAMPLE) ((c2total + (total>>1)) / total);
 8017076:	eb02 0261 	add.w	r2, r2, r1, asr #1
  cinfo->colormap[0][icolor] = (JSAMPLE) ((c0total + (total>>1)) / total);
 801707a:	fb99 f9f1 	sdiv	r9, r9, r1
 801707e:	6800      	ldr	r0, [r0, #0]
 8017080:	f800 9003 	strb.w	r9, [r0, r3]
  cinfo->colormap[1][icolor] = (JSAMPLE) ((c1total + (total>>1)) / total);
 8017084:	9800      	ldr	r0, [sp, #0]
 8017086:	fb9a faf1 	sdiv	sl, sl, r1
 801708a:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
 801708e:	6840      	ldr	r0, [r0, #4]
 8017090:	f800 a003 	strb.w	sl, [r0, r3]
  cinfo->colormap[2][icolor] = (JSAMPLE) ((c2total + (total>>1)) / total);
 8017094:	9800      	ldr	r0, [sp, #0]
 8017096:	fb92 f1f1 	sdiv	r1, r2, r1
 801709a:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
 801709e:	6880      	ldr	r0, [r0, #8]
 80170a0:	54c1      	strb	r1, [r0, r3]
  for (i = 0; i < numboxes; i++)
 80170a2:	3301      	adds	r3, #1
 80170a4:	455b      	cmp	r3, fp
 80170a6:	f47f af26 	bne.w	8016ef6 <finish_pass1+0x54>
  cinfo->actual_number_of_colors = numboxes;
 80170aa:	9a00      	ldr	r2, [sp, #0]
  TRACEMS1(cinfo, 1, JTRC_QUANT_SELECTED, numboxes);
 80170ac:	2162      	movs	r1, #98	; 0x62
 80170ae:	9800      	ldr	r0, [sp, #0]
  cinfo->actual_number_of_colors = numboxes;
 80170b0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  TRACEMS1(cinfo, 1, JTRC_QUANT_SELECTED, numboxes);
 80170b4:	6812      	ldr	r2, [r2, #0]
 80170b6:	e9c2 1305 	strd	r1, r3, [r2, #20]
 80170ba:	6853      	ldr	r3, [r2, #4]
 80170bc:	2101      	movs	r1, #1
 80170be:	4798      	blx	r3
  cquantize->needs_zeroed = TRUE;
 80170c0:	2301      	movs	r3, #1
 80170c2:	9a02      	ldr	r2, [sp, #8]
 80170c4:	61d3      	str	r3, [r2, #28]
}
 80170c6:	b00b      	add	sp, #44	; 0x2c
 80170c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (c0 > cmax) { n = 0; }
 80170cc:	45a6      	cmp	lr, r4
 80170ce:	f73f af73 	bgt.w	8016fb8 <finish_pass1+0x116>
      lb = (b1->c2max + b1->c2min) / 2;
 80170d2:	4460      	add	r0, ip
 80170d4:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80170d8:	1040      	asrs	r0, r0, #1
      b1->c2max = lb;
 80170da:	6158      	str	r0, [r3, #20]
      b2->c2min = lb+1;
 80170dc:	3001      	adds	r0, #1
 80170de:	6308      	str	r0, [r1, #48]	; 0x30
      break;
 80170e0:	e772      	b.n	8016fc8 <finish_pass1+0x126>
	...

080170e4 <jinit_2pass_quantizer>:
 * Module initialization routine for 2-pass color quantization.
 */

GLOBAL(void)
jinit_2pass_quantizer (j_decompress_ptr cinfo)
{
 80170e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  my_cquantize_ptr cquantize;
  int i;

  cquantize = (my_cquantize_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80170e6:	6843      	ldr	r3, [r0, #4]
 80170e8:	222c      	movs	r2, #44	; 0x2c
 80170ea:	2101      	movs	r1, #1
{
 80170ec:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80170ee:	681b      	ldr	r3, [r3, #0]
 80170f0:	4798      	blx	r3
				SIZEOF(my_cquantizer));
  cinfo->cquantize = (struct jpeg_color_quantizer *) cquantize;
  cquantize->pub.start_pass = start_pass_2_quant;
 80170f2:	4b30      	ldr	r3, [pc, #192]	; (80171b4 <jinit_2pass_quantizer+0xd0>)
  cinfo->cquantize = (struct jpeg_color_quantizer *) cquantize;
 80170f4:	f8c4 01e0 	str.w	r0, [r4, #480]	; 0x1e0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80170f8:	4605      	mov	r5, r0
  cquantize->pub.start_pass = start_pass_2_quant;
 80170fa:	6003      	str	r3, [r0, #0]
  cquantize->pub.new_color_map = new_color_map_2_quant;
 80170fc:	4b2e      	ldr	r3, [pc, #184]	; (80171b8 <jinit_2pass_quantizer+0xd4>)
 80170fe:	60c3      	str	r3, [r0, #12]
  cquantize->fserrors = NULL;	/* flag optional arrays not allocated */
 8017100:	2300      	movs	r3, #0
 8017102:	6203      	str	r3, [r0, #32]
  cquantize->error_limiter = NULL;
 8017104:	6283      	str	r3, [r0, #40]	; 0x28

  /* Make sure jdmaster didn't give me a case I can't handle */
  if (cinfo->out_color_components != 3)
 8017106:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8017108:	2b03      	cmp	r3, #3
 801710a:	d005      	beq.n	8017118 <jinit_2pass_quantizer+0x34>
    ERREXIT(cinfo, JERR_NOTIMPL);
 801710c:	6823      	ldr	r3, [r4, #0]
 801710e:	2230      	movs	r2, #48	; 0x30
 8017110:	4620      	mov	r0, r4
 8017112:	615a      	str	r2, [r3, #20]
 8017114:	681b      	ldr	r3, [r3, #0]
 8017116:	4798      	blx	r3

  /* Allocate the histogram/inverse colormap storage */
  cquantize->histogram = (hist3d) (*cinfo->mem->alloc_small)
 8017118:	6863      	ldr	r3, [r4, #4]
 801711a:	2600      	movs	r6, #0
 801711c:	2280      	movs	r2, #128	; 0x80
 801711e:	2101      	movs	r1, #1
 8017120:	681b      	ldr	r3, [r3, #0]
 8017122:	4620      	mov	r0, r4
 8017124:	4798      	blx	r3
 8017126:	61a8      	str	r0, [r5, #24]
    ((j_common_ptr) cinfo, JPOOL_IMAGE, HIST_C0_ELEMS * SIZEOF(hist2d));
  for (i = 0; i < HIST_C0_ELEMS; i++) {
    cquantize->histogram[i] = (hist2d) (*cinfo->mem->alloc_large)
 8017128:	6863      	ldr	r3, [r4, #4]
 801712a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801712e:	69af      	ldr	r7, [r5, #24]
 8017130:	2101      	movs	r1, #1
 8017132:	685b      	ldr	r3, [r3, #4]
 8017134:	4620      	mov	r0, r4
 8017136:	4798      	blx	r3
 8017138:	51b8      	str	r0, [r7, r6]
  for (i = 0; i < HIST_C0_ELEMS; i++) {
 801713a:	3604      	adds	r6, #4
 801713c:	2e80      	cmp	r6, #128	; 0x80
 801713e:	d1f3      	bne.n	8017128 <jinit_2pass_quantizer+0x44>
      ((j_common_ptr) cinfo, JPOOL_IMAGE,
       HIST_C1_ELEMS*HIST_C2_ELEMS * SIZEOF(histcell));
  }
  cquantize->needs_zeroed = TRUE; /* histogram is garbage now */
 8017140:	2301      	movs	r3, #1
 8017142:	61eb      	str	r3, [r5, #28]

  /* Allocate storage for the completed colormap, if required.
   * We do this now since it is FAR storage and may affect
   * the memory manager's space calculations.
   */
  if (cinfo->enable_2pass_quant) {
 8017144:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8017146:	2b00      	cmp	r3, #0
 8017148:	d031      	beq.n	80171ae <jinit_2pass_quantizer+0xca>
    /* Make sure color count is acceptable */
    int desired = cinfo->desired_number_of_colors;
 801714a:	6e26      	ldr	r6, [r4, #96]	; 0x60
    /* Lower bound on # of colors ... somewhat arbitrary as long as > 0 */
    if (desired < 8)
 801714c:	2e07      	cmp	r6, #7
 801714e:	dc25      	bgt.n	801719c <jinit_2pass_quantizer+0xb8>
      ERREXIT1(cinfo, JERR_QUANT_FEW_COLORS, 8);
 8017150:	223a      	movs	r2, #58	; 0x3a
 8017152:	6823      	ldr	r3, [r4, #0]
 8017154:	615a      	str	r2, [r3, #20]
 8017156:	2208      	movs	r2, #8
    /* Make sure colormap indexes can be represented by JSAMPLEs */
    if (desired > MAXNUMCOLORS)
      ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXNUMCOLORS);
 8017158:	619a      	str	r2, [r3, #24]
 801715a:	4620      	mov	r0, r4
 801715c:	681b      	ldr	r3, [r3, #0]
 801715e:	4798      	blx	r3
    cquantize->sv_colormap = (*cinfo->mem->alloc_sarray)
 8017160:	6863      	ldr	r3, [r4, #4]
 8017162:	4632      	mov	r2, r6
 8017164:	2101      	movs	r1, #1
 8017166:	4620      	mov	r0, r4
 8017168:	689f      	ldr	r7, [r3, #8]
 801716a:	2303      	movs	r3, #3
 801716c:	47b8      	blx	r7
      ((j_common_ptr) cinfo,JPOOL_IMAGE, (JDIMENSION) desired, (JDIMENSION) 3);
    cquantize->desired = desired;
 801716e:	e9c5 0604 	strd	r0, r6, [r5, #16]
  } else
    cquantize->sv_colormap = NULL;

  /* Only F-S dithering or no dithering is supported. */
  /* If user asks for ordered dither, give him F-S. */
  if (cinfo->dither_mode != JDITHER_NONE)
 8017172:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 8017176:	b1e3      	cbz	r3, 80171b2 <jinit_2pass_quantizer+0xce>
    cinfo->dither_mode = JDITHER_FS;
 8017178:	2302      	movs	r3, #2
   * This isn't really needed until pass 2, but again it is FAR storage.
   * Although we will cope with a later change in dither_mode,
   * we do not promise to honor max_memory_to_use if dither_mode changes.
   */
  if (cinfo->dither_mode == JDITHER_FS) {
    cquantize->fserrors = (FSERRPTR) (*cinfo->mem->alloc_large)
 801717a:	6f22      	ldr	r2, [r4, #112]	; 0x70
 801717c:	4620      	mov	r0, r4
 801717e:	2101      	movs	r1, #1
    cinfo->dither_mode = JDITHER_FS;
 8017180:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    cquantize->fserrors = (FSERRPTR) (*cinfo->mem->alloc_large)
 8017184:	2306      	movs	r3, #6
 8017186:	435a      	muls	r2, r3
 8017188:	6863      	ldr	r3, [r4, #4]
 801718a:	320c      	adds	r2, #12
 801718c:	685b      	ldr	r3, [r3, #4]
 801718e:	4798      	blx	r3
 8017190:	6228      	str	r0, [r5, #32]
      ((j_common_ptr) cinfo, JPOOL_IMAGE,
       (size_t) ((cinfo->output_width + 2) * (3 * SIZEOF(FSERROR))));
    /* Might as well create the error-limiting table too. */
    init_error_limit(cinfo);
 8017192:	4620      	mov	r0, r4
  }
}
 8017194:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    init_error_limit(cinfo);
 8017198:	f7ff bcbf 	b.w	8016b1a <init_error_limit>
    if (desired > MAXNUMCOLORS)
 801719c:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 80171a0:	ddde      	ble.n	8017160 <jinit_2pass_quantizer+0x7c>
      ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXNUMCOLORS);
 80171a2:	223b      	movs	r2, #59	; 0x3b
 80171a4:	6823      	ldr	r3, [r4, #0]
 80171a6:	615a      	str	r2, [r3, #20]
 80171a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80171ac:	e7d4      	b.n	8017158 <jinit_2pass_quantizer+0x74>
    cquantize->sv_colormap = NULL;
 80171ae:	612b      	str	r3, [r5, #16]
 80171b0:	e7df      	b.n	8017172 <jinit_2pass_quantizer+0x8e>
}
 80171b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80171b4:	08016b95 	.word	0x08016b95
 80171b8:	08016b8b 	.word	0x08016b8b

080171bc <jdiv_round_up>:
GLOBAL(long)
jdiv_round_up (long a, long b)
/* Compute a/b rounded up to next integer, ie, ceil(a/b) */
/* Assumes a >= 0, b > 0 */
{
  return (a + b - 1L) / b;
 80171bc:	4408      	add	r0, r1
 80171be:	3801      	subs	r0, #1
}
 80171c0:	fb90 f0f1 	sdiv	r0, r0, r1
 80171c4:	4770      	bx	lr

080171c6 <jround_up>:
GLOBAL(long)
jround_up (long a, long b)
/* Compute a rounded up to next multiple of b, ie, ceil(a/b)*b */
/* Assumes a >= 0, b > 0 */
{
  a += b - 1L;
 80171c6:	1e4b      	subs	r3, r1, #1
 80171c8:	4418      	add	r0, r3
  return a - (a % b);
 80171ca:	fb90 f3f1 	sdiv	r3, r0, r1
 80171ce:	fb01 0113 	mls	r1, r1, r3, r0
}
 80171d2:	1a40      	subs	r0, r0, r1
 80171d4:	4770      	bx	lr

080171d6 <jcopy_sample_rows>:
/* Copy some rows of samples from one place to another.
 * num_rows rows are copied from input_array[source_row++]
 * to output_array[dest_row++]; these areas may overlap for duplication.
 * The source and destination arrays must be at least as wide as num_cols.
 */
{
 80171d6:	b570      	push	{r4, r5, r6, lr}
 80171d8:	9e04      	ldr	r6, [sp, #16]
#else
  register JDIMENSION count;
#endif
  register int row;

  input_array += source_row;
 80171da:	eb00 0481 	add.w	r4, r0, r1, lsl #2
  output_array += dest_row;
 80171de:	eb02 0583 	add.w	r5, r2, r3, lsl #2

  for (row = num_rows; row > 0; row--) {
 80171e2:	2e00      	cmp	r6, #0
 80171e4:	dc00      	bgt.n	80171e8 <jcopy_sample_rows+0x12>
#else
    for (count = num_cols; count > 0; count--)
      *outptr++ = *inptr++;	/* needn't bother with GETJSAMPLE() here */
#endif
  }
}
 80171e6:	bd70      	pop	{r4, r5, r6, pc}
    FMEMCOPY(outptr, inptr, count);
 80171e8:	9a05      	ldr	r2, [sp, #20]
  for (row = num_rows; row > 0; row--) {
 80171ea:	3e01      	subs	r6, #1
    FMEMCOPY(outptr, inptr, count);
 80171ec:	f854 1b04 	ldr.w	r1, [r4], #4
 80171f0:	f855 0b04 	ldr.w	r0, [r5], #4
 80171f4:	f013 f800 	bl	802a1f8 <memcpy>
  for (row = num_rows; row > 0; row--) {
 80171f8:	e7f3      	b.n	80171e2 <jcopy_sample_rows+0xc>

080171fa <jcopy_block_row>:

GLOBAL(void)
jcopy_block_row (JBLOCKROW input_row, JBLOCKROW output_row,
		 JDIMENSION num_blocks)
/* Copy a row of coefficient blocks from one place to another. */
{
 80171fa:	460b      	mov	r3, r1
#ifdef FMEMCOPY
  FMEMCOPY(output_row, input_row, num_blocks * (DCTSIZE2 * SIZEOF(JCOEF)));
 80171fc:	01d2      	lsls	r2, r2, #7
 80171fe:	4601      	mov	r1, r0
 8017200:	4618      	mov	r0, r3
 8017202:	f012 bff9 	b.w	802a1f8 <memcpy>

08017206 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8017206:	8880      	ldrh	r0, [r0, #4]
 8017208:	4770      	bx	lr

0801720a <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 801720a:	b570      	push	{r4, r5, r6, lr}
 801720c:	6803      	ldr	r3, [r0, #0]
 801720e:	460c      	mov	r4, r1
 8017210:	2100      	movs	r1, #0
 8017212:	4605      	mov	r5, r0
 8017214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017216:	4798      	blx	r3
 8017218:	4606      	mov	r6, r0
 801721a:	682b      	ldr	r3, [r5, #0]
 801721c:	4628      	mov	r0, r5
 801721e:	1ba4      	subs	r4, r4, r6
 8017220:	6a1b      	ldr	r3, [r3, #32]
 8017222:	b2a4      	uxth	r4, r4
 8017224:	4798      	blx	r3
 8017226:	fbb4 f0f0 	udiv	r0, r4, r0
 801722a:	bd70      	pop	{r4, r5, r6, pc}

0801722c <_ZN8touchgfx17AbstractPartition5clearEv>:
 801722c:	2300      	movs	r3, #0
 801722e:	8083      	strh	r3, [r0, #4]
 8017230:	4770      	bx	lr

08017232 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8017232:	b510      	push	{r4, lr}
 8017234:	6803      	ldr	r3, [r0, #0]
 8017236:	4604      	mov	r4, r0
 8017238:	8881      	ldrh	r1, [r0, #4]
 801723a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801723c:	4798      	blx	r3
 801723e:	88a3      	ldrh	r3, [r4, #4]
 8017240:	3301      	adds	r3, #1
 8017242:	80a3      	strh	r3, [r4, #4]
 8017244:	bd10      	pop	{r4, pc}

08017246 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8017246:	6803      	ldr	r3, [r0, #0]
 8017248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801724a:	4718      	bx	r3

0801724c <_ZN8touchgfx17AbstractPartitionD1Ev>:
 801724c:	4770      	bx	lr
	...

08017250 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8017250:	4a02      	ldr	r2, [pc, #8]	; (801725c <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 8017252:	6002      	str	r2, [r0, #0]
 8017254:	2200      	movs	r2, #0
 8017256:	8082      	strh	r2, [r0, #4]
 8017258:	4770      	bx	lr
 801725a:	bf00      	nop
 801725c:	0802fa3c 	.word	0x0802fa3c

08017260 <_ZN8touchgfx9Container13getFirstChildEv>:
 8017260:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8017262:	4770      	bx	lr

08017264 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8017264:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8017266:	2000      	movs	r0, #0
 8017268:	b12b      	cbz	r3, 8017276 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 801726a:	b920      	cbnz	r0, 8017276 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 801726c:	1a5a      	subs	r2, r3, r1
 801726e:	699b      	ldr	r3, [r3, #24]
 8017270:	4250      	negs	r0, r2
 8017272:	4150      	adcs	r0, r2
 8017274:	e7f8      	b.n	8017268 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 8017276:	4770      	bx	lr

08017278 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8017278:	2300      	movs	r3, #0
 801727a:	6148      	str	r0, [r1, #20]
 801727c:	618b      	str	r3, [r1, #24]
 801727e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8017280:	b913      	cbnz	r3, 8017288 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 8017282:	6281      	str	r1, [r0, #40]	; 0x28
 8017284:	4770      	bx	lr
 8017286:	4613      	mov	r3, r2
 8017288:	699a      	ldr	r2, [r3, #24]
 801728a:	2a00      	cmp	r2, #0
 801728c:	d1fb      	bne.n	8017286 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 801728e:	6199      	str	r1, [r3, #24]
 8017290:	4770      	bx	lr

08017292 <_ZN8touchgfx9Container9removeAllEv>:
 8017292:	2200      	movs	r2, #0
 8017294:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8017296:	b123      	cbz	r3, 80172a2 <_ZN8touchgfx9Container9removeAllEv+0x10>
 8017298:	6999      	ldr	r1, [r3, #24]
 801729a:	6281      	str	r1, [r0, #40]	; 0x28
 801729c:	e9c3 2205 	strd	r2, r2, [r3, #20]
 80172a0:	e7f8      	b.n	8017294 <_ZN8touchgfx9Container9removeAllEv+0x2>
 80172a2:	4770      	bx	lr

080172a4 <_ZN8touchgfx9Container6unlinkEv>:
 80172a4:	2300      	movs	r3, #0
 80172a6:	6283      	str	r3, [r0, #40]	; 0x28
 80172a8:	4770      	bx	lr

080172aa <_ZNK8touchgfx9Container12getSolidRectEv>:
 80172aa:	2200      	movs	r2, #0
 80172ac:	8002      	strh	r2, [r0, #0]
 80172ae:	8042      	strh	r2, [r0, #2]
 80172b0:	8082      	strh	r2, [r0, #4]
 80172b2:	80c2      	strh	r2, [r0, #6]
 80172b4:	4770      	bx	lr

080172b6 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 80172b6:	b570      	push	{r4, r5, r6, lr}
 80172b8:	460d      	mov	r5, r1
 80172ba:	4616      	mov	r6, r2
 80172bc:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80172be:	b13c      	cbz	r4, 80172d0 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 80172c0:	6823      	ldr	r3, [r4, #0]
 80172c2:	4620      	mov	r0, r4
 80172c4:	4632      	mov	r2, r6
 80172c6:	4629      	mov	r1, r5
 80172c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80172ca:	4798      	blx	r3
 80172cc:	69a4      	ldr	r4, [r4, #24]
 80172ce:	e7f6      	b.n	80172be <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 80172d0:	bd70      	pop	{r4, r5, r6, pc}

080172d2 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 80172d2:	b538      	push	{r3, r4, r5, lr}
 80172d4:	460d      	mov	r5, r1
 80172d6:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80172d8:	b134      	cbz	r4, 80172e8 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 80172da:	682b      	ldr	r3, [r5, #0]
 80172dc:	4621      	mov	r1, r4
 80172de:	4628      	mov	r0, r5
 80172e0:	689b      	ldr	r3, [r3, #8]
 80172e2:	4798      	blx	r3
 80172e4:	69a4      	ldr	r4, [r4, #24]
 80172e6:	e7f7      	b.n	80172d8 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 80172e8:	bd38      	pop	{r3, r4, r5, pc}

080172ea <_ZNK8touchgfx9Container17invalidateContentEv>:
 80172ea:	b510      	push	{r4, lr}
 80172ec:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80172ee:	b12c      	cbz	r4, 80172fc <_ZNK8touchgfx9Container17invalidateContentEv+0x12>
 80172f0:	6823      	ldr	r3, [r4, #0]
 80172f2:	4620      	mov	r0, r4
 80172f4:	699b      	ldr	r3, [r3, #24]
 80172f6:	4798      	blx	r3
 80172f8:	69a4      	ldr	r4, [r4, #24]
 80172fa:	e7f8      	b.n	80172ee <_ZNK8touchgfx9Container17invalidateContentEv+0x4>
 80172fc:	bd10      	pop	{r4, pc}

080172fe <_ZN8touchgfx9ContainerD1Ev>:
 80172fe:	4770      	bx	lr

08017300 <_ZN8touchgfx9ContainerD0Ev>:
 8017300:	b510      	push	{r4, lr}
 8017302:	4604      	mov	r4, r0
 8017304:	212c      	movs	r1, #44	; 0x2c
 8017306:	f012 fec7 	bl	802a098 <_ZdlPvj>
 801730a:	4620      	mov	r0, r4
 801730c:	bd10      	pop	{r4, pc}

0801730e <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 801730e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8017310:	b19b      	cbz	r3, 801733a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8017312:	428b      	cmp	r3, r1
 8017314:	d109      	bne.n	801732a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8017316:	699a      	ldr	r2, [r3, #24]
 8017318:	2100      	movs	r1, #0
 801731a:	6159      	str	r1, [r3, #20]
 801731c:	6282      	str	r2, [r0, #40]	; 0x28
 801731e:	b902      	cbnz	r2, 8017322 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8017320:	4770      	bx	lr
 8017322:	6199      	str	r1, [r3, #24]
 8017324:	4770      	bx	lr
 8017326:	4613      	mov	r3, r2
 8017328:	b13a      	cbz	r2, 801733a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 801732a:	699a      	ldr	r2, [r3, #24]
 801732c:	428a      	cmp	r2, r1
 801732e:	d1fa      	bne.n	8017326 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8017330:	698a      	ldr	r2, [r1, #24]
 8017332:	619a      	str	r2, [r3, #24]
 8017334:	2300      	movs	r3, #0
 8017336:	e9c1 3305 	strd	r3, r3, [r1, #20]
 801733a:	4770      	bx	lr

0801733c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 801733c:	b410      	push	{r4}
 801733e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8017340:	4604      	mov	r4, r0
 8017342:	b92b      	cbnz	r3, 8017350 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8017344:	6803      	ldr	r3, [r0, #0]
 8017346:	4611      	mov	r1, r2
 8017348:	f85d 4b04 	ldr.w	r4, [sp], #4
 801734c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801734e:	4718      	bx	r3
 8017350:	b941      	cbnz	r1, 8017364 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8017352:	6193      	str	r3, [r2, #24]
 8017354:	6282      	str	r2, [r0, #40]	; 0x28
 8017356:	6154      	str	r4, [r2, #20]
 8017358:	f85d 4b04 	ldr.w	r4, [sp], #4
 801735c:	4770      	bx	lr
 801735e:	4603      	mov	r3, r0
 8017360:	2800      	cmp	r0, #0
 8017362:	d0f9      	beq.n	8017358 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8017364:	4299      	cmp	r1, r3
 8017366:	6998      	ldr	r0, [r3, #24]
 8017368:	d1f9      	bne.n	801735e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 801736a:	6190      	str	r0, [r2, #24]
 801736c:	618a      	str	r2, [r1, #24]
 801736e:	e7f2      	b.n	8017356 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

08017370 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8017370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017374:	461f      	mov	r7, r3
 8017376:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 801737a:	460d      	mov	r5, r1
 801737c:	4616      	mov	r6, r2
 801737e:	b103      	cbz	r3, 8017382 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8017380:	6038      	str	r0, [r7, #0]
 8017382:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8017384:	b314      	cbz	r4, 80173cc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8017386:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 801738a:	b1eb      	cbz	r3, 80173c8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801738c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8017390:	428d      	cmp	r5, r1
 8017392:	db19      	blt.n	80173c8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8017394:	b289      	uxth	r1, r1
 8017396:	8923      	ldrh	r3, [r4, #8]
 8017398:	440b      	add	r3, r1
 801739a:	b21b      	sxth	r3, r3
 801739c:	429d      	cmp	r5, r3
 801739e:	da13      	bge.n	80173c8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80173a0:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80173a4:	4296      	cmp	r6, r2
 80173a6:	db0f      	blt.n	80173c8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80173a8:	b292      	uxth	r2, r2
 80173aa:	8963      	ldrh	r3, [r4, #10]
 80173ac:	4413      	add	r3, r2
 80173ae:	b21b      	sxth	r3, r3
 80173b0:	429e      	cmp	r6, r3
 80173b2:	da09      	bge.n	80173c8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80173b4:	6823      	ldr	r3, [r4, #0]
 80173b6:	1ab2      	subs	r2, r6, r2
 80173b8:	1a69      	subs	r1, r5, r1
 80173ba:	4620      	mov	r0, r4
 80173bc:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
 80173c0:	b212      	sxth	r2, r2
 80173c2:	463b      	mov	r3, r7
 80173c4:	b209      	sxth	r1, r1
 80173c6:	47c0      	blx	r8
 80173c8:	69a4      	ldr	r4, [r4, #24]
 80173ca:	e7db      	b.n	8017384 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 80173cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080173d0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 80173d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80173d4:	4c6d      	ldr	r4, [pc, #436]	; (801758c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 80173d6:	b0a1      	sub	sp, #132	; 0x84
 80173d8:	4606      	mov	r6, r0
 80173da:	6824      	ldr	r4, [r4, #0]
 80173dc:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 80173de:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 80173e2:	2400      	movs	r4, #0
 80173e4:	9303      	str	r3, [sp, #12]
 80173e6:	802c      	strh	r4, [r5, #0]
 80173e8:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 80173ea:	802c      	strh	r4, [r5, #0]
 80173ec:	601c      	str	r4, [r3, #0]
 80173ee:	e9cd 1201 	strd	r1, r2, [sp, #4]
 80173f2:	f7ff ffbd 	bl	8017370 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 80173f6:	f1b9 0f03 	cmp.w	r9, #3
 80173fa:	f340 80c1 	ble.w	8017580 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 80173fe:	4631      	mov	r1, r6
 8017400:	a80c      	add	r0, sp, #48	; 0x30
 8017402:	f005 f827 	bl	801c454 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017406:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 801740a:	9306      	str	r3, [sp, #24]
 801740c:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8017410:	9307      	str	r3, [sp, #28]
 8017412:	9b03      	ldr	r3, [sp, #12]
 8017414:	f8d3 a000 	ldr.w	sl, [r3]
 8017418:	f1ba 0f00 	cmp.w	sl, #0
 801741c:	f000 80b3 	beq.w	8017586 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 8017420:	4651      	mov	r1, sl
 8017422:	a810      	add	r0, sp, #64	; 0x40
 8017424:	f005 f816 	bl	801c454 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017428:	2002      	movs	r0, #2
 801742a:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 801742e:	9b01      	ldr	r3, [sp, #4]
 8017430:	9a06      	ldr	r2, [sp, #24]
 8017432:	fb91 f1f0 	sdiv	r1, r1, r0
 8017436:	189d      	adds	r5, r3, r2
 8017438:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 801743c:	9a07      	ldr	r2, [sp, #28]
 801743e:	4419      	add	r1, r3
 8017440:	9b02      	ldr	r3, [sp, #8]
 8017442:	4413      	add	r3, r2
 8017444:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 8017448:	1a6d      	subs	r5, r5, r1
 801744a:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801744e:	fb92 f2f0 	sdiv	r2, r2, r0
 8017452:	440a      	add	r2, r1
 8017454:	1a9b      	subs	r3, r3, r2
 8017456:	435b      	muls	r3, r3
 8017458:	fb05 3505 	mla	r5, r5, r5, r3
 801745c:	4f4c      	ldr	r7, [pc, #304]	; (8017590 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 801745e:	ac10      	add	r4, sp, #64	; 0x40
 8017460:	f1b9 0f0c 	cmp.w	r9, #12
 8017464:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8017466:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017468:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801746a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801746c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801746e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017470:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8017474:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8017478:	f04f 0303 	mov.w	r3, #3
 801747c:	bfd8      	it	le
 801747e:	f109 32ff 	addle.w	r2, r9, #4294967295
 8017482:	f04f 0400 	mov.w	r4, #0
 8017486:	f8cd 9000 	str.w	r9, [sp]
 801748a:	bfcc      	ite	gt
 801748c:	4698      	movgt	r8, r3
 801748e:	fb92 f8f3 	sdivle	r8, r2, r3
 8017492:	1c63      	adds	r3, r4, #1
 8017494:	aa10      	add	r2, sp, #64	; 0x40
 8017496:	f004 0401 	and.w	r4, r4, #1
 801749a:	f04f 0b00 	mov.w	fp, #0
 801749e:	9308      	str	r3, [sp, #32]
 80174a0:	9b00      	ldr	r3, [sp, #0]
 80174a2:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 80174a6:	fb93 f3f8 	sdiv	r3, r3, r8
 80174aa:	3404      	adds	r4, #4
 80174ac:	b29b      	uxth	r3, r3
 80174ae:	9304      	str	r3, [sp, #16]
 80174b0:	9a04      	ldr	r2, [sp, #16]
 80174b2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80174b6:	fb13 f302 	smulbb	r3, r3, r2
 80174ba:	9a01      	ldr	r2, [sp, #4]
 80174bc:	b29b      	uxth	r3, r3
 80174be:	1899      	adds	r1, r3, r2
 80174c0:	9305      	str	r3, [sp, #20]
 80174c2:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 80174c6:	b209      	sxth	r1, r1
 80174c8:	4299      	cmp	r1, r3
 80174ca:	db4d      	blt.n	8017568 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80174cc:	8932      	ldrh	r2, [r6, #8]
 80174ce:	4413      	add	r3, r2
 80174d0:	b21b      	sxth	r3, r3
 80174d2:	4299      	cmp	r1, r3
 80174d4:	da48      	bge.n	8017568 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80174d6:	9b04      	ldr	r3, [sp, #16]
 80174d8:	6827      	ldr	r7, [r4, #0]
 80174da:	fb17 f703 	smulbb	r7, r7, r3
 80174de:	9b02      	ldr	r3, [sp, #8]
 80174e0:	b2bf      	uxth	r7, r7
 80174e2:	18fa      	adds	r2, r7, r3
 80174e4:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 80174e8:	b212      	sxth	r2, r2
 80174ea:	429a      	cmp	r2, r3
 80174ec:	db3c      	blt.n	8017568 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80174ee:	8970      	ldrh	r0, [r6, #10]
 80174f0:	4403      	add	r3, r0
 80174f2:	b21b      	sxth	r3, r3
 80174f4:	429a      	cmp	r2, r3
 80174f6:	da37      	bge.n	8017568 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80174f8:	2300      	movs	r3, #0
 80174fa:	4630      	mov	r0, r6
 80174fc:	930b      	str	r3, [sp, #44]	; 0x2c
 80174fe:	ab0b      	add	r3, sp, #44	; 0x2c
 8017500:	f7ff ff36 	bl	8017370 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8017504:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017506:	b37a      	cbz	r2, 8017568 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8017508:	4552      	cmp	r2, sl
 801750a:	d02d      	beq.n	8017568 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 801750c:	4611      	mov	r1, r2
 801750e:	a80e      	add	r0, sp, #56	; 0x38
 8017510:	9209      	str	r2, [sp, #36]	; 0x24
 8017512:	f004 ff9f 	bl	801c454 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017516:	f04f 0e02 	mov.w	lr, #2
 801751a:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 801751e:	9a06      	ldr	r2, [sp, #24]
 8017520:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 8017524:	9b01      	ldr	r3, [sp, #4]
 8017526:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 801752a:	4413      	add	r3, r2
 801752c:	9a07      	ldr	r2, [sp, #28]
 801752e:	fb91 f1fe 	sdiv	r1, r1, lr
 8017532:	fb9c fcfe 	sdiv	ip, ip, lr
 8017536:	4401      	add	r1, r0
 8017538:	1a58      	subs	r0, r3, r1
 801753a:	9b02      	ldr	r3, [sp, #8]
 801753c:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 8017540:	4413      	add	r3, r2
 8017542:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017544:	448c      	add	ip, r1
 8017546:	eba3 030c 	sub.w	r3, r3, ip
 801754a:	435b      	muls	r3, r3
 801754c:	fb00 3300 	mla	r3, r0, r0, r3
 8017550:	42ab      	cmp	r3, r5
 8017552:	d208      	bcs.n	8017566 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 8017554:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017556:	461d      	mov	r5, r3
 8017558:	9803      	ldr	r0, [sp, #12]
 801755a:	6001      	str	r1, [r0, #0]
 801755c:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801755e:	9805      	ldr	r0, [sp, #20]
 8017560:	8008      	strh	r0, [r1, #0]
 8017562:	992b      	ldr	r1, [sp, #172]	; 0xac
 8017564:	800f      	strh	r7, [r1, #0]
 8017566:	4692      	mov	sl, r2
 8017568:	f10b 0b01 	add.w	fp, fp, #1
 801756c:	3408      	adds	r4, #8
 801756e:	f1bb 0f04 	cmp.w	fp, #4
 8017572:	d19d      	bne.n	80174b0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 8017574:	9b00      	ldr	r3, [sp, #0]
 8017576:	9c08      	ldr	r4, [sp, #32]
 8017578:	444b      	add	r3, r9
 801757a:	4544      	cmp	r4, r8
 801757c:	9300      	str	r3, [sp, #0]
 801757e:	d188      	bne.n	8017492 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 8017580:	b021      	add	sp, #132	; 0x84
 8017582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017586:	f04f 35ff 	mov.w	r5, #4294967295
 801758a:	e767      	b.n	801745c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 801758c:	200177c4 	.word	0x200177c4
 8017590:	0802b630 	.word	0x0802b630

08017594 <_ZN8touchgfx4RectaNERKS0_>:
 8017594:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017598:	f9b1 7000 	ldrsh.w	r7, [r1]
 801759c:	888c      	ldrh	r4, [r1, #4]
 801759e:	f9b0 9000 	ldrsh.w	r9, [r0]
 80175a2:	443c      	add	r4, r7
 80175a4:	b2a4      	uxth	r4, r4
 80175a6:	fa0f f884 	sxth.w	r8, r4
 80175aa:	45c1      	cmp	r9, r8
 80175ac:	da2f      	bge.n	801760e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80175ae:	8882      	ldrh	r2, [r0, #4]
 80175b0:	444a      	add	r2, r9
 80175b2:	b292      	uxth	r2, r2
 80175b4:	fa0f fe82 	sxth.w	lr, r2
 80175b8:	4577      	cmp	r7, lr
 80175ba:	da28      	bge.n	801760e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80175bc:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 80175c0:	88cb      	ldrh	r3, [r1, #6]
 80175c2:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 80175c6:	442b      	add	r3, r5
 80175c8:	b21b      	sxth	r3, r3
 80175ca:	429e      	cmp	r6, r3
 80175cc:	da1f      	bge.n	801760e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80175ce:	88c3      	ldrh	r3, [r0, #6]
 80175d0:	4433      	add	r3, r6
 80175d2:	b29b      	uxth	r3, r3
 80175d4:	fa0f fc83 	sxth.w	ip, r3
 80175d8:	4565      	cmp	r5, ip
 80175da:	da18      	bge.n	801760e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80175dc:	454f      	cmp	r7, r9
 80175de:	bfb8      	it	lt
 80175e0:	464f      	movlt	r7, r9
 80175e2:	42b5      	cmp	r5, r6
 80175e4:	bfb8      	it	lt
 80175e6:	4635      	movlt	r5, r6
 80175e8:	45f0      	cmp	r8, lr
 80175ea:	bfd8      	it	le
 80175ec:	4622      	movle	r2, r4
 80175ee:	1bd2      	subs	r2, r2, r7
 80175f0:	8082      	strh	r2, [r0, #4]
 80175f2:	884a      	ldrh	r2, [r1, #2]
 80175f4:	88c9      	ldrh	r1, [r1, #6]
 80175f6:	8007      	strh	r7, [r0, #0]
 80175f8:	440a      	add	r2, r1
 80175fa:	8045      	strh	r5, [r0, #2]
 80175fc:	b292      	uxth	r2, r2
 80175fe:	b211      	sxth	r1, r2
 8017600:	458c      	cmp	ip, r1
 8017602:	bfa8      	it	ge
 8017604:	4613      	movge	r3, r2
 8017606:	1b5b      	subs	r3, r3, r5
 8017608:	80c3      	strh	r3, [r0, #6]
 801760a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801760e:	2300      	movs	r3, #0
 8017610:	8003      	strh	r3, [r0, #0]
 8017612:	8043      	strh	r3, [r0, #2]
 8017614:	8083      	strh	r3, [r0, #4]
 8017616:	80c3      	strh	r3, [r0, #6]
 8017618:	e7f7      	b.n	801760a <_ZN8touchgfx4RectaNERKS0_+0x76>

0801761a <_ZNK8touchgfx4Rect7isEmptyEv>:
 801761a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801761e:	2b00      	cmp	r3, #0
 8017620:	dd06      	ble.n	8017630 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8017622:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8017626:	2800      	cmp	r0, #0
 8017628:	bfcc      	ite	gt
 801762a:	2000      	movgt	r0, #0
 801762c:	2001      	movle	r0, #1
 801762e:	4770      	bx	lr
 8017630:	2001      	movs	r0, #1
 8017632:	4770      	bx	lr

08017634 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8017634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017638:	2300      	movs	r3, #0
 801763a:	4604      	mov	r4, r0
 801763c:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801763e:	8003      	strh	r3, [r0, #0]
 8017640:	8043      	strh	r3, [r0, #2]
 8017642:	8083      	strh	r3, [r0, #4]
 8017644:	80c3      	strh	r3, [r0, #6]
 8017646:	2d00      	cmp	r5, #0
 8017648:	d040      	beq.n	80176cc <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 801764a:	1d28      	adds	r0, r5, #4
 801764c:	f7ff ffe5 	bl	801761a <_ZNK8touchgfx4Rect7isEmptyEv>
 8017650:	b988      	cbnz	r0, 8017676 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8017652:	4620      	mov	r0, r4
 8017654:	f7ff ffe1 	bl	801761a <_ZNK8touchgfx4Rect7isEmptyEv>
 8017658:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 801765c:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8017660:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8017664:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8017668:	b138      	cbz	r0, 801767a <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 801766a:	8022      	strh	r2, [r4, #0]
 801766c:	8063      	strh	r3, [r4, #2]
 801766e:	f8a4 e004 	strh.w	lr, [r4, #4]
 8017672:	f8a4 c006 	strh.w	ip, [r4, #6]
 8017676:	69ad      	ldr	r5, [r5, #24]
 8017678:	e7e5      	b.n	8017646 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 801767a:	f9b4 0000 	ldrsh.w	r0, [r4]
 801767e:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8017682:	4290      	cmp	r0, r2
 8017684:	4607      	mov	r7, r0
 8017686:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 801768a:	460e      	mov	r6, r1
 801768c:	bfa8      	it	ge
 801768e:	4617      	movge	r7, r2
 8017690:	4299      	cmp	r1, r3
 8017692:	4472      	add	r2, lr
 8017694:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8017698:	bfa8      	it	ge
 801769a:	461e      	movge	r6, r3
 801769c:	4440      	add	r0, r8
 801769e:	4471      	add	r1, lr
 80176a0:	4463      	add	r3, ip
 80176a2:	b200      	sxth	r0, r0
 80176a4:	8027      	strh	r7, [r4, #0]
 80176a6:	b212      	sxth	r2, r2
 80176a8:	8066      	strh	r6, [r4, #2]
 80176aa:	b209      	sxth	r1, r1
 80176ac:	b21b      	sxth	r3, r3
 80176ae:	4290      	cmp	r0, r2
 80176b0:	bfac      	ite	ge
 80176b2:	ebc7 0200 	rsbge	r2, r7, r0
 80176b6:	ebc7 0202 	rsblt	r2, r7, r2
 80176ba:	4299      	cmp	r1, r3
 80176bc:	bfac      	ite	ge
 80176be:	ebc6 0301 	rsbge	r3, r6, r1
 80176c2:	ebc6 0303 	rsblt	r3, r6, r3
 80176c6:	80a2      	strh	r2, [r4, #4]
 80176c8:	80e3      	strh	r3, [r4, #6]
 80176ca:	e7d4      	b.n	8017676 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 80176cc:	4620      	mov	r0, r4
 80176ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080176d2 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 80176d2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80176d6:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80176da:	b383      	cbz	r3, 801773e <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 80176dc:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80176de:	b374      	cbz	r4, 801773e <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 80176e0:	f9b1 5000 	ldrsh.w	r5, [r1]
 80176e4:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 80176e8:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 80176ec:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 80176f0:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80176f4:	b303      	cbz	r3, 8017738 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 80176f6:	4668      	mov	r0, sp
 80176f8:	1d21      	adds	r1, r4, #4
 80176fa:	f8ad 5000 	strh.w	r5, [sp]
 80176fe:	f8ad 6002 	strh.w	r6, [sp, #2]
 8017702:	f8ad 7004 	strh.w	r7, [sp, #4]
 8017706:	f8ad 8006 	strh.w	r8, [sp, #6]
 801770a:	f7ff ff43 	bl	8017594 <_ZN8touchgfx4RectaNERKS0_>
 801770e:	4668      	mov	r0, sp
 8017710:	f7ff ff83 	bl	801761a <_ZNK8touchgfx4Rect7isEmptyEv>
 8017714:	b980      	cbnz	r0, 8017738 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8017716:	f8bd 3000 	ldrh.w	r3, [sp]
 801771a:	4669      	mov	r1, sp
 801771c:	88a2      	ldrh	r2, [r4, #4]
 801771e:	4620      	mov	r0, r4
 8017720:	1a9b      	subs	r3, r3, r2
 8017722:	88e2      	ldrh	r2, [r4, #6]
 8017724:	f8ad 3000 	strh.w	r3, [sp]
 8017728:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801772c:	1a9b      	subs	r3, r3, r2
 801772e:	f8ad 3002 	strh.w	r3, [sp, #2]
 8017732:	6823      	ldr	r3, [r4, #0]
 8017734:	689b      	ldr	r3, [r3, #8]
 8017736:	4798      	blx	r3
 8017738:	69a4      	ldr	r4, [r4, #24]
 801773a:	2c00      	cmp	r4, #0
 801773c:	d1d8      	bne.n	80176f0 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 801773e:	b002      	add	sp, #8
 8017740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017744 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8017744:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017746:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 801774a:	460d      	mov	r5, r1
 801774c:	4616      	mov	r6, r2
 801774e:	b323      	cbz	r3, 801779a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8017750:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8017752:	b314      	cbz	r4, 801779a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8017754:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8017758:	b1eb      	cbz	r3, 8017796 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 801775a:	6828      	ldr	r0, [r5, #0]
 801775c:	466b      	mov	r3, sp
 801775e:	6869      	ldr	r1, [r5, #4]
 8017760:	c303      	stmia	r3!, {r0, r1}
 8017762:	4668      	mov	r0, sp
 8017764:	1d21      	adds	r1, r4, #4
 8017766:	f7ff ff15 	bl	8017594 <_ZN8touchgfx4RectaNERKS0_>
 801776a:	4668      	mov	r0, sp
 801776c:	f7ff ff55 	bl	801761a <_ZNK8touchgfx4Rect7isEmptyEv>
 8017770:	b988      	cbnz	r0, 8017796 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8017772:	f8bd 3000 	ldrh.w	r3, [sp]
 8017776:	4669      	mov	r1, sp
 8017778:	88a2      	ldrh	r2, [r4, #4]
 801777a:	4620      	mov	r0, r4
 801777c:	1a9b      	subs	r3, r3, r2
 801777e:	88e2      	ldrh	r2, [r4, #6]
 8017780:	f8ad 3000 	strh.w	r3, [sp]
 8017784:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8017788:	1a9b      	subs	r3, r3, r2
 801778a:	4632      	mov	r2, r6
 801778c:	f8ad 3002 	strh.w	r3, [sp, #2]
 8017790:	6823      	ldr	r3, [r4, #0]
 8017792:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017794:	4798      	blx	r3
 8017796:	69a4      	ldr	r4, [r4, #24]
 8017798:	e7db      	b.n	8017752 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 801779a:	b002      	add	sp, #8
 801779c:	bd70      	pop	{r4, r5, r6, pc}

0801779e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 801779e:	6803      	ldr	r3, [r0, #0]
 80177a0:	b513      	push	{r0, r1, r4, lr}
 80177a2:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 80177a6:	2300      	movs	r3, #0
 80177a8:	e9cd 3300 	strd	r3, r3, [sp]
 80177ac:	466b      	mov	r3, sp
 80177ae:	47a0      	blx	r4
 80177b0:	b002      	add	sp, #8
 80177b2:	bd10      	pop	{r4, pc}

080177b4 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 80177b4:	2301      	movs	r3, #1
 80177b6:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 80177ba:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 80177be:	4770      	bx	lr

080177c0 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 80177c0:	2301      	movs	r3, #1
 80177c2:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 80177c6:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 80177ca:	4770      	bx	lr

080177cc <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 80177cc:	6843      	ldr	r3, [r0, #4]
 80177ce:	2201      	movs	r2, #1
 80177d0:	725a      	strb	r2, [r3, #9]
 80177d2:	6840      	ldr	r0, [r0, #4]
 80177d4:	6803      	ldr	r3, [r0, #0]
 80177d6:	691b      	ldr	r3, [r3, #16]
 80177d8:	4718      	bx	r3

080177da <_ZN8touchgfx3HAL8flushDMAEv>:
 80177da:	6840      	ldr	r0, [r0, #4]
 80177dc:	6803      	ldr	r3, [r0, #0]
 80177de:	689b      	ldr	r3, [r3, #8]
 80177e0:	4718      	bx	r3

080177e2 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 80177e2:	b530      	push	{r4, r5, lr}
 80177e4:	b08b      	sub	sp, #44	; 0x2c
 80177e6:	6804      	ldr	r4, [r0, #0]
 80177e8:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 80177ec:	9509      	str	r5, [sp, #36]	; 0x24
 80177ee:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 80177f2:	9508      	str	r5, [sp, #32]
 80177f4:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 80177f8:	9507      	str	r5, [sp, #28]
 80177fa:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 80177fe:	9506      	str	r5, [sp, #24]
 8017800:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 8017804:	9505      	str	r5, [sp, #20]
 8017806:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 801780a:	9504      	str	r5, [sp, #16]
 801780c:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 8017810:	9503      	str	r5, [sp, #12]
 8017812:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8017816:	9502      	str	r5, [sp, #8]
 8017818:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 801781c:	e9cd 3500 	strd	r3, r5, [sp]
 8017820:	4613      	mov	r3, r2
 8017822:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 8017824:	2200      	movs	r2, #0
 8017826:	47a0      	blx	r4
 8017828:	b00b      	add	sp, #44	; 0x2c
 801782a:	bd30      	pop	{r4, r5, pc}

0801782c <_ZN8touchgfx3HAL10beginFrameEv>:
 801782c:	4b04      	ldr	r3, [pc, #16]	; (8017840 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 801782e:	781b      	ldrb	r3, [r3, #0]
 8017830:	b123      	cbz	r3, 801783c <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8017832:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 8017836:	f080 0001 	eor.w	r0, r0, #1
 801783a:	4770      	bx	lr
 801783c:	2001      	movs	r0, #1
 801783e:	4770      	bx	lr
 8017840:	200177c2 	.word	0x200177c2

08017844 <_ZN8touchgfx3HAL8endFrameEv>:
 8017844:	b510      	push	{r4, lr}
 8017846:	4604      	mov	r4, r0
 8017848:	6840      	ldr	r0, [r0, #4]
 801784a:	6803      	ldr	r3, [r0, #0]
 801784c:	689b      	ldr	r3, [r3, #8]
 801784e:	4798      	blx	r3
 8017850:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 8017854:	b113      	cbz	r3, 801785c <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8017856:	2301      	movs	r3, #1
 8017858:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 801785c:	bd10      	pop	{r4, pc}

0801785e <_ZN8touchgfx3HAL10initializeEv>:
 801785e:	b510      	push	{r4, lr}
 8017860:	4604      	mov	r4, r0
 8017862:	f7ea fae9 	bl	8001e38 <_ZN8touchgfx10OSWrappers10initializeEv>
 8017866:	6860      	ldr	r0, [r4, #4]
 8017868:	6803      	ldr	r3, [r0, #0]
 801786a:	68db      	ldr	r3, [r3, #12]
 801786c:	4798      	blx	r3
 801786e:	68e0      	ldr	r0, [r4, #12]
 8017870:	6803      	ldr	r3, [r0, #0]
 8017872:	689b      	ldr	r3, [r3, #8]
 8017874:	4798      	blx	r3
 8017876:	6823      	ldr	r3, [r4, #0]
 8017878:	4620      	mov	r0, r4
 801787a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801787c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017880:	4718      	bx	r3

08017882 <_ZN8touchgfx3HAL9taskEntryEv>:
 8017882:	b508      	push	{r3, lr}
 8017884:	6803      	ldr	r3, [r0, #0]
 8017886:	4604      	mov	r4, r0
 8017888:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801788c:	4798      	blx	r3
 801788e:	6823      	ldr	r3, [r4, #0]
 8017890:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017892:	4620      	mov	r0, r4
 8017894:	4798      	blx	r3
 8017896:	f7ea fb1b 	bl	8001ed0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 801789a:	6823      	ldr	r3, [r4, #0]
 801789c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801789e:	e7f8      	b.n	8017892 <_ZN8touchgfx3HAL9taskEntryEv+0x10>

080178a0 <_ZN8touchgfx3HAL4tickEv>:
 80178a0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80178a2:	6803      	ldr	r3, [r0, #0]
 80178a4:	4604      	mov	r4, r0
 80178a6:	4d5b      	ldr	r5, [pc, #364]	; (8017a14 <_ZN8touchgfx3HAL4tickEv+0x174>)
 80178a8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80178ac:	4798      	blx	r3
 80178ae:	2800      	cmp	r0, #0
 80178b0:	f000 8095 	beq.w	80179de <_ZN8touchgfx3HAL4tickEv+0x13e>
 80178b4:	2001      	movs	r0, #1
 80178b6:	2600      	movs	r6, #0
 80178b8:	f7ea f936 	bl	8001b28 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 80178bc:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 80178c0:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 80178c4:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 80178c8:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 80178cc:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 80178d0:	b133      	cbz	r3, 80178e0 <_ZN8touchgfx3HAL4tickEv+0x40>
 80178d2:	6823      	ldr	r3, [r4, #0]
 80178d4:	4620      	mov	r0, r4
 80178d6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80178da:	4798      	blx	r3
 80178dc:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 80178e0:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 80178e4:	2601      	movs	r6, #1
 80178e6:	6862      	ldr	r2, [r4, #4]
 80178e8:	f083 0301 	eor.w	r3, r3, #1
 80178ec:	702e      	strb	r6, [r5, #0]
 80178ee:	7253      	strb	r3, [r2, #9]
 80178f0:	f003 fd7c 	bl	801b3ec <_ZN8touchgfx11Application11getInstanceEv>
 80178f4:	6803      	ldr	r3, [r0, #0]
 80178f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80178f8:	4798      	blx	r3
 80178fa:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 80178fe:	b90b      	cbnz	r3, 8017904 <_ZN8touchgfx3HAL4tickEv+0x64>
 8017900:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 8017904:	f003 fd72 	bl	801b3ec <_ZN8touchgfx11Application11getInstanceEv>
 8017908:	6803      	ldr	r3, [r0, #0]
 801790a:	695b      	ldr	r3, [r3, #20]
 801790c:	4798      	blx	r3
 801790e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017910:	6803      	ldr	r3, [r0, #0]
 8017912:	691b      	ldr	r3, [r3, #16]
 8017914:	4798      	blx	r3
 8017916:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 801791a:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 801791e:	3b01      	subs	r3, #1
 8017920:	b2db      	uxtb	r3, r3
 8017922:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8017926:	b10a      	cbz	r2, 801792c <_ZN8touchgfx3HAL4tickEv+0x8c>
 8017928:	2b00      	cmp	r3, #0
 801792a:	d1eb      	bne.n	8017904 <_ZN8touchgfx3HAL4tickEv+0x64>
 801792c:	4a3a      	ldr	r2, [pc, #232]	; (8017a18 <_ZN8touchgfx3HAL4tickEv+0x178>)
 801792e:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 8017932:	7813      	ldrb	r3, [r2, #0]
 8017934:	3301      	adds	r3, #1
 8017936:	b25b      	sxtb	r3, r3
 8017938:	4299      	cmp	r1, r3
 801793a:	7013      	strb	r3, [r2, #0]
 801793c:	dc10      	bgt.n	8017960 <_ZN8touchgfx3HAL4tickEv+0xc0>
 801793e:	2300      	movs	r3, #0
 8017940:	68e0      	ldr	r0, [r4, #12]
 8017942:	a902      	add	r1, sp, #8
 8017944:	7013      	strb	r3, [r2, #0]
 8017946:	aa03      	add	r2, sp, #12
 8017948:	6803      	ldr	r3, [r0, #0]
 801794a:	68db      	ldr	r3, [r3, #12]
 801794c:	4798      	blx	r3
 801794e:	6823      	ldr	r3, [r4, #0]
 8017950:	2800      	cmp	r0, #0
 8017952:	d050      	beq.n	80179f6 <_ZN8touchgfx3HAL4tickEv+0x156>
 8017954:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8017958:	4620      	mov	r0, r4
 801795a:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801795e:	4798      	blx	r3
 8017960:	2300      	movs	r3, #0
 8017962:	6960      	ldr	r0, [r4, #20]
 8017964:	f88d 3007 	strb.w	r3, [sp, #7]
 8017968:	b158      	cbz	r0, 8017982 <_ZN8touchgfx3HAL4tickEv+0xe2>
 801796a:	6803      	ldr	r3, [r0, #0]
 801796c:	f10d 0107 	add.w	r1, sp, #7
 8017970:	68db      	ldr	r3, [r3, #12]
 8017972:	4798      	blx	r3
 8017974:	b128      	cbz	r0, 8017982 <_ZN8touchgfx3HAL4tickEv+0xe2>
 8017976:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017978:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801797c:	6803      	ldr	r3, [r0, #0]
 801797e:	68db      	ldr	r3, [r3, #12]
 8017980:	4798      	blx	r3
 8017982:	f104 001c 	add.w	r0, r4, #28
 8017986:	f011 fee5 	bl	8029754 <_ZN8touchgfx8Gestures4tickEv>
 801798a:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 801798e:	b30b      	cbz	r3, 80179d4 <_ZN8touchgfx3HAL4tickEv+0x134>
 8017990:	6920      	ldr	r0, [r4, #16]
 8017992:	6803      	ldr	r3, [r0, #0]
 8017994:	691b      	ldr	r3, [r3, #16]
 8017996:	4798      	blx	r3
 8017998:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801799a:	4606      	mov	r6, r0
 801799c:	b903      	cbnz	r3, 80179a0 <_ZN8touchgfx3HAL4tickEv+0x100>
 801799e:	6720      	str	r0, [r4, #112]	; 0x70
 80179a0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80179a2:	4a1e      	ldr	r2, [pc, #120]	; (8017a1c <_ZN8touchgfx3HAL4tickEv+0x17c>)
 80179a4:	1af3      	subs	r3, r6, r3
 80179a6:	4293      	cmp	r3, r2
 80179a8:	d914      	bls.n	80179d4 <_ZN8touchgfx3HAL4tickEv+0x134>
 80179aa:	6920      	ldr	r0, [r4, #16]
 80179ac:	6803      	ldr	r3, [r0, #0]
 80179ae:	699b      	ldr	r3, [r3, #24]
 80179b0:	4798      	blx	r3
 80179b2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80179b4:	2264      	movs	r2, #100	; 0x64
 80179b6:	1af3      	subs	r3, r6, r3
 80179b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80179bc:	fbb0 f0f3 	udiv	r0, r0, r3
 80179c0:	2800      	cmp	r0, #0
 80179c2:	dc1d      	bgt.n	8017a00 <_ZN8touchgfx3HAL4tickEv+0x160>
 80179c4:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 80179c8:	6920      	ldr	r0, [r4, #16]
 80179ca:	2100      	movs	r1, #0
 80179cc:	6803      	ldr	r3, [r0, #0]
 80179ce:	69db      	ldr	r3, [r3, #28]
 80179d0:	4798      	blx	r3
 80179d2:	6726      	str	r6, [r4, #112]	; 0x70
 80179d4:	f003 fd0a 	bl	801b3ec <_ZN8touchgfx11Application11getInstanceEv>
 80179d8:	6803      	ldr	r3, [r0, #0]
 80179da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80179dc:	4798      	blx	r3
 80179de:	6823      	ldr	r3, [r4, #0]
 80179e0:	4620      	mov	r0, r4
 80179e2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80179e6:	4798      	blx	r3
 80179e8:	2001      	movs	r0, #1
 80179ea:	f7ea f8cd 	bl	8001b88 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 80179ee:	2300      	movs	r3, #0
 80179f0:	702b      	strb	r3, [r5, #0]
 80179f2:	b004      	add	sp, #16
 80179f4:	bd70      	pop	{r4, r5, r6, pc}
 80179f6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80179fa:	4620      	mov	r0, r4
 80179fc:	4798      	blx	r3
 80179fe:	e7af      	b.n	8017960 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8017a00:	2863      	cmp	r0, #99	; 0x63
 8017a02:	bfcb      	itete	gt
 8017a04:	2300      	movgt	r3, #0
 8017a06:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 8017a0a:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 8017a0e:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 8017a12:	e7d9      	b.n	80179c8 <_ZN8touchgfx3HAL4tickEv+0x128>
 8017a14:	200177c8 	.word	0x200177c8
 8017a18:	200177c9 	.word	0x200177c9
 8017a1c:	05f5e100 	.word	0x05f5e100

08017a20 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8017a20:	f7ea ba3a 	b.w	8001e98 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08017a24 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8017a24:	6581      	str	r1, [r0, #88]	; 0x58
 8017a26:	301c      	adds	r0, #28
 8017a28:	f011 be92 	b.w	8029750 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08017a2c <_ZN8touchgfx3HAL5touchEll>:
 8017a2c:	b530      	push	{r4, r5, lr}
 8017a2e:	b087      	sub	sp, #28
 8017a30:	4604      	mov	r4, r0
 8017a32:	a804      	add	r0, sp, #16
 8017a34:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8017a38:	f003 fa38 	bl	801aeac <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8017a3c:	9b04      	ldr	r3, [sp, #16]
 8017a3e:	a906      	add	r1, sp, #24
 8017a40:	a803      	add	r0, sp, #12
 8017a42:	f8ad 300c 	strh.w	r3, [sp, #12]
 8017a46:	9b05      	ldr	r3, [sp, #20]
 8017a48:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8017a4c:	f003 fa80 	bl	801af50 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8017a50:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 8017a54:	f104 001c 	add.w	r0, r4, #28
 8017a58:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8017a5c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8017a60:	b189      	cbz	r1, 8017a86 <_ZN8touchgfx3HAL5touchEll+0x5a>
 8017a62:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 8017a66:	9300      	str	r3, [sp, #0]
 8017a68:	4613      	mov	r3, r2
 8017a6a:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8017a6e:	462a      	mov	r2, r5
 8017a70:	f011 fe7e 	bl	8029770 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8017a74:	b128      	cbz	r0, 8017a82 <_ZN8touchgfx3HAL5touchEll+0x56>
 8017a76:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8017a7a:	65e3      	str	r3, [r4, #92]	; 0x5c
 8017a7c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8017a80:	6623      	str	r3, [r4, #96]	; 0x60
 8017a82:	b007      	add	sp, #28
 8017a84:	bd30      	pop	{r4, r5, pc}
 8017a86:	f011 feb3 	bl	80297f0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8017a8a:	2301      	movs	r3, #1
 8017a8c:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8017a90:	e7f1      	b.n	8017a76 <_ZN8touchgfx3HAL5touchEll+0x4a>

08017a92 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 8017a92:	b510      	push	{r4, lr}
 8017a94:	2b00      	cmp	r3, #0
 8017a96:	d046      	beq.n	8017b26 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8017a98:	ea81 0002 	eor.w	r0, r1, r2
 8017a9c:	07c4      	lsls	r4, r0, #31
 8017a9e:	d508      	bpl.n	8017ab2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8017aa0:	440b      	add	r3, r1
 8017aa2:	3a01      	subs	r2, #1
 8017aa4:	428b      	cmp	r3, r1
 8017aa6:	d93e      	bls.n	8017b26 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8017aa8:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8017aac:	f801 0b01 	strb.w	r0, [r1], #1
 8017ab0:	e7f8      	b.n	8017aa4 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8017ab2:	07d0      	lsls	r0, r2, #31
 8017ab4:	bf42      	ittt	mi
 8017ab6:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 8017aba:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8017abe:	f801 0b01 	strbmi.w	r0, [r1], #1
 8017ac2:	2b01      	cmp	r3, #1
 8017ac4:	d911      	bls.n	8017aea <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8017ac6:	ea81 0402 	eor.w	r4, r1, r2
 8017aca:	4610      	mov	r0, r2
 8017acc:	07a4      	lsls	r4, r4, #30
 8017ace:	d022      	beq.n	8017b16 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 8017ad0:	f023 0401 	bic.w	r4, r3, #1
 8017ad4:	440c      	add	r4, r1
 8017ad6:	428c      	cmp	r4, r1
 8017ad8:	4602      	mov	r2, r0
 8017ada:	d904      	bls.n	8017ae6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 8017adc:	8812      	ldrh	r2, [r2, #0]
 8017ade:	3002      	adds	r0, #2
 8017ae0:	f821 2b02 	strh.w	r2, [r1], #2
 8017ae4:	e7f7      	b.n	8017ad6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 8017ae6:	f003 0301 	and.w	r3, r3, #1
 8017aea:	f023 0003 	bic.w	r0, r3, #3
 8017aee:	4408      	add	r0, r1
 8017af0:	4288      	cmp	r0, r1
 8017af2:	4614      	mov	r4, r2
 8017af4:	d904      	bls.n	8017b00 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 8017af6:	6824      	ldr	r4, [r4, #0]
 8017af8:	3204      	adds	r2, #4
 8017afa:	f841 4b04 	str.w	r4, [r1], #4
 8017afe:	e7f7      	b.n	8017af0 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 8017b00:	f003 0303 	and.w	r3, r3, #3
 8017b04:	3a01      	subs	r2, #1
 8017b06:	440b      	add	r3, r1
 8017b08:	428b      	cmp	r3, r1
 8017b0a:	d90c      	bls.n	8017b26 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8017b0c:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8017b10:	f801 0b01 	strb.w	r0, [r1], #1
 8017b14:	e7f8      	b.n	8017b08 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 8017b16:	0790      	lsls	r0, r2, #30
 8017b18:	d0e7      	beq.n	8017aea <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8017b1a:	f832 0b02 	ldrh.w	r0, [r2], #2
 8017b1e:	3b02      	subs	r3, #2
 8017b20:	f821 0b02 	strh.w	r0, [r1], #2
 8017b24:	e7e1      	b.n	8017aea <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8017b26:	2001      	movs	r0, #1
 8017b28:	bd10      	pop	{r4, pc}

08017b2a <_ZN8touchgfx3HAL7noTouchEv>:
 8017b2a:	b510      	push	{r4, lr}
 8017b2c:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 8017b30:	4604      	mov	r4, r0
 8017b32:	b153      	cbz	r3, 8017b4a <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8017b34:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 8017b38:	2101      	movs	r1, #1
 8017b3a:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 8017b3e:	301c      	adds	r0, #28
 8017b40:	f011 fe56 	bl	80297f0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8017b44:	2300      	movs	r3, #0
 8017b46:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8017b4a:	bd10      	pop	{r4, pc}

08017b4c <_ZN8touchgfx3HAL3lcdEv>:
 8017b4c:	4b04      	ldr	r3, [pc, #16]	; (8017b60 <_ZN8touchgfx3HAL3lcdEv+0x14>)
 8017b4e:	681b      	ldr	r3, [r3, #0]
 8017b50:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8017b54:	b10a      	cbz	r2, 8017b5a <_ZN8touchgfx3HAL3lcdEv+0xe>
 8017b56:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8017b58:	b900      	cbnz	r0, 8017b5c <_ZN8touchgfx3HAL3lcdEv+0x10>
 8017b5a:	6898      	ldr	r0, [r3, #8]
 8017b5c:	4770      	bx	lr
 8017b5e:	bf00      	nop
 8017b60:	200177c4 	.word	0x200177c4

08017b64 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8017b64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017b68:	b085      	sub	sp, #20
 8017b6a:	4604      	mov	r4, r0
 8017b6c:	2000      	movs	r0, #0
 8017b6e:	4699      	mov	r9, r3
 8017b70:	ad04      	add	r5, sp, #16
 8017b72:	460f      	mov	r7, r1
 8017b74:	4690      	mov	r8, r2
 8017b76:	f845 0d04 	str.w	r0, [r5, #-4]!
 8017b7a:	69a0      	ldr	r0, [r4, #24]
 8017b7c:	6806      	ldr	r6, [r0, #0]
 8017b7e:	9501      	str	r5, [sp, #4]
 8017b80:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 8017b84:	9500      	str	r5, [sp, #0]
 8017b86:	6835      	ldr	r5, [r6, #0]
 8017b88:	47a8      	blx	r5
 8017b8a:	4d10      	ldr	r5, [pc, #64]	; (8017bcc <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 8017b8c:	4606      	mov	r6, r0
 8017b8e:	f8a5 9000 	strh.w	r9, [r5]
 8017b92:	f7ff ffdb 	bl	8017b4c <_ZN8touchgfx3HAL3lcdEv>
 8017b96:	6803      	ldr	r3, [r0, #0]
 8017b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017b9a:	4798      	blx	r3
 8017b9c:	b128      	cbz	r0, 8017baa <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 8017b9e:	2801      	cmp	r0, #1
 8017ba0:	d00b      	beq.n	8017bba <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 8017ba2:	4630      	mov	r0, r6
 8017ba4:	b005      	add	sp, #20
 8017ba6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017baa:	882b      	ldrh	r3, [r5, #0]
 8017bac:	fb08 7203 	mla	r2, r8, r3, r7
 8017bb0:	9b03      	ldr	r3, [sp, #12]
 8017bb2:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8017bb6:	63e3      	str	r3, [r4, #60]	; 0x3c
 8017bb8:	e7f3      	b.n	8017ba2 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8017bba:	882a      	ldrh	r2, [r5, #0]
 8017bbc:	9b03      	ldr	r3, [sp, #12]
 8017bbe:	fb08 7202 	mla	r2, r8, r2, r7
 8017bc2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017bc6:	1a9a      	subs	r2, r3, r2
 8017bc8:	63e2      	str	r2, [r4, #60]	; 0x3c
 8017bca:	e7ea      	b.n	8017ba2 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8017bcc:	200177be 	.word	0x200177be

08017bd0 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 8017bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017bd2:	b08b      	sub	sp, #44	; 0x2c
 8017bd4:	4617      	mov	r7, r2
 8017bd6:	4604      	mov	r4, r0
 8017bd8:	460e      	mov	r6, r1
 8017bda:	461d      	mov	r5, r3
 8017bdc:	f7ff ffb6 	bl	8017b4c <_ZN8touchgfx3HAL3lcdEv>
 8017be0:	6803      	ldr	r3, [r0, #0]
 8017be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017be4:	4798      	blx	r3
 8017be6:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8017bea:	9007      	str	r0, [sp, #28]
 8017bec:	4631      	mov	r1, r6
 8017bee:	6822      	ldr	r2, [r4, #0]
 8017bf0:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8017bf4:	4b0c      	ldr	r3, [pc, #48]	; (8017c28 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 8017bf6:	4620      	mov	r0, r4
 8017bf8:	881b      	ldrh	r3, [r3, #0]
 8017bfa:	9306      	str	r3, [sp, #24]
 8017bfc:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8017c00:	9305      	str	r3, [sp, #20]
 8017c02:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8017c06:	9304      	str	r3, [sp, #16]
 8017c08:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8017c0c:	9303      	str	r3, [sp, #12]
 8017c0e:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8017c12:	9302      	str	r3, [sp, #8]
 8017c14:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8017c18:	e9cd 5300 	strd	r5, r3, [sp]
 8017c1c:	463b      	mov	r3, r7
 8017c1e:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 8017c20:	2200      	movs	r2, #0
 8017c22:	47a8      	blx	r5
 8017c24:	b00b      	add	sp, #44	; 0x2c
 8017c26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017c28:	200177be 	.word	0x200177be

08017c2c <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 8017c2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017c30:	4698      	mov	r8, r3
 8017c32:	6803      	ldr	r3, [r0, #0]
 8017c34:	b08b      	sub	sp, #44	; 0x2c
 8017c36:	4617      	mov	r7, r2
 8017c38:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8017c3a:	460e      	mov	r6, r1
 8017c3c:	4b13      	ldr	r3, [pc, #76]	; (8017c8c <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 8017c3e:	4604      	mov	r4, r0
 8017c40:	f8b3 9000 	ldrh.w	r9, [r3]
 8017c44:	f7ff ff82 	bl	8017b4c <_ZN8touchgfx3HAL3lcdEv>
 8017c48:	6803      	ldr	r3, [r0, #0]
 8017c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017c4c:	4798      	blx	r3
 8017c4e:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8017c52:	2200      	movs	r2, #0
 8017c54:	4631      	mov	r1, r6
 8017c56:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8017c5a:	2302      	movs	r3, #2
 8017c5c:	4620      	mov	r0, r4
 8017c5e:	e9cd 9306 	strd	r9, r3, [sp, #24]
 8017c62:	2301      	movs	r3, #1
 8017c64:	9305      	str	r3, [sp, #20]
 8017c66:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8017c6a:	9304      	str	r3, [sp, #16]
 8017c6c:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8017c70:	9303      	str	r3, [sp, #12]
 8017c72:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8017c76:	9302      	str	r3, [sp, #8]
 8017c78:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8017c7c:	e9cd 8300 	strd	r8, r3, [sp]
 8017c80:	463b      	mov	r3, r7
 8017c82:	47a8      	blx	r5
 8017c84:	b00b      	add	sp, #44	; 0x2c
 8017c86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017c8a:	bf00      	nop
 8017c8c:	200177be 	.word	0x200177be

08017c90 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 8017c90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017c94:	4698      	mov	r8, r3
 8017c96:	6803      	ldr	r3, [r0, #0]
 8017c98:	b087      	sub	sp, #28
 8017c9a:	460e      	mov	r6, r1
 8017c9c:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 8017c9e:	4617      	mov	r7, r2
 8017ca0:	4b0f      	ldr	r3, [pc, #60]	; (8017ce0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 8017ca2:	4604      	mov	r4, r0
 8017ca4:	f8b3 9000 	ldrh.w	r9, [r3]
 8017ca8:	f7ff ff50 	bl	8017b4c <_ZN8touchgfx3HAL3lcdEv>
 8017cac:	6803      	ldr	r3, [r0, #0]
 8017cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017cb0:	4798      	blx	r3
 8017cb2:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8017cb6:	463a      	mov	r2, r7
 8017cb8:	4631      	mov	r1, r6
 8017cba:	f8cd 900c 	str.w	r9, [sp, #12]
 8017cbe:	e9cd 0304 	strd	r0, r3, [sp, #16]
 8017cc2:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8017cc6:	4620      	mov	r0, r4
 8017cc8:	9302      	str	r3, [sp, #8]
 8017cca:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8017cce:	9301      	str	r3, [sp, #4]
 8017cd0:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8017cd4:	9300      	str	r3, [sp, #0]
 8017cd6:	4643      	mov	r3, r8
 8017cd8:	47a8      	blx	r5
 8017cda:	b007      	add	sp, #28
 8017cdc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017ce0:	200177be 	.word	0x200177be

08017ce4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8017ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ce8:	4604      	mov	r4, r0
 8017cea:	b08f      	sub	sp, #60	; 0x3c
 8017cec:	4610      	mov	r0, r2
 8017cee:	460d      	mov	r5, r1
 8017cf0:	4691      	mov	r9, r2
 8017cf2:	461e      	mov	r6, r3
 8017cf4:	f005 ff6c 	bl	801dbd0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8017cf8:	2800      	cmp	r0, #0
 8017cfa:	f000 809d 	beq.w	8017e38 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 8017cfe:	6823      	ldr	r3, [r4, #0]
 8017d00:	4620      	mov	r0, r4
 8017d02:	f8df b198 	ldr.w	fp, [pc, #408]	; 8017e9c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 8017d06:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8017d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017d0c:	4798      	blx	r3
 8017d0e:	6823      	ldr	r3, [r4, #0]
 8017d10:	4620      	mov	r0, r4
 8017d12:	f8df a18c 	ldr.w	sl, [pc, #396]	; 8017ea0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 8017d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017d18:	4798      	blx	r3
 8017d1a:	f8bb 3000 	ldrh.w	r3, [fp]
 8017d1e:	4f5c      	ldr	r7, [pc, #368]	; (8017e90 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8017d20:	9301      	str	r3, [sp, #4]
 8017d22:	f8ba 3000 	ldrh.w	r3, [sl]
 8017d26:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 8017d2a:	4640      	mov	r0, r8
 8017d2c:	9302      	str	r3, [sp, #8]
 8017d2e:	883b      	ldrh	r3, [r7, #0]
 8017d30:	9303      	str	r3, [sp, #12]
 8017d32:	4b58      	ldr	r3, [pc, #352]	; (8017e94 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8017d34:	881a      	ldrh	r2, [r3, #0]
 8017d36:	9305      	str	r3, [sp, #20]
 8017d38:	9204      	str	r2, [sp, #16]
 8017d3a:	f005 ffdd 	bl	801dcf8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017d3e:	8038      	strh	r0, [r7, #0]
 8017d40:	4640      	mov	r0, r8
 8017d42:	f006 f80d 	bl	801dd60 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017d46:	9b05      	ldr	r3, [sp, #20]
 8017d48:	b280      	uxth	r0, r0
 8017d4a:	8018      	strh	r0, [r3, #0]
 8017d4c:	4b52      	ldr	r3, [pc, #328]	; (8017e98 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 8017d4e:	781b      	ldrb	r3, [r3, #0]
 8017d50:	2b00      	cmp	r3, #0
 8017d52:	d174      	bne.n	8017e3e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 8017d54:	883b      	ldrh	r3, [r7, #0]
 8017d56:	f8aa 0000 	strh.w	r0, [sl]
 8017d5a:	f8ab 3000 	strh.w	r3, [fp]
 8017d5e:	4648      	mov	r0, r9
 8017d60:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 8017d64:	f005 ff34 	bl	801dbd0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8017d68:	2200      	movs	r2, #0
 8017d6a:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 8017d6e:	4611      	mov	r1, r2
 8017d70:	4628      	mov	r0, r5
 8017d72:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 8017d76:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 8017d7a:	f7eb ff1f 	bl	8003bbc <_ZN8touchgfx8Drawable5setXYEss>
 8017d7e:	2301      	movs	r3, #1
 8017d80:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 8017d84:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 8017d88:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8017d8c:	2b00      	cmp	r3, #0
 8017d8e:	dd5c      	ble.n	8017e4a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8017d90:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8017d94:	2b00      	cmp	r3, #0
 8017d96:	dd58      	ble.n	8017e4a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8017d98:	462a      	mov	r2, r5
 8017d9a:	ab0a      	add	r3, sp, #40	; 0x28
 8017d9c:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8017da0:	6851      	ldr	r1, [r2, #4]
 8017da2:	c303      	stmia	r3!, {r0, r1}
 8017da4:	4631      	mov	r1, r6
 8017da6:	a80a      	add	r0, sp, #40	; 0x28
 8017da8:	f7ff fbf4 	bl	8017594 <_ZN8touchgfx4RectaNERKS0_>
 8017dac:	4b38      	ldr	r3, [pc, #224]	; (8017e90 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8017dae:	2100      	movs	r1, #0
 8017db0:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017db4:	4b37      	ldr	r3, [pc, #220]	; (8017e94 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8017db6:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8017dba:	aa0a      	add	r2, sp, #40	; 0x28
 8017dbc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017dc0:	910c      	str	r1, [sp, #48]	; 0x30
 8017dc2:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8017dc6:	ab08      	add	r3, sp, #32
 8017dc8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017dcc:	e883 0003 	stmia.w	r3, {r0, r1}
 8017dd0:	4618      	mov	r0, r3
 8017dd2:	a90c      	add	r1, sp, #48	; 0x30
 8017dd4:	f7ff fbde 	bl	8017594 <_ZN8touchgfx4RectaNERKS0_>
 8017dd8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8017dda:	2b00      	cmp	r3, #0
 8017ddc:	d13c      	bne.n	8017e58 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 8017dde:	2000      	movs	r0, #0
 8017de0:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 8017de4:	2600      	movs	r6, #0
 8017de6:	696b      	ldr	r3, [r5, #20]
 8017de8:	a908      	add	r1, sp, #32
 8017dea:	682a      	ldr	r2, [r5, #0]
 8017dec:	4628      	mov	r0, r5
 8017dee:	9305      	str	r3, [sp, #20]
 8017df0:	616e      	str	r6, [r5, #20]
 8017df2:	6892      	ldr	r2, [r2, #8]
 8017df4:	4790      	blx	r2
 8017df6:	9b05      	ldr	r3, [sp, #20]
 8017df8:	4652      	mov	r2, sl
 8017dfa:	4649      	mov	r1, r9
 8017dfc:	616b      	str	r3, [r5, #20]
 8017dfe:	4628      	mov	r0, r5
 8017e00:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 8017e04:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 8017e08:	f7eb fed8 	bl	8003bbc <_ZN8touchgfx8Drawable5setXYEss>
 8017e0c:	9a01      	ldr	r2, [sp, #4]
 8017e0e:	4b23      	ldr	r3, [pc, #140]	; (8017e9c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 8017e10:	4620      	mov	r0, r4
 8017e12:	801a      	strh	r2, [r3, #0]
 8017e14:	9a02      	ldr	r2, [sp, #8]
 8017e16:	4b22      	ldr	r3, [pc, #136]	; (8017ea0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 8017e18:	801a      	strh	r2, [r3, #0]
 8017e1a:	9a03      	ldr	r2, [sp, #12]
 8017e1c:	4b1c      	ldr	r3, [pc, #112]	; (8017e90 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8017e1e:	801a      	strh	r2, [r3, #0]
 8017e20:	4b1c      	ldr	r3, [pc, #112]	; (8017e94 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8017e22:	9a04      	ldr	r2, [sp, #16]
 8017e24:	801a      	strh	r2, [r3, #0]
 8017e26:	6823      	ldr	r3, [r4, #0]
 8017e28:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 8017e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017e2e:	4798      	blx	r3
 8017e30:	6823      	ldr	r3, [r4, #0]
 8017e32:	4620      	mov	r0, r4
 8017e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017e36:	4798      	blx	r3
 8017e38:	b00f      	add	sp, #60	; 0x3c
 8017e3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017e3e:	883b      	ldrh	r3, [r7, #0]
 8017e40:	f8ab 0000 	strh.w	r0, [fp]
 8017e44:	f8aa 3000 	strh.w	r3, [sl]
 8017e48:	e789      	b.n	8017d5e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 8017e4a:	462a      	mov	r2, r5
 8017e4c:	ab0a      	add	r3, sp, #40	; 0x28
 8017e4e:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8017e52:	6851      	ldr	r1, [r2, #4]
 8017e54:	c303      	stmia	r3!, {r0, r1}
 8017e56:	e7a9      	b.n	8017dac <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 8017e58:	a807      	add	r0, sp, #28
 8017e5a:	f006 f8bd 	bl	801dfd8 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8017e5e:	4606      	mov	r6, r0
 8017e60:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8017e62:	6803      	ldr	r3, [r0, #0]
 8017e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017e66:	4798      	blx	r3
 8017e68:	4286      	cmp	r6, r0
 8017e6a:	d1b8      	bne.n	8017dde <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 8017e6c:	f7ff fe6e 	bl	8017b4c <_ZN8touchgfx3HAL3lcdEv>
 8017e70:	6803      	ldr	r3, [r0, #0]
 8017e72:	4606      	mov	r6, r0
 8017e74:	a807      	add	r0, sp, #28
 8017e76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017e78:	9305      	str	r3, [sp, #20]
 8017e7a:	f006 f8ad 	bl	801dfd8 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8017e7e:	9b05      	ldr	r3, [sp, #20]
 8017e80:	4601      	mov	r1, r0
 8017e82:	4630      	mov	r0, r6
 8017e84:	4798      	blx	r3
 8017e86:	f080 0001 	eor.w	r0, r0, #1
 8017e8a:	b2c0      	uxtb	r0, r0
 8017e8c:	e7a8      	b.n	8017de0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 8017e8e:	bf00      	nop
 8017e90:	200177b8 	.word	0x200177b8
 8017e94:	200177ba 	.word	0x200177ba
 8017e98:	200177bc 	.word	0x200177bc
 8017e9c:	200177be 	.word	0x200177be
 8017ea0:	200177c0 	.word	0x200177c0

08017ea4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8017ea4:	4b07      	ldr	r3, [pc, #28]	; (8017ec4 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8017ea6:	b510      	push	{r4, lr}
 8017ea8:	781b      	ldrb	r3, [r3, #0]
 8017eaa:	4604      	mov	r4, r0
 8017eac:	b13b      	cbz	r3, 8017ebe <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8017eae:	6803      	ldr	r3, [r0, #0]
 8017eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017eb2:	4798      	blx	r3
 8017eb4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8017eb6:	4283      	cmp	r3, r0
 8017eb8:	d101      	bne.n	8017ebe <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8017eba:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8017ebc:	bd10      	pop	{r4, pc}
 8017ebe:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8017ec0:	e7fc      	b.n	8017ebc <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 8017ec2:	bf00      	nop
 8017ec4:	200177c2 	.word	0x200177c2

08017ec8 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 8017ec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017ecc:	461d      	mov	r5, r3
 8017ece:	b08a      	sub	sp, #40	; 0x28
 8017ed0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017ed4:	4690      	mov	r8, r2
 8017ed6:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 8017eda:	2400      	movs	r4, #0
 8017edc:	4607      	mov	r7, r0
 8017ede:	fb06 8505 	mla	r5, r6, r5, r8
 8017ee2:	9404      	str	r4, [sp, #16]
 8017ee4:	f88d 4020 	strb.w	r4, [sp, #32]
 8017ee8:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8017eec:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8017ef0:	f8ad 3018 	strh.w	r3, [sp, #24]
 8017ef4:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8017ef8:	f8ad 301a 	strh.w	r3, [sp, #26]
 8017efc:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8017f00:	f8ad 301c 	strh.w	r3, [sp, #28]
 8017f04:	f7ff ffce 	bl	8017ea4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8017f08:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8017f0c:	6878      	ldr	r0, [r7, #4]
 8017f0e:	f8ad 601e 	strh.w	r6, [sp, #30]
 8017f12:	a901      	add	r1, sp, #4
 8017f14:	9505      	str	r5, [sp, #20]
 8017f16:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8017f1a:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 8017f1e:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 8017f22:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 8017f26:	6803      	ldr	r3, [r0, #0]
 8017f28:	685b      	ldr	r3, [r3, #4]
 8017f2a:	4798      	blx	r3
 8017f2c:	b00a      	add	sp, #40	; 0x28
 8017f2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017f32 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 8017f32:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017f36:	b08b      	sub	sp, #44	; 0x2c
 8017f38:	2400      	movs	r4, #0
 8017f3a:	4691      	mov	r9, r2
 8017f3c:	461d      	mov	r5, r3
 8017f3e:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 8017f42:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8017f46:	4688      	mov	r8, r1
 8017f48:	4607      	mov	r7, r0
 8017f4a:	9404      	str	r4, [sp, #16]
 8017f4c:	fb06 9505 	mla	r5, r6, r5, r9
 8017f50:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017f54:	f7ff ffa6 	bl	8017ea4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8017f58:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8017f5c:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8017f60:	6878      	ldr	r0, [r7, #4]
 8017f62:	f8ad 3018 	strh.w	r3, [sp, #24]
 8017f66:	a901      	add	r1, sp, #4
 8017f68:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8017f6c:	9505      	str	r5, [sp, #20]
 8017f6e:	f8ad 301a 	strh.w	r3, [sp, #26]
 8017f72:	f8ad 401c 	strh.w	r4, [sp, #28]
 8017f76:	f8ad 601e 	strh.w	r6, [sp, #30]
 8017f7a:	f8cd 8010 	str.w	r8, [sp, #16]
 8017f7e:	f8ad 4020 	strh.w	r4, [sp, #32]
 8017f82:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8017f86:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 8017f8a:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 8017f8e:	6803      	ldr	r3, [r0, #0]
 8017f90:	685b      	ldr	r3, [r3, #4]
 8017f92:	4798      	blx	r3
 8017f94:	b00b      	add	sp, #44	; 0x2c
 8017f96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08017f9c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 8017f9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017fa0:	b08a      	sub	sp, #40	; 0x28
 8017fa2:	4698      	mov	r8, r3
 8017fa4:	2300      	movs	r3, #0
 8017fa6:	4606      	mov	r6, r0
 8017fa8:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 8017fac:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 8017fb0:	2d0b      	cmp	r5, #11
 8017fb2:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 8017fb6:	f8bd 7058 	ldrh.w	r7, [sp, #88]	; 0x58
 8017fba:	f89d 4060 	ldrb.w	r4, [sp, #96]	; 0x60
 8017fbe:	9304      	str	r3, [sp, #16]
 8017fc0:	d137      	bne.n	8018032 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 8017fc2:	2380      	movs	r3, #128	; 0x80
 8017fc4:	f88d 0020 	strb.w	r0, [sp, #32]
 8017fc8:	4630      	mov	r0, r6
 8017fca:	9203      	str	r2, [sp, #12]
 8017fcc:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8017fd0:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8017fd4:	f8ad 3018 	strh.w	r3, [sp, #24]
 8017fd8:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8017fdc:	f8ad 301a 	strh.w	r3, [sp, #26]
 8017fe0:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8017fe4:	f8ad 301c 	strh.w	r3, [sp, #28]
 8017fe8:	f7ff ff5c 	bl	8017ea4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8017fec:	2c0b      	cmp	r4, #11
 8017fee:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8017ff2:	f8ad 701e 	strh.w	r7, [sp, #30]
 8017ff6:	bf94      	ite	ls
 8017ff8:	4b19      	ldrls	r3, [pc, #100]	; (8018060 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 8017ffa:	2100      	movhi	r1, #0
 8017ffc:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 8018000:	bf98      	it	ls
 8018002:	5d19      	ldrbls	r1, [r3, r4]
 8018004:	fb02 8307 	mla	r3, r2, r7, r8
 8018008:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 801800c:	10c9      	asrs	r1, r1, #3
 801800e:	fb01 0003 	mla	r0, r1, r3, r0
 8018012:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8018016:	a901      	add	r1, sp, #4
 8018018:	9005      	str	r0, [sp, #20]
 801801a:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 801801e:	2300      	movs	r3, #0
 8018020:	6870      	ldr	r0, [r6, #4]
 8018022:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8018026:	6803      	ldr	r3, [r0, #0]
 8018028:	685b      	ldr	r3, [r3, #4]
 801802a:	4798      	blx	r3
 801802c:	b00a      	add	sp, #40	; 0x28
 801802e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018032:	2d02      	cmp	r5, #2
 8018034:	d109      	bne.n	801804a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 8018036:	28ff      	cmp	r0, #255	; 0xff
 8018038:	d105      	bne.n	8018046 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 801803a:	f1bc 0f00 	cmp.w	ip, #0
 801803e:	bf14      	ite	ne
 8018040:	2340      	movne	r3, #64	; 0x40
 8018042:	2320      	moveq	r3, #32
 8018044:	e7be      	b.n	8017fc4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8018046:	2340      	movs	r3, #64	; 0x40
 8018048:	e7bc      	b.n	8017fc4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 801804a:	28ff      	cmp	r0, #255	; 0xff
 801804c:	d105      	bne.n	801805a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 801804e:	f1bc 0f00 	cmp.w	ip, #0
 8018052:	bf14      	ite	ne
 8018054:	2304      	movne	r3, #4
 8018056:	2301      	moveq	r3, #1
 8018058:	e7b4      	b.n	8017fc4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 801805a:	2304      	movs	r3, #4
 801805c:	e7b2      	b.n	8017fc4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 801805e:	bf00      	nop
 8018060:	0802faf8 	.word	0x0802faf8

08018064 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 8018064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018068:	b08b      	sub	sp, #44	; 0x2c
 801806a:	461d      	mov	r5, r3
 801806c:	2400      	movs	r4, #0
 801806e:	4688      	mov	r8, r1
 8018070:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
 8018074:	4693      	mov	fp, r2
 8018076:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
 801807a:	4607      	mov	r7, r0
 801807c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8018080:	f8bd a05c 	ldrh.w	sl, [sp, #92]	; 0x5c
 8018084:	9404      	str	r4, [sp, #16]
 8018086:	bf14      	ite	ne
 8018088:	2308      	movne	r3, #8
 801808a:	2302      	moveq	r3, #2
 801808c:	fb05 b50a 	mla	r5, r5, sl, fp
 8018090:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8018094:	f7ff ff06 	bl	8017ea4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8018098:	2e0b      	cmp	r6, #11
 801809a:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801809e:	a901      	add	r1, sp, #4
 80180a0:	bf98      	it	ls
 80180a2:	4b13      	ldrls	r3, [pc, #76]	; (80180f0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 80180a4:	f8ad a01e 	strh.w	sl, [sp, #30]
 80180a8:	bf98      	it	ls
 80180aa:	5d9c      	ldrbls	r4, [r3, r6]
 80180ac:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 80180b0:	10e4      	asrs	r4, r4, #3
 80180b2:	f8cd 8010 	str.w	r8, [sp, #16]
 80180b6:	f8ad 3018 	strh.w	r3, [sp, #24]
 80180ba:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 80180be:	fb04 0405 	mla	r4, r4, r5, r0
 80180c2:	6878      	ldr	r0, [r7, #4]
 80180c4:	f8ad 301a 	strh.w	r3, [sp, #26]
 80180c8:	2300      	movs	r3, #0
 80180ca:	9405      	str	r4, [sp, #20]
 80180cc:	f8ad 301c 	strh.w	r3, [sp, #28]
 80180d0:	f88d 9020 	strb.w	r9, [sp, #32]
 80180d4:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
 80180d8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80180dc:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
 80180e0:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
 80180e4:	6803      	ldr	r3, [r0, #0]
 80180e6:	685b      	ldr	r3, [r3, #4]
 80180e8:	4798      	blx	r3
 80180ea:	b00b      	add	sp, #44	; 0x2c
 80180ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80180f0:	0802faf8 	.word	0x0802faf8

080180f4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 80180f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80180f8:	461e      	mov	r6, r3
 80180fa:	4b0a      	ldr	r3, [pc, #40]	; (8018124 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 80180fc:	460f      	mov	r7, r1
 80180fe:	4690      	mov	r8, r2
 8018100:	881d      	ldrh	r5, [r3, #0]
 8018102:	f7ff fd23 	bl	8017b4c <_ZN8touchgfx3HAL3lcdEv>
 8018106:	6803      	ldr	r3, [r0, #0]
 8018108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801810a:	4798      	blx	r3
 801810c:	280b      	cmp	r0, #11
 801810e:	bf96      	itet	ls
 8018110:	4b05      	ldrls	r3, [pc, #20]	; (8018128 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8018112:	2400      	movhi	r4, #0
 8018114:	5c1c      	ldrbls	r4, [r3, r0]
 8018116:	fb08 7005 	mla	r0, r8, r5, r7
 801811a:	10e4      	asrs	r4, r4, #3
 801811c:	fb04 6000 	mla	r0, r4, r0, r6
 8018120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018124:	200177be 	.word	0x200177be
 8018128:	0802faf8 	.word	0x0802faf8

0801812c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 801812c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801812e:	b08b      	sub	sp, #44	; 0x2c
 8018130:	461f      	mov	r7, r3
 8018132:	4604      	mov	r4, r0
 8018134:	4616      	mov	r6, r2
 8018136:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 801813a:	2500      	movs	r5, #0
 801813c:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8018140:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8018144:	9504      	str	r5, [sp, #16]
 8018146:	f8ad 3018 	strh.w	r3, [sp, #24]
 801814a:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801814e:	f8ad 301a 	strh.w	r3, [sp, #26]
 8018152:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8018156:	f8ad 301c 	strh.w	r3, [sp, #28]
 801815a:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 801815e:	f88d 3020 	strb.w	r3, [sp, #32]
 8018162:	f7ff fe9f 	bl	8017ea4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8018166:	463a      	mov	r2, r7
 8018168:	4631      	mov	r1, r6
 801816a:	4603      	mov	r3, r0
 801816c:	4620      	mov	r0, r4
 801816e:	f7ff ffc1 	bl	80180f4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8018172:	4b0e      	ldr	r3, [pc, #56]	; (80181ac <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 8018174:	9005      	str	r0, [sp, #20]
 8018176:	881b      	ldrh	r3, [r3, #0]
 8018178:	f8ad 301e 	strh.w	r3, [sp, #30]
 801817c:	f7ff fce6 	bl	8017b4c <_ZN8touchgfx3HAL3lcdEv>
 8018180:	6803      	ldr	r3, [r0, #0]
 8018182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018184:	4798      	blx	r3
 8018186:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8018188:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 801818c:	a901      	add	r1, sp, #4
 801818e:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8018192:	9304      	str	r3, [sp, #16]
 8018194:	6860      	ldr	r0, [r4, #4]
 8018196:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 801819a:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 801819e:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 80181a2:	6803      	ldr	r3, [r0, #0]
 80181a4:	685b      	ldr	r3, [r3, #4]
 80181a6:	4798      	blx	r3
 80181a8:	b00b      	add	sp, #44	; 0x2c
 80181aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80181ac:	200177be 	.word	0x200177be

080181b0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 80181b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80181b2:	b08d      	sub	sp, #52	; 0x34
 80181b4:	2501      	movs	r5, #1
 80181b6:	4604      	mov	r4, r0
 80181b8:	466b      	mov	r3, sp
 80181ba:	9503      	str	r5, [sp, #12]
 80181bc:	e883 0006 	stmia.w	r3, {r1, r2}
 80181c0:	2300      	movs	r3, #0
 80181c2:	f8bd 6000 	ldrh.w	r6, [sp]
 80181c6:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 80181ca:	9306      	str	r3, [sp, #24]
 80181cc:	6803      	ldr	r3, [r0, #0]
 80181ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80181d0:	4798      	blx	r3
 80181d2:	463a      	mov	r2, r7
 80181d4:	4631      	mov	r1, r6
 80181d6:	4603      	mov	r3, r0
 80181d8:	4620      	mov	r0, r4
 80181da:	f7ff ff8b 	bl	80180f4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80181de:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80181e0:	9004      	str	r0, [sp, #16]
 80181e2:	9307      	str	r3, [sp, #28]
 80181e4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80181e8:	f8ad 3020 	strh.w	r3, [sp, #32]
 80181ec:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80181f0:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80181f4:	4b0e      	ldr	r3, [pc, #56]	; (8018230 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 80181f6:	881b      	ldrh	r3, [r3, #0]
 80181f8:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 80181fc:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8018200:	f7ff fca4 	bl	8017b4c <_ZN8touchgfx3HAL3lcdEv>
 8018204:	6803      	ldr	r3, [r0, #0]
 8018206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018208:	4798      	blx	r3
 801820a:	23ff      	movs	r3, #255	; 0xff
 801820c:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 8018210:	a903      	add	r1, sp, #12
 8018212:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 8018216:	6860      	ldr	r0, [r4, #4]
 8018218:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 801821c:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8018220:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 8018224:	6803      	ldr	r3, [r0, #0]
 8018226:	685b      	ldr	r3, [r3, #4]
 8018228:	4798      	blx	r3
 801822a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 801822c:	b00d      	add	sp, #52	; 0x34
 801822e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018230:	200177be 	.word	0x200177be

08018234 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8018234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018238:	b08c      	sub	sp, #48	; 0x30
 801823a:	461e      	mov	r6, r3
 801823c:	2300      	movs	r3, #0
 801823e:	4604      	mov	r4, r0
 8018240:	466d      	mov	r5, sp
 8018242:	9306      	str	r3, [sp, #24]
 8018244:	6803      	ldr	r3, [r0, #0]
 8018246:	e885 0006 	stmia.w	r5, {r1, r2}
 801824a:	2501      	movs	r5, #1
 801824c:	f8bd 7000 	ldrh.w	r7, [sp]
 8018250:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 8018254:	9503      	str	r5, [sp, #12]
 8018256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018258:	4798      	blx	r3
 801825a:	4642      	mov	r2, r8
 801825c:	4639      	mov	r1, r7
 801825e:	4603      	mov	r3, r0
 8018260:	4620      	mov	r0, r4
 8018262:	f7ff ff47 	bl	80180f4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8018266:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801826a:	9004      	str	r0, [sp, #16]
 801826c:	f8ad 3020 	strh.w	r3, [sp, #32]
 8018270:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8018274:	9607      	str	r6, [sp, #28]
 8018276:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801827a:	4b10      	ldr	r3, [pc, #64]	; (80182bc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 801827c:	881b      	ldrh	r3, [r3, #0]
 801827e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8018282:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8018284:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8018288:	f7ff fc60 	bl	8017b4c <_ZN8touchgfx3HAL3lcdEv>
 801828c:	6803      	ldr	r3, [r0, #0]
 801828e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018290:	4798      	blx	r3
 8018292:	23ff      	movs	r3, #255	; 0xff
 8018294:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 8018298:	a903      	add	r1, sp, #12
 801829a:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 801829e:	6860      	ldr	r0, [r4, #4]
 80182a0:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 80182a4:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 80182a8:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 80182ac:	6803      	ldr	r3, [r0, #0]
 80182ae:	685b      	ldr	r3, [r3, #4]
 80182b0:	4798      	blx	r3
 80182b2:	4630      	mov	r0, r6
 80182b4:	b00c      	add	sp, #48	; 0x30
 80182b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80182ba:	bf00      	nop
 80182bc:	200177be 	.word	0x200177be

080182c0 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 80182c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80182c2:	b085      	sub	sp, #20
 80182c4:	4605      	mov	r5, r0
 80182c6:	ac02      	add	r4, sp, #8
 80182c8:	e884 0006 	stmia.w	r4, {r1, r2}
 80182cc:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 80182d0:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 80182d4:	f7ff fde6 	bl	8017ea4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80182d8:	4631      	mov	r1, r6
 80182da:	4603      	mov	r3, r0
 80182dc:	463a      	mov	r2, r7
 80182de:	4628      	mov	r0, r5
 80182e0:	f7ff ff08 	bl	80180f4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80182e4:	4a05      	ldr	r2, [pc, #20]	; (80182fc <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 80182e6:	682b      	ldr	r3, [r5, #0]
 80182e8:	8812      	ldrh	r2, [r2, #0]
 80182ea:	9200      	str	r2, [sp, #0]
 80182ec:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 80182ee:	4603      	mov	r3, r0
 80182f0:	4628      	mov	r0, r5
 80182f2:	e894 0006 	ldmia.w	r4, {r1, r2}
 80182f6:	47b0      	blx	r6
 80182f8:	b005      	add	sp, #20
 80182fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80182fc:	200177be 	.word	0x200177be

08018300 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8018300:	b570      	push	{r4, r5, r6, lr}
 8018302:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8018306:	4604      	mov	r4, r0
 8018308:	b19b      	cbz	r3, 8018332 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 801830a:	2002      	movs	r0, #2
 801830c:	f7e9 fc6c 	bl	8001be8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8018310:	2300      	movs	r3, #0
 8018312:	4620      	mov	r0, r4
 8018314:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8018318:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 801831c:	6823      	ldr	r3, [r4, #0]
 801831e:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 8018322:	f7ff fdbf 	bl	8017ea4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8018326:	4601      	mov	r1, r0
 8018328:	4620      	mov	r0, r4
 801832a:	462b      	mov	r3, r5
 801832c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018330:	4718      	bx	r3
 8018332:	bd70      	pop	{r4, r5, r6, pc}

08018334 <_ZN8touchgfx3HAL12setMCUActiveEb>:
 8018334:	b570      	push	{r4, r5, r6, lr}
 8018336:	4605      	mov	r5, r0
 8018338:	460c      	mov	r4, r1
 801833a:	2003      	movs	r0, #3
 801833c:	b149      	cbz	r1, 8018352 <_ZN8touchgfx3HAL12setMCUActiveEb+0x1e>
 801833e:	f7e9 fbf3 	bl	8001b28 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8018342:	6928      	ldr	r0, [r5, #16]
 8018344:	b168      	cbz	r0, 8018362 <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 8018346:	6803      	ldr	r3, [r0, #0]
 8018348:	2101      	movs	r1, #1
 801834a:	695b      	ldr	r3, [r3, #20]
 801834c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018350:	4718      	bx	r3
 8018352:	f7e9 fc19 	bl	8001b88 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8018356:	6928      	ldr	r0, [r5, #16]
 8018358:	b118      	cbz	r0, 8018362 <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 801835a:	6803      	ldr	r3, [r0, #0]
 801835c:	4621      	mov	r1, r4
 801835e:	695b      	ldr	r3, [r3, #20]
 8018360:	e7f4      	b.n	801834c <_ZN8touchgfx3HAL12setMCUActiveEb+0x18>
 8018362:	bd70      	pop	{r4, r5, r6, pc}

08018364 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8018364:	b538      	push	{r3, r4, r5, lr}
 8018366:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
 801836a:	4604      	mov	r4, r0
 801836c:	460d      	mov	r5, r1
 801836e:	428b      	cmp	r3, r1
 8018370:	d006      	beq.n	8018380 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 8018372:	6803      	ldr	r3, [r0, #0]
 8018374:	b929      	cbnz	r1, 8018382 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 8018376:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 801837a:	4798      	blx	r3
 801837c:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 8018380:	bd38      	pop	{r3, r4, r5, pc}
 8018382:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8018386:	e7f8      	b.n	801837a <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

08018388 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8018388:	4b0d      	ldr	r3, [pc, #52]	; (80183c0 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 801838a:	b510      	push	{r4, lr}
 801838c:	781b      	ldrb	r3, [r3, #0]
 801838e:	4604      	mov	r4, r0
 8018390:	b95b      	cbnz	r3, 80183aa <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8018392:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8018396:	2b02      	cmp	r3, #2
 8018398:	d007      	beq.n	80183aa <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801839a:	6840      	ldr	r0, [r0, #4]
 801839c:	f000 f92a 	bl	80185f4 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 80183a0:	b118      	cbz	r0, 80183aa <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80183a2:	6862      	ldr	r2, [r4, #4]
 80183a4:	7a53      	ldrb	r3, [r2, #9]
 80183a6:	2b00      	cmp	r3, #0
 80183a8:	d0fc      	beq.n	80183a4 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 80183aa:	f7e9 fd6d 	bl	8001e88 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 80183ae:	4620      	mov	r0, r4
 80183b0:	2100      	movs	r1, #0
 80183b2:	f7ff ffd7 	bl	8018364 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 80183b6:	4620      	mov	r0, r4
 80183b8:	f7ff fd74 	bl	8017ea4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80183bc:	bd10      	pop	{r4, pc}
 80183be:	bf00      	nop
 80183c0:	200177c2 	.word	0x200177c2

080183c4 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>:
 80183c4:	b570      	push	{r4, r5, r6, lr}
 80183c6:	4604      	mov	r4, r0
 80183c8:	6803      	ldr	r3, [r0, #0]
 80183ca:	b919      	cbnz	r1, 80183d4 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE+0x10>
 80183cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80183ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80183d2:	4718      	bx	r3
 80183d4:	2200      	movs	r2, #0
 80183d6:	f890 6078 	ldrb.w	r6, [r0, #120]	; 0x78
 80183da:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
 80183de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80183e0:	4798      	blx	r3
 80183e2:	4605      	mov	r5, r0
 80183e4:	f884 6078 	strb.w	r6, [r4, #120]	; 0x78
 80183e8:	4620      	mov	r0, r4
 80183ea:	2101      	movs	r1, #1
 80183ec:	f7ff ffba 	bl	8018364 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 80183f0:	4628      	mov	r0, r5
 80183f2:	bd70      	pop	{r4, r5, r6, pc}

080183f4 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 80183f4:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 80183f8:	1a13      	subs	r3, r2, r0
 80183fa:	4258      	negs	r0, r3
 80183fc:	4158      	adcs	r0, r3
 80183fe:	4770      	bx	lr

08018400 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8018400:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8018404:	1a9b      	subs	r3, r3, r2
 8018406:	2b00      	cmp	r3, #0
 8018408:	bfdc      	itt	le
 801840a:	6882      	ldrle	r2, [r0, #8]
 801840c:	189b      	addle	r3, r3, r2
 801840e:	2b01      	cmp	r3, #1
 8018410:	bfcc      	ite	gt
 8018412:	2000      	movgt	r0, #0
 8018414:	2001      	movle	r0, #1
 8018416:	4770      	bx	lr

08018418 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8018418:	6902      	ldr	r2, [r0, #16]
 801841a:	6843      	ldr	r3, [r0, #4]
 801841c:	2024      	movs	r0, #36	; 0x24
 801841e:	fb00 3002 	mla	r0, r0, r2, r3
 8018422:	4770      	bx	lr

08018424 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8018424:	6803      	ldr	r3, [r0, #0]
 8018426:	691b      	ldr	r3, [r3, #16]
 8018428:	4718      	bx	r3

0801842a <_ZN8touchgfx13DMA_Interface7executeEv>:
 801842a:	2301      	movs	r3, #1
 801842c:	b570      	push	{r4, r5, r6, lr}
 801842e:	7203      	strb	r3, [r0, #8]
 8018430:	4604      	mov	r4, r0
 8018432:	6840      	ldr	r0, [r0, #4]
 8018434:	6803      	ldr	r3, [r0, #0]
 8018436:	699b      	ldr	r3, [r3, #24]
 8018438:	4798      	blx	r3
 801843a:	6803      	ldr	r3, [r0, #0]
 801843c:	4605      	mov	r5, r0
 801843e:	2b40      	cmp	r3, #64	; 0x40
 8018440:	d00c      	beq.n	801845c <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8018442:	d810      	bhi.n	8018466 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8018444:	2b04      	cmp	r3, #4
 8018446:	d01d      	beq.n	8018484 <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 8018448:	d804      	bhi.n	8018454 <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 801844a:	2b01      	cmp	r3, #1
 801844c:	d006      	beq.n	801845c <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801844e:	2b02      	cmp	r3, #2
 8018450:	d02c      	beq.n	80184ac <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 8018452:	bd70      	pop	{r4, r5, r6, pc}
 8018454:	2b08      	cmp	r3, #8
 8018456:	d01d      	beq.n	8018494 <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 8018458:	2b20      	cmp	r3, #32
 801845a:	d1fa      	bne.n	8018452 <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 801845c:	6823      	ldr	r3, [r4, #0]
 801845e:	4620      	mov	r0, r4
 8018460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018462:	4798      	blx	r3
 8018464:	e013      	b.n	801848e <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8018466:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801846a:	d0f7      	beq.n	801845c <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801846c:	d804      	bhi.n	8018478 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 801846e:	2b80      	cmp	r3, #128	; 0x80
 8018470:	d0f4      	beq.n	801845c <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8018472:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8018476:	e7f0      	b.n	801845a <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 8018478:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801847c:	d0ee      	beq.n	801845c <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801847e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8018482:	e7e5      	b.n	8018450 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 8018484:	6823      	ldr	r3, [r4, #0]
 8018486:	7f01      	ldrb	r1, [r0, #28]
 8018488:	4620      	mov	r0, r4
 801848a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801848c:	4798      	blx	r3
 801848e:	6823      	ldr	r3, [r4, #0]
 8018490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018492:	e006      	b.n	80184a2 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8018494:	6823      	ldr	r3, [r4, #0]
 8018496:	7f01      	ldrb	r1, [r0, #28]
 8018498:	4620      	mov	r0, r4
 801849a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801849c:	4798      	blx	r3
 801849e:	6823      	ldr	r3, [r4, #0]
 80184a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80184a2:	4629      	mov	r1, r5
 80184a4:	4620      	mov	r0, r4
 80184a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80184aa:	4718      	bx	r3
 80184ac:	6823      	ldr	r3, [r4, #0]
 80184ae:	4620      	mov	r0, r4
 80184b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80184b2:	4798      	blx	r3
 80184b4:	e7f3      	b.n	801849e <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

080184b6 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 80184b6:	4770      	bx	lr

080184b8 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 80184b8:	4770      	bx	lr

080184ba <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 80184ba:	4770      	bx	lr

080184bc <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 80184bc:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 80184c0:	b510      	push	{r4, lr}
 80184c2:	1ad2      	subs	r2, r2, r3
 80184c4:	2a00      	cmp	r2, #0
 80184c6:	bfdc      	itt	le
 80184c8:	6884      	ldrle	r4, [r0, #8]
 80184ca:	1912      	addle	r2, r2, r4
 80184cc:	2a01      	cmp	r2, #1
 80184ce:	dd16      	ble.n	80184fe <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 80184d0:	6842      	ldr	r2, [r0, #4]
 80184d2:	2424      	movs	r4, #36	; 0x24
 80184d4:	fb04 2303 	mla	r3, r4, r3, r2
 80184d8:	f101 0220 	add.w	r2, r1, #32
 80184dc:	f851 4b04 	ldr.w	r4, [r1], #4
 80184e0:	4291      	cmp	r1, r2
 80184e2:	f843 4b04 	str.w	r4, [r3], #4
 80184e6:	d1f9      	bne.n	80184dc <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 80184e8:	780a      	ldrb	r2, [r1, #0]
 80184ea:	701a      	strb	r2, [r3, #0]
 80184ec:	68c3      	ldr	r3, [r0, #12]
 80184ee:	6882      	ldr	r2, [r0, #8]
 80184f0:	f3bf 8f5b 	dmb	ish
 80184f4:	3301      	adds	r3, #1
 80184f6:	429a      	cmp	r2, r3
 80184f8:	bfd8      	it	le
 80184fa:	1a9b      	suble	r3, r3, r2
 80184fc:	60c3      	str	r3, [r0, #12]
 80184fe:	bd10      	pop	{r4, pc}

08018500 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8018500:	6903      	ldr	r3, [r0, #16]
 8018502:	6882      	ldr	r2, [r0, #8]
 8018504:	f3bf 8f5b 	dmb	ish
 8018508:	3301      	adds	r3, #1
 801850a:	429a      	cmp	r2, r3
 801850c:	bfd8      	it	le
 801850e:	1a9b      	suble	r3, r3, r2
 8018510:	6103      	str	r3, [r0, #16]
 8018512:	4770      	bx	lr

08018514 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8018514:	b570      	push	{r4, r5, r6, lr}
 8018516:	4604      	mov	r4, r0
 8018518:	460e      	mov	r6, r1
 801851a:	6860      	ldr	r0, [r4, #4]
 801851c:	6803      	ldr	r3, [r0, #0]
 801851e:	685b      	ldr	r3, [r3, #4]
 8018520:	4798      	blx	r3
 8018522:	2800      	cmp	r0, #0
 8018524:	d1f9      	bne.n	801851a <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8018526:	4d0d      	ldr	r5, [pc, #52]	; (801855c <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 8018528:	6828      	ldr	r0, [r5, #0]
 801852a:	6803      	ldr	r3, [r0, #0]
 801852c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801852e:	4798      	blx	r3
 8018530:	f7e9 fcb8 	bl	8001ea4 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8018534:	6828      	ldr	r0, [r5, #0]
 8018536:	2101      	movs	r1, #1
 8018538:	f7ff ff14 	bl	8018364 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 801853c:	6860      	ldr	r0, [r4, #4]
 801853e:	4631      	mov	r1, r6
 8018540:	6803      	ldr	r3, [r0, #0]
 8018542:	689b      	ldr	r3, [r3, #8]
 8018544:	4798      	blx	r3
 8018546:	6823      	ldr	r3, [r4, #0]
 8018548:	4620      	mov	r0, r4
 801854a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801854c:	4798      	blx	r3
 801854e:	6828      	ldr	r0, [r5, #0]
 8018550:	6803      	ldr	r3, [r0, #0]
 8018552:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018556:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8018558:	4718      	bx	r3
 801855a:	bf00      	nop
 801855c:	200177c4 	.word	0x200177c4

08018560 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8018560:	b508      	push	{r3, lr}
 8018562:	f7e9 fc91 	bl	8001e88 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8018566:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801856a:	f7e9 bc95 	b.w	8001e98 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0801856e <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 801856e:	b510      	push	{r4, lr}
 8018570:	4604      	mov	r4, r0
 8018572:	2114      	movs	r1, #20
 8018574:	f011 fd90 	bl	802a098 <_ZdlPvj>
 8018578:	4620      	mov	r0, r4
 801857a:	bd10      	pop	{r4, pc}

0801857c <_ZN8touchgfx13DMA_Interface5startEv>:
 801857c:	b510      	push	{r4, lr}
 801857e:	4604      	mov	r4, r0
 8018580:	6840      	ldr	r0, [r0, #4]
 8018582:	6803      	ldr	r3, [r0, #0]
 8018584:	681b      	ldr	r3, [r3, #0]
 8018586:	4798      	blx	r3
 8018588:	b948      	cbnz	r0, 801859e <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801858a:	7a63      	ldrb	r3, [r4, #9]
 801858c:	b13b      	cbz	r3, 801859e <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801858e:	7a23      	ldrb	r3, [r4, #8]
 8018590:	b92b      	cbnz	r3, 801859e <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8018592:	6823      	ldr	r3, [r4, #0]
 8018594:	4620      	mov	r0, r4
 8018596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018598:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801859c:	4718      	bx	r3
 801859e:	bd10      	pop	{r4, pc}

080185a0 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 80185a0:	b570      	push	{r4, r5, r6, lr}
 80185a2:	4604      	mov	r4, r0
 80185a4:	6840      	ldr	r0, [r0, #4]
 80185a6:	6803      	ldr	r3, [r0, #0]
 80185a8:	681b      	ldr	r3, [r3, #0]
 80185aa:	4798      	blx	r3
 80185ac:	4605      	mov	r5, r0
 80185ae:	b930      	cbnz	r0, 80185be <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 80185b0:	7a23      	ldrb	r3, [r4, #8]
 80185b2:	b123      	cbz	r3, 80185be <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 80185b4:	6860      	ldr	r0, [r4, #4]
 80185b6:	6803      	ldr	r3, [r0, #0]
 80185b8:	695b      	ldr	r3, [r3, #20]
 80185ba:	4798      	blx	r3
 80185bc:	7225      	strb	r5, [r4, #8]
 80185be:	6860      	ldr	r0, [r4, #4]
 80185c0:	6803      	ldr	r3, [r0, #0]
 80185c2:	681b      	ldr	r3, [r3, #0]
 80185c4:	4798      	blx	r3
 80185c6:	b928      	cbnz	r0, 80185d4 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 80185c8:	6823      	ldr	r3, [r4, #0]
 80185ca:	4620      	mov	r0, r4
 80185cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80185ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80185d2:	4718      	bx	r3
 80185d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80185d8:	f7e9 bc6c 	b.w	8001eb4 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

080185dc <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 80185dc:	b510      	push	{r4, lr}
 80185de:	6082      	str	r2, [r0, #8]
 80185e0:	2200      	movs	r2, #0
 80185e2:	4c03      	ldr	r4, [pc, #12]	; (80185f0 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 80185e4:	e9c0 2203 	strd	r2, r2, [r0, #12]
 80185e8:	e9c0 4100 	strd	r4, r1, [r0]
 80185ec:	bd10      	pop	{r4, pc}
 80185ee:	bf00      	nop
 80185f0:	0802fb0c 	.word	0x0802fb0c

080185f4 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 80185f4:	6840      	ldr	r0, [r0, #4]
 80185f6:	6803      	ldr	r3, [r0, #0]
 80185f8:	681b      	ldr	r3, [r3, #0]
 80185fa:	4718      	bx	r3

080185fc <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE>:
 80185fc:	094a      	lsrs	r2, r1, #5
 80185fe:	4b06      	ldr	r3, [pc, #24]	; (8018618 <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE+0x1c>)
 8018600:	60c1      	str	r1, [r0, #12]
 8018602:	ea03 2311 	and.w	r3, r3, r1, lsr #8
 8018606:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801860a:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 801860e:	4313      	orrs	r3, r2
 8018610:	4319      	orrs	r1, r3
 8018612:	8201      	strh	r1, [r0, #16]
 8018614:	4770      	bx	lr
 8018616:	bf00      	nop
 8018618:	fffff800 	.word	0xfffff800

0801861c <_ZThn8_N8touchgfx13PainterRGB5658setColorENS_9colortypeE>:
 801861c:	f1a0 0008 	sub.w	r0, r0, #8
 8018620:	e7ec      	b.n	80185fc <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE>
 8018622:	bf00      	nop

08018624 <_ZNK8touchgfx13PainterRGB56518getRenderingMethodEv>:
 8018624:	b508      	push	{r3, lr}
 8018626:	4b05      	ldr	r3, [pc, #20]	; (801863c <_ZNK8touchgfx13PainterRGB56518getRenderingMethodEv+0x18>)
 8018628:	6818      	ldr	r0, [r3, #0]
 801862a:	6803      	ldr	r3, [r0, #0]
 801862c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8018630:	4798      	blx	r3
 8018632:	1e43      	subs	r3, r0, #1
 8018634:	4258      	negs	r0, r3
 8018636:	4158      	adcs	r0, r3
 8018638:	bd08      	pop	{r3, pc}
 801863a:	bf00      	nop
 801863c:	200177c4 	.word	0x200177c4

08018640 <_ZN8touchgfx13PainterRGB565D1Ev>:
 8018640:	4770      	bx	lr

08018642 <_ZThn8_N8touchgfx13PainterRGB565D1Ev>:
 8018642:	3808      	subs	r0, #8
 8018644:	4770      	bx	lr

08018646 <_ZNK8touchgfx13PainterRGB5655paintEPhssssh>:
 8018646:	b430      	push	{r4, r5}
 8018648:	eb01 0442 	add.w	r4, r1, r2, lsl #1
 801864c:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 8018650:	8a02      	ldrh	r2, [r0, #16]
 8018652:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8018656:	4629      	mov	r1, r5
 8018658:	9202      	str	r2, [sp, #8]
 801865a:	68c2      	ldr	r2, [r0, #12]
 801865c:	4620      	mov	r0, r4
 801865e:	bc30      	pop	{r4, r5}
 8018660:	f7e9 bde4 	b.w	800222c <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm>

08018664 <_ZNK8touchgfx13PainterRGB5658tearDownEv>:
 8018664:	f7e9 bdd8 	b.w	8002218 <_ZN8touchgfx5paint6rgb5658tearDownEv>

08018668 <_ZN8touchgfx13PainterRGB565D0Ev>:
 8018668:	b510      	push	{r4, lr}
 801866a:	4604      	mov	r4, r0
 801866c:	2114      	movs	r1, #20
 801866e:	f011 fd13 	bl	802a098 <_ZdlPvj>
 8018672:	4620      	mov	r0, r4
 8018674:	bd10      	pop	{r4, pc}

08018676 <_ZThn8_N8touchgfx13PainterRGB565D0Ev>:
 8018676:	f1a0 0008 	sub.w	r0, r0, #8
 801867a:	e7f5      	b.n	8018668 <_ZN8touchgfx13PainterRGB565D0Ev>

0801867c <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
 801867c:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
 8018680:	4770      	bx	lr

08018682 <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:
 8018682:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 8018686:	4770      	bx	lr

08018688 <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
 8018688:	2200      	movs	r2, #0
 801868a:	8002      	strh	r2, [r0, #0]
 801868c:	8042      	strh	r2, [r0, #2]
 801868e:	8082      	strh	r2, [r0, #4]
 8018690:	80c2      	strh	r2, [r0, #6]
 8018692:	4770      	bx	lr

08018694 <_ZNK8touchgfx4Line14getMinimalRectEv>:
 8018694:	f101 0364 	add.w	r3, r1, #100	; 0x64
 8018698:	4602      	mov	r2, r0
 801869a:	cb03      	ldmia	r3!, {r0, r1}
 801869c:	6010      	str	r0, [r2, #0]
 801869e:	4610      	mov	r0, r2
 80186a0:	6051      	str	r1, [r2, #4]
 80186a2:	4770      	bx	lr

080186a4 <_ZN8touchgfx4LineD1Ev>:
 80186a4:	4770      	bx	lr

080186a6 <_ZN8touchgfx4LineD0Ev>:
 80186a6:	b510      	push	{r4, lr}
 80186a8:	4604      	mov	r4, r0
 80186aa:	2170      	movs	r1, #112	; 0x70
 80186ac:	f011 fcf4 	bl	802a098 <_ZdlPvj>
 80186b0:	4620      	mov	r0, r4
 80186b2:	bd10      	pop	{r4, pc}

080186b4 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>:
 80186b4:	b507      	push	{r0, r1, r2, lr}
 80186b6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80186ba:	ab01      	add	r3, sp, #4
 80186bc:	6809      	ldr	r1, [r1, #0]
 80186be:	6800      	ldr	r0, [r0, #0]
 80186c0:	f003 fff1 	bl	801c6a6 <_ZN8touchgfx6muldivElllRl>
 80186c4:	b003      	add	sp, #12
 80186c6:	f85d fb04 	ldr.w	pc, [sp], #4

080186ca <_ZNK8touchgfx7CWRUtil2Q54ceilEv>:
 80186ca:	6800      	ldr	r0, [r0, #0]
 80186cc:	2800      	cmp	r0, #0
 80186ce:	bfb9      	ittee	lt
 80186d0:	2320      	movlt	r3, #32
 80186d2:	fb90 f0f3 	sdivlt	r0, r0, r3
 80186d6:	301f      	addge	r0, #31
 80186d8:	1140      	asrge	r0, r0, #5
 80186da:	4770      	bx	lr

080186dc <_ZNK8touchgfx4Line17invalidateContentEv>:
 80186dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80186e0:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
 80186e4:	b089      	sub	sp, #36	; 0x24
 80186e6:	4604      	mov	r4, r0
 80186e8:	b353      	cbz	r3, 8018740 <_ZNK8touchgfx4Line17invalidateContentEv+0x64>
 80186ea:	6803      	ldr	r3, [r0, #0]
 80186ec:	4601      	mov	r1, r0
 80186ee:	a802      	add	r0, sp, #8
 80186f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80186f2:	4798      	blx	r3
 80186f4:	2220      	movs	r2, #32
 80186f6:	f8d4 a02c 	ldr.w	sl, [r4, #44]	; 0x2c
 80186fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80186fc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80186fe:	f8d4 b000 	ldr.w	fp, [r4]
 8018702:	fb9a f0f2 	sdiv	r0, sl, r2
 8018706:	fb91 f5f2 	sdiv	r5, r1, r2
 801870a:	fb93 f6f2 	sdiv	r6, r3, r2
 801870e:	1b40      	subs	r0, r0, r5
 8018710:	0076      	lsls	r6, r6, #1
 8018712:	2800      	cmp	r0, #0
 8018714:	bfb8      	it	lt
 8018716:	4240      	neglt	r0, r0
 8018718:	4286      	cmp	r6, r0
 801871a:	dc0c      	bgt.n	8018736 <_ZNK8touchgfx4Line17invalidateContentEv+0x5a>
 801871c:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801871e:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
 8018722:	fb95 f0f2 	sdiv	r0, r5, r2
 8018726:	fb98 f7f2 	sdiv	r7, r8, r2
 801872a:	1bc0      	subs	r0, r0, r7
 801872c:	2800      	cmp	r0, #0
 801872e:	bfb8      	it	lt
 8018730:	4240      	neglt	r0, r0
 8018732:	4286      	cmp	r6, r0
 8018734:	dd07      	ble.n	8018746 <_ZNK8touchgfx4Line17invalidateContentEv+0x6a>
 8018736:	f8db 3010 	ldr.w	r3, [fp, #16]
 801873a:	a902      	add	r1, sp, #8
 801873c:	4620      	mov	r0, r4
 801873e:	4798      	blx	r3
 8018740:	b009      	add	sp, #36	; 0x24
 8018742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018746:	eb01 060a 	add.w	r6, r1, sl
 801874a:	2002      	movs	r0, #2
 801874c:	eb08 0705 	add.w	r7, r8, r5
 8018750:	3301      	adds	r3, #1
 8018752:	f10d 0920 	add.w	r9, sp, #32
 8018756:	9101      	str	r1, [sp, #4]
 8018758:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801875c:	fb96 f6f0 	sdiv	r6, r6, r0
 8018760:	fb97 f7f0 	sdiv	r7, r7, r0
 8018764:	4103      	asrs	r3, r0
 8018766:	b236      	sxth	r6, r6
 8018768:	b23f      	sxth	r7, r7
 801876a:	f849 3d08 	str.w	r3, [r9, #-8]!
 801876e:	4648      	mov	r0, r9
 8018770:	fb96 f6f2 	sdiv	r6, r6, r2
 8018774:	fb97 f7f2 	sdiv	r7, r7, r2
 8018778:	f7ff ffa7 	bl	80186ca <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 801877c:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8018780:	f9bd 200e 	ldrsh.w	r2, [sp, #14]
 8018784:	fa1f fe87 	uxth.w	lr, r7
 8018788:	9901      	ldr	r1, [sp, #4]
 801878a:	fa1f fc86 	uxth.w	ip, r6
 801878e:	4293      	cmp	r3, r2
 8018790:	b280      	uxth	r0, r0
 8018792:	eba1 0a0a 	sub.w	sl, r1, sl
 8018796:	da54      	bge.n	8018842 <_ZNK8touchgfx4Line17invalidateContentEv+0x166>
 8018798:	ebac 0100 	sub.w	r1, ip, r0
 801879c:	f1ba 0f00 	cmp.w	sl, #0
 80187a0:	4460      	add	r0, ip
 80187a2:	f9bd a008 	ldrsh.w	sl, [sp, #8]
 80187a6:	b289      	uxth	r1, r1
 80187a8:	f9bd c00a 	ldrsh.w	ip, [sp, #10]
 80187ac:	b280      	uxth	r0, r0
 80187ae:	b20e      	sxth	r6, r1
 80187b0:	da29      	bge.n	8018806 <_ZNK8touchgfx4Line17invalidateContentEv+0x12a>
 80187b2:	eba8 0505 	sub.w	r5, r8, r5
 80187b6:	2d00      	cmp	r5, #0
 80187b8:	da2a      	bge.n	8018810 <_ZNK8touchgfx4Line17invalidateContentEv+0x134>
 80187ba:	fa1f f88a 	uxth.w	r8, sl
 80187be:	f8ad a010 	strh.w	sl, [sp, #16]
 80187c2:	fa1f f58c 	uxth.w	r5, ip
 80187c6:	f8ad c012 	strh.w	ip, [sp, #18]
 80187ca:	eba0 0008 	sub.w	r0, r0, r8
 80187ce:	4443      	add	r3, r8
 80187d0:	f8ad 6018 	strh.w	r6, [sp, #24]
 80187d4:	f8ad 0014 	strh.w	r0, [sp, #20]
 80187d8:	1a59      	subs	r1, r3, r1
 80187da:	ebae 0005 	sub.w	r0, lr, r5
 80187de:	f8ad 701a 	strh.w	r7, [sp, #26]
 80187e2:	f8ad 101c 	strh.w	r1, [sp, #28]
 80187e6:	f8ad 0016 	strh.w	r0, [sp, #22]
 80187ea:	442a      	add	r2, r5
 80187ec:	eba2 0e0e 	sub.w	lr, r2, lr
 80187f0:	f8ad e01e 	strh.w	lr, [sp, #30]
 80187f4:	f8db 3010 	ldr.w	r3, [fp, #16]
 80187f8:	a904      	add	r1, sp, #16
 80187fa:	4620      	mov	r0, r4
 80187fc:	4798      	blx	r3
 80187fe:	6823      	ldr	r3, [r4, #0]
 8018800:	4649      	mov	r1, r9
 8018802:	691b      	ldr	r3, [r3, #16]
 8018804:	e79a      	b.n	801873c <_ZNK8touchgfx4Line17invalidateContentEv+0x60>
 8018806:	d003      	beq.n	8018810 <_ZNK8touchgfx4Line17invalidateContentEv+0x134>
 8018808:	eba8 0505 	sub.w	r5, r8, r5
 801880c:	2d00      	cmp	r5, #0
 801880e:	dcd4      	bgt.n	80187ba <_ZNK8touchgfx4Line17invalidateContentEv+0xde>
 8018810:	fa1f f88a 	uxth.w	r8, sl
 8018814:	f8ad 6010 	strh.w	r6, [sp, #16]
 8018818:	fa1f f58c 	uxth.w	r5, ip
 801881c:	f8ad c012 	strh.w	ip, [sp, #18]
 8018820:	4443      	add	r3, r8
 8018822:	eba0 0008 	sub.w	r0, r0, r8
 8018826:	f8ad a018 	strh.w	sl, [sp, #24]
 801882a:	1a59      	subs	r1, r3, r1
 801882c:	ebae 0305 	sub.w	r3, lr, r5
 8018830:	f8ad 701a 	strh.w	r7, [sp, #26]
 8018834:	f8ad 1014 	strh.w	r1, [sp, #20]
 8018838:	f8ad 3016 	strh.w	r3, [sp, #22]
 801883c:	f8ad 001c 	strh.w	r0, [sp, #28]
 8018840:	e7d3      	b.n	80187ea <_ZNK8touchgfx4Line17invalidateContentEv+0x10e>
 8018842:	ebae 0100 	sub.w	r1, lr, r0
 8018846:	f1ba 0f00 	cmp.w	sl, #0
 801884a:	4470      	add	r0, lr
 801884c:	f9bd a00a 	ldrsh.w	sl, [sp, #10]
 8018850:	b289      	uxth	r1, r1
 8018852:	f9bd e008 	ldrsh.w	lr, [sp, #8]
 8018856:	b280      	uxth	r0, r0
 8018858:	b20f      	sxth	r7, r1
 801885a:	da20      	bge.n	801889e <_ZNK8touchgfx4Line17invalidateContentEv+0x1c2>
 801885c:	eba8 0505 	sub.w	r5, r8, r5
 8018860:	2d00      	cmp	r5, #0
 8018862:	da21      	bge.n	80188a8 <_ZNK8touchgfx4Line17invalidateContentEv+0x1cc>
 8018864:	fa1f f88e 	uxth.w	r8, lr
 8018868:	f8ad e010 	strh.w	lr, [sp, #16]
 801886c:	fa1f f58a 	uxth.w	r5, sl
 8018870:	f8ad a012 	strh.w	sl, [sp, #18]
 8018874:	4443      	add	r3, r8
 8018876:	ebac 0e08 	sub.w	lr, ip, r8
 801887a:	442a      	add	r2, r5
 801887c:	1b40      	subs	r0, r0, r5
 801887e:	eba3 0c0c 	sub.w	ip, r3, ip
 8018882:	f8ad e014 	strh.w	lr, [sp, #20]
 8018886:	1a51      	subs	r1, r2, r1
 8018888:	f8ad 0016 	strh.w	r0, [sp, #22]
 801888c:	f8ad 6018 	strh.w	r6, [sp, #24]
 8018890:	f8ad 701a 	strh.w	r7, [sp, #26]
 8018894:	f8ad c01c 	strh.w	ip, [sp, #28]
 8018898:	f8ad 101e 	strh.w	r1, [sp, #30]
 801889c:	e7aa      	b.n	80187f4 <_ZNK8touchgfx4Line17invalidateContentEv+0x118>
 801889e:	d003      	beq.n	80188a8 <_ZNK8touchgfx4Line17invalidateContentEv+0x1cc>
 80188a0:	eba8 0505 	sub.w	r5, r8, r5
 80188a4:	2d00      	cmp	r5, #0
 80188a6:	dcdd      	bgt.n	8018864 <_ZNK8touchgfx4Line17invalidateContentEv+0x188>
 80188a8:	fa1f f58e 	uxth.w	r5, lr
 80188ac:	f8ad 7012 	strh.w	r7, [sp, #18]
 80188b0:	fa1f f88a 	uxth.w	r8, sl
 80188b4:	f8ad e010 	strh.w	lr, [sp, #16]
 80188b8:	442b      	add	r3, r5
 80188ba:	ebac 0705 	sub.w	r7, ip, r5
 80188be:	4442      	add	r2, r8
 80188c0:	eba0 0008 	sub.w	r0, r0, r8
 80188c4:	eba3 0c0c 	sub.w	ip, r3, ip
 80188c8:	f8ad 7014 	strh.w	r7, [sp, #20]
 80188cc:	1a51      	subs	r1, r2, r1
 80188ce:	f8ad 6018 	strh.w	r6, [sp, #24]
 80188d2:	f8ad a01a 	strh.w	sl, [sp, #26]
 80188d6:	f8ad 1016 	strh.w	r1, [sp, #22]
 80188da:	f8ad c01c 	strh.w	ip, [sp, #28]
 80188de:	f8ad 001e 	strh.w	r0, [sp, #30]
 80188e2:	e787      	b.n	80187f4 <_ZNK8touchgfx4Line17invalidateContentEv+0x118>

080188e4 <_ZN8touchgfx7CWRUtil4sineEi>:
 80188e4:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80188e8:	fb90 f2f3 	sdiv	r2, r0, r3
 80188ec:	fb02 0013 	mls	r0, r2, r3, r0
 80188f0:	2800      	cmp	r0, #0
 80188f2:	bfb8      	it	lt
 80188f4:	18c0      	addlt	r0, r0, r3
 80188f6:	4b0a      	ldr	r3, [pc, #40]	; (8018920 <_ZN8touchgfx7CWRUtil4sineEi+0x3c>)
 80188f8:	285a      	cmp	r0, #90	; 0x5a
 80188fa:	dc02      	bgt.n	8018902 <_ZN8touchgfx7CWRUtil4sineEi+0x1e>
 80188fc:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8018900:	4770      	bx	lr
 8018902:	28b4      	cmp	r0, #180	; 0xb4
 8018904:	dc02      	bgt.n	801890c <_ZN8touchgfx7CWRUtil4sineEi+0x28>
 8018906:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
 801890a:	e7f7      	b.n	80188fc <_ZN8touchgfx7CWRUtil4sineEi+0x18>
 801890c:	f5b0 7f87 	cmp.w	r0, #270	; 0x10e
 8018910:	bfd4      	ite	le
 8018912:	38b4      	suble	r0, #180	; 0xb4
 8018914:	f5c0 70b4 	rsbgt	r0, r0, #360	; 0x168
 8018918:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 801891c:	4240      	negs	r0, r0
 801891e:	4770      	bx	lr
 8018920:	0802fbcc 	.word	0x0802fbcc

08018924 <_ZN8touchgfx7CWRUtil5isqrtEm>:
 8018924:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8018928:	f04f 0300 	mov.w	r3, #0
 801892c:	bf2c      	ite	cs
 801892e:	f04f 4280 	movcs.w	r2, #1073741824	; 0x40000000
 8018932:	f44f 4280 	movcc.w	r2, #16384	; 0x4000
 8018936:	1899      	adds	r1, r3, r2
 8018938:	4288      	cmp	r0, r1
 801893a:	bf24      	itt	cs
 801893c:	1853      	addcs	r3, r2, r1
 801893e:	1a40      	subcs	r0, r0, r1
 8018940:	0892      	lsrs	r2, r2, #2
 8018942:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8018946:	d1f6      	bne.n	8018936 <_ZN8touchgfx7CWRUtil5isqrtEm+0x12>
 8018948:	4618      	mov	r0, r3
 801894a:	4770      	bx	lr

0801894c <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>:
 801894c:	b510      	push	{r4, lr}
 801894e:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
 8018952:	ea81 74e1 	eor.w	r4, r1, r1, asr #31
 8018956:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
 801895a:	eba4 74e1 	sub.w	r4, r4, r1, asr #31
 801895e:	139b      	asrs	r3, r3, #14
 8018960:	13a4      	asrs	r4, r4, #14
 8018962:	429c      	cmp	r4, r3
 8018964:	bfb8      	it	lt
 8018966:	461c      	movlt	r4, r3
 8018968:	2c01      	cmp	r4, #1
 801896a:	dd07      	ble.n	801897c <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x30>
 801896c:	fb91 f1f4 	sdiv	r1, r1, r4
 8018970:	fb90 f0f4 	sdiv	r0, r0, r4
 8018974:	f7ff ffea 	bl	801894c <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 8018978:	4360      	muls	r0, r4
 801897a:	bd10      	pop	{r4, pc}
 801897c:	4340      	muls	r0, r0
 801897e:	fb01 0001 	mla	r0, r1, r1, r0
 8018982:	f7ff ffcf 	bl	8018924 <_ZN8touchgfx7CWRUtil5isqrtEm>
 8018986:	e7f8      	b.n	801897a <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x2e>

08018988 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>:
 8018988:	2800      	cmp	r0, #0
 801898a:	b508      	push	{r3, lr}
 801898c:	da05      	bge.n	801899a <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x12>
 801898e:	4240      	negs	r0, r0
 8018990:	f7ff fffa 	bl	8018988 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 8018994:	4240      	negs	r0, r0
 8018996:	b240      	sxtb	r0, r0
 8018998:	bd08      	pop	{r3, pc}
 801899a:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 801899e:	dc11      	bgt.n	80189c4 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x3c>
 80189a0:	f5b0 7f35 	cmp.w	r0, #724	; 0x2d4
 80189a4:	dd09      	ble.n	80189ba <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x32>
 80189a6:	4340      	muls	r0, r0
 80189a8:	f5c0 1080 	rsb	r0, r0, #1048576	; 0x100000
 80189ac:	f7ff ffba 	bl	8018924 <_ZN8touchgfx7CWRUtil5isqrtEm>
 80189b0:	f7ff ffea 	bl	8018988 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 80189b4:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 80189b8:	e7ed      	b.n	8018996 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0xe>
 80189ba:	3003      	adds	r0, #3
 80189bc:	4b02      	ldr	r3, [pc, #8]	; (80189c8 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x40>)
 80189be:	10c0      	asrs	r0, r0, #3
 80189c0:	5618      	ldrsb	r0, [r3, r0]
 80189c2:	e7e9      	b.n	8018998 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x10>
 80189c4:	2000      	movs	r0, #0
 80189c6:	e7e7      	b.n	8018998 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x10>
 80189c8:	0802fb70 	.word	0x0802fb70

080189cc <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>:
 80189cc:	4281      	cmp	r1, r0
 80189ce:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80189d0:	460c      	mov	r4, r1
 80189d2:	4615      	mov	r5, r2
 80189d4:	dd07      	ble.n	80189e6 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x1a>
 80189d6:	4601      	mov	r1, r0
 80189d8:	4620      	mov	r0, r4
 80189da:	f7ff fff7 	bl	80189cc <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 80189de:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 80189e2:	b003      	add	sp, #12
 80189e4:	bd30      	pop	{r4, r5, pc}
 80189e6:	f7ff ffb1 	bl	801894c <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 80189ea:	6028      	str	r0, [r5, #0]
 80189ec:	2800      	cmp	r0, #0
 80189ee:	d0f8      	beq.n	80189e2 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x16>
 80189f0:	4602      	mov	r2, r0
 80189f2:	ab01      	add	r3, sp, #4
 80189f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80189f8:	4620      	mov	r0, r4
 80189fa:	f003 fe54 	bl	801c6a6 <_ZN8touchgfx6muldivElllRl>
 80189fe:	f7ff ffc3 	bl	8018988 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 8018a02:	e7ee      	b.n	80189e2 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x16>

08018a04 <_ZN8touchgfx4LineC1Ev>:
 8018a04:	b510      	push	{r4, lr}
 8018a06:	4604      	mov	r4, r0
 8018a08:	f011 fb06 	bl	802a018 <_ZN8touchgfx12CanvasWidgetC1Ev>
 8018a0c:	4b0c      	ldr	r3, [pc, #48]	; (8018a40 <_ZN8touchgfx4LineC1Ev+0x3c>)
 8018a0e:	2220      	movs	r2, #32
 8018a10:	4620      	mov	r0, r4
 8018a12:	6023      	str	r3, [r4, #0]
 8018a14:	2300      	movs	r3, #0
 8018a16:	63e2      	str	r2, [r4, #60]	; 0x3c
 8018a18:	2212      	movs	r2, #18
 8018a1a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8018a1e:	66e2      	str	r2, [r4, #108]	; 0x6c
 8018a20:	60a3      	str	r3, [r4, #8]
 8018a22:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 8018a26:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 8018a2a:	e9c4 3311 	strd	r3, r3, [r4, #68]	; 0x44
 8018a2e:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 8018a32:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
 8018a36:	e9c4 3317 	strd	r3, r3, [r4, #92]	; 0x5c
 8018a3a:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
 8018a3e:	bd10      	pop	{r4, pc}
 8018a40:	0802fc8c 	.word	0x0802fc8c

08018a44 <_ZN8touchgfx4Line17updateCachedShapeEv>:
 8018a44:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8018a48:	6b47      	ldr	r7, [r0, #52]	; 0x34
 8018a4a:	4604      	mov	r4, r0
 8018a4c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8018a4e:	6b85      	ldr	r5, [r0, #56]	; 0x38
 8018a50:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8018a52:	1aff      	subs	r7, r7, r3
 8018a54:	eba5 0502 	sub.w	r5, r5, r2
 8018a58:	d142      	bne.n	8018ae0 <_ZN8touchgfx4Line17updateCachedShapeEv+0x9c>
 8018a5a:	b955      	cbnz	r5, 8018a72 <_ZN8touchgfx4Line17updateCachedShapeEv+0x2e>
 8018a5c:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
 8018a60:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
 8018a64:	e9c0 2217 	strd	r2, r2, [r0, #92]	; 0x5c
 8018a68:	e9c0 2215 	strd	r2, r2, [r0, #84]	; 0x54
 8018a6c:	b002      	add	sp, #8
 8018a6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018a72:	ea85 78e5 	eor.w	r8, r5, r5, asr #31
 8018a76:	eba8 78e5 	sub.w	r8, r8, r5, asr #31
 8018a7a:	4629      	mov	r1, r5
 8018a7c:	2502      	movs	r5, #2
 8018a7e:	4642      	mov	r2, r8
 8018a80:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8018a82:	f003 fe2f 	bl	801c6e4 <_ZN8touchgfx6muldivElll>
 8018a86:	4642      	mov	r2, r8
 8018a88:	4639      	mov	r1, r7
 8018a8a:	fb90 f6f5 	sdiv	r6, r0, r5
 8018a8e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8018a90:	f003 fe28 	bl	801c6e4 <_ZN8touchgfx6muldivElll>
 8018a94:	f894 9040 	ldrb.w	r9, [r4, #64]	; 0x40
 8018a98:	fb90 f5f5 	sdiv	r5, r0, r5
 8018a9c:	f1b9 0f00 	cmp.w	r9, #0
 8018aa0:	d067      	beq.n	8018b72 <_ZN8touchgfx4Line17updateCachedShapeEv+0x12e>
 8018aa2:	f1b9 0f02 	cmp.w	r9, #2
 8018aa6:	d878      	bhi.n	8018b9a <_ZN8touchgfx4Line17updateCachedShapeEv+0x156>
 8018aa8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8018aaa:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8018aac:	1b93      	subs	r3, r2, r6
 8018aae:	4432      	add	r2, r6
 8018ab0:	1b5b      	subs	r3, r3, r5
 8018ab2:	1b52      	subs	r2, r2, r5
 8018ab4:	6463      	str	r3, [r4, #68]	; 0x44
 8018ab6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8018ab8:	6522      	str	r2, [r4, #80]	; 0x50
 8018aba:	18e9      	adds	r1, r5, r3
 8018abc:	1b5b      	subs	r3, r3, r5
 8018abe:	1b89      	subs	r1, r1, r6
 8018ac0:	1b9b      	subs	r3, r3, r6
 8018ac2:	6561      	str	r1, [r4, #84]	; 0x54
 8018ac4:	1b81      	subs	r1, r0, r6
 8018ac6:	4430      	add	r0, r6
 8018ac8:	4429      	add	r1, r5
 8018aca:	4428      	add	r0, r5
 8018acc:	64a1      	str	r1, [r4, #72]	; 0x48
 8018ace:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8018ad0:	64e0      	str	r0, [r4, #76]	; 0x4c
 8018ad2:	186f      	adds	r7, r5, r1
 8018ad4:	1b49      	subs	r1, r1, r5
 8018ad6:	4437      	add	r7, r6
 8018ad8:	4431      	add	r1, r6
 8018ada:	65a7      	str	r7, [r4, #88]	; 0x58
 8018adc:	65e1      	str	r1, [r4, #92]	; 0x5c
 8018ade:	e05b      	b.n	8018b98 <_ZN8touchgfx4Line17updateCachedShapeEv+0x154>
 8018ae0:	ea87 78e7 	eor.w	r8, r7, r7, asr #31
 8018ae4:	eba8 78e7 	sub.w	r8, r8, r7, asr #31
 8018ae8:	2d00      	cmp	r5, #0
 8018aea:	d0c6      	beq.n	8018a7a <_ZN8touchgfx4Line17updateCachedShapeEv+0x36>
 8018aec:	ea85 73e5 	eor.w	r3, r5, r5, asr #31
 8018af0:	eba3 73e5 	sub.w	r3, r3, r5, asr #31
 8018af4:	fb93 f2f8 	sdiv	r2, r3, r8
 8018af8:	fb08 3312 	mls	r3, r8, r2, r3
 8018afc:	b353      	cbz	r3, 8018b54 <_ZN8touchgfx4Line17updateCachedShapeEv+0x110>
 8018afe:	fb98 f2f3 	sdiv	r2, r8, r3
 8018b02:	fb03 8812 	mls	r8, r3, r2, r8
 8018b06:	f1b8 0f00 	cmp.w	r8, #0
 8018b0a:	d1f3      	bne.n	8018af4 <_ZN8touchgfx4Line17updateCachedShapeEv+0xb0>
 8018b0c:	2b01      	cmp	r3, #1
 8018b0e:	f24b 5104 	movw	r1, #46340	; 0xb504
 8018b12:	bf1c      	itt	ne
 8018b14:	fb97 f7f3 	sdivne	r7, r7, r3
 8018b18:	fb95 f5f3 	sdivne	r5, r5, r3
 8018b1c:	ea87 73e7 	eor.w	r3, r7, r7, asr #31
 8018b20:	4608      	mov	r0, r1
 8018b22:	ea85 72e5 	eor.w	r2, r5, r5, asr #31
 8018b26:	eba3 73e7 	sub.w	r3, r3, r7, asr #31
 8018b2a:	eba2 72e5 	sub.w	r2, r2, r5, asr #31
 8018b2e:	428b      	cmp	r3, r1
 8018b30:	dd01      	ble.n	8018b36 <_ZN8touchgfx4Line17updateCachedShapeEv+0xf2>
 8018b32:	428a      	cmp	r2, r1
 8018b34:	dc10      	bgt.n	8018b58 <_ZN8touchgfx4Line17updateCachedShapeEv+0x114>
 8018b36:	fb90 f3f3 	sdiv	r3, r0, r3
 8018b3a:	fb90 f2f2 	sdiv	r2, r0, r2
 8018b3e:	4293      	cmp	r3, r2
 8018b40:	bfa8      	it	ge
 8018b42:	4613      	movge	r3, r2
 8018b44:	435f      	muls	r7, r3
 8018b46:	435d      	muls	r5, r3
 8018b48:	4629      	mov	r1, r5
 8018b4a:	4638      	mov	r0, r7
 8018b4c:	f7ff fefe 	bl	801894c <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 8018b50:	4680      	mov	r8, r0
 8018b52:	e792      	b.n	8018a7a <_ZN8touchgfx4Line17updateCachedShapeEv+0x36>
 8018b54:	4643      	mov	r3, r8
 8018b56:	e7d9      	b.n	8018b0c <_ZN8touchgfx4Line17updateCachedShapeEv+0xc8>
 8018b58:	fb93 f3f1 	sdiv	r3, r3, r1
 8018b5c:	fb92 f2f1 	sdiv	r2, r2, r1
 8018b60:	4293      	cmp	r3, r2
 8018b62:	bfcc      	ite	gt
 8018b64:	3301      	addgt	r3, #1
 8018b66:	1c53      	addle	r3, r2, #1
 8018b68:	fb97 f7f3 	sdiv	r7, r7, r3
 8018b6c:	fb95 f5f3 	sdiv	r5, r5, r3
 8018b70:	e7ea      	b.n	8018b48 <_ZN8touchgfx4Line17updateCachedShapeEv+0x104>
 8018b72:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8018b74:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8018b76:	1b93      	subs	r3, r2, r6
 8018b78:	4432      	add	r2, r6
 8018b7a:	6463      	str	r3, [r4, #68]	; 0x44
 8018b7c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8018b7e:	6522      	str	r2, [r4, #80]	; 0x50
 8018b80:	18e9      	adds	r1, r5, r3
 8018b82:	1b5b      	subs	r3, r3, r5
 8018b84:	6561      	str	r1, [r4, #84]	; 0x54
 8018b86:	1b81      	subs	r1, r0, r6
 8018b88:	4430      	add	r0, r6
 8018b8a:	64a1      	str	r1, [r4, #72]	; 0x48
 8018b8c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8018b8e:	64e0      	str	r0, [r4, #76]	; 0x4c
 8018b90:	186f      	adds	r7, r5, r1
 8018b92:	1b49      	subs	r1, r1, r5
 8018b94:	65a7      	str	r7, [r4, #88]	; 0x58
 8018b96:	65e1      	str	r1, [r4, #92]	; 0x5c
 8018b98:	6623      	str	r3, [r4, #96]	; 0x60
 8018b9a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8018b9c:	f104 0148 	add.w	r1, r4, #72	; 0x48
 8018ba0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8018ba2:	f104 0c54 	add.w	ip, r4, #84	; 0x54
 8018ba6:	9200      	str	r2, [sp, #0]
 8018ba8:	9301      	str	r3, [sp, #4]
 8018baa:	680f      	ldr	r7, [r1, #0]
 8018bac:	3104      	adds	r1, #4
 8018bae:	9800      	ldr	r0, [sp, #0]
 8018bb0:	42ba      	cmp	r2, r7
 8018bb2:	bfa8      	it	ge
 8018bb4:	463a      	movge	r2, r7
 8018bb6:	4287      	cmp	r7, r0
 8018bb8:	9801      	ldr	r0, [sp, #4]
 8018bba:	bfc8      	it	gt
 8018bbc:	9700      	strgt	r7, [sp, #0]
 8018bbe:	68cf      	ldr	r7, [r1, #12]
 8018bc0:	42bb      	cmp	r3, r7
 8018bc2:	bfa8      	it	ge
 8018bc4:	463b      	movge	r3, r7
 8018bc6:	4287      	cmp	r7, r0
 8018bc8:	bfc8      	it	gt
 8018bca:	9701      	strgt	r7, [sp, #4]
 8018bcc:	458c      	cmp	ip, r1
 8018bce:	d1ec      	bne.n	8018baa <_ZN8touchgfx4Line17updateCachedShapeEv+0x166>
 8018bd0:	2720      	movs	r7, #32
 8018bd2:	4668      	mov	r0, sp
 8018bd4:	fb92 f8f7 	sdiv	r8, r2, r7
 8018bd8:	fb93 f7f7 	sdiv	r7, r3, r7
 8018bdc:	f7ff fd75 	bl	80186ca <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 8018be0:	4682      	mov	sl, r0
 8018be2:	a801      	add	r0, sp, #4
 8018be4:	f7ff fd71 	bl	80186ca <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 8018be8:	ebaa 0208 	sub.w	r2, sl, r8
 8018bec:	1bc0      	subs	r0, r0, r7
 8018bee:	f1b9 0f01 	cmp.w	r9, #1
 8018bf2:	f8a4 8064 	strh.w	r8, [r4, #100]	; 0x64
 8018bf6:	f8a4 7066 	strh.w	r7, [r4, #102]	; 0x66
 8018bfa:	f8a4 2068 	strh.w	r2, [r4, #104]	; 0x68
 8018bfe:	f8a4 006a 	strh.w	r0, [r4, #106]	; 0x6a
 8018c02:	f47f af33 	bne.w	8018a6c <_ZN8touchgfx4Line17updateCachedShapeEv+0x28>
 8018c06:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8018c08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018c0a:	1b83      	subs	r3, r0, r6
 8018c0c:	6463      	str	r3, [r4, #68]	; 0x44
 8018c0e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8018c10:	18ea      	adds	r2, r5, r3
 8018c12:	6562      	str	r2, [r4, #84]	; 0x54
 8018c14:	1b8a      	subs	r2, r1, r6
 8018c16:	4431      	add	r1, r6
 8018c18:	4406      	add	r6, r0
 8018c1a:	64a2      	str	r2, [r4, #72]	; 0x48
 8018c1c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8018c1e:	64e1      	str	r1, [r4, #76]	; 0x4c
 8018c20:	18af      	adds	r7, r5, r2
 8018c22:	1b52      	subs	r2, r2, r5
 8018c24:	1b5d      	subs	r5, r3, r5
 8018c26:	6526      	str	r6, [r4, #80]	; 0x50
 8018c28:	65a7      	str	r7, [r4, #88]	; 0x58
 8018c2a:	65e2      	str	r2, [r4, #92]	; 0x5c
 8018c2c:	6625      	str	r5, [r4, #96]	; 0x60
 8018c2e:	e71d      	b.n	8018a6c <_ZN8touchgfx4Line17updateCachedShapeEv+0x28>

08018c30 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_>:
 8018c30:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8018c32:	428b      	cmp	r3, r1
 8018c34:	d102      	bne.n	8018c3c <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_+0xc>
 8018c36:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8018c38:	4293      	cmp	r3, r2
 8018c3a:	d003      	beq.n	8018c44 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_+0x14>
 8018c3c:	e9c0 120b 	strd	r1, r2, [r0, #44]	; 0x2c
 8018c40:	f7ff bf00 	b.w	8018a44 <_ZN8touchgfx4Line17updateCachedShapeEv>
 8018c44:	4770      	bx	lr

08018c46 <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_>:
 8018c46:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8018c48:	428b      	cmp	r3, r1
 8018c4a:	d102      	bne.n	8018c52 <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_+0xc>
 8018c4c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8018c4e:	4293      	cmp	r3, r2
 8018c50:	d003      	beq.n	8018c5a <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_+0x14>
 8018c52:	e9c0 120d 	strd	r1, r2, [r0, #52]	; 0x34
 8018c56:	f7ff bef5 	b.w	8018a44 <_ZN8touchgfx4Line17updateCachedShapeEv>
 8018c5a:	4770      	bx	lr

08018c5c <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>:
 8018c5c:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
 8018c60:	f7ff bef0 	b.w	8018a44 <_ZN8touchgfx4Line17updateCachedShapeEv>

08018c64 <_ZN8touchgfx6CanvasD1Ev>:
 8018c64:	4b04      	ldr	r3, [pc, #16]	; (8018c78 <_ZN8touchgfx6CanvasD1Ev+0x14>)
 8018c66:	b510      	push	{r4, lr}
 8018c68:	4604      	mov	r4, r0
 8018c6a:	f840 3b20 	str.w	r3, [r0], #32
 8018c6e:	f000 fc6f 	bl	8019550 <_ZN8touchgfx7OutlineD1Ev>
 8018c72:	4620      	mov	r0, r4
 8018c74:	bd10      	pop	{r4, pc}
 8018c76:	bf00      	nop
 8018c78:	0802fb68 	.word	0x0802fb68

08018c7c <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE>:
 8018c7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018c80:	b0a0      	sub	sp, #128	; 0x80
 8018c82:	4604      	mov	r4, r0
 8018c84:	460a      	mov	r2, r1
 8018c86:	4601      	mov	r1, r0
 8018c88:	a804      	add	r0, sp, #16
 8018c8a:	f010 feff 	bl	8029a8c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 8018c8e:	2300      	movs	r3, #0
 8018c90:	9301      	str	r3, [sp, #4]
 8018c92:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8018c96:	2b01      	cmp	r3, #1
 8018c98:	d17c      	bne.n	8018d94 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x118>
 8018c9a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8018c9c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8018c9e:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8018ca0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8018ca2:	1ac0      	subs	r0, r0, r3
 8018ca4:	eba1 0102 	sub.w	r1, r1, r2
 8018ca8:	d437      	bmi.n	8018d1a <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x9e>
 8018caa:	2900      	cmp	r1, #0
 8018cac:	aa01      	add	r2, sp, #4
 8018cae:	db2e      	blt.n	8018d0e <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x92>
 8018cb0:	f7ff fe8c 	bl	80189cc <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8018cb4:	f100 065a 	add.w	r6, r0, #90	; 0x5a
 8018cb8:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8018cba:	a804      	add	r0, sp, #16
 8018cbc:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8018cbe:	f011 f8bb 	bl	8029e38 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 8018cc2:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8018cc4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8018cc6:	a804      	add	r0, sp, #16
 8018cc8:	f010 ff8e 	bl	8029be8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8018ccc:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 8018cce:	2db3      	cmp	r5, #179	; 0xb3
 8018cd0:	dc33      	bgt.n	8018d3a <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xbe>
 8018cd2:	eba6 0805 	sub.w	r8, r6, r5
 8018cd6:	4640      	mov	r0, r8
 8018cd8:	f7ff fe04 	bl	80188e4 <_ZN8touchgfx7CWRUtil4sineEi>
 8018cdc:	a902      	add	r1, sp, #8
 8018cde:	9002      	str	r0, [sp, #8]
 8018ce0:	a801      	add	r0, sp, #4
 8018ce2:	f7ff fce7 	bl	80186b4 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8018ce6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018ce8:	1847      	adds	r7, r0, r1
 8018cea:	f1c8 005a 	rsb	r0, r8, #90	; 0x5a
 8018cee:	f7ff fdf9 	bl	80188e4 <_ZN8touchgfx7CWRUtil4sineEi>
 8018cf2:	a903      	add	r1, sp, #12
 8018cf4:	9003      	str	r0, [sp, #12]
 8018cf6:	a801      	add	r0, sp, #4
 8018cf8:	f7ff fcdc 	bl	80186b4 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8018cfc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8018cfe:	4639      	mov	r1, r7
 8018d00:	1a12      	subs	r2, r2, r0
 8018d02:	a804      	add	r0, sp, #16
 8018d04:	f010 ff70 	bl	8029be8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8018d08:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8018d0a:	441d      	add	r5, r3
 8018d0c:	e7df      	b.n	8018cce <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x52>
 8018d0e:	4249      	negs	r1, r1
 8018d10:	f7ff fe5c 	bl	80189cc <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8018d14:	f1c0 065a 	rsb	r6, r0, #90	; 0x5a
 8018d18:	e7ce      	b.n	8018cb8 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x3c>
 8018d1a:	2900      	cmp	r1, #0
 8018d1c:	f1c0 0000 	rsb	r0, r0, #0
 8018d20:	aa01      	add	r2, sp, #4
 8018d22:	db04      	blt.n	8018d2e <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xb2>
 8018d24:	f7ff fe52 	bl	80189cc <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8018d28:	f5c0 7687 	rsb	r6, r0, #270	; 0x10e
 8018d2c:	e7c4      	b.n	8018cb8 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x3c>
 8018d2e:	4249      	negs	r1, r1
 8018d30:	f7ff fe4c 	bl	80189cc <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8018d34:	f500 7687 	add.w	r6, r0, #270	; 0x10e
 8018d38:	e7be      	b.n	8018cb8 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x3c>
 8018d3a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8018d3c:	a804      	add	r0, sp, #16
 8018d3e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8018d40:	f010 ff52 	bl	8029be8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8018d44:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8018d46:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8018d48:	a804      	add	r0, sp, #16
 8018d4a:	f010 ff4d 	bl	8029be8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8018d4e:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 8018d50:	f1c5 05b4 	rsb	r5, r5, #180	; 0xb4
 8018d54:	2d00      	cmp	r5, #0
 8018d56:	dd31      	ble.n	8018dbc <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x140>
 8018d58:	eb05 0806 	add.w	r8, r5, r6
 8018d5c:	4640      	mov	r0, r8
 8018d5e:	f7ff fdc1 	bl	80188e4 <_ZN8touchgfx7CWRUtil4sineEi>
 8018d62:	a902      	add	r1, sp, #8
 8018d64:	9002      	str	r0, [sp, #8]
 8018d66:	a801      	add	r0, sp, #4
 8018d68:	f7ff fca4 	bl	80186b4 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8018d6c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8018d6e:	1847      	adds	r7, r0, r1
 8018d70:	f1c8 005a 	rsb	r0, r8, #90	; 0x5a
 8018d74:	f7ff fdb6 	bl	80188e4 <_ZN8touchgfx7CWRUtil4sineEi>
 8018d78:	a903      	add	r1, sp, #12
 8018d7a:	9003      	str	r0, [sp, #12]
 8018d7c:	a801      	add	r0, sp, #4
 8018d7e:	f7ff fc99 	bl	80186b4 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8018d82:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8018d84:	4639      	mov	r1, r7
 8018d86:	1a12      	subs	r2, r2, r0
 8018d88:	a804      	add	r0, sp, #16
 8018d8a:	f010 ff2d 	bl	8029be8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8018d8e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8018d90:	1aed      	subs	r5, r5, r3
 8018d92:	e7df      	b.n	8018d54 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xd8>
 8018d94:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8018d96:	a804      	add	r0, sp, #16
 8018d98:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8018d9a:	f011 f84d 	bl	8029e38 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 8018d9e:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8018da0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8018da2:	a804      	add	r0, sp, #16
 8018da4:	f010 ff20 	bl	8029be8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8018da8:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8018daa:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8018dac:	a804      	add	r0, sp, #16
 8018dae:	f010 ff1b 	bl	8029be8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8018db2:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8018db4:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8018db6:	a804      	add	r0, sp, #16
 8018db8:	f010 ff16 	bl	8029be8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8018dbc:	21ff      	movs	r1, #255	; 0xff
 8018dbe:	a804      	add	r0, sp, #16
 8018dc0:	f010 ff8e 	bl	8029ce0 <_ZN8touchgfx6Canvas6renderEh>
 8018dc4:	4604      	mov	r4, r0
 8018dc6:	a804      	add	r0, sp, #16
 8018dc8:	f7ff ff4c 	bl	8018c64 <_ZN8touchgfx6CanvasD1Ev>
 8018dcc:	4620      	mov	r0, r4
 8018dce:	b020      	add	sp, #128	; 0x80
 8018dd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018dd4 <_ZN8touchgfx6CanvasD0Ev>:
 8018dd4:	b510      	push	{r4, lr}
 8018dd6:	4604      	mov	r4, r0
 8018dd8:	f7ff ff44 	bl	8018c64 <_ZN8touchgfx6CanvasD1Ev>
 8018ddc:	2170      	movs	r1, #112	; 0x70
 8018dde:	4620      	mov	r0, r4
 8018de0:	f011 f95a 	bl	802a098 <_ZdlPvj>
 8018de4:	4620      	mov	r0, r4
 8018de6:	bd10      	pop	{r4, pc}

08018de8 <_ZNK8touchgfx5Image17invalidateContentEv>:
 8018de8:	b508      	push	{r3, lr}
 8018dea:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8018dee:	b10b      	cbz	r3, 8018df4 <_ZNK8touchgfx5Image17invalidateContentEv+0xc>
 8018df0:	f7ea fedd 	bl	8003bae <_ZNK8touchgfx8Drawable17invalidateContentEv>
 8018df4:	bd08      	pop	{r3, pc}

08018df6 <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>:
 8018df6:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 8018dfa:	4770      	bx	lr

08018dfc <_ZN8touchgfx13ScalableImage19getScalingAlgorithmEv>:
 8018dfc:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
 8018e00:	4770      	bx	lr

08018e02 <_ZN8touchgfx13ScalableImageD1Ev>:
 8018e02:	4770      	bx	lr

08018e04 <_ZN8touchgfx13ScalableImageD0Ev>:
 8018e04:	b510      	push	{r4, lr}
 8018e06:	4604      	mov	r4, r0
 8018e08:	212c      	movs	r1, #44	; 0x2c
 8018e0a:	f011 f945 	bl	802a098 <_ZdlPvj>
 8018e0e:	4620      	mov	r0, r4
 8018e10:	bd10      	pop	{r4, pc}

08018e12 <_ZNK8touchgfx13ScalableImage12getSolidRectEv>:
 8018e12:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8018e14:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8018e18:	4605      	mov	r5, r0
 8018e1a:	2bff      	cmp	r3, #255	; 0xff
 8018e1c:	d11e      	bne.n	8018e5c <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x4a>
 8018e1e:	f101 0426 	add.w	r4, r1, #38	; 0x26
 8018e22:	4668      	mov	r0, sp
 8018e24:	4621      	mov	r1, r4
 8018e26:	f004 ffcf 	bl	801ddc8 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8018e2a:	f9bd 6004 	ldrsh.w	r6, [sp, #4]
 8018e2e:	4620      	mov	r0, r4
 8018e30:	f004 ff62 	bl	801dcf8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8018e34:	4286      	cmp	r6, r0
 8018e36:	d111      	bne.n	8018e5c <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x4a>
 8018e38:	4621      	mov	r1, r4
 8018e3a:	a802      	add	r0, sp, #8
 8018e3c:	f004 ffc4 	bl	801ddc8 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8018e40:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 8018e44:	4620      	mov	r0, r4
 8018e46:	f004 ff8b 	bl	801dd60 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8018e4a:	4286      	cmp	r6, r0
 8018e4c:	d106      	bne.n	8018e5c <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x4a>
 8018e4e:	4621      	mov	r1, r4
 8018e50:	4628      	mov	r0, r5
 8018e52:	f004 ffb9 	bl	801ddc8 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8018e56:	4628      	mov	r0, r5
 8018e58:	b004      	add	sp, #16
 8018e5a:	bd70      	pop	{r4, r5, r6, pc}
 8018e5c:	2300      	movs	r3, #0
 8018e5e:	802b      	strh	r3, [r5, #0]
 8018e60:	806b      	strh	r3, [r5, #2]
 8018e62:	80ab      	strh	r3, [r5, #4]
 8018e64:	80eb      	strh	r3, [r5, #6]
 8018e66:	e7f6      	b.n	8018e56 <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x44>

08018e68 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>:
 8018e68:	b538      	push	{r3, r4, r5, lr}
 8018e6a:	2300      	movs	r3, #0
 8018e6c:	2501      	movs	r5, #1
 8018e6e:	4604      	mov	r4, r0
 8018e70:	8083      	strh	r3, [r0, #4]
 8018e72:	80c3      	strh	r3, [r0, #6]
 8018e74:	8103      	strh	r3, [r0, #8]
 8018e76:	8143      	strh	r3, [r0, #10]
 8018e78:	8183      	strh	r3, [r0, #12]
 8018e7a:	81c3      	strh	r3, [r0, #14]
 8018e7c:	8203      	strh	r3, [r0, #16]
 8018e7e:	8243      	strh	r3, [r0, #18]
 8018e80:	61c3      	str	r3, [r0, #28]
 8018e82:	8403      	strh	r3, [r0, #32]
 8018e84:	8443      	strh	r3, [r0, #34]	; 0x22
 8018e86:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
 8018e8a:	f880 5025 	strb.w	r5, [r0, #37]	; 0x25
 8018e8e:	e9c0 3305 	strd	r3, r3, [r0, #20]
 8018e92:	4b07      	ldr	r3, [pc, #28]	; (8018eb0 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE+0x48>)
 8018e94:	6003      	str	r3, [r0, #0]
 8018e96:	880b      	ldrh	r3, [r1, #0]
 8018e98:	84c3      	strh	r3, [r0, #38]	; 0x26
 8018e9a:	23ff      	movs	r3, #255	; 0xff
 8018e9c:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 8018ea0:	f000 fae3 	bl	801946a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8018ea4:	4b03      	ldr	r3, [pc, #12]	; (8018eb4 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE+0x4c>)
 8018ea6:	f884 5029 	strb.w	r5, [r4, #41]	; 0x29
 8018eaa:	4620      	mov	r0, r4
 8018eac:	6023      	str	r3, [r4, #0]
 8018eae:	bd38      	pop	{r3, r4, r5, pc}
 8018eb0:	0802fe54 	.word	0x0802fe54
 8018eb4:	0802fd04 	.word	0x0802fd04

08018eb8 <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv>:
 8018eb8:	4603      	mov	r3, r0
 8018eba:	3026      	adds	r0, #38	; 0x26
 8018ebc:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8018ec0:	b90b      	cbnz	r3, 8018ec6 <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv+0xe>
 8018ec2:	f003 bb65 	b.w	801c590 <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>
 8018ec6:	f003 bb73 	b.w	801c5b0 <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>
	...

08018ecc <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_>:
 8018ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ed0:	4604      	mov	r4, r0
 8018ed2:	469b      	mov	fp, r3
 8018ed4:	f9b0 c008 	ldrsh.w	ip, [r0, #8]
 8018ed8:	b0b3      	sub	sp, #204	; 0xcc
 8018eda:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8018ede:	f9b1 6000 	ldrsh.w	r6, [r1]
 8018ee2:	8888      	ldrh	r0, [r1, #4]
 8018ee4:	9206      	str	r2, [sp, #24]
 8018ee6:	2200      	movs	r2, #0
 8018ee8:	4430      	add	r0, r6
 8018eea:	9211      	str	r2, [sp, #68]	; 0x44
 8018eec:	b280      	uxth	r0, r0
 8018eee:	fa0f fe80 	sxth.w	lr, r0
 8018ef2:	4596      	cmp	lr, r2
 8018ef4:	e9dd a93c 	ldrd	sl, r9, [sp, #240]	; 0xf0
 8018ef8:	e9dd 873e 	ldrd	r8, r7, [sp, #248]	; 0xf8
 8018efc:	f340 811a 	ble.w	8019134 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x268>
 8018f00:	45b4      	cmp	ip, r6
 8018f02:	f340 8117 	ble.w	8019134 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x268>
 8018f06:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8018f0a:	88ca      	ldrh	r2, [r1, #6]
 8018f0c:	442a      	add	r2, r5
 8018f0e:	b292      	uxth	r2, r2
 8018f10:	b211      	sxth	r1, r2
 8018f12:	2900      	cmp	r1, #0
 8018f14:	f340 810e 	ble.w	8019134 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x268>
 8018f18:	42ab      	cmp	r3, r5
 8018f1a:	f340 810b 	ble.w	8019134 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x268>
 8018f1e:	45f4      	cmp	ip, lr
 8018f20:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 8018f24:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8018f28:	bfb8      	it	lt
 8018f2a:	fa1f f08c 	uxthlt.w	r0, ip
 8018f2e:	428b      	cmp	r3, r1
 8018f30:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
 8018f34:	bfb8      	it	lt
 8018f36:	b29a      	uxthlt	r2, r3
 8018f38:	1b80      	subs	r0, r0, r6
 8018f3a:	f8ad 5046 	strh.w	r5, [sp, #70]	; 0x46
 8018f3e:	1b52      	subs	r2, r2, r5
 8018f40:	f8ad 0048 	strh.w	r0, [sp, #72]	; 0x48
 8018f44:	f8ad 204a 	strh.w	r2, [sp, #74]	; 0x4a
 8018f48:	ab11      	add	r3, sp, #68	; 0x44
 8018f4a:	ad13      	add	r5, sp, #76	; 0x4c
 8018f4c:	6822      	ldr	r2, [r4, #0]
 8018f4e:	1d26      	adds	r6, r4, #4
 8018f50:	9307      	str	r3, [sp, #28]
 8018f52:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8018f54:	e893 0003 	ldmia.w	r3, {r0, r1}
 8018f58:	e885 0003 	stmia.w	r5, {r0, r1}
 8018f5c:	4629      	mov	r1, r5
 8018f5e:	4620      	mov	r0, r4
 8018f60:	4790      	blx	r2
 8018f62:	4621      	mov	r1, r4
 8018f64:	a815      	add	r0, sp, #84	; 0x54
 8018f66:	f003 fa75 	bl	801c454 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018f6a:	a815      	add	r0, sp, #84	; 0x54
 8018f6c:	f002 f81e 	bl	801afac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8018f70:	9b07      	ldr	r3, [sp, #28]
 8018f72:	4631      	mov	r1, r6
 8018f74:	4618      	mov	r0, r3
 8018f76:	f002 f85d 	bl	801b034 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8018f7a:	4628      	mov	r0, r5
 8018f7c:	f104 0526 	add.w	r5, r4, #38	; 0x26
 8018f80:	f002 f814 	bl	801afac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8018f84:	4628      	mov	r0, r5
 8018f86:	f004 ffa3 	bl	801ded0 <_ZNK8touchgfx6Bitmap7getDataEv>
 8018f8a:	9007      	str	r0, [sp, #28]
 8018f8c:	2800      	cmp	r0, #0
 8018f8e:	f000 80ce 	beq.w	801912e <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x262>
 8018f92:	f8db 2000 	ldr.w	r2, [fp]
 8018f96:	a90d      	add	r1, sp, #52	; 0x34
 8018f98:	a809      	add	r0, sp, #36	; 0x24
 8018f9a:	9209      	str	r2, [sp, #36]	; 0x24
 8018f9c:	f8db 2004 	ldr.w	r2, [fp, #4]
 8018fa0:	920a      	str	r2, [sp, #40]	; 0x28
 8018fa2:	f8db 2008 	ldr.w	r2, [fp, #8]
 8018fa6:	920b      	str	r2, [sp, #44]	; 0x2c
 8018fa8:	f8db 200c 	ldr.w	r2, [fp, #12]
 8018fac:	920c      	str	r2, [sp, #48]	; 0x30
 8018fae:	f8da 2000 	ldr.w	r2, [sl]
 8018fb2:	920d      	str	r2, [sp, #52]	; 0x34
 8018fb4:	f8da 2004 	ldr.w	r2, [sl, #4]
 8018fb8:	920e      	str	r2, [sp, #56]	; 0x38
 8018fba:	f8da 2008 	ldr.w	r2, [sl, #8]
 8018fbe:	920f      	str	r2, [sp, #60]	; 0x3c
 8018fc0:	f8da 200c 	ldr.w	r2, [sl, #12]
 8018fc4:	9210      	str	r2, [sp, #64]	; 0x40
 8018fc6:	4632      	mov	r2, r6
 8018fc8:	f002 f818 	bl	801affc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 8018fcc:	4632      	mov	r2, r6
 8018fce:	a90e      	add	r1, sp, #56	; 0x38
 8018fd0:	a80a      	add	r0, sp, #40	; 0x28
 8018fd2:	f002 f813 	bl	801affc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 8018fd6:	4632      	mov	r2, r6
 8018fd8:	a90f      	add	r1, sp, #60	; 0x3c
 8018fda:	a80b      	add	r0, sp, #44	; 0x2c
 8018fdc:	f002 f80e 	bl	801affc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 8018fe0:	4632      	mov	r2, r6
 8018fe2:	a910      	add	r1, sp, #64	; 0x40
 8018fe4:	a80c      	add	r0, sp, #48	; 0x30
 8018fe6:	f002 f809 	bl	801affc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 8018fea:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 8018fee:	edd7 3a00 	vldr	s7, [r7]
 8018ff2:	eef0 6a67 	vmov.f32	s13, s15
 8018ff6:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 8018ffa:	ed97 5a01 	vldr	s10, [r7, #4]
 8018ffe:	eeb0 7a67 	vmov.f32	s14, s15
 8019002:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 8019006:	eefe 6ace 	vcvt.s32.f32	s13, s13, #4
 801900a:	edd9 2a00 	vldr	s5, [r9]
 801900e:	eeb0 6a67 	vmov.f32	s12, s15
 8019012:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
 8019016:	eebe 7ace 	vcvt.s32.f32	s14, s14, #4
 801901a:	ed98 3a00 	vldr	s6, [r8]
 801901e:	ed99 4a01 	vldr	s8, [r9, #4]
 8019022:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 8019026:	edd8 4a01 	vldr	s9, [r8, #4]
 801902a:	edd9 5a02 	vldr	s11, [r9, #8]
 801902e:	f8d9 e00c 	ldr.w	lr, [r9, #12]
 8019032:	ee16 6a10 	vmov	r6, s12
 8019036:	eeb0 6a67 	vmov.f32	s12, s15
 801903a:	eddd 7a0f 	vldr	s15, [sp, #60]	; 0x3c
 801903e:	f8d8 c00c 	ldr.w	ip, [r8, #12]
 8019042:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 8019046:	edcd 6a1f 	vstr	s13, [sp, #124]	; 0x7c
 801904a:	edcd 2a20 	vstr	s5, [sp, #128]	; 0x80
 801904e:	ed8d 3a21 	vstr	s6, [sp, #132]	; 0x84
 8019052:	ee16 0a10 	vmov	r0, s12
 8019056:	eeb0 6a67 	vmov.f32	s12, s15
 801905a:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
 801905e:	edcd 3a22 	vstr	s7, [sp, #136]	; 0x88
 8019062:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 8019066:	ed8d 7a23 	vstr	s14, [sp, #140]	; 0x8c
 801906a:	ed8d 4a25 	vstr	s8, [sp, #148]	; 0x94
 801906e:	edcd 4a26 	vstr	s9, [sp, #152]	; 0x98
 8019072:	ee16 1a10 	vmov	r1, s12
 8019076:	eeb0 6a67 	vmov.f32	s12, s15
 801907a:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
 801907e:	ed8d 5a27 	vstr	s10, [sp, #156]	; 0x9c
 8019082:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 8019086:	f8d7 a008 	ldr.w	sl, [r7, #8]
 801908a:	f8d8 b008 	ldr.w	fp, [r8, #8]
 801908e:	eefe 7ace 	vcvt.s32.f32	s15, s15, #4
 8019092:	68ff      	ldr	r7, [r7, #12]
 8019094:	ee16 2a10 	vmov	r2, s12
 8019098:	ed9d 6a09 	vldr	s12, [sp, #36]	; 0x24
 801909c:	9624      	str	r6, [sp, #144]	; 0x90
 801909e:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 80190a2:	e9cd 0128 	strd	r0, r1, [sp, #160]	; 0xa0
 80190a6:	ed8d 6a1e 	vstr	s12, [sp, #120]	; 0x78
 80190aa:	4628      	mov	r0, r5
 80190ac:	edcd 5a2a 	vstr	s11, [sp, #168]	; 0xa8
 80190b0:	9b06      	ldr	r3, [sp, #24]
 80190b2:	922d      	str	r2, [sp, #180]	; 0xb4
 80190b4:	4a21      	ldr	r2, [pc, #132]	; (801913c <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x270>)
 80190b6:	9317      	str	r3, [sp, #92]	; 0x5c
 80190b8:	8812      	ldrh	r2, [r2, #0]
 80190ba:	9b07      	ldr	r3, [sp, #28]
 80190bc:	9218      	str	r2, [sp, #96]	; 0x60
 80190be:	9319      	str	r3, [sp, #100]	; 0x64
 80190c0:	edcd 7a2e 	vstr	s15, [sp, #184]	; 0xb8
 80190c4:	f8cd e0bc 	str.w	lr, [sp, #188]	; 0xbc
 80190c8:	f8cd c0c0 	str.w	ip, [sp, #192]	; 0xc0
 80190cc:	f8cd b0ac 	str.w	fp, [sp, #172]	; 0xac
 80190d0:	f8cd a0b0 	str.w	sl, [sp, #176]	; 0xb0
 80190d4:	9731      	str	r7, [sp, #196]	; 0xc4
 80190d6:	f004 ff2b 	bl	801df30 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 80190da:	901a      	str	r0, [sp, #104]	; 0x68
 80190dc:	4628      	mov	r0, r5
 80190de:	f004 fe0b 	bl	801dcf8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80190e2:	901b      	str	r0, [sp, #108]	; 0x6c
 80190e4:	4628      	mov	r0, r5
 80190e6:	f004 fe3b 	bl	801dd60 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80190ea:	901c      	str	r0, [sp, #112]	; 0x70
 80190ec:	4628      	mov	r0, r5
 80190ee:	f004 fe03 	bl	801dcf8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80190f2:	4b13      	ldr	r3, [pc, #76]	; (8019140 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x274>)
 80190f4:	901d      	str	r0, [sp, #116]	; 0x74
 80190f6:	681b      	ldr	r3, [r3, #0]
 80190f8:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80190fc:	b10a      	cbz	r2, 8019102 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x236>
 80190fe:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
 8019100:	b905      	cbnz	r5, 8019104 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x238>
 8019102:	689d      	ldr	r5, [r3, #8]
 8019104:	682b      	ldr	r3, [r5, #0]
 8019106:	4620      	mov	r0, r4
 8019108:	6c1e      	ldr	r6, [r3, #64]	; 0x40
 801910a:	f7ff fed5 	bl	8018eb8 <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv>
 801910e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019112:	aa1e      	add	r2, sp, #120	; 0x78
 8019114:	a917      	add	r1, sp, #92	; 0x5c
 8019116:	9304      	str	r3, [sp, #16]
 8019118:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 801911c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8019120:	ab13      	add	r3, sp, #76	; 0x4c
 8019122:	4628      	mov	r0, r5
 8019124:	9301      	str	r3, [sp, #4]
 8019126:	ab15      	add	r3, sp, #84	; 0x54
 8019128:	9300      	str	r3, [sp, #0]
 801912a:	ab19      	add	r3, sp, #100	; 0x64
 801912c:	47b0      	blx	r6
 801912e:	b033      	add	sp, #204	; 0xcc
 8019130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019134:	2300      	movs	r3, #0
 8019136:	9312      	str	r3, [sp, #72]	; 0x48
 8019138:	e706      	b.n	8018f48 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x7c>
 801913a:	bf00      	nop
 801913c:	200177be 	.word	0x200177be
 8019140:	200177c4 	.word	0x200177c4

08019144 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE>:
 8019144:	b570      	push	{r4, r5, r6, lr}
 8019146:	ed2d 8b04 	vpush	{d8-d9}
 801914a:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 801914e:	b098      	sub	sp, #96	; 0x60
 8019150:	4604      	mov	r4, r0
 8019152:	460e      	mov	r6, r1
 8019154:	2b00      	cmp	r3, #0
 8019156:	d065      	beq.n	8019224 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0xe0>
 8019158:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 801915c:	f100 0526 	add.w	r5, r0, #38	; 0x26
 8019160:	ed9f 8a37 	vldr	s16, [pc, #220]	; 8019240 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0xfc>
 8019164:	ee09 3a10 	vmov	s18, r3
 8019168:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801916c:	4628      	mov	r0, r5
 801916e:	ee08 3a90 	vmov	s17, r3
 8019172:	4b34      	ldr	r3, [pc, #208]	; (8019244 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x100>)
 8019174:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
 8019178:	930c      	str	r3, [sp, #48]	; 0x30
 801917a:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 801917e:	930d      	str	r3, [sp, #52]	; 0x34
 8019180:	930e      	str	r3, [sp, #56]	; 0x38
 8019182:	ee39 9a08 	vadd.f32	s18, s18, s16
 8019186:	930f      	str	r3, [sp, #60]	; 0x3c
 8019188:	f004 fdb6 	bl	801dcf8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801918c:	ee07 0a90 	vmov	s15, r0
 8019190:	4628      	mov	r0, r5
 8019192:	ee78 8a88 	vadd.f32	s17, s17, s16
 8019196:	eef8 9ae7 	vcvt.f32.s32	s19, s15
 801919a:	f004 fde1 	bl	801dd60 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801919e:	4b2a      	ldr	r3, [pc, #168]	; (8019248 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x104>)
 80191a0:	ee07 0a90 	vmov	s15, r0
 80191a4:	781b      	ldrb	r3, [r3, #0]
 80191a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80191aa:	eef0 7a48 	vmov.f32	s15, s16
 80191ae:	2b01      	cmp	r3, #1
 80191b0:	d13c      	bne.n	801922c <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0xe8>
 80191b2:	eef0 6a69 	vmov.f32	s13, s19
 80191b6:	ee19 3a90 	vmov	r3, s19
 80191ba:	eeb0 6a47 	vmov.f32	s12, s14
 80191be:	eef0 5a47 	vmov.f32	s11, s14
 80191c2:	eef0 9a48 	vmov.f32	s19, s16
 80191c6:	eeb0 7a48 	vmov.f32	s14, s16
 80191ca:	9314      	str	r3, [sp, #80]	; 0x50
 80191cc:	ab14      	add	r3, sp, #80	; 0x50
 80191ce:	2200      	movs	r2, #0
 80191d0:	4631      	mov	r1, r6
 80191d2:	9303      	str	r3, [sp, #12]
 80191d4:	ab10      	add	r3, sp, #64	; 0x40
 80191d6:	4620      	mov	r0, r4
 80191d8:	edcd 7a04 	vstr	s15, [sp, #16]
 80191dc:	9302      	str	r3, [sp, #8]
 80191de:	ab0c      	add	r3, sp, #48	; 0x30
 80191e0:	ed8d 9a05 	vstr	s18, [sp, #20]
 80191e4:	9301      	str	r3, [sp, #4]
 80191e6:	ab08      	add	r3, sp, #32
 80191e8:	ed8d 9a06 	vstr	s18, [sp, #24]
 80191ec:	9300      	str	r3, [sp, #0]
 80191ee:	ab04      	add	r3, sp, #16
 80191f0:	edcd 7a07 	vstr	s15, [sp, #28]
 80191f4:	edcd 7a08 	vstr	s15, [sp, #32]
 80191f8:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
 80191fc:	edcd 8a0a 	vstr	s17, [sp, #40]	; 0x28
 8019200:	edcd 8a0b 	vstr	s17, [sp, #44]	; 0x2c
 8019204:	edcd 7a10 	vstr	s15, [sp, #64]	; 0x40
 8019208:	edcd 9a11 	vstr	s19, [sp, #68]	; 0x44
 801920c:	edcd 5a12 	vstr	s11, [sp, #72]	; 0x48
 8019210:	ed8d 6a13 	vstr	s12, [sp, #76]	; 0x4c
 8019214:	edcd 7a15 	vstr	s15, [sp, #84]	; 0x54
 8019218:	ed8d 7a16 	vstr	s14, [sp, #88]	; 0x58
 801921c:	edcd 6a17 	vstr	s13, [sp, #92]	; 0x5c
 8019220:	f7ff fe54 	bl	8018ecc <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_>
 8019224:	b018      	add	sp, #96	; 0x60
 8019226:	ecbd 8b04 	vpop	{d8-d9}
 801922a:	bd70      	pop	{r4, r5, r6, pc}
 801922c:	eef0 6a47 	vmov.f32	s13, s14
 8019230:	ee18 3a10 	vmov	r3, s16
 8019234:	eef0 5a69 	vmov.f32	s11, s19
 8019238:	eeb0 6a48 	vmov.f32	s12, s16
 801923c:	e7c5      	b.n	80191ca <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x86>
 801923e:	bf00      	nop
 8019240:	00000000 	.word	0x00000000
 8019244:	42c80000 	.word	0x42c80000
 8019248:	200177bc 	.word	0x200177bc

0801924c <_ZNK8touchgfx3Box12getSolidRectEv>:
 801924c:	2300      	movs	r3, #0
 801924e:	8083      	strh	r3, [r0, #4]
 8019250:	80c3      	strh	r3, [r0, #6]
 8019252:	8003      	strh	r3, [r0, #0]
 8019254:	8043      	strh	r3, [r0, #2]
 8019256:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 801925a:	2bff      	cmp	r3, #255	; 0xff
 801925c:	bf01      	itttt	eq
 801925e:	890b      	ldrheq	r3, [r1, #8]
 8019260:	8083      	strheq	r3, [r0, #4]
 8019262:	894b      	ldrheq	r3, [r1, #10]
 8019264:	80c3      	strheq	r3, [r0, #6]
 8019266:	4770      	bx	lr

08019268 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8019268:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801926a:	4604      	mov	r4, r0
 801926c:	466b      	mov	r3, sp
 801926e:	6808      	ldr	r0, [r1, #0]
 8019270:	6849      	ldr	r1, [r1, #4]
 8019272:	c303      	stmia	r3!, {r0, r1}
 8019274:	6823      	ldr	r3, [r4, #0]
 8019276:	4669      	mov	r1, sp
 8019278:	4620      	mov	r0, r4
 801927a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801927c:	4798      	blx	r3
 801927e:	4b08      	ldr	r3, [pc, #32]	; (80192a0 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8019280:	681b      	ldr	r3, [r3, #0]
 8019282:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8019286:	b10a      	cbz	r2, 801928c <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8019288:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801928a:	b900      	cbnz	r0, 801928e <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 801928c:	6898      	ldr	r0, [r3, #8]
 801928e:	6803      	ldr	r3, [r0, #0]
 8019290:	4669      	mov	r1, sp
 8019292:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8019294:	6a1d      	ldr	r5, [r3, #32]
 8019296:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 801929a:	47a8      	blx	r5
 801929c:	b003      	add	sp, #12
 801929e:	bd30      	pop	{r4, r5, pc}
 80192a0:	200177c4 	.word	0x200177c4

080192a4 <_ZN8touchgfx3BoxD1Ev>:
 80192a4:	4770      	bx	lr

080192a6 <_ZN8touchgfx3BoxD0Ev>:
 80192a6:	b510      	push	{r4, lr}
 80192a8:	4604      	mov	r4, r0
 80192aa:	212c      	movs	r1, #44	; 0x2c
 80192ac:	f010 fef4 	bl	802a098 <_ZdlPvj>
 80192b0:	4620      	mov	r0, r4
 80192b2:	bd10      	pop	{r4, pc}

080192b4 <_ZNK8touchgfx3Box17invalidateContentEv>:
 80192b4:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 80192b8:	b12a      	cbz	r2, 80192c6 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 80192ba:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 80192be:	b112      	cbz	r2, 80192c6 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 80192c0:	6803      	ldr	r3, [r0, #0]
 80192c2:	695b      	ldr	r3, [r3, #20]
 80192c4:	4718      	bx	r3
 80192c6:	4770      	bx	lr

080192c8 <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 80192c8:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 80192cc:	4770      	bx	lr

080192ce <_ZN8touchgfx6ButtonD1Ev>:
 80192ce:	4770      	bx	lr

080192d0 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 80192d0:	b570      	push	{r4, r5, r6, lr}
 80192d2:	880b      	ldrh	r3, [r1, #0]
 80192d4:	4605      	mov	r5, r0
 80192d6:	4604      	mov	r4, r0
 80192d8:	85c3      	strh	r3, [r0, #46]	; 0x2e
 80192da:	8813      	ldrh	r3, [r2, #0]
 80192dc:	f825 3f30 	strh.w	r3, [r5, #48]!
 80192e0:	4628      	mov	r0, r5
 80192e2:	f004 fd09 	bl	801dcf8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80192e6:	4606      	mov	r6, r0
 80192e8:	4628      	mov	r0, r5
 80192ea:	f004 fd39 	bl	801dd60 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80192ee:	6823      	ldr	r3, [r4, #0]
 80192f0:	4605      	mov	r5, r0
 80192f2:	4631      	mov	r1, r6
 80192f4:	4620      	mov	r0, r4
 80192f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80192f8:	4798      	blx	r3
 80192fa:	6823      	ldr	r3, [r4, #0]
 80192fc:	4629      	mov	r1, r5
 80192fe:	4620      	mov	r0, r4
 8019300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019302:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019306:	4718      	bx	r3

08019308 <_ZN8touchgfx6ButtonD0Ev>:
 8019308:	b510      	push	{r4, lr}
 801930a:	4604      	mov	r4, r0
 801930c:	2134      	movs	r1, #52	; 0x34
 801930e:	f010 fec3 	bl	802a098 <_ZdlPvj>
 8019312:	4620      	mov	r0, r4
 8019314:	bd10      	pop	{r4, pc}

08019316 <_ZN8touchgfx14AbstractButton13executeActionEv>:
 8019316:	b510      	push	{r4, lr}
 8019318:	4604      	mov	r4, r0
 801931a:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801931c:	b150      	cbz	r0, 8019334 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 801931e:	6803      	ldr	r3, [r0, #0]
 8019320:	68db      	ldr	r3, [r3, #12]
 8019322:	4798      	blx	r3
 8019324:	b130      	cbz	r0, 8019334 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 8019326:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8019328:	4621      	mov	r1, r4
 801932a:	6803      	ldr	r3, [r0, #0]
 801932c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019330:	689b      	ldr	r3, [r3, #8]
 8019332:	4718      	bx	r3
 8019334:	bd10      	pop	{r4, pc}

08019336 <_ZNK8touchgfx6Button12getSolidRectEv>:
 8019336:	b510      	push	{r4, lr}
 8019338:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 801933c:	4604      	mov	r4, r0
 801933e:	2bff      	cmp	r3, #255	; 0xff
 8019340:	d006      	beq.n	8019350 <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 8019342:	2300      	movs	r3, #0
 8019344:	8003      	strh	r3, [r0, #0]
 8019346:	8043      	strh	r3, [r0, #2]
 8019348:	8083      	strh	r3, [r0, #4]
 801934a:	80c3      	strh	r3, [r0, #6]
 801934c:	4620      	mov	r0, r4
 801934e:	bd10      	pop	{r4, pc}
 8019350:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 8019354:	b11b      	cbz	r3, 801935e <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 8019356:	3130      	adds	r1, #48	; 0x30
 8019358:	f004 fd36 	bl	801ddc8 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801935c:	e7f6      	b.n	801934c <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 801935e:	312e      	adds	r1, #46	; 0x2e
 8019360:	e7fa      	b.n	8019358 <_ZNK8touchgfx6Button12getSolidRectEv+0x22>
	...

08019364 <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 8019364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019368:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 801936c:	b08a      	sub	sp, #40	; 0x28
 801936e:	4604      	mov	r4, r0
 8019370:	4688      	mov	r8, r1
 8019372:	2b00      	cmp	r3, #0
 8019374:	d066      	beq.n	8019444 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 8019376:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8019378:	a805      	add	r0, sp, #20
 801937a:	f8ad 3014 	strh.w	r3, [sp, #20]
 801937e:	f004 fcbb 	bl	801dcf8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8019382:	4607      	mov	r7, r0
 8019384:	a805      	add	r0, sp, #20
 8019386:	f004 fceb 	bl	801dd60 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801938a:	f9b8 6000 	ldrsh.w	r6, [r8]
 801938e:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 8019392:	2300      	movs	r3, #0
 8019394:	4432      	add	r2, r6
 8019396:	9306      	str	r3, [sp, #24]
 8019398:	b292      	uxth	r2, r2
 801939a:	fa0f fc82 	sxth.w	ip, r2
 801939e:	459c      	cmp	ip, r3
 80193a0:	dd52      	ble.n	8019448 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 80193a2:	42b7      	cmp	r7, r6
 80193a4:	dd50      	ble.n	8019448 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 80193a6:	f9b8 5002 	ldrsh.w	r5, [r8, #2]
 80193aa:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 80193ae:	442b      	add	r3, r5
 80193b0:	b29b      	uxth	r3, r3
 80193b2:	b219      	sxth	r1, r3
 80193b4:	2900      	cmp	r1, #0
 80193b6:	dd47      	ble.n	8019448 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 80193b8:	42a8      	cmp	r0, r5
 80193ba:	dd45      	ble.n	8019448 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 80193bc:	4567      	cmp	r7, ip
 80193be:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 80193c2:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 80193c6:	bfb8      	it	lt
 80193c8:	b2ba      	uxthlt	r2, r7
 80193ca:	4288      	cmp	r0, r1
 80193cc:	f8ad 6018 	strh.w	r6, [sp, #24]
 80193d0:	bfb8      	it	lt
 80193d2:	b283      	uxthlt	r3, r0
 80193d4:	1b92      	subs	r2, r2, r6
 80193d6:	f8ad 501a 	strh.w	r5, [sp, #26]
 80193da:	1b5b      	subs	r3, r3, r5
 80193dc:	f8ad 201c 	strh.w	r2, [sp, #28]
 80193e0:	f8ad 301e 	strh.w	r3, [sp, #30]
 80193e4:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 80193e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80193ec:	429a      	cmp	r2, r3
 80193ee:	d026      	beq.n	801943e <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 80193f0:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80193f4:	2b00      	cmp	r3, #0
 80193f6:	dd22      	ble.n	801943e <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 80193f8:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 80193fc:	2b00      	cmp	r3, #0
 80193fe:	dd1e      	ble.n	801943e <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 8019400:	2300      	movs	r3, #0
 8019402:	a908      	add	r1, sp, #32
 8019404:	4620      	mov	r0, r4
 8019406:	e9cd 3308 	strd	r3, r3, [sp, #32]
 801940a:	6823      	ldr	r3, [r4, #0]
 801940c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801940e:	4798      	blx	r3
 8019410:	4b0f      	ldr	r3, [pc, #60]	; (8019450 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xec>)
 8019412:	681b      	ldr	r3, [r3, #0]
 8019414:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8019418:	b10a      	cbz	r2, 801941e <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xba>
 801941a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801941c:	b900      	cbnz	r0, 8019420 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xbc>
 801941e:	6898      	ldr	r0, [r3, #8]
 8019420:	2501      	movs	r5, #1
 8019422:	6801      	ldr	r1, [r0, #0]
 8019424:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8019428:	9502      	str	r5, [sp, #8]
 801942a:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
 801942e:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8019432:	9401      	str	r4, [sp, #4]
 8019434:	ac06      	add	r4, sp, #24
 8019436:	9400      	str	r4, [sp, #0]
 8019438:	688c      	ldr	r4, [r1, #8]
 801943a:	a905      	add	r1, sp, #20
 801943c:	47a0      	blx	r4
 801943e:	b00a      	add	sp, #40	; 0x28
 8019440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019444:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8019446:	e797      	b.n	8019378 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 8019448:	2300      	movs	r3, #0
 801944a:	9307      	str	r3, [sp, #28]
 801944c:	e7ca      	b.n	80193e4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x80>
 801944e:	bf00      	nop
 8019450:	200177c4 	.word	0x200177c4

08019454 <_ZNK8touchgfx6Button17invalidateContentEv>:
 8019454:	f890 2032 	ldrb.w	r2, [r0, #50]	; 0x32
 8019458:	b12a      	cbz	r2, 8019466 <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 801945a:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 801945e:	b112      	cbz	r2, 8019466 <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 8019460:	6803      	ldr	r3, [r0, #0]
 8019462:	695b      	ldr	r3, [r3, #20]
 8019464:	4718      	bx	r3
 8019466:	4770      	bx	lr

08019468 <_ZN8touchgfx5ImageD1Ev>:
 8019468:	4770      	bx	lr

0801946a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 801946a:	b570      	push	{r4, r5, r6, lr}
 801946c:	880b      	ldrh	r3, [r1, #0]
 801946e:	460d      	mov	r5, r1
 8019470:	4604      	mov	r4, r0
 8019472:	84c3      	strh	r3, [r0, #38]	; 0x26
 8019474:	4608      	mov	r0, r1
 8019476:	f004 fc3f 	bl	801dcf8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801947a:	4606      	mov	r6, r0
 801947c:	4628      	mov	r0, r5
 801947e:	f004 fc6f 	bl	801dd60 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8019482:	6823      	ldr	r3, [r4, #0]
 8019484:	4605      	mov	r5, r0
 8019486:	4631      	mov	r1, r6
 8019488:	4620      	mov	r0, r4
 801948a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801948c:	4798      	blx	r3
 801948e:	6823      	ldr	r3, [r4, #0]
 8019490:	4629      	mov	r1, r5
 8019492:	4620      	mov	r0, r4
 8019494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019496:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801949a:	4718      	bx	r3

0801949c <_ZN8touchgfx5ImageD0Ev>:
 801949c:	b510      	push	{r4, lr}
 801949e:	4604      	mov	r4, r0
 80194a0:	212c      	movs	r1, #44	; 0x2c
 80194a2:	f010 fdf9 	bl	802a098 <_ZdlPvj>
 80194a6:	4620      	mov	r0, r4
 80194a8:	bd10      	pop	{r4, pc}

080194aa <_ZNK8touchgfx5Image12getSolidRectEv>:
 80194aa:	b510      	push	{r4, lr}
 80194ac:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 80194b0:	4604      	mov	r4, r0
 80194b2:	2bff      	cmp	r3, #255	; 0xff
 80194b4:	d006      	beq.n	80194c4 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 80194b6:	2300      	movs	r3, #0
 80194b8:	8003      	strh	r3, [r0, #0]
 80194ba:	8043      	strh	r3, [r0, #2]
 80194bc:	8083      	strh	r3, [r0, #4]
 80194be:	80c3      	strh	r3, [r0, #6]
 80194c0:	4620      	mov	r0, r4
 80194c2:	bd10      	pop	{r4, pc}
 80194c4:	3126      	adds	r1, #38	; 0x26
 80194c6:	f004 fc7f 	bl	801ddc8 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 80194ca:	e7f9      	b.n	80194c0 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

080194cc <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 80194cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80194d0:	4604      	mov	r4, r0
 80194d2:	b088      	sub	sp, #32
 80194d4:	2500      	movs	r5, #0
 80194d6:	460f      	mov	r7, r1
 80194d8:	f854 3b26 	ldr.w	r3, [r4], #38
 80194dc:	a904      	add	r1, sp, #16
 80194de:	4606      	mov	r6, r0
 80194e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80194e2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80194e6:	4798      	blx	r3
 80194e8:	4620      	mov	r0, r4
 80194ea:	f004 fc05 	bl	801dcf8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80194ee:	4680      	mov	r8, r0
 80194f0:	4620      	mov	r0, r4
 80194f2:	f004 fc35 	bl	801dd60 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80194f6:	9506      	str	r5, [sp, #24]
 80194f8:	ad06      	add	r5, sp, #24
 80194fa:	f8ad 001e 	strh.w	r0, [sp, #30]
 80194fe:	4639      	mov	r1, r7
 8019500:	f8ad 801c 	strh.w	r8, [sp, #28]
 8019504:	4628      	mov	r0, r5
 8019506:	f7fe f845 	bl	8017594 <_ZN8touchgfx4RectaNERKS0_>
 801950a:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801950e:	2b00      	cmp	r3, #0
 8019510:	dd19      	ble.n	8019546 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8019512:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8019516:	2b00      	cmp	r3, #0
 8019518:	dd15      	ble.n	8019546 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 801951a:	4b0c      	ldr	r3, [pc, #48]	; (801954c <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 801951c:	681b      	ldr	r3, [r3, #0]
 801951e:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8019522:	b10a      	cbz	r2, 8019528 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 8019524:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8019526:	b900      	cbnz	r0, 801952a <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 8019528:	6898      	ldr	r0, [r3, #8]
 801952a:	2701      	movs	r7, #1
 801952c:	6801      	ldr	r1, [r0, #0]
 801952e:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8019532:	9702      	str	r7, [sp, #8]
 8019534:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 8019538:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801953c:	e9cd 5600 	strd	r5, r6, [sp]
 8019540:	688d      	ldr	r5, [r1, #8]
 8019542:	4621      	mov	r1, r4
 8019544:	47a8      	blx	r5
 8019546:	b008      	add	sp, #32
 8019548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801954c:	200177c4 	.word	0x200177c4

08019550 <_ZN8touchgfx7OutlineD1Ev>:
 8019550:	4770      	bx	lr

08019552 <_ZN8touchgfx7OutlineD0Ev>:
 8019552:	b510      	push	{r4, lr}
 8019554:	4604      	mov	r4, r0
 8019556:	2130      	movs	r1, #48	; 0x30
 8019558:	f010 fd9e 	bl	802a098 <_ZdlPvj>
 801955c:	4620      	mov	r0, r4
 801955e:	bd10      	pop	{r4, pc}

08019560 <_ZN8touchgfx7Outline5resetEv>:
 8019560:	b510      	push	{r4, lr}
 8019562:	4604      	mov	r4, r0
 8019564:	f000 fe7c 	bl	801a260 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 8019568:	60e0      	str	r0, [r4, #12]
 801956a:	f000 fe7f 	bl	801a26c <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 801956e:	68e3      	ldr	r3, [r4, #12]
 8019570:	08c0      	lsrs	r0, r0, #3
 8019572:	2200      	movs	r2, #0
 8019574:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8019578:	6123      	str	r3, [r4, #16]
 801957a:	3801      	subs	r0, #1
 801957c:	60a2      	str	r2, [r4, #8]
 801957e:	6060      	str	r0, [r4, #4]
 8019580:	8019      	strh	r1, [r3, #0]
 8019582:	8059      	strh	r1, [r3, #2]
 8019584:	809a      	strh	r2, [r3, #4]
 8019586:	80da      	strh	r2, [r3, #6]
 8019588:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801958a:	f023 0301 	bic.w	r3, r3, #1
 801958e:	f043 0302 	orr.w	r3, r3, #2
 8019592:	6263      	str	r3, [r4, #36]	; 0x24
 8019594:	bd10      	pop	{r4, pc}
	...

08019598 <_ZN8touchgfx7OutlineC1Ev>:
 8019598:	4b0a      	ldr	r3, [pc, #40]	; (80195c4 <_ZN8touchgfx7OutlineC1Ev+0x2c>)
 801959a:	b510      	push	{r4, lr}
 801959c:	6003      	str	r3, [r0, #0]
 801959e:	2300      	movs	r3, #0
 80195a0:	4604      	mov	r4, r0
 80195a2:	6243      	str	r3, [r0, #36]	; 0x24
 80195a4:	e9c0 3301 	strd	r3, r3, [r0, #4]
 80195a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80195ac:	e9c0 3305 	strd	r3, r3, [r0, #20]
 80195b0:	e9c0 3307 	strd	r3, r3, [r0, #28]
 80195b4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80195b8:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
 80195bc:	f7ff ffd0 	bl	8019560 <_ZN8touchgfx7Outline5resetEv>
 80195c0:	4620      	mov	r0, r4
 80195c2:	bd10      	pop	{r4, pc}
 80195c4:	0802fec0 	.word	0x0802fec0

080195c8 <_ZN8touchgfx7Outline10renderLineEiiii>:
 80195c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80195cc:	b093      	sub	sp, #76	; 0x4c
 80195ce:	1156      	asrs	r6, r2, #5
 80195d0:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80195d2:	9305      	str	r3, [sp, #20]
 80195d4:	1153      	asrs	r3, r2, #5
 80195d6:	f004 051f 	and.w	r5, r4, #31
 80195da:	9303      	str	r3, [sp, #12]
 80195dc:	1163      	asrs	r3, r4, #5
 80195de:	9504      	str	r5, [sp, #16]
 80195e0:	1165      	asrs	r5, r4, #5
 80195e2:	9306      	str	r3, [sp, #24]
 80195e4:	f002 031f 	and.w	r3, r2, #31
 80195e8:	42ae      	cmp	r6, r5
 80195ea:	f040 80f4 	bne.w	80197d6 <_ZN8touchgfx7Outline10renderLineEiiii+0x20e>
 80195ee:	9c04      	ldr	r4, [sp, #16]
 80195f0:	9a05      	ldr	r2, [sp, #20]
 80195f2:	42a3      	cmp	r3, r4
 80195f4:	ea4f 1e62 	mov.w	lr, r2, asr #5
 80195f8:	6902      	ldr	r2, [r0, #16]
 80195fa:	d125      	bne.n	8019648 <_ZN8touchgfx7Outline10renderLineEiiii+0x80>
 80195fc:	f9b2 3000 	ldrsh.w	r3, [r2]
 8019600:	459e      	cmp	lr, r3
 8019602:	d103      	bne.n	801960c <_ZN8touchgfx7Outline10renderLineEiiii+0x44>
 8019604:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8019608:	429e      	cmp	r6, r3
 801960a:	d035      	beq.n	8019678 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 801960c:	88d1      	ldrh	r1, [r2, #6]
 801960e:	8893      	ldrh	r3, [r2, #4]
 8019610:	430b      	orrs	r3, r1
 8019612:	d010      	beq.n	8019636 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 8019614:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8019618:	2b00      	cmp	r3, #0
 801961a:	db0c      	blt.n	8019636 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 801961c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 801961e:	428b      	cmp	r3, r1
 8019620:	da09      	bge.n	8019636 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 8019622:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 8019626:	428b      	cmp	r3, r1
 8019628:	f103 0301 	add.w	r3, r3, #1
 801962c:	bf38      	it	cc
 801962e:	3208      	addcc	r2, #8
 8019630:	6083      	str	r3, [r0, #8]
 8019632:	bf38      	it	cc
 8019634:	6102      	strcc	r2, [r0, #16]
 8019636:	6903      	ldr	r3, [r0, #16]
 8019638:	9a03      	ldr	r2, [sp, #12]
 801963a:	f8a3 e000 	strh.w	lr, [r3]
 801963e:	805a      	strh	r2, [r3, #2]
 8019640:	2200      	movs	r2, #0
 8019642:	809a      	strh	r2, [r3, #4]
 8019644:	80da      	strh	r2, [r3, #6]
 8019646:	e017      	b.n	8019678 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8019648:	9c05      	ldr	r4, [sp, #20]
 801964a:	114e      	asrs	r6, r1, #5
 801964c:	f001 0c1f 	and.w	ip, r1, #31
 8019650:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 8019654:	f004 041f 	and.w	r4, r4, #31
 8019658:	4576      	cmp	r6, lr
 801965a:	f8b2 a006 	ldrh.w	sl, [r2, #6]
 801965e:	9402      	str	r4, [sp, #8]
 8019660:	9c04      	ldr	r4, [sp, #16]
 8019662:	eba4 0403 	sub.w	r4, r4, r3
 8019666:	d10a      	bne.n	801967e <_ZN8touchgfx7Outline10renderLineEiiii+0xb6>
 8019668:	9b02      	ldr	r3, [sp, #8]
 801966a:	44a0      	add	r8, r4
 801966c:	449c      	add	ip, r3
 801966e:	f8a2 8004 	strh.w	r8, [r2, #4]
 8019672:	fb04 a40c 	mla	r4, r4, ip, sl
 8019676:	80d4      	strh	r4, [r2, #6]
 8019678:	b013      	add	sp, #76	; 0x4c
 801967a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801967e:	9d05      	ldr	r5, [sp, #20]
 8019680:	1a69      	subs	r1, r5, r1
 8019682:	bf51      	iteee	pl
 8019684:	f1cc 0520 	rsbpl	r5, ip, #32
 8019688:	fb04 f40c 	mulmi.w	r4, r4, ip
 801968c:	4249      	negmi	r1, r1
 801968e:	2500      	movmi	r5, #0
 8019690:	bf5d      	ittte	pl
 8019692:	436c      	mulpl	r4, r5
 8019694:	2520      	movpl	r5, #32
 8019696:	f04f 0901 	movpl.w	r9, #1
 801969a:	f04f 39ff 	movmi.w	r9, #4294967295
 801969e:	9501      	str	r5, [sp, #4]
 80196a0:	9f01      	ldr	r7, [sp, #4]
 80196a2:	444e      	add	r6, r9
 80196a4:	fb94 f5f1 	sdiv	r5, r4, r1
 80196a8:	fb01 4415 	mls	r4, r1, r5, r4
 80196ac:	44bc      	add	ip, r7
 80196ae:	2c00      	cmp	r4, #0
 80196b0:	bfbc      	itt	lt
 80196b2:	f105 35ff 	addlt.w	r5, r5, #4294967295
 80196b6:	1864      	addlt	r4, r4, r1
 80196b8:	44a8      	add	r8, r5
 80196ba:	fb05 ac0c 	mla	ip, r5, ip, sl
 80196be:	f8a2 8004 	strh.w	r8, [r2, #4]
 80196c2:	f8a2 c006 	strh.w	ip, [r2, #6]
 80196c6:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80196ca:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 80196ce:	f8bc 2004 	ldrh.w	r2, [ip, #4]
 80196d2:	ea58 0202 	orrs.w	r2, r8, r2
 80196d6:	d011      	beq.n	80196fc <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 80196d8:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 80196dc:	f1b8 0f00 	cmp.w	r8, #0
 80196e0:	db0c      	blt.n	80196fc <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 80196e2:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80196e4:	4590      	cmp	r8, r2
 80196e6:	da09      	bge.n	80196fc <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 80196e8:	e9d0 2801 	ldrd	r2, r8, [r0, #4]
 80196ec:	4590      	cmp	r8, r2
 80196ee:	bf3c      	itt	cc
 80196f0:	f10c 0208 	addcc.w	r2, ip, #8
 80196f4:	6102      	strcc	r2, [r0, #16]
 80196f6:	f108 0201 	add.w	r2, r8, #1
 80196fa:	6082      	str	r2, [r0, #8]
 80196fc:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8019700:	2700      	movs	r7, #0
 8019702:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8019706:	45b6      	cmp	lr, r6
 8019708:	f8ac 6000 	strh.w	r6, [ip]
 801970c:	442b      	add	r3, r5
 801970e:	f8ac 2002 	strh.w	r2, [ip, #2]
 8019712:	f8ac 7004 	strh.w	r7, [ip, #4]
 8019716:	f8ac 7006 	strh.w	r7, [ip, #6]
 801971a:	d04b      	beq.n	80197b4 <_ZN8touchgfx7Outline10renderLineEiiii+0x1ec>
 801971c:	9f04      	ldr	r7, [sp, #16]
 801971e:	1a64      	subs	r4, r4, r1
 8019720:	f04f 0a00 	mov.w	sl, #0
 8019724:	1aff      	subs	r7, r7, r3
 8019726:	443d      	add	r5, r7
 8019728:	016d      	lsls	r5, r5, #5
 801972a:	fb95 f8f1 	sdiv	r8, r5, r1
 801972e:	fb01 5518 	mls	r5, r1, r8, r5
 8019732:	2d00      	cmp	r5, #0
 8019734:	bfbc      	itt	lt
 8019736:	f108 38ff 	addlt.w	r8, r8, #4294967295
 801973a:	186d      	addlt	r5, r5, r1
 801973c:	f108 0701 	add.w	r7, r8, #1
 8019740:	9703      	str	r7, [sp, #12]
 8019742:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8019746:	1964      	adds	r4, r4, r5
 8019748:	444e      	add	r6, r9
 801974a:	bf54      	ite	pl
 801974c:	9f03      	ldrpl	r7, [sp, #12]
 801974e:	4647      	movmi	r7, r8
 8019750:	f8bc b004 	ldrh.w	fp, [ip, #4]
 8019754:	bf58      	it	pl
 8019756:	1a64      	subpl	r4, r4, r1
 8019758:	443b      	add	r3, r7
 801975a:	44bb      	add	fp, r7
 801975c:	f8ac b004 	strh.w	fp, [ip, #4]
 8019760:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8019764:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8019768:	f8ac b006 	strh.w	fp, [ip, #6]
 801976c:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8019770:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8019774:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8019778:	ea5b 0707 	orrs.w	r7, fp, r7
 801977c:	d011      	beq.n	80197a2 <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 801977e:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 8019782:	f1bb 0f00 	cmp.w	fp, #0
 8019786:	db0c      	blt.n	80197a2 <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 8019788:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 801978a:	45bb      	cmp	fp, r7
 801978c:	da09      	bge.n	80197a2 <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 801978e:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8019792:	45bb      	cmp	fp, r7
 8019794:	bf3c      	itt	cc
 8019796:	f10c 0708 	addcc.w	r7, ip, #8
 801979a:	6107      	strcc	r7, [r0, #16]
 801979c:	f10b 0701 	add.w	r7, fp, #1
 80197a0:	6087      	str	r7, [r0, #8]
 80197a2:	6907      	ldr	r7, [r0, #16]
 80197a4:	45b6      	cmp	lr, r6
 80197a6:	803e      	strh	r6, [r7, #0]
 80197a8:	807a      	strh	r2, [r7, #2]
 80197aa:	f8a7 a004 	strh.w	sl, [r7, #4]
 80197ae:	f8a7 a006 	strh.w	sl, [r7, #6]
 80197b2:	d1c6      	bne.n	8019742 <_ZN8touchgfx7Outline10renderLineEiiii+0x17a>
 80197b4:	9a04      	ldr	r2, [sp, #16]
 80197b6:	1ad3      	subs	r3, r2, r3
 80197b8:	6902      	ldr	r2, [r0, #16]
 80197ba:	8891      	ldrh	r1, [r2, #4]
 80197bc:	88d6      	ldrh	r6, [r2, #6]
 80197be:	4419      	add	r1, r3
 80197c0:	8091      	strh	r1, [r2, #4]
 80197c2:	9902      	ldr	r1, [sp, #8]
 80197c4:	f101 0c20 	add.w	ip, r1, #32
 80197c8:	9901      	ldr	r1, [sp, #4]
 80197ca:	ebac 0c01 	sub.w	ip, ip, r1
 80197ce:	fb03 630c 	mla	r3, r3, ip, r6
 80197d2:	80d3      	strh	r3, [r2, #6]
 80197d4:	e750      	b.n	8019678 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 80197d6:	9d05      	ldr	r5, [sp, #20]
 80197d8:	1aa2      	subs	r2, r4, r2
 80197da:	eba5 0501 	sub.w	r5, r5, r1
 80197de:	9202      	str	r2, [sp, #8]
 80197e0:	9508      	str	r5, [sp, #32]
 80197e2:	f140 8128 	bpl.w	8019a36 <_ZN8touchgfx7Outline10renderLineEiiii+0x46e>
 80197e6:	9a03      	ldr	r2, [sp, #12]
 80197e8:	2a00      	cmp	r2, #0
 80197ea:	f6ff af45 	blt.w	8019678 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 80197ee:	9a02      	ldr	r2, [sp, #8]
 80197f0:	f04f 34ff 	mov.w	r4, #4294967295
 80197f4:	4252      	negs	r2, r2
 80197f6:	940b      	str	r4, [sp, #44]	; 0x2c
 80197f8:	2400      	movs	r4, #0
 80197fa:	9202      	str	r2, [sp, #8]
 80197fc:	9a06      	ldr	r2, [sp, #24]
 80197fe:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
 8019802:	9206      	str	r2, [sp, #24]
 8019804:	462a      	mov	r2, r5
 8019806:	435a      	muls	r2, r3
 8019808:	9401      	str	r4, [sp, #4]
 801980a:	9c02      	ldr	r4, [sp, #8]
 801980c:	9d02      	ldr	r5, [sp, #8]
 801980e:	fb92 f4f4 	sdiv	r4, r2, r4
 8019812:	fb05 2214 	mls	r2, r5, r4, r2
 8019816:	2a00      	cmp	r2, #0
 8019818:	9207      	str	r2, [sp, #28]
 801981a:	bfbc      	itt	lt
 801981c:	1952      	addlt	r2, r2, r5
 801981e:	f104 34ff 	addlt.w	r4, r4, #4294967295
 8019822:	6905      	ldr	r5, [r0, #16]
 8019824:	bfb8      	it	lt
 8019826:	9207      	strlt	r2, [sp, #28]
 8019828:	eb04 0901 	add.w	r9, r4, r1
 801982c:	9a01      	ldr	r2, [sp, #4]
 801982e:	ea4f 1669 	mov.w	r6, r9, asr #5
 8019832:	429a      	cmp	r2, r3
 8019834:	f040 8111 	bne.w	8019a5a <_ZN8touchgfx7Outline10renderLineEiiii+0x492>
 8019838:	f9b5 3000 	ldrsh.w	r3, [r5]
 801983c:	429e      	cmp	r6, r3
 801983e:	d104      	bne.n	801984a <_ZN8touchgfx7Outline10renderLineEiiii+0x282>
 8019840:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8019844:	9a03      	ldr	r2, [sp, #12]
 8019846:	429a      	cmp	r2, r3
 8019848:	d01b      	beq.n	8019882 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 801984a:	88ea      	ldrh	r2, [r5, #6]
 801984c:	88ab      	ldrh	r3, [r5, #4]
 801984e:	4313      	orrs	r3, r2
 8019850:	d010      	beq.n	8019874 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 8019852:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8019856:	2a00      	cmp	r2, #0
 8019858:	db0c      	blt.n	8019874 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 801985a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 801985c:	429a      	cmp	r2, r3
 801985e:	da09      	bge.n	8019874 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 8019860:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8019864:	429a      	cmp	r2, r3
 8019866:	f102 0201 	add.w	r2, r2, #1
 801986a:	bf38      	it	cc
 801986c:	3508      	addcc	r5, #8
 801986e:	6082      	str	r2, [r0, #8]
 8019870:	bf38      	it	cc
 8019872:	6105      	strcc	r5, [r0, #16]
 8019874:	6903      	ldr	r3, [r0, #16]
 8019876:	9a03      	ldr	r2, [sp, #12]
 8019878:	801e      	strh	r6, [r3, #0]
 801987a:	805a      	strh	r2, [r3, #2]
 801987c:	2200      	movs	r2, #0
 801987e:	809a      	strh	r2, [r3, #4]
 8019880:	80da      	strh	r2, [r3, #6]
 8019882:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019884:	9a03      	ldr	r2, [sp, #12]
 8019886:	6901      	ldr	r1, [r0, #16]
 8019888:	441a      	add	r2, r3
 801988a:	f9b1 3000 	ldrsh.w	r3, [r1]
 801988e:	42b3      	cmp	r3, r6
 8019890:	d103      	bne.n	801989a <_ZN8touchgfx7Outline10renderLineEiiii+0x2d2>
 8019892:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8019896:	429a      	cmp	r2, r3
 8019898:	d01a      	beq.n	80198d0 <_ZN8touchgfx7Outline10renderLineEiiii+0x308>
 801989a:	88cc      	ldrh	r4, [r1, #6]
 801989c:	888b      	ldrh	r3, [r1, #4]
 801989e:	4323      	orrs	r3, r4
 80198a0:	d010      	beq.n	80198c4 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 80198a2:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 80198a6:	2c00      	cmp	r4, #0
 80198a8:	db0c      	blt.n	80198c4 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 80198aa:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80198ac:	429c      	cmp	r4, r3
 80198ae:	da09      	bge.n	80198c4 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 80198b0:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 80198b4:	429c      	cmp	r4, r3
 80198b6:	f104 0401 	add.w	r4, r4, #1
 80198ba:	bf38      	it	cc
 80198bc:	3108      	addcc	r1, #8
 80198be:	6084      	str	r4, [r0, #8]
 80198c0:	bf38      	it	cc
 80198c2:	6101      	strcc	r1, [r0, #16]
 80198c4:	6903      	ldr	r3, [r0, #16]
 80198c6:	2100      	movs	r1, #0
 80198c8:	801e      	strh	r6, [r3, #0]
 80198ca:	805a      	strh	r2, [r3, #2]
 80198cc:	8099      	strh	r1, [r3, #4]
 80198ce:	80d9      	strh	r1, [r3, #6]
 80198d0:	9b06      	ldr	r3, [sp, #24]
 80198d2:	4293      	cmp	r3, r2
 80198d4:	f000 8082 	beq.w	80199dc <_ZN8touchgfx7Outline10renderLineEiiii+0x414>
 80198d8:	9b08      	ldr	r3, [sp, #32]
 80198da:	9902      	ldr	r1, [sp, #8]
 80198dc:	015b      	lsls	r3, r3, #5
 80198de:	9c02      	ldr	r4, [sp, #8]
 80198e0:	fb93 f1f1 	sdiv	r1, r3, r1
 80198e4:	fb04 3311 	mls	r3, r4, r1, r3
 80198e8:	9103      	str	r1, [sp, #12]
 80198ea:	2b00      	cmp	r3, #0
 80198ec:	9308      	str	r3, [sp, #32]
 80198ee:	da04      	bge.n	80198fa <_ZN8touchgfx7Outline10renderLineEiiii+0x332>
 80198f0:	1e4b      	subs	r3, r1, #1
 80198f2:	9303      	str	r3, [sp, #12]
 80198f4:	9b08      	ldr	r3, [sp, #32]
 80198f6:	4423      	add	r3, r4
 80198f8:	9308      	str	r3, [sp, #32]
 80198fa:	9b07      	ldr	r3, [sp, #28]
 80198fc:	464f      	mov	r7, r9
 80198fe:	9902      	ldr	r1, [sp, #8]
 8019900:	2600      	movs	r6, #0
 8019902:	1a5b      	subs	r3, r3, r1
 8019904:	9307      	str	r3, [sp, #28]
 8019906:	9b01      	ldr	r3, [sp, #4]
 8019908:	f1c3 0320 	rsb	r3, r3, #32
 801990c:	930e      	str	r3, [sp, #56]	; 0x38
 801990e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8019910:	9b01      	ldr	r3, [sp, #4]
 8019912:	1a5b      	subs	r3, r3, r1
 8019914:	930a      	str	r3, [sp, #40]	; 0x28
 8019916:	e9dd 3107 	ldrd	r3, r1, [sp, #28]
 801991a:	185b      	adds	r3, r3, r1
 801991c:	bf58      	it	pl
 801991e:	9902      	ldrpl	r1, [sp, #8]
 8019920:	9307      	str	r3, [sp, #28]
 8019922:	bf57      	itett	pl
 8019924:	1a5b      	subpl	r3, r3, r1
 8019926:	9903      	ldrmi	r1, [sp, #12]
 8019928:	9307      	strpl	r3, [sp, #28]
 801992a:	9b03      	ldrpl	r3, [sp, #12]
 801992c:	bf58      	it	pl
 801992e:	1c59      	addpl	r1, r3, #1
 8019930:	2a00      	cmp	r2, #0
 8019932:	4489      	add	r9, r1
 8019934:	ea4f 1a69 	mov.w	sl, r9, asr #5
 8019938:	db2e      	blt.n	8019998 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 801993a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 801993c:	4293      	cmp	r3, r2
 801993e:	dd2b      	ble.n	8019998 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8019940:	9c01      	ldr	r4, [sp, #4]
 8019942:	6905      	ldr	r5, [r0, #16]
 8019944:	46a0      	mov	r8, r4
 8019946:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8019948:	f9b5 c004 	ldrsh.w	ip, [r5, #4]
 801994c:	45a0      	cmp	r8, r4
 801994e:	f9b5 e006 	ldrsh.w	lr, [r5, #6]
 8019952:	f040 814c 	bne.w	8019bee <_ZN8touchgfx7Outline10renderLineEiiii+0x626>
 8019956:	f9b5 1000 	ldrsh.w	r1, [r5]
 801995a:	4551      	cmp	r1, sl
 801995c:	d103      	bne.n	8019966 <_ZN8touchgfx7Outline10renderLineEiiii+0x39e>
 801995e:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 8019962:	4291      	cmp	r1, r2
 8019964:	d018      	beq.n	8019998 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8019966:	ea5c 010e 	orrs.w	r1, ip, lr
 801996a:	d00f      	beq.n	801998c <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 801996c:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 8019970:	2900      	cmp	r1, #0
 8019972:	db0b      	blt.n	801998c <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 8019974:	428b      	cmp	r3, r1
 8019976:	dd09      	ble.n	801998c <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 8019978:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
 801997c:	4299      	cmp	r1, r3
 801997e:	f101 0101 	add.w	r1, r1, #1
 8019982:	bf38      	it	cc
 8019984:	3508      	addcc	r5, #8
 8019986:	6081      	str	r1, [r0, #8]
 8019988:	bf38      	it	cc
 801998a:	6105      	strcc	r5, [r0, #16]
 801998c:	6903      	ldr	r3, [r0, #16]
 801998e:	f8a3 a000 	strh.w	sl, [r3]
 8019992:	805a      	strh	r2, [r3, #2]
 8019994:	809e      	strh	r6, [r3, #4]
 8019996:	80de      	strh	r6, [r3, #6]
 8019998:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801999a:	6901      	ldr	r1, [r0, #16]
 801999c:	441a      	add	r2, r3
 801999e:	88cc      	ldrh	r4, [r1, #6]
 80199a0:	888b      	ldrh	r3, [r1, #4]
 80199a2:	4323      	orrs	r3, r4
 80199a4:	d010      	beq.n	80199c8 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 80199a6:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 80199aa:	2c00      	cmp	r4, #0
 80199ac:	db0c      	blt.n	80199c8 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 80199ae:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80199b0:	429c      	cmp	r4, r3
 80199b2:	da09      	bge.n	80199c8 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 80199b4:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 80199b8:	429c      	cmp	r4, r3
 80199ba:	f104 0401 	add.w	r4, r4, #1
 80199be:	bf38      	it	cc
 80199c0:	3108      	addcc	r1, #8
 80199c2:	6084      	str	r4, [r0, #8]
 80199c4:	bf38      	it	cc
 80199c6:	6101      	strcc	r1, [r0, #16]
 80199c8:	6903      	ldr	r3, [r0, #16]
 80199ca:	464f      	mov	r7, r9
 80199cc:	f8a3 a000 	strh.w	sl, [r3]
 80199d0:	805a      	strh	r2, [r3, #2]
 80199d2:	809e      	strh	r6, [r3, #4]
 80199d4:	80de      	strh	r6, [r3, #6]
 80199d6:	9b06      	ldr	r3, [sp, #24]
 80199d8:	4293      	cmp	r3, r2
 80199da:	d19c      	bne.n	8019916 <_ZN8touchgfx7Outline10renderLineEiiii+0x34e>
 80199dc:	9b01      	ldr	r3, [sp, #4]
 80199de:	6907      	ldr	r7, [r0, #16]
 80199e0:	f1c3 0620 	rsb	r6, r3, #32
 80199e4:	9b05      	ldr	r3, [sp, #20]
 80199e6:	ea4f 1e63 	mov.w	lr, r3, asr #5
 80199ea:	9b04      	ldr	r3, [sp, #16]
 80199ec:	429e      	cmp	r6, r3
 80199ee:	f040 81c7 	bne.w	8019d80 <_ZN8touchgfx7Outline10renderLineEiiii+0x7b8>
 80199f2:	f9b7 3000 	ldrsh.w	r3, [r7]
 80199f6:	459e      	cmp	lr, r3
 80199f8:	d104      	bne.n	8019a04 <_ZN8touchgfx7Outline10renderLineEiiii+0x43c>
 80199fa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80199fe:	429a      	cmp	r2, r3
 8019a00:	f43f ae3a 	beq.w	8019678 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8019a04:	88f9      	ldrh	r1, [r7, #6]
 8019a06:	88bb      	ldrh	r3, [r7, #4]
 8019a08:	430b      	orrs	r3, r1
 8019a0a:	d010      	beq.n	8019a2e <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8019a0c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8019a10:	2b00      	cmp	r3, #0
 8019a12:	db0c      	blt.n	8019a2e <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8019a14:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8019a16:	428b      	cmp	r3, r1
 8019a18:	da09      	bge.n	8019a2e <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8019a1a:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 8019a1e:	428b      	cmp	r3, r1
 8019a20:	f103 0301 	add.w	r3, r3, #1
 8019a24:	bf38      	it	cc
 8019a26:	3708      	addcc	r7, #8
 8019a28:	6083      	str	r3, [r0, #8]
 8019a2a:	bf38      	it	cc
 8019a2c:	6107      	strcc	r7, [r0, #16]
 8019a2e:	6903      	ldr	r3, [r0, #16]
 8019a30:	f8a3 e000 	strh.w	lr, [r3]
 8019a34:	e603      	b.n	801963e <_ZN8touchgfx7Outline10renderLineEiiii+0x76>
 8019a36:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8019a38:	9c03      	ldr	r4, [sp, #12]
 8019a3a:	42a2      	cmp	r2, r4
 8019a3c:	f6ff ae1c 	blt.w	8019678 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8019a40:	9c06      	ldr	r4, [sp, #24]
 8019a42:	42a2      	cmp	r2, r4
 8019a44:	9c08      	ldr	r4, [sp, #32]
 8019a46:	bfbc      	itt	lt
 8019a48:	3201      	addlt	r2, #1
 8019a4a:	9206      	strlt	r2, [sp, #24]
 8019a4c:	f1c3 0220 	rsb	r2, r3, #32
 8019a50:	4362      	muls	r2, r4
 8019a52:	2401      	movs	r4, #1
 8019a54:	940b      	str	r4, [sp, #44]	; 0x2c
 8019a56:	2420      	movs	r4, #32
 8019a58:	e6d6      	b.n	8019808 <_ZN8touchgfx7Outline10renderLineEiiii+0x240>
 8019a5a:	ea4f 1861 	mov.w	r8, r1, asr #5
 8019a5e:	f009 021f 	and.w	r2, r9, #31
 8019a62:	f001 011f 	and.w	r1, r1, #31
 8019a66:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 8019a6a:	920c      	str	r2, [sp, #48]	; 0x30
 8019a6c:	45b0      	cmp	r8, r6
 8019a6e:	9a01      	ldr	r2, [sp, #4]
 8019a70:	f8b5 a006 	ldrh.w	sl, [r5, #6]
 8019a74:	eba2 0203 	sub.w	r2, r2, r3
 8019a78:	d108      	bne.n	8019a8c <_ZN8touchgfx7Outline10renderLineEiiii+0x4c4>
 8019a7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019a7c:	4496      	add	lr, r2
 8019a7e:	4419      	add	r1, r3
 8019a80:	f8a5 e004 	strh.w	lr, [r5, #4]
 8019a84:	fb02 a101 	mla	r1, r2, r1, sl
 8019a88:	80e9      	strh	r1, [r5, #6]
 8019a8a:	e6fa      	b.n	8019882 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 8019a8c:	2c00      	cmp	r4, #0
 8019a8e:	f2c0 80a7 	blt.w	8019be0 <_ZN8touchgfx7Outline10renderLineEiiii+0x618>
 8019a92:	2701      	movs	r7, #1
 8019a94:	f1c1 0c20 	rsb	ip, r1, #32
 8019a98:	970a      	str	r7, [sp, #40]	; 0x28
 8019a9a:	2720      	movs	r7, #32
 8019a9c:	fb02 f20c 	mul.w	r2, r2, ip
 8019aa0:	9709      	str	r7, [sp, #36]	; 0x24
 8019aa2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8019aa4:	fb92 fcf4 	sdiv	ip, r2, r4
 8019aa8:	fb04 221c 	mls	r2, r4, ip, r2
 8019aac:	4439      	add	r1, r7
 8019aae:	2a00      	cmp	r2, #0
 8019ab0:	bfbc      	itt	lt
 8019ab2:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 8019ab6:	1912      	addlt	r2, r2, r4
 8019ab8:	fb0c a101 	mla	r1, ip, r1, sl
 8019abc:	44e6      	add	lr, ip
 8019abe:	80e9      	strh	r1, [r5, #6]
 8019ac0:	990a      	ldr	r1, [sp, #40]	; 0x28
 8019ac2:	f8a5 e004 	strh.w	lr, [r5, #4]
 8019ac6:	eb08 0501 	add.w	r5, r8, r1
 8019aca:	6901      	ldr	r1, [r0, #16]
 8019acc:	f8b1 8006 	ldrh.w	r8, [r1, #6]
 8019ad0:	f8b1 e004 	ldrh.w	lr, [r1, #4]
 8019ad4:	ea58 070e 	orrs.w	r7, r8, lr
 8019ad8:	d010      	beq.n	8019afc <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 8019ada:	f9b1 e002 	ldrsh.w	lr, [r1, #2]
 8019ade:	f1be 0f00 	cmp.w	lr, #0
 8019ae2:	db0b      	blt.n	8019afc <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 8019ae4:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8019ae6:	45be      	cmp	lr, r7
 8019ae8:	da08      	bge.n	8019afc <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 8019aea:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 8019aee:	45be      	cmp	lr, r7
 8019af0:	bf3c      	itt	cc
 8019af2:	3108      	addcc	r1, #8
 8019af4:	6101      	strcc	r1, [r0, #16]
 8019af6:	f10e 0101 	add.w	r1, lr, #1
 8019afa:	6081      	str	r1, [r0, #8]
 8019afc:	6901      	ldr	r1, [r0, #16]
 8019afe:	f04f 0e00 	mov.w	lr, #0
 8019b02:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 8019b06:	42ae      	cmp	r6, r5
 8019b08:	800d      	strh	r5, [r1, #0]
 8019b0a:	4463      	add	r3, ip
 8019b0c:	f8a1 8002 	strh.w	r8, [r1, #2]
 8019b10:	f8a1 e004 	strh.w	lr, [r1, #4]
 8019b14:	f8a1 e006 	strh.w	lr, [r1, #6]
 8019b18:	d053      	beq.n	8019bc2 <_ZN8touchgfx7Outline10renderLineEiiii+0x5fa>
 8019b1a:	9901      	ldr	r1, [sp, #4]
 8019b1c:	1b12      	subs	r2, r2, r4
 8019b1e:	1ac9      	subs	r1, r1, r3
 8019b20:	4461      	add	r1, ip
 8019b22:	0149      	lsls	r1, r1, #5
 8019b24:	fb91 fef4 	sdiv	lr, r1, r4
 8019b28:	fb04 111e 	mls	r1, r4, lr, r1
 8019b2c:	2900      	cmp	r1, #0
 8019b2e:	bfbc      	itt	lt
 8019b30:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 8019b34:	1909      	addlt	r1, r1, r4
 8019b36:	f10e 0701 	add.w	r7, lr, #1
 8019b3a:	970d      	str	r7, [sp, #52]	; 0x34
 8019b3c:	f8d0 a010 	ldr.w	sl, [r0, #16]
 8019b40:	1852      	adds	r2, r2, r1
 8019b42:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8019b44:	bf54      	ite	pl
 8019b46:	f8dd c034 	ldrpl.w	ip, [sp, #52]	; 0x34
 8019b4a:	46f4      	movmi	ip, lr
 8019b4c:	f8ba b004 	ldrh.w	fp, [sl, #4]
 8019b50:	bf58      	it	pl
 8019b52:	1b12      	subpl	r2, r2, r4
 8019b54:	4463      	add	r3, ip
 8019b56:	443d      	add	r5, r7
 8019b58:	44e3      	add	fp, ip
 8019b5a:	f8aa b004 	strh.w	fp, [sl, #4]
 8019b5e:	f8ba b006 	ldrh.w	fp, [sl, #6]
 8019b62:	eb0b 1b4c 	add.w	fp, fp, ip, lsl #5
 8019b66:	f8aa b006 	strh.w	fp, [sl, #6]
 8019b6a:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8019b6e:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8019b72:	f8bc a004 	ldrh.w	sl, [ip, #4]
 8019b76:	ea5b 070a 	orrs.w	r7, fp, sl
 8019b7a:	d014      	beq.n	8019ba6 <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 8019b7c:	f9bc a002 	ldrsh.w	sl, [ip, #2]
 8019b80:	f1ba 0f00 	cmp.w	sl, #0
 8019b84:	db0f      	blt.n	8019ba6 <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 8019b86:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8019b88:	45ba      	cmp	sl, r7
 8019b8a:	da0c      	bge.n	8019ba6 <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 8019b8c:	e9d0 7a01 	ldrd	r7, sl, [r0, #4]
 8019b90:	45ba      	cmp	sl, r7
 8019b92:	f10a 0a01 	add.w	sl, sl, #1
 8019b96:	bf38      	it	cc
 8019b98:	f10c 0c08 	addcc.w	ip, ip, #8
 8019b9c:	f8c0 a008 	str.w	sl, [r0, #8]
 8019ba0:	bf38      	it	cc
 8019ba2:	f8c0 c010 	strcc.w	ip, [r0, #16]
 8019ba6:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8019baa:	f04f 0700 	mov.w	r7, #0
 8019bae:	42ae      	cmp	r6, r5
 8019bb0:	f8ac 5000 	strh.w	r5, [ip]
 8019bb4:	f8ac 8002 	strh.w	r8, [ip, #2]
 8019bb8:	f8ac 7004 	strh.w	r7, [ip, #4]
 8019bbc:	f8ac 7006 	strh.w	r7, [ip, #6]
 8019bc0:	d1bc      	bne.n	8019b3c <_ZN8touchgfx7Outline10renderLineEiiii+0x574>
 8019bc2:	6904      	ldr	r4, [r0, #16]
 8019bc4:	9a01      	ldr	r2, [sp, #4]
 8019bc6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8019bc8:	1ad3      	subs	r3, r2, r3
 8019bca:	88a2      	ldrh	r2, [r4, #4]
 8019bcc:	3120      	adds	r1, #32
 8019bce:	441a      	add	r2, r3
 8019bd0:	80a2      	strh	r2, [r4, #4]
 8019bd2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019bd4:	1a89      	subs	r1, r1, r2
 8019bd6:	88e2      	ldrh	r2, [r4, #6]
 8019bd8:	fb03 2301 	mla	r3, r3, r1, r2
 8019bdc:	80e3      	strh	r3, [r4, #6]
 8019bde:	e650      	b.n	8019882 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 8019be0:	f04f 37ff 	mov.w	r7, #4294967295
 8019be4:	434a      	muls	r2, r1
 8019be6:	4264      	negs	r4, r4
 8019be8:	970a      	str	r7, [sp, #40]	; 0x28
 8019bea:	2700      	movs	r7, #0
 8019bec:	e758      	b.n	8019aa0 <_ZN8touchgfx7Outline10renderLineEiiii+0x4d8>
 8019bee:	ea4f 1867 	mov.w	r8, r7, asr #5
 8019bf2:	f009 031f 	and.w	r3, r9, #31
 8019bf6:	f007 071f 	and.w	r7, r7, #31
 8019bfa:	fa1f fc8c 	uxth.w	ip, ip
 8019bfe:	45d0      	cmp	r8, sl
 8019c00:	930f      	str	r3, [sp, #60]	; 0x3c
 8019c02:	fa1f fe8e 	uxth.w	lr, lr
 8019c06:	d10a      	bne.n	8019c1e <_ZN8touchgfx7Outline10renderLineEiiii+0x656>
 8019c08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019c0a:	449c      	add	ip, r3
 8019c0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019c0e:	441f      	add	r7, r3
 8019c10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019c12:	f8a5 c004 	strh.w	ip, [r5, #4]
 8019c16:	fb03 e707 	mla	r7, r3, r7, lr
 8019c1a:	80ef      	strh	r7, [r5, #6]
 8019c1c:	e6bc      	b.n	8019998 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8019c1e:	2900      	cmp	r1, #0
 8019c20:	f2c0 80a6 	blt.w	8019d70 <_ZN8touchgfx7Outline10renderLineEiiii+0x7a8>
 8019c24:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8019c26:	f1c7 0320 	rsb	r3, r7, #32
 8019c2a:	4363      	muls	r3, r4
 8019c2c:	2401      	movs	r4, #1
 8019c2e:	940d      	str	r4, [sp, #52]	; 0x34
 8019c30:	2420      	movs	r4, #32
 8019c32:	940c      	str	r4, [sp, #48]	; 0x30
 8019c34:	fb93 f4f1 	sdiv	r4, r3, r1
 8019c38:	fb01 3b14 	mls	fp, r1, r4, r3
 8019c3c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019c3e:	f1bb 0f00 	cmp.w	fp, #0
 8019c42:	441f      	add	r7, r3
 8019c44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019c46:	bfbc      	itt	lt
 8019c48:	f104 34ff 	addlt.w	r4, r4, #4294967295
 8019c4c:	448b      	addlt	fp, r1
 8019c4e:	fb04 e707 	mla	r7, r4, r7, lr
 8019c52:	44a4      	add	ip, r4
 8019c54:	80ef      	strh	r7, [r5, #6]
 8019c56:	f8a5 c004 	strh.w	ip, [r5, #4]
 8019c5a:	eb08 0503 	add.w	r5, r8, r3
 8019c5e:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8019c62:	f8bc e006 	ldrh.w	lr, [ip, #6]
 8019c66:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8019c6a:	ea5e 0307 	orrs.w	r3, lr, r7
 8019c6e:	d011      	beq.n	8019c94 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 8019c70:	f9bc e002 	ldrsh.w	lr, [ip, #2]
 8019c74:	f1be 0f00 	cmp.w	lr, #0
 8019c78:	db0c      	blt.n	8019c94 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 8019c7a:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8019c7c:	45be      	cmp	lr, r7
 8019c7e:	da09      	bge.n	8019c94 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 8019c80:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 8019c84:	45be      	cmp	lr, r7
 8019c86:	bf3c      	itt	cc
 8019c88:	f10c 0708 	addcc.w	r7, ip, #8
 8019c8c:	6107      	strcc	r7, [r0, #16]
 8019c8e:	f10e 0701 	add.w	r7, lr, #1
 8019c92:	6087      	str	r7, [r0, #8]
 8019c94:	6907      	ldr	r7, [r0, #16]
 8019c96:	b213      	sxth	r3, r2
 8019c98:	4555      	cmp	r5, sl
 8019c9a:	9310      	str	r3, [sp, #64]	; 0x40
 8019c9c:	807b      	strh	r3, [r7, #2]
 8019c9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019ca0:	803d      	strh	r5, [r7, #0]
 8019ca2:	80be      	strh	r6, [r7, #4]
 8019ca4:	eb04 0c03 	add.w	ip, r4, r3
 8019ca8:	80fe      	strh	r6, [r7, #6]
 8019caa:	d050      	beq.n	8019d4e <_ZN8touchgfx7Outline10renderLineEiiii+0x786>
 8019cac:	9b01      	ldr	r3, [sp, #4]
 8019cae:	eba3 070c 	sub.w	r7, r3, ip
 8019cb2:	ebab 0301 	sub.w	r3, fp, r1
 8019cb6:	443c      	add	r4, r7
 8019cb8:	9309      	str	r3, [sp, #36]	; 0x24
 8019cba:	0164      	lsls	r4, r4, #5
 8019cbc:	fb94 f8f1 	sdiv	r8, r4, r1
 8019cc0:	fb01 4418 	mls	r4, r1, r8, r4
 8019cc4:	2c00      	cmp	r4, #0
 8019cc6:	bfbc      	itt	lt
 8019cc8:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8019ccc:	1864      	addlt	r4, r4, r1
 8019cce:	f108 0701 	add.w	r7, r8, #1
 8019cd2:	9711      	str	r7, [sp, #68]	; 0x44
 8019cd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019cd6:	f8d0 e010 	ldr.w	lr, [r0, #16]
 8019cda:	191b      	adds	r3, r3, r4
 8019cdc:	f8be b004 	ldrh.w	fp, [lr, #4]
 8019ce0:	bf54      	ite	pl
 8019ce2:	9f11      	ldrpl	r7, [sp, #68]	; 0x44
 8019ce4:	4647      	movmi	r7, r8
 8019ce6:	9309      	str	r3, [sp, #36]	; 0x24
 8019ce8:	bf58      	it	pl
 8019cea:	1a5b      	subpl	r3, r3, r1
 8019cec:	44bb      	add	fp, r7
 8019cee:	44bc      	add	ip, r7
 8019cf0:	bf58      	it	pl
 8019cf2:	9309      	strpl	r3, [sp, #36]	; 0x24
 8019cf4:	f8ae b004 	strh.w	fp, [lr, #4]
 8019cf8:	f8be b006 	ldrh.w	fp, [lr, #6]
 8019cfc:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8019d00:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8019d02:	f8ae b006 	strh.w	fp, [lr, #6]
 8019d06:	443d      	add	r5, r7
 8019d08:	f8d0 e010 	ldr.w	lr, [r0, #16]
 8019d0c:	f8be b006 	ldrh.w	fp, [lr, #6]
 8019d10:	f8be 7004 	ldrh.w	r7, [lr, #4]
 8019d14:	ea5b 0307 	orrs.w	r3, fp, r7
 8019d18:	d011      	beq.n	8019d3e <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 8019d1a:	f9be b002 	ldrsh.w	fp, [lr, #2]
 8019d1e:	f1bb 0f00 	cmp.w	fp, #0
 8019d22:	db0c      	blt.n	8019d3e <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 8019d24:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8019d26:	45bb      	cmp	fp, r7
 8019d28:	da09      	bge.n	8019d3e <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 8019d2a:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8019d2e:	45bb      	cmp	fp, r7
 8019d30:	bf3c      	itt	cc
 8019d32:	f10e 0708 	addcc.w	r7, lr, #8
 8019d36:	6107      	strcc	r7, [r0, #16]
 8019d38:	f10b 0701 	add.w	r7, fp, #1
 8019d3c:	6087      	str	r7, [r0, #8]
 8019d3e:	6907      	ldr	r7, [r0, #16]
 8019d40:	4555      	cmp	r5, sl
 8019d42:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019d44:	803d      	strh	r5, [r7, #0]
 8019d46:	807b      	strh	r3, [r7, #2]
 8019d48:	80be      	strh	r6, [r7, #4]
 8019d4a:	80fe      	strh	r6, [r7, #6]
 8019d4c:	d1c2      	bne.n	8019cd4 <_ZN8touchgfx7Outline10renderLineEiiii+0x70c>
 8019d4e:	9b01      	ldr	r3, [sp, #4]
 8019d50:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8019d52:	eba3 0c0c 	sub.w	ip, r3, ip
 8019d56:	6903      	ldr	r3, [r0, #16]
 8019d58:	3720      	adds	r7, #32
 8019d5a:	8899      	ldrh	r1, [r3, #4]
 8019d5c:	4461      	add	r1, ip
 8019d5e:	8099      	strh	r1, [r3, #4]
 8019d60:	990c      	ldr	r1, [sp, #48]	; 0x30
 8019d62:	1a7f      	subs	r7, r7, r1
 8019d64:	88d9      	ldrh	r1, [r3, #6]
 8019d66:	fb0c 1c07 	mla	ip, ip, r7, r1
 8019d6a:	f8a3 c006 	strh.w	ip, [r3, #6]
 8019d6e:	e613      	b.n	8019998 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8019d70:	f04f 34ff 	mov.w	r4, #4294967295
 8019d74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019d76:	4249      	negs	r1, r1
 8019d78:	940d      	str	r4, [sp, #52]	; 0x34
 8019d7a:	2400      	movs	r4, #0
 8019d7c:	437b      	muls	r3, r7
 8019d7e:	e758      	b.n	8019c32 <_ZN8touchgfx7Outline10renderLineEiiii+0x66a>
 8019d80:	9905      	ldr	r1, [sp, #20]
 8019d82:	ea4f 1b69 	mov.w	fp, r9, asr #5
 8019d86:	f009 0c1f 	and.w	ip, r9, #31
 8019d8a:	f8b7 8004 	ldrh.w	r8, [r7, #4]
 8019d8e:	f001 011f 	and.w	r1, r1, #31
 8019d92:	45f3      	cmp	fp, lr
 8019d94:	f8b7 a006 	ldrh.w	sl, [r7, #6]
 8019d98:	9102      	str	r1, [sp, #8]
 8019d9a:	9904      	ldr	r1, [sp, #16]
 8019d9c:	eba1 0406 	sub.w	r4, r1, r6
 8019da0:	d108      	bne.n	8019db4 <_ZN8touchgfx7Outline10renderLineEiiii+0x7ec>
 8019da2:	9b02      	ldr	r3, [sp, #8]
 8019da4:	44a0      	add	r8, r4
 8019da6:	449c      	add	ip, r3
 8019da8:	f8a7 8004 	strh.w	r8, [r7, #4]
 8019dac:	fb04 a40c 	mla	r4, r4, ip, sl
 8019db0:	80fc      	strh	r4, [r7, #6]
 8019db2:	e461      	b.n	8019678 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8019db4:	9905      	ldr	r1, [sp, #20]
 8019db6:	ebb1 0109 	subs.w	r1, r1, r9
 8019dba:	bf51      	iteee	pl
 8019dbc:	f1cc 0520 	rsbpl	r5, ip, #32
 8019dc0:	fb04 f40c 	mulmi.w	r4, r4, ip
 8019dc4:	4249      	negmi	r1, r1
 8019dc6:	2500      	movmi	r5, #0
 8019dc8:	bf5d      	ittte	pl
 8019dca:	436c      	mulpl	r4, r5
 8019dcc:	2520      	movpl	r5, #32
 8019dce:	f04f 0901 	movpl.w	r9, #1
 8019dd2:	f04f 39ff 	movmi.w	r9, #4294967295
 8019dd6:	9501      	str	r5, [sp, #4]
 8019dd8:	9b01      	ldr	r3, [sp, #4]
 8019dda:	fb94 f5f1 	sdiv	r5, r4, r1
 8019dde:	fb01 4415 	mls	r4, r1, r5, r4
 8019de2:	449c      	add	ip, r3
 8019de4:	eb0b 0309 	add.w	r3, fp, r9
 8019de8:	2c00      	cmp	r4, #0
 8019dea:	bfbc      	itt	lt
 8019dec:	f105 35ff 	addlt.w	r5, r5, #4294967295
 8019df0:	1864      	addlt	r4, r4, r1
 8019df2:	44a8      	add	r8, r5
 8019df4:	fb05 ac0c 	mla	ip, r5, ip, sl
 8019df8:	f8a7 8004 	strh.w	r8, [r7, #4]
 8019dfc:	f8a7 c006 	strh.w	ip, [r7, #6]
 8019e00:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8019e04:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 8019e08:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8019e0c:	ea58 0707 	orrs.w	r7, r8, r7
 8019e10:	d011      	beq.n	8019e36 <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 8019e12:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 8019e16:	f1b8 0f00 	cmp.w	r8, #0
 8019e1a:	db0c      	blt.n	8019e36 <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 8019e1c:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8019e1e:	45b8      	cmp	r8, r7
 8019e20:	da09      	bge.n	8019e36 <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 8019e22:	e9d0 7801 	ldrd	r7, r8, [r0, #4]
 8019e26:	45b8      	cmp	r8, r7
 8019e28:	bf3c      	itt	cc
 8019e2a:	f10c 0708 	addcc.w	r7, ip, #8
 8019e2e:	6107      	strcc	r7, [r0, #16]
 8019e30:	f108 0701 	add.w	r7, r8, #1
 8019e34:	6087      	str	r7, [r0, #8]
 8019e36:	6907      	ldr	r7, [r0, #16]
 8019e38:	f04f 0c00 	mov.w	ip, #0
 8019e3c:	b212      	sxth	r2, r2
 8019e3e:	459e      	cmp	lr, r3
 8019e40:	803b      	strh	r3, [r7, #0]
 8019e42:	442e      	add	r6, r5
 8019e44:	807a      	strh	r2, [r7, #2]
 8019e46:	f8a7 c004 	strh.w	ip, [r7, #4]
 8019e4a:	f8a7 c006 	strh.w	ip, [r7, #6]
 8019e4e:	d04b      	beq.n	8019ee8 <_ZN8touchgfx7Outline10renderLineEiiii+0x920>
 8019e50:	9f04      	ldr	r7, [sp, #16]
 8019e52:	1a64      	subs	r4, r4, r1
 8019e54:	f04f 0a00 	mov.w	sl, #0
 8019e58:	1bbf      	subs	r7, r7, r6
 8019e5a:	443d      	add	r5, r7
 8019e5c:	016d      	lsls	r5, r5, #5
 8019e5e:	fb95 f8f1 	sdiv	r8, r5, r1
 8019e62:	fb01 5518 	mls	r5, r1, r8, r5
 8019e66:	4565      	cmp	r5, ip
 8019e68:	bfbc      	itt	lt
 8019e6a:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8019e6e:	186d      	addlt	r5, r5, r1
 8019e70:	f108 0701 	add.w	r7, r8, #1
 8019e74:	9703      	str	r7, [sp, #12]
 8019e76:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8019e7a:	1964      	adds	r4, r4, r5
 8019e7c:	444b      	add	r3, r9
 8019e7e:	bf54      	ite	pl
 8019e80:	9f03      	ldrpl	r7, [sp, #12]
 8019e82:	4647      	movmi	r7, r8
 8019e84:	f8bc b004 	ldrh.w	fp, [ip, #4]
 8019e88:	bf58      	it	pl
 8019e8a:	1a64      	subpl	r4, r4, r1
 8019e8c:	443e      	add	r6, r7
 8019e8e:	44bb      	add	fp, r7
 8019e90:	f8ac b004 	strh.w	fp, [ip, #4]
 8019e94:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8019e98:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8019e9c:	f8ac b006 	strh.w	fp, [ip, #6]
 8019ea0:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8019ea4:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8019ea8:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8019eac:	ea5b 0707 	orrs.w	r7, fp, r7
 8019eb0:	d011      	beq.n	8019ed6 <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 8019eb2:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 8019eb6:	f1bb 0f00 	cmp.w	fp, #0
 8019eba:	db0c      	blt.n	8019ed6 <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 8019ebc:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8019ebe:	45bb      	cmp	fp, r7
 8019ec0:	da09      	bge.n	8019ed6 <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 8019ec2:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8019ec6:	45bb      	cmp	fp, r7
 8019ec8:	bf3c      	itt	cc
 8019eca:	f10c 0708 	addcc.w	r7, ip, #8
 8019ece:	6107      	strcc	r7, [r0, #16]
 8019ed0:	f10b 0701 	add.w	r7, fp, #1
 8019ed4:	6087      	str	r7, [r0, #8]
 8019ed6:	6907      	ldr	r7, [r0, #16]
 8019ed8:	459e      	cmp	lr, r3
 8019eda:	803b      	strh	r3, [r7, #0]
 8019edc:	807a      	strh	r2, [r7, #2]
 8019ede:	f8a7 a004 	strh.w	sl, [r7, #4]
 8019ee2:	f8a7 a006 	strh.w	sl, [r7, #6]
 8019ee6:	d1c6      	bne.n	8019e76 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ae>
 8019ee8:	9b04      	ldr	r3, [sp, #16]
 8019eea:	1b9e      	subs	r6, r3, r6
 8019eec:	6903      	ldr	r3, [r0, #16]
 8019eee:	889a      	ldrh	r2, [r3, #4]
 8019ef0:	4432      	add	r2, r6
 8019ef2:	809a      	strh	r2, [r3, #4]
 8019ef4:	9a02      	ldr	r2, [sp, #8]
 8019ef6:	f102 0c20 	add.w	ip, r2, #32
 8019efa:	9a01      	ldr	r2, [sp, #4]
 8019efc:	ebac 0c02 	sub.w	ip, ip, r2
 8019f00:	88da      	ldrh	r2, [r3, #6]
 8019f02:	fb06 260c 	mla	r6, r6, ip, r2
 8019f06:	80de      	strh	r6, [r3, #6]
 8019f08:	f7ff bbb6 	b.w	8019678 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>

08019f0c <_ZN8touchgfx7Outline6lineToEii>:
 8019f0c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8019f0e:	079b      	lsls	r3, r3, #30
 8019f10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019f12:	460e      	mov	r6, r1
 8019f14:	4615      	mov	r5, r2
 8019f16:	d511      	bpl.n	8019f3c <_ZN8touchgfx7Outline6lineToEii+0x30>
 8019f18:	e9d0 1205 	ldrd	r1, r2, [r0, #20]
 8019f1c:	ea86 0701 	eor.w	r7, r6, r1
 8019f20:	ea85 0302 	eor.w	r3, r5, r2
 8019f24:	433b      	orrs	r3, r7
 8019f26:	d009      	beq.n	8019f3c <_ZN8touchgfx7Outline6lineToEii+0x30>
 8019f28:	4633      	mov	r3, r6
 8019f2a:	9500      	str	r5, [sp, #0]
 8019f2c:	f7ff fb4c 	bl	80195c8 <_ZN8touchgfx7Outline10renderLineEiiii>
 8019f30:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8019f32:	f043 0301 	orr.w	r3, r3, #1
 8019f36:	e9c0 6505 	strd	r6, r5, [r0, #20]
 8019f3a:	6243      	str	r3, [r0, #36]	; 0x24
 8019f3c:	b003      	add	sp, #12
 8019f3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019f40 <_ZN8touchgfx7Outline6moveToEii>:
 8019f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019f42:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8019f44:	4615      	mov	r5, r2
 8019f46:	4604      	mov	r4, r0
 8019f48:	460e      	mov	r6, r1
 8019f4a:	079a      	lsls	r2, r3, #30
 8019f4c:	d401      	bmi.n	8019f52 <_ZN8touchgfx7Outline6moveToEii+0x12>
 8019f4e:	f7ff fb07 	bl	8019560 <_ZN8touchgfx7Outline5resetEv>
 8019f52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019f54:	07db      	lsls	r3, r3, #31
 8019f56:	d504      	bpl.n	8019f62 <_ZN8touchgfx7Outline6moveToEii+0x22>
 8019f58:	4620      	mov	r0, r4
 8019f5a:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
 8019f5e:	f7ff ffd5 	bl	8019f0c <_ZN8touchgfx7Outline6lineToEii>
 8019f62:	6923      	ldr	r3, [r4, #16]
 8019f64:	1170      	asrs	r0, r6, #5
 8019f66:	1169      	asrs	r1, r5, #5
 8019f68:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019f6c:	4290      	cmp	r0, r2
 8019f6e:	d103      	bne.n	8019f78 <_ZN8touchgfx7Outline6moveToEii+0x38>
 8019f70:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8019f74:	4291      	cmp	r1, r2
 8019f76:	d01a      	beq.n	8019fae <_ZN8touchgfx7Outline6moveToEii+0x6e>
 8019f78:	88df      	ldrh	r7, [r3, #6]
 8019f7a:	889a      	ldrh	r2, [r3, #4]
 8019f7c:	433a      	orrs	r2, r7
 8019f7e:	d010      	beq.n	8019fa2 <_ZN8touchgfx7Outline6moveToEii+0x62>
 8019f80:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8019f84:	2a00      	cmp	r2, #0
 8019f86:	db0c      	blt.n	8019fa2 <_ZN8touchgfx7Outline6moveToEii+0x62>
 8019f88:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8019f8a:	42ba      	cmp	r2, r7
 8019f8c:	da09      	bge.n	8019fa2 <_ZN8touchgfx7Outline6moveToEii+0x62>
 8019f8e:	e9d4 7201 	ldrd	r7, r2, [r4, #4]
 8019f92:	42ba      	cmp	r2, r7
 8019f94:	f102 0201 	add.w	r2, r2, #1
 8019f98:	bf38      	it	cc
 8019f9a:	3308      	addcc	r3, #8
 8019f9c:	60a2      	str	r2, [r4, #8]
 8019f9e:	bf38      	it	cc
 8019fa0:	6123      	strcc	r3, [r4, #16]
 8019fa2:	6923      	ldr	r3, [r4, #16]
 8019fa4:	2200      	movs	r2, #0
 8019fa6:	8018      	strh	r0, [r3, #0]
 8019fa8:	8059      	strh	r1, [r3, #2]
 8019faa:	809a      	strh	r2, [r3, #4]
 8019fac:	80da      	strh	r2, [r3, #6]
 8019fae:	6166      	str	r6, [r4, #20]
 8019fb0:	6225      	str	r5, [r4, #32]
 8019fb2:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8019fb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08019fb8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 8019fb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019fbc:	b0d0      	sub	sp, #320	; 0x140
 8019fbe:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8019fc2:	466c      	mov	r4, sp
 8019fc4:	4627      	mov	r7, r4
 8019fc6:	1a0d      	subs	r5, r1, r0
 8019fc8:	f100 0308 	add.w	r3, r0, #8
 8019fcc:	2d48      	cmp	r5, #72	; 0x48
 8019fce:	f340 80d5 	ble.w	801a17c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 8019fd2:	112d      	asrs	r5, r5, #4
 8019fd4:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8019fd8:	f9b0 9000 	ldrsh.w	r9, [r0]
 8019fdc:	eb00 02c5 	add.w	r2, r0, r5, lsl #3
 8019fe0:	f9b0 8002 	ldrsh.w	r8, [r0, #2]
 8019fe4:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8019fe8:	6816      	ldr	r6, [r2, #0]
 8019fea:	6006      	str	r6, [r0, #0]
 8019fec:	6856      	ldr	r6, [r2, #4]
 8019fee:	6046      	str	r6, [r0, #4]
 8019ff0:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 8019ff4:	f8a2 8002 	strh.w	r8, [r2, #2]
 8019ff8:	f8a2 e004 	strh.w	lr, [r2, #4]
 8019ffc:	f8a2 c006 	strh.w	ip, [r2, #6]
 801a000:	f1a1 0208 	sub.w	r2, r1, #8
 801a004:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 801a008:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 801a00c:	4565      	cmp	r5, ip
 801a00e:	db06      	blt.n	801a01e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x66>
 801a010:	d119      	bne.n	801a046 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 801a012:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 801a016:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 801a01a:	42ae      	cmp	r6, r5
 801a01c:	dd13      	ble.n	801a046 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 801a01e:	460e      	mov	r6, r1
 801a020:	f9b0 9008 	ldrsh.w	r9, [r0, #8]
 801a024:	f9b0 800c 	ldrsh.w	r8, [r0, #12]
 801a028:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 801a02c:	f9b0 e00e 	ldrsh.w	lr, [r0, #14]
 801a030:	601d      	str	r5, [r3, #0]
 801a032:	6875      	ldr	r5, [r6, #4]
 801a034:	605d      	str	r5, [r3, #4]
 801a036:	f821 9c08 	strh.w	r9, [r1, #-8]
 801a03a:	f821 cc06 	strh.w	ip, [r1, #-6]
 801a03e:	f821 8c04 	strh.w	r8, [r1, #-4]
 801a042:	f821 ec02 	strh.w	lr, [r1, #-2]
 801a046:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 801a04a:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
 801a04e:	42ae      	cmp	r6, r5
 801a050:	db06      	blt.n	801a060 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xa8>
 801a052:	d116      	bne.n	801a082 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 801a054:	f9b0 c000 	ldrsh.w	ip, [r0]
 801a058:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 801a05c:	45ac      	cmp	ip, r5
 801a05e:	da10      	bge.n	801a082 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 801a060:	681d      	ldr	r5, [r3, #0]
 801a062:	f9b0 8000 	ldrsh.w	r8, [r0]
 801a066:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 801a06a:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 801a06e:	6005      	str	r5, [r0, #0]
 801a070:	685d      	ldr	r5, [r3, #4]
 801a072:	f8a0 8008 	strh.w	r8, [r0, #8]
 801a076:	6045      	str	r5, [r0, #4]
 801a078:	8146      	strh	r6, [r0, #10]
 801a07a:	f8a0 e00c 	strh.w	lr, [r0, #12]
 801a07e:	f8a0 c00e 	strh.w	ip, [r0, #14]
 801a082:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 801a086:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 801a08a:	4565      	cmp	r5, ip
 801a08c:	db06      	blt.n	801a09c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe4>
 801a08e:	d119      	bne.n	801a0c4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 801a090:	f931 6c08 	ldrsh.w	r6, [r1, #-8]
 801a094:	f9b0 5000 	ldrsh.w	r5, [r0]
 801a098:	42ae      	cmp	r6, r5
 801a09a:	da13      	bge.n	801a0c4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 801a09c:	460e      	mov	r6, r1
 801a09e:	f9b0 9000 	ldrsh.w	r9, [r0]
 801a0a2:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 801a0a6:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 801a0aa:	f9b0 e006 	ldrsh.w	lr, [r0, #6]
 801a0ae:	6005      	str	r5, [r0, #0]
 801a0b0:	6875      	ldr	r5, [r6, #4]
 801a0b2:	6045      	str	r5, [r0, #4]
 801a0b4:	f821 9c08 	strh.w	r9, [r1, #-8]
 801a0b8:	f821 cc06 	strh.w	ip, [r1, #-6]
 801a0bc:	f821 8c04 	strh.w	r8, [r1, #-4]
 801a0c0:	f821 ec02 	strh.w	lr, [r1, #-2]
 801a0c4:	3308      	adds	r3, #8
 801a0c6:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 801a0ca:	f9b3 e002 	ldrsh.w	lr, [r3, #2]
 801a0ce:	45e6      	cmp	lr, ip
 801a0d0:	dbf8      	blt.n	801a0c4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 801a0d2:	d105      	bne.n	801a0e0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 801a0d4:	f9b3 6000 	ldrsh.w	r6, [r3]
 801a0d8:	f9b0 5000 	ldrsh.w	r5, [r0]
 801a0dc:	42ae      	cmp	r6, r5
 801a0de:	dbf1      	blt.n	801a0c4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 801a0e0:	4615      	mov	r5, r2
 801a0e2:	3a08      	subs	r2, #8
 801a0e4:	f9b2 6002 	ldrsh.w	r6, [r2, #2]
 801a0e8:	45b4      	cmp	ip, r6
 801a0ea:	dbf9      	blt.n	801a0e0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 801a0ec:	d105      	bne.n	801a0fa <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x142>
 801a0ee:	f9b0 8000 	ldrsh.w	r8, [r0]
 801a0f2:	f9b2 6000 	ldrsh.w	r6, [r2]
 801a0f6:	45b0      	cmp	r8, r6
 801a0f8:	dbf2      	blt.n	801a0e0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 801a0fa:	4293      	cmp	r3, r2
 801a0fc:	f1a5 0608 	sub.w	r6, r5, #8
 801a100:	d816      	bhi.n	801a130 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x178>
 801a102:	f8d6 c000 	ldr.w	ip, [r6]
 801a106:	f9b3 a000 	ldrsh.w	sl, [r3]
 801a10a:	f9b3 9004 	ldrsh.w	r9, [r3, #4]
 801a10e:	f9b3 8006 	ldrsh.w	r8, [r3, #6]
 801a112:	f8c3 c000 	str.w	ip, [r3]
 801a116:	f8d6 c004 	ldr.w	ip, [r6, #4]
 801a11a:	f8c3 c004 	str.w	ip, [r3, #4]
 801a11e:	f825 ac08 	strh.w	sl, [r5, #-8]
 801a122:	f825 ec06 	strh.w	lr, [r5, #-6]
 801a126:	f825 9c04 	strh.w	r9, [r5, #-4]
 801a12a:	f825 8c02 	strh.w	r8, [r5, #-2]
 801a12e:	e7c9      	b.n	801a0c4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 801a130:	f8d6 e000 	ldr.w	lr, [r6]
 801a134:	f9b0 a000 	ldrsh.w	sl, [r0]
 801a138:	f9b0 9004 	ldrsh.w	r9, [r0, #4]
 801a13c:	f9b0 8006 	ldrsh.w	r8, [r0, #6]
 801a140:	f8c0 e000 	str.w	lr, [r0]
 801a144:	f8d6 e004 	ldr.w	lr, [r6, #4]
 801a148:	1a16      	subs	r6, r2, r0
 801a14a:	f8c0 e004 	str.w	lr, [r0, #4]
 801a14e:	f825 ac08 	strh.w	sl, [r5, #-8]
 801a152:	f825 cc06 	strh.w	ip, [r5, #-6]
 801a156:	f825 9c04 	strh.w	r9, [r5, #-4]
 801a15a:	f825 8c02 	strh.w	r8, [r5, #-2]
 801a15e:	1acd      	subs	r5, r1, r3
 801a160:	10ed      	asrs	r5, r5, #3
 801a162:	ebb5 0fe6 	cmp.w	r5, r6, asr #3
 801a166:	bfb5      	itete	lt
 801a168:	e9c4 0200 	strdlt	r0, r2, [r4]
 801a16c:	e9c4 3100 	strdge	r3, r1, [r4]
 801a170:	460a      	movlt	r2, r1
 801a172:	4603      	movge	r3, r0
 801a174:	3408      	adds	r4, #8
 801a176:	4618      	mov	r0, r3
 801a178:	4611      	mov	r1, r2
 801a17a:	e724      	b.n	8019fc6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 801a17c:	4299      	cmp	r1, r3
 801a17e:	d927      	bls.n	801a1d0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x218>
 801a180:	f1a3 0210 	sub.w	r2, r3, #16
 801a184:	f9b2 c012 	ldrsh.w	ip, [r2, #18]
 801a188:	f9b2 500a 	ldrsh.w	r5, [r2, #10]
 801a18c:	45ac      	cmp	ip, r5
 801a18e:	db06      	blt.n	801a19e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1e6>
 801a190:	d11c      	bne.n	801a1cc <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 801a192:	f9b2 6010 	ldrsh.w	r6, [r2, #16]
 801a196:	f9b2 5008 	ldrsh.w	r5, [r2, #8]
 801a19a:	42ae      	cmp	r6, r5
 801a19c:	da16      	bge.n	801a1cc <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 801a19e:	4615      	mov	r5, r2
 801a1a0:	f9b2 9010 	ldrsh.w	r9, [r2, #16]
 801a1a4:	f9b2 8014 	ldrsh.w	r8, [r2, #20]
 801a1a8:	3a08      	subs	r2, #8
 801a1aa:	f855 6f08 	ldr.w	r6, [r5, #8]!
 801a1ae:	f9b2 e01e 	ldrsh.w	lr, [r2, #30]
 801a1b2:	6196      	str	r6, [r2, #24]
 801a1b4:	42a8      	cmp	r0, r5
 801a1b6:	686e      	ldr	r6, [r5, #4]
 801a1b8:	f8a2 9010 	strh.w	r9, [r2, #16]
 801a1bc:	61d6      	str	r6, [r2, #28]
 801a1be:	f8a2 c012 	strh.w	ip, [r2, #18]
 801a1c2:	f8a2 8014 	strh.w	r8, [r2, #20]
 801a1c6:	f8a2 e016 	strh.w	lr, [r2, #22]
 801a1ca:	d1db      	bne.n	801a184 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1cc>
 801a1cc:	3308      	adds	r3, #8
 801a1ce:	e7d5      	b.n	801a17c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 801a1d0:	42bc      	cmp	r4, r7
 801a1d2:	d903      	bls.n	801a1dc <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x224>
 801a1d4:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 801a1d8:	3c08      	subs	r4, #8
 801a1da:	e6f4      	b.n	8019fc6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 801a1dc:	b050      	add	sp, #320	; 0x140
 801a1de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801a1e2 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>:
 801a1e2:	b510      	push	{r4, lr}
 801a1e4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801a1e6:	4604      	mov	r4, r0
 801a1e8:	07da      	lsls	r2, r3, #31
 801a1ea:	d507      	bpl.n	801a1fc <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x1a>
 801a1ec:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 801a1f0:	f7ff fe8c 	bl	8019f0c <_ZN8touchgfx7Outline6lineToEii>
 801a1f4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801a1f6:	f023 0301 	bic.w	r3, r3, #1
 801a1fa:	6243      	str	r3, [r0, #36]	; 0x24
 801a1fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a1fe:	079b      	lsls	r3, r3, #30
 801a200:	d521      	bpl.n	801a246 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x64>
 801a202:	6923      	ldr	r3, [r4, #16]
 801a204:	88d9      	ldrh	r1, [r3, #6]
 801a206:	889a      	ldrh	r2, [r3, #4]
 801a208:	430a      	orrs	r2, r1
 801a20a:	d010      	beq.n	801a22e <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 801a20c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801a210:	2a00      	cmp	r2, #0
 801a212:	db0c      	blt.n	801a22e <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 801a214:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801a216:	428a      	cmp	r2, r1
 801a218:	da09      	bge.n	801a22e <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 801a21a:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 801a21e:	4291      	cmp	r1, r2
 801a220:	f102 0201 	add.w	r2, r2, #1
 801a224:	bf88      	it	hi
 801a226:	3308      	addhi	r3, #8
 801a228:	60a2      	str	r2, [r4, #8]
 801a22a:	bf88      	it	hi
 801a22c:	6123      	strhi	r3, [r4, #16]
 801a22e:	68a1      	ldr	r1, [r4, #8]
 801a230:	b129      	cbz	r1, 801a23e <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 801a232:	6863      	ldr	r3, [r4, #4]
 801a234:	4299      	cmp	r1, r3
 801a236:	d802      	bhi.n	801a23e <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 801a238:	68e0      	ldr	r0, [r4, #12]
 801a23a:	f7ff febd 	bl	8019fb8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 801a23e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a240:	f023 0302 	bic.w	r3, r3, #2
 801a244:	6263      	str	r3, [r4, #36]	; 0x24
 801a246:	68e0      	ldr	r0, [r4, #12]
 801a248:	bd10      	pop	{r4, pc}
	...

0801a24c <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>:
 801a24c:	4b02      	ldr	r3, [pc, #8]	; (801a258 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0xc>)
 801a24e:	6018      	str	r0, [r3, #0]
 801a250:	4b02      	ldr	r3, [pc, #8]	; (801a25c <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0x10>)
 801a252:	6019      	str	r1, [r3, #0]
 801a254:	4770      	bx	lr
 801a256:	bf00      	nop
 801a258:	200177cc 	.word	0x200177cc
 801a25c:	200177d0 	.word	0x200177d0

0801a260 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 801a260:	4b01      	ldr	r3, [pc, #4]	; (801a268 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 801a262:	6818      	ldr	r0, [r3, #0]
 801a264:	4770      	bx	lr
 801a266:	bf00      	nop
 801a268:	200177cc 	.word	0x200177cc

0801a26c <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 801a26c:	4b01      	ldr	r3, [pc, #4]	; (801a274 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 801a26e:	6818      	ldr	r0, [r3, #0]
 801a270:	4770      	bx	lr
 801a272:	bf00      	nop
 801a274:	200177d0 	.word	0x200177d0

0801a278 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 801a278:	b510      	push	{r4, lr}
 801a27a:	6803      	ldr	r3, [r0, #0]
 801a27c:	460c      	mov	r4, r1
 801a27e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a280:	4798      	blx	r3
 801a282:	1b03      	subs	r3, r0, r4
 801a284:	4258      	negs	r0, r3
 801a286:	4158      	adcs	r0, r3
 801a288:	bd10      	pop	{r4, pc}
	...

0801a28c <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 801a28c:	4b01      	ldr	r3, [pc, #4]	; (801a294 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 801a28e:	6019      	str	r1, [r3, #0]
 801a290:	4770      	bx	lr
 801a292:	bf00      	nop
 801a294:	200177d4 	.word	0x200177d4

0801a298 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 801a298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a29c:	4696      	mov	lr, r2
 801a29e:	b097      	sub	sp, #92	; 0x5c
 801a2a0:	4605      	mov	r5, r0
 801a2a2:	4614      	mov	r4, r2
 801a2a4:	460e      	mov	r6, r1
 801a2a6:	461f      	mov	r7, r3
 801a2a8:	f10d 0c1c 	add.w	ip, sp, #28
 801a2ac:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 801a2b0:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 801a2b4:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 801a2b8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801a2bc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a2c0:	f8de 3000 	ldr.w	r3, [lr]
 801a2c4:	f104 0e14 	add.w	lr, r4, #20
 801a2c8:	f8cc 3000 	str.w	r3, [ip]
 801a2cc:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801a2d0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801a2d4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a2d8:	f8de 3000 	ldr.w	r3, [lr]
 801a2dc:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 801a2e0:	f8cc 3000 	str.w	r3, [ip]
 801a2e4:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 801a2e8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801a2ec:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a2f0:	f8de 3000 	ldr.w	r3, [lr]
 801a2f4:	4631      	mov	r1, r6
 801a2f6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801a2f8:	4628      	mov	r0, r5
 801a2fa:	f8cc 3000 	str.w	r3, [ip]
 801a2fe:	682b      	ldr	r3, [r5, #0]
 801a300:	9201      	str	r2, [sp, #4]
 801a302:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801a304:	f8cd 8008 	str.w	r8, [sp, #8]
 801a308:	9200      	str	r2, [sp, #0]
 801a30a:	aa07      	add	r2, sp, #28
 801a30c:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801a310:	f8d3 b03c 	ldr.w	fp, [r3, #60]	; 0x3c
 801a314:	463b      	mov	r3, r7
 801a316:	47d8      	blx	fp
 801a318:	46a6      	mov	lr, r4
 801a31a:	f10d 0c1c 	add.w	ip, sp, #28
 801a31e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801a322:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a326:	f8de 3000 	ldr.w	r3, [lr]
 801a32a:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 801a32e:	343c      	adds	r4, #60	; 0x3c
 801a330:	f8cc 3000 	str.w	r3, [ip]
 801a334:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801a338:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801a33c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a340:	f8de 3000 	ldr.w	r3, [lr]
 801a344:	f8cc 3000 	str.w	r3, [ip]
 801a348:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 801a34c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a34e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a352:	6823      	ldr	r3, [r4, #0]
 801a354:	4631      	mov	r1, r6
 801a356:	4628      	mov	r0, r5
 801a358:	f8cc 3000 	str.w	r3, [ip]
 801a35c:	682b      	ldr	r3, [r5, #0]
 801a35e:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801a362:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801a364:	f8cd 8008 	str.w	r8, [sp, #8]
 801a368:	9201      	str	r2, [sp, #4]
 801a36a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801a36c:	9200      	str	r2, [sp, #0]
 801a36e:	aa07      	add	r2, sp, #28
 801a370:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 801a372:	463b      	mov	r3, r7
 801a374:	47a0      	blx	r4
 801a376:	b017      	add	sp, #92	; 0x5c
 801a378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a37c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 801a37c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a380:	b08d      	sub	sp, #52	; 0x34
 801a382:	4688      	mov	r8, r1
 801a384:	f8d3 c000 	ldr.w	ip, [r3]
 801a388:	9916      	ldr	r1, [sp, #88]	; 0x58
 801a38a:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 801a38e:	680f      	ldr	r7, [r1, #0]
 801a390:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 801a394:	eba7 070c 	sub.w	r7, r7, ip
 801a398:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 801a39c:	edd3 6a07 	vldr	s13, [r3, #28]
 801a3a0:	42bc      	cmp	r4, r7
 801a3a2:	9918      	ldr	r1, [sp, #96]	; 0x60
 801a3a4:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 801a3a8:	bfa8      	it	ge
 801a3aa:	463c      	movge	r4, r7
 801a3ac:	f9b1 9000 	ldrsh.w	r9, [r1]
 801a3b0:	f9ba 1000 	ldrsh.w	r1, [sl]
 801a3b4:	ee07 4a90 	vmov	s15, r4
 801a3b8:	eb09 0e0c 	add.w	lr, r9, ip
 801a3bc:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 801a3c0:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 801a3c4:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 801a3c8:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 801a3cc:	4571      	cmp	r1, lr
 801a3ce:	ee25 4a04 	vmul.f32	s8, s10, s8
 801a3d2:	ee65 4a24 	vmul.f32	s9, s10, s9
 801a3d6:	ee25 5a27 	vmul.f32	s10, s10, s15
 801a3da:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801a3de:	ee71 0aa4 	vadd.f32	s1, s3, s9
 801a3e2:	ee32 1a05 	vadd.f32	s2, s4, s10
 801a3e6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801a3ea:	ee36 0a84 	vadd.f32	s0, s13, s8
 801a3ee:	ee61 1a87 	vmul.f32	s3, s3, s14
 801a3f2:	ee22 2a07 	vmul.f32	s4, s4, s14
 801a3f6:	f340 808c 	ble.w	801a512 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 801a3fa:	eba1 060e 	sub.w	r6, r1, lr
 801a3fe:	fb96 f5f4 	sdiv	r5, r6, r4
 801a402:	ee07 5a10 	vmov	s14, r5
 801a406:	2d00      	cmp	r5, #0
 801a408:	fb04 6615 	mls	r6, r4, r5, r6
 801a40c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a410:	eea7 0a04 	vfma.f32	s0, s14, s8
 801a414:	eee7 0a24 	vfma.f32	s1, s14, s9
 801a418:	eea7 1a05 	vfma.f32	s2, s14, s10
 801a41c:	dd12      	ble.n	801a444 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 801a41e:	ee70 6a44 	vsub.f32	s13, s0, s8
 801a422:	ee70 1ae4 	vsub.f32	s3, s1, s9
 801a426:	ee31 2a45 	vsub.f32	s4, s2, s10
 801a42a:	eef5 6a40 	vcmp.f32	s13, #0.0
 801a42e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a432:	bf14      	ite	ne
 801a434:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 801a438:	eeb0 7a67 	vmoveq.f32	s14, s15
 801a43c:	ee61 1a87 	vmul.f32	s3, s3, s14
 801a440:	ee22 2a07 	vmul.f32	s4, s4, s14
 801a444:	fb05 f204 	mul.w	r2, r5, r4
 801a448:	1abf      	subs	r7, r7, r2
 801a44a:	4494      	add	ip, r2
 801a44c:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 801a450:	4411      	add	r1, r2
 801a452:	eb09 020c 	add.w	r2, r9, ip
 801a456:	b209      	sxth	r1, r1
 801a458:	443a      	add	r2, r7
 801a45a:	428a      	cmp	r2, r1
 801a45c:	bfc4      	itt	gt
 801a45e:	eba1 0209 	subgt.w	r2, r1, r9
 801a462:	eba2 070c 	subgt.w	r7, r2, ip
 801a466:	2f00      	cmp	r7, #0
 801a468:	dd50      	ble.n	801a50c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 801a46a:	fb97 f1f4 	sdiv	r1, r7, r4
 801a46e:	fb04 7211 	mls	r2, r4, r1, r7
 801a472:	b90a      	cbnz	r2, 801a478 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 801a474:	3901      	subs	r1, #1
 801a476:	4622      	mov	r2, r4
 801a478:	eec7 3a80 	vdiv.f32	s7, s15, s0
 801a47c:	6840      	ldr	r0, [r0, #4]
 801a47e:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 801a482:	44b6      	add	lr, r6
 801a484:	f8d0 a000 	ldr.w	sl, [r0]
 801a488:	2900      	cmp	r1, #0
 801a48a:	bfcc      	ite	gt
 801a48c:	46a1      	movgt	r9, r4
 801a48e:	4691      	movle	r9, r2
 801a490:	900b      	str	r0, [sp, #44]	; 0x2c
 801a492:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801a494:	fb04 e505 	mla	r5, r4, r5, lr
 801a498:	eef0 6a42 	vmov.f32	s13, s4
 801a49c:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 801a4a0:	9008      	str	r0, [sp, #32]
 801a4a2:	eeb0 7a61 	vmov.f32	s14, s3
 801a4a6:	9818      	ldr	r0, [sp, #96]	; 0x60
 801a4a8:	695b      	ldr	r3, [r3, #20]
 801a4aa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a4ae:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 801a4b2:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801a4b6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801a4b8:	445b      	add	r3, fp
 801a4ba:	9307      	str	r3, [sp, #28]
 801a4bc:	ee16 3a90 	vmov	r3, s13
 801a4c0:	e9cd 8505 	strd	r8, r5, [sp, #20]
 801a4c4:	ee60 2aa3 	vmul.f32	s5, s1, s7
 801a4c8:	ee21 3a23 	vmul.f32	s6, s2, s7
 801a4cc:	ee72 7ae1 	vsub.f32	s15, s5, s3
 801a4d0:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801a4d4:	ee17 7a90 	vmov	r7, s15
 801a4d8:	ee73 7a42 	vsub.f32	s15, s6, s4
 801a4dc:	fb97 f7f4 	sdiv	r7, r7, r4
 801a4e0:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801a4e4:	ee17 ca90 	vmov	ip, s15
 801a4e8:	fb9c fcf4 	sdiv	ip, ip, r4
 801a4ec:	fb0c 3306 	mla	r3, ip, r6, r3
 801a4f0:	9302      	str	r3, [sp, #8]
 801a4f2:	ee17 3a10 	vmov	r3, s14
 801a4f6:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 801a4fa:	fb07 3706 	mla	r7, r7, r6, r3
 801a4fe:	eba9 0306 	sub.w	r3, r9, r6
 801a502:	e9cd 4700 	strd	r4, r7, [sp]
 801a506:	f8da 4008 	ldr.w	r4, [sl, #8]
 801a50a:	47a0      	blx	r4
 801a50c:	b00d      	add	sp, #52	; 0x34
 801a50e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a512:	2500      	movs	r5, #0
 801a514:	462e      	mov	r6, r5
 801a516:	e799      	b.n	801a44c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

0801a518 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 801a518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a51c:	b0db      	sub	sp, #364	; 0x16c
 801a51e:	461d      	mov	r5, r3
 801a520:	4614      	mov	r4, r2
 801a522:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 801a526:	910f      	str	r1, [sp, #60]	; 0x3c
 801a528:	4629      	mov	r1, r5
 801a52a:	930a      	str	r3, [sp, #40]	; 0x28
 801a52c:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 801a530:	9009      	str	r0, [sp, #36]	; 0x24
 801a532:	930b      	str	r3, [sp, #44]	; 0x2c
 801a534:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 801a538:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 801a53c:	9310      	str	r3, [sp, #64]	; 0x40
 801a53e:	6803      	ldr	r3, [r0, #0]
 801a540:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 801a542:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801a546:	47b8      	blx	r7
 801a548:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a54a:	6058      	str	r0, [r3, #4]
 801a54c:	2800      	cmp	r0, #0
 801a54e:	f000 83a1 	beq.w	801ac94 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a552:	682b      	ldr	r3, [r5, #0]
 801a554:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 801a558:	ed94 7a02 	vldr	s14, [r4, #8]
 801a55c:	9314      	str	r3, [sp, #80]	; 0x50
 801a55e:	686b      	ldr	r3, [r5, #4]
 801a560:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801a564:	9315      	str	r3, [sp, #84]	; 0x54
 801a566:	4bc1      	ldr	r3, [pc, #772]	; (801a86c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 801a568:	7819      	ldrb	r1, [r3, #0]
 801a56a:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 801a56e:	2900      	cmp	r1, #0
 801a570:	bf16      	itet	ne
 801a572:	4619      	movne	r1, r3
 801a574:	4611      	moveq	r1, r2
 801a576:	4613      	movne	r3, r2
 801a578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a57c:	9116      	str	r1, [sp, #88]	; 0x58
 801a57e:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 801a582:	f240 8387 	bls.w	801ac94 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a586:	ed94 7a07 	vldr	s14, [r4, #28]
 801a58a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801a58e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a592:	f240 837f 	bls.w	801ac94 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a596:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 801a59a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801a59e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a5a2:	f240 8377 	bls.w	801ac94 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a5a6:	6822      	ldr	r2, [r4, #0]
 801a5a8:	4bb1      	ldr	r3, [pc, #708]	; (801a870 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 801a5aa:	429a      	cmp	r2, r3
 801a5ac:	f2c0 8372 	blt.w	801ac94 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a5b0:	49b0      	ldr	r1, [pc, #704]	; (801a874 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 801a5b2:	6963      	ldr	r3, [r4, #20]
 801a5b4:	428a      	cmp	r2, r1
 801a5b6:	f300 836d 	bgt.w	801ac94 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a5ba:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 801a5be:	48ae      	ldr	r0, [pc, #696]	; (801a878 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 801a5c0:	33ff      	adds	r3, #255	; 0xff
 801a5c2:	4283      	cmp	r3, r0
 801a5c4:	f200 8366 	bhi.w	801ac94 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a5c8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801a5ca:	4dac      	ldr	r5, [pc, #688]	; (801a87c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 801a5cc:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 801a5d0:	33ff      	adds	r3, #255	; 0xff
 801a5d2:	42ab      	cmp	r3, r5
 801a5d4:	f200 835e 	bhi.w	801ac94 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a5d8:	6862      	ldr	r2, [r4, #4]
 801a5da:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 801a5de:	33ff      	adds	r3, #255	; 0xff
 801a5e0:	4283      	cmp	r3, r0
 801a5e2:	f200 8357 	bhi.w	801ac94 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a5e6:	69a1      	ldr	r1, [r4, #24]
 801a5e8:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 801a5ec:	33ff      	adds	r3, #255	; 0xff
 801a5ee:	4283      	cmp	r3, r0
 801a5f0:	f200 8350 	bhi.w	801ac94 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a5f4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801a5f6:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 801a5fa:	30ff      	adds	r0, #255	; 0xff
 801a5fc:	42a8      	cmp	r0, r5
 801a5fe:	f200 8349 	bhi.w	801ac94 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a602:	428a      	cmp	r2, r1
 801a604:	f280 8110 	bge.w	801a828 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 801a608:	429a      	cmp	r2, r3
 801a60a:	f300 8119 	bgt.w	801a840 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 801a60e:	4299      	cmp	r1, r3
 801a610:	f280 811d 	bge.w	801a84e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 801a614:	2502      	movs	r5, #2
 801a616:	2701      	movs	r7, #1
 801a618:	46a9      	mov	r9, r5
 801a61a:	46b8      	mov	r8, r7
 801a61c:	f04f 0a00 	mov.w	sl, #0
 801a620:	4621      	mov	r1, r4
 801a622:	a849      	add	r0, sp, #292	; 0x124
 801a624:	f003 f8a0 	bl	801d768 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 801a628:	4622      	mov	r2, r4
 801a62a:	4653      	mov	r3, sl
 801a62c:	a949      	add	r1, sp, #292	; 0x124
 801a62e:	f8cd 9000 	str.w	r9, [sp]
 801a632:	a819      	add	r0, sp, #100	; 0x64
 801a634:	f003 f9c8 	bl	801d9c8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801a638:	4622      	mov	r2, r4
 801a63a:	4653      	mov	r3, sl
 801a63c:	a949      	add	r1, sp, #292	; 0x124
 801a63e:	f8cd 8000 	str.w	r8, [sp]
 801a642:	a829      	add	r0, sp, #164	; 0xa4
 801a644:	f003 f9c0 	bl	801d9c8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801a648:	4643      	mov	r3, r8
 801a64a:	4622      	mov	r2, r4
 801a64c:	a949      	add	r1, sp, #292	; 0x124
 801a64e:	f8cd 9000 	str.w	r9, [sp]
 801a652:	a839      	add	r0, sp, #228	; 0xe4
 801a654:	f003 f9b8 	bl	801d9c8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801a658:	42af      	cmp	r7, r5
 801a65a:	af12      	add	r7, sp, #72	; 0x48
 801a65c:	bfb7      	itett	lt
 801a65e:	2300      	movlt	r3, #0
 801a660:	2301      	movge	r3, #1
 801a662:	ad29      	addlt	r5, sp, #164	; 0xa4
 801a664:	ac19      	addlt	r4, sp, #100	; 0x64
 801a666:	bfb1      	iteee	lt
 801a668:	930e      	strlt	r3, [sp, #56]	; 0x38
 801a66a:	ad19      	addge	r5, sp, #100	; 0x64
 801a66c:	930e      	strge	r3, [sp, #56]	; 0x38
 801a66e:	ac29      	addge	r4, sp, #164	; 0xa4
 801a670:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a672:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a676:	e887 0003 	stmia.w	r7, {r0, r1}
 801a67a:	b928      	cbnz	r0, 801a688 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 801a67c:	4b80      	ldr	r3, [pc, #512]	; (801a880 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 801a67e:	6818      	ldr	r0, [r3, #0]
 801a680:	6803      	ldr	r3, [r0, #0]
 801a682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a684:	4798      	blx	r3
 801a686:	6038      	str	r0, [r7, #0]
 801a688:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801a68a:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801a68e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a692:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801a694:	930c      	str	r3, [sp, #48]	; 0x30
 801a696:	990c      	ldr	r1, [sp, #48]	; 0x30
 801a698:	6963      	ldr	r3, [r4, #20]
 801a69a:	440b      	add	r3, r1
 801a69c:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801a6a0:	4408      	add	r0, r1
 801a6a2:	b200      	sxth	r0, r0
 801a6a4:	4283      	cmp	r3, r0
 801a6a6:	900d      	str	r0, [sp, #52]	; 0x34
 801a6a8:	f280 80dd 	bge.w	801a866 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 801a6ac:	428b      	cmp	r3, r1
 801a6ae:	da08      	bge.n	801a6c2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801a6b0:	2a00      	cmp	r2, #0
 801a6b2:	dd06      	ble.n	801a6c2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801a6b4:	1acb      	subs	r3, r1, r3
 801a6b6:	429a      	cmp	r2, r3
 801a6b8:	f2c0 80e4 	blt.w	801a884 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 801a6bc:	2b00      	cmp	r3, #0
 801a6be:	f300 80e2 	bgt.w	801a886 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 801a6c2:	6967      	ldr	r7, [r4, #20]
 801a6c4:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 801a6c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a6ca:	443b      	add	r3, r7
 801a6cc:	461f      	mov	r7, r3
 801a6ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a6d0:	1bdf      	subs	r7, r3, r7
 801a6d2:	4297      	cmp	r7, r2
 801a6d4:	bfa8      	it	ge
 801a6d6:	4617      	movge	r7, r2
 801a6d8:	2f00      	cmp	r7, #0
 801a6da:	f340 8166 	ble.w	801a9aa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 801a6de:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801a6e0:	6829      	ldr	r1, [r5, #0]
 801a6e2:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a6e6:	f9bb 3000 	ldrsh.w	r3, [fp]
 801a6ea:	4411      	add	r1, r2
 801a6ec:	6820      	ldr	r0, [r4, #0]
 801a6ee:	4299      	cmp	r1, r3
 801a6f0:	dd1a      	ble.n	801a728 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 801a6f2:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 801a6f6:	4402      	add	r2, r0
 801a6f8:	440b      	add	r3, r1
 801a6fa:	b21b      	sxth	r3, r3
 801a6fc:	429a      	cmp	r2, r3
 801a6fe:	dc13      	bgt.n	801a728 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 801a700:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801a702:	a912      	add	r1, sp, #72	; 0x48
 801a704:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a706:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a708:	681b      	ldr	r3, [r3, #0]
 801a70a:	9206      	str	r2, [sp, #24]
 801a70c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801a70e:	9500      	str	r5, [sp, #0]
 801a710:	9205      	str	r2, [sp, #20]
 801a712:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a714:	e9cd b203 	strd	fp, r2, [sp, #12]
 801a718:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801a71a:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801a71e:	aa49      	add	r2, sp, #292	; 0x124
 801a720:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 801a724:	4623      	mov	r3, r4
 801a726:	47c8      	blx	r9
 801a728:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 801a72c:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 801a730:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 801a734:	ee37 7a27 	vadd.f32	s14, s14, s15
 801a738:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 801a73c:	68a1      	ldr	r1, [r4, #8]
 801a73e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801a742:	ed94 6a08 	vldr	s12, [r4, #32]
 801a746:	edd4 6a07 	vldr	s13, [r4, #28]
 801a74a:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801a74e:	ee76 6a86 	vadd.f32	s13, s13, s12
 801a752:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801a756:	e9d4 2300 	ldrd	r2, r3, [r4]
 801a75a:	edc4 6a07 	vstr	s13, [r4, #28]
 801a75e:	441a      	add	r2, r3
 801a760:	6963      	ldr	r3, [r4, #20]
 801a762:	3301      	adds	r3, #1
 801a764:	6022      	str	r2, [r4, #0]
 801a766:	6163      	str	r3, [r4, #20]
 801a768:	69a3      	ldr	r3, [r4, #24]
 801a76a:	3b01      	subs	r3, #1
 801a76c:	61a3      	str	r3, [r4, #24]
 801a76e:	6923      	ldr	r3, [r4, #16]
 801a770:	440b      	add	r3, r1
 801a772:	68e1      	ldr	r1, [r4, #12]
 801a774:	428b      	cmp	r3, r1
 801a776:	6123      	str	r3, [r4, #16]
 801a778:	db15      	blt.n	801a7a6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 801a77a:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 801a77e:	3201      	adds	r2, #1
 801a780:	1a5b      	subs	r3, r3, r1
 801a782:	ee76 6a26 	vadd.f32	s13, s12, s13
 801a786:	6022      	str	r2, [r4, #0]
 801a788:	6123      	str	r3, [r4, #16]
 801a78a:	edc4 6a07 	vstr	s13, [r4, #28]
 801a78e:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 801a792:	ee36 7a87 	vadd.f32	s14, s13, s14
 801a796:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801a79a:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 801a79e:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a7a2:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801a7a6:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 801a7aa:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 801a7ae:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 801a7b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 801a7b6:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 801a7ba:	68a9      	ldr	r1, [r5, #8]
 801a7bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801a7c0:	ed95 6a08 	vldr	s12, [r5, #32]
 801a7c4:	edd5 6a07 	vldr	s13, [r5, #28]
 801a7c8:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801a7cc:	ee76 6a86 	vadd.f32	s13, s13, s12
 801a7d0:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801a7d4:	e9d5 2300 	ldrd	r2, r3, [r5]
 801a7d8:	edc5 6a07 	vstr	s13, [r5, #28]
 801a7dc:	441a      	add	r2, r3
 801a7de:	696b      	ldr	r3, [r5, #20]
 801a7e0:	3301      	adds	r3, #1
 801a7e2:	602a      	str	r2, [r5, #0]
 801a7e4:	616b      	str	r3, [r5, #20]
 801a7e6:	69ab      	ldr	r3, [r5, #24]
 801a7e8:	3b01      	subs	r3, #1
 801a7ea:	61ab      	str	r3, [r5, #24]
 801a7ec:	692b      	ldr	r3, [r5, #16]
 801a7ee:	440b      	add	r3, r1
 801a7f0:	68e9      	ldr	r1, [r5, #12]
 801a7f2:	428b      	cmp	r3, r1
 801a7f4:	612b      	str	r3, [r5, #16]
 801a7f6:	db15      	blt.n	801a824 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 801a7f8:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801a7fc:	3201      	adds	r2, #1
 801a7fe:	1a5b      	subs	r3, r3, r1
 801a800:	ee76 6a26 	vadd.f32	s13, s12, s13
 801a804:	602a      	str	r2, [r5, #0]
 801a806:	612b      	str	r3, [r5, #16]
 801a808:	edc5 6a07 	vstr	s13, [r5, #28]
 801a80c:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 801a810:	ee36 7a87 	vadd.f32	s14, s13, s14
 801a814:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801a818:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 801a81c:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a820:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801a824:	3f01      	subs	r7, #1
 801a826:	e757      	b.n	801a6d8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 801a828:	4299      	cmp	r1, r3
 801a82a:	dc13      	bgt.n	801a854 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 801a82c:	429a      	cmp	r2, r3
 801a82e:	da14      	bge.n	801a85a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 801a830:	2502      	movs	r5, #2
 801a832:	2703      	movs	r7, #3
 801a834:	f04f 0800 	mov.w	r8, #0
 801a838:	46a9      	mov	r9, r5
 801a83a:	f04f 0a01 	mov.w	sl, #1
 801a83e:	e6ef      	b.n	801a620 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801a840:	2501      	movs	r5, #1
 801a842:	2700      	movs	r7, #0
 801a844:	46a9      	mov	r9, r5
 801a846:	46b8      	mov	r8, r7
 801a848:	f04f 0a02 	mov.w	sl, #2
 801a84c:	e6e8      	b.n	801a620 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801a84e:	2501      	movs	r5, #1
 801a850:	2702      	movs	r7, #2
 801a852:	e6e1      	b.n	801a618 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 801a854:	2500      	movs	r5, #0
 801a856:	2701      	movs	r7, #1
 801a858:	e7f4      	b.n	801a844 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 801a85a:	2702      	movs	r7, #2
 801a85c:	2503      	movs	r5, #3
 801a85e:	f04f 0900 	mov.w	r9, #0
 801a862:	46b8      	mov	r8, r7
 801a864:	e7e9      	b.n	801a83a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 801a866:	4613      	mov	r3, r2
 801a868:	e728      	b.n	801a6bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 801a86a:	bf00      	nop
 801a86c:	200177bc 	.word	0x200177bc
 801a870:	fffd8f01 	.word	0xfffd8f01
 801a874:	00027100 	.word	0x00027100
 801a878:	0004e1ff 	.word	0x0004e1ff
 801a87c:	0004e1fe 	.word	0x0004e1fe
 801a880:	200177c4 	.word	0x200177c4
 801a884:	4613      	mov	r3, r2
 801a886:	992b      	ldr	r1, [sp, #172]	; 0xac
 801a888:	469e      	mov	lr, r3
 801a88a:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 801a88c:	469c      	mov	ip, r3
 801a88e:	9111      	str	r1, [sp, #68]	; 0x44
 801a890:	f04f 0900 	mov.w	r9, #0
 801a894:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 801a898:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 801a89c:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 801a8a0:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 801a8a4:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 801a8a8:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 801a8ac:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 801a8b0:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 801a8b4:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 801a8b8:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 801a8bc:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 801a8c0:	f1bc 0f00 	cmp.w	ip, #0
 801a8c4:	d147      	bne.n	801a956 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 801a8c6:	eb03 0c07 	add.w	ip, r3, r7
 801a8ca:	1ad7      	subs	r7, r2, r3
 801a8cc:	f1b9 0f00 	cmp.w	r9, #0
 801a8d0:	d009      	beq.n	801a8e6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 801a8d2:	9029      	str	r0, [sp, #164]	; 0xa4
 801a8d4:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 801a8d8:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 801a8dc:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 801a8e0:	912d      	str	r1, [sp, #180]	; 0xb4
 801a8e2:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 801a8e6:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801a8e8:	f04f 0800 	mov.w	r8, #0
 801a8ec:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 801a8f0:	9111      	str	r1, [sp, #68]	; 0x44
 801a8f2:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 801a8f6:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 801a8fa:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801a8fe:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 801a902:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 801a906:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 801a90a:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 801a90e:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 801a912:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 801a916:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 801a91a:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 801a91e:	f1be 0f00 	cmp.w	lr, #0
 801a922:	d031      	beq.n	801a988 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 801a924:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801a926:	4450      	add	r0, sl
 801a928:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801a92c:	4431      	add	r1, r6
 801a92e:	ee37 7a04 	vadd.f32	s14, s14, s8
 801a932:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801a936:	4549      	cmp	r1, r9
 801a938:	db08      	blt.n	801a94c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 801a93a:	ee77 7a85 	vadd.f32	s15, s15, s10
 801a93e:	3001      	adds	r0, #1
 801a940:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801a944:	eba1 0109 	sub.w	r1, r1, r9
 801a948:	ee37 7a06 	vadd.f32	s14, s14, s12
 801a94c:	f10e 3eff 	add.w	lr, lr, #4294967295
 801a950:	f04f 0801 	mov.w	r8, #1
 801a954:	e7e3      	b.n	801a91e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 801a956:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801a958:	4450      	add	r0, sl
 801a95a:	ee37 7a24 	vadd.f32	s14, s14, s9
 801a95e:	4431      	add	r1, r6
 801a960:	ee77 7a84 	vadd.f32	s15, s15, s8
 801a964:	ee76 6aa3 	vadd.f32	s13, s13, s7
 801a968:	4541      	cmp	r1, r8
 801a96a:	db08      	blt.n	801a97e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 801a96c:	ee76 6a85 	vadd.f32	s13, s13, s10
 801a970:	3001      	adds	r0, #1
 801a972:	ee37 7a25 	vadd.f32	s14, s14, s11
 801a976:	eba1 0108 	sub.w	r1, r1, r8
 801a97a:	ee77 7a86 	vadd.f32	s15, s15, s12
 801a97e:	f10c 3cff 	add.w	ip, ip, #4294967295
 801a982:	f04f 0901 	mov.w	r9, #1
 801a986:	e79b      	b.n	801a8c0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 801a988:	449c      	add	ip, r3
 801a98a:	1aff      	subs	r7, r7, r3
 801a98c:	f1b8 0f00 	cmp.w	r8, #0
 801a990:	d009      	beq.n	801a9a6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 801a992:	9019      	str	r0, [sp, #100]	; 0x64
 801a994:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 801a998:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 801a99c:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 801a9a0:	911d      	str	r1, [sp, #116]	; 0x74
 801a9a2:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 801a9a6:	1ad2      	subs	r2, r2, r3
 801a9a8:	e68b      	b.n	801a6c2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801a9aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a9ac:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 801a9ae:	2b00      	cmp	r3, #0
 801a9b0:	f000 80d1 	beq.w	801ab56 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 801a9b4:	ad19      	add	r5, sp, #100	; 0x64
 801a9b6:	ac39      	add	r4, sp, #228	; 0xe4
 801a9b8:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801a9ba:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801a9be:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a9c2:	930c      	str	r3, [sp, #48]	; 0x30
 801a9c4:	990c      	ldr	r1, [sp, #48]	; 0x30
 801a9c6:	6963      	ldr	r3, [r4, #20]
 801a9c8:	440b      	add	r3, r1
 801a9ca:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801a9ce:	4408      	add	r0, r1
 801a9d0:	b200      	sxth	r0, r0
 801a9d2:	4283      	cmp	r3, r0
 801a9d4:	900d      	str	r0, [sp, #52]	; 0x34
 801a9d6:	f280 80c1 	bge.w	801ab5c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 801a9da:	428b      	cmp	r3, r1
 801a9dc:	da08      	bge.n	801a9f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801a9de:	2a00      	cmp	r2, #0
 801a9e0:	dd06      	ble.n	801a9f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801a9e2:	1acb      	subs	r3, r1, r3
 801a9e4:	429a      	cmp	r2, r3
 801a9e6:	f2c0 80bb 	blt.w	801ab60 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 801a9ea:	2b00      	cmp	r3, #0
 801a9ec:	f300 80b9 	bgt.w	801ab62 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 801a9f0:	6967      	ldr	r7, [r4, #20]
 801a9f2:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 801a9f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a9f8:	443b      	add	r3, r7
 801a9fa:	461f      	mov	r7, r3
 801a9fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a9fe:	1bdf      	subs	r7, r3, r7
 801aa00:	4297      	cmp	r7, r2
 801aa02:	bfa8      	it	ge
 801aa04:	4617      	movge	r7, r2
 801aa06:	2f00      	cmp	r7, #0
 801aa08:	f340 813c 	ble.w	801ac84 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 801aa0c:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801aa0e:	6829      	ldr	r1, [r5, #0]
 801aa10:	f9b3 2000 	ldrsh.w	r2, [r3]
 801aa14:	f9bb 3000 	ldrsh.w	r3, [fp]
 801aa18:	4411      	add	r1, r2
 801aa1a:	6820      	ldr	r0, [r4, #0]
 801aa1c:	4299      	cmp	r1, r3
 801aa1e:	dd1a      	ble.n	801aa56 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801aa20:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 801aa24:	4402      	add	r2, r0
 801aa26:	440b      	add	r3, r1
 801aa28:	b21b      	sxth	r3, r3
 801aa2a:	429a      	cmp	r2, r3
 801aa2c:	dc13      	bgt.n	801aa56 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801aa2e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801aa30:	a912      	add	r1, sp, #72	; 0x48
 801aa32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801aa34:	9809      	ldr	r0, [sp, #36]	; 0x24
 801aa36:	681b      	ldr	r3, [r3, #0]
 801aa38:	9206      	str	r2, [sp, #24]
 801aa3a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801aa3c:	9500      	str	r5, [sp, #0]
 801aa3e:	9205      	str	r2, [sp, #20]
 801aa40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801aa42:	e9cd b203 	strd	fp, r2, [sp, #12]
 801aa46:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801aa48:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801aa4c:	aa49      	add	r2, sp, #292	; 0x124
 801aa4e:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 801aa52:	4623      	mov	r3, r4
 801aa54:	47c8      	blx	r9
 801aa56:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 801aa5a:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 801aa5e:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 801aa62:	ee37 7a27 	vadd.f32	s14, s14, s15
 801aa66:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 801aa6a:	68a1      	ldr	r1, [r4, #8]
 801aa6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801aa70:	ed94 6a08 	vldr	s12, [r4, #32]
 801aa74:	edd4 6a07 	vldr	s13, [r4, #28]
 801aa78:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801aa7c:	ee76 6a86 	vadd.f32	s13, s13, s12
 801aa80:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801aa84:	e9d4 2300 	ldrd	r2, r3, [r4]
 801aa88:	edc4 6a07 	vstr	s13, [r4, #28]
 801aa8c:	441a      	add	r2, r3
 801aa8e:	6963      	ldr	r3, [r4, #20]
 801aa90:	3301      	adds	r3, #1
 801aa92:	6022      	str	r2, [r4, #0]
 801aa94:	6163      	str	r3, [r4, #20]
 801aa96:	69a3      	ldr	r3, [r4, #24]
 801aa98:	3b01      	subs	r3, #1
 801aa9a:	61a3      	str	r3, [r4, #24]
 801aa9c:	6923      	ldr	r3, [r4, #16]
 801aa9e:	440b      	add	r3, r1
 801aaa0:	68e1      	ldr	r1, [r4, #12]
 801aaa2:	428b      	cmp	r3, r1
 801aaa4:	6123      	str	r3, [r4, #16]
 801aaa6:	db15      	blt.n	801aad4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 801aaa8:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 801aaac:	3201      	adds	r2, #1
 801aaae:	1a5b      	subs	r3, r3, r1
 801aab0:	ee76 6a26 	vadd.f32	s13, s12, s13
 801aab4:	6022      	str	r2, [r4, #0]
 801aab6:	6123      	str	r3, [r4, #16]
 801aab8:	edc4 6a07 	vstr	s13, [r4, #28]
 801aabc:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 801aac0:	ee36 7a87 	vadd.f32	s14, s13, s14
 801aac4:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801aac8:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 801aacc:	ee77 7a27 	vadd.f32	s15, s14, s15
 801aad0:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801aad4:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 801aad8:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 801aadc:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 801aae0:	ee37 7a27 	vadd.f32	s14, s14, s15
 801aae4:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 801aae8:	68a9      	ldr	r1, [r5, #8]
 801aaea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801aaee:	ed95 6a08 	vldr	s12, [r5, #32]
 801aaf2:	edd5 6a07 	vldr	s13, [r5, #28]
 801aaf6:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801aafa:	ee76 6a86 	vadd.f32	s13, s13, s12
 801aafe:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801ab02:	e9d5 2300 	ldrd	r2, r3, [r5]
 801ab06:	edc5 6a07 	vstr	s13, [r5, #28]
 801ab0a:	441a      	add	r2, r3
 801ab0c:	696b      	ldr	r3, [r5, #20]
 801ab0e:	3301      	adds	r3, #1
 801ab10:	602a      	str	r2, [r5, #0]
 801ab12:	616b      	str	r3, [r5, #20]
 801ab14:	69ab      	ldr	r3, [r5, #24]
 801ab16:	3b01      	subs	r3, #1
 801ab18:	61ab      	str	r3, [r5, #24]
 801ab1a:	692b      	ldr	r3, [r5, #16]
 801ab1c:	440b      	add	r3, r1
 801ab1e:	68e9      	ldr	r1, [r5, #12]
 801ab20:	428b      	cmp	r3, r1
 801ab22:	612b      	str	r3, [r5, #16]
 801ab24:	db15      	blt.n	801ab52 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 801ab26:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801ab2a:	3201      	adds	r2, #1
 801ab2c:	1a5b      	subs	r3, r3, r1
 801ab2e:	ee76 6a26 	vadd.f32	s13, s12, s13
 801ab32:	602a      	str	r2, [r5, #0]
 801ab34:	612b      	str	r3, [r5, #16]
 801ab36:	edc5 6a07 	vstr	s13, [r5, #28]
 801ab3a:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 801ab3e:	ee36 7a87 	vadd.f32	s14, s13, s14
 801ab42:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801ab46:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 801ab4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801ab4e:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801ab52:	3f01      	subs	r7, #1
 801ab54:	e757      	b.n	801aa06 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 801ab56:	ad39      	add	r5, sp, #228	; 0xe4
 801ab58:	ac19      	add	r4, sp, #100	; 0x64
 801ab5a:	e72d      	b.n	801a9b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 801ab5c:	4613      	mov	r3, r2
 801ab5e:	e744      	b.n	801a9ea <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 801ab60:	4613      	mov	r3, r2
 801ab62:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 801ab64:	469e      	mov	lr, r3
 801ab66:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 801ab6a:	461f      	mov	r7, r3
 801ab6c:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 801ab70:	f04f 0900 	mov.w	r9, #0
 801ab74:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 801ab78:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 801ab7c:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 801ab80:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 801ab84:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 801ab88:	993d      	ldr	r1, [sp, #244]	; 0xf4
 801ab8a:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 801ab8e:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 801ab92:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 801ab96:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 801ab9a:	960e      	str	r6, [sp, #56]	; 0x38
 801ab9c:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 801aba0:	2f00      	cmp	r7, #0
 801aba2:	d146      	bne.n	801ac32 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 801aba4:	449c      	add	ip, r3
 801aba6:	1ad7      	subs	r7, r2, r3
 801aba8:	f1b9 0f00 	cmp.w	r9, #0
 801abac:	d009      	beq.n	801abc2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 801abae:	9039      	str	r0, [sp, #228]	; 0xe4
 801abb0:	913d      	str	r1, [sp, #244]	; 0xf4
 801abb2:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 801abb6:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 801abba:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 801abbe:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 801abc2:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801abc4:	f04f 0800 	mov.w	r8, #0
 801abc8:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 801abcc:	910e      	str	r1, [sp, #56]	; 0x38
 801abce:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 801abd2:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 801abd6:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801abda:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 801abde:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 801abe2:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 801abe6:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 801abea:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 801abee:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 801abf2:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 801abf6:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 801abfa:	f1be 0f00 	cmp.w	lr, #0
 801abfe:	d030      	beq.n	801ac62 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 801ac00:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801ac02:	4450      	add	r0, sl
 801ac04:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801ac08:	4431      	add	r1, r6
 801ac0a:	ee37 7a04 	vadd.f32	s14, s14, s8
 801ac0e:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801ac12:	4549      	cmp	r1, r9
 801ac14:	db08      	blt.n	801ac28 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 801ac16:	ee77 7a85 	vadd.f32	s15, s15, s10
 801ac1a:	3001      	adds	r0, #1
 801ac1c:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801ac20:	eba1 0109 	sub.w	r1, r1, r9
 801ac24:	ee37 7a06 	vadd.f32	s14, s14, s12
 801ac28:	f10e 3eff 	add.w	lr, lr, #4294967295
 801ac2c:	f04f 0801 	mov.w	r8, #1
 801ac30:	e7e3      	b.n	801abfa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 801ac32:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801ac34:	4450      	add	r0, sl
 801ac36:	ee37 7a24 	vadd.f32	s14, s14, s9
 801ac3a:	4431      	add	r1, r6
 801ac3c:	ee77 7a84 	vadd.f32	s15, s15, s8
 801ac40:	ee76 6aa3 	vadd.f32	s13, s13, s7
 801ac44:	4541      	cmp	r1, r8
 801ac46:	db08      	blt.n	801ac5a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 801ac48:	ee76 6a85 	vadd.f32	s13, s13, s10
 801ac4c:	3001      	adds	r0, #1
 801ac4e:	ee37 7a25 	vadd.f32	s14, s14, s11
 801ac52:	eba1 0108 	sub.w	r1, r1, r8
 801ac56:	ee77 7a86 	vadd.f32	s15, s15, s12
 801ac5a:	3f01      	subs	r7, #1
 801ac5c:	f04f 0901 	mov.w	r9, #1
 801ac60:	e79e      	b.n	801aba0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 801ac62:	449c      	add	ip, r3
 801ac64:	1aff      	subs	r7, r7, r3
 801ac66:	f1b8 0f00 	cmp.w	r8, #0
 801ac6a:	d009      	beq.n	801ac80 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 801ac6c:	9019      	str	r0, [sp, #100]	; 0x64
 801ac6e:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 801ac72:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 801ac76:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 801ac7a:	911d      	str	r1, [sp, #116]	; 0x74
 801ac7c:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 801ac80:	1ad2      	subs	r2, r2, r3
 801ac82:	e6b5      	b.n	801a9f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801ac84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ac86:	681b      	ldr	r3, [r3, #0]
 801ac88:	b923      	cbnz	r3, 801ac94 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801ac8a:	4b04      	ldr	r3, [pc, #16]	; (801ac9c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 801ac8c:	6818      	ldr	r0, [r3, #0]
 801ac8e:	6803      	ldr	r3, [r0, #0]
 801ac90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ac92:	4798      	blx	r3
 801ac94:	b05b      	add	sp, #364	; 0x16c
 801ac96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ac9a:	bf00      	nop
 801ac9c:	200177c4 	.word	0x200177c4

0801aca0 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 801aca0:	2b03      	cmp	r3, #3
 801aca2:	d818      	bhi.n	801acd6 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 801aca4:	e8df f003 	tbb	[pc, r3]
 801aca8:	130d0602 	.word	0x130d0602
 801acac:	f9b0 2000 	ldrsh.w	r2, [r0]
 801acb0:	1850      	adds	r0, r2, r1
 801acb2:	4770      	bx	lr
 801acb4:	8803      	ldrh	r3, [r0, #0]
 801acb6:	8880      	ldrh	r0, [r0, #4]
 801acb8:	4418      	add	r0, r3
 801acba:	b200      	sxth	r0, r0
 801acbc:	1a80      	subs	r0, r0, r2
 801acbe:	3801      	subs	r0, #1
 801acc0:	4770      	bx	lr
 801acc2:	8803      	ldrh	r3, [r0, #0]
 801acc4:	8880      	ldrh	r0, [r0, #4]
 801acc6:	4418      	add	r0, r3
 801acc8:	b200      	sxth	r0, r0
 801acca:	1a40      	subs	r0, r0, r1
 801accc:	e7f7      	b.n	801acbe <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 801acce:	f9b0 0000 	ldrsh.w	r0, [r0]
 801acd2:	4410      	add	r0, r2
 801acd4:	4770      	bx	lr
 801acd6:	2000      	movs	r0, #0
 801acd8:	4770      	bx	lr

0801acda <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 801acda:	2b03      	cmp	r3, #3
 801acdc:	d817      	bhi.n	801ad0e <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 801acde:	e8df f003 	tbb	[pc, r3]
 801ace2:	0602      	.short	0x0602
 801ace4:	1009      	.short	0x1009
 801ace6:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 801acea:	1850      	adds	r0, r2, r1
 801acec:	4770      	bx	lr
 801acee:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801acf2:	e7fa      	b.n	801acea <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 801acf4:	8843      	ldrh	r3, [r0, #2]
 801acf6:	88c0      	ldrh	r0, [r0, #6]
 801acf8:	4418      	add	r0, r3
 801acfa:	b200      	sxth	r0, r0
 801acfc:	1a80      	subs	r0, r0, r2
 801acfe:	3801      	subs	r0, #1
 801ad00:	4770      	bx	lr
 801ad02:	8843      	ldrh	r3, [r0, #2]
 801ad04:	88c0      	ldrh	r0, [r0, #6]
 801ad06:	4418      	add	r0, r3
 801ad08:	b200      	sxth	r0, r0
 801ad0a:	1a40      	subs	r0, r0, r1
 801ad0c:	e7f7      	b.n	801acfe <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 801ad0e:	2000      	movs	r0, #0
 801ad10:	4770      	bx	lr
	...

0801ad14 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 801ad14:	4b01      	ldr	r3, [pc, #4]	; (801ad1c <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 801ad16:	2200      	movs	r2, #0
 801ad18:	601a      	str	r2, [r3, #0]
 801ad1a:	4770      	bx	lr
 801ad1c:	200177d4 	.word	0x200177d4

0801ad20 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 801ad20:	4603      	mov	r3, r0
 801ad22:	b1c8      	cbz	r0, 801ad58 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 801ad24:	0c02      	lsrs	r2, r0, #16
 801ad26:	0412      	lsls	r2, r2, #16
 801ad28:	b9a2      	cbnz	r2, 801ad54 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 801ad2a:	0403      	lsls	r3, r0, #16
 801ad2c:	2010      	movs	r0, #16
 801ad2e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801ad32:	bf04      	itt	eq
 801ad34:	021b      	lsleq	r3, r3, #8
 801ad36:	3008      	addeq	r0, #8
 801ad38:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801ad3c:	bf04      	itt	eq
 801ad3e:	011b      	lsleq	r3, r3, #4
 801ad40:	3004      	addeq	r0, #4
 801ad42:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801ad46:	bf04      	itt	eq
 801ad48:	009b      	lsleq	r3, r3, #2
 801ad4a:	3002      	addeq	r0, #2
 801ad4c:	2b00      	cmp	r3, #0
 801ad4e:	db04      	blt.n	801ad5a <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 801ad50:	3001      	adds	r0, #1
 801ad52:	4770      	bx	lr
 801ad54:	2000      	movs	r0, #0
 801ad56:	e7ea      	b.n	801ad2e <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 801ad58:	2020      	movs	r0, #32
 801ad5a:	4770      	bx	lr

0801ad5c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 801ad5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ad60:	b087      	sub	sp, #28
 801ad62:	4681      	mov	r9, r0
 801ad64:	4698      	mov	r8, r3
 801ad66:	4610      	mov	r0, r2
 801ad68:	460d      	mov	r5, r1
 801ad6a:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 801ad6e:	b981      	cbnz	r1, 801ad92 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 801ad70:	b14b      	cbz	r3, 801ad86 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 801ad72:	460b      	mov	r3, r1
 801ad74:	464a      	mov	r2, r9
 801ad76:	4641      	mov	r1, r8
 801ad78:	e9cd 4700 	strd	r4, r7, [sp]
 801ad7c:	f7ff ffee 	bl	801ad5c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801ad80:	b007      	add	sp, #28
 801ad82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ad86:	f04f 33ff 	mov.w	r3, #4294967295
 801ad8a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801ad8e:	603b      	str	r3, [r7, #0]
 801ad90:	e7f6      	b.n	801ad80 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 801ad92:	fa32 fa01 	lsrs.w	sl, r2, r1
 801ad96:	d107      	bne.n	801ada8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 801ad98:	fb09 f602 	mul.w	r6, r9, r2
 801ad9c:	fbb6 f0f4 	udiv	r0, r6, r4
 801ada0:	fb04 6610 	mls	r6, r4, r0, r6
 801ada4:	603e      	str	r6, [r7, #0]
 801ada6:	e7eb      	b.n	801ad80 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 801ada8:	2601      	movs	r6, #1
 801adaa:	fa09 fb01 	lsl.w	fp, r9, r1
 801adae:	408e      	lsls	r6, r1
 801adb0:	fbbb f3f4 	udiv	r3, fp, r4
 801adb4:	3e01      	subs	r6, #1
 801adb6:	9302      	str	r3, [sp, #8]
 801adb8:	fb0a f303 	mul.w	r3, sl, r3
 801adbc:	4016      	ands	r6, r2
 801adbe:	9303      	str	r3, [sp, #12]
 801adc0:	4630      	mov	r0, r6
 801adc2:	f7ff ffad 	bl	801ad20 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801adc6:	464a      	mov	r2, r9
 801adc8:	460b      	mov	r3, r1
 801adca:	4601      	mov	r1, r0
 801adcc:	4630      	mov	r0, r6
 801adce:	e9cd 4700 	strd	r4, r7, [sp]
 801add2:	f7ff ffc3 	bl	801ad5c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801add6:	9b02      	ldr	r3, [sp, #8]
 801add8:	4606      	mov	r6, r0
 801adda:	eb05 0108 	add.w	r1, r5, r8
 801adde:	fb04 bb13 	mls	fp, r4, r3, fp
 801ade2:	4658      	mov	r0, fp
 801ade4:	f7ff ff9c 	bl	801ad20 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801ade8:	ab05      	add	r3, sp, #20
 801adea:	465a      	mov	r2, fp
 801adec:	e9cd 4300 	strd	r4, r3, [sp]
 801adf0:	4603      	mov	r3, r0
 801adf2:	4650      	mov	r0, sl
 801adf4:	f7ff ffb2 	bl	801ad5c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801adf8:	6839      	ldr	r1, [r7, #0]
 801adfa:	9a05      	ldr	r2, [sp, #20]
 801adfc:	9b03      	ldr	r3, [sp, #12]
 801adfe:	4411      	add	r1, r2
 801ae00:	fbb1 f2f4 	udiv	r2, r1, r4
 801ae04:	18d3      	adds	r3, r2, r3
 801ae06:	fb04 1412 	mls	r4, r4, r2, r1
 801ae0a:	441e      	add	r6, r3
 801ae0c:	603c      	str	r4, [r7, #0]
 801ae0e:	4430      	add	r0, r6
 801ae10:	e7b6      	b.n	801ad80 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

0801ae12 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 801ae12:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ae16:	b085      	sub	sp, #20
 801ae18:	f1b0 0900 	subs.w	r9, r0, #0
 801ae1c:	461d      	mov	r5, r3
 801ae1e:	4617      	mov	r7, r2
 801ae20:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801ae22:	bfbb      	ittet	lt
 801ae24:	f1c9 0900 	rsblt	r9, r9, #0
 801ae28:	f04f 36ff 	movlt.w	r6, #4294967295
 801ae2c:	2601      	movge	r6, #1
 801ae2e:	6823      	ldrlt	r3, [r4, #0]
 801ae30:	bfbc      	itt	lt
 801ae32:	425b      	neglt	r3, r3
 801ae34:	6023      	strlt	r3, [r4, #0]
 801ae36:	2a00      	cmp	r2, #0
 801ae38:	da04      	bge.n	801ae44 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 801ae3a:	6823      	ldr	r3, [r4, #0]
 801ae3c:	4257      	negs	r7, r2
 801ae3e:	4276      	negs	r6, r6
 801ae40:	425b      	negs	r3, r3
 801ae42:	6023      	str	r3, [r4, #0]
 801ae44:	2d00      	cmp	r5, #0
 801ae46:	4638      	mov	r0, r7
 801ae48:	bfba      	itte	lt
 801ae4a:	426d      	neglt	r5, r5
 801ae4c:	f04f 38ff 	movlt.w	r8, #4294967295
 801ae50:	f04f 0801 	movge.w	r8, #1
 801ae54:	f7ff ff64 	bl	801ad20 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801ae58:	ab03      	add	r3, sp, #12
 801ae5a:	463a      	mov	r2, r7
 801ae5c:	e9cd 5300 	strd	r5, r3, [sp]
 801ae60:	4603      	mov	r3, r0
 801ae62:	4648      	mov	r0, r9
 801ae64:	f7ff ff7a 	bl	801ad5c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801ae68:	6823      	ldr	r3, [r4, #0]
 801ae6a:	9a03      	ldr	r2, [sp, #12]
 801ae6c:	4546      	cmp	r6, r8
 801ae6e:	441a      	add	r2, r3
 801ae70:	fb92 f3f5 	sdiv	r3, r2, r5
 801ae74:	4418      	add	r0, r3
 801ae76:	fb05 2313 	mls	r3, r5, r3, r2
 801ae7a:	bf18      	it	ne
 801ae7c:	4240      	negne	r0, r0
 801ae7e:	1c72      	adds	r2, r6, #1
 801ae80:	6023      	str	r3, [r4, #0]
 801ae82:	d105      	bne.n	801ae90 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 801ae84:	2b00      	cmp	r3, #0
 801ae86:	f1c3 0200 	rsb	r2, r3, #0
 801ae8a:	db0b      	blt.n	801aea4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 801ae8c:	6022      	str	r2, [r4, #0]
 801ae8e:	e006      	b.n	801ae9e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801ae90:	2e01      	cmp	r6, #1
 801ae92:	d104      	bne.n	801ae9e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801ae94:	2b00      	cmp	r3, #0
 801ae96:	da02      	bge.n	801ae9e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801ae98:	442b      	add	r3, r5
 801ae9a:	3801      	subs	r0, #1
 801ae9c:	6023      	str	r3, [r4, #0]
 801ae9e:	b005      	add	sp, #20
 801aea0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801aea4:	3801      	subs	r0, #1
 801aea6:	1b52      	subs	r2, r2, r5
 801aea8:	e7f0      	b.n	801ae8c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

0801aeac <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 801aeac:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801aeb0:	4c1c      	ldr	r4, [pc, #112]	; (801af24 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 801aeb2:	4605      	mov	r5, r0
 801aeb4:	6807      	ldr	r7, [r0, #0]
 801aeb6:	69a3      	ldr	r3, [r4, #24]
 801aeb8:	b92b      	cbnz	r3, 801aec6 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 801aeba:	6840      	ldr	r0, [r0, #4]
 801aebc:	e9c5 7000 	strd	r7, r0, [r5]
 801aec0:	b004      	add	sp, #16
 801aec2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801aec6:	f04f 0802 	mov.w	r8, #2
 801aeca:	68a2      	ldr	r2, [r4, #8]
 801aecc:	ae04      	add	r6, sp, #16
 801aece:	6820      	ldr	r0, [r4, #0]
 801aed0:	fb93 f1f8 	sdiv	r1, r3, r8
 801aed4:	440a      	add	r2, r1
 801aed6:	69e1      	ldr	r1, [r4, #28]
 801aed8:	f846 2d04 	str.w	r2, [r6, #-4]!
 801aedc:	463a      	mov	r2, r7
 801aede:	9600      	str	r6, [sp, #0]
 801aee0:	f7ff ff97 	bl	801ae12 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801aee4:	69a3      	ldr	r3, [r4, #24]
 801aee6:	4607      	mov	r7, r0
 801aee8:	686a      	ldr	r2, [r5, #4]
 801aeea:	6a21      	ldr	r1, [r4, #32]
 801aeec:	9600      	str	r6, [sp, #0]
 801aeee:	6860      	ldr	r0, [r4, #4]
 801aef0:	f7ff ff8f 	bl	801ae12 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801aef4:	69a3      	ldr	r3, [r4, #24]
 801aef6:	6962      	ldr	r2, [r4, #20]
 801aef8:	4407      	add	r7, r0
 801aefa:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801aefc:	9600      	str	r6, [sp, #0]
 801aefe:	68e0      	ldr	r0, [r4, #12]
 801af00:	fb93 f8f8 	sdiv	r8, r3, r8
 801af04:	4442      	add	r2, r8
 801af06:	9203      	str	r2, [sp, #12]
 801af08:	682a      	ldr	r2, [r5, #0]
 801af0a:	f7ff ff82 	bl	801ae12 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801af0e:	4680      	mov	r8, r0
 801af10:	9600      	str	r6, [sp, #0]
 801af12:	69a3      	ldr	r3, [r4, #24]
 801af14:	686a      	ldr	r2, [r5, #4]
 801af16:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801af18:	6920      	ldr	r0, [r4, #16]
 801af1a:	f7ff ff7a 	bl	801ae12 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801af1e:	4440      	add	r0, r8
 801af20:	e7cc      	b.n	801aebc <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 801af22:	bf00      	nop
 801af24:	200177d8 	.word	0x200177d8

0801af28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 801af28:	4b07      	ldr	r3, [pc, #28]	; (801af48 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 801af2a:	781b      	ldrb	r3, [r3, #0]
 801af2c:	2b01      	cmp	r3, #1
 801af2e:	d109      	bne.n	801af44 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 801af30:	f9b1 3000 	ldrsh.w	r3, [r1]
 801af34:	f9b0 2000 	ldrsh.w	r2, [r0]
 801af38:	8003      	strh	r3, [r0, #0]
 801af3a:	4b04      	ldr	r3, [pc, #16]	; (801af4c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 801af3c:	881b      	ldrh	r3, [r3, #0]
 801af3e:	3b01      	subs	r3, #1
 801af40:	1a9b      	subs	r3, r3, r2
 801af42:	800b      	strh	r3, [r1, #0]
 801af44:	4770      	bx	lr
 801af46:	bf00      	nop
 801af48:	200177bc 	.word	0x200177bc
 801af4c:	200177b8 	.word	0x200177b8

0801af50 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 801af50:	4b07      	ldr	r3, [pc, #28]	; (801af70 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 801af52:	b510      	push	{r4, lr}
 801af54:	781b      	ldrb	r3, [r3, #0]
 801af56:	2b01      	cmp	r3, #1
 801af58:	d108      	bne.n	801af6c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801af5a:	4b06      	ldr	r3, [pc, #24]	; (801af74 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 801af5c:	880c      	ldrh	r4, [r1, #0]
 801af5e:	881b      	ldrh	r3, [r3, #0]
 801af60:	f9b0 2000 	ldrsh.w	r2, [r0]
 801af64:	3b01      	subs	r3, #1
 801af66:	1b1b      	subs	r3, r3, r4
 801af68:	8003      	strh	r3, [r0, #0]
 801af6a:	800a      	strh	r2, [r1, #0]
 801af6c:	bd10      	pop	{r4, pc}
 801af6e:	bf00      	nop
 801af70:	200177bc 	.word	0x200177bc
 801af74:	200177b8 	.word	0x200177b8

0801af78 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 801af78:	4b0a      	ldr	r3, [pc, #40]	; (801afa4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 801af7a:	b510      	push	{r4, lr}
 801af7c:	781b      	ldrb	r3, [r3, #0]
 801af7e:	2b01      	cmp	r3, #1
 801af80:	d10e      	bne.n	801afa0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 801af82:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801af86:	8843      	ldrh	r3, [r0, #2]
 801af88:	f9b0 4000 	ldrsh.w	r4, [r0]
 801af8c:	18ca      	adds	r2, r1, r3
 801af8e:	4b06      	ldr	r3, [pc, #24]	; (801afa8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 801af90:	8044      	strh	r4, [r0, #2]
 801af92:	881b      	ldrh	r3, [r3, #0]
 801af94:	1a9b      	subs	r3, r3, r2
 801af96:	8003      	strh	r3, [r0, #0]
 801af98:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801af9c:	8081      	strh	r1, [r0, #4]
 801af9e:	80c3      	strh	r3, [r0, #6]
 801afa0:	bd10      	pop	{r4, pc}
 801afa2:	bf00      	nop
 801afa4:	200177bc 	.word	0x200177bc
 801afa8:	200177b8 	.word	0x200177b8

0801afac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 801afac:	4b08      	ldr	r3, [pc, #32]	; (801afd0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 801afae:	781b      	ldrb	r3, [r3, #0]
 801afb0:	2b01      	cmp	r3, #1
 801afb2:	d10c      	bne.n	801afce <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 801afb4:	8803      	ldrh	r3, [r0, #0]
 801afb6:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 801afba:	8842      	ldrh	r2, [r0, #2]
 801afbc:	8002      	strh	r2, [r0, #0]
 801afbe:	185a      	adds	r2, r3, r1
 801afc0:	4b04      	ldr	r3, [pc, #16]	; (801afd4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 801afc2:	881b      	ldrh	r3, [r3, #0]
 801afc4:	1a9b      	subs	r3, r3, r2
 801afc6:	8043      	strh	r3, [r0, #2]
 801afc8:	88c3      	ldrh	r3, [r0, #6]
 801afca:	80c1      	strh	r1, [r0, #6]
 801afcc:	8083      	strh	r3, [r0, #4]
 801afce:	4770      	bx	lr
 801afd0:	200177bc 	.word	0x200177bc
 801afd4:	200177b8 	.word	0x200177b8

0801afd8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 801afd8:	4b07      	ldr	r3, [pc, #28]	; (801aff8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801afda:	b510      	push	{r4, lr}
 801afdc:	781b      	ldrb	r3, [r3, #0]
 801afde:	2b01      	cmp	r3, #1
 801afe0:	d108      	bne.n	801aff4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801afe2:	f9b1 3000 	ldrsh.w	r3, [r1]
 801afe6:	f9b0 4000 	ldrsh.w	r4, [r0]
 801afea:	8003      	strh	r3, [r0, #0]
 801afec:	8893      	ldrh	r3, [r2, #4]
 801afee:	3b01      	subs	r3, #1
 801aff0:	1b1b      	subs	r3, r3, r4
 801aff2:	800b      	strh	r3, [r1, #0]
 801aff4:	bd10      	pop	{r4, pc}
 801aff6:	bf00      	nop
 801aff8:	200177bc 	.word	0x200177bc

0801affc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>:
 801affc:	4b0b      	ldr	r3, [pc, #44]	; (801b02c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x30>)
 801affe:	781b      	ldrb	r3, [r3, #0]
 801b000:	2b01      	cmp	r3, #1
 801b002:	d111      	bne.n	801b028 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x2c>
 801b004:	680b      	ldr	r3, [r1, #0]
 801b006:	ed90 7a00 	vldr	s14, [r0]
 801b00a:	6003      	str	r3, [r0, #0]
 801b00c:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 801b010:	eddf 6a07 	vldr	s13, [pc, #28]	; 801b030 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x34>
 801b014:	ee07 3a90 	vmov	s15, r3
 801b018:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b01c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801b020:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801b024:	edc1 7a00 	vstr	s15, [r1]
 801b028:	4770      	bx	lr
 801b02a:	bf00      	nop
 801b02c:	200177bc 	.word	0x200177bc
 801b030:	38d1b717 	.word	0x38d1b717

0801b034 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 801b034:	4b0a      	ldr	r3, [pc, #40]	; (801b060 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 801b036:	460a      	mov	r2, r1
 801b038:	b510      	push	{r4, lr}
 801b03a:	781b      	ldrb	r3, [r3, #0]
 801b03c:	2b01      	cmp	r3, #1
 801b03e:	d10d      	bne.n	801b05c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 801b040:	8881      	ldrh	r1, [r0, #4]
 801b042:	8803      	ldrh	r3, [r0, #0]
 801b044:	440b      	add	r3, r1
 801b046:	4601      	mov	r1, r0
 801b048:	3b01      	subs	r3, #1
 801b04a:	f821 3b02 	strh.w	r3, [r1], #2
 801b04e:	f7ff ffc3 	bl	801afd8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801b052:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801b056:	88c2      	ldrh	r2, [r0, #6]
 801b058:	80c3      	strh	r3, [r0, #6]
 801b05a:	8082      	strh	r2, [r0, #4]
 801b05c:	bd10      	pop	{r4, pc}
 801b05e:	bf00      	nop
 801b060:	200177bc 	.word	0x200177bc

0801b064 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 801b064:	b570      	push	{r4, r5, r6, lr}
 801b066:	2300      	movs	r3, #0
 801b068:	4c0a      	ldr	r4, [pc, #40]	; (801b094 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 801b06a:	4605      	mov	r5, r0
 801b06c:	460e      	mov	r6, r1
 801b06e:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 801b072:	6820      	ldr	r0, [r4, #0]
 801b074:	b110      	cbz	r0, 801b07c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x18>
 801b076:	6803      	ldr	r3, [r0, #0]
 801b078:	695b      	ldr	r3, [r3, #20]
 801b07a:	4798      	blx	r3
 801b07c:	6026      	str	r6, [r4, #0]
 801b07e:	4630      	mov	r0, r6
 801b080:	6833      	ldr	r3, [r6, #0]
 801b082:	68db      	ldr	r3, [r3, #12]
 801b084:	4798      	blx	r3
 801b086:	682b      	ldr	r3, [r5, #0]
 801b088:	4628      	mov	r0, r5
 801b08a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b08c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b090:	4718      	bx	r3
 801b092:	bf00      	nop
 801b094:	20017808 	.word	0x20017808

0801b098 <_ZN8touchgfx11Application13requestRedrawEv>:
 801b098:	4b06      	ldr	r3, [pc, #24]	; (801b0b4 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 801b09a:	2100      	movs	r1, #0
 801b09c:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b0a0:	4b05      	ldr	r3, [pc, #20]	; (801b0b8 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 801b0a2:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
 801b0a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b0aa:	f8a0 2130 	strh.w	r2, [r0, #304]	; 0x130
 801b0ae:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
 801b0b2:	4770      	bx	lr
 801b0b4:	200177b8 	.word	0x200177b8
 801b0b8:	200177ba 	.word	0x200177ba

0801b0bc <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 801b0bc:	4b03      	ldr	r3, [pc, #12]	; (801b0cc <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801b0be:	6818      	ldr	r0, [r3, #0]
 801b0c0:	b110      	cbz	r0, 801b0c8 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801b0c2:	6803      	ldr	r3, [r0, #0]
 801b0c4:	699b      	ldr	r3, [r3, #24]
 801b0c6:	4718      	bx	r3
 801b0c8:	4770      	bx	lr
 801b0ca:	bf00      	nop
 801b0cc:	20017808 	.word	0x20017808

0801b0d0 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 801b0d0:	4770      	bx	lr
	...

0801b0d4 <_ZN8touchgfx11Application4drawEv>:
 801b0d4:	4b09      	ldr	r3, [pc, #36]	; (801b0fc <_ZN8touchgfx11Application4drawEv+0x28>)
 801b0d6:	b507      	push	{r0, r1, r2, lr}
 801b0d8:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b0dc:	2100      	movs	r1, #0
 801b0de:	4b08      	ldr	r3, [pc, #32]	; (801b100 <_ZN8touchgfx11Application4drawEv+0x2c>)
 801b0e0:	9100      	str	r1, [sp, #0]
 801b0e2:	4669      	mov	r1, sp
 801b0e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b0e8:	f8ad 2004 	strh.w	r2, [sp, #4]
 801b0ec:	f8ad 3006 	strh.w	r3, [sp, #6]
 801b0f0:	6803      	ldr	r3, [r0, #0]
 801b0f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b0f4:	4798      	blx	r3
 801b0f6:	b003      	add	sp, #12
 801b0f8:	f85d fb04 	ldr.w	pc, [sp], #4
 801b0fc:	200177b8 	.word	0x200177b8
 801b100:	200177ba 	.word	0x200177ba

0801b104 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 801b104:	4b03      	ldr	r3, [pc, #12]	; (801b114 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801b106:	6818      	ldr	r0, [r3, #0]
 801b108:	b110      	cbz	r0, 801b110 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801b10a:	6803      	ldr	r3, [r0, #0]
 801b10c:	69db      	ldr	r3, [r3, #28]
 801b10e:	4718      	bx	r3
 801b110:	4770      	bx	lr
 801b112:	bf00      	nop
 801b114:	20017808 	.word	0x20017808

0801b118 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 801b118:	4b03      	ldr	r3, [pc, #12]	; (801b128 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801b11a:	6818      	ldr	r0, [r3, #0]
 801b11c:	b110      	cbz	r0, 801b124 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801b11e:	6803      	ldr	r3, [r0, #0]
 801b120:	6a1b      	ldr	r3, [r3, #32]
 801b122:	4718      	bx	r3
 801b124:	4770      	bx	lr
 801b126:	bf00      	nop
 801b128:	20017808 	.word	0x20017808

0801b12c <_ZN8touchgfx11Application16clearCachedAreasEv>:
 801b12c:	2300      	movs	r3, #0
 801b12e:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 801b132:	4770      	bx	lr

0801b134 <_ZN8touchgfx11Application14handleKeyEventEh>:
 801b134:	4b03      	ldr	r3, [pc, #12]	; (801b144 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 801b136:	6818      	ldr	r0, [r3, #0]
 801b138:	b110      	cbz	r0, 801b140 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 801b13a:	6803      	ldr	r3, [r0, #0]
 801b13c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b13e:	4718      	bx	r3
 801b140:	4770      	bx	lr
 801b142:	bf00      	nop
 801b144:	20017808 	.word	0x20017808

0801b148 <_ZN8touchgfx11Application15handleTickEventEv>:
 801b148:	b570      	push	{r4, r5, r6, lr}
 801b14a:	4d32      	ldr	r5, [pc, #200]	; (801b214 <_ZN8touchgfx11Application15handleTickEventEv+0xcc>)
 801b14c:	4604      	mov	r4, r0
 801b14e:	6828      	ldr	r0, [r5, #0]
 801b150:	b140      	cbz	r0, 801b164 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801b152:	7a03      	ldrb	r3, [r0, #8]
 801b154:	b933      	cbnz	r3, 801b164 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801b156:	f884 3134 	strb.w	r3, [r4, #308]	; 0x134
 801b15a:	6803      	ldr	r3, [r0, #0]
 801b15c:	689b      	ldr	r3, [r3, #8]
 801b15e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b162:	4718      	bx	r3
 801b164:	f894 3134 	ldrb.w	r3, [r4, #308]	; 0x134
 801b168:	b97b      	cbnz	r3, 801b18a <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801b16a:	b170      	cbz	r0, 801b18a <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801b16c:	7a03      	ldrb	r3, [r0, #8]
 801b16e:	b163      	cbz	r3, 801b18a <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801b170:	4b29      	ldr	r3, [pc, #164]	; (801b218 <_ZN8touchgfx11Application15handleTickEventEv+0xd0>)
 801b172:	6818      	ldr	r0, [r3, #0]
 801b174:	b110      	cbz	r0, 801b17c <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 801b176:	6803      	ldr	r3, [r0, #0]
 801b178:	691b      	ldr	r3, [r3, #16]
 801b17a:	4798      	blx	r3
 801b17c:	6828      	ldr	r0, [r5, #0]
 801b17e:	6803      	ldr	r3, [r0, #0]
 801b180:	68db      	ldr	r3, [r3, #12]
 801b182:	4798      	blx	r3
 801b184:	2301      	movs	r3, #1
 801b186:	f884 3134 	strb.w	r3, [r4, #308]	; 0x134
 801b18a:	2500      	movs	r5, #0
 801b18c:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 801b190:	42a8      	cmp	r0, r5
 801b192:	dd0c      	ble.n	801b1ae <_ZN8touchgfx11Application15handleTickEventEv+0x66>
 801b194:	1963      	adds	r3, r4, r5
 801b196:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 801b19a:	b132      	cbz	r2, 801b1aa <_ZN8touchgfx11Application15handleTickEventEv+0x62>
 801b19c:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 801b1a0:	4413      	add	r3, r2
 801b1a2:	6858      	ldr	r0, [r3, #4]
 801b1a4:	6803      	ldr	r3, [r0, #0]
 801b1a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b1a8:	4798      	blx	r3
 801b1aa:	3501      	adds	r5, #1
 801b1ac:	e7ee      	b.n	801b18c <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 801b1ae:	2300      	movs	r3, #0
 801b1b0:	461a      	mov	r2, r3
 801b1b2:	4298      	cmp	r0, r3
 801b1b4:	d015      	beq.n	801b1e2 <_ZN8touchgfx11Application15handleTickEventEv+0x9a>
 801b1b6:	18e1      	adds	r1, r4, r3
 801b1b8:	f891 5088 	ldrb.w	r5, [r1, #136]	; 0x88
 801b1bc:	b16d      	cbz	r5, 801b1da <_ZN8touchgfx11Application15handleTickEventEv+0x92>
 801b1be:	429a      	cmp	r2, r3
 801b1c0:	d00a      	beq.n	801b1d8 <_ZN8touchgfx11Application15handleTickEventEv+0x90>
 801b1c2:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 801b1c6:	4431      	add	r1, r6
 801b1c8:	684e      	ldr	r6, [r1, #4]
 801b1ca:	b291      	uxth	r1, r2
 801b1cc:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801b1d0:	604e      	str	r6, [r1, #4]
 801b1d2:	18a1      	adds	r1, r4, r2
 801b1d4:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 801b1d8:	3201      	adds	r2, #1
 801b1da:	3301      	adds	r3, #1
 801b1dc:	e7e9      	b.n	801b1b2 <_ZN8touchgfx11Application15handleTickEventEv+0x6a>
 801b1de:	f8a4 3084 	strh.w	r3, [r4, #132]	; 0x84
 801b1e2:	f8b4 5084 	ldrh.w	r5, [r4, #132]	; 0x84
 801b1e6:	4295      	cmp	r5, r2
 801b1e8:	dd0d      	ble.n	801b206 <_ZN8touchgfx11Application15handleTickEventEv+0xbe>
 801b1ea:	1e6b      	subs	r3, r5, #1
 801b1ec:	b29b      	uxth	r3, r3
 801b1ee:	eb04 0183 	add.w	r1, r4, r3, lsl #2
 801b1f2:	4618      	mov	r0, r3
 801b1f4:	3104      	adds	r1, #4
 801b1f6:	4285      	cmp	r5, r0
 801b1f8:	ddf1      	ble.n	801b1de <_ZN8touchgfx11Application15handleTickEventEv+0x96>
 801b1fa:	f851 6f04 	ldr.w	r6, [r1, #4]!
 801b1fe:	3001      	adds	r0, #1
 801b200:	f841 6c04 	str.w	r6, [r1, #-4]
 801b204:	e7f7      	b.n	801b1f6 <_ZN8touchgfx11Application15handleTickEventEv+0xae>
 801b206:	4b04      	ldr	r3, [pc, #16]	; (801b218 <_ZN8touchgfx11Application15handleTickEventEv+0xd0>)
 801b208:	6818      	ldr	r0, [r3, #0]
 801b20a:	b110      	cbz	r0, 801b212 <_ZN8touchgfx11Application15handleTickEventEv+0xca>
 801b20c:	6803      	ldr	r3, [r0, #0]
 801b20e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b210:	e7a5      	b.n	801b15e <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 801b212:	bd70      	pop	{r4, r5, r6, pc}
 801b214:	2001780c 	.word	0x2001780c
 801b218:	20017808 	.word	0x20017808

0801b21c <_ZN8touchgfx11ApplicationD1Ev>:
 801b21c:	4770      	bx	lr

0801b21e <_ZN8touchgfx11ApplicationD0Ev>:
 801b21e:	b510      	push	{r4, lr}
 801b220:	4604      	mov	r4, r0
 801b222:	f44f 719c 	mov.w	r1, #312	; 0x138
 801b226:	f00e ff37 	bl	802a098 <_ZdlPvj>
 801b22a:	4620      	mov	r0, r4
 801b22c:	bd10      	pop	{r4, pc}

0801b22e <_ZNK8touchgfx4Rect9intersectERKS0_>:
 801b22e:	b510      	push	{r4, lr}
 801b230:	f9b1 4000 	ldrsh.w	r4, [r1]
 801b234:	888a      	ldrh	r2, [r1, #4]
 801b236:	f9b0 3000 	ldrsh.w	r3, [r0]
 801b23a:	4422      	add	r2, r4
 801b23c:	b212      	sxth	r2, r2
 801b23e:	4293      	cmp	r3, r2
 801b240:	da15      	bge.n	801b26e <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801b242:	8882      	ldrh	r2, [r0, #4]
 801b244:	4413      	add	r3, r2
 801b246:	b21b      	sxth	r3, r3
 801b248:	429c      	cmp	r4, r3
 801b24a:	da10      	bge.n	801b26e <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801b24c:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801b250:	88c9      	ldrh	r1, [r1, #6]
 801b252:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801b256:	4419      	add	r1, r3
 801b258:	b209      	sxth	r1, r1
 801b25a:	428a      	cmp	r2, r1
 801b25c:	da07      	bge.n	801b26e <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801b25e:	88c0      	ldrh	r0, [r0, #6]
 801b260:	4410      	add	r0, r2
 801b262:	b200      	sxth	r0, r0
 801b264:	4283      	cmp	r3, r0
 801b266:	bfac      	ite	ge
 801b268:	2000      	movge	r0, #0
 801b26a:	2001      	movlt	r0, #1
 801b26c:	bd10      	pop	{r4, pc}
 801b26e:	2000      	movs	r0, #0
 801b270:	e7fc      	b.n	801b26c <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0801b272 <_ZN8touchgfx4Rect10restrictToEss>:
 801b272:	f9b0 3000 	ldrsh.w	r3, [r0]
 801b276:	2b00      	cmp	r3, #0
 801b278:	b510      	push	{r4, lr}
 801b27a:	da04      	bge.n	801b286 <_ZN8touchgfx4Rect10restrictToEss+0x14>
 801b27c:	8884      	ldrh	r4, [r0, #4]
 801b27e:	4423      	add	r3, r4
 801b280:	8083      	strh	r3, [r0, #4]
 801b282:	2300      	movs	r3, #0
 801b284:	8003      	strh	r3, [r0, #0]
 801b286:	f9b0 4000 	ldrsh.w	r4, [r0]
 801b28a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801b28e:	1b09      	subs	r1, r1, r4
 801b290:	428b      	cmp	r3, r1
 801b292:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801b296:	bfc8      	it	gt
 801b298:	8081      	strhgt	r1, [r0, #4]
 801b29a:	2b00      	cmp	r3, #0
 801b29c:	da04      	bge.n	801b2a8 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 801b29e:	88c1      	ldrh	r1, [r0, #6]
 801b2a0:	440b      	add	r3, r1
 801b2a2:	80c3      	strh	r3, [r0, #6]
 801b2a4:	2300      	movs	r3, #0
 801b2a6:	8043      	strh	r3, [r0, #2]
 801b2a8:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 801b2ac:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 801b2b0:	1a52      	subs	r2, r2, r1
 801b2b2:	4293      	cmp	r3, r2
 801b2b4:	bfc8      	it	gt
 801b2b6:	80c2      	strhgt	r2, [r0, #6]
 801b2b8:	bd10      	pop	{r4, pc}
	...

0801b2bc <_ZN8touchgfx11Application4drawERNS_4RectE>:
 801b2bc:	4b10      	ldr	r3, [pc, #64]	; (801b300 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 801b2be:	b510      	push	{r4, lr}
 801b2c0:	460c      	mov	r4, r1
 801b2c2:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b2c6:	4b0f      	ldr	r3, [pc, #60]	; (801b304 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 801b2c8:	4620      	mov	r0, r4
 801b2ca:	f9b3 1000 	ldrsh.w	r1, [r3]
 801b2ce:	f7ff ffd0 	bl	801b272 <_ZN8touchgfx4Rect10restrictToEss>
 801b2d2:	4b0d      	ldr	r3, [pc, #52]	; (801b308 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 801b2d4:	6818      	ldr	r0, [r3, #0]
 801b2d6:	b190      	cbz	r0, 801b2fe <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 801b2d8:	6803      	ldr	r3, [r0, #0]
 801b2da:	4621      	mov	r1, r4
 801b2dc:	689b      	ldr	r3, [r3, #8]
 801b2de:	4798      	blx	r3
 801b2e0:	4b0a      	ldr	r3, [pc, #40]	; (801b30c <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 801b2e2:	6818      	ldr	r0, [r3, #0]
 801b2e4:	b118      	cbz	r0, 801b2ee <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 801b2e6:	6803      	ldr	r3, [r0, #0]
 801b2e8:	4621      	mov	r1, r4
 801b2ea:	689b      	ldr	r3, [r3, #8]
 801b2ec:	4798      	blx	r3
 801b2ee:	4b08      	ldr	r3, [pc, #32]	; (801b310 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 801b2f0:	4621      	mov	r1, r4
 801b2f2:	6818      	ldr	r0, [r3, #0]
 801b2f4:	6803      	ldr	r3, [r0, #0]
 801b2f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b2fa:	69db      	ldr	r3, [r3, #28]
 801b2fc:	4718      	bx	r3
 801b2fe:	bd10      	pop	{r4, pc}
 801b300:	200177ba 	.word	0x200177ba
 801b304:	200177b8 	.word	0x200177b8
 801b308:	20017808 	.word	0x20017808
 801b30c:	20017804 	.word	0x20017804
 801b310:	200177c4 	.word	0x200177c4

0801b314 <_ZNK8touchgfx4Rect8includesERKS0_>:
 801b314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b316:	4606      	mov	r6, r0
 801b318:	4608      	mov	r0, r1
 801b31a:	460f      	mov	r7, r1
 801b31c:	f7fc f97d 	bl	801761a <_ZNK8touchgfx4Rect7isEmptyEv>
 801b320:	b9e8      	cbnz	r0, 801b35e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801b322:	f9b7 5000 	ldrsh.w	r5, [r7]
 801b326:	f9b6 4000 	ldrsh.w	r4, [r6]
 801b32a:	42a5      	cmp	r5, r4
 801b32c:	db17      	blt.n	801b35e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801b32e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801b332:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 801b336:	429a      	cmp	r2, r3
 801b338:	db11      	blt.n	801b35e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801b33a:	88b9      	ldrh	r1, [r7, #4]
 801b33c:	440d      	add	r5, r1
 801b33e:	88b1      	ldrh	r1, [r6, #4]
 801b340:	440c      	add	r4, r1
 801b342:	b22d      	sxth	r5, r5
 801b344:	b224      	sxth	r4, r4
 801b346:	42a5      	cmp	r5, r4
 801b348:	dc09      	bgt.n	801b35e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801b34a:	88f8      	ldrh	r0, [r7, #6]
 801b34c:	4410      	add	r0, r2
 801b34e:	88f2      	ldrh	r2, [r6, #6]
 801b350:	4413      	add	r3, r2
 801b352:	b200      	sxth	r0, r0
 801b354:	b21b      	sxth	r3, r3
 801b356:	4298      	cmp	r0, r3
 801b358:	bfcc      	ite	gt
 801b35a:	2000      	movgt	r0, #0
 801b35c:	2001      	movle	r0, #1
 801b35e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801b360 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 801b360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b362:	4604      	mov	r4, r0
 801b364:	4608      	mov	r0, r1
 801b366:	460d      	mov	r5, r1
 801b368:	f7fc f957 	bl	801761a <_ZNK8touchgfx4Rect7isEmptyEv>
 801b36c:	b978      	cbnz	r0, 801b38e <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 801b36e:	4620      	mov	r0, r4
 801b370:	f7fc f953 	bl	801761a <_ZNK8touchgfx4Rect7isEmptyEv>
 801b374:	f9b5 6000 	ldrsh.w	r6, [r5]
 801b378:	b150      	cbz	r0, 801b390 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 801b37a:	8026      	strh	r6, [r4, #0]
 801b37c:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801b380:	8063      	strh	r3, [r4, #2]
 801b382:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 801b386:	80a3      	strh	r3, [r4, #4]
 801b388:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801b38c:	80e3      	strh	r3, [r4, #6]
 801b38e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b390:	f9b4 1000 	ldrsh.w	r1, [r4]
 801b394:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801b398:	42b1      	cmp	r1, r6
 801b39a:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801b39e:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 801b3a2:	460f      	mov	r7, r1
 801b3a4:	88ed      	ldrh	r5, [r5, #6]
 801b3a6:	bfa8      	it	ge
 801b3a8:	4637      	movge	r7, r6
 801b3aa:	4293      	cmp	r3, r2
 801b3ac:	4618      	mov	r0, r3
 801b3ae:	4466      	add	r6, ip
 801b3b0:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801b3b4:	bfa8      	it	ge
 801b3b6:	4610      	movge	r0, r2
 801b3b8:	442a      	add	r2, r5
 801b3ba:	88e5      	ldrh	r5, [r4, #6]
 801b3bc:	4461      	add	r1, ip
 801b3be:	b236      	sxth	r6, r6
 801b3c0:	8027      	strh	r7, [r4, #0]
 801b3c2:	442b      	add	r3, r5
 801b3c4:	b209      	sxth	r1, r1
 801b3c6:	b212      	sxth	r2, r2
 801b3c8:	8060      	strh	r0, [r4, #2]
 801b3ca:	b21b      	sxth	r3, r3
 801b3cc:	428e      	cmp	r6, r1
 801b3ce:	bfac      	ite	ge
 801b3d0:	ebc7 0106 	rsbge	r1, r7, r6
 801b3d4:	ebc7 0101 	rsblt	r1, r7, r1
 801b3d8:	429a      	cmp	r2, r3
 801b3da:	bfac      	ite	ge
 801b3dc:	ebc0 0202 	rsbge	r2, r0, r2
 801b3e0:	ebc0 0203 	rsblt	r2, r0, r3
 801b3e4:	80a1      	strh	r1, [r4, #4]
 801b3e6:	80e2      	strh	r2, [r4, #6]
 801b3e8:	e7d1      	b.n	801b38e <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

0801b3ec <_ZN8touchgfx11Application11getInstanceEv>:
 801b3ec:	4b01      	ldr	r3, [pc, #4]	; (801b3f4 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801b3ee:	6818      	ldr	r0, [r3, #0]
 801b3f0:	4770      	bx	lr
 801b3f2:	bf00      	nop
 801b3f4:	20017818 	.word	0x20017818

0801b3f8 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 801b3f8:	2300      	movs	r3, #0
 801b3fa:	f100 0288 	add.w	r2, r0, #136	; 0x88
 801b3fe:	30a8      	adds	r0, #168	; 0xa8
 801b400:	f820 3c24 	strh.w	r3, [r0, #-36]
 801b404:	f802 3b01 	strb.w	r3, [r2], #1
 801b408:	4282      	cmp	r2, r0
 801b40a:	d1fb      	bne.n	801b404 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 801b40c:	4770      	bx	lr

0801b40e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801b40e:	4603      	mov	r3, r0
 801b410:	f100 0140 	add.w	r1, r0, #64	; 0x40
 801b414:	2200      	movs	r2, #0
 801b416:	801a      	strh	r2, [r3, #0]
 801b418:	3308      	adds	r3, #8
 801b41a:	f823 2c06 	strh.w	r2, [r3, #-6]
 801b41e:	f823 2c04 	strh.w	r2, [r3, #-4]
 801b422:	f823 2c02 	strh.w	r2, [r3, #-2]
 801b426:	428b      	cmp	r3, r1
 801b428:	d1f5      	bne.n	801b416 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 801b42a:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 801b42e:	4770      	bx	lr

0801b430 <_ZN8touchgfx11ApplicationC1Ev>:
 801b430:	b570      	push	{r4, r5, r6, lr}
 801b432:	4b19      	ldr	r3, [pc, #100]	; (801b498 <_ZN8touchgfx11ApplicationC1Ev+0x68>)
 801b434:	2500      	movs	r5, #0
 801b436:	4604      	mov	r4, r0
 801b438:	30a8      	adds	r0, #168	; 0xa8
 801b43a:	f840 3ca8 	str.w	r3, [r0, #-168]
 801b43e:	f820 5c24 	strh.w	r5, [r0, #-36]
 801b442:	f7ff ffe4 	bl	801b40e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801b446:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 801b44a:	f7ff ffe0 	bl	801b40e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801b44e:	f8a4 512c 	strh.w	r5, [r4, #300]	; 0x12c
 801b452:	f8a4 512e 	strh.w	r5, [r4, #302]	; 0x12e
 801b456:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 801b45a:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 801b45e:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
 801b462:	490e      	ldr	r1, [pc, #56]	; (801b49c <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 801b464:	480e      	ldr	r0, [pc, #56]	; (801b4a0 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 801b466:	f00e f921 	bl	80296ac <CRC_Lock>
 801b46a:	4e0e      	ldr	r6, [pc, #56]	; (801b4a4 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 801b46c:	4b0e      	ldr	r3, [pc, #56]	; (801b4a8 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 801b46e:	b158      	cbz	r0, 801b488 <_ZN8touchgfx11ApplicationC1Ev+0x58>
 801b470:	801d      	strh	r5, [r3, #0]
 801b472:	2300      	movs	r3, #0
 801b474:	4a0d      	ldr	r2, [pc, #52]	; (801b4ac <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 801b476:	4620      	mov	r0, r4
 801b478:	6013      	str	r3, [r2, #0]
 801b47a:	4a0d      	ldr	r2, [pc, #52]	; (801b4b0 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 801b47c:	6033      	str	r3, [r6, #0]
 801b47e:	6013      	str	r3, [r2, #0]
 801b480:	f7ff ffba 	bl	801b3f8 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 801b484:	4620      	mov	r0, r4
 801b486:	bd70      	pop	{r4, r5, r6, pc}
 801b488:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801b48c:	2002      	movs	r0, #2
 801b48e:	801a      	strh	r2, [r3, #0]
 801b490:	6030      	str	r0, [r6, #0]
 801b492:	f001 fb09 	bl	801caa8 <_ZN8touchgfx6Screen4drawEv>
 801b496:	e7ec      	b.n	801b472 <_ZN8touchgfx11ApplicationC1Ev+0x42>
 801b498:	0802fed0 	.word	0x0802fed0
 801b49c:	b5e8b5cd 	.word	0xb5e8b5cd
 801b4a0:	f407a5c2 	.word	0xf407a5c2
 801b4a4:	20017808 	.word	0x20017808
 801b4a8:	20000044 	.word	0x20000044
 801b4ac:	20017818 	.word	0x20017818
 801b4b0:	2001780c 	.word	0x2001780c

0801b4b4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 801b4b4:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 801b4b8:	3b01      	subs	r3, #1
 801b4ba:	b29b      	uxth	r3, r3
 801b4bc:	428b      	cmp	r3, r1
 801b4be:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 801b4c2:	b510      	push	{r4, lr}
 801b4c4:	d908      	bls.n	801b4d8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 801b4c6:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 801b4ca:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 801b4ce:	681a      	ldr	r2, [r3, #0]
 801b4d0:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 801b4d4:	685a      	ldr	r2, [r3, #4]
 801b4d6:	6062      	str	r2, [r4, #4]
 801b4d8:	bd10      	pop	{r4, pc}
	...

0801b4dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 801b4dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b4e0:	b08f      	sub	sp, #60	; 0x3c
 801b4e2:	4b94      	ldr	r3, [pc, #592]	; (801b734 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>)
 801b4e4:	4683      	mov	fp, r0
 801b4e6:	ac0a      	add	r4, sp, #40	; 0x28
 801b4e8:	e884 0006 	stmia.w	r4, {r1, r2}
 801b4ec:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b4f0:	4620      	mov	r0, r4
 801b4f2:	4b91      	ldr	r3, [pc, #580]	; (801b738 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x25c>)
 801b4f4:	f9b3 1000 	ldrsh.w	r1, [r3]
 801b4f8:	f7ff febb 	bl	801b272 <_ZN8touchgfx4Rect10restrictToEss>
 801b4fc:	4620      	mov	r0, r4
 801b4fe:	f7fc f88c 	bl	801761a <_ZNK8touchgfx4Rect7isEmptyEv>
 801b502:	2800      	cmp	r0, #0
 801b504:	d16a      	bne.n	801b5dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801b506:	9403      	str	r4, [sp, #12]
 801b508:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 801b50c:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 801b510:	2400      	movs	r4, #0
 801b512:	eb0b 06c5 	add.w	r6, fp, r5, lsl #3
 801b516:	9301      	str	r3, [sp, #4]
 801b518:	36a0      	adds	r6, #160	; 0xa0
 801b51a:	42a5      	cmp	r5, r4
 801b51c:	d00d      	beq.n	801b53a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5e>
 801b51e:	eba6 01c4 	sub.w	r1, r6, r4, lsl #3
 801b522:	9803      	ldr	r0, [sp, #12]
 801b524:	f7ff fef6 	bl	801b314 <_ZNK8touchgfx4Rect8includesERKS0_>
 801b528:	b128      	cbz	r0, 801b536 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a>
 801b52a:	1e69      	subs	r1, r5, #1
 801b52c:	9801      	ldr	r0, [sp, #4]
 801b52e:	1b09      	subs	r1, r1, r4
 801b530:	b289      	uxth	r1, r1
 801b532:	f7ff ffbf 	bl	801b4b4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801b536:	3401      	adds	r4, #1
 801b538:	e7ef      	b.n	801b51a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e>
 801b53a:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 801b53e:	1e7b      	subs	r3, r7, #1
 801b540:	eb0b 0ac7 	add.w	sl, fp, r7, lsl #3
 801b544:	9704      	str	r7, [sp, #16]
 801b546:	9302      	str	r3, [sp, #8]
 801b548:	2400      	movs	r4, #0
 801b54a:	4655      	mov	r5, sl
 801b54c:	9705      	str	r7, [sp, #20]
 801b54e:	4626      	mov	r6, r4
 801b550:	9b05      	ldr	r3, [sp, #20]
 801b552:	2b00      	cmp	r3, #0
 801b554:	d078      	beq.n	801b648 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x16c>
 801b556:	9903      	ldr	r1, [sp, #12]
 801b558:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 801b55c:	f7ff fe67 	bl	801b22e <_ZNK8touchgfx4Rect9intersectERKS0_>
 801b560:	b360      	cbz	r0, 801b5bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 801b562:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 801b566:	f9b5 c0a0 	ldrsh.w	ip, [r5, #160]	; 0xa0
 801b56a:	f9bd 902a 	ldrsh.w	r9, [sp, #42]	; 0x2a
 801b56e:	45e6      	cmp	lr, ip
 801b570:	f9b5 80a2 	ldrsh.w	r8, [r5, #162]	; 0xa2
 801b574:	db35      	blt.n	801b5e2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 801b576:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801b57a:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 801b57e:	4472      	add	r2, lr
 801b580:	4463      	add	r3, ip
 801b582:	b212      	sxth	r2, r2
 801b584:	b21b      	sxth	r3, r3
 801b586:	429a      	cmp	r2, r3
 801b588:	dc2b      	bgt.n	801b5e2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 801b58a:	fa1f f288 	uxth.w	r2, r8
 801b58e:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 801b592:	45c1      	cmp	r9, r8
 801b594:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 801b598:	4413      	add	r3, r2
 801b59a:	fa1f fc89 	uxth.w	ip, r9
 801b59e:	b29b      	uxth	r3, r3
 801b5a0:	fa0f fe83 	sxth.w	lr, r3
 801b5a4:	db0f      	blt.n	801b5c6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 801b5a6:	eba3 030c 	sub.w	r3, r3, ip
 801b5aa:	1ac9      	subs	r1, r1, r3
 801b5ac:	b209      	sxth	r1, r1
 801b5ae:	2900      	cmp	r1, #0
 801b5b0:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801b5b4:	dd12      	ble.n	801b5dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801b5b6:	f8ad e02a 	strh.w	lr, [sp, #42]	; 0x2a
 801b5ba:	4604      	mov	r4, r0
 801b5bc:	9b05      	ldr	r3, [sp, #20]
 801b5be:	3d08      	subs	r5, #8
 801b5c0:	3b01      	subs	r3, #1
 801b5c2:	9305      	str	r3, [sp, #20]
 801b5c4:	e7c4      	b.n	801b550 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x74>
 801b5c6:	4461      	add	r1, ip
 801b5c8:	b209      	sxth	r1, r1
 801b5ca:	4571      	cmp	r1, lr
 801b5cc:	dc3a      	bgt.n	801b644 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 801b5ce:	eba2 020c 	sub.w	r2, r2, ip
 801b5d2:	b212      	sxth	r2, r2
 801b5d4:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 801b5d8:	2a00      	cmp	r2, #0
 801b5da:	dcee      	bgt.n	801b5ba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 801b5dc:	b00f      	add	sp, #60	; 0x3c
 801b5de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b5e2:	45c1      	cmp	r9, r8
 801b5e4:	db2e      	blt.n	801b644 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 801b5e6:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 801b5ea:	4499      	add	r9, r3
 801b5ec:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 801b5f0:	4498      	add	r8, r3
 801b5f2:	fa0f f989 	sxth.w	r9, r9
 801b5f6:	fa0f f888 	sxth.w	r8, r8
 801b5fa:	45c1      	cmp	r9, r8
 801b5fc:	dc22      	bgt.n	801b644 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 801b5fe:	fa1f f28c 	uxth.w	r2, ip
 801b602:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 801b606:	45e6      	cmp	lr, ip
 801b608:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801b60c:	4413      	add	r3, r2
 801b60e:	fa1f f88e 	uxth.w	r8, lr
 801b612:	b29b      	uxth	r3, r3
 801b614:	fa0f f983 	sxth.w	r9, r3
 801b618:	db0a      	blt.n	801b630 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x154>
 801b61a:	eba3 0308 	sub.w	r3, r3, r8
 801b61e:	1ac9      	subs	r1, r1, r3
 801b620:	b209      	sxth	r1, r1
 801b622:	2900      	cmp	r1, #0
 801b624:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 801b628:	ddd8      	ble.n	801b5dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801b62a:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
 801b62e:	e7c4      	b.n	801b5ba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 801b630:	4441      	add	r1, r8
 801b632:	b209      	sxth	r1, r1
 801b634:	4549      	cmp	r1, r9
 801b636:	dc05      	bgt.n	801b644 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 801b638:	eba2 0208 	sub.w	r2, r2, r8
 801b63c:	b212      	sxth	r2, r2
 801b63e:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 801b642:	e7c9      	b.n	801b5d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 801b644:	4606      	mov	r6, r0
 801b646:	e7b9      	b.n	801b5bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 801b648:	2c00      	cmp	r4, #0
 801b64a:	f47f af7d 	bne.w	801b548 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c>
 801b64e:	2e00      	cmp	r6, #0
 801b650:	f000 81e1 	beq.w	801ba16 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53a>
 801b654:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	; 0x2a
 801b658:	4655      	mov	r5, sl
 801b65a:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
 801b65e:	b2b9      	uxth	r1, r7
 801b660:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801b664:	b2b3      	uxth	r3, r6
 801b666:	9105      	str	r1, [sp, #20]
 801b668:	9805      	ldr	r0, [sp, #20]
 801b66a:	441a      	add	r2, r3
 801b66c:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 801b670:	b292      	uxth	r2, r2
 801b672:	4401      	add	r1, r0
 801b674:	fa0f f882 	sxth.w	r8, r2
 801b678:	b289      	uxth	r1, r1
 801b67a:	9106      	str	r1, [sp, #24]
 801b67c:	f9bd 9018 	ldrsh.w	r9, [sp, #24]
 801b680:	e9cd 2307 	strd	r2, r3, [sp, #28]
 801b684:	9b04      	ldr	r3, [sp, #16]
 801b686:	2b00      	cmp	r3, #0
 801b688:	d058      	beq.n	801b73c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x260>
 801b68a:	9903      	ldr	r1, [sp, #12]
 801b68c:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 801b690:	f7ff fdcd 	bl	801b22e <_ZNK8touchgfx4Rect9intersectERKS0_>
 801b694:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801b698:	b1d8      	cbz	r0, 801b6d2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 801b69a:	f9b5 e0a0 	ldrsh.w	lr, [r5, #160]	; 0xa0
 801b69e:	f9b5 10a2 	ldrsh.w	r1, [r5, #162]	; 0xa2
 801b6a2:	4576      	cmp	r6, lr
 801b6a4:	dc26      	bgt.n	801b6f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x218>
 801b6a6:	f8b5 c0a4 	ldrh.w	ip, [r5, #164]	; 0xa4
 801b6aa:	44f4      	add	ip, lr
 801b6ac:	fa0f fc8c 	sxth.w	ip, ip
 801b6b0:	45e0      	cmp	r8, ip
 801b6b2:	db1f      	blt.n	801b6f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x218>
 801b6b4:	428f      	cmp	r7, r1
 801b6b6:	fa1f fc81 	uxth.w	ip, r1
 801b6ba:	f8b5 10a6 	ldrh.w	r1, [r5, #166]	; 0xa6
 801b6be:	dc0f      	bgt.n	801b6e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x204>
 801b6c0:	9806      	ldr	r0, [sp, #24]
 801b6c2:	f8a5 90a2 	strh.w	r9, [r5, #162]	; 0xa2
 801b6c6:	eba0 0c0c 	sub.w	ip, r0, ip
 801b6ca:	eba1 010c 	sub.w	r1, r1, ip
 801b6ce:	f8a5 10a6 	strh.w	r1, [r5, #166]	; 0xa6
 801b6d2:	4620      	mov	r0, r4
 801b6d4:	9904      	ldr	r1, [sp, #16]
 801b6d6:	3d08      	subs	r5, #8
 801b6d8:	4604      	mov	r4, r0
 801b6da:	3901      	subs	r1, #1
 801b6dc:	9104      	str	r1, [sp, #16]
 801b6de:	e7cf      	b.n	801b680 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a4>
 801b6e0:	4461      	add	r1, ip
 801b6e2:	b209      	sxth	r1, r1
 801b6e4:	4549      	cmp	r1, r9
 801b6e6:	dcf5      	bgt.n	801b6d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 801b6e8:	9905      	ldr	r1, [sp, #20]
 801b6ea:	eba1 0c0c 	sub.w	ip, r1, ip
 801b6ee:	f8a5 c0a6 	strh.w	ip, [r5, #166]	; 0xa6
 801b6f2:	e7ee      	b.n	801b6d2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 801b6f4:	428f      	cmp	r7, r1
 801b6f6:	dced      	bgt.n	801b6d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 801b6f8:	f8b5 c0a6 	ldrh.w	ip, [r5, #166]	; 0xa6
 801b6fc:	4461      	add	r1, ip
 801b6fe:	b209      	sxth	r1, r1
 801b700:	4589      	cmp	r9, r1
 801b702:	dbe7      	blt.n	801b6d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 801b704:	4576      	cmp	r6, lr
 801b706:	fa1f fc8e 	uxth.w	ip, lr
 801b70a:	f8b5 10a4 	ldrh.w	r1, [r5, #164]	; 0xa4
 801b70e:	dc08      	bgt.n	801b722 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x246>
 801b710:	eba2 0c0c 	sub.w	ip, r2, ip
 801b714:	f8a5 80a0 	strh.w	r8, [r5, #160]	; 0xa0
 801b718:	eba1 010c 	sub.w	r1, r1, ip
 801b71c:	f8a5 10a4 	strh.w	r1, [r5, #164]	; 0xa4
 801b720:	e7d7      	b.n	801b6d2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 801b722:	4461      	add	r1, ip
 801b724:	b209      	sxth	r1, r1
 801b726:	4588      	cmp	r8, r1
 801b728:	dbd4      	blt.n	801b6d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 801b72a:	eba3 0c0c 	sub.w	ip, r3, ip
 801b72e:	f8a5 c0a4 	strh.w	ip, [r5, #164]	; 0xa4
 801b732:	e7ce      	b.n	801b6d2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 801b734:	200177ba 	.word	0x200177ba
 801b738:	200177b8 	.word	0x200177b8
 801b73c:	2c00      	cmp	r4, #0
 801b73e:	f000 816a 	beq.w	801ba16 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53a>
 801b742:	9b02      	ldr	r3, [sp, #8]
 801b744:	3301      	adds	r3, #1
 801b746:	f000 8166 	beq.w	801ba16 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53a>
 801b74a:	f10a 04a0 	add.w	r4, sl, #160	; 0xa0
 801b74e:	9803      	ldr	r0, [sp, #12]
 801b750:	4621      	mov	r1, r4
 801b752:	f7ff fddf 	bl	801b314 <_ZNK8touchgfx4Rect8includesERKS0_>
 801b756:	b120      	cbz	r0, 801b762 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x286>
 801b758:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801b75c:	9801      	ldr	r0, [sp, #4]
 801b75e:	f7ff fea9 	bl	801b4b4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801b762:	9903      	ldr	r1, [sp, #12]
 801b764:	4620      	mov	r0, r4
 801b766:	f7ff fd62 	bl	801b22e <_ZNK8touchgfx4Rect9intersectERKS0_>
 801b76a:	2800      	cmp	r0, #0
 801b76c:	f000 809b 	beq.w	801b8a6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ca>
 801b770:	f9ba 00a0 	ldrsh.w	r0, [sl, #160]	; 0xa0
 801b774:	f9ba 30a4 	ldrsh.w	r3, [sl, #164]	; 0xa4
 801b778:	b281      	uxth	r1, r0
 801b77a:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 801b77e:	9309      	str	r3, [sp, #36]	; 0x24
 801b780:	eb01 0c03 	add.w	ip, r1, r3
 801b784:	b2ab      	uxth	r3, r5
 801b786:	4285      	cmp	r5, r0
 801b788:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	; 0x2a
 801b78c:	fa1f f98c 	uxth.w	r9, ip
 801b790:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 801b794:	f9ba 20a2 	ldrsh.w	r2, [sl, #162]	; 0xa2
 801b798:	eb03 040c 	add.w	r4, r3, ip
 801b79c:	b2a4      	uxth	r4, r4
 801b79e:	9405      	str	r4, [sp, #20]
 801b7a0:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 801b7a4:	9404      	str	r4, [sp, #16]
 801b7a6:	f8bb 40e8 	ldrh.w	r4, [fp, #232]	; 0xe8
 801b7aa:	f340 809a 	ble.w	801b8e2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x406>
 801b7ae:	1a5b      	subs	r3, r3, r1
 801b7b0:	4596      	cmp	lr, r2
 801b7b2:	fa0f f589 	sxth.w	r5, r9
 801b7b6:	b29b      	uxth	r3, r3
 801b7b8:	b21e      	sxth	r6, r3
 801b7ba:	dd2e      	ble.n	801b81a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x33e>
 801b7bc:	9f02      	ldr	r7, [sp, #8]
 801b7be:	fa1f fe8e 	uxth.w	lr, lr
 801b7c2:	b292      	uxth	r2, r2
 801b7c4:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 801b7c8:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 801b7cc:	9f04      	ldr	r7, [sp, #16]
 801b7ce:	ebae 0102 	sub.w	r1, lr, r2
 801b7d2:	4486      	add	lr, r0
 801b7d4:	1b7f      	subs	r7, r7, r5
 801b7d6:	f8b8 50ae 	ldrh.w	r5, [r8, #174]	; 0xae
 801b7da:	b289      	uxth	r1, r1
 801b7dc:	442a      	add	r2, r5
 801b7de:	fa0f fe8e 	sxth.w	lr, lr
 801b7e2:	b20c      	sxth	r4, r1
 801b7e4:	b212      	sxth	r2, r2
 801b7e6:	4367      	muls	r7, r4
 801b7e8:	ebae 0202 	sub.w	r2, lr, r2
 801b7ec:	4372      	muls	r2, r6
 801b7ee:	4297      	cmp	r7, r2
 801b7f0:	db09      	blt.n	801b806 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x32a>
 801b7f2:	f8b8 20a8 	ldrh.w	r2, [r8, #168]	; 0xa8
 801b7f6:	f8a8 40ae 	strh.w	r4, [r8, #174]	; 0xae
 801b7fa:	449c      	add	ip, r3
 801b7fc:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801b800:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 801b804:	e680      	b.n	801b508 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801b806:	4401      	add	r1, r0
 801b808:	f8b8 30aa 	ldrh.w	r3, [r8, #170]	; 0xaa
 801b80c:	f8a8 60ac 	strh.w	r6, [r8, #172]	; 0xac
 801b810:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801b814:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801b818:	e676      	b.n	801b508 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801b81a:	9f04      	ldr	r7, [sp, #16]
 801b81c:	42bd      	cmp	r5, r7
 801b81e:	da27      	bge.n	801b870 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x394>
 801b820:	9902      	ldr	r1, [sp, #8]
 801b822:	1b7f      	subs	r7, r7, r5
 801b824:	f8bd 402e 	ldrh.w	r4, [sp, #46]	; 0x2e
 801b828:	eb0b 00c1 	add.w	r0, fp, r1, lsl #3
 801b82c:	eb04 010e 	add.w	r1, r4, lr
 801b830:	fa1f f881 	uxth.w	r8, r1
 801b834:	f8b0 10ae 	ldrh.w	r1, [r0, #174]	; 0xae
 801b838:	4411      	add	r1, r2
 801b83a:	fa0f f988 	sxth.w	r9, r8
 801b83e:	eba2 020e 	sub.w	r2, r2, lr
 801b842:	eba1 0108 	sub.w	r1, r1, r8
 801b846:	4372      	muls	r2, r6
 801b848:	b289      	uxth	r1, r1
 801b84a:	fa0f f881 	sxth.w	r8, r1
 801b84e:	fb08 f707 	mul.w	r7, r8, r7
 801b852:	42ba      	cmp	r2, r7
 801b854:	dc06      	bgt.n	801b864 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 801b856:	f8a0 90aa 	strh.w	r9, [r0, #170]	; 0xaa
 801b85a:	f8a0 80ae 	strh.w	r8, [r0, #174]	; 0xae
 801b85e:	f8b0 20a8 	ldrh.w	r2, [r0, #168]	; 0xa8
 801b862:	e7ca      	b.n	801b7fa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 801b864:	4421      	add	r1, r4
 801b866:	f8a0 60ac 	strh.w	r6, [r0, #172]	; 0xac
 801b86a:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801b86e:	e64b      	b.n	801b508 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801b870:	9d05      	ldr	r5, [sp, #20]
 801b872:	2c06      	cmp	r4, #6
 801b874:	eba9 0505 	sub.w	r5, r9, r5
 801b878:	b2ad      	uxth	r5, r5
 801b87a:	fa0f fe85 	sxth.w	lr, r5
 801b87e:	d818      	bhi.n	801b8b2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3d6>
 801b880:	9b04      	ldr	r3, [sp, #16]
 801b882:	f9ba 10a6 	ldrsh.w	r1, [sl, #166]	; 0xa6
 801b886:	f8aa 30a0 	strh.w	r3, [sl, #160]	; 0xa0
 801b88a:	1c63      	adds	r3, r4, #1
 801b88c:	f8aa e0a4 	strh.w	lr, [sl, #164]	; 0xa4
 801b890:	f8ab 30e8 	strh.w	r3, [fp, #232]	; 0xe8
 801b894:	9b01      	ldr	r3, [sp, #4]
 801b896:	9d01      	ldr	r5, [sp, #4]
 801b898:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801b89c:	f825 0034 	strh.w	r0, [r5, r4, lsl #3]
 801b8a0:	805a      	strh	r2, [r3, #2]
 801b8a2:	809e      	strh	r6, [r3, #4]
 801b8a4:	80d9      	strh	r1, [r3, #6]
 801b8a6:	9b02      	ldr	r3, [sp, #8]
 801b8a8:	f1aa 0a08 	sub.w	sl, sl, #8
 801b8ac:	3b01      	subs	r3, #1
 801b8ae:	9302      	str	r3, [sp, #8]
 801b8b0:	e747      	b.n	801b742 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x266>
 801b8b2:	9a02      	ldr	r2, [sp, #8]
 801b8b4:	45b6      	cmp	lr, r6
 801b8b6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801b8ba:	db0d      	blt.n	801b8d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3fc>
 801b8bc:	449c      	add	ip, r3
 801b8be:	445a      	add	r2, fp
 801b8c0:	f8ad 0028 	strh.w	r0, [sp, #40]	; 0x28
 801b8c4:	fa1f fc8c 	uxth.w	ip, ip
 801b8c8:	f8a2 e0ac 	strh.w	lr, [r2, #172]	; 0xac
 801b8cc:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 801b8d0:	448c      	add	ip, r1
 801b8d2:	f8a2 c0a8 	strh.w	ip, [r2, #168]	; 0xa8
 801b8d6:	e617      	b.n	801b508 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801b8d8:	445a      	add	r2, fp
 801b8da:	44ac      	add	ip, r5
 801b8dc:	f8a2 60ac 	strh.w	r6, [r2, #172]	; 0xac
 801b8e0:	e78e      	b.n	801b800 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x324>
 801b8e2:	fa1f f18e 	uxth.w	r1, lr
 801b8e6:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
 801b8ea:	b293      	uxth	r3, r2
 801b8ec:	4596      	cmp	lr, r2
 801b8ee:	eb01 0806 	add.w	r8, r1, r6
 801b8f2:	9306      	str	r3, [sp, #24]
 801b8f4:	fa1f f888 	uxth.w	r8, r8
 801b8f8:	9f06      	ldr	r7, [sp, #24]
 801b8fa:	fa0f f388 	sxth.w	r3, r8
 801b8fe:	9307      	str	r3, [sp, #28]
 801b900:	f8ba 30a6 	ldrh.w	r3, [sl, #166]	; 0xa6
 801b904:	443b      	add	r3, r7
 801b906:	b29b      	uxth	r3, r3
 801b908:	9308      	str	r3, [sp, #32]
 801b90a:	da25      	bge.n	801b958 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x47c>
 801b90c:	9905      	ldr	r1, [sp, #20]
 801b90e:	eba3 0308 	sub.w	r3, r3, r8
 801b912:	eba2 020e 	sub.w	r2, r2, lr
 801b916:	1b40      	subs	r0, r0, r5
 801b918:	eba9 0401 	sub.w	r4, r9, r1
 801b91c:	b29b      	uxth	r3, r3
 801b91e:	b2a4      	uxth	r4, r4
 801b920:	b219      	sxth	r1, r3
 801b922:	fa0f f984 	sxth.w	r9, r4
 801b926:	4348      	muls	r0, r1
 801b928:	fb09 f202 	mul.w	r2, r9, r2
 801b92c:	4282      	cmp	r2, r0
 801b92e:	9a02      	ldr	r2, [sp, #8]
 801b930:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801b934:	445a      	add	r2, fp
 801b936:	dc06      	bgt.n	801b946 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46a>
 801b938:	9b07      	ldr	r3, [sp, #28]
 801b93a:	44a4      	add	ip, r4
 801b93c:	f8a2 10ae 	strh.w	r1, [r2, #174]	; 0xae
 801b940:	f8a2 30aa 	strh.w	r3, [r2, #170]	; 0xaa
 801b944:	e75c      	b.n	801b800 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x324>
 801b946:	9904      	ldr	r1, [sp, #16]
 801b948:	f8a2 90ac 	strh.w	r9, [r2, #172]	; 0xac
 801b94c:	f8a2 10a8 	strh.w	r1, [r2, #168]	; 0xa8
 801b950:	4433      	add	r3, r6
 801b952:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801b956:	e5d7      	b.n	801b508 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801b958:	9f06      	ldr	r7, [sp, #24]
 801b95a:	9b04      	ldr	r3, [sp, #16]
 801b95c:	1bc9      	subs	r1, r1, r7
 801b95e:	fa0f f789 	sxth.w	r7, r9
 801b962:	b289      	uxth	r1, r1
 801b964:	429f      	cmp	r7, r3
 801b966:	fa0f fe81 	sxth.w	lr, r1
 801b96a:	dd22      	ble.n	801b9b2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4d6>
 801b96c:	9a05      	ldr	r2, [sp, #20]
 801b96e:	1b40      	subs	r0, r0, r5
 801b970:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801b974:	eba9 0202 	sub.w	r2, r9, r2
 801b978:	9d07      	ldr	r5, [sp, #28]
 801b97a:	fb0e f000 	mul.w	r0, lr, r0
 801b97e:	b292      	uxth	r2, r2
 801b980:	eba5 0a03 	sub.w	sl, r5, r3
 801b984:	9b02      	ldr	r3, [sp, #8]
 801b986:	b214      	sxth	r4, r2
 801b988:	00db      	lsls	r3, r3, #3
 801b98a:	fb04 fa0a 	mul.w	sl, r4, sl
 801b98e:	445b      	add	r3, fp
 801b990:	4550      	cmp	r0, sl
 801b992:	db03      	blt.n	801b99c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c0>
 801b994:	f8a3 e0ae 	strh.w	lr, [r3, #174]	; 0xae
 801b998:	4494      	add	ip, r2
 801b99a:	e731      	b.n	801b800 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x324>
 801b99c:	9a04      	ldr	r2, [sp, #16]
 801b99e:	4431      	add	r1, r6
 801b9a0:	f8a3 40ac 	strh.w	r4, [r3, #172]	; 0xac
 801b9a4:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 801b9a8:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 801b9ac:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801b9b0:	e75b      	b.n	801b86a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38e>
 801b9b2:	9b08      	ldr	r3, [sp, #32]
 801b9b4:	2c06      	cmp	r4, #6
 801b9b6:	eba3 0308 	sub.w	r3, r3, r8
 801b9ba:	b29b      	uxth	r3, r3
 801b9bc:	b21d      	sxth	r5, r3
 801b9be:	d813      	bhi.n	801b9e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x50c>
 801b9c0:	9b07      	ldr	r3, [sp, #28]
 801b9c2:	f8aa 50a6 	strh.w	r5, [sl, #166]	; 0xa6
 801b9c6:	f8aa 30a2 	strh.w	r3, [sl, #162]	; 0xa2
 801b9ca:	1c63      	adds	r3, r4, #1
 801b9cc:	9901      	ldr	r1, [sp, #4]
 801b9ce:	f8ab 30e8 	strh.w	r3, [fp, #232]	; 0xe8
 801b9d2:	9b01      	ldr	r3, [sp, #4]
 801b9d4:	f821 0034 	strh.w	r0, [r1, r4, lsl #3]
 801b9d8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801b9dc:	805a      	strh	r2, [r3, #2]
 801b9de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b9e0:	f8a3 e006 	strh.w	lr, [r3, #6]
 801b9e4:	809a      	strh	r2, [r3, #4]
 801b9e6:	e75e      	b.n	801b8a6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ca>
 801b9e8:	9802      	ldr	r0, [sp, #8]
 801b9ea:	4575      	cmp	r5, lr
 801b9ec:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 801b9f0:	db0d      	blt.n	801ba0e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x532>
 801b9f2:	4431      	add	r1, r6
 801b9f4:	9b06      	ldr	r3, [sp, #24]
 801b9f6:	4458      	add	r0, fp
 801b9f8:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 801b9fc:	b289      	uxth	r1, r1
 801b9fe:	f8a0 50ae 	strh.w	r5, [r0, #174]	; 0xae
 801ba02:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801ba06:	4419      	add	r1, r3
 801ba08:	f8a0 10aa 	strh.w	r1, [r0, #170]	; 0xaa
 801ba0c:	e57c      	b.n	801b508 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801ba0e:	4458      	add	r0, fp
 801ba10:	f8a0 e0ae 	strh.w	lr, [r0, #174]	; 0xae
 801ba14:	e79c      	b.n	801b950 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x474>
 801ba16:	f8bb 60e8 	ldrh.w	r6, [fp, #232]	; 0xe8
 801ba1a:	2e07      	cmp	r6, #7
 801ba1c:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 801ba20:	d812      	bhi.n	801ba48 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56c>
 801ba22:	1c75      	adds	r5, r6, #1
 801ba24:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 801ba28:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 801ba2c:	f8ab 50e8 	strh.w	r5, [fp, #232]	; 0xe8
 801ba30:	9d01      	ldr	r5, [sp, #4]
 801ba32:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 801ba36:	442c      	add	r4, r5
 801ba38:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 801ba3c:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 801ba40:	8061      	strh	r1, [r4, #2]
 801ba42:	80a2      	strh	r2, [r4, #4]
 801ba44:	80e3      	strh	r3, [r4, #6]
 801ba46:	e5c9      	b.n	801b5dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801ba48:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 801ba4c:	3e01      	subs	r6, #1
 801ba4e:	445c      	add	r4, fp
 801ba50:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 801ba54:	f04f 37ff 	mov.w	r7, #4294967295
 801ba58:	2500      	movs	r5, #0
 801ba5a:	9305      	str	r3, [sp, #20]
 801ba5c:	f9b4 30a4 	ldrsh.w	r3, [r4, #164]	; 0xa4
 801ba60:	1e72      	subs	r2, r6, #1
 801ba62:	9302      	str	r3, [sp, #8]
 801ba64:	4691      	mov	r9, r2
 801ba66:	f9b4 30a6 	ldrsh.w	r3, [r4, #166]	; 0xa6
 801ba6a:	9304      	str	r3, [sp, #16]
 801ba6c:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
 801ba70:	f1b9 3fff 	cmp.w	r9, #4294967295
 801ba74:	6818      	ldr	r0, [r3, #0]
 801ba76:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801ba7a:	9207      	str	r2, [sp, #28]
 801ba7c:	bf16      	itet	ne
 801ba7e:	9905      	ldrne	r1, [sp, #20]
 801ba80:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 801ba84:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 801ba88:	9306      	str	r3, [sp, #24]
 801ba8a:	f8be 1006 	ldrh.w	r1, [lr, #6]
 801ba8e:	f8be 8004 	ldrh.w	r8, [lr, #4]
 801ba92:	fb18 f801 	smulbb	r8, r8, r1
 801ba96:	6859      	ldr	r1, [r3, #4]
 801ba98:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801ba9c:	4671      	mov	r1, lr
 801ba9e:	a80c      	add	r0, sp, #48	; 0x30
 801baa0:	f7ff fc5e 	bl	801b360 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801baa4:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 801baa8:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 801baac:	f04f 0c08 	mov.w	ip, #8
 801bab0:	9b04      	ldr	r3, [sp, #16]
 801bab2:	9a02      	ldr	r2, [sp, #8]
 801bab4:	fb10 f001 	smulbb	r0, r0, r1
 801bab8:	fb02 8803 	mla	r8, r2, r3, r8
 801babc:	eba0 0108 	sub.w	r1, r0, r8
 801bac0:	fb90 f0fc 	sdiv	r0, r0, ip
 801bac4:	4288      	cmp	r0, r1
 801bac6:	dc20      	bgt.n	801bb0a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62e>
 801bac8:	4551      	cmp	r1, sl
 801baca:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801bace:	da03      	bge.n	801bad8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fc>
 801bad0:	b1d9      	cbz	r1, 801bb0a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62e>
 801bad2:	468a      	mov	sl, r1
 801bad4:	464f      	mov	r7, r9
 801bad6:	4635      	mov	r5, r6
 801bad8:	f109 39ff 	add.w	r9, r9, #4294967295
 801badc:	f119 0f02 	cmn.w	r9, #2
 801bae0:	d1c6      	bne.n	801ba70 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 801bae2:	4616      	mov	r6, r2
 801bae4:	3201      	adds	r2, #1
 801bae6:	f1a4 0408 	sub.w	r4, r4, #8
 801baea:	d1b7      	bne.n	801ba5c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x580>
 801baec:	9b01      	ldr	r3, [sp, #4]
 801baee:	b2ac      	uxth	r4, r5
 801baf0:	00ed      	lsls	r5, r5, #3
 801baf2:	1958      	adds	r0, r3, r5
 801baf4:	1c7b      	adds	r3, r7, #1
 801baf6:	d10b      	bne.n	801bb10 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x634>
 801baf8:	4601      	mov	r1, r0
 801bafa:	9803      	ldr	r0, [sp, #12]
 801bafc:	f7ff fc30 	bl	801b360 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801bb00:	4621      	mov	r1, r4
 801bb02:	9801      	ldr	r0, [sp, #4]
 801bb04:	f7ff fcd6 	bl	801b4b4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801bb08:	e4fe      	b.n	801b508 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801bb0a:	464f      	mov	r7, r9
 801bb0c:	4635      	mov	r5, r6
 801bb0e:	e7ed      	b.n	801baec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x610>
 801bb10:	9b01      	ldr	r3, [sp, #4]
 801bb12:	00ff      	lsls	r7, r7, #3
 801bb14:	445d      	add	r5, fp
 801bb16:	19d9      	adds	r1, r3, r7
 801bb18:	445f      	add	r7, fp
 801bb1a:	f7ff fc21 	bl	801b360 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801bb1e:	9b03      	ldr	r3, [sp, #12]
 801bb20:	cb03      	ldmia	r3!, {r0, r1}
 801bb22:	9b03      	ldr	r3, [sp, #12]
 801bb24:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
 801bb28:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
 801bb2c:	f855 0fa8 	ldr.w	r0, [r5, #168]!
 801bb30:	6869      	ldr	r1, [r5, #4]
 801bb32:	c303      	stmia	r3!, {r0, r1}
 801bb34:	e7e4      	b.n	801bb00 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x624>
 801bb36:	bf00      	nop

0801bb38 <_ZN8touchgfx11Application10invalidateEv>:
 801bb38:	4b09      	ldr	r3, [pc, #36]	; (801bb60 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 801bb3a:	b082      	sub	sp, #8
 801bb3c:	2100      	movs	r1, #0
 801bb3e:	f9b3 2000 	ldrsh.w	r2, [r3]
 801bb42:	4b08      	ldr	r3, [pc, #32]	; (801bb64 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 801bb44:	9100      	str	r1, [sp, #0]
 801bb46:	f9b3 3000 	ldrsh.w	r3, [r3]
 801bb4a:	f8ad 2004 	strh.w	r2, [sp, #4]
 801bb4e:	f8ad 3006 	strh.w	r3, [sp, #6]
 801bb52:	ab02      	add	r3, sp, #8
 801bb54:	e913 0006 	ldmdb	r3, {r1, r2}
 801bb58:	b002      	add	sp, #8
 801bb5a:	f7ff bcbf 	b.w	801b4dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801bb5e:	bf00      	nop
 801bb60:	200177b8 	.word	0x200177b8
 801bb64:	200177ba 	.word	0x200177ba

0801bb68 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 801bb68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bb6c:	f500 7696 	add.w	r6, r0, #300	; 0x12c
 801bb70:	b09b      	sub	sp, #108	; 0x6c
 801bb72:	4604      	mov	r4, r0
 801bb74:	4630      	mov	r0, r6
 801bb76:	f7fb fd50 	bl	801761a <_ZNK8touchgfx4Rect7isEmptyEv>
 801bb7a:	4605      	mov	r5, r0
 801bb7c:	b940      	cbnz	r0, 801bb90 <_ZN8touchgfx11Application15drawCachedAreasEv+0x28>
 801bb7e:	4620      	mov	r0, r4
 801bb80:	e896 0006 	ldmia.w	r6, {r1, r2}
 801bb84:	f7ff fcaa 	bl	801b4dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801bb88:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 801bb8c:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 801bb90:	4bc8      	ldr	r3, [pc, #800]	; (801beb4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 801bb92:	681b      	ldr	r3, [r3, #0]
 801bb94:	2b00      	cmp	r3, #0
 801bb96:	d03e      	beq.n	801bc16 <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 801bb98:	4dc7      	ldr	r5, [pc, #796]	; (801beb8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 801bb9a:	4628      	mov	r0, r5
 801bb9c:	f7fb fd3d 	bl	801761a <_ZNK8touchgfx4Rect7isEmptyEv>
 801bba0:	4606      	mov	r6, r0
 801bba2:	2800      	cmp	r0, #0
 801bba4:	d137      	bne.n	801bc16 <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 801bba6:	4628      	mov	r0, r5
 801bba8:	f7ff f9e6 	bl	801af78 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801bbac:	6829      	ldr	r1, [r5, #0]
 801bbae:	686a      	ldr	r2, [r5, #4]
 801bbb0:	4620      	mov	r0, r4
 801bbb2:	f7ff fc93 	bl	801b4dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801bbb6:	802e      	strh	r6, [r5, #0]
 801bbb8:	806e      	strh	r6, [r5, #2]
 801bbba:	80ae      	strh	r6, [r5, #4]
 801bbbc:	80ee      	strh	r6, [r5, #6]
 801bbbe:	ae09      	add	r6, sp, #36	; 0x24
 801bbc0:	4630      	mov	r0, r6
 801bbc2:	f7ff fc24 	bl	801b40e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801bbc6:	4abd      	ldr	r2, [pc, #756]	; (801bebc <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 801bbc8:	f8b4 70e8 	ldrh.w	r7, [r4, #232]	; 0xe8
 801bbcc:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
 801bbd0:	8815      	ldrh	r5, [r2, #0]
 801bbd2:	9202      	str	r2, [sp, #8]
 801bbd4:	462b      	mov	r3, r5
 801bbd6:	429f      	cmp	r7, r3
 801bbd8:	d924      	bls.n	801bc24 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbc>
 801bbda:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 801bbde:	2907      	cmp	r1, #7
 801bbe0:	d816      	bhi.n	801bc10 <_ZN8touchgfx11Application15drawCachedAreasEv+0xa8>
 801bbe2:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 801bbe6:	f930 8033 	ldrsh.w	r8, [r0, r3, lsl #3]
 801bbea:	f9b2 9002 	ldrsh.w	r9, [r2, #2]
 801bbee:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 801bbf2:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 801bbf6:	1c4a      	adds	r2, r1, #1
 801bbf8:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
 801bbfc:	eb06 02c1 	add.w	r2, r6, r1, lsl #3
 801bc00:	f826 8031 	strh.w	r8, [r6, r1, lsl #3]
 801bc04:	f8a2 9002 	strh.w	r9, [r2, #2]
 801bc08:	f8a2 e004 	strh.w	lr, [r2, #4]
 801bc0c:	f8a2 c006 	strh.w	ip, [r2, #6]
 801bc10:	3301      	adds	r3, #1
 801bc12:	b29b      	uxth	r3, r3
 801bc14:	e7df      	b.n	801bbd6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x6e>
 801bc16:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801bc1a:	2b00      	cmp	r3, #0
 801bc1c:	d1cf      	bne.n	801bbbe <_ZN8touchgfx11Application15drawCachedAreasEv+0x56>
 801bc1e:	b01b      	add	sp, #108	; 0x6c
 801bc20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bc24:	462f      	mov	r7, r5
 801bc26:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 801bc2a:	42bb      	cmp	r3, r7
 801bc2c:	d90b      	bls.n	801bc46 <_ZN8touchgfx11Application15drawCachedAreasEv+0xde>
 801bc2e:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
 801bc32:	3701      	adds	r7, #1
 801bc34:	4620      	mov	r0, r4
 801bc36:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 801bc3a:	b2bf      	uxth	r7, r7
 801bc3c:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 801bc40:	f7ff fc4c 	bl	801b4dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801bc44:	e7ef      	b.n	801bc26 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbe>
 801bc46:	4a9e      	ldr	r2, [pc, #632]	; (801bec0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 801bc48:	6813      	ldr	r3, [r2, #0]
 801bc4a:	4690      	mov	r8, r2
 801bc4c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801bc50:	2b01      	cmp	r3, #1
 801bc52:	f040 80e4 	bne.w	801be1e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b6>
 801bc56:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 801bc5a:	4629      	mov	r1, r5
 801bc5c:	f8b4 70e8 	ldrh.w	r7, [r4, #232]	; 0xe8
 801bc60:	2500      	movs	r5, #0
 801bc62:	33aa      	adds	r3, #170	; 0xaa
 801bc64:	428f      	cmp	r7, r1
 801bc66:	f103 0308 	add.w	r3, r3, #8
 801bc6a:	dd0a      	ble.n	801bc82 <_ZN8touchgfx11Application15drawCachedAreasEv+0x11a>
 801bc6c:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 801bc70:	3101      	adds	r1, #1
 801bc72:	f833 0c04 	ldrh.w	r0, [r3, #-4]
 801bc76:	4402      	add	r2, r0
 801bc78:	b212      	sxth	r2, r2
 801bc7a:	4295      	cmp	r5, r2
 801bc7c:	bfb8      	it	lt
 801bc7e:	4615      	movlt	r5, r2
 801bc80:	e7f0      	b.n	801bc64 <_ZN8touchgfx11Application15drawCachedAreasEv+0xfc>
 801bc82:	4b90      	ldr	r3, [pc, #576]	; (801bec4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 801bc84:	f8df b238 	ldr.w	fp, [pc, #568]	; 801bec0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>
 801bc88:	881b      	ldrh	r3, [r3, #0]
 801bc8a:	46d8      	mov	r8, fp
 801bc8c:	2b0f      	cmp	r3, #15
 801bc8e:	bf8c      	ite	hi
 801bc90:	ea4f 0ad3 	movhi.w	sl, r3, lsr #3
 801bc94:	f04f 0a01 	movls.w	sl, #1
 801bc98:	2300      	movs	r3, #0
 801bc9a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801bc9e:	f8bd 701a 	ldrh.w	r7, [sp, #26]
 801bca2:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 801bca6:	4438      	add	r0, r7
 801bca8:	b207      	sxth	r7, r0
 801bcaa:	f8db 0000 	ldr.w	r0, [fp]
 801bcae:	42bd      	cmp	r5, r7
 801bcb0:	6803      	ldr	r3, [r0, #0]
 801bcb2:	f340 8084 	ble.w	801bdbe <_ZN8touchgfx11Application15drawCachedAreasEv+0x256>
 801bcb6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801bcba:	4798      	blx	r3
 801bcbc:	eb07 030a 	add.w	r3, r7, sl
 801bcc0:	4298      	cmp	r0, r3
 801bcc2:	da07      	bge.n	801bcd4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 801bcc4:	4285      	cmp	r5, r0
 801bcc6:	dd05      	ble.n	801bcd4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 801bcc8:	4287      	cmp	r7, r0
 801bcca:	dd6d      	ble.n	801bda8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 801bccc:	2f00      	cmp	r7, #0
 801bcce:	dd6b      	ble.n	801bda8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 801bcd0:	4628      	mov	r0, r5
 801bcd2:	e004      	b.n	801bcde <_ZN8touchgfx11Application15drawCachedAreasEv+0x176>
 801bcd4:	4287      	cmp	r7, r0
 801bcd6:	dcfb      	bgt.n	801bcd0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x168>
 801bcd8:	42a8      	cmp	r0, r5
 801bcda:	bfa8      	it	ge
 801bcdc:	4628      	movge	r0, r5
 801bcde:	4b7a      	ldr	r3, [pc, #488]	; (801bec8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>)
 801bce0:	1bc0      	subs	r0, r0, r7
 801bce2:	2200      	movs	r2, #0
 801bce4:	f8ad 7016 	strh.w	r7, [sp, #22]
 801bce8:	f9b3 3000 	ldrsh.w	r3, [r3]
 801bcec:	f8ad 2014 	strh.w	r2, [sp, #20]
 801bcf0:	f8ad 3018 	strh.w	r3, [sp, #24]
 801bcf4:	9b02      	ldr	r3, [sp, #8]
 801bcf6:	f8ad 001a 	strh.w	r0, [sp, #26]
 801bcfa:	881f      	ldrh	r7, [r3, #0]
 801bcfc:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801bd00:	42bb      	cmp	r3, r7
 801bd02:	d9cc      	bls.n	801bc9e <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
 801bd04:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 801bd08:	ab07      	add	r3, sp, #28
 801bd0a:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801bd0e:	6851      	ldr	r1, [r2, #4]
 801bd10:	c303      	stmia	r3!, {r0, r1}
 801bd12:	a905      	add	r1, sp, #20
 801bd14:	a807      	add	r0, sp, #28
 801bd16:	f7ff fa8a 	bl	801b22e <_ZNK8touchgfx4Rect9intersectERKS0_>
 801bd1a:	2800      	cmp	r0, #0
 801bd1c:	d04c      	beq.n	801bdb8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x250>
 801bd1e:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 801bd22:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 801bd26:	f8bd 9020 	ldrh.w	r9, [sp, #32]
 801bd2a:	4686      	mov	lr, r0
 801bd2c:	4290      	cmp	r0, r2
 801bd2e:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 801bd32:	4448      	add	r0, r9
 801bd34:	f8bd 9018 	ldrh.w	r9, [sp, #24]
 801bd38:	bfb8      	it	lt
 801bd3a:	4696      	movlt	lr, r2
 801bd3c:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801bd40:	444a      	add	r2, r9
 801bd42:	b280      	uxth	r0, r0
 801bd44:	4299      	cmp	r1, r3
 801bd46:	468c      	mov	ip, r1
 801bd48:	b292      	uxth	r2, r2
 801bd4a:	9303      	str	r3, [sp, #12]
 801bd4c:	bfb8      	it	lt
 801bd4e:	469c      	movlt	ip, r3
 801bd50:	b203      	sxth	r3, r0
 801bd52:	fa0f f982 	sxth.w	r9, r2
 801bd56:	f8ad e01c 	strh.w	lr, [sp, #28]
 801bd5a:	f8ad c01e 	strh.w	ip, [sp, #30]
 801bd5e:	454b      	cmp	r3, r9
 801bd60:	bfb8      	it	lt
 801bd62:	4602      	movlt	r2, r0
 801bd64:	9b03      	ldr	r3, [sp, #12]
 801bd66:	eba2 020e 	sub.w	r2, r2, lr
 801bd6a:	f8ad 2020 	strh.w	r2, [sp, #32]
 801bd6e:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801bd72:	4411      	add	r1, r2
 801bd74:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801bd78:	4413      	add	r3, r2
 801bd7a:	b289      	uxth	r1, r1
 801bd7c:	b29b      	uxth	r3, r3
 801bd7e:	b208      	sxth	r0, r1
 801bd80:	b21a      	sxth	r2, r3
 801bd82:	4290      	cmp	r0, r2
 801bd84:	bfb8      	it	lt
 801bd86:	460b      	movlt	r3, r1
 801bd88:	eba3 030c 	sub.w	r3, r3, ip
 801bd8c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801bd90:	a807      	add	r0, sp, #28
 801bd92:	f7fb fc42 	bl	801761a <_ZNK8touchgfx4Rect7isEmptyEv>
 801bd96:	b920      	cbnz	r0, 801bda2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x23a>
 801bd98:	6823      	ldr	r3, [r4, #0]
 801bd9a:	a907      	add	r1, sp, #28
 801bd9c:	4620      	mov	r0, r4
 801bd9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bda0:	4798      	blx	r3
 801bda2:	3701      	adds	r7, #1
 801bda4:	b2bf      	uxth	r7, r7
 801bda6:	e7a9      	b.n	801bcfc <_ZN8touchgfx11Application15drawCachedAreasEv+0x194>
 801bda8:	f8d8 0000 	ldr.w	r0, [r8]
 801bdac:	2101      	movs	r1, #1
 801bdae:	6803      	ldr	r3, [r0, #0]
 801bdb0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801bdb4:	4798      	blx	r3
 801bdb6:	e772      	b.n	801bc9e <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
 801bdb8:	e9cd 0007 	strd	r0, r0, [sp, #28]
 801bdbc:	e7e8      	b.n	801bd90 <_ZN8touchgfx11Application15drawCachedAreasEv+0x228>
 801bdbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bdc0:	4798      	blx	r3
 801bdc2:	4b42      	ldr	r3, [pc, #264]	; (801becc <_ZN8touchgfx11Application15drawCachedAreasEv+0x364>)
 801bdc4:	781b      	ldrb	r3, [r3, #0]
 801bdc6:	2b00      	cmp	r3, #0
 801bdc8:	f43f af29 	beq.w	801bc1e <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 801bdcc:	2300      	movs	r3, #0
 801bdce:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 801bdd2:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 801bdd6:	f8a4 312a 	strh.w	r3, [r4, #298]	; 0x12a
 801bdda:	9b02      	ldr	r3, [sp, #8]
 801bddc:	881b      	ldrh	r3, [r3, #0]
 801bdde:	429d      	cmp	r5, r3
 801bde0:	f67f af1d 	bls.w	801bc1e <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 801bde4:	f8b4 112a 	ldrh.w	r1, [r4, #298]	; 0x12a
 801bde8:	2907      	cmp	r1, #7
 801bdea:	d815      	bhi.n	801be18 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b0>
 801bdec:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 801bdf0:	f936 8033 	ldrsh.w	r8, [r6, r3, lsl #3]
 801bdf4:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 801bdf8:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 801bdfc:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
 801be00:	1c4a      	adds	r2, r1, #1
 801be02:	f8a4 212a 	strh.w	r2, [r4, #298]	; 0x12a
 801be06:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 801be0a:	f820 8031 	strh.w	r8, [r0, r1, lsl #3]
 801be0e:	f8a2 e002 	strh.w	lr, [r2, #2]
 801be12:	f8a2 c004 	strh.w	ip, [r2, #4]
 801be16:	80d7      	strh	r7, [r2, #6]
 801be18:	3301      	adds	r3, #1
 801be1a:	b29b      	uxth	r3, r3
 801be1c:	e7df      	b.n	801bdde <_ZN8touchgfx11Application15drawCachedAreasEv+0x276>
 801be1e:	2b02      	cmp	r3, #2
 801be20:	f040 8135 	bne.w	801c08e <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
 801be24:	4b2a      	ldr	r3, [pc, #168]	; (801bed0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x368>)
 801be26:	f104 09a8 	add.w	r9, r4, #168	; 0xa8
 801be2a:	781b      	ldrb	r3, [r3, #0]
 801be2c:	2b01      	cmp	r3, #1
 801be2e:	f000 809c 	beq.w	801bf6a <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 801be32:	9b02      	ldr	r3, [sp, #8]
 801be34:	f8b4 20e8 	ldrh.w	r2, [r4, #232]	; 0xe8
 801be38:	f8b3 b000 	ldrh.w	fp, [r3]
 801be3c:	f10b 0b01 	add.w	fp, fp, #1
 801be40:	fa1f fb8b 	uxth.w	fp, fp
 801be44:	2a00      	cmp	r2, #0
 801be46:	d0bc      	beq.n	801bdc2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801be48:	f8b4 50aa 	ldrh.w	r5, [r4, #170]	; 0xaa
 801be4c:	4659      	mov	r1, fp
 801be4e:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
 801be52:	f04f 0800 	mov.w	r8, #0
 801be56:	441d      	add	r5, r3
 801be58:	b22d      	sxth	r5, r5
 801be5a:	b28b      	uxth	r3, r1
 801be5c:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 801be60:	429a      	cmp	r2, r3
 801be62:	f240 80c0 	bls.w	801bfe6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x47e>
 801be66:	4427      	add	r7, r4
 801be68:	eb04 0ec1 	add.w	lr, r4, r1, lsl #3
 801be6c:	4608      	mov	r0, r1
 801be6e:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	; 0xaa
 801be72:	f9be c0aa 	ldrsh.w	ip, [lr, #170]	; 0xaa
 801be76:	4563      	cmp	r3, ip
 801be78:	f340 80a2 	ble.w	801bfc0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x458>
 801be7c:	f8be 50ae 	ldrh.w	r5, [lr, #174]	; 0xae
 801be80:	4465      	add	r5, ip
 801be82:	b22d      	sxth	r5, r5
 801be84:	429d      	cmp	r5, r3
 801be86:	bfa8      	it	ge
 801be88:	461d      	movge	r5, r3
 801be8a:	3101      	adds	r1, #1
 801be8c:	4680      	mov	r8, r0
 801be8e:	e7e4      	b.n	801be5a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f2>
 801be90:	d10b      	bne.n	801beaa <_ZN8touchgfx11Application15drawCachedAreasEv+0x342>
 801be92:	f9b5 c0ae 	ldrsh.w	ip, [r5, #174]	; 0xae
 801be96:	f9ba 10ae 	ldrsh.w	r1, [sl, #174]	; 0xae
 801be9a:	458c      	cmp	ip, r1
 801be9c:	bfb4      	ite	lt
 801be9e:	469c      	movlt	ip, r3
 801bea0:	46bc      	movge	ip, r7
 801bea2:	4572      	cmp	r2, lr
 801bea4:	bfb8      	it	lt
 801bea6:	4672      	movlt	r2, lr
 801bea8:	e087      	b.n	801bfba <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
 801beaa:	428a      	cmp	r2, r1
 801beac:	46bc      	mov	ip, r7
 801beae:	bfb8      	it	lt
 801beb0:	460a      	movlt	r2, r1
 801beb2:	e082      	b.n	801bfba <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
 801beb4:	20017804 	.word	0x20017804
 801beb8:	20017810 	.word	0x20017810
 801bebc:	20000044 	.word	0x20000044
 801bec0:	200177c4 	.word	0x200177c4
 801bec4:	200177ba 	.word	0x200177ba
 801bec8:	200177b8 	.word	0x200177b8
 801becc:	200177c2 	.word	0x200177c2
 801bed0:	200177bc 	.word	0x200177bc
 801bed4:	1961      	adds	r1, r4, r5
 801bed6:	ab07      	add	r3, sp, #28
 801bed8:	f851 0fa8 	ldr.w	r0, [r1, #168]!
 801bedc:	6849      	ldr	r1, [r1, #4]
 801bede:	c303      	stmia	r3!, {r0, r1}
 801bee0:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801bee4:	a807      	add	r0, sp, #28
 801bee6:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801beea:	2b13      	cmp	r3, #19
 801beec:	440b      	add	r3, r1
 801beee:	bfd8      	it	le
 801bef0:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 801bef4:	1a9b      	subs	r3, r3, r2
 801bef6:	f8ad 201c 	strh.w	r2, [sp, #28]
 801befa:	f8ad 3020 	strh.w	r3, [sp, #32]
 801befe:	f7ff f855 	bl	801afac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801bf02:	a807      	add	r0, sp, #28
 801bf04:	f7fb fb89 	bl	801761a <_ZNK8touchgfx4Rect7isEmptyEv>
 801bf08:	bb78      	cbnz	r0, 801bf6a <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 801bf0a:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801bf0e:	4425      	add	r5, r4
 801bf10:	f8d8 0000 	ldr.w	r0, [r8]
 801bf14:	f1bc 0f14 	cmp.w	ip, #20
 801bf18:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801bf1c:	f8d0 e000 	ldr.w	lr, [r0]
 801bf20:	bfa8      	it	ge
 801bf22:	f04f 0c14 	movge.w	ip, #20
 801bf26:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801bf2a:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801bf2e:	fa1f fc8c 	uxth.w	ip, ip
 801bf32:	f8cd c000 	str.w	ip, [sp]
 801bf36:	f8de a090 	ldr.w	sl, [lr, #144]	; 0x90
 801bf3a:	47d0      	blx	sl
 801bf3c:	4682      	mov	sl, r0
 801bf3e:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801bf42:	a807      	add	r0, sp, #28
 801bf44:	f7ff f818 	bl	801af78 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801bf48:	6823      	ldr	r3, [r4, #0]
 801bf4a:	4620      	mov	r0, r4
 801bf4c:	a907      	add	r1, sp, #28
 801bf4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bf50:	4798      	blx	r3
 801bf52:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 801bf56:	eba0 000a 	sub.w	r0, r0, sl
 801bf5a:	b200      	sxth	r0, r0
 801bf5c:	f8a5 00ac 	strh.w	r0, [r5, #172]	; 0xac
 801bf60:	b918      	cbnz	r0, 801bf6a <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 801bf62:	b2b9      	uxth	r1, r7
 801bf64:	4648      	mov	r0, r9
 801bf66:	f7ff faa5 	bl	801b4b4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801bf6a:	f8b4 b0e8 	ldrh.w	fp, [r4, #232]	; 0xe8
 801bf6e:	f1bb 0f00 	cmp.w	fp, #0
 801bf72:	f43f af26 	beq.w	801bdc2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801bf76:	9b02      	ldr	r3, [sp, #8]
 801bf78:	2700      	movs	r7, #0
 801bf7a:	f9b4 20a8 	ldrsh.w	r2, [r4, #168]	; 0xa8
 801bf7e:	881b      	ldrh	r3, [r3, #0]
 801bf80:	3301      	adds	r3, #1
 801bf82:	b29b      	uxth	r3, r3
 801bf84:	b299      	uxth	r1, r3
 801bf86:	00fd      	lsls	r5, r7, #3
 801bf88:	458b      	cmp	fp, r1
 801bf8a:	d9a3      	bls.n	801bed4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x36c>
 801bf8c:	4425      	add	r5, r4
 801bf8e:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 801bf92:	469c      	mov	ip, r3
 801bf94:	f8b5 10ac 	ldrh.w	r1, [r5, #172]	; 0xac
 801bf98:	f8b5 00a8 	ldrh.w	r0, [r5, #168]	; 0xa8
 801bf9c:	f9ba e0a8 	ldrsh.w	lr, [sl, #168]	; 0xa8
 801bfa0:	4408      	add	r0, r1
 801bfa2:	f8ba 10ac 	ldrh.w	r1, [sl, #172]	; 0xac
 801bfa6:	4471      	add	r1, lr
 801bfa8:	b200      	sxth	r0, r0
 801bfaa:	b209      	sxth	r1, r1
 801bfac:	4288      	cmp	r0, r1
 801bfae:	f6bf af6f 	bge.w	801be90 <_ZN8touchgfx11Application15drawCachedAreasEv+0x328>
 801bfb2:	4586      	cmp	lr, r0
 801bfb4:	4672      	mov	r2, lr
 801bfb6:	bfb8      	it	lt
 801bfb8:	4602      	movlt	r2, r0
 801bfba:	3301      	adds	r3, #1
 801bfbc:	4667      	mov	r7, ip
 801bfbe:	e7e1      	b.n	801bf84 <_ZN8touchgfx11Application15drawCachedAreasEv+0x41c>
 801bfc0:	d10c      	bne.n	801bfdc <_ZN8touchgfx11Application15drawCachedAreasEv+0x474>
 801bfc2:	f9b7 70ac 	ldrsh.w	r7, [r7, #172]	; 0xac
 801bfc6:	f9be 00ac 	ldrsh.w	r0, [lr, #172]	; 0xac
 801bfca:	4287      	cmp	r7, r0
 801bfcc:	bfb4      	ite	lt
 801bfce:	4608      	movlt	r0, r1
 801bfd0:	4640      	movge	r0, r8
 801bfd2:	f8be 70ae 	ldrh.w	r7, [lr, #174]	; 0xae
 801bfd6:	443b      	add	r3, r7
 801bfd8:	b21b      	sxth	r3, r3
 801bfda:	e753      	b.n	801be84 <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
 801bfdc:	4565      	cmp	r5, ip
 801bfde:	4640      	mov	r0, r8
 801bfe0:	bfa8      	it	ge
 801bfe2:	4665      	movge	r5, ip
 801bfe4:	e751      	b.n	801be8a <_ZN8touchgfx11Application15drawCachedAreasEv+0x322>
 801bfe6:	eb09 0007 	add.w	r0, r9, r7
 801bfea:	4427      	add	r7, r4
 801bfec:	9203      	str	r2, [sp, #12]
 801bfee:	f9b7 a0ae 	ldrsh.w	sl, [r7, #174]	; 0xae
 801bff2:	f1ba 0f13 	cmp.w	sl, #19
 801bff6:	bfde      	ittt	le
 801bff8:	f8b7 50aa 	ldrhle.w	r5, [r7, #170]	; 0xaa
 801bffc:	4455      	addle	r5, sl
 801bffe:	b22d      	sxthle	r5, r5
 801c000:	f7fb fb0b 	bl	801761a <_ZNK8touchgfx4Rect7isEmptyEv>
 801c004:	9a03      	ldr	r2, [sp, #12]
 801c006:	2800      	cmp	r0, #0
 801c008:	f47f af1c 	bne.w	801be44 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2dc>
 801c00c:	f9b7 20aa 	ldrsh.w	r2, [r7, #170]	; 0xaa
 801c010:	fa1f fa8a 	uxth.w	sl, sl
 801c014:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801c018:	1aad      	subs	r5, r5, r2
 801c01a:	4829      	ldr	r0, [pc, #164]	; (801c0c0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x558>)
 801c01c:	f9b7 10a8 	ldrsh.w	r1, [r7, #168]	; 0xa8
 801c020:	2d14      	cmp	r5, #20
 801c022:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 801c026:	6800      	ldr	r0, [r0, #0]
 801c028:	bfa8      	it	ge
 801c02a:	2514      	movge	r5, #20
 801c02c:	f8ad 101c 	strh.w	r1, [sp, #28]
 801c030:	f8ad 201e 	strh.w	r2, [sp, #30]
 801c034:	b289      	uxth	r1, r1
 801c036:	f8ad 3020 	strh.w	r3, [sp, #32]
 801c03a:	b2ad      	uxth	r5, r5
 801c03c:	f8d0 c000 	ldr.w	ip, [r0]
 801c040:	b292      	uxth	r2, r2
 801c042:	4555      	cmp	r5, sl
 801c044:	bf94      	ite	ls
 801c046:	9500      	strls	r5, [sp, #0]
 801c048:	f8cd a000 	strhi.w	sl, [sp]
 801c04c:	b29b      	uxth	r3, r3
 801c04e:	f8dc 5090 	ldr.w	r5, [ip, #144]	; 0x90
 801c052:	47a8      	blx	r5
 801c054:	6823      	ldr	r3, [r4, #0]
 801c056:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801c05a:	a907      	add	r1, sp, #28
 801c05c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c05e:	4620      	mov	r0, r4
 801c060:	4798      	blx	r3
 801c062:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 801c066:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 801c06a:	f8b7 20aa 	ldrh.w	r2, [r7, #170]	; 0xaa
 801c06e:	1a5b      	subs	r3, r3, r1
 801c070:	440a      	add	r2, r1
 801c072:	b21b      	sxth	r3, r3
 801c074:	f8a7 20aa 	strh.w	r2, [r7, #170]	; 0xaa
 801c078:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 801c07c:	2b00      	cmp	r3, #0
 801c07e:	f47f aed8 	bne.w	801be32 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 801c082:	fa1f f188 	uxth.w	r1, r8
 801c086:	4648      	mov	r0, r9
 801c088:	f7ff fa14 	bl	801b4b4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801c08c:	e6d1      	b.n	801be32 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 801c08e:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801c092:	42ab      	cmp	r3, r5
 801c094:	f67f ae95 	bls.w	801bdc2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801c098:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801c09c:	ab07      	add	r3, sp, #28
 801c09e:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801c0a2:	6851      	ldr	r1, [r2, #4]
 801c0a4:	c303      	stmia	r3!, {r0, r1}
 801c0a6:	a807      	add	r0, sp, #28
 801c0a8:	f7fb fab7 	bl	801761a <_ZNK8touchgfx4Rect7isEmptyEv>
 801c0ac:	b920      	cbnz	r0, 801c0b8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x550>
 801c0ae:	6823      	ldr	r3, [r4, #0]
 801c0b0:	a907      	add	r1, sp, #28
 801c0b2:	4620      	mov	r0, r4
 801c0b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c0b6:	4798      	blx	r3
 801c0b8:	3501      	adds	r5, #1
 801c0ba:	b2ad      	uxth	r5, r5
 801c0bc:	e7e7      	b.n	801c08e <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
 801c0be:	bf00      	nop
 801c0c0:	200177c4 	.word	0x200177c4

0801c0c4 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 801c0c4:	4b03      	ldr	r3, [pc, #12]	; (801c0d4 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 801c0c6:	2200      	movs	r2, #0
 801c0c8:	801a      	strh	r2, [r3, #0]
 801c0ca:	805a      	strh	r2, [r3, #2]
 801c0cc:	809a      	strh	r2, [r3, #4]
 801c0ce:	80da      	strh	r2, [r3, #6]
 801c0d0:	4770      	bx	lr
 801c0d2:	bf00      	nop
 801c0d4:	20017810 	.word	0x20017810

0801c0d8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801c0d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c0dc:	b09d      	sub	sp, #116	; 0x74
 801c0de:	4606      	mov	r6, r0
 801c0e0:	4614      	mov	r4, r2
 801c0e2:	468a      	mov	sl, r1
 801c0e4:	a803      	add	r0, sp, #12
 801c0e6:	461d      	mov	r5, r3
 801c0e8:	f000 fe58 	bl	801cd9c <_ZN8touchgfx12TextProviderC1Ev>
 801c0ec:	6833      	ldr	r3, [r6, #0]
 801c0ee:	4630      	mov	r0, r6
 801c0f0:	f242 0b0b 	movw	fp, #8203	; 0x200b
 801c0f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c0f6:	4798      	blx	r3
 801c0f8:	6833      	ldr	r3, [r6, #0]
 801c0fa:	4607      	mov	r7, r0
 801c0fc:	4630      	mov	r0, r6
 801c0fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801c100:	4798      	blx	r3
 801c102:	462a      	mov	r2, r5
 801c104:	2500      	movs	r5, #0
 801c106:	4621      	mov	r1, r4
 801c108:	9000      	str	r0, [sp, #0]
 801c10a:	463b      	mov	r3, r7
 801c10c:	462c      	mov	r4, r5
 801c10e:	46a9      	mov	r9, r5
 801c110:	46a8      	mov	r8, r5
 801c112:	a803      	add	r0, sp, #12
 801c114:	f000 fe95 	bl	801ce42 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801c118:	2300      	movs	r3, #0
 801c11a:	9302      	str	r3, [sp, #8]
 801c11c:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801c120:	429c      	cmp	r4, r3
 801c122:	d002      	beq.n	801c12a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 801c124:	455c      	cmp	r4, fp
 801c126:	bf18      	it	ne
 801c128:	4625      	movne	r5, r4
 801c12a:	ab02      	add	r3, sp, #8
 801c12c:	4632      	mov	r2, r6
 801c12e:	4651      	mov	r1, sl
 801c130:	a803      	add	r0, sp, #12
 801c132:	f001 f97b 	bl	801d42c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801c136:	4604      	mov	r4, r0
 801c138:	b108      	cbz	r0, 801c13e <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 801c13a:	280a      	cmp	r0, #10
 801c13c:	d10a      	bne.n	801c154 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 801c13e:	45c1      	cmp	r9, r8
 801c140:	bf38      	it	cc
 801c142:	46c1      	movcc	r9, r8
 801c144:	f04f 0800 	mov.w	r8, #0
 801c148:	2c00      	cmp	r4, #0
 801c14a:	d1e5      	bne.n	801c118 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801c14c:	4648      	mov	r0, r9
 801c14e:	b01d      	add	sp, #116	; 0x74
 801c150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c154:	9a02      	ldr	r2, [sp, #8]
 801c156:	2a00      	cmp	r2, #0
 801c158:	d0de      	beq.n	801c118 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801c15a:	7b57      	ldrb	r7, [r2, #13]
 801c15c:	4629      	mov	r1, r5
 801c15e:	6833      	ldr	r3, [r6, #0]
 801c160:	007f      	lsls	r7, r7, #1
 801c162:	8894      	ldrh	r4, [r2, #4]
 801c164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801c166:	f407 7080 	and.w	r0, r7, #256	; 0x100
 801c16a:	7a97      	ldrb	r7, [r2, #10]
 801c16c:	4307      	orrs	r7, r0
 801c16e:	4630      	mov	r0, r6
 801c170:	4798      	blx	r3
 801c172:	4438      	add	r0, r7
 801c174:	4480      	add	r8, r0
 801c176:	fa1f f888 	uxth.w	r8, r8
 801c17a:	e7e5      	b.n	801c148 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

0801c17c <_ZNK8touchgfx4Font12getCharWidthEt>:
 801c17c:	b508      	push	{r3, lr}
 801c17e:	6803      	ldr	r3, [r0, #0]
 801c180:	68db      	ldr	r3, [r3, #12]
 801c182:	4798      	blx	r3
 801c184:	b128      	cbz	r0, 801c192 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 801c186:	7b43      	ldrb	r3, [r0, #13]
 801c188:	7a80      	ldrb	r0, [r0, #10]
 801c18a:	005b      	lsls	r3, r3, #1
 801c18c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c190:	4318      	orrs	r0, r3
 801c192:	bd08      	pop	{r3, pc}

0801c194 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801c194:	b40e      	push	{r1, r2, r3}
 801c196:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c198:	b09e      	sub	sp, #120	; 0x78
 801c19a:	4605      	mov	r5, r0
 801c19c:	ab23      	add	r3, sp, #140	; 0x8c
 801c19e:	a805      	add	r0, sp, #20
 801c1a0:	f853 4b04 	ldr.w	r4, [r3], #4
 801c1a4:	9303      	str	r3, [sp, #12]
 801c1a6:	f000 fdf9 	bl	801cd9c <_ZN8touchgfx12TextProviderC1Ev>
 801c1aa:	682b      	ldr	r3, [r5, #0]
 801c1ac:	4628      	mov	r0, r5
 801c1ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c1b0:	4798      	blx	r3
 801c1b2:	682b      	ldr	r3, [r5, #0]
 801c1b4:	4606      	mov	r6, r0
 801c1b6:	4628      	mov	r0, r5
 801c1b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801c1ba:	4798      	blx	r3
 801c1bc:	4633      	mov	r3, r6
 801c1be:	4621      	mov	r1, r4
 801c1c0:	ae1e      	add	r6, sp, #120	; 0x78
 801c1c2:	2400      	movs	r4, #0
 801c1c4:	9000      	str	r0, [sp, #0]
 801c1c6:	9a03      	ldr	r2, [sp, #12]
 801c1c8:	a805      	add	r0, sp, #20
 801c1ca:	f000 fe3a 	bl	801ce42 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801c1ce:	f846 4d68 	str.w	r4, [r6, #-104]!
 801c1d2:	462a      	mov	r2, r5
 801c1d4:	4633      	mov	r3, r6
 801c1d6:	4621      	mov	r1, r4
 801c1d8:	a805      	add	r0, sp, #20
 801c1da:	f001 f927 	bl	801d42c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801c1de:	b300      	cbz	r0, 801c222 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 801c1e0:	280a      	cmp	r0, #10
 801c1e2:	d01a      	beq.n	801c21a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801c1e4:	9f04      	ldr	r7, [sp, #16]
 801c1e6:	b1c7      	cbz	r7, 801c21a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801c1e8:	7b78      	ldrb	r0, [r7, #13]
 801c1ea:	7a3b      	ldrb	r3, [r7, #8]
 801c1ec:	00c1      	lsls	r1, r0, #3
 801c1ee:	88aa      	ldrh	r2, [r5, #4]
 801c1f0:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801c1f4:	4319      	orrs	r1, r3
 801c1f6:	0643      	lsls	r3, r0, #25
 801c1f8:	ea4f 1000 	mov.w	r0, r0, lsl #4
 801c1fc:	bf48      	it	mi
 801c1fe:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 801c202:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801c206:	bf48      	it	mi
 801c208:	b219      	sxthmi	r1, r3
 801c20a:	79fb      	ldrb	r3, [r7, #7]
 801c20c:	4303      	orrs	r3, r0
 801c20e:	4413      	add	r3, r2
 801c210:	1a5b      	subs	r3, r3, r1
 801c212:	b29b      	uxth	r3, r3
 801c214:	42a3      	cmp	r3, r4
 801c216:	bfc8      	it	gt
 801c218:	b21c      	sxthgt	r4, r3
 801c21a:	4633      	mov	r3, r6
 801c21c:	462a      	mov	r2, r5
 801c21e:	2100      	movs	r1, #0
 801c220:	e7da      	b.n	801c1d8 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 801c222:	b2a0      	uxth	r0, r4
 801c224:	b01e      	add	sp, #120	; 0x78
 801c226:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801c22a:	b003      	add	sp, #12
 801c22c:	4770      	bx	lr

0801c22e <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801c22e:	b40e      	push	{r1, r2, r3}
 801c230:	b570      	push	{r4, r5, r6, lr}
 801c232:	b09d      	sub	sp, #116	; 0x74
 801c234:	4604      	mov	r4, r0
 801c236:	ab21      	add	r3, sp, #132	; 0x84
 801c238:	a803      	add	r0, sp, #12
 801c23a:	f853 5b04 	ldr.w	r5, [r3], #4
 801c23e:	9302      	str	r3, [sp, #8]
 801c240:	f000 fdac 	bl	801cd9c <_ZN8touchgfx12TextProviderC1Ev>
 801c244:	6823      	ldr	r3, [r4, #0]
 801c246:	4620      	mov	r0, r4
 801c248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c24a:	4798      	blx	r3
 801c24c:	6823      	ldr	r3, [r4, #0]
 801c24e:	4606      	mov	r6, r0
 801c250:	4620      	mov	r0, r4
 801c252:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801c254:	2401      	movs	r4, #1
 801c256:	4798      	blx	r3
 801c258:	4633      	mov	r3, r6
 801c25a:	9000      	str	r0, [sp, #0]
 801c25c:	4629      	mov	r1, r5
 801c25e:	9a02      	ldr	r2, [sp, #8]
 801c260:	a803      	add	r0, sp, #12
 801c262:	f000 fdee 	bl	801ce42 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801c266:	a803      	add	r0, sp, #12
 801c268:	f001 f960 	bl	801d52c <_ZN8touchgfx12TextProvider11getNextCharEv>
 801c26c:	b2a3      	uxth	r3, r4
 801c26e:	b138      	cbz	r0, 801c280 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 801c270:	280a      	cmp	r0, #10
 801c272:	a803      	add	r0, sp, #12
 801c274:	bf04      	itt	eq
 801c276:	3301      	addeq	r3, #1
 801c278:	b21c      	sxtheq	r4, r3
 801c27a:	f001 f957 	bl	801d52c <_ZN8touchgfx12TextProvider11getNextCharEv>
 801c27e:	e7f5      	b.n	801c26c <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 801c280:	4618      	mov	r0, r3
 801c282:	b01d      	add	sp, #116	; 0x74
 801c284:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c288:	b003      	add	sp, #12
 801c28a:	4770      	bx	lr

0801c28c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801c28c:	b40e      	push	{r1, r2, r3}
 801c28e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c290:	b09e      	sub	sp, #120	; 0x78
 801c292:	4604      	mov	r4, r0
 801c294:	ab23      	add	r3, sp, #140	; 0x8c
 801c296:	a805      	add	r0, sp, #20
 801c298:	f853 5b04 	ldr.w	r5, [r3], #4
 801c29c:	9303      	str	r3, [sp, #12]
 801c29e:	f000 fd7d 	bl	801cd9c <_ZN8touchgfx12TextProviderC1Ev>
 801c2a2:	6823      	ldr	r3, [r4, #0]
 801c2a4:	4620      	mov	r0, r4
 801c2a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c2a8:	4798      	blx	r3
 801c2aa:	6823      	ldr	r3, [r4, #0]
 801c2ac:	4606      	mov	r6, r0
 801c2ae:	4620      	mov	r0, r4
 801c2b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801c2b2:	4798      	blx	r3
 801c2b4:	4633      	mov	r3, r6
 801c2b6:	4629      	mov	r1, r5
 801c2b8:	9000      	str	r0, [sp, #0]
 801c2ba:	9a03      	ldr	r2, [sp, #12]
 801c2bc:	a805      	add	r0, sp, #20
 801c2be:	f000 fdc0 	bl	801ce42 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801c2c2:	ad1e      	add	r5, sp, #120	; 0x78
 801c2c4:	2100      	movs	r1, #0
 801c2c6:	26ff      	movs	r6, #255	; 0xff
 801c2c8:	4622      	mov	r2, r4
 801c2ca:	a805      	add	r0, sp, #20
 801c2cc:	f845 1d68 	str.w	r1, [r5, #-104]!
 801c2d0:	462b      	mov	r3, r5
 801c2d2:	f001 f8ab 	bl	801d42c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801c2d6:	b1d8      	cbz	r0, 801c310 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x84>
 801c2d8:	280a      	cmp	r0, #10
 801c2da:	d012      	beq.n	801c302 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 801c2dc:	9804      	ldr	r0, [sp, #16]
 801c2de:	b180      	cbz	r0, 801c302 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 801c2e0:	7b47      	ldrb	r7, [r0, #13]
 801c2e2:	7922      	ldrb	r2, [r4, #4]
 801c2e4:	00fb      	lsls	r3, r7, #3
 801c2e6:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801c2ea:	7a03      	ldrb	r3, [r0, #8]
 801c2ec:	430b      	orrs	r3, r1
 801c2ee:	0679      	lsls	r1, r7, #25
 801c2f0:	bf44      	itt	mi
 801c2f2:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801c2f6:	b21b      	sxthmi	r3, r3
 801c2f8:	1ad3      	subs	r3, r2, r3
 801c2fa:	b2db      	uxtb	r3, r3
 801c2fc:	429e      	cmp	r6, r3
 801c2fe:	bf28      	it	cs
 801c300:	461e      	movcs	r6, r3
 801c302:	462b      	mov	r3, r5
 801c304:	4622      	mov	r2, r4
 801c306:	2100      	movs	r1, #0
 801c308:	a805      	add	r0, sp, #20
 801c30a:	f001 f88f 	bl	801d42c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801c30e:	e7e2      	b.n	801c2d6 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4a>
 801c310:	4630      	mov	r0, r6
 801c312:	b01e      	add	sp, #120	; 0x78
 801c314:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801c318:	b003      	add	sp, #12
 801c31a:	4770      	bx	lr

0801c31c <_ZNK8touchgfx8Drawable10invalidateEv>:
 801c31c:	b513      	push	{r0, r1, r4, lr}
 801c31e:	6803      	ldr	r3, [r0, #0]
 801c320:	2400      	movs	r4, #0
 801c322:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801c326:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801c32a:	f8ad 1004 	strh.w	r1, [sp, #4]
 801c32e:	4669      	mov	r1, sp
 801c330:	691b      	ldr	r3, [r3, #16]
 801c332:	9400      	str	r4, [sp, #0]
 801c334:	f8ad 2006 	strh.w	r2, [sp, #6]
 801c338:	4798      	blx	r3
 801c33a:	b002      	add	sp, #8
 801c33c:	bd10      	pop	{r4, pc}

0801c33e <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801c33e:	b538      	push	{r3, r4, r5, lr}
 801c340:	680b      	ldr	r3, [r1, #0]
 801c342:	460c      	mov	r4, r1
 801c344:	4605      	mov	r5, r0
 801c346:	68db      	ldr	r3, [r3, #12]
 801c348:	4798      	blx	r3
 801c34a:	6823      	ldr	r3, [r4, #0]
 801c34c:	4620      	mov	r0, r4
 801c34e:	4629      	mov	r1, r5
 801c350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c352:	4798      	blx	r3
 801c354:	4628      	mov	r0, r5
 801c356:	bd38      	pop	{r3, r4, r5, pc}

0801c358 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801c358:	b410      	push	{r4}
 801c35a:	880a      	ldrh	r2, [r1, #0]
 801c35c:	8884      	ldrh	r4, [r0, #4]
 801c35e:	4422      	add	r2, r4
 801c360:	800a      	strh	r2, [r1, #0]
 801c362:	884a      	ldrh	r2, [r1, #2]
 801c364:	88c4      	ldrh	r4, [r0, #6]
 801c366:	4422      	add	r2, r4
 801c368:	804a      	strh	r2, [r1, #2]
 801c36a:	6940      	ldr	r0, [r0, #20]
 801c36c:	b120      	cbz	r0, 801c378 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801c36e:	6803      	ldr	r3, [r0, #0]
 801c370:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c376:	4718      	bx	r3
 801c378:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c37c:	4770      	bx	lr

0801c37e <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801c37e:	b570      	push	{r4, r5, r6, lr}
 801c380:	8882      	ldrh	r2, [r0, #4]
 801c382:	460c      	mov	r4, r1
 801c384:	880b      	ldrh	r3, [r1, #0]
 801c386:	4605      	mov	r5, r0
 801c388:	4413      	add	r3, r2
 801c38a:	800b      	strh	r3, [r1, #0]
 801c38c:	884b      	ldrh	r3, [r1, #2]
 801c38e:	88c2      	ldrh	r2, [r0, #6]
 801c390:	4413      	add	r3, r2
 801c392:	804b      	strh	r3, [r1, #2]
 801c394:	1d01      	adds	r1, r0, #4
 801c396:	4620      	mov	r0, r4
 801c398:	f7fb f8fc 	bl	8017594 <_ZN8touchgfx4RectaNERKS0_>
 801c39c:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801c3a0:	2b00      	cmp	r3, #0
 801c3a2:	dd0b      	ble.n	801c3bc <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801c3a4:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801c3a8:	2b00      	cmp	r3, #0
 801c3aa:	dd07      	ble.n	801c3bc <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801c3ac:	6968      	ldr	r0, [r5, #20]
 801c3ae:	b128      	cbz	r0, 801c3bc <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801c3b0:	6803      	ldr	r3, [r0, #0]
 801c3b2:	4621      	mov	r1, r4
 801c3b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c3b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c3ba:	4718      	bx	r3
 801c3bc:	bd70      	pop	{r4, r5, r6, pc}
	...

0801c3c0 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801c3c0:	b570      	push	{r4, r5, r6, lr}
 801c3c2:	8882      	ldrh	r2, [r0, #4]
 801c3c4:	460c      	mov	r4, r1
 801c3c6:	880b      	ldrh	r3, [r1, #0]
 801c3c8:	4605      	mov	r5, r0
 801c3ca:	4413      	add	r3, r2
 801c3cc:	800b      	strh	r3, [r1, #0]
 801c3ce:	884b      	ldrh	r3, [r1, #2]
 801c3d0:	88c2      	ldrh	r2, [r0, #6]
 801c3d2:	4413      	add	r3, r2
 801c3d4:	804b      	strh	r3, [r1, #2]
 801c3d6:	1d01      	adds	r1, r0, #4
 801c3d8:	4620      	mov	r0, r4
 801c3da:	f7fb f8db 	bl	8017594 <_ZN8touchgfx4RectaNERKS0_>
 801c3de:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801c3e2:	2b00      	cmp	r3, #0
 801c3e4:	dd18      	ble.n	801c418 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 801c3e6:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801c3ea:	2b00      	cmp	r3, #0
 801c3ec:	dd14      	ble.n	801c418 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 801c3ee:	6968      	ldr	r0, [r5, #20]
 801c3f0:	b128      	cbz	r0, 801c3fe <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 801c3f2:	6803      	ldr	r3, [r0, #0]
 801c3f4:	4621      	mov	r1, r4
 801c3f6:	691b      	ldr	r3, [r3, #16]
 801c3f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c3fc:	4718      	bx	r3
 801c3fe:	4b07      	ldr	r3, [pc, #28]	; (801c41c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 801c400:	681b      	ldr	r3, [r3, #0]
 801c402:	3304      	adds	r3, #4
 801c404:	429d      	cmp	r5, r3
 801c406:	d107      	bne.n	801c418 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 801c408:	f7fe fff0 	bl	801b3ec <_ZN8touchgfx11Application11getInstanceEv>
 801c40c:	6821      	ldr	r1, [r4, #0]
 801c40e:	6862      	ldr	r2, [r4, #4]
 801c410:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c414:	f7ff b862 	b.w	801b4dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801c418:	bd70      	pop	{r4, r5, r6, pc}
 801c41a:	bf00      	nop
 801c41c:	20017808 	.word	0x20017808

0801c420 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801c420:	b570      	push	{r4, r5, r6, lr}
 801c422:	4604      	mov	r4, r0
 801c424:	4616      	mov	r6, r2
 801c426:	460d      	mov	r5, r1
 801c428:	b901      	cbnz	r1, 801c42c <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801c42a:	b192      	cbz	r2, 801c452 <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 801c42c:	6823      	ldr	r3, [r4, #0]
 801c42e:	4620      	mov	r0, r4
 801c430:	699b      	ldr	r3, [r3, #24]
 801c432:	4798      	blx	r3
 801c434:	88e2      	ldrh	r2, [r4, #6]
 801c436:	88a1      	ldrh	r1, [r4, #4]
 801c438:	4620      	mov	r0, r4
 801c43a:	4432      	add	r2, r6
 801c43c:	4429      	add	r1, r5
 801c43e:	b212      	sxth	r2, r2
 801c440:	b209      	sxth	r1, r1
 801c442:	f7e7 fbbb 	bl	8003bbc <_ZN8touchgfx8Drawable5setXYEss>
 801c446:	6823      	ldr	r3, [r4, #0]
 801c448:	4620      	mov	r0, r4
 801c44a:	699b      	ldr	r3, [r3, #24]
 801c44c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c450:	4718      	bx	r3
 801c452:	bd70      	pop	{r4, r5, r6, pc}

0801c454 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801c454:	b510      	push	{r4, lr}
 801c456:	2300      	movs	r3, #0
 801c458:	4604      	mov	r4, r0
 801c45a:	4608      	mov	r0, r1
 801c45c:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801c460:	8023      	strh	r3, [r4, #0]
 801c462:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801c466:	8063      	strh	r3, [r4, #2]
 801c468:	6803      	ldr	r3, [r0, #0]
 801c46a:	80a1      	strh	r1, [r4, #4]
 801c46c:	4621      	mov	r1, r4
 801c46e:	80e2      	strh	r2, [r4, #6]
 801c470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c472:	4798      	blx	r3
 801c474:	4620      	mov	r0, r4
 801c476:	bd10      	pop	{r4, pc}

0801c478 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 801c478:	b530      	push	{r4, r5, lr}
 801c47a:	8083      	strh	r3, [r0, #4]
 801c47c:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801c480:	f89d 5010 	ldrb.w	r5, [sp, #16]
 801c484:	7183      	strb	r3, [r0, #6]
 801c486:	79c3      	ldrb	r3, [r0, #7]
 801c488:	6101      	str	r1, [r0, #16]
 801c48a:	f365 0306 	bfi	r3, r5, #0, #7
 801c48e:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801c492:	8282      	strh	r2, [r0, #20]
 801c494:	f365 13c7 	bfi	r3, r5, #7, #1
 801c498:	71c3      	strb	r3, [r0, #7]
 801c49a:	f89d 3018 	ldrb.w	r3, [sp, #24]
 801c49e:	7203      	strb	r3, [r0, #8]
 801c4a0:	f89d 301c 	ldrb.w	r3, [sp, #28]
 801c4a4:	7243      	strb	r3, [r0, #9]
 801c4a6:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801c4aa:	8143      	strh	r3, [r0, #10]
 801c4ac:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801c4b0:	8183      	strh	r3, [r0, #12]
 801c4b2:	4b01      	ldr	r3, [pc, #4]	; (801c4b8 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 801c4b4:	6003      	str	r3, [r0, #0]
 801c4b6:	bd30      	pop	{r4, r5, pc}
 801c4b8:	0802ff1c 	.word	0x0802ff1c

0801c4bc <_ZNK8touchgfx9ConstFont4findEt>:
 801c4bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c4be:	6904      	ldr	r4, [r0, #16]
 801c4c0:	b3bc      	cbz	r4, 801c532 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c4c2:	88a3      	ldrh	r3, [r4, #4]
 801c4c4:	8a82      	ldrh	r2, [r0, #20]
 801c4c6:	1acb      	subs	r3, r1, r3
 801c4c8:	f102 32ff 	add.w	r2, r2, #4294967295
 801c4cc:	d431      	bmi.n	801c532 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c4ce:	4293      	cmp	r3, r2
 801c4d0:	dd0c      	ble.n	801c4ec <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801c4d2:	230e      	movs	r3, #14
 801c4d4:	fb03 4302 	mla	r3, r3, r2, r4
 801c4d8:	889b      	ldrh	r3, [r3, #4]
 801c4da:	1a5b      	subs	r3, r3, r1
 801c4dc:	1ad3      	subs	r3, r2, r3
 801c4de:	429a      	cmp	r2, r3
 801c4e0:	db27      	blt.n	801c532 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c4e2:	2b00      	cmp	r3, #0
 801c4e4:	bfbc      	itt	lt
 801c4e6:	2302      	movlt	r3, #2
 801c4e8:	fb92 f3f3 	sdivlt	r3, r2, r3
 801c4ec:	2500      	movs	r5, #0
 801c4ee:	260e      	movs	r6, #14
 801c4f0:	4295      	cmp	r5, r2
 801c4f2:	dc1e      	bgt.n	801c532 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c4f4:	fb06 4003 	mla	r0, r6, r3, r4
 801c4f8:	8887      	ldrh	r7, [r0, #4]
 801c4fa:	42b9      	cmp	r1, r7
 801c4fc:	d01a      	beq.n	801c534 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 801c4fe:	d20d      	bcs.n	801c51c <_ZNK8touchgfx9ConstFont4findEt+0x60>
 801c500:	1e5a      	subs	r2, r3, #1
 801c502:	4295      	cmp	r5, r2
 801c504:	dc15      	bgt.n	801c532 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c506:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 801c50a:	1a5b      	subs	r3, r3, r1
 801c50c:	1ad3      	subs	r3, r2, r3
 801c50e:	429a      	cmp	r2, r3
 801c510:	db0f      	blt.n	801c532 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c512:	429d      	cmp	r5, r3
 801c514:	ddec      	ble.n	801c4f0 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801c516:	1953      	adds	r3, r2, r5
 801c518:	105b      	asrs	r3, r3, #1
 801c51a:	e7e9      	b.n	801c4f0 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801c51c:	1c5d      	adds	r5, r3, #1
 801c51e:	42aa      	cmp	r2, r5
 801c520:	db07      	blt.n	801c532 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c522:	8a43      	ldrh	r3, [r0, #18]
 801c524:	1acb      	subs	r3, r1, r3
 801c526:	442b      	add	r3, r5
 801c528:	429d      	cmp	r5, r3
 801c52a:	dc02      	bgt.n	801c532 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c52c:	429a      	cmp	r2, r3
 801c52e:	dadf      	bge.n	801c4f0 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801c530:	e7f1      	b.n	801c516 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 801c532:	2000      	movs	r0, #0
 801c534:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c536 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801c536:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c538:	4604      	mov	r4, r0
 801c53a:	4617      	mov	r7, r2
 801c53c:	461e      	mov	r6, r3
 801c53e:	b911      	cbnz	r1, 801c546 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801c540:	2500      	movs	r5, #0
 801c542:	4628      	mov	r0, r5
 801c544:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c546:	290a      	cmp	r1, #10
 801c548:	d0fa      	beq.n	801c540 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801c54a:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801c54e:	4291      	cmp	r1, r2
 801c550:	d0f6      	beq.n	801c540 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801c552:	f242 020b 	movw	r2, #8203	; 0x200b
 801c556:	4291      	cmp	r1, r2
 801c558:	d0f2      	beq.n	801c540 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801c55a:	f7ff ffaf 	bl	801c4bc <_ZNK8touchgfx9ConstFont4findEt>
 801c55e:	4605      	mov	r5, r0
 801c560:	b950      	cbnz	r0, 801c578 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 801c562:	6823      	ldr	r3, [r4, #0]
 801c564:	4620      	mov	r0, r4
 801c566:	691b      	ldr	r3, [r3, #16]
 801c568:	4798      	blx	r3
 801c56a:	4601      	mov	r1, r0
 801c56c:	4620      	mov	r0, r4
 801c56e:	f7ff ffa5 	bl	801c4bc <_ZNK8touchgfx9ConstFont4findEt>
 801c572:	4605      	mov	r5, r0
 801c574:	2800      	cmp	r0, #0
 801c576:	d0e3      	beq.n	801c540 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801c578:	6823      	ldr	r3, [r4, #0]
 801c57a:	4629      	mov	r1, r5
 801c57c:	4620      	mov	r0, r4
 801c57e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801c580:	4798      	blx	r3
 801c582:	6038      	str	r0, [r7, #0]
 801c584:	6823      	ldr	r3, [r4, #0]
 801c586:	4620      	mov	r0, r4
 801c588:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c58a:	4798      	blx	r3
 801c58c:	7030      	strb	r0, [r6, #0]
 801c58e:	e7d8      	b.n	801c542 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0801c590 <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>:
 801c590:	b538      	push	{r3, r4, r5, lr}
 801c592:	4605      	mov	r5, r0
 801c594:	f001 fd20 	bl	801dfd8 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801c598:	4604      	mov	r4, r0
 801c59a:	4628      	mov	r0, r5
 801c59c:	f001 fc60 	bl	801de60 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801c5a0:	2800      	cmp	r0, #0
 801c5a2:	bf14      	ite	ne
 801c5a4:	2002      	movne	r0, #2
 801c5a6:	2000      	moveq	r0, #0
 801c5a8:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
 801c5ac:	b280      	uxth	r0, r0
 801c5ae:	bd38      	pop	{r3, r4, r5, pc}

0801c5b0 <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>:
 801c5b0:	b538      	push	{r3, r4, r5, lr}
 801c5b2:	4605      	mov	r5, r0
 801c5b4:	f001 fd10 	bl	801dfd8 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801c5b8:	4604      	mov	r4, r0
 801c5ba:	4628      	mov	r0, r5
 801c5bc:	f001 fc50 	bl	801de60 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801c5c0:	2800      	cmp	r0, #0
 801c5c2:	bf14      	ite	ne
 801c5c4:	2002      	movne	r0, #2
 801c5c6:	2000      	moveq	r0, #0
 801c5c8:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
 801c5cc:	f040 0001 	orr.w	r0, r0, #1
 801c5d0:	b280      	uxth	r0, r0
 801c5d2:	bd38      	pop	{r3, r4, r5, pc}

0801c5d4 <_ZN8touchgfx4clzuEm>:
 801c5d4:	4603      	mov	r3, r0
 801c5d6:	b1c8      	cbz	r0, 801c60c <_ZN8touchgfx4clzuEm+0x38>
 801c5d8:	0c02      	lsrs	r2, r0, #16
 801c5da:	0412      	lsls	r2, r2, #16
 801c5dc:	b9a2      	cbnz	r2, 801c608 <_ZN8touchgfx4clzuEm+0x34>
 801c5de:	0403      	lsls	r3, r0, #16
 801c5e0:	2010      	movs	r0, #16
 801c5e2:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801c5e6:	bf04      	itt	eq
 801c5e8:	021b      	lsleq	r3, r3, #8
 801c5ea:	3008      	addeq	r0, #8
 801c5ec:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801c5f0:	bf04      	itt	eq
 801c5f2:	011b      	lsleq	r3, r3, #4
 801c5f4:	3004      	addeq	r0, #4
 801c5f6:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801c5fa:	bf04      	itt	eq
 801c5fc:	009b      	lsleq	r3, r3, #2
 801c5fe:	3002      	addeq	r0, #2
 801c600:	2b00      	cmp	r3, #0
 801c602:	db04      	blt.n	801c60e <_ZN8touchgfx4clzuEm+0x3a>
 801c604:	3001      	adds	r0, #1
 801c606:	4770      	bx	lr
 801c608:	2000      	movs	r0, #0
 801c60a:	e7ea      	b.n	801c5e2 <_ZN8touchgfx4clzuEm+0xe>
 801c60c:	2020      	movs	r0, #32
 801c60e:	4770      	bx	lr

0801c610 <_ZN8touchgfx7muldivuEmmmRm>:
 801c610:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c614:	4680      	mov	r8, r0
 801c616:	460f      	mov	r7, r1
 801c618:	4615      	mov	r5, r2
 801c61a:	461e      	mov	r6, r3
 801c61c:	f7ff ffda 	bl	801c5d4 <_ZN8touchgfx4clzuEm>
 801c620:	b998      	cbnz	r0, 801c64a <_ZN8touchgfx7muldivuEmmmRm+0x3a>
 801c622:	4608      	mov	r0, r1
 801c624:	f7ff ffd6 	bl	801c5d4 <_ZN8touchgfx4clzuEm>
 801c628:	2800      	cmp	r0, #0
 801c62a:	dd08      	ble.n	801c63e <_ZN8touchgfx7muldivuEmmmRm+0x2e>
 801c62c:	4633      	mov	r3, r6
 801c62e:	462a      	mov	r2, r5
 801c630:	4641      	mov	r1, r8
 801c632:	4638      	mov	r0, r7
 801c634:	f7ff ffec 	bl	801c610 <_ZN8touchgfx7muldivuEmmmRm>
 801c638:	b003      	add	sp, #12
 801c63a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c63e:	f04f 33ff 	mov.w	r3, #4294967295
 801c642:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801c646:	6033      	str	r3, [r6, #0]
 801c648:	e7f6      	b.n	801c638 <_ZN8touchgfx7muldivuEmmmRm+0x28>
 801c64a:	fa31 f900 	lsrs.w	r9, r1, r0
 801c64e:	fb01 f308 	mul.w	r3, r1, r8
 801c652:	d105      	bne.n	801c660 <_ZN8touchgfx7muldivuEmmmRm+0x50>
 801c654:	fbb3 f0f5 	udiv	r0, r3, r5
 801c658:	fb05 3510 	mls	r5, r5, r0, r3
 801c65c:	6035      	str	r5, [r6, #0]
 801c65e:	e7eb      	b.n	801c638 <_ZN8touchgfx7muldivuEmmmRm+0x28>
 801c660:	2301      	movs	r3, #1
 801c662:	fa08 fb00 	lsl.w	fp, r8, r0
 801c666:	462a      	mov	r2, r5
 801c668:	4641      	mov	r1, r8
 801c66a:	fa03 f000 	lsl.w	r0, r3, r0
 801c66e:	4633      	mov	r3, r6
 801c670:	fbbb faf5 	udiv	sl, fp, r5
 801c674:	3801      	subs	r0, #1
 801c676:	fb09 f40a 	mul.w	r4, r9, sl
 801c67a:	4038      	ands	r0, r7
 801c67c:	f7ff ffc8 	bl	801c610 <_ZN8touchgfx7muldivuEmmmRm>
 801c680:	462a      	mov	r2, r5
 801c682:	4607      	mov	r7, r0
 801c684:	ab01      	add	r3, sp, #4
 801c686:	fb05 b11a 	mls	r1, r5, sl, fp
 801c68a:	4648      	mov	r0, r9
 801c68c:	f7ff ffc0 	bl	801c610 <_ZN8touchgfx7muldivuEmmmRm>
 801c690:	9b01      	ldr	r3, [sp, #4]
 801c692:	6832      	ldr	r2, [r6, #0]
 801c694:	441a      	add	r2, r3
 801c696:	fbb2 f3f5 	udiv	r3, r2, r5
 801c69a:	441c      	add	r4, r3
 801c69c:	fb05 2513 	mls	r5, r5, r3, r2
 801c6a0:	443c      	add	r4, r7
 801c6a2:	4420      	add	r0, r4
 801c6a4:	e7da      	b.n	801c65c <_ZN8touchgfx7muldivuEmmmRm+0x4c>

0801c6a6 <_ZN8touchgfx6muldivElllRl>:
 801c6a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801c6a8:	2800      	cmp	r0, #0
 801c6aa:	461e      	mov	r6, r3
 801c6ac:	bfba      	itte	lt
 801c6ae:	4240      	neglt	r0, r0
 801c6b0:	f04f 34ff 	movlt.w	r4, #4294967295
 801c6b4:	2401      	movge	r4, #1
 801c6b6:	2900      	cmp	r1, #0
 801c6b8:	bfbc      	itt	lt
 801c6ba:	4249      	neglt	r1, r1
 801c6bc:	4264      	neglt	r4, r4
 801c6be:	2a00      	cmp	r2, #0
 801c6c0:	bfb6      	itet	lt
 801c6c2:	4265      	neglt	r5, r4
 801c6c4:	4625      	movge	r5, r4
 801c6c6:	4252      	neglt	r2, r2
 801c6c8:	4288      	cmp	r0, r1
 801c6ca:	bfc2      	ittt	gt
 801c6cc:	4603      	movgt	r3, r0
 801c6ce:	4608      	movgt	r0, r1
 801c6d0:	4619      	movgt	r1, r3
 801c6d2:	ab01      	add	r3, sp, #4
 801c6d4:	f7ff ff9c 	bl	801c610 <_ZN8touchgfx7muldivuEmmmRm>
 801c6d8:	9b01      	ldr	r3, [sp, #4]
 801c6da:	4368      	muls	r0, r5
 801c6dc:	435c      	muls	r4, r3
 801c6de:	6034      	str	r4, [r6, #0]
 801c6e0:	b002      	add	sp, #8
 801c6e2:	bd70      	pop	{r4, r5, r6, pc}

0801c6e4 <_ZN8touchgfx6muldivElll>:
 801c6e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801c6e6:	4606      	mov	r6, r0
 801c6e8:	ab01      	add	r3, sp, #4
 801c6ea:	460d      	mov	r5, r1
 801c6ec:	4614      	mov	r4, r2
 801c6ee:	f7ff ffda 	bl	801c6a6 <_ZN8touchgfx6muldivElllRl>
 801c6f2:	2e00      	cmp	r6, #0
 801c6f4:	db20      	blt.n	801c738 <_ZN8touchgfx6muldivElll+0x54>
 801c6f6:	bf14      	ite	ne
 801c6f8:	2301      	movne	r3, #1
 801c6fa:	2300      	moveq	r3, #0
 801c6fc:	2d00      	cmp	r5, #0
 801c6fe:	db1e      	blt.n	801c73e <_ZN8touchgfx6muldivElll+0x5a>
 801c700:	bf14      	ite	ne
 801c702:	2201      	movne	r2, #1
 801c704:	2200      	moveq	r2, #0
 801c706:	2c00      	cmp	r4, #0
 801c708:	fb03 f202 	mul.w	r2, r3, r2
 801c70c:	db1a      	blt.n	801c744 <_ZN8touchgfx6muldivElll+0x60>
 801c70e:	bf14      	ite	ne
 801c710:	2301      	movne	r3, #1
 801c712:	2300      	moveq	r3, #0
 801c714:	4353      	muls	r3, r2
 801c716:	2b01      	cmp	r3, #1
 801c718:	d117      	bne.n	801c74a <_ZN8touchgfx6muldivElll+0x66>
 801c71a:	2c00      	cmp	r4, #0
 801c71c:	9b01      	ldr	r3, [sp, #4]
 801c71e:	bfb8      	it	lt
 801c720:	4264      	neglt	r4, r4
 801c722:	2b00      	cmp	r3, #0
 801c724:	f104 0401 	add.w	r4, r4, #1
 801c728:	bfb8      	it	lt
 801c72a:	425b      	neglt	r3, r3
 801c72c:	ebb3 0f64 	cmp.w	r3, r4, asr #1
 801c730:	db00      	blt.n	801c734 <_ZN8touchgfx6muldivElll+0x50>
 801c732:	3001      	adds	r0, #1
 801c734:	b002      	add	sp, #8
 801c736:	bd70      	pop	{r4, r5, r6, pc}
 801c738:	f04f 33ff 	mov.w	r3, #4294967295
 801c73c:	e7de      	b.n	801c6fc <_ZN8touchgfx6muldivElll+0x18>
 801c73e:	f04f 32ff 	mov.w	r2, #4294967295
 801c742:	e7e0      	b.n	801c706 <_ZN8touchgfx6muldivElll+0x22>
 801c744:	f04f 33ff 	mov.w	r3, #4294967295
 801c748:	e7e4      	b.n	801c714 <_ZN8touchgfx6muldivElll+0x30>
 801c74a:	3301      	adds	r3, #1
 801c74c:	d1f2      	bne.n	801c734 <_ZN8touchgfx6muldivElll+0x50>
 801c74e:	9b01      	ldr	r3, [sp, #4]
 801c750:	2c00      	cmp	r4, #0
 801c752:	bfb8      	it	lt
 801c754:	4264      	neglt	r4, r4
 801c756:	2b00      	cmp	r3, #0
 801c758:	bfb8      	it	lt
 801c75a:	425b      	neglt	r3, r3
 801c75c:	ebb3 0f64 	cmp.w	r3, r4, asr #1
 801c760:	bfc8      	it	gt
 801c762:	f100 30ff 	addgt.w	r0, r0, #4294967295
 801c766:	e7e5      	b.n	801c734 <_ZN8touchgfx6muldivElll+0x50>

0801c768 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 801c768:	2000      	movs	r0, #0
 801c76a:	4770      	bx	lr

0801c76c <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 801c76c:	2001      	movs	r0, #1
 801c76e:	4770      	bx	lr

0801c770 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 801c770:	2002      	movs	r0, #2
 801c772:	4770      	bx	lr

0801c774 <_ZN8touchgfx6ScreenD1Ev>:
 801c774:	4770      	bx	lr

0801c776 <_ZN8touchgfx12GestureEventD1Ev>:
 801c776:	4770      	bx	lr

0801c778 <_ZN8touchgfx9DragEventD1Ev>:
 801c778:	4770      	bx	lr

0801c77a <_ZN8touchgfx10ClickEventD1Ev>:
 801c77a:	4770      	bx	lr

0801c77c <_ZN8touchgfx10ClickEventD0Ev>:
 801c77c:	b510      	push	{r4, lr}
 801c77e:	4604      	mov	r4, r0
 801c780:	210c      	movs	r1, #12
 801c782:	f00d fc89 	bl	802a098 <_ZdlPvj>
 801c786:	4620      	mov	r0, r4
 801c788:	bd10      	pop	{r4, pc}

0801c78a <_ZN8touchgfx9DragEventD0Ev>:
 801c78a:	b510      	push	{r4, lr}
 801c78c:	4604      	mov	r4, r0
 801c78e:	2110      	movs	r1, #16
 801c790:	f00d fc82 	bl	802a098 <_ZdlPvj>
 801c794:	4620      	mov	r0, r4
 801c796:	bd10      	pop	{r4, pc}

0801c798 <_ZN8touchgfx12GestureEventD0Ev>:
 801c798:	b510      	push	{r4, lr}
 801c79a:	4604      	mov	r4, r0
 801c79c:	210c      	movs	r1, #12
 801c79e:	f00d fc7b 	bl	802a098 <_ZdlPvj>
 801c7a2:	4620      	mov	r0, r4
 801c7a4:	bd10      	pop	{r4, pc}

0801c7a6 <_ZN8touchgfx6ScreenD0Ev>:
 801c7a6:	b510      	push	{r4, lr}
 801c7a8:	4604      	mov	r4, r0
 801c7aa:	213c      	movs	r1, #60	; 0x3c
 801c7ac:	f00d fc74 	bl	802a098 <_ZdlPvj>
 801c7b0:	4620      	mov	r0, r4
 801c7b2:	bd10      	pop	{r4, pc}

0801c7b4 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801c7b4:	b530      	push	{r4, r5, lr}
 801c7b6:	460d      	mov	r5, r1
 801c7b8:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801c7ba:	b087      	sub	sp, #28
 801c7bc:	4604      	mov	r4, r0
 801c7be:	b301      	cbz	r1, 801c802 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801c7c0:	a801      	add	r0, sp, #4
 801c7c2:	f7ff fe47 	bl	801c454 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c7c6:	892a      	ldrh	r2, [r5, #8]
 801c7c8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801c7cc:	7928      	ldrb	r0, [r5, #4]
 801c7ce:	1ad2      	subs	r2, r2, r3
 801c7d0:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801c7d2:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801c7d6:	441a      	add	r2, r3
 801c7d8:	896b      	ldrh	r3, [r5, #10]
 801c7da:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801c7de:	f88d 0010 	strb.w	r0, [sp, #16]
 801c7e2:	1b5b      	subs	r3, r3, r5
 801c7e4:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 801c7e6:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801c7e8:	442b      	add	r3, r5
 801c7ea:	4d07      	ldr	r5, [pc, #28]	; (801c808 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801c7ec:	f8ad 1012 	strh.w	r1, [sp, #18]
 801c7f0:	a903      	add	r1, sp, #12
 801c7f2:	9503      	str	r5, [sp, #12]
 801c7f4:	f8ad 2014 	strh.w	r2, [sp, #20]
 801c7f8:	f8ad 3016 	strh.w	r3, [sp, #22]
 801c7fc:	6803      	ldr	r3, [r0, #0]
 801c7fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801c800:	4798      	blx	r3
 801c802:	b007      	add	sp, #28
 801c804:	bd30      	pop	{r4, r5, pc}
 801c806:	bf00      	nop
 801c808:	0802ff9c 	.word	0x0802ff9c

0801c80c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801c80c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c810:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801c812:	b08a      	sub	sp, #40	; 0x28
 801c814:	4604      	mov	r4, r0
 801c816:	460d      	mov	r5, r1
 801c818:	b113      	cbz	r3, 801c820 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 801c81a:	790b      	ldrb	r3, [r1, #4]
 801c81c:	2b00      	cmp	r3, #0
 801c81e:	d044      	beq.n	801c8aa <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801c820:	f104 0804 	add.w	r8, r4, #4
 801c824:	a803      	add	r0, sp, #12
 801c826:	4641      	mov	r1, r8
 801c828:	f7ff fe14 	bl	801c454 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c82c:	792b      	ldrb	r3, [r5, #4]
 801c82e:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801c832:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 801c836:	b983      	cbnz	r3, 801c85a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 801c838:	f104 0336 	add.w	r3, r4, #54	; 0x36
 801c83c:	892a      	ldrh	r2, [r5, #8]
 801c83e:	88e9      	ldrh	r1, [r5, #6]
 801c840:	4640      	mov	r0, r8
 801c842:	1b92      	subs	r2, r2, r6
 801c844:	9301      	str	r3, [sp, #4]
 801c846:	1bc9      	subs	r1, r1, r7
 801c848:	f104 0334 	add.w	r3, r4, #52	; 0x34
 801c84c:	b212      	sxth	r2, r2
 801c84e:	9300      	str	r3, [sp, #0]
 801c850:	b209      	sxth	r1, r1
 801c852:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801c856:	f7fa fdbb 	bl	80173d0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 801c85a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801c85c:	b329      	cbz	r1, 801c8aa <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801c85e:	a805      	add	r0, sp, #20
 801c860:	f7ff fdf8 	bl	801c454 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c864:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801c868:	792b      	ldrb	r3, [r5, #4]
 801c86a:	a907      	add	r1, sp, #28
 801c86c:	1abf      	subs	r7, r7, r2
 801c86e:	88ea      	ldrh	r2, [r5, #6]
 801c870:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801c872:	4417      	add	r7, r2
 801c874:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 801c876:	f88d 3020 	strb.w	r3, [sp, #32]
 801c87a:	4417      	add	r7, r2
 801c87c:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801c880:	1ab6      	subs	r6, r6, r2
 801c882:	892a      	ldrh	r2, [r5, #8]
 801c884:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 801c888:	4416      	add	r6, r2
 801c88a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801c88c:	4416      	add	r6, r2
 801c88e:	4a08      	ldr	r2, [pc, #32]	; (801c8b0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 801c890:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 801c894:	2600      	movs	r6, #0
 801c896:	9207      	str	r2, [sp, #28]
 801c898:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 801c89c:	6803      	ldr	r3, [r0, #0]
 801c89e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c8a0:	4798      	blx	r3
 801c8a2:	792b      	ldrb	r3, [r5, #4]
 801c8a4:	b10b      	cbz	r3, 801c8aa <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801c8a6:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 801c8aa:	b00a      	add	sp, #40	; 0x28
 801c8ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c8b0:	0802ff74 	.word	0x0802ff74

0801c8b4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801c8b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c8b8:	460c      	mov	r4, r1
 801c8ba:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801c8bc:	b088      	sub	sp, #32
 801c8be:	4605      	mov	r5, r0
 801c8c0:	2900      	cmp	r1, #0
 801c8c2:	d06d      	beq.n	801c9a0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 801c8c4:	4668      	mov	r0, sp
 801c8c6:	f7ff fdc5 	bl	801c454 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c8ca:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 801c8cc:	88e3      	ldrh	r3, [r4, #6]
 801c8ce:	f9bd 8000 	ldrsh.w	r8, [sp]
 801c8d2:	440b      	add	r3, r1
 801c8d4:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 801c8d8:	b21b      	sxth	r3, r3
 801c8da:	4543      	cmp	r3, r8
 801c8dc:	db31      	blt.n	801c942 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801c8de:	f8bd c004 	ldrh.w	ip, [sp, #4]
 801c8e2:	44c4      	add	ip, r8
 801c8e4:	fa0f fc8c 	sxth.w	ip, ip
 801c8e8:	4563      	cmp	r3, ip
 801c8ea:	da2a      	bge.n	801c942 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801c8ec:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 801c8ee:	8926      	ldrh	r6, [r4, #8]
 801c8f0:	4416      	add	r6, r2
 801c8f2:	b236      	sxth	r6, r6
 801c8f4:	42be      	cmp	r6, r7
 801c8f6:	db24      	blt.n	801c942 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801c8f8:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801c8fc:	4438      	add	r0, r7
 801c8fe:	b200      	sxth	r0, r0
 801c900:	4286      	cmp	r6, r0
 801c902:	da1e      	bge.n	801c942 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801c904:	8963      	ldrh	r3, [r4, #10]
 801c906:	4419      	add	r1, r3
 801c908:	b209      	sxth	r1, r1
 801c90a:	4541      	cmp	r1, r8
 801c90c:	db08      	blt.n	801c920 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801c90e:	4561      	cmp	r1, ip
 801c910:	da06      	bge.n	801c920 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801c912:	89a3      	ldrh	r3, [r4, #12]
 801c914:	441a      	add	r2, r3
 801c916:	b212      	sxth	r2, r2
 801c918:	42ba      	cmp	r2, r7
 801c91a:	db01      	blt.n	801c920 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801c91c:	4282      	cmp	r2, r0
 801c91e:	db10      	blt.n	801c942 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801c920:	4b21      	ldr	r3, [pc, #132]	; (801c9a8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 801c922:	a904      	add	r1, sp, #16
 801c924:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801c926:	9304      	str	r3, [sp, #16]
 801c928:	2302      	movs	r3, #2
 801c92a:	f88d 3014 	strb.w	r3, [sp, #20]
 801c92e:	2300      	movs	r3, #0
 801c930:	f8ad 3016 	strh.w	r3, [sp, #22]
 801c934:	f8ad 3018 	strh.w	r3, [sp, #24]
 801c938:	f8ad 301a 	strh.w	r3, [sp, #26]
 801c93c:	6803      	ldr	r3, [r0, #0]
 801c93e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c940:	4798      	blx	r3
 801c942:	1d29      	adds	r1, r5, #4
 801c944:	a802      	add	r0, sp, #8
 801c946:	f7ff fd85 	bl	801c454 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c94a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801c94e:	88e0      	ldrh	r0, [r4, #6]
 801c950:	eba3 0808 	sub.w	r8, r3, r8
 801c954:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801c958:	7921      	ldrb	r1, [r4, #4]
 801c95a:	fa1f f888 	uxth.w	r8, r8
 801c95e:	1bdf      	subs	r7, r3, r7
 801c960:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 801c964:	b2bb      	uxth	r3, r7
 801c966:	4440      	add	r0, r8
 801c968:	8922      	ldrh	r2, [r4, #8]
 801c96a:	8967      	ldrh	r7, [r4, #10]
 801c96c:	4460      	add	r0, ip
 801c96e:	89a4      	ldrh	r4, [r4, #12]
 801c970:	441a      	add	r2, r3
 801c972:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 801c974:	44b8      	add	r8, r7
 801c976:	4423      	add	r3, r4
 801c978:	f8ad 0016 	strh.w	r0, [sp, #22]
 801c97c:	4432      	add	r2, r6
 801c97e:	44e0      	add	r8, ip
 801c980:	4433      	add	r3, r6
 801c982:	4c0a      	ldr	r4, [pc, #40]	; (801c9ac <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 801c984:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801c986:	f88d 1014 	strb.w	r1, [sp, #20]
 801c98a:	a904      	add	r1, sp, #16
 801c98c:	9404      	str	r4, [sp, #16]
 801c98e:	f8ad 2018 	strh.w	r2, [sp, #24]
 801c992:	f8ad 801a 	strh.w	r8, [sp, #26]
 801c996:	f8ad 301c 	strh.w	r3, [sp, #28]
 801c99a:	6803      	ldr	r3, [r0, #0]
 801c99c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801c99e:	4798      	blx	r3
 801c9a0:	b008      	add	sp, #32
 801c9a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c9a6:	bf00      	nop
 801c9a8:	0802ff74 	.word	0x0802ff74
 801c9ac:	0802ff88 	.word	0x0802ff88

0801c9b0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801c9b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c9b2:	4604      	mov	r4, r0
 801c9b4:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801c9b8:	3201      	adds	r2, #1
 801c9ba:	d112      	bne.n	801c9e2 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801c9bc:	2500      	movs	r5, #0
 801c9be:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801c9c2:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801c9c6:	6803      	ldr	r3, [r0, #0]
 801c9c8:	9500      	str	r5, [sp, #0]
 801c9ca:	466d      	mov	r5, sp
 801c9cc:	f8ad 1004 	strh.w	r1, [sp, #4]
 801c9d0:	f8ad 2006 	strh.w	r2, [sp, #6]
 801c9d4:	4629      	mov	r1, r5
 801c9d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c9d8:	4798      	blx	r3
 801c9da:	e895 0003 	ldmia.w	r5, {r0, r1}
 801c9de:	e884 0003 	stmia.w	r4, {r0, r1}
 801c9e2:	4620      	mov	r0, r4
 801c9e4:	b003      	add	sp, #12
 801c9e6:	bd30      	pop	{r4, r5, pc}

0801c9e8 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801c9e8:	b513      	push	{r0, r1, r4, lr}
 801c9ea:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801c9ee:	4604      	mov	r4, r0
 801c9f0:	3301      	adds	r3, #1
 801c9f2:	d109      	bne.n	801ca08 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801c9f4:	4601      	mov	r1, r0
 801c9f6:	4668      	mov	r0, sp
 801c9f8:	f7ff fd2c 	bl	801c454 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c9fc:	f8bd 3000 	ldrh.w	r3, [sp]
 801ca00:	8423      	strh	r3, [r4, #32]
 801ca02:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801ca06:	8463      	strh	r3, [r4, #34]	; 0x22
 801ca08:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801ca0c:	b002      	add	sp, #8
 801ca0e:	bd10      	pop	{r4, pc}

0801ca10 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801ca10:	b513      	push	{r0, r1, r4, lr}
 801ca12:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801ca16:	4604      	mov	r4, r0
 801ca18:	3301      	adds	r3, #1
 801ca1a:	d109      	bne.n	801ca30 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801ca1c:	4601      	mov	r1, r0
 801ca1e:	4668      	mov	r0, sp
 801ca20:	f7ff fd18 	bl	801c454 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801ca24:	f8bd 3000 	ldrh.w	r3, [sp]
 801ca28:	8423      	strh	r3, [r4, #32]
 801ca2a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801ca2e:	8463      	strh	r3, [r4, #34]	; 0x22
 801ca30:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 801ca34:	b002      	add	sp, #8
 801ca36:	bd10      	pop	{r4, pc}

0801ca38 <_ZN8touchgfx6ScreenC1Ev>:
 801ca38:	b570      	push	{r4, r5, r6, lr}
 801ca3a:	4b17      	ldr	r3, [pc, #92]	; (801ca98 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 801ca3c:	4605      	mov	r5, r0
 801ca3e:	4a17      	ldr	r2, [pc, #92]	; (801ca9c <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801ca40:	2101      	movs	r1, #1
 801ca42:	f845 3b04 	str.w	r3, [r5], #4
 801ca46:	2300      	movs	r3, #0
 801ca48:	6042      	str	r2, [r0, #4]
 801ca4a:	4604      	mov	r4, r0
 801ca4c:	8103      	strh	r3, [r0, #8]
 801ca4e:	8143      	strh	r3, [r0, #10]
 801ca50:	8183      	strh	r3, [r0, #12]
 801ca52:	81c3      	strh	r3, [r0, #14]
 801ca54:	8203      	strh	r3, [r0, #16]
 801ca56:	8243      	strh	r3, [r0, #18]
 801ca58:	8283      	strh	r3, [r0, #20]
 801ca5a:	82c3      	strh	r3, [r0, #22]
 801ca5c:	6203      	str	r3, [r0, #32]
 801ca5e:	8483      	strh	r3, [r0, #36]	; 0x24
 801ca60:	84c3      	strh	r3, [r0, #38]	; 0x26
 801ca62:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 801ca66:	6343      	str	r3, [r0, #52]	; 0x34
 801ca68:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 801ca6c:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 801ca70:	e9c0 3306 	strd	r3, r3, [r0, #24]
 801ca74:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 801ca78:	4b09      	ldr	r3, [pc, #36]	; (801caa0 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801ca7a:	4628      	mov	r0, r5
 801ca7c:	f9b3 6000 	ldrsh.w	r6, [r3]
 801ca80:	6b93      	ldr	r3, [r2, #56]	; 0x38
 801ca82:	4a08      	ldr	r2, [pc, #32]	; (801caa4 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801ca84:	f9b2 1000 	ldrsh.w	r1, [r2]
 801ca88:	4798      	blx	r3
 801ca8a:	6863      	ldr	r3, [r4, #4]
 801ca8c:	4628      	mov	r0, r5
 801ca8e:	4631      	mov	r1, r6
 801ca90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ca92:	4798      	blx	r3
 801ca94:	4620      	mov	r0, r4
 801ca96:	bd70      	pop	{r4, r5, r6, pc}
 801ca98:	0802ffb0 	.word	0x0802ffb0
 801ca9c:	0802fa70 	.word	0x0802fa70
 801caa0:	200177ba 	.word	0x200177ba
 801caa4:	200177b8 	.word	0x200177b8

0801caa8 <_ZN8touchgfx6Screen4drawEv>:
 801caa8:	4b09      	ldr	r3, [pc, #36]	; (801cad0 <_ZN8touchgfx6Screen4drawEv+0x28>)
 801caaa:	b507      	push	{r0, r1, r2, lr}
 801caac:	f9b3 2000 	ldrsh.w	r2, [r3]
 801cab0:	2100      	movs	r1, #0
 801cab2:	4b08      	ldr	r3, [pc, #32]	; (801cad4 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801cab4:	9100      	str	r1, [sp, #0]
 801cab6:	4669      	mov	r1, sp
 801cab8:	f9b3 3000 	ldrsh.w	r3, [r3]
 801cabc:	f8ad 2004 	strh.w	r2, [sp, #4]
 801cac0:	f8ad 3006 	strh.w	r3, [sp, #6]
 801cac4:	6803      	ldr	r3, [r0, #0]
 801cac6:	689b      	ldr	r3, [r3, #8]
 801cac8:	4798      	blx	r3
 801caca:	b003      	add	sp, #12
 801cacc:	f85d fb04 	ldr.w	pc, [sp], #4
 801cad0:	200177b8 	.word	0x200177b8
 801cad4:	200177ba 	.word	0x200177ba

0801cad8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801cad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cadc:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801cae0:	b089      	sub	sp, #36	; 0x24
 801cae2:	4680      	mov	r8, r0
 801cae4:	460c      	mov	r4, r1
 801cae6:	2b00      	cmp	r3, #0
 801cae8:	4615      	mov	r5, r2
 801caea:	dd0e      	ble.n	801cb0a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801caec:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801caf0:	2b00      	cmp	r3, #0
 801caf2:	dd0a      	ble.n	801cb0a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801caf4:	4628      	mov	r0, r5
 801caf6:	f7ff ff5b 	bl	801c9b0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801cafa:	4621      	mov	r1, r4
 801cafc:	f7fe fb97 	bl	801b22e <_ZNK8touchgfx4Rect9intersectERKS0_>
 801cb00:	69eb      	ldr	r3, [r5, #28]
 801cb02:	b928      	cbnz	r0, 801cb10 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 801cb04:	461d      	mov	r5, r3
 801cb06:	2b00      	cmp	r3, #0
 801cb08:	d1f4      	bne.n	801caf4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801cb0a:	b009      	add	sp, #36	; 0x24
 801cb0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cb10:	ae04      	add	r6, sp, #16
 801cb12:	2b00      	cmp	r3, #0
 801cb14:	f000 80b5 	beq.w	801cc82 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801cb18:	682b      	ldr	r3, [r5, #0]
 801cb1a:	4629      	mov	r1, r5
 801cb1c:	a802      	add	r0, sp, #8
 801cb1e:	68db      	ldr	r3, [r3, #12]
 801cb20:	4798      	blx	r3
 801cb22:	4628      	mov	r0, r5
 801cb24:	f7ff ff60 	bl	801c9e8 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801cb28:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801cb2c:	4407      	add	r7, r0
 801cb2e:	4628      	mov	r0, r5
 801cb30:	f7ff ff6e 	bl	801ca10 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801cb34:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801cb38:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801cb3c:	b23f      	sxth	r7, r7
 801cb3e:	4418      	add	r0, r3
 801cb40:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801cb44:	4621      	mov	r1, r4
 801cb46:	f8ad 2014 	strh.w	r2, [sp, #20]
 801cb4a:	f8ad 0012 	strh.w	r0, [sp, #18]
 801cb4e:	4630      	mov	r0, r6
 801cb50:	f8ad 3016 	strh.w	r3, [sp, #22]
 801cb54:	f8ad 7010 	strh.w	r7, [sp, #16]
 801cb58:	f7fa fd1c 	bl	8017594 <_ZN8touchgfx4RectaNERKS0_>
 801cb5c:	4628      	mov	r0, r5
 801cb5e:	f7ff ff27 	bl	801c9b0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801cb62:	ab06      	add	r3, sp, #24
 801cb64:	4602      	mov	r2, r0
 801cb66:	e896 0003 	ldmia.w	r6, {r0, r1}
 801cb6a:	e883 0003 	stmia.w	r3, {r0, r1}
 801cb6e:	4611      	mov	r1, r2
 801cb70:	4618      	mov	r0, r3
 801cb72:	f7fa fd0f 	bl	8017594 <_ZN8touchgfx4RectaNERKS0_>
 801cb76:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801cb7a:	f9b4 1000 	ldrsh.w	r1, [r4]
 801cb7e:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801cb82:	4299      	cmp	r1, r3
 801cb84:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801cb88:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801cb8c:	d10b      	bne.n	801cba6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801cb8e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801cb92:	4552      	cmp	r2, sl
 801cb94:	d107      	bne.n	801cba6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801cb96:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801cb9a:	455a      	cmp	r2, fp
 801cb9c:	d103      	bne.n	801cba6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801cb9e:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801cba2:	454a      	cmp	r2, r9
 801cba4:	d06d      	beq.n	801cc82 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801cba6:	f1bb 0f00 	cmp.w	fp, #0
 801cbaa:	dd65      	ble.n	801cc78 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801cbac:	f1b9 0f00 	cmp.w	r9, #0
 801cbb0:	dd62      	ble.n	801cc78 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801cbb2:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801cbb6:	fa1f f08a 	uxth.w	r0, sl
 801cbba:	4552      	cmp	r2, sl
 801cbbc:	9000      	str	r0, [sp, #0]
 801cbbe:	da12      	bge.n	801cbe6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 801cbc0:	9301      	str	r3, [sp, #4]
 801cbc2:	9b00      	ldr	r3, [sp, #0]
 801cbc4:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801cbc8:	f8ad 2012 	strh.w	r2, [sp, #18]
 801cbcc:	1a9a      	subs	r2, r3, r2
 801cbce:	f8ad 1010 	strh.w	r1, [sp, #16]
 801cbd2:	4631      	mov	r1, r6
 801cbd4:	f8ad 0014 	strh.w	r0, [sp, #20]
 801cbd8:	4640      	mov	r0, r8
 801cbda:	f8ad 2016 	strh.w	r2, [sp, #22]
 801cbde:	69ea      	ldr	r2, [r5, #28]
 801cbe0:	f7ff ff7a 	bl	801cad8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801cbe4:	9b01      	ldr	r3, [sp, #4]
 801cbe6:	f9b4 2000 	ldrsh.w	r2, [r4]
 801cbea:	b29f      	uxth	r7, r3
 801cbec:	429a      	cmp	r2, r3
 801cbee:	da0d      	bge.n	801cc0c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 801cbf0:	f8ad 2010 	strh.w	r2, [sp, #16]
 801cbf4:	1aba      	subs	r2, r7, r2
 801cbf6:	f8ad a012 	strh.w	sl, [sp, #18]
 801cbfa:	4631      	mov	r1, r6
 801cbfc:	f8ad 2014 	strh.w	r2, [sp, #20]
 801cc00:	4640      	mov	r0, r8
 801cc02:	f8ad 9016 	strh.w	r9, [sp, #22]
 801cc06:	69ea      	ldr	r2, [r5, #28]
 801cc08:	f7ff ff66 	bl	801cad8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801cc0c:	8822      	ldrh	r2, [r4, #0]
 801cc0e:	445f      	add	r7, fp
 801cc10:	88a3      	ldrh	r3, [r4, #4]
 801cc12:	b2bf      	uxth	r7, r7
 801cc14:	4413      	add	r3, r2
 801cc16:	b23a      	sxth	r2, r7
 801cc18:	b29b      	uxth	r3, r3
 801cc1a:	b219      	sxth	r1, r3
 801cc1c:	4291      	cmp	r1, r2
 801cc1e:	dd0d      	ble.n	801cc3c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 801cc20:	1bdb      	subs	r3, r3, r7
 801cc22:	f8ad 2010 	strh.w	r2, [sp, #16]
 801cc26:	f8ad a012 	strh.w	sl, [sp, #18]
 801cc2a:	4631      	mov	r1, r6
 801cc2c:	f8ad 3014 	strh.w	r3, [sp, #20]
 801cc30:	4640      	mov	r0, r8
 801cc32:	f8ad 9016 	strh.w	r9, [sp, #22]
 801cc36:	69ea      	ldr	r2, [r5, #28]
 801cc38:	f7ff ff4e 	bl	801cad8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801cc3c:	88e2      	ldrh	r2, [r4, #6]
 801cc3e:	8863      	ldrh	r3, [r4, #2]
 801cc40:	4413      	add	r3, r2
 801cc42:	9a00      	ldr	r2, [sp, #0]
 801cc44:	444a      	add	r2, r9
 801cc46:	b29b      	uxth	r3, r3
 801cc48:	fa1f f982 	uxth.w	r9, r2
 801cc4c:	b219      	sxth	r1, r3
 801cc4e:	fa0f f289 	sxth.w	r2, r9
 801cc52:	428a      	cmp	r2, r1
 801cc54:	da15      	bge.n	801cc82 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801cc56:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801cc5a:	eba3 0309 	sub.w	r3, r3, r9
 801cc5e:	f9b4 0000 	ldrsh.w	r0, [r4]
 801cc62:	f8ad 1014 	strh.w	r1, [sp, #20]
 801cc66:	4631      	mov	r1, r6
 801cc68:	f8ad 0010 	strh.w	r0, [sp, #16]
 801cc6c:	f8ad 2012 	strh.w	r2, [sp, #18]
 801cc70:	f8ad 3016 	strh.w	r3, [sp, #22]
 801cc74:	69ea      	ldr	r2, [r5, #28]
 801cc76:	e001      	b.n	801cc7c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 801cc78:	69ea      	ldr	r2, [r5, #28]
 801cc7a:	4621      	mov	r1, r4
 801cc7c:	4640      	mov	r0, r8
 801cc7e:	f7ff ff2b 	bl	801cad8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801cc82:	4628      	mov	r0, r5
 801cc84:	f7ff fe94 	bl	801c9b0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801cc88:	6861      	ldr	r1, [r4, #4]
 801cc8a:	4602      	mov	r2, r0
 801cc8c:	4633      	mov	r3, r6
 801cc8e:	6820      	ldr	r0, [r4, #0]
 801cc90:	c303      	stmia	r3!, {r0, r1}
 801cc92:	4611      	mov	r1, r2
 801cc94:	4630      	mov	r0, r6
 801cc96:	f7fa fc7d 	bl	8017594 <_ZN8touchgfx4RectaNERKS0_>
 801cc9a:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801cc9e:	2b00      	cmp	r3, #0
 801cca0:	f77f af33 	ble.w	801cb0a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801cca4:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801cca8:	2b00      	cmp	r3, #0
 801ccaa:	f77f af2e 	ble.w	801cb0a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801ccae:	4628      	mov	r0, r5
 801ccb0:	f7ff fe9a 	bl	801c9e8 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801ccb4:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801ccb8:	1a18      	subs	r0, r3, r0
 801ccba:	f8ad 0010 	strh.w	r0, [sp, #16]
 801ccbe:	4628      	mov	r0, r5
 801ccc0:	f7ff fea6 	bl	801ca10 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801ccc4:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801ccc8:	4631      	mov	r1, r6
 801ccca:	1a18      	subs	r0, r3, r0
 801cccc:	f8ad 0012 	strh.w	r0, [sp, #18]
 801ccd0:	4628      	mov	r0, r5
 801ccd2:	682b      	ldr	r3, [r5, #0]
 801ccd4:	689b      	ldr	r3, [r3, #8]
 801ccd6:	4798      	blx	r3
 801ccd8:	e717      	b.n	801cb0a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0801ccda <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801ccda:	b570      	push	{r4, r5, r6, lr}
 801ccdc:	1d06      	adds	r6, r0, #4
 801ccde:	b086      	sub	sp, #24
 801cce0:	460c      	mov	r4, r1
 801cce2:	2300      	movs	r3, #0
 801cce4:	4631      	mov	r1, r6
 801cce6:	4605      	mov	r5, r0
 801cce8:	a802      	add	r0, sp, #8
 801ccea:	9301      	str	r3, [sp, #4]
 801ccec:	f7ff fbb2 	bl	801c454 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801ccf0:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801ccf4:	8822      	ldrh	r2, [r4, #0]
 801ccf6:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 801ccfa:	1ad2      	subs	r2, r2, r3
 801ccfc:	8863      	ldrh	r3, [r4, #2]
 801ccfe:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801cd02:	1a5b      	subs	r3, r3, r1
 801cd04:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801cd08:	f8ad 2010 	strh.w	r2, [sp, #16]
 801cd0c:	aa01      	add	r2, sp, #4
 801cd0e:	f8ad 0014 	strh.w	r0, [sp, #20]
 801cd12:	4630      	mov	r0, r6
 801cd14:	f8ad 1016 	strh.w	r1, [sp, #22]
 801cd18:	a904      	add	r1, sp, #16
 801cd1a:	f8ad 3012 	strh.w	r3, [sp, #18]
 801cd1e:	f7fa fd11 	bl	8017744 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801cd22:	9a01      	ldr	r2, [sp, #4]
 801cd24:	b11a      	cbz	r2, 801cd2e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 801cd26:	4621      	mov	r1, r4
 801cd28:	4628      	mov	r0, r5
 801cd2a:	f7ff fed5 	bl	801cad8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801cd2e:	b006      	add	sp, #24
 801cd30:	bd70      	pop	{r4, r5, r6, pc}

0801cd32 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801cd32:	4602      	mov	r2, r0
 801cd34:	b530      	push	{r4, r5, lr}
 801cd36:	4604      	mov	r4, r0
 801cd38:	b085      	sub	sp, #20
 801cd3a:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801cd3e:	460d      	mov	r5, r1
 801cd40:	466b      	mov	r3, sp
 801cd42:	6851      	ldr	r1, [r2, #4]
 801cd44:	c303      	stmia	r3!, {r0, r1}
 801cd46:	4629      	mov	r1, r5
 801cd48:	4668      	mov	r0, sp
 801cd4a:	f7fa fc23 	bl	8017594 <_ZN8touchgfx4RectaNERKS0_>
 801cd4e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801cd52:	b12b      	cbz	r3, 801cd60 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 801cd54:	4669      	mov	r1, sp
 801cd56:	4620      	mov	r0, r4
 801cd58:	f7ff ffbf 	bl	801ccda <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801cd5c:	b005      	add	sp, #20
 801cd5e:	bd30      	pop	{r4, r5, pc}
 801cd60:	3404      	adds	r4, #4
 801cd62:	a802      	add	r0, sp, #8
 801cd64:	4621      	mov	r1, r4
 801cd66:	f7ff fb75 	bl	801c454 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801cd6a:	f8bd 3000 	ldrh.w	r3, [sp]
 801cd6e:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801cd72:	4669      	mov	r1, sp
 801cd74:	4620      	mov	r0, r4
 801cd76:	1a9b      	subs	r3, r3, r2
 801cd78:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801cd7c:	f8ad 3000 	strh.w	r3, [sp]
 801cd80:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801cd84:	1a9b      	subs	r3, r3, r2
 801cd86:	f8ad 3002 	strh.w	r3, [sp, #2]
 801cd8a:	f7fa fca2 	bl	80176d2 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801cd8e:	e7e5      	b.n	801cd5c <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

0801cd90 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801cd90:	460b      	mov	r3, r1
 801cd92:	680a      	ldr	r2, [r1, #0]
 801cd94:	1d01      	adds	r1, r0, #4
 801cd96:	6992      	ldr	r2, [r2, #24]
 801cd98:	4618      	mov	r0, r3
 801cd9a:	4710      	bx	r2

0801cd9c <_ZN8touchgfx12TextProviderC1Ev>:
 801cd9c:	b538      	push	{r3, r4, r5, lr}
 801cd9e:	2500      	movs	r5, #0
 801cda0:	2302      	movs	r3, #2
 801cda2:	4604      	mov	r4, r0
 801cda4:	220e      	movs	r2, #14
 801cda6:	7403      	strb	r3, [r0, #16]
 801cda8:	4629      	mov	r1, r5
 801cdaa:	6145      	str	r5, [r0, #20]
 801cdac:	7605      	strb	r5, [r0, #24]
 801cdae:	83c5      	strh	r5, [r0, #30]
 801cdb0:	8405      	strh	r5, [r0, #32]
 801cdb2:	86c5      	strh	r5, [r0, #54]	; 0x36
 801cdb4:	8705      	strh	r5, [r0, #56]	; 0x38
 801cdb6:	87c5      	strh	r5, [r0, #62]	; 0x3e
 801cdb8:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 801cdbc:	e9c0 5500 	strd	r5, r5, [r0]
 801cdc0:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 801cdc4:	304c      	adds	r0, #76	; 0x4c
 801cdc6:	f00d fa25 	bl	802a214 <memset>
 801cdca:	2301      	movs	r3, #1
 801cdcc:	4620      	mov	r0, r4
 801cdce:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 801cdd2:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801cdd6:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 801cdda:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 801cdde:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 801cde2:	f7e6 fe4f 	bl	8003a84 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801cde6:	4620      	mov	r0, r4
 801cde8:	bd38      	pop	{r3, r4, r5, pc}

0801cdea <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801cdea:	b530      	push	{r4, r5, lr}
 801cdec:	2500      	movs	r5, #0
 801cdee:	2401      	movs	r4, #1
 801cdf0:	6843      	ldr	r3, [r0, #4]
 801cdf2:	b913      	cbnz	r3, 801cdfa <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801cdf4:	6803      	ldr	r3, [r0, #0]
 801cdf6:	b313      	cbz	r3, 801ce3e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801cdf8:	6043      	str	r3, [r0, #4]
 801cdfa:	7e03      	ldrb	r3, [r0, #24]
 801cdfc:	b143      	cbz	r3, 801ce10 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801cdfe:	6943      	ldr	r3, [r0, #20]
 801ce00:	b12b      	cbz	r3, 801ce0e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801ce02:	881a      	ldrh	r2, [r3, #0]
 801ce04:	b11a      	cbz	r2, 801ce0e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801ce06:	1c9a      	adds	r2, r3, #2
 801ce08:	6142      	str	r2, [r0, #20]
 801ce0a:	8818      	ldrh	r0, [r3, #0]
 801ce0c:	bd30      	pop	{r4, r5, pc}
 801ce0e:	7605      	strb	r5, [r0, #24]
 801ce10:	6843      	ldr	r3, [r0, #4]
 801ce12:	8819      	ldrh	r1, [r3, #0]
 801ce14:	b199      	cbz	r1, 801ce3e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801ce16:	1c9a      	adds	r2, r3, #2
 801ce18:	2902      	cmp	r1, #2
 801ce1a:	6042      	str	r2, [r0, #4]
 801ce1c:	d1f5      	bne.n	801ce0a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801ce1e:	7c03      	ldrb	r3, [r0, #16]
 801ce20:	2b01      	cmp	r3, #1
 801ce22:	d8e5      	bhi.n	801cdf0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801ce24:	1c5a      	adds	r2, r3, #1
 801ce26:	3302      	adds	r3, #2
 801ce28:	7402      	strb	r2, [r0, #16]
 801ce2a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801ce2e:	6143      	str	r3, [r0, #20]
 801ce30:	2b00      	cmp	r3, #0
 801ce32:	d0dd      	beq.n	801cdf0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801ce34:	881b      	ldrh	r3, [r3, #0]
 801ce36:	2b00      	cmp	r3, #0
 801ce38:	d0da      	beq.n	801cdf0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801ce3a:	7604      	strb	r4, [r0, #24]
 801ce3c:	e7d8      	b.n	801cdf0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801ce3e:	2000      	movs	r0, #0
 801ce40:	e7e4      	b.n	801ce0c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801ce42 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 801ce42:	6001      	str	r1, [r0, #0]
 801ce44:	2100      	movs	r1, #0
 801ce46:	b430      	push	{r4, r5}
 801ce48:	6041      	str	r1, [r0, #4]
 801ce4a:	6815      	ldr	r5, [r2, #0]
 801ce4c:	6085      	str	r5, [r0, #8]
 801ce4e:	6852      	ldr	r2, [r2, #4]
 801ce50:	6443      	str	r3, [r0, #68]	; 0x44
 801ce52:	9b02      	ldr	r3, [sp, #8]
 801ce54:	60c2      	str	r2, [r0, #12]
 801ce56:	7401      	strb	r1, [r0, #16]
 801ce58:	6141      	str	r1, [r0, #20]
 801ce5a:	7601      	strb	r1, [r0, #24]
 801ce5c:	8701      	strh	r1, [r0, #56]	; 0x38
 801ce5e:	8401      	strh	r1, [r0, #32]
 801ce60:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 801ce64:	6483      	str	r3, [r0, #72]	; 0x48
 801ce66:	bc30      	pop	{r4, r5}
 801ce68:	f7e6 be0c 	b.w	8003a84 <_ZN8touchgfx12TextProvider18initializeInternalEv>

0801ce6c <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801ce6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ce6e:	4605      	mov	r5, r0
 801ce70:	4608      	mov	r0, r1
 801ce72:	b1f1      	cbz	r1, 801ceb2 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 801ce74:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 801ce78:	460b      	mov	r3, r1
 801ce7a:	f101 0708 	add.w	r7, r1, #8
 801ce7e:	4622      	mov	r2, r4
 801ce80:	6818      	ldr	r0, [r3, #0]
 801ce82:	3308      	adds	r3, #8
 801ce84:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801ce88:	4626      	mov	r6, r4
 801ce8a:	42bb      	cmp	r3, r7
 801ce8c:	c603      	stmia	r6!, {r0, r1}
 801ce8e:	4634      	mov	r4, r6
 801ce90:	d1f6      	bne.n	801ce80 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801ce92:	6818      	ldr	r0, [r3, #0]
 801ce94:	6030      	str	r0, [r6, #0]
 801ce96:	4610      	mov	r0, r2
 801ce98:	889b      	ldrh	r3, [r3, #4]
 801ce9a:	80b3      	strh	r3, [r6, #4]
 801ce9c:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 801cea0:	015b      	lsls	r3, r3, #5
 801cea2:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801cea6:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 801ceaa:	430b      	orrs	r3, r1
 801ceac:	425b      	negs	r3, r3
 801ceae:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 801ceb2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801ceb4 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801ceb4:	b538      	push	{r3, r4, r5, lr}
 801ceb6:	460c      	mov	r4, r1
 801ceb8:	6811      	ldr	r1, [r2, #0]
 801ceba:	4610      	mov	r0, r2
 801cebc:	68cd      	ldr	r5, [r1, #12]
 801cebe:	4619      	mov	r1, r3
 801cec0:	47a8      	blx	r5
 801cec2:	2800      	cmp	r0, #0
 801cec4:	bf08      	it	eq
 801cec6:	4620      	moveq	r0, r4
 801cec8:	bd38      	pop	{r3, r4, r5, pc}
	...

0801cecc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801cecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cece:	4604      	mov	r4, r0
 801ced0:	4615      	mov	r5, r2
 801ced2:	4608      	mov	r0, r1
 801ced4:	b93a      	cbnz	r2, 801cee6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801ced6:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801ceda:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 801cede:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 801cee2:	4628      	mov	r0, r5
 801cee4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cee6:	f892 c00d 	ldrb.w	ip, [r2, #13]
 801ceea:	f46f 6763 	mvn.w	r7, #3632	; 0xe30
 801ceee:	8893      	ldrh	r3, [r2, #4]
 801cef0:	ea4f 160c 	mov.w	r6, ip, lsl #4
 801cef4:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801cef8:	79ee      	ldrb	r6, [r5, #7]
 801cefa:	4316      	orrs	r6, r2
 801cefc:	19da      	adds	r2, r3, r7
 801cefe:	b291      	uxth	r1, r2
 801cf00:	b2b7      	uxth	r7, r6
 801cf02:	291d      	cmp	r1, #29
 801cf04:	d87b      	bhi.n	801cffe <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 801cf06:	2201      	movs	r2, #1
 801cf08:	10f6      	asrs	r6, r6, #3
 801cf0a:	408a      	lsls	r2, r1
 801cf0c:	4974      	ldr	r1, [pc, #464]	; (801d0e0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
 801cf0e:	420a      	tst	r2, r1
 801cf10:	d12e      	bne.n	801cf70 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 801cf12:	f412 7f60 	tst.w	r2, #896	; 0x380
 801cf16:	d072      	beq.n	801cffe <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 801cf18:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 801cf1c:	462b      	mov	r3, r5
 801cf1e:	f105 0e08 	add.w	lr, r5, #8
 801cf22:	4615      	mov	r5, r2
 801cf24:	6818      	ldr	r0, [r3, #0]
 801cf26:	3308      	adds	r3, #8
 801cf28:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801cf2c:	4694      	mov	ip, r2
 801cf2e:	4573      	cmp	r3, lr
 801cf30:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801cf34:	4662      	mov	r2, ip
 801cf36:	d1f5      	bne.n	801cf24 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 801cf38:	6818      	ldr	r0, [r3, #0]
 801cf3a:	f8cc 0000 	str.w	r0, [ip]
 801cf3e:	889b      	ldrh	r3, [r3, #4]
 801cf40:	f8ac 3004 	strh.w	r3, [ip, #4]
 801cf44:	b2b3      	uxth	r3, r6
 801cf46:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 801cf4a:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 801cf4e:	1aca      	subs	r2, r1, r3
 801cf50:	1bcf      	subs	r7, r1, r7
 801cf52:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 801cf56:	b292      	uxth	r2, r2
 801cf58:	1afb      	subs	r3, r7, r3
 801cf5a:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 801cf5e:	10d2      	asrs	r2, r2, #3
 801cf60:	f002 0260 	and.w	r2, r2, #96	; 0x60
 801cf64:	4302      	orrs	r2, r0
 801cf66:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 801cf6a:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 801cf6e:	e7b8      	b.n	801cee2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801cf70:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801cf72:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801cf76:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 801cf78:	f640 6333 	movw	r3, #3635	; 0xe33
 801cf7c:	4299      	cmp	r1, r3
 801cf7e:	d110      	bne.n	801cfa2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd6>
 801cf80:	6803      	ldr	r3, [r0, #0]
 801cf82:	68db      	ldr	r3, [r3, #12]
 801cf84:	4798      	blx	r3
 801cf86:	7b41      	ldrb	r1, [r0, #13]
 801cf88:	00cb      	lsls	r3, r1, #3
 801cf8a:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801cf8e:	7a03      	ldrb	r3, [r0, #8]
 801cf90:	0648      	lsls	r0, r1, #25
 801cf92:	ea43 0302 	orr.w	r3, r3, r2
 801cf96:	bf44      	itt	mi
 801cf98:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801cf9c:	b21b      	sxthmi	r3, r3
 801cf9e:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801cfa2:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 801cfa6:	462a      	mov	r2, r5
 801cfa8:	f105 0c08 	add.w	ip, r5, #8
 801cfac:	443b      	add	r3, r7
 801cfae:	4433      	add	r3, r6
 801cfb0:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 801cfb4:	b29b      	uxth	r3, r3
 801cfb6:	4635      	mov	r5, r6
 801cfb8:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801cfbc:	6810      	ldr	r0, [r2, #0]
 801cfbe:	3208      	adds	r2, #8
 801cfc0:	f852 1c04 	ldr.w	r1, [r2, #-4]
 801cfc4:	4637      	mov	r7, r6
 801cfc6:	4562      	cmp	r2, ip
 801cfc8:	c703      	stmia	r7!, {r0, r1}
 801cfca:	463e      	mov	r6, r7
 801cfcc:	d1f6      	bne.n	801cfbc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf0>
 801cfce:	6810      	ldr	r0, [r2, #0]
 801cfd0:	6038      	str	r0, [r7, #0]
 801cfd2:	8892      	ldrh	r2, [r2, #4]
 801cfd4:	80ba      	strh	r2, [r7, #4]
 801cfd6:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801cfda:	10db      	asrs	r3, r3, #3
 801cfdc:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801cfe0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801cfe4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801cfe8:	4313      	orrs	r3, r2
 801cfea:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 801cfee:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801cff2:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 801cff6:	1a9b      	subs	r3, r3, r2
 801cff8:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 801cffc:	e771      	b.n	801cee2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801cffe:	f023 0204 	bic.w	r2, r3, #4
 801d002:	f640 611b 	movw	r1, #3611	; 0xe1b
 801d006:	428a      	cmp	r2, r1
 801d008:	d003      	beq.n	801d012 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x146>
 801d00a:	f640 621d 	movw	r2, #3613	; 0xe1d
 801d00e:	4293      	cmp	r3, r2
 801d010:	d120      	bne.n	801d054 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x188>
 801d012:	3b01      	subs	r3, #1
 801d014:	4602      	mov	r2, r0
 801d016:	4629      	mov	r1, r5
 801d018:	4620      	mov	r0, r4
 801d01a:	b29b      	uxth	r3, r3
 801d01c:	f7ff ff4a 	bl	801ceb4 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801d020:	7b41      	ldrb	r1, [r0, #13]
 801d022:	00cb      	lsls	r3, r1, #3
 801d024:	0649      	lsls	r1, r1, #25
 801d026:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801d02a:	7a03      	ldrb	r3, [r0, #8]
 801d02c:	ea43 0302 	orr.w	r3, r3, r2
 801d030:	bf44      	itt	mi
 801d032:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801d036:	b21b      	sxthmi	r3, r3
 801d038:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801d03c:	7b6b      	ldrb	r3, [r5, #13]
 801d03e:	7aaa      	ldrb	r2, [r5, #10]
 801d040:	005b      	lsls	r3, r3, #1
 801d042:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d046:	4313      	orrs	r3, r2
 801d048:	115a      	asrs	r2, r3, #5
 801d04a:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801d04e:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801d052:	e035      	b.n	801d0c0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f4>
 801d054:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 801d058:	f01c 0f40 	tst.w	ip, #64	; 0x40
 801d05c:	f402 7180 	and.w	r1, r2, #256	; 0x100
 801d060:	7a2a      	ldrb	r2, [r5, #8]
 801d062:	ea42 0201 	orr.w	r2, r2, r1
 801d066:	f640 6109 	movw	r1, #3593	; 0xe09
 801d06a:	bf1c      	itt	ne
 801d06c:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 801d070:	b212      	sxthne	r2, r2
 801d072:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801d076:	f023 0210 	bic.w	r2, r3, #16
 801d07a:	428a      	cmp	r2, r1
 801d07c:	d003      	beq.n	801d086 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 801d07e:	f640 6213 	movw	r2, #3603	; 0xe13
 801d082:	4293      	cmp	r3, r2
 801d084:	d129      	bne.n	801d0da <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20e>
 801d086:	7b6e      	ldrb	r6, [r5, #13]
 801d088:	4629      	mov	r1, r5
 801d08a:	0076      	lsls	r6, r6, #1
 801d08c:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801d090:	7aae      	ldrb	r6, [r5, #10]
 801d092:	4316      	orrs	r6, r2
 801d094:	f640 6213 	movw	r2, #3603	; 0xe13
 801d098:	4293      	cmp	r3, r2
 801d09a:	4602      	mov	r2, r0
 801d09c:	4620      	mov	r0, r4
 801d09e:	bf16      	itet	ne
 801d0a0:	f103 33ff 	addne.w	r3, r3, #4294967295
 801d0a4:	f640 630c 	movweq	r3, #3596	; 0xe0c
 801d0a8:	b29b      	uxthne	r3, r3
 801d0aa:	f7ff ff03 	bl	801ceb4 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801d0ae:	7b43      	ldrb	r3, [r0, #13]
 801d0b0:	7a82      	ldrb	r2, [r0, #10]
 801d0b2:	005b      	lsls	r3, r3, #1
 801d0b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d0b8:	4313      	orrs	r3, r2
 801d0ba:	1af6      	subs	r6, r6, r3
 801d0bc:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 801d0c0:	7b69      	ldrb	r1, [r5, #13]
 801d0c2:	00cb      	lsls	r3, r1, #3
 801d0c4:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801d0c8:	7a2b      	ldrb	r3, [r5, #8]
 801d0ca:	4313      	orrs	r3, r2
 801d0cc:	064a      	lsls	r2, r1, #25
 801d0ce:	bf44      	itt	mi
 801d0d0:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801d0d4:	b21b      	sxthmi	r3, r3
 801d0d6:	1bdb      	subs	r3, r3, r7
 801d0d8:	e747      	b.n	801cf6a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 801d0da:	2300      	movs	r3, #0
 801d0dc:	e7b7      	b.n	801d04e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x182>
 801d0de:	bf00      	nop
 801d0e0:	3fc00079 	.word	0x3fc00079

0801d0e4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 801d0e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d0e8:	4604      	mov	r4, r0
 801d0ea:	b942      	cbnz	r2, 801d0fe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 801d0ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801d0f0:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 801d0f4:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 801d0f8:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801d0fc:	e047      	b.n	801d18e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801d0fe:	7b51      	ldrb	r1, [r2, #13]
 801d100:	8893      	ldrh	r3, [r2, #4]
 801d102:	010d      	lsls	r5, r1, #4
 801d104:	f405 7080 	and.w	r0, r5, #256	; 0x100
 801d108:	79d5      	ldrb	r5, [r2, #7]
 801d10a:	4305      	orrs	r5, r0
 801d10c:	2d04      	cmp	r5, #4
 801d10e:	bfcc      	ite	gt
 801d110:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 801d114:	f04f 0e01 	movle.w	lr, #1
 801d118:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 801d11c:	f200 80ab 	bhi.w	801d276 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 801d120:	f240 60e7 	movw	r0, #1767	; 0x6e7
 801d124:	4283      	cmp	r3, r0
 801d126:	d216      	bcs.n	801d156 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d128:	f240 605b 	movw	r0, #1627	; 0x65b
 801d12c:	4283      	cmp	r3, r0
 801d12e:	d859      	bhi.n	801d1e4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 801d130:	f240 6057 	movw	r0, #1623	; 0x657
 801d134:	4283      	cmp	r3, r0
 801d136:	d20e      	bcs.n	801d156 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d138:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801d13c:	d24a      	bcs.n	801d1d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 801d13e:	f240 604e 	movw	r0, #1614	; 0x64e
 801d142:	4283      	cmp	r3, r0
 801d144:	d207      	bcs.n	801d156 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d146:	f240 601a 	movw	r0, #1562	; 0x61a
 801d14a:	4283      	cmp	r3, r0
 801d14c:	d02a      	beq.n	801d1a4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801d14e:	d821      	bhi.n	801d194 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 801d150:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 801d154:	d35b      	bcc.n	801d20e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801d156:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 801d15a:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801d15e:	f040 80d0 	bne.w	801d302 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801d162:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 801d166:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801d16a:	f040 80ca 	bne.w	801d302 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801d16e:	00cb      	lsls	r3, r1, #3
 801d170:	0649      	lsls	r1, r1, #25
 801d172:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801d176:	7a13      	ldrb	r3, [r2, #8]
 801d178:	ea43 0300 	orr.w	r3, r3, r0
 801d17c:	bf44      	itt	mi
 801d17e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801d182:	b21b      	sxthmi	r3, r3
 801d184:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801d188:	1b5d      	subs	r5, r3, r5
 801d18a:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801d18e:	4610      	mov	r0, r2
 801d190:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d194:	f240 604b 	movw	r0, #1611	; 0x64b
 801d198:	4283      	cmp	r3, r0
 801d19a:	d338      	bcc.n	801d20e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801d19c:	f240 604c 	movw	r0, #1612	; 0x64c
 801d1a0:	4283      	cmp	r3, r0
 801d1a2:	d9d8      	bls.n	801d156 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d1a4:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 801d1a8:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 801d1ac:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801d1b0:	f040 80f3 	bne.w	801d39a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 801d1b4:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801d1b8:	f040 80ef 	bne.w	801d39a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 801d1bc:	00cb      	lsls	r3, r1, #3
 801d1be:	064e      	lsls	r6, r1, #25
 801d1c0:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801d1c4:	7a13      	ldrb	r3, [r2, #8]
 801d1c6:	ea43 0300 	orr.w	r3, r3, r0
 801d1ca:	bf44      	itt	mi
 801d1cc:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801d1d0:	b21b      	sxthmi	r3, r3
 801d1d2:	e7d9      	b.n	801d188 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 801d1d4:	f240 6054 	movw	r0, #1620	; 0x654
 801d1d8:	4283      	cmp	r3, r0
 801d1da:	d8e3      	bhi.n	801d1a4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801d1dc:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801d1e0:	d9e0      	bls.n	801d1a4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801d1e2:	e7b8      	b.n	801d156 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d1e4:	f240 6074 	movw	r0, #1652	; 0x674
 801d1e8:	4283      	cmp	r3, r0
 801d1ea:	d0b4      	beq.n	801d156 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d1ec:	d82d      	bhi.n	801d24a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 801d1ee:	f240 605e 	movw	r0, #1630	; 0x65e
 801d1f2:	4283      	cmp	r3, r0
 801d1f4:	d804      	bhi.n	801d200 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 801d1f6:	f240 605d 	movw	r0, #1629	; 0x65d
 801d1fa:	4283      	cmp	r3, r0
 801d1fc:	d3d2      	bcc.n	801d1a4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801d1fe:	e7aa      	b.n	801d156 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d200:	f240 605f 	movw	r0, #1631	; 0x65f
 801d204:	4283      	cmp	r3, r0
 801d206:	d0cd      	beq.n	801d1a4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801d208:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 801d20c:	d0a3      	beq.n	801d156 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d20e:	00cb      	lsls	r3, r1, #3
 801d210:	0649      	lsls	r1, r1, #25
 801d212:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801d216:	7a13      	ldrb	r3, [r2, #8]
 801d218:	ea43 0300 	orr.w	r3, r3, r0
 801d21c:	bf44      	itt	mi
 801d21e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801d222:	b21b      	sxthmi	r3, r3
 801d224:	1b5d      	subs	r5, r3, r5
 801d226:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801d22a:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801d22e:	7b53      	ldrb	r3, [r2, #13]
 801d230:	015b      	lsls	r3, r3, #5
 801d232:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801d236:	7993      	ldrb	r3, [r2, #6]
 801d238:	430b      	orrs	r3, r1
 801d23a:	2105      	movs	r1, #5
 801d23c:	005b      	lsls	r3, r3, #1
 801d23e:	fb93 f3f1 	sdiv	r3, r3, r1
 801d242:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801d246:	440b      	add	r3, r1
 801d248:	e756      	b.n	801d0f8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801d24a:	f240 60e2 	movw	r0, #1762	; 0x6e2
 801d24e:	4283      	cmp	r3, r0
 801d250:	d809      	bhi.n	801d266 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 801d252:	f240 60df 	movw	r0, #1759	; 0x6df
 801d256:	4283      	cmp	r3, r0
 801d258:	f4bf af7d 	bcs.w	801d156 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d25c:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 801d260:	2b05      	cmp	r3, #5
 801d262:	d8d4      	bhi.n	801d20e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801d264:	e777      	b.n	801d156 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d266:	f240 60e3 	movw	r0, #1763	; 0x6e3
 801d26a:	4283      	cmp	r3, r0
 801d26c:	d09a      	beq.n	801d1a4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801d26e:	f240 60e4 	movw	r0, #1764	; 0x6e4
 801d272:	4283      	cmp	r3, r0
 801d274:	e7ca      	b.n	801d20c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801d276:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 801d27a:	d22b      	bcs.n	801d2d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 801d27c:	f640 00ed 	movw	r0, #2285	; 0x8ed
 801d280:	4283      	cmp	r3, r0
 801d282:	d28f      	bcs.n	801d1a4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801d284:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801d288:	4283      	cmp	r3, r0
 801d28a:	d816      	bhi.n	801d2ba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 801d28c:	f640 00e4 	movw	r0, #2276	; 0x8e4
 801d290:	4283      	cmp	r3, r0
 801d292:	f4bf af60 	bcs.w	801d156 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d296:	f240 60ec 	movw	r0, #1772	; 0x6ec
 801d29a:	4283      	cmp	r3, r0
 801d29c:	d80a      	bhi.n	801d2b4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 801d29e:	f240 60eb 	movw	r0, #1771	; 0x6eb
 801d2a2:	4283      	cmp	r3, r0
 801d2a4:	f4bf af57 	bcs.w	801d156 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d2a8:	f240 60ea 	movw	r0, #1770	; 0x6ea
 801d2ac:	4283      	cmp	r3, r0
 801d2ae:	f43f af79 	beq.w	801d1a4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801d2b2:	e7ac      	b.n	801d20e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801d2b4:	f240 60ed 	movw	r0, #1773	; 0x6ed
 801d2b8:	e7f8      	b.n	801d2ac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 801d2ba:	f640 00e8 	movw	r0, #2280	; 0x8e8
 801d2be:	4283      	cmp	r3, r0
 801d2c0:	d802      	bhi.n	801d2c8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 801d2c2:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801d2c6:	e798      	b.n	801d1fa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 801d2c8:	f640 00e9 	movw	r0, #2281	; 0x8e9
 801d2cc:	4283      	cmp	r3, r0
 801d2ce:	f47f af42 	bne.w	801d156 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d2d2:	e767      	b.n	801d1a4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801d2d4:	f640 00f6 	movw	r0, #2294	; 0x8f6
 801d2d8:	4283      	cmp	r3, r0
 801d2da:	f43f af63 	beq.w	801d1a4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801d2de:	d802      	bhi.n	801d2e6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 801d2e0:	f640 00f2 	movw	r0, #2290	; 0x8f2
 801d2e4:	e7f2      	b.n	801d2cc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 801d2e6:	f640 00fa 	movw	r0, #2298	; 0x8fa
 801d2ea:	4283      	cmp	r3, r0
 801d2ec:	d805      	bhi.n	801d2fa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 801d2ee:	f640 00f9 	movw	r0, #2297	; 0x8f9
 801d2f2:	4283      	cmp	r3, r0
 801d2f4:	f4ff af2f 	bcc.w	801d156 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d2f8:	e754      	b.n	801d1a4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801d2fa:	f640 00fe 	movw	r0, #2302	; 0x8fe
 801d2fe:	4283      	cmp	r3, r0
 801d300:	e7af      	b.n	801d262 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 801d302:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 801d306:	4617      	mov	r7, r2
 801d308:	f102 0808 	add.w	r8, r2, #8
 801d30c:	4666      	mov	r6, ip
 801d30e:	6838      	ldr	r0, [r7, #0]
 801d310:	3708      	adds	r7, #8
 801d312:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801d316:	46e6      	mov	lr, ip
 801d318:	4547      	cmp	r7, r8
 801d31a:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801d31e:	46f4      	mov	ip, lr
 801d320:	d1f5      	bne.n	801d30e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 801d322:	6838      	ldr	r0, [r7, #0]
 801d324:	f8ce 0000 	str.w	r0, [lr]
 801d328:	88b9      	ldrh	r1, [r7, #4]
 801d32a:	f8ae 1004 	strh.w	r1, [lr, #4]
 801d32e:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801d332:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801d336:	d009      	beq.n	801d34c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 801d338:	7b51      	ldrb	r1, [r2, #13]
 801d33a:	7992      	ldrb	r2, [r2, #6]
 801d33c:	0149      	lsls	r1, r1, #5
 801d33e:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801d342:	4311      	orrs	r1, r2
 801d344:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801d348:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 801d34c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801d350:	b2ad      	uxth	r5, r5
 801d352:	d00d      	beq.n	801d370 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 801d354:	442b      	add	r3, r5
 801d356:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801d35a:	b29b      	uxth	r3, r3
 801d35c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801d360:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801d364:	10db      	asrs	r3, r3, #3
 801d366:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801d36a:	4313      	orrs	r3, r2
 801d36c:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801d370:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 801d374:	00cb      	lsls	r3, r1, #3
 801d376:	064f      	lsls	r7, r1, #25
 801d378:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801d37c:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801d380:	ea43 0302 	orr.w	r3, r3, r2
 801d384:	bf44      	itt	mi
 801d386:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801d38a:	b21b      	sxthmi	r3, r3
 801d38c:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801d390:	1b5b      	subs	r3, r3, r5
 801d392:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 801d396:	4632      	mov	r2, r6
 801d398:	e6f9      	b.n	801d18e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801d39a:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 801d39e:	4617      	mov	r7, r2
 801d3a0:	f102 0908 	add.w	r9, r2, #8
 801d3a4:	4666      	mov	r6, ip
 801d3a6:	6838      	ldr	r0, [r7, #0]
 801d3a8:	3708      	adds	r7, #8
 801d3aa:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801d3ae:	46e0      	mov	r8, ip
 801d3b0:	454f      	cmp	r7, r9
 801d3b2:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801d3b6:	46c4      	mov	ip, r8
 801d3b8:	d1f5      	bne.n	801d3a6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 801d3ba:	6838      	ldr	r0, [r7, #0]
 801d3bc:	f8c8 0000 	str.w	r0, [r8]
 801d3c0:	88b9      	ldrh	r1, [r7, #4]
 801d3c2:	f8a8 1004 	strh.w	r1, [r8, #4]
 801d3c6:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801d3ca:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801d3ce:	d009      	beq.n	801d3e4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 801d3d0:	7b51      	ldrb	r1, [r2, #13]
 801d3d2:	7992      	ldrb	r2, [r2, #6]
 801d3d4:	0149      	lsls	r1, r1, #5
 801d3d6:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801d3da:	4311      	orrs	r1, r2
 801d3dc:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801d3e0:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 801d3e4:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801d3e8:	d00e      	beq.n	801d408 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 801d3ea:	eba3 030e 	sub.w	r3, r3, lr
 801d3ee:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801d3f2:	b29b      	uxth	r3, r3
 801d3f4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801d3f8:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801d3fc:	10db      	asrs	r3, r3, #3
 801d3fe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801d402:	4313      	orrs	r3, r2
 801d404:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801d408:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 801d40c:	00cb      	lsls	r3, r1, #3
 801d40e:	0648      	lsls	r0, r1, #25
 801d410:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801d414:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801d418:	ea43 0302 	orr.w	r3, r3, r2
 801d41c:	bf44      	itt	mi
 801d41e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801d422:	b21b      	sxthmi	r3, r3
 801d424:	1b5d      	subs	r5, r3, r5
 801d426:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801d42a:	e7b4      	b.n	801d396 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

0801d42c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801d42c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d430:	461e      	mov	r6, r3
 801d432:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801d434:	4604      	mov	r4, r0
 801d436:	4617      	mov	r7, r2
 801d438:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801d43c:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801d440:	f7e6 fade 	bl	8003a00 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801d444:	4605      	mov	r5, r0
 801d446:	b918      	cbnz	r0, 801d450 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 801d448:	6030      	str	r0, [r6, #0]
 801d44a:	4628      	mov	r0, r5
 801d44c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d450:	683b      	ldr	r3, [r7, #0]
 801d452:	4601      	mov	r1, r0
 801d454:	4638      	mov	r0, r7
 801d456:	68db      	ldr	r3, [r3, #12]
 801d458:	4798      	blx	r3
 801d45a:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801d45e:	4602      	mov	r2, r0
 801d460:	6030      	str	r0, [r6, #0]
 801d462:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801d466:	d213      	bcs.n	801d490 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 801d468:	4643      	mov	r3, r8
 801d46a:	4639      	mov	r1, r7
 801d46c:	4620      	mov	r0, r4
 801d46e:	f7ff fe39 	bl	801d0e4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801d472:	6030      	str	r0, [r6, #0]
 801d474:	6833      	ldr	r3, [r6, #0]
 801d476:	b143      	cbz	r3, 801d48a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 801d478:	7b5a      	ldrb	r2, [r3, #13]
 801d47a:	7a9b      	ldrb	r3, [r3, #10]
 801d47c:	0052      	lsls	r2, r2, #1
 801d47e:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801d482:	4313      	orrs	r3, r2
 801d484:	bf0c      	ite	eq
 801d486:	2301      	moveq	r3, #1
 801d488:	2300      	movne	r3, #0
 801d48a:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 801d48e:	e7dc      	b.n	801d44a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 801d490:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801d494:	b29b      	uxth	r3, r3
 801d496:	2b7f      	cmp	r3, #127	; 0x7f
 801d498:	d804      	bhi.n	801d4a4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 801d49a:	4639      	mov	r1, r7
 801d49c:	4620      	mov	r0, r4
 801d49e:	f7ff fd15 	bl	801cecc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801d4a2:	e7e6      	b.n	801d472 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 801d4a4:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 801d4a8:	2b00      	cmp	r3, #0
 801d4aa:	d0e3      	beq.n	801d474 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801d4ac:	f640 1302 	movw	r3, #2306	; 0x902
 801d4b0:	429d      	cmp	r5, r3
 801d4b2:	d1df      	bne.n	801d474 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801d4b4:	4601      	mov	r1, r0
 801d4b6:	4620      	mov	r0, r4
 801d4b8:	f7ff fcd8 	bl	801ce6c <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801d4bc:	e7d9      	b.n	801d472 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

0801d4be <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801d4be:	b510      	push	{r4, lr}
 801d4c0:	4604      	mov	r4, r0
 801d4c2:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 801d4c6:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801d4c8:	b1e1      	cbz	r1, 801d504 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801d4ca:	2b0a      	cmp	r3, #10
 801d4cc:	d02d      	beq.n	801d52a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 801d4ce:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 801d4d0:	3901      	subs	r1, #1
 801d4d2:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801d4d6:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 801d4d8:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 801d4dc:	1c51      	adds	r1, r2, #1
 801d4de:	b289      	uxth	r1, r1
 801d4e0:	2901      	cmp	r1, #1
 801d4e2:	bf8a      	itet	hi
 801d4e4:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801d4e8:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 801d4ea:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 801d4ec:	1c5a      	adds	r2, r3, #1
 801d4ee:	8722      	strh	r2, [r4, #56]	; 0x38
 801d4f0:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801d4f2:	4413      	add	r3, r2
 801d4f4:	b29b      	uxth	r3, r3
 801d4f6:	2b09      	cmp	r3, #9
 801d4f8:	bf88      	it	hi
 801d4fa:	3b0a      	subhi	r3, #10
 801d4fc:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801d500:	8458      	strh	r0, [r3, #34]	; 0x22
 801d502:	e7de      	b.n	801d4c2 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 801d504:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801d506:	2b0a      	cmp	r3, #10
 801d508:	d00f      	beq.n	801d52a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 801d50a:	4620      	mov	r0, r4
 801d50c:	f7ff fc6d 	bl	801cdea <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801d510:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801d512:	1c5a      	adds	r2, r3, #1
 801d514:	8722      	strh	r2, [r4, #56]	; 0x38
 801d516:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801d518:	4413      	add	r3, r2
 801d51a:	b29b      	uxth	r3, r3
 801d51c:	2b09      	cmp	r3, #9
 801d51e:	bf88      	it	hi
 801d520:	3b0a      	subhi	r3, #10
 801d522:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801d526:	8458      	strh	r0, [r3, #34]	; 0x22
 801d528:	e7ec      	b.n	801d504 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801d52a:	bd10      	pop	{r4, pc}

0801d52c <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801d52c:	b538      	push	{r3, r4, r5, lr}
 801d52e:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801d530:	4604      	mov	r4, r0
 801d532:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 801d536:	8c55      	ldrh	r5, [r2, #34]	; 0x22
 801d538:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 801d53a:	3a01      	subs	r2, #1
 801d53c:	8702      	strh	r2, [r0, #56]	; 0x38
 801d53e:	1c5a      	adds	r2, r3, #1
 801d540:	b292      	uxth	r2, r2
 801d542:	2a09      	cmp	r2, #9
 801d544:	bf8a      	itet	hi
 801d546:	3b09      	subhi	r3, #9
 801d548:	86c2      	strhls	r2, [r0, #54]	; 0x36
 801d54a:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 801d54c:	f7ff ffb7 	bl	801d4be <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801d550:	8c23      	ldrh	r3, [r4, #32]
 801d552:	2b01      	cmp	r3, #1
 801d554:	bf9c      	itt	ls
 801d556:	3301      	addls	r3, #1
 801d558:	8423      	strhls	r3, [r4, #32]
 801d55a:	8be3      	ldrh	r3, [r4, #30]
 801d55c:	b90b      	cbnz	r3, 801d562 <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 801d55e:	2302      	movs	r3, #2
 801d560:	83e3      	strh	r3, [r4, #30]
 801d562:	8be3      	ldrh	r3, [r4, #30]
 801d564:	4628      	mov	r0, r5
 801d566:	3b01      	subs	r3, #1
 801d568:	b29b      	uxth	r3, r3
 801d56a:	83e3      	strh	r3, [r4, #30]
 801d56c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801d570:	8365      	strh	r5, [r4, #26]
 801d572:	bd38      	pop	{r3, r4, r5, pc}

0801d574 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801d574:	428a      	cmp	r2, r1
 801d576:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d57a:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
 801d57c:	d932      	bls.n	801d5e4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 801d57e:	8f05      	ldrh	r5, [r0, #56]	; 0x38
 801d580:	1a54      	subs	r4, r2, r1
 801d582:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
 801d586:	19ee      	adds	r6, r5, r7
 801d588:	fa1f fe84 	uxth.w	lr, r4
 801d58c:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
 801d590:	3e01      	subs	r6, #1
 801d592:	b2b4      	uxth	r4, r6
 801d594:	eba4 090e 	sub.w	r9, r4, lr
 801d598:	fa1f f989 	uxth.w	r9, r9
 801d59c:	2c09      	cmp	r4, #9
 801d59e:	4626      	mov	r6, r4
 801d5a0:	bf88      	it	hi
 801d5a2:	f1a4 060a 	subhi.w	r6, r4, #10
 801d5a6:	f1bc 0f00 	cmp.w	ip, #0
 801d5aa:	f104 34ff 	add.w	r4, r4, #4294967295
 801d5ae:	bf08      	it	eq
 801d5b0:	f04f 0c02 	moveq.w	ip, #2
 801d5b4:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801d5b8:	b2a4      	uxth	r4, r4
 801d5ba:	f10c 3cff 	add.w	ip, ip, #4294967295
 801d5be:	f8b6 a022 	ldrh.w	sl, [r6, #34]	; 0x22
 801d5c2:	454c      	cmp	r4, r9
 801d5c4:	fa1f fc8c 	uxth.w	ip, ip
 801d5c8:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 801d5cc:	f8a6 a03a 	strh.w	sl, [r6, #58]	; 0x3a
 801d5d0:	d1e4      	bne.n	801d59c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 801d5d2:	eba5 050e 	sub.w	r5, r5, lr
 801d5d6:	eb0e 0408 	add.w	r4, lr, r8
 801d5da:	f8a0 c03e 	strh.w	ip, [r0, #62]	; 0x3e
 801d5de:	8705      	strh	r5, [r0, #56]	; 0x38
 801d5e0:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
 801d5e4:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 801d5e6:	250a      	movs	r5, #10
 801d5e8:	1a64      	subs	r4, r4, r1
 801d5ea:	4439      	add	r1, r7
 801d5ec:	b289      	uxth	r1, r1
 801d5ee:	8704      	strh	r4, [r0, #56]	; 0x38
 801d5f0:	2909      	cmp	r1, #9
 801d5f2:	bf88      	it	hi
 801d5f4:	390a      	subhi	r1, #10
 801d5f6:	86c1      	strh	r1, [r0, #54]	; 0x36
 801d5f8:	b18a      	cbz	r2, 801d61e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 801d5fa:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 801d5fc:	3a01      	subs	r2, #1
 801d5fe:	3101      	adds	r1, #1
 801d600:	b292      	uxth	r2, r2
 801d602:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801d606:	8701      	strh	r1, [r0, #56]	; 0x38
 801d608:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801d60a:	b901      	cbnz	r1, 801d60e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 801d60c:	86c5      	strh	r5, [r0, #54]	; 0x36
 801d60e:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801d610:	3901      	subs	r1, #1
 801d612:	b289      	uxth	r1, r1
 801d614:	86c1      	strh	r1, [r0, #54]	; 0x36
 801d616:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801d61a:	844c      	strh	r4, [r1, #34]	; 0x22
 801d61c:	e7ec      	b.n	801d5f8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 801d61e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d622:	f7ff bf4c 	b.w	801d4be <_ZN8touchgfx12TextProvider15fillInputBufferEv>

0801d626 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801d626:	b570      	push	{r4, r5, r6, lr}
 801d628:	2500      	movs	r5, #0
 801d62a:	4295      	cmp	r5, r2
 801d62c:	d011      	beq.n	801d652 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 801d62e:	8bc4      	ldrh	r4, [r0, #30]
 801d630:	f831 6b02 	ldrh.w	r6, [r1], #2
 801d634:	4414      	add	r4, r2
 801d636:	3c01      	subs	r4, #1
 801d638:	1b64      	subs	r4, r4, r5
 801d63a:	b2a4      	uxth	r4, r4
 801d63c:	2c01      	cmp	r4, #1
 801d63e:	bf88      	it	hi
 801d640:	3c02      	subhi	r4, #2
 801d642:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801d646:	8b64      	ldrh	r4, [r4, #26]
 801d648:	42b4      	cmp	r4, r6
 801d64a:	d117      	bne.n	801d67c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 801d64c:	3501      	adds	r5, #1
 801d64e:	b2ad      	uxth	r5, r5
 801d650:	e7eb      	b.n	801d62a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 801d652:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801d656:	2400      	movs	r4, #0
 801d658:	4413      	add	r3, r2
 801d65a:	b2a2      	uxth	r2, r4
 801d65c:	429a      	cmp	r2, r3
 801d65e:	da0f      	bge.n	801d680 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 801d660:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 801d662:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801d666:	3401      	adds	r4, #1
 801d668:	4432      	add	r2, r6
 801d66a:	b292      	uxth	r2, r2
 801d66c:	2a09      	cmp	r2, #9
 801d66e:	bf88      	it	hi
 801d670:	3a0a      	subhi	r2, #10
 801d672:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801d676:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 801d678:	42aa      	cmp	r2, r5
 801d67a:	d0ee      	beq.n	801d65a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 801d67c:	2000      	movs	r0, #0
 801d67e:	bd70      	pop	{r4, r5, r6, pc}
 801d680:	2001      	movs	r0, #1
 801d682:	e7fc      	b.n	801d67e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

0801d684 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801d684:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d688:	4605      	mov	r5, r0
 801d68a:	4616      	mov	r6, r2
 801d68c:	1c8c      	adds	r4, r1, #2
 801d68e:	8809      	ldrh	r1, [r1, #0]
 801d690:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801d694:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801d698:	42b3      	cmp	r3, r6
 801d69a:	d124      	bne.n	801d6e6 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801d69c:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801d6a0:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801d6a4:	f001 070f 	and.w	r7, r1, #15
 801d6a8:	4652      	mov	r2, sl
 801d6aa:	f8cd 8000 	str.w	r8, [sp]
 801d6ae:	464b      	mov	r3, r9
 801d6b0:	4621      	mov	r1, r4
 801d6b2:	4628      	mov	r0, r5
 801d6b4:	f7ff ffb7 	bl	801d626 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801d6b8:	4683      	mov	fp, r0
 801d6ba:	b168      	cbz	r0, 801d6d8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801d6bc:	eb0a 0109 	add.w	r1, sl, r9
 801d6c0:	463a      	mov	r2, r7
 801d6c2:	4628      	mov	r0, r5
 801d6c4:	4441      	add	r1, r8
 801d6c6:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801d6ca:	4649      	mov	r1, r9
 801d6cc:	f7ff ff52 	bl	801d574 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801d6d0:	4658      	mov	r0, fp
 801d6d2:	b003      	add	sp, #12
 801d6d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d6d8:	eb07 010a 	add.w	r1, r7, sl
 801d6dc:	4449      	add	r1, r9
 801d6de:	4441      	add	r1, r8
 801d6e0:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801d6e4:	e7d2      	b.n	801d68c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801d6e6:	f04f 0b00 	mov.w	fp, #0
 801d6ea:	e7f1      	b.n	801d6d0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801d6ec <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801d6ec:	b570      	push	{r4, r5, r6, lr}
 801d6ee:	8810      	ldrh	r0, [r2, #0]
 801d6f0:	4298      	cmp	r0, r3
 801d6f2:	d817      	bhi.n	801d724 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801d6f4:	1e48      	subs	r0, r1, #1
 801d6f6:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801d6fa:	4298      	cmp	r0, r3
 801d6fc:	d312      	bcc.n	801d724 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801d6fe:	2400      	movs	r4, #0
 801d700:	428c      	cmp	r4, r1
 801d702:	d20f      	bcs.n	801d724 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801d704:	1860      	adds	r0, r4, r1
 801d706:	1040      	asrs	r0, r0, #1
 801d708:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801d70c:	0085      	lsls	r5, r0, #2
 801d70e:	42b3      	cmp	r3, r6
 801d710:	d902      	bls.n	801d718 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801d712:	3001      	adds	r0, #1
 801d714:	b284      	uxth	r4, r0
 801d716:	e7f3      	b.n	801d700 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801d718:	d201      	bcs.n	801d71e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801d71a:	b281      	uxth	r1, r0
 801d71c:	e7f0      	b.n	801d700 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801d71e:	442a      	add	r2, r5
 801d720:	8850      	ldrh	r0, [r2, #2]
 801d722:	bd70      	pop	{r4, r5, r6, pc}
 801d724:	2000      	movs	r0, #0
 801d726:	e7fc      	b.n	801d722 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801d728 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801d728:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d72c:	6c45      	ldr	r5, [r0, #68]	; 0x44
 801d72e:	4604      	mov	r4, r0
 801d730:	260b      	movs	r6, #11
 801d732:	886f      	ldrh	r7, [r5, #2]
 801d734:	087f      	lsrs	r7, r7, #1
 801d736:	3e01      	subs	r6, #1
 801d738:	d013      	beq.n	801d762 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801d73a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801d73c:	462a      	mov	r2, r5
 801d73e:	4639      	mov	r1, r7
 801d740:	4620      	mov	r0, r4
 801d742:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801d746:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801d74a:	4643      	mov	r3, r8
 801d74c:	f7ff ffce 	bl	801d6ec <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801d750:	b138      	cbz	r0, 801d762 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801d752:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801d756:	4642      	mov	r2, r8
 801d758:	4620      	mov	r0, r4
 801d75a:	f7ff ff93 	bl	801d684 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801d75e:	2800      	cmp	r0, #0
 801d760:	d1e9      	bne.n	801d736 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801d762:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0801d768 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 801d768:	b570      	push	{r4, r5, r6, lr}
 801d76a:	694a      	ldr	r2, [r1, #20]
 801d76c:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801d76e:	684b      	ldr	r3, [r1, #4]
 801d770:	1b54      	subs	r4, r2, r5
 801d772:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 801d774:	f000 8106 	beq.w	801d984 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 801d778:	1b9b      	subs	r3, r3, r6
 801d77a:	d003      	beq.n	801d784 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801d77c:	4363      	muls	r3, r4
 801d77e:	2210      	movs	r2, #16
 801d780:	fb93 f3f2 	sdiv	r3, r3, r2
 801d784:	680c      	ldr	r4, [r1, #0]
 801d786:	698a      	ldr	r2, [r1, #24]
 801d788:	1b65      	subs	r5, r4, r5
 801d78a:	f000 80fd 	beq.w	801d988 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 801d78e:	1b92      	subs	r2, r2, r6
 801d790:	d003      	beq.n	801d79a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801d792:	436a      	muls	r2, r5
 801d794:	2410      	movs	r4, #16
 801d796:	fb92 f2f4 	sdiv	r2, r2, r4
 801d79a:	1a9b      	subs	r3, r3, r2
 801d79c:	ed9f 4a89 	vldr	s8, [pc, #548]	; 801d9c4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 801d7a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d7a4:	460a      	mov	r2, r1
 801d7a6:	ee07 3a90 	vmov	s15, r3
 801d7aa:	f100 040c 	add.w	r4, r0, #12
 801d7ae:	4603      	mov	r3, r0
 801d7b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d7b4:	ee67 7a84 	vmul.f32	s15, s15, s8
 801d7b8:	ee87 3a27 	vdiv.f32	s6, s14, s15
 801d7bc:	eeb1 6a43 	vneg.f32	s12, s6
 801d7c0:	edd2 7a02 	vldr	s15, [r2, #8]
 801d7c4:	3214      	adds	r2, #20
 801d7c6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801d7ca:	ece3 6a01 	vstmia	r3!, {s13}
 801d7ce:	429c      	cmp	r4, r3
 801d7d0:	ed52 7a02 	vldr	s15, [r2, #-8]
 801d7d4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801d7d8:	edc3 7a02 	vstr	s15, [r3, #8]
 801d7dc:	ed52 7a01 	vldr	s15, [r2, #-4]
 801d7e0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801d7e4:	edc3 7a05 	vstr	s15, [r3, #20]
 801d7e8:	d1ea      	bne.n	801d7c0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801d7ea:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801d7ec:	698b      	ldr	r3, [r1, #24]
 801d7ee:	edd0 4a02 	vldr	s9, [r0, #8]
 801d7f2:	1a9b      	subs	r3, r3, r2
 801d7f4:	edd0 3a00 	vldr	s7, [r0]
 801d7f8:	edd0 6a01 	vldr	s13, [r0, #4]
 801d7fc:	ee07 3a90 	vmov	s15, r3
 801d800:	684b      	ldr	r3, [r1, #4]
 801d802:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801d806:	ed90 5a05 	vldr	s10, [r0, #20]
 801d80a:	1a9b      	subs	r3, r3, r2
 801d80c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d810:	ee73 4ae4 	vsub.f32	s9, s7, s9
 801d814:	ed90 2a03 	vldr	s4, [r0, #12]
 801d818:	ee07 3a10 	vmov	s14, r3
 801d81c:	edd0 5a04 	vldr	s11, [r0, #16]
 801d820:	ee67 7a84 	vmul.f32	s15, s15, s8
 801d824:	ed90 1a07 	vldr	s2, [r0, #28]
 801d828:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d82c:	edd0 2a06 	vldr	s5, [r0, #24]
 801d830:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801d834:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 801d838:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d83c:	ee32 5a45 	vsub.f32	s10, s4, s10
 801d840:	eee6 7a87 	vfma.f32	s15, s13, s14
 801d844:	ee67 7a83 	vmul.f32	s15, s15, s6
 801d848:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 801d84c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801d84e:	694a      	ldr	r2, [r1, #20]
 801d850:	1b13      	subs	r3, r2, r4
 801d852:	ee07 3a10 	vmov	s14, r3
 801d856:	680b      	ldr	r3, [r1, #0]
 801d858:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d85c:	1b1b      	subs	r3, r3, r4
 801d85e:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d862:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801d866:	ee07 3a10 	vmov	s14, r3
 801d86a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d86e:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d872:	eee6 4a87 	vfma.f32	s9, s13, s14
 801d876:	ee64 4a86 	vmul.f32	s9, s9, s12
 801d87a:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 801d87e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801d880:	698b      	ldr	r3, [r1, #24]
 801d882:	1a9b      	subs	r3, r3, r2
 801d884:	ee06 3a90 	vmov	s13, r3
 801d888:	684b      	ldr	r3, [r1, #4]
 801d88a:	1a9b      	subs	r3, r3, r2
 801d88c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801d890:	ee07 3a10 	vmov	s14, r3
 801d894:	ee66 6a84 	vmul.f32	s13, s13, s8
 801d898:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d89c:	ee65 6a66 	vnmul.f32	s13, s10, s13
 801d8a0:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d8a4:	eee5 6a87 	vfma.f32	s13, s11, s14
 801d8a8:	ee66 6a83 	vmul.f32	s13, s13, s6
 801d8ac:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 801d8b0:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801d8b2:	694a      	ldr	r2, [r1, #20]
 801d8b4:	1b13      	subs	r3, r2, r4
 801d8b6:	ee07 3a10 	vmov	s14, r3
 801d8ba:	680b      	ldr	r3, [r1, #0]
 801d8bc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d8c0:	1b1b      	subs	r3, r3, r4
 801d8c2:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d8c6:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801d8ca:	ee07 3a10 	vmov	s14, r3
 801d8ce:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d8d2:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d8d6:	eea5 5a87 	vfma.f32	s10, s11, s14
 801d8da:	edd0 5a08 	vldr	s11, [r0, #32]
 801d8de:	ee31 1a65 	vsub.f32	s2, s2, s11
 801d8e2:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801d8e6:	ee25 5a06 	vmul.f32	s10, s10, s12
 801d8ea:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 801d8ee:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801d8f0:	698b      	ldr	r3, [r1, #24]
 801d8f2:	1a9b      	subs	r3, r3, r2
 801d8f4:	ee07 3a10 	vmov	s14, r3
 801d8f8:	684b      	ldr	r3, [r1, #4]
 801d8fa:	1a9b      	subs	r3, r3, r2
 801d8fc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d900:	ee01 3a90 	vmov	s3, r3
 801d904:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d908:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801d90c:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801d910:	ee61 1a84 	vmul.f32	s3, s3, s8
 801d914:	eea1 7a21 	vfma.f32	s14, s2, s3
 801d918:	ee27 7a03 	vmul.f32	s14, s14, s6
 801d91c:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801d920:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801d922:	694a      	ldr	r2, [r1, #20]
 801d924:	1b13      	subs	r3, r2, r4
 801d926:	ee03 3a10 	vmov	s6, r3
 801d92a:	680b      	ldr	r3, [r1, #0]
 801d92c:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801d930:	1b1b      	subs	r3, r3, r4
 801d932:	ee23 3a04 	vmul.f32	s6, s6, s8
 801d936:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 801d93a:	ee03 3a10 	vmov	s6, r3
 801d93e:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801d942:	ee23 4a04 	vmul.f32	s8, s6, s8
 801d946:	eee1 5a04 	vfma.f32	s11, s2, s8
 801d94a:	ee25 6a86 	vmul.f32	s12, s11, s12
 801d94e:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801d952:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 801d956:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801d95a:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801d95e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d962:	dd13      	ble.n	801d98c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 801d964:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801d968:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 801d96c:	63c3      	str	r3, [r0, #60]	; 0x3c
 801d96e:	eee3 7a87 	vfma.f32	s15, s7, s14
 801d972:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801d976:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d97a:	dd15      	ble.n	801d9a8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 801d97c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801d980:	6403      	str	r3, [r0, #64]	; 0x40
 801d982:	bd70      	pop	{r4, r5, r6, pc}
 801d984:	4623      	mov	r3, r4
 801d986:	e6fd      	b.n	801d784 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801d988:	462a      	mov	r2, r5
 801d98a:	e706      	b.n	801d79a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801d98c:	d502      	bpl.n	801d994 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 801d98e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801d992:	e7e9      	b.n	801d968 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 801d994:	ee22 2a64 	vnmul.f32	s4, s4, s9
 801d998:	eea3 2a85 	vfma.f32	s4, s7, s10
 801d99c:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 801d9a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d9a4:	dade      	bge.n	801d964 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 801d9a6:	e7f2      	b.n	801d98e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 801d9a8:	d502      	bpl.n	801d9b0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 801d9aa:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801d9ae:	e7e7      	b.n	801d980 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 801d9b0:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 801d9b4:	eee3 4a86 	vfma.f32	s9, s7, s12
 801d9b8:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801d9bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d9c0:	dadc      	bge.n	801d97c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 801d9c2:	e7f2      	b.n	801d9aa <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 801d9c4:	3d800000 	.word	0x3d800000

0801d9c8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 801d9c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d9cc:	2714      	movs	r7, #20
 801d9ce:	435f      	muls	r7, r3
 801d9d0:	eb02 0c07 	add.w	ip, r2, r7
 801d9d4:	f8dc 5004 	ldr.w	r5, [ip, #4]
 801d9d8:	f115 0e0f 	adds.w	lr, r5, #15
 801d9dc:	f100 80a2 	bmi.w	801db24 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 801d9e0:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 801d9e4:	9c08      	ldr	r4, [sp, #32]
 801d9e6:	2614      	movs	r6, #20
 801d9e8:	f8c0 e014 	str.w	lr, [r0, #20]
 801d9ec:	4366      	muls	r6, r4
 801d9ee:	eb02 0806 	add.w	r8, r2, r6
 801d9f2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801d9f6:	f115 040f 	adds.w	r4, r5, #15
 801d9fa:	f100 809f 	bmi.w	801db3c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 801d9fe:	1124      	asrs	r4, r4, #4
 801da00:	eba4 040e 	sub.w	r4, r4, lr
 801da04:	6184      	str	r4, [r0, #24]
 801da06:	2c00      	cmp	r4, #0
 801da08:	f000 808a 	beq.w	801db20 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 801da0c:	f8dc 9004 	ldr.w	r9, [ip, #4]
 801da10:	f8d8 4004 	ldr.w	r4, [r8, #4]
 801da14:	5995      	ldr	r5, [r2, r6]
 801da16:	eba4 0809 	sub.w	r8, r4, r9
 801da1a:	59d4      	ldr	r4, [r2, r7]
 801da1c:	eba5 0a04 	sub.w	sl, r5, r4
 801da20:	ea4f 1608 	mov.w	r6, r8, lsl #4
 801da24:	ea4f 150a 	mov.w	r5, sl, lsl #4
 801da28:	fb0e fe05 	mul.w	lr, lr, r5
 801da2c:	fb0a ee19 	mls	lr, sl, r9, lr
 801da30:	fb08 e404 	mla	r4, r8, r4, lr
 801da34:	3c01      	subs	r4, #1
 801da36:	19a4      	adds	r4, r4, r6
 801da38:	f100 808c 	bmi.w	801db54 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 801da3c:	fb94 fef6 	sdiv	lr, r4, r6
 801da40:	fb06 441e 	mls	r4, r6, lr, r4
 801da44:	f8c0 e000 	str.w	lr, [r0]
 801da48:	6104      	str	r4, [r0, #16]
 801da4a:	2d00      	cmp	r5, #0
 801da4c:	f2c0 8095 	blt.w	801db7a <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 801da50:	fb95 f4f6 	sdiv	r4, r5, r6
 801da54:	fb06 5514 	mls	r5, r6, r4, r5
 801da58:	6044      	str	r4, [r0, #4]
 801da5a:	6085      	str	r5, [r0, #8]
 801da5c:	60c6      	str	r6, [r0, #12]
 801da5e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801da62:	f8dc 4004 	ldr.w	r4, [ip, #4]
 801da66:	6945      	ldr	r5, [r0, #20]
 801da68:	59d2      	ldr	r2, [r2, r7]
 801da6a:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 801da6e:	eddf 6a4b 	vldr	s13, [pc, #300]	; 801db9c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 801da72:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 801da76:	ee07 4a10 	vmov	s14, r4
 801da7a:	6804      	ldr	r4, [r0, #0]
 801da7c:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 801da80:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801da84:	ee07 2a90 	vmov	s15, r2
 801da88:	ee27 7a26 	vmul.f32	s14, s14, s13
 801da8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801da90:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801da94:	edd3 6a00 	vldr	s13, [r3]
 801da98:	eee6 6a07 	vfma.f32	s13, s12, s14
 801da9c:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 801daa0:	eee6 6a27 	vfma.f32	s13, s12, s15
 801daa4:	edc0 6a07 	vstr	s13, [r0, #28]
 801daa8:	edd0 6a01 	vldr	s13, [r0, #4]
 801daac:	edd1 5a09 	vldr	s11, [r1, #36]	; 0x24
 801dab0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801dab4:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 801dab8:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801dabc:	ed80 6a08 	vstr	s12, [r0, #32]
 801dac0:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 801dac2:	6242      	str	r2, [r0, #36]	; 0x24
 801dac4:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
 801dac8:	ed93 6a03 	vldr	s12, [r3, #12]
 801dacc:	eea5 6a87 	vfma.f32	s12, s11, s14
 801dad0:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 801dad4:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801dad8:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
 801dadc:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 801dae0:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 801dae4:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801dae8:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
 801daec:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801daee:	6302      	str	r2, [r0, #48]	; 0x30
 801daf0:	ed93 6a06 	vldr	s12, [r3, #24]
 801daf4:	edd1 5a0e 	vldr	s11, [r1, #56]	; 0x38
 801daf8:	eea5 6a87 	vfma.f32	s12, s11, s14
 801dafc:	eeb0 7a46 	vmov.f32	s14, s12
 801db00:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 801db04:	eea6 7a27 	vfma.f32	s14, s12, s15
 801db08:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801db0c:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 801db10:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 801db14:	eee6 7a87 	vfma.f32	s15, s13, s14
 801db18:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
 801db1c:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 801db1e:	63c3      	str	r3, [r0, #60]	; 0x3c
 801db20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801db24:	2410      	movs	r4, #16
 801db26:	f1c5 0501 	rsb	r5, r5, #1
 801db2a:	fb9e fef4 	sdiv	lr, lr, r4
 801db2e:	f015 050f 	ands.w	r5, r5, #15
 801db32:	bf18      	it	ne
 801db34:	2501      	movne	r5, #1
 801db36:	ebae 0e05 	sub.w	lr, lr, r5
 801db3a:	e753      	b.n	801d9e4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 801db3c:	f04f 0910 	mov.w	r9, #16
 801db40:	f1c5 0501 	rsb	r5, r5, #1
 801db44:	fb94 f4f9 	sdiv	r4, r4, r9
 801db48:	f015 050f 	ands.w	r5, r5, #15
 801db4c:	bf18      	it	ne
 801db4e:	2501      	movne	r5, #1
 801db50:	1b64      	subs	r4, r4, r5
 801db52:	e755      	b.n	801da00 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 801db54:	4264      	negs	r4, r4
 801db56:	fb94 fef6 	sdiv	lr, r4, r6
 801db5a:	f1ce 0800 	rsb	r8, lr, #0
 801db5e:	fb06 441e 	mls	r4, r6, lr, r4
 801db62:	f8c0 8000 	str.w	r8, [r0]
 801db66:	6104      	str	r4, [r0, #16]
 801db68:	2c00      	cmp	r4, #0
 801db6a:	f43f af6e 	beq.w	801da4a <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 801db6e:	ea6f 0e0e 	mvn.w	lr, lr
 801db72:	1b34      	subs	r4, r6, r4
 801db74:	f8c0 e000 	str.w	lr, [r0]
 801db78:	e766      	b.n	801da48 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 801db7a:	426d      	negs	r5, r5
 801db7c:	fb95 f4f6 	sdiv	r4, r5, r6
 801db80:	f1c4 0e00 	rsb	lr, r4, #0
 801db84:	fb06 5514 	mls	r5, r6, r4, r5
 801db88:	f8c0 e004 	str.w	lr, [r0, #4]
 801db8c:	6085      	str	r5, [r0, #8]
 801db8e:	2d00      	cmp	r5, #0
 801db90:	f43f af64 	beq.w	801da5c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 801db94:	43e4      	mvns	r4, r4
 801db96:	1b75      	subs	r5, r6, r5
 801db98:	6044      	str	r4, [r0, #4]
 801db9a:	e75e      	b.n	801da5a <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 801db9c:	3d800000 	.word	0x3d800000

0801dba0 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801dba0:	4b01      	ldr	r3, [pc, #4]	; (801dba8 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801dba2:	6018      	str	r0, [r3, #0]
 801dba4:	4770      	bx	lr
 801dba6:	bf00      	nop
 801dba8:	2001782c 	.word	0x2001782c

0801dbac <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801dbac:	4b06      	ldr	r3, [pc, #24]	; (801dbc8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801dbae:	881a      	ldrh	r2, [r3, #0]
 801dbb0:	4282      	cmp	r2, r0
 801dbb2:	d807      	bhi.n	801dbc4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 801dbb4:	4b05      	ldr	r3, [pc, #20]	; (801dbcc <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801dbb6:	881b      	ldrh	r3, [r3, #0]
 801dbb8:	4413      	add	r3, r2
 801dbba:	4298      	cmp	r0, r3
 801dbbc:	bfac      	ite	ge
 801dbbe:	2000      	movge	r0, #0
 801dbc0:	2001      	movlt	r0, #1
 801dbc2:	4770      	bx	lr
 801dbc4:	2000      	movs	r0, #0
 801dbc6:	4770      	bx	lr
 801dbc8:	2001784c 	.word	0x2001784c
 801dbcc:	20017850 	.word	0x20017850

0801dbd0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801dbd0:	b508      	push	{r3, lr}
 801dbd2:	4601      	mov	r1, r0
 801dbd4:	f7ff ffea 	bl	801dbac <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801dbd8:	b118      	cbz	r0, 801dbe2 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801dbda:	4b02      	ldr	r3, [pc, #8]	; (801dbe4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 801dbdc:	681b      	ldr	r3, [r3, #0]
 801dbde:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801dbe2:	bd08      	pop	{r3, pc}
 801dbe4:	20017830 	.word	0x20017830

0801dbe8 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801dbe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dbea:	4c24      	ldr	r4, [pc, #144]	; (801dc7c <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 801dbec:	6823      	ldr	r3, [r4, #0]
 801dbee:	2b00      	cmp	r3, #0
 801dbf0:	d042      	beq.n	801dc78 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801dbf2:	4a23      	ldr	r2, [pc, #140]	; (801dc80 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 801dbf4:	4d23      	ldr	r5, [pc, #140]	; (801dc84 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 801dbf6:	8811      	ldrh	r1, [r2, #0]
 801dbf8:	f8b5 c000 	ldrh.w	ip, [r5]
 801dbfc:	4822      	ldr	r0, [pc, #136]	; (801dc88 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801dbfe:	4461      	add	r1, ip
 801dc00:	1c4a      	adds	r2, r1, #1
 801dc02:	008f      	lsls	r7, r1, #2
 801dc04:	f022 0201 	bic.w	r2, r2, #1
 801dc08:	19de      	adds	r6, r3, r7
 801dc0a:	0412      	lsls	r2, r2, #16
 801dc0c:	6006      	str	r6, [r0, #0]
 801dc0e:	4e1f      	ldr	r6, [pc, #124]	; (801dc8c <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801dc10:	0c12      	lsrs	r2, r2, #16
 801dc12:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 801dc16:	19da      	adds	r2, r3, r7
 801dc18:	6032      	str	r2, [r6, #0]
 801dc1a:	220e      	movs	r2, #14
 801dc1c:	fb02 f20c 	mul.w	r2, r2, ip
 801dc20:	3203      	adds	r2, #3
 801dc22:	f022 0203 	bic.w	r2, r2, #3
 801dc26:	443a      	add	r2, r7
 801dc28:	4f19      	ldr	r7, [pc, #100]	; (801dc90 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801dc2a:	4413      	add	r3, r2
 801dc2c:	603b      	str	r3, [r7, #0]
 801dc2e:	2300      	movs	r3, #0
 801dc30:	4f18      	ldr	r7, [pc, #96]	; (801dc94 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801dc32:	469c      	mov	ip, r3
 801dc34:	803b      	strh	r3, [r7, #0]
 801dc36:	4f18      	ldr	r7, [pc, #96]	; (801dc98 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801dc38:	683f      	ldr	r7, [r7, #0]
 801dc3a:	1aba      	subs	r2, r7, r2
 801dc3c:	4f17      	ldr	r7, [pc, #92]	; (801dc9c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801dc3e:	603a      	str	r2, [r7, #0]
 801dc40:	f64f 77ff 	movw	r7, #65535	; 0xffff
 801dc44:	4a16      	ldr	r2, [pc, #88]	; (801dca0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801dc46:	8013      	strh	r3, [r2, #0]
 801dc48:	428b      	cmp	r3, r1
 801dc4a:	d10d      	bne.n	801dc68 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 801dc4c:	882d      	ldrh	r5, [r5, #0]
 801dc4e:	2300      	movs	r3, #0
 801dc50:	6830      	ldr	r0, [r6, #0]
 801dc52:	240e      	movs	r4, #14
 801dc54:	429d      	cmp	r5, r3
 801dc56:	d90f      	bls.n	801dc78 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801dc58:	fb04 0203 	mla	r2, r4, r3, r0
 801dc5c:	3301      	adds	r3, #1
 801dc5e:	7b11      	ldrb	r1, [r2, #12]
 801dc60:	f36f 1145 	bfc	r1, #5, #1
 801dc64:	7311      	strb	r1, [r2, #12]
 801dc66:	e7f5      	b.n	801dc54 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 801dc68:	6822      	ldr	r2, [r4, #0]
 801dc6a:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801dc6e:	6802      	ldr	r2, [r0, #0]
 801dc70:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 801dc74:	3301      	adds	r3, #1
 801dc76:	e7e7      	b.n	801dc48 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 801dc78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dc7a:	bf00      	nop
 801dc7c:	20017830 	.word	0x20017830
 801dc80:	2001784c 	.word	0x2001784c
 801dc84:	20017850 	.word	0x20017850
 801dc88:	20017844 	.word	0x20017844
 801dc8c:	20017834 	.word	0x20017834
 801dc90:	2001783c 	.word	0x2001783c
 801dc94:	2001784e 	.word	0x2001784e
 801dc98:	20017838 	.word	0x20017838
 801dc9c:	20017848 	.word	0x20017848
 801dca0:	20017840 	.word	0x20017840

0801dca4 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801dca4:	4b06      	ldr	r3, [pc, #24]	; (801dcc0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 801dca6:	681b      	ldr	r3, [r3, #0]
 801dca8:	b943      	cbnz	r3, 801dcbc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801dcaa:	b139      	cbz	r1, 801dcbc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801dcac:	4b05      	ldr	r3, [pc, #20]	; (801dcc4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 801dcae:	801a      	strh	r2, [r3, #0]
 801dcb0:	4b05      	ldr	r3, [pc, #20]	; (801dcc8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 801dcb2:	6019      	str	r1, [r3, #0]
 801dcb4:	4b05      	ldr	r3, [pc, #20]	; (801dccc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 801dcb6:	6018      	str	r0, [r3, #0]
 801dcb8:	f7ff bf96 	b.w	801dbe8 <_ZN8touchgfx6Bitmap10clearCacheEv>
 801dcbc:	4770      	bx	lr
 801dcbe:	bf00      	nop
 801dcc0:	2001783c 	.word	0x2001783c
 801dcc4:	20017850 	.word	0x20017850
 801dcc8:	20017838 	.word	0x20017838
 801dccc:	20017830 	.word	0x20017830

0801dcd0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801dcd0:	b470      	push	{r4, r5, r6}
 801dcd2:	4c07      	ldr	r4, [pc, #28]	; (801dcf0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801dcd4:	4605      	mov	r5, r0
 801dcd6:	4610      	mov	r0, r2
 801dcd8:	9a03      	ldr	r2, [sp, #12]
 801dcda:	6826      	ldr	r6, [r4, #0]
 801dcdc:	b936      	cbnz	r6, 801dcec <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801dcde:	6025      	str	r5, [r4, #0]
 801dce0:	4c04      	ldr	r4, [pc, #16]	; (801dcf4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801dce2:	8021      	strh	r1, [r4, #0]
 801dce4:	4619      	mov	r1, r3
 801dce6:	bc70      	pop	{r4, r5, r6}
 801dce8:	f7ff bfdc 	b.w	801dca4 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801dcec:	bc70      	pop	{r4, r5, r6}
 801dcee:	4770      	bx	lr
 801dcf0:	20017854 	.word	0x20017854
 801dcf4:	2001784c 	.word	0x2001784c

0801dcf8 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801dcf8:	4a12      	ldr	r2, [pc, #72]	; (801dd44 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 801dcfa:	8803      	ldrh	r3, [r0, #0]
 801dcfc:	8812      	ldrh	r2, [r2, #0]
 801dcfe:	4293      	cmp	r3, r2
 801dd00:	d207      	bcs.n	801dd12 <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 801dd02:	4a11      	ldr	r2, [pc, #68]	; (801dd48 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 801dd04:	2114      	movs	r1, #20
 801dd06:	6812      	ldr	r2, [r2, #0]
 801dd08:	fb01 2303 	mla	r3, r1, r3, r2
 801dd0c:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 801dd10:	4770      	bx	lr
 801dd12:	490e      	ldr	r1, [pc, #56]	; (801dd4c <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801dd14:	8809      	ldrh	r1, [r1, #0]
 801dd16:	4411      	add	r1, r2
 801dd18:	428b      	cmp	r3, r1
 801dd1a:	da04      	bge.n	801dd26 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 801dd1c:	1a9b      	subs	r3, r3, r2
 801dd1e:	4a0c      	ldr	r2, [pc, #48]	; (801dd50 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801dd20:	210e      	movs	r1, #14
 801dd22:	6812      	ldr	r2, [r2, #0]
 801dd24:	e7f0      	b.n	801dd08 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 801dd26:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801dd2a:	4293      	cmp	r3, r2
 801dd2c:	d108      	bne.n	801dd40 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 801dd2e:	4b09      	ldr	r3, [pc, #36]	; (801dd54 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801dd30:	781b      	ldrb	r3, [r3, #0]
 801dd32:	b91b      	cbnz	r3, 801dd3c <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 801dd34:	4b08      	ldr	r3, [pc, #32]	; (801dd58 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801dd36:	f9b3 0000 	ldrsh.w	r0, [r3]
 801dd3a:	4770      	bx	lr
 801dd3c:	4b07      	ldr	r3, [pc, #28]	; (801dd5c <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801dd3e:	e7fa      	b.n	801dd36 <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 801dd40:	2000      	movs	r0, #0
 801dd42:	4770      	bx	lr
 801dd44:	2001784c 	.word	0x2001784c
 801dd48:	20017854 	.word	0x20017854
 801dd4c:	20017850 	.word	0x20017850
 801dd50:	20017834 	.word	0x20017834
 801dd54:	200177bc 	.word	0x200177bc
 801dd58:	200177be 	.word	0x200177be
 801dd5c:	200177c0 	.word	0x200177c0

0801dd60 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801dd60:	4a12      	ldr	r2, [pc, #72]	; (801ddac <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 801dd62:	8803      	ldrh	r3, [r0, #0]
 801dd64:	8812      	ldrh	r2, [r2, #0]
 801dd66:	4293      	cmp	r3, r2
 801dd68:	d207      	bcs.n	801dd7a <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 801dd6a:	4a11      	ldr	r2, [pc, #68]	; (801ddb0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 801dd6c:	2114      	movs	r1, #20
 801dd6e:	6812      	ldr	r2, [r2, #0]
 801dd70:	fb01 2303 	mla	r3, r1, r3, r2
 801dd74:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 801dd78:	4770      	bx	lr
 801dd7a:	490e      	ldr	r1, [pc, #56]	; (801ddb4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801dd7c:	8809      	ldrh	r1, [r1, #0]
 801dd7e:	4411      	add	r1, r2
 801dd80:	428b      	cmp	r3, r1
 801dd82:	da04      	bge.n	801dd8e <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 801dd84:	1a9b      	subs	r3, r3, r2
 801dd86:	4a0c      	ldr	r2, [pc, #48]	; (801ddb8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801dd88:	210e      	movs	r1, #14
 801dd8a:	6812      	ldr	r2, [r2, #0]
 801dd8c:	e7f0      	b.n	801dd70 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 801dd8e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801dd92:	4293      	cmp	r3, r2
 801dd94:	d108      	bne.n	801dda8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 801dd96:	4b09      	ldr	r3, [pc, #36]	; (801ddbc <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801dd98:	781b      	ldrb	r3, [r3, #0]
 801dd9a:	b91b      	cbnz	r3, 801dda4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 801dd9c:	4b08      	ldr	r3, [pc, #32]	; (801ddc0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801dd9e:	f9b3 0000 	ldrsh.w	r0, [r3]
 801dda2:	4770      	bx	lr
 801dda4:	4b07      	ldr	r3, [pc, #28]	; (801ddc4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801dda6:	e7fa      	b.n	801dd9e <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 801dda8:	2000      	movs	r0, #0
 801ddaa:	4770      	bx	lr
 801ddac:	2001784c 	.word	0x2001784c
 801ddb0:	20017854 	.word	0x20017854
 801ddb4:	20017850 	.word	0x20017850
 801ddb8:	20017834 	.word	0x20017834
 801ddbc:	200177bc 	.word	0x200177bc
 801ddc0:	200177c0 	.word	0x200177c0
 801ddc4:	200177be 	.word	0x200177be

0801ddc8 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801ddc8:	4a1f      	ldr	r2, [pc, #124]	; (801de48 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>)
 801ddca:	b510      	push	{r4, lr}
 801ddcc:	880b      	ldrh	r3, [r1, #0]
 801ddce:	8812      	ldrh	r2, [r2, #0]
 801ddd0:	4293      	cmp	r3, r2
 801ddd2:	d213      	bcs.n	801ddfc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 801ddd4:	4a1d      	ldr	r2, [pc, #116]	; (801de4c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>)
 801ddd6:	2114      	movs	r1, #20
 801ddd8:	6812      	ldr	r2, [r2, #0]
 801ddda:	fb01 2303 	mla	r3, r1, r3, r2
 801ddde:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801dde2:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801dde6:	8a1a      	ldrh	r2, [r3, #16]
 801dde8:	8a5b      	ldrh	r3, [r3, #18]
 801ddea:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801ddee:	8004      	strh	r4, [r0, #0]
 801ddf0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801ddf4:	8041      	strh	r1, [r0, #2]
 801ddf6:	8082      	strh	r2, [r0, #4]
 801ddf8:	80c3      	strh	r3, [r0, #6]
 801ddfa:	e00e      	b.n	801de1a <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 801ddfc:	4914      	ldr	r1, [pc, #80]	; (801de50 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x88>)
 801ddfe:	8809      	ldrh	r1, [r1, #0]
 801de00:	4411      	add	r1, r2
 801de02:	428b      	cmp	r3, r1
 801de04:	da0a      	bge.n	801de1c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x54>
 801de06:	1a9b      	subs	r3, r3, r2
 801de08:	4a12      	ldr	r2, [pc, #72]	; (801de54 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 801de0a:	210e      	movs	r1, #14
 801de0c:	6812      	ldr	r2, [r2, #0]
 801de0e:	fb01 2303 	mla	r3, r1, r3, r2
 801de12:	681a      	ldr	r2, [r3, #0]
 801de14:	6002      	str	r2, [r0, #0]
 801de16:	685a      	ldr	r2, [r3, #4]
 801de18:	6042      	str	r2, [r0, #4]
 801de1a:	bd10      	pop	{r4, pc}
 801de1c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801de20:	4293      	cmp	r3, r2
 801de22:	d10b      	bne.n	801de3c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x74>
 801de24:	4b0c      	ldr	r3, [pc, #48]	; (801de58 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801de26:	f9b3 1000 	ldrsh.w	r1, [r3]
 801de2a:	4b0c      	ldr	r3, [pc, #48]	; (801de5c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801de2c:	8081      	strh	r1, [r0, #4]
 801de2e:	f9b3 2000 	ldrsh.w	r2, [r3]
 801de32:	2300      	movs	r3, #0
 801de34:	80c2      	strh	r2, [r0, #6]
 801de36:	8003      	strh	r3, [r0, #0]
 801de38:	8043      	strh	r3, [r0, #2]
 801de3a:	e7ee      	b.n	801de1a <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 801de3c:	2300      	movs	r3, #0
 801de3e:	8003      	strh	r3, [r0, #0]
 801de40:	8043      	strh	r3, [r0, #2]
 801de42:	8083      	strh	r3, [r0, #4]
 801de44:	e7d8      	b.n	801ddf8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 801de46:	bf00      	nop
 801de48:	2001784c 	.word	0x2001784c
 801de4c:	20017854 	.word	0x20017854
 801de50:	20017850 	.word	0x20017850
 801de54:	20017834 	.word	0x20017834
 801de58:	200177b8 	.word	0x200177b8
 801de5c:	200177ba 	.word	0x200177ba

0801de60 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801de60:	4a17      	ldr	r2, [pc, #92]	; (801dec0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 801de62:	8803      	ldrh	r3, [r0, #0]
 801de64:	8812      	ldrh	r2, [r2, #0]
 801de66:	4293      	cmp	r3, r2
 801de68:	d213      	bcs.n	801de92 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
 801de6a:	4a16      	ldr	r2, [pc, #88]	; (801dec4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801de6c:	2114      	movs	r1, #20
 801de6e:	6812      	ldr	r2, [r2, #0]
 801de70:	fb01 2303 	mla	r3, r1, r3, r2
 801de74:	8a1a      	ldrh	r2, [r3, #16]
 801de76:	8919      	ldrh	r1, [r3, #8]
 801de78:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801de7c:	428a      	cmp	r2, r1
 801de7e:	db1d      	blt.n	801debc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801de80:	8a58      	ldrh	r0, [r3, #18]
 801de82:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801de86:	895b      	ldrh	r3, [r3, #10]
 801de88:	4298      	cmp	r0, r3
 801de8a:	bfac      	ite	ge
 801de8c:	2000      	movge	r0, #0
 801de8e:	2001      	movlt	r0, #1
 801de90:	4770      	bx	lr
 801de92:	490d      	ldr	r1, [pc, #52]	; (801dec8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 801de94:	8809      	ldrh	r1, [r1, #0]
 801de96:	4411      	add	r1, r2
 801de98:	428b      	cmp	r3, r1
 801de9a:	da0d      	bge.n	801deb8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 801de9c:	1a9b      	subs	r3, r3, r2
 801de9e:	4a0b      	ldr	r2, [pc, #44]	; (801decc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 801dea0:	210e      	movs	r1, #14
 801dea2:	6812      	ldr	r2, [r2, #0]
 801dea4:	fb01 2303 	mla	r3, r1, r3, r2
 801dea8:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801deac:	891a      	ldrh	r2, [r3, #8]
 801deae:	4291      	cmp	r1, r2
 801deb0:	db04      	blt.n	801debc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801deb2:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801deb6:	e7e6      	b.n	801de86 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
 801deb8:	2000      	movs	r0, #0
 801deba:	4770      	bx	lr
 801debc:	2001      	movs	r0, #1
 801debe:	4770      	bx	lr
 801dec0:	2001784c 	.word	0x2001784c
 801dec4:	20017854 	.word	0x20017854
 801dec8:	20017850 	.word	0x20017850
 801decc:	20017834 	.word	0x20017834

0801ded0 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801ded0:	4a12      	ldr	r2, [pc, #72]	; (801df1c <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801ded2:	8803      	ldrh	r3, [r0, #0]
 801ded4:	8811      	ldrh	r1, [r2, #0]
 801ded6:	428b      	cmp	r3, r1
 801ded8:	d20b      	bcs.n	801def2 <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 801deda:	4a11      	ldr	r2, [pc, #68]	; (801df20 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801dedc:	6812      	ldr	r2, [r2, #0]
 801dede:	b112      	cbz	r2, 801dee6 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801dee0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801dee4:	b9c0      	cbnz	r0, 801df18 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 801dee6:	4a0f      	ldr	r2, [pc, #60]	; (801df24 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801dee8:	6811      	ldr	r1, [r2, #0]
 801deea:	2214      	movs	r2, #20
 801deec:	4353      	muls	r3, r2
 801deee:	58c8      	ldr	r0, [r1, r3]
 801def0:	4770      	bx	lr
 801def2:	4a0d      	ldr	r2, [pc, #52]	; (801df28 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801def4:	8812      	ldrh	r2, [r2, #0]
 801def6:	440a      	add	r2, r1
 801def8:	4293      	cmp	r3, r2
 801defa:	da04      	bge.n	801df06 <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 801defc:	4a08      	ldr	r2, [pc, #32]	; (801df20 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801defe:	6812      	ldr	r2, [r2, #0]
 801df00:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801df04:	4770      	bx	lr
 801df06:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801df0a:	4293      	cmp	r3, r2
 801df0c:	d103      	bne.n	801df16 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801df0e:	4b07      	ldr	r3, [pc, #28]	; (801df2c <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801df10:	681b      	ldr	r3, [r3, #0]
 801df12:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801df14:	4770      	bx	lr
 801df16:	2000      	movs	r0, #0
 801df18:	4770      	bx	lr
 801df1a:	bf00      	nop
 801df1c:	2001784c 	.word	0x2001784c
 801df20:	20017830 	.word	0x20017830
 801df24:	20017854 	.word	0x20017854
 801df28:	20017850 	.word	0x20017850
 801df2c:	200177c4 	.word	0x200177c4

0801df30 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801df30:	4b24      	ldr	r3, [pc, #144]	; (801dfc4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801df32:	8802      	ldrh	r2, [r0, #0]
 801df34:	8818      	ldrh	r0, [r3, #0]
 801df36:	4282      	cmp	r2, r0
 801df38:	d221      	bcs.n	801df7e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 801df3a:	4b23      	ldr	r3, [pc, #140]	; (801dfc8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801df3c:	6819      	ldr	r1, [r3, #0]
 801df3e:	2314      	movs	r3, #20
 801df40:	fb03 1302 	mla	r3, r3, r2, r1
 801df44:	6858      	ldr	r0, [r3, #4]
 801df46:	2800      	cmp	r0, #0
 801df48:	d03a      	beq.n	801dfc0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801df4a:	4920      	ldr	r1, [pc, #128]	; (801dfcc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801df4c:	6809      	ldr	r1, [r1, #0]
 801df4e:	2900      	cmp	r1, #0
 801df50:	d036      	beq.n	801dfc0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801df52:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801df56:	2900      	cmp	r1, #0
 801df58:	d032      	beq.n	801dfc0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801df5a:	891a      	ldrh	r2, [r3, #8]
 801df5c:	8958      	ldrh	r0, [r3, #10]
 801df5e:	4350      	muls	r0, r2
 801df60:	7c5a      	ldrb	r2, [r3, #17]
 801df62:	7cdb      	ldrb	r3, [r3, #19]
 801df64:	0952      	lsrs	r2, r2, #5
 801df66:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801df6a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801df6e:	2b0b      	cmp	r3, #11
 801df70:	bf18      	it	ne
 801df72:	0040      	lslne	r0, r0, #1
 801df74:	3003      	adds	r0, #3
 801df76:	f020 0003 	bic.w	r0, r0, #3
 801df7a:	4408      	add	r0, r1
 801df7c:	4770      	bx	lr
 801df7e:	4b14      	ldr	r3, [pc, #80]	; (801dfd0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801df80:	881b      	ldrh	r3, [r3, #0]
 801df82:	4403      	add	r3, r0
 801df84:	429a      	cmp	r2, r3
 801df86:	da1a      	bge.n	801dfbe <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801df88:	4b12      	ldr	r3, [pc, #72]	; (801dfd4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801df8a:	1a10      	subs	r0, r2, r0
 801df8c:	210e      	movs	r1, #14
 801df8e:	681b      	ldr	r3, [r3, #0]
 801df90:	fb01 3000 	mla	r0, r1, r0, r3
 801df94:	7b03      	ldrb	r3, [r0, #12]
 801df96:	f003 031f 	and.w	r3, r3, #31
 801df9a:	2b0b      	cmp	r3, #11
 801df9c:	d10b      	bne.n	801dfb6 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 801df9e:	8903      	ldrh	r3, [r0, #8]
 801dfa0:	8940      	ldrh	r0, [r0, #10]
 801dfa2:	4358      	muls	r0, r3
 801dfa4:	4b09      	ldr	r3, [pc, #36]	; (801dfcc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801dfa6:	3003      	adds	r0, #3
 801dfa8:	6819      	ldr	r1, [r3, #0]
 801dfaa:	f020 0303 	bic.w	r3, r0, #3
 801dfae:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801dfb2:	4418      	add	r0, r3
 801dfb4:	4770      	bx	lr
 801dfb6:	2b0d      	cmp	r3, #13
 801dfb8:	d101      	bne.n	801dfbe <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801dfba:	300d      	adds	r0, #13
 801dfbc:	4770      	bx	lr
 801dfbe:	2000      	movs	r0, #0
 801dfc0:	4770      	bx	lr
 801dfc2:	bf00      	nop
 801dfc4:	2001784c 	.word	0x2001784c
 801dfc8:	20017854 	.word	0x20017854
 801dfcc:	20017830 	.word	0x20017830
 801dfd0:	20017850 	.word	0x20017850
 801dfd4:	20017834 	.word	0x20017834

0801dfd8 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801dfd8:	4a17      	ldr	r2, [pc, #92]	; (801e038 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 801dfda:	b510      	push	{r4, lr}
 801dfdc:	8803      	ldrh	r3, [r0, #0]
 801dfde:	8812      	ldrh	r2, [r2, #0]
 801dfe0:	4293      	cmp	r3, r2
 801dfe2:	d20c      	bcs.n	801dffe <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801dfe4:	4a15      	ldr	r2, [pc, #84]	; (801e03c <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 801dfe6:	2114      	movs	r1, #20
 801dfe8:	6812      	ldr	r2, [r2, #0]
 801dfea:	fb01 2303 	mla	r3, r1, r3, r2
 801dfee:	7c58      	ldrb	r0, [r3, #17]
 801dff0:	0942      	lsrs	r2, r0, #5
 801dff2:	7cd8      	ldrb	r0, [r3, #19]
 801dff4:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801dff8:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801dffc:	bd10      	pop	{r4, pc}
 801dffe:	4910      	ldr	r1, [pc, #64]	; (801e040 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801e000:	8809      	ldrh	r1, [r1, #0]
 801e002:	4411      	add	r1, r2
 801e004:	428b      	cmp	r3, r1
 801e006:	da09      	bge.n	801e01c <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801e008:	1a9b      	subs	r3, r3, r2
 801e00a:	4a0e      	ldr	r2, [pc, #56]	; (801e044 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801e00c:	210e      	movs	r1, #14
 801e00e:	6812      	ldr	r2, [r2, #0]
 801e010:	fb01 2303 	mla	r3, r1, r3, r2
 801e014:	7b18      	ldrb	r0, [r3, #12]
 801e016:	f000 001f 	and.w	r0, r0, #31
 801e01a:	e7ef      	b.n	801dffc <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 801e01c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801e020:	4293      	cmp	r3, r2
 801e022:	d106      	bne.n	801e032 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 801e024:	f7f9 fd92 	bl	8017b4c <_ZN8touchgfx3HAL3lcdEv>
 801e028:	6803      	ldr	r3, [r0, #0]
 801e02a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e02e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e030:	4718      	bx	r3
 801e032:	2000      	movs	r0, #0
 801e034:	e7e2      	b.n	801dffc <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 801e036:	bf00      	nop
 801e038:	2001784c 	.word	0x2001784c
 801e03c:	20017854 	.word	0x20017854
 801e040:	20017850 	.word	0x20017850
 801e044:	20017834 	.word	0x20017834

0801e048 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 801e048:	2010      	movs	r0, #16
 801e04a:	4770      	bx	lr

0801e04c <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 801e04c:	2000      	movs	r0, #0
 801e04e:	4770      	bx	lr

0801e050 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 801e050:	4b02      	ldr	r3, [pc, #8]	; (801e05c <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0xc>)
 801e052:	8818      	ldrh	r0, [r3, #0]
 801e054:	0040      	lsls	r0, r0, #1
 801e056:	b280      	uxth	r0, r0
 801e058:	4770      	bx	lr
 801e05a:	bf00      	nop
 801e05c:	200177be 	.word	0x200177be

0801e060 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801e060:	2bff      	cmp	r3, #255	; 0xff
 801e062:	d050      	beq.n	801e106 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 801e064:	2a0b      	cmp	r2, #11
 801e066:	d04a      	beq.n	801e0fe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801e068:	d80e      	bhi.n	801e088 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 801e06a:	2a03      	cmp	r2, #3
 801e06c:	d03f      	beq.n	801e0ee <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801e06e:	d804      	bhi.n	801e07a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801e070:	2a01      	cmp	r2, #1
 801e072:	d03e      	beq.n	801e0f2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 801e074:	d93f      	bls.n	801e0f6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801e076:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801e078:	4770      	bx	lr
 801e07a:	2a09      	cmp	r2, #9
 801e07c:	d03f      	beq.n	801e0fe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801e07e:	d83c      	bhi.n	801e0fa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801e080:	2a08      	cmp	r2, #8
 801e082:	d03a      	beq.n	801e0fa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801e084:	2000      	movs	r0, #0
 801e086:	4770      	bx	lr
 801e088:	2a2f      	cmp	r2, #47	; 0x2f
 801e08a:	d024      	beq.n	801e0d6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 801e08c:	d80d      	bhi.n	801e0aa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 801e08e:	2a2d      	cmp	r2, #45	; 0x2d
 801e090:	d014      	beq.n	801e0bc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
 801e092:	d826      	bhi.n	801e0e2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 801e094:	2a2c      	cmp	r2, #44	; 0x2c
 801e096:	d1f5      	bne.n	801e084 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e098:	684b      	ldr	r3, [r1, #4]
 801e09a:	781b      	ldrb	r3, [r3, #0]
 801e09c:	2b01      	cmp	r3, #1
 801e09e:	d018      	beq.n	801e0d2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 801e0a0:	d323      	bcc.n	801e0ea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 801e0a2:	2b02      	cmp	r3, #2
 801e0a4:	d1ee      	bne.n	801e084 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e0a6:	6880      	ldr	r0, [r0, #8]
 801e0a8:	4770      	bx	lr
 801e0aa:	2a31      	cmp	r2, #49	; 0x31
 801e0ac:	d004      	beq.n	801e0b8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
 801e0ae:	d328      	bcc.n	801e102 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801e0b0:	2a32      	cmp	r2, #50	; 0x32
 801e0b2:	d026      	beq.n	801e102 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801e0b4:	2a33      	cmp	r2, #51	; 0x33
 801e0b6:	d1e5      	bne.n	801e084 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e0b8:	6f00      	ldr	r0, [r0, #112]	; 0x70
 801e0ba:	4770      	bx	lr
 801e0bc:	684b      	ldr	r3, [r1, #4]
 801e0be:	781b      	ldrb	r3, [r3, #0]
 801e0c0:	2b01      	cmp	r3, #1
 801e0c2:	d004      	beq.n	801e0ce <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e0c4:	d30b      	bcc.n	801e0de <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801e0c6:	2b02      	cmp	r3, #2
 801e0c8:	d1dc      	bne.n	801e084 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e0ca:	6900      	ldr	r0, [r0, #16]
 801e0cc:	4770      	bx	lr
 801e0ce:	6a00      	ldr	r0, [r0, #32]
 801e0d0:	4770      	bx	lr
 801e0d2:	6980      	ldr	r0, [r0, #24]
 801e0d4:	4770      	bx	lr
 801e0d6:	684b      	ldr	r3, [r1, #4]
 801e0d8:	781b      	ldrb	r3, [r3, #0]
 801e0da:	2b00      	cmp	r3, #0
 801e0dc:	d1d2      	bne.n	801e084 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e0de:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801e0e0:	4770      	bx	lr
 801e0e2:	684b      	ldr	r3, [r1, #4]
 801e0e4:	781b      	ldrb	r3, [r3, #0]
 801e0e6:	2b00      	cmp	r3, #0
 801e0e8:	d1cc      	bne.n	801e084 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e0ea:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801e0ec:	4770      	bx	lr
 801e0ee:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801e0f0:	4770      	bx	lr
 801e0f2:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801e0f4:	4770      	bx	lr
 801e0f6:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801e0f8:	4770      	bx	lr
 801e0fa:	6d80      	ldr	r0, [r0, #88]	; 0x58
 801e0fc:	4770      	bx	lr
 801e0fe:	6e00      	ldr	r0, [r0, #96]	; 0x60
 801e100:	4770      	bx	lr
 801e102:	6e80      	ldr	r0, [r0, #104]	; 0x68
 801e104:	4770      	bx	lr
 801e106:	2a0b      	cmp	r2, #11
 801e108:	d049      	beq.n	801e19e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801e10a:	d80e      	bhi.n	801e12a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
 801e10c:	2a03      	cmp	r2, #3
 801e10e:	d040      	beq.n	801e192 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801e110:	d804      	bhi.n	801e11c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
 801e112:	2a01      	cmp	r2, #1
 801e114:	d03f      	beq.n	801e196 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 801e116:	d940      	bls.n	801e19a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801e118:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801e11a:	4770      	bx	lr
 801e11c:	2a09      	cmp	r2, #9
 801e11e:	d03e      	beq.n	801e19e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801e120:	d801      	bhi.n	801e126 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
 801e122:	2a08      	cmp	r2, #8
 801e124:	d1ae      	bne.n	801e084 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e126:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 801e128:	4770      	bx	lr
 801e12a:	2a2f      	cmp	r2, #47	; 0x2f
 801e12c:	d024      	beq.n	801e178 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 801e12e:	d80d      	bhi.n	801e14c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 801e130:	2a2d      	cmp	r2, #45	; 0x2d
 801e132:	d014      	beq.n	801e15e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
 801e134:	d826      	bhi.n	801e184 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
 801e136:	2a2c      	cmp	r2, #44	; 0x2c
 801e138:	d1a4      	bne.n	801e084 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e13a:	684b      	ldr	r3, [r1, #4]
 801e13c:	781b      	ldrb	r3, [r3, #0]
 801e13e:	2b01      	cmp	r3, #1
 801e140:	d018      	beq.n	801e174 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
 801e142:	d324      	bcc.n	801e18e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 801e144:	2b02      	cmp	r3, #2
 801e146:	d19d      	bne.n	801e084 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e148:	68c0      	ldr	r0, [r0, #12]
 801e14a:	4770      	bx	lr
 801e14c:	2a31      	cmp	r2, #49	; 0x31
 801e14e:	d004      	beq.n	801e15a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
 801e150:	d327      	bcc.n	801e1a2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801e152:	2a32      	cmp	r2, #50	; 0x32
 801e154:	d025      	beq.n	801e1a2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801e156:	2a33      	cmp	r2, #51	; 0x33
 801e158:	d194      	bne.n	801e084 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e15a:	6f40      	ldr	r0, [r0, #116]	; 0x74
 801e15c:	4770      	bx	lr
 801e15e:	684b      	ldr	r3, [r1, #4]
 801e160:	781b      	ldrb	r3, [r3, #0]
 801e162:	2b01      	cmp	r3, #1
 801e164:	d004      	beq.n	801e170 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 801e166:	d30b      	bcc.n	801e180 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
 801e168:	2b02      	cmp	r3, #2
 801e16a:	d18b      	bne.n	801e084 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e16c:	6940      	ldr	r0, [r0, #20]
 801e16e:	4770      	bx	lr
 801e170:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801e172:	4770      	bx	lr
 801e174:	69c0      	ldr	r0, [r0, #28]
 801e176:	4770      	bx	lr
 801e178:	684b      	ldr	r3, [r1, #4]
 801e17a:	781b      	ldrb	r3, [r3, #0]
 801e17c:	2b00      	cmp	r3, #0
 801e17e:	d181      	bne.n	801e084 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e180:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801e182:	4770      	bx	lr
 801e184:	684b      	ldr	r3, [r1, #4]
 801e186:	781b      	ldrb	r3, [r3, #0]
 801e188:	2b00      	cmp	r3, #0
 801e18a:	f47f af7b 	bne.w	801e084 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e18e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801e190:	4770      	bx	lr
 801e192:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801e194:	4770      	bx	lr
 801e196:	6d40      	ldr	r0, [r0, #84]	; 0x54
 801e198:	4770      	bx	lr
 801e19a:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801e19c:	4770      	bx	lr
 801e19e:	6e40      	ldr	r0, [r0, #100]	; 0x64
 801e1a0:	4770      	bx	lr
 801e1a2:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 801e1a4:	4770      	bx	lr

0801e1a6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e1a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e1aa:	b087      	sub	sp, #28
 801e1ac:	9815      	ldr	r0, [sp, #84]	; 0x54
 801e1ae:	9205      	str	r2, [sp, #20]
 801e1b0:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801e1b4:	9101      	str	r1, [sp, #4]
 801e1b6:	9202      	str	r2, [sp, #8]
 801e1b8:	6841      	ldr	r1, [r0, #4]
 801e1ba:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 801e1be:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801e1c2:	fb01 2404 	mla	r4, r1, r4, r2
 801e1c6:	6802      	ldr	r2, [r0, #0]
 801e1c8:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801e1cc:	f8de 2000 	ldr.w	r2, [lr]
 801e1d0:	9203      	str	r2, [sp, #12]
 801e1d2:	f8de 2004 	ldr.w	r2, [lr, #4]
 801e1d6:	3204      	adds	r2, #4
 801e1d8:	9204      	str	r2, [sp, #16]
 801e1da:	9a02      	ldr	r2, [sp, #8]
 801e1dc:	43d6      	mvns	r6, r2
 801e1de:	b2f6      	uxtb	r6, r6
 801e1e0:	9a01      	ldr	r2, [sp, #4]
 801e1e2:	2a00      	cmp	r2, #0
 801e1e4:	dc03      	bgt.n	801e1ee <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801e1e6:	9a05      	ldr	r2, [sp, #20]
 801e1e8:	2a00      	cmp	r2, #0
 801e1ea:	f340 8129 	ble.w	801e440 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801e1ee:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e1f0:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801e1f4:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801e1f8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e1fa:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801e1fe:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801e202:	2b00      	cmp	r3, #0
 801e204:	dd0e      	ble.n	801e224 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801e206:	1408      	asrs	r0, r1, #16
 801e208:	d405      	bmi.n	801e216 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801e20a:	4560      	cmp	r0, ip
 801e20c:	da03      	bge.n	801e216 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801e20e:	1410      	asrs	r0, r2, #16
 801e210:	d401      	bmi.n	801e216 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801e212:	42b8      	cmp	r0, r7
 801e214:	db07      	blt.n	801e226 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801e216:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801e218:	3b01      	subs	r3, #1
 801e21a:	3402      	adds	r4, #2
 801e21c:	4401      	add	r1, r0
 801e21e:	9814      	ldr	r0, [sp, #80]	; 0x50
 801e220:	4402      	add	r2, r0
 801e222:	e7ee      	b.n	801e202 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801e224:	d071      	beq.n	801e30a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801e226:	1e58      	subs	r0, r3, #1
 801e228:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801e22a:	fb05 1500 	mla	r5, r5, r0, r1
 801e22e:	142d      	asrs	r5, r5, #16
 801e230:	d45f      	bmi.n	801e2f2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801e232:	4565      	cmp	r5, ip
 801e234:	da5d      	bge.n	801e2f2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801e236:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801e238:	fb05 2000 	mla	r0, r5, r0, r2
 801e23c:	1400      	asrs	r0, r0, #16
 801e23e:	d458      	bmi.n	801e2f2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801e240:	42b8      	cmp	r0, r7
 801e242:	da56      	bge.n	801e2f2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801e244:	4699      	mov	r9, r3
 801e246:	46a2      	mov	sl, r4
 801e248:	f8bd b008 	ldrh.w	fp, [sp, #8]
 801e24c:	f1b9 0f00 	cmp.w	r9, #0
 801e250:	dd57      	ble.n	801e302 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 801e252:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801e256:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801e25a:	9803      	ldr	r0, [sp, #12]
 801e25c:	140d      	asrs	r5, r1, #16
 801e25e:	f109 39ff 	add.w	r9, r9, #4294967295
 801e262:	fb07 000c 	mla	r0, r7, ip, r0
 801e266:	5d40      	ldrb	r0, [r0, r5]
 801e268:	9d04      	ldr	r5, [sp, #16]
 801e26a:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801e26e:	f8ba 5000 	ldrh.w	r5, [sl]
 801e272:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801e276:	122f      	asrs	r7, r5, #8
 801e278:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801e27c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801e280:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801e284:	00ed      	lsls	r5, r5, #3
 801e286:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 801e28a:	fb17 f706 	smulbb	r7, r7, r6
 801e28e:	b2ed      	uxtb	r5, r5
 801e290:	fb18 f806 	smulbb	r8, r8, r6
 801e294:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801e298:	10c7      	asrs	r7, r0, #3
 801e29a:	fb15 f506 	smulbb	r5, r5, r6
 801e29e:	00c0      	lsls	r0, r0, #3
 801e2a0:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801e2a4:	fa1f fc8c 	uxth.w	ip, ip
 801e2a8:	b2c0      	uxtb	r0, r0
 801e2aa:	fb07 870b 	mla	r7, r7, fp, r8
 801e2ae:	fb00 500b 	mla	r0, r0, fp, r5
 801e2b2:	f10c 0501 	add.w	r5, ip, #1
 801e2b6:	b2bf      	uxth	r7, r7
 801e2b8:	b280      	uxth	r0, r0
 801e2ba:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801e2be:	f107 0801 	add.w	r8, r7, #1
 801e2c2:	1c45      	adds	r5, r0, #1
 801e2c4:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801e2c8:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801e2cc:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801e2d0:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801e2d2:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801e2d6:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801e2da:	4401      	add	r1, r0
 801e2dc:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801e2e0:	9814      	ldr	r0, [sp, #80]	; 0x50
 801e2e2:	ea45 0c0c 	orr.w	ip, r5, ip
 801e2e6:	4402      	add	r2, r0
 801e2e8:	ea4c 0c08 	orr.w	ip, ip, r8
 801e2ec:	f82a cb02 	strh.w	ip, [sl], #2
 801e2f0:	e7ac      	b.n	801e24c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801e2f2:	f04f 0800 	mov.w	r8, #0
 801e2f6:	f8bd a008 	ldrh.w	sl, [sp, #8]
 801e2fa:	eb03 0008 	add.w	r0, r3, r8
 801e2fe:	2800      	cmp	r0, #0
 801e300:	dc41      	bgt.n	801e386 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801e302:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e306:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801e30a:	9b01      	ldr	r3, [sp, #4]
 801e30c:	2b00      	cmp	r3, #0
 801e30e:	f340 8097 	ble.w	801e440 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801e312:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e316:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e318:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e31c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e320:	eef0 6a62 	vmov.f32	s13, s5
 801e324:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e328:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e32c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e330:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 801e334:	eef0 6a43 	vmov.f32	s13, s6
 801e338:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e33c:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 801e340:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e344:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e348:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e34c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e350:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e354:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e358:	ee12 2a90 	vmov	r2, s5
 801e35c:	eef0 2a47 	vmov.f32	s5, s14
 801e360:	fb92 f3f3 	sdiv	r3, r2, r3
 801e364:	ee13 2a10 	vmov	r2, s6
 801e368:	9313      	str	r3, [sp, #76]	; 0x4c
 801e36a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e36c:	eeb0 3a67 	vmov.f32	s6, s15
 801e370:	fb92 f3f3 	sdiv	r3, r2, r3
 801e374:	9314      	str	r3, [sp, #80]	; 0x50
 801e376:	9b01      	ldr	r3, [sp, #4]
 801e378:	9a05      	ldr	r2, [sp, #20]
 801e37a:	3b01      	subs	r3, #1
 801e37c:	9301      	str	r3, [sp, #4]
 801e37e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e380:	bf08      	it	eq
 801e382:	4613      	moveq	r3, r2
 801e384:	e72c      	b.n	801e1e0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801e386:	140f      	asrs	r7, r1, #16
 801e388:	d453      	bmi.n	801e432 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801e38a:	f8de 5008 	ldr.w	r5, [lr, #8]
 801e38e:	42bd      	cmp	r5, r7
 801e390:	dd4f      	ble.n	801e432 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801e392:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801e396:	d44c      	bmi.n	801e432 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801e398:	f8de 000c 	ldr.w	r0, [lr, #12]
 801e39c:	4560      	cmp	r0, ip
 801e39e:	dd48      	ble.n	801e432 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801e3a0:	9803      	ldr	r0, [sp, #12]
 801e3a2:	b22d      	sxth	r5, r5
 801e3a4:	fb0c 0505 	mla	r5, ip, r5, r0
 801e3a8:	5de8      	ldrb	r0, [r5, r7]
 801e3aa:	9d04      	ldr	r5, [sp, #16]
 801e3ac:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801e3b0:	f06f 0501 	mvn.w	r5, #1
 801e3b4:	fb05 fb08 	mul.w	fp, r5, r8
 801e3b8:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801e3bc:	f834 500b 	ldrh.w	r5, [r4, fp]
 801e3c0:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801e3c4:	122f      	asrs	r7, r5, #8
 801e3c6:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801e3ca:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801e3ce:	00ed      	lsls	r5, r5, #3
 801e3d0:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801e3d4:	fb17 f706 	smulbb	r7, r7, r6
 801e3d8:	b2ed      	uxtb	r5, r5
 801e3da:	fb19 f906 	smulbb	r9, r9, r6
 801e3de:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801e3e2:	10c7      	asrs	r7, r0, #3
 801e3e4:	fb15 f506 	smulbb	r5, r5, r6
 801e3e8:	00c0      	lsls	r0, r0, #3
 801e3ea:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801e3ee:	fa1f fc8c 	uxth.w	ip, ip
 801e3f2:	b2c0      	uxtb	r0, r0
 801e3f4:	fb07 970a 	mla	r7, r7, sl, r9
 801e3f8:	fb00 500a 	mla	r0, r0, sl, r5
 801e3fc:	f10c 0501 	add.w	r5, ip, #1
 801e400:	b2bf      	uxth	r7, r7
 801e402:	b280      	uxth	r0, r0
 801e404:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801e408:	f107 0901 	add.w	r9, r7, #1
 801e40c:	1c45      	adds	r5, r0, #1
 801e40e:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801e412:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801e416:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801e41a:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801e41e:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801e422:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801e426:	ea45 0c0c 	orr.w	ip, r5, ip
 801e42a:	ea4c 0c09 	orr.w	ip, ip, r9
 801e42e:	f824 c00b 	strh.w	ip, [r4, fp]
 801e432:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801e434:	f108 38ff 	add.w	r8, r8, #4294967295
 801e438:	4401      	add	r1, r0
 801e43a:	9814      	ldr	r0, [sp, #80]	; 0x50
 801e43c:	4402      	add	r2, r0
 801e43e:	e75c      	b.n	801e2fa <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801e440:	b007      	add	sp, #28
 801e442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e446 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e446:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e44a:	b085      	sub	sp, #20
 801e44c:	4693      	mov	fp, r2
 801e44e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e452:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801e454:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801e456:	6870      	ldr	r0, [r6, #4]
 801e458:	9100      	str	r1, [sp, #0]
 801e45a:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801e45e:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 801e462:	fb00 2404 	mla	r4, r0, r4, r2
 801e466:	6832      	ldr	r2, [r6, #0]
 801e468:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801e46c:	682a      	ldr	r2, [r5, #0]
 801e46e:	9201      	str	r2, [sp, #4]
 801e470:	686a      	ldr	r2, [r5, #4]
 801e472:	3204      	adds	r2, #4
 801e474:	9202      	str	r2, [sp, #8]
 801e476:	9a00      	ldr	r2, [sp, #0]
 801e478:	2a00      	cmp	r2, #0
 801e47a:	dc03      	bgt.n	801e484 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801e47c:	f1bb 0f00 	cmp.w	fp, #0
 801e480:	f340 80a0 	ble.w	801e5c4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 801e484:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e486:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801e48a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801e48e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801e490:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801e494:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801e498:	2b00      	cmp	r3, #0
 801e49a:	dd0c      	ble.n	801e4b6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801e49c:	1406      	asrs	r6, r0, #16
 801e49e:	d405      	bmi.n	801e4ac <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801e4a0:	454e      	cmp	r6, r9
 801e4a2:	da03      	bge.n	801e4ac <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801e4a4:	1416      	asrs	r6, r2, #16
 801e4a6:	d401      	bmi.n	801e4ac <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801e4a8:	4546      	cmp	r6, r8
 801e4aa:	db05      	blt.n	801e4b8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e4ac:	4470      	add	r0, lr
 801e4ae:	4462      	add	r2, ip
 801e4b0:	3b01      	subs	r3, #1
 801e4b2:	3402      	adds	r4, #2
 801e4b4:	e7f0      	b.n	801e498 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801e4b6:	d00f      	beq.n	801e4d8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801e4b8:	1e5e      	subs	r6, r3, #1
 801e4ba:	fb0e 0706 	mla	r7, lr, r6, r0
 801e4be:	143f      	asrs	r7, r7, #16
 801e4c0:	d541      	bpl.n	801e546 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 801e4c2:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801e4c6:	4698      	mov	r8, r3
 801e4c8:	9603      	str	r6, [sp, #12]
 801e4ca:	f1b8 0f00 	cmp.w	r8, #0
 801e4ce:	dc59      	bgt.n	801e584 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801e4d0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e4d4:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801e4d8:	9b00      	ldr	r3, [sp, #0]
 801e4da:	2b00      	cmp	r3, #0
 801e4dc:	dd72      	ble.n	801e5c4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 801e4de:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e4e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e4e4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e4e8:	eeb0 6a62 	vmov.f32	s12, s5
 801e4ec:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e4f0:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e4f4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e4f8:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801e4fc:	eeb0 6a43 	vmov.f32	s12, s6
 801e500:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e504:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801e508:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e50c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e510:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e514:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e518:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e51c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e520:	ee12 2a90 	vmov	r2, s5
 801e524:	eef0 2a47 	vmov.f32	s5, s14
 801e528:	fb92 fef3 	sdiv	lr, r2, r3
 801e52c:	ee13 2a10 	vmov	r2, s6
 801e530:	eeb0 3a67 	vmov.f32	s6, s15
 801e534:	fb92 fcf3 	sdiv	ip, r2, r3
 801e538:	9b00      	ldr	r3, [sp, #0]
 801e53a:	3b01      	subs	r3, #1
 801e53c:	9300      	str	r3, [sp, #0]
 801e53e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e540:	bf08      	it	eq
 801e542:	465b      	moveq	r3, fp
 801e544:	e797      	b.n	801e476 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801e546:	454f      	cmp	r7, r9
 801e548:	dabb      	bge.n	801e4c2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801e54a:	fb0c 2606 	mla	r6, ip, r6, r2
 801e54e:	1436      	asrs	r6, r6, #16
 801e550:	d4b7      	bmi.n	801e4c2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801e552:	4546      	cmp	r6, r8
 801e554:	dab5      	bge.n	801e4c2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801e556:	461e      	mov	r6, r3
 801e558:	46a0      	mov	r8, r4
 801e55a:	2e00      	cmp	r6, #0
 801e55c:	ddb8      	ble.n	801e4d0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801e55e:	1417      	asrs	r7, r2, #16
 801e560:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801e564:	9901      	ldr	r1, [sp, #4]
 801e566:	ea4f 4920 	mov.w	r9, r0, asr #16
 801e56a:	4462      	add	r2, ip
 801e56c:	4470      	add	r0, lr
 801e56e:	fb0a 1707 	mla	r7, sl, r7, r1
 801e572:	9902      	ldr	r1, [sp, #8]
 801e574:	3e01      	subs	r6, #1
 801e576:	f817 7009 	ldrb.w	r7, [r7, r9]
 801e57a:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801e57e:	f828 7b02 	strh.w	r7, [r8], #2
 801e582:	e7ea      	b.n	801e55a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801e584:	ea5f 4920 	movs.w	r9, r0, asr #16
 801e588:	d417      	bmi.n	801e5ba <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801e58a:	68ae      	ldr	r6, [r5, #8]
 801e58c:	454e      	cmp	r6, r9
 801e58e:	dd14      	ble.n	801e5ba <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801e590:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801e594:	d411      	bmi.n	801e5ba <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801e596:	68ef      	ldr	r7, [r5, #12]
 801e598:	4557      	cmp	r7, sl
 801e59a:	dd0e      	ble.n	801e5ba <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801e59c:	9f01      	ldr	r7, [sp, #4]
 801e59e:	b236      	sxth	r6, r6
 801e5a0:	f06f 0101 	mvn.w	r1, #1
 801e5a4:	fb0a 7606 	mla	r6, sl, r6, r7
 801e5a8:	9f02      	ldr	r7, [sp, #8]
 801e5aa:	f816 6009 	ldrb.w	r6, [r6, r9]
 801e5ae:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801e5b2:	fb01 f608 	mul.w	r6, r1, r8
 801e5b6:	9903      	ldr	r1, [sp, #12]
 801e5b8:	538f      	strh	r7, [r1, r6]
 801e5ba:	4470      	add	r0, lr
 801e5bc:	4462      	add	r2, ip
 801e5be:	f108 38ff 	add.w	r8, r8, #4294967295
 801e5c2:	e782      	b.n	801e4ca <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801e5c4:	b005      	add	sp, #20
 801e5c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e5ca <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e5ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e5ce:	b087      	sub	sp, #28
 801e5d0:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801e5d2:	9205      	str	r2, [sp, #20]
 801e5d4:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801e5d8:	9102      	str	r1, [sp, #8]
 801e5da:	9203      	str	r2, [sp, #12]
 801e5dc:	6861      	ldr	r1, [r4, #4]
 801e5de:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801e5e2:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 801e5e6:	fb01 2000 	mla	r0, r1, r0, r2
 801e5ea:	6822      	ldr	r2, [r4, #0]
 801e5ec:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 801e5f0:	9200      	str	r2, [sp, #0]
 801e5f2:	f8dc 2000 	ldr.w	r2, [ip]
 801e5f6:	9204      	str	r2, [sp, #16]
 801e5f8:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801e5fc:	3204      	adds	r2, #4
 801e5fe:	9201      	str	r2, [sp, #4]
 801e600:	9a03      	ldr	r2, [sp, #12]
 801e602:	43d5      	mvns	r5, r2
 801e604:	b2ed      	uxtb	r5, r5
 801e606:	9a02      	ldr	r2, [sp, #8]
 801e608:	2a00      	cmp	r2, #0
 801e60a:	dc03      	bgt.n	801e614 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801e60c:	9a05      	ldr	r2, [sp, #20]
 801e60e:	2a00      	cmp	r2, #0
 801e610:	f340 812c 	ble.w	801e86c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801e614:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e616:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801e61a:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801e61e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e620:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801e624:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801e628:	2b00      	cmp	r3, #0
 801e62a:	dd10      	ble.n	801e64e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801e62c:	140c      	asrs	r4, r1, #16
 801e62e:	d405      	bmi.n	801e63c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e630:	4574      	cmp	r4, lr
 801e632:	da03      	bge.n	801e63c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e634:	1414      	asrs	r4, r2, #16
 801e636:	d401      	bmi.n	801e63c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e638:	42bc      	cmp	r4, r7
 801e63a:	db09      	blt.n	801e650 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801e63c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801e63e:	3b01      	subs	r3, #1
 801e640:	9800      	ldr	r0, [sp, #0]
 801e642:	4421      	add	r1, r4
 801e644:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801e646:	3002      	adds	r0, #2
 801e648:	4422      	add	r2, r4
 801e64a:	9000      	str	r0, [sp, #0]
 801e64c:	e7ec      	b.n	801e628 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801e64e:	d071      	beq.n	801e734 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 801e650:	1e5c      	subs	r4, r3, #1
 801e652:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801e654:	fb06 1604 	mla	r6, r6, r4, r1
 801e658:	1436      	asrs	r6, r6, #16
 801e65a:	d45d      	bmi.n	801e718 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801e65c:	4576      	cmp	r6, lr
 801e65e:	da5b      	bge.n	801e718 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801e660:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801e662:	fb06 2404 	mla	r4, r6, r4, r2
 801e666:	1424      	asrs	r4, r4, #16
 801e668:	d456      	bmi.n	801e718 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801e66a:	42bc      	cmp	r4, r7
 801e66c:	da54      	bge.n	801e718 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801e66e:	4698      	mov	r8, r3
 801e670:	f8dd 9000 	ldr.w	r9, [sp]
 801e674:	f8bd a00c 	ldrh.w	sl, [sp, #12]
 801e678:	f1b8 0f00 	cmp.w	r8, #0
 801e67c:	dd54      	ble.n	801e728 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801e67e:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801e682:	1414      	asrs	r4, r2, #16
 801e684:	9804      	ldr	r0, [sp, #16]
 801e686:	140e      	asrs	r6, r1, #16
 801e688:	f108 38ff 	add.w	r8, r8, #4294967295
 801e68c:	fb07 0404 	mla	r4, r7, r4, r0
 801e690:	9801      	ldr	r0, [sp, #4]
 801e692:	f814 e006 	ldrb.w	lr, [r4, r6]
 801e696:	f8b9 4000 	ldrh.w	r4, [r9]
 801e69a:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801e69e:	1227      	asrs	r7, r4, #8
 801e6a0:	eb00 0b0e 	add.w	fp, r0, lr
 801e6a4:	f810 e00e 	ldrb.w	lr, [r0, lr]
 801e6a8:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801e6ac:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801e6ae:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801e6b2:	f89b b001 	ldrb.w	fp, [fp, #1]
 801e6b6:	4401      	add	r1, r0
 801e6b8:	fb16 f60a 	smulbb	r6, r6, sl
 801e6bc:	9814      	ldr	r0, [sp, #80]	; 0x50
 801e6be:	fb1b fb0a 	smulbb	fp, fp, sl
 801e6c2:	fb07 6705 	mla	r7, r7, r5, r6
 801e6c6:	10e6      	asrs	r6, r4, #3
 801e6c8:	00e4      	lsls	r4, r4, #3
 801e6ca:	4402      	add	r2, r0
 801e6cc:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801e6d0:	b2bf      	uxth	r7, r7
 801e6d2:	b2e4      	uxtb	r4, r4
 801e6d4:	fb06 b605 	mla	r6, r6, r5, fp
 801e6d8:	fb14 f405 	smulbb	r4, r4, r5
 801e6dc:	b2b6      	uxth	r6, r6
 801e6de:	fb0e 4e0a 	mla	lr, lr, sl, r4
 801e6e2:	1c7c      	adds	r4, r7, #1
 801e6e4:	f106 0b01 	add.w	fp, r6, #1
 801e6e8:	fa1f fe8e 	uxth.w	lr, lr
 801e6ec:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801e6f0:	f10e 0401 	add.w	r4, lr, #1
 801e6f4:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801e6f8:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801e6fc:	eb04 241e 	add.w	r4, r4, lr, lsr #8
 801e700:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801e704:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801e708:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801e70c:	4327      	orrs	r7, r4
 801e70e:	ea47 070b 	orr.w	r7, r7, fp
 801e712:	f829 7b02 	strh.w	r7, [r9], #2
 801e716:	e7af      	b.n	801e678 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801e718:	f04f 0e00 	mov.w	lr, #0
 801e71c:	f8bd 900c 	ldrh.w	r9, [sp, #12]
 801e720:	eb03 040e 	add.w	r4, r3, lr
 801e724:	2c00      	cmp	r4, #0
 801e726:	dc43      	bgt.n	801e7b0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801e728:	9a00      	ldr	r2, [sp, #0]
 801e72a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e72e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801e732:	9300      	str	r3, [sp, #0]
 801e734:	9b02      	ldr	r3, [sp, #8]
 801e736:	2b00      	cmp	r3, #0
 801e738:	f340 8098 	ble.w	801e86c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801e73c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e740:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e742:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e746:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e74a:	eef0 6a62 	vmov.f32	s13, s5
 801e74e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e752:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e756:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e75a:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 801e75e:	eef0 6a43 	vmov.f32	s13, s6
 801e762:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e766:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 801e76a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e76e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e772:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e776:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e77a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e77e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e782:	ee12 2a90 	vmov	r2, s5
 801e786:	eef0 2a47 	vmov.f32	s5, s14
 801e78a:	fb92 f3f3 	sdiv	r3, r2, r3
 801e78e:	ee13 2a10 	vmov	r2, s6
 801e792:	9313      	str	r3, [sp, #76]	; 0x4c
 801e794:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e796:	eeb0 3a67 	vmov.f32	s6, s15
 801e79a:	fb92 f3f3 	sdiv	r3, r2, r3
 801e79e:	9314      	str	r3, [sp, #80]	; 0x50
 801e7a0:	9b02      	ldr	r3, [sp, #8]
 801e7a2:	9a05      	ldr	r2, [sp, #20]
 801e7a4:	3b01      	subs	r3, #1
 801e7a6:	9302      	str	r3, [sp, #8]
 801e7a8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e7aa:	bf08      	it	eq
 801e7ac:	4613      	moveq	r3, r2
 801e7ae:	e72a      	b.n	801e606 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801e7b0:	140f      	asrs	r7, r1, #16
 801e7b2:	d454      	bmi.n	801e85e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801e7b4:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801e7b8:	42be      	cmp	r6, r7
 801e7ba:	dd50      	ble.n	801e85e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801e7bc:	ea5f 4822 	movs.w	r8, r2, asr #16
 801e7c0:	d44d      	bmi.n	801e85e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801e7c2:	f8dc 400c 	ldr.w	r4, [ip, #12]
 801e7c6:	4544      	cmp	r4, r8
 801e7c8:	dd49      	ble.n	801e85e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801e7ca:	9c04      	ldr	r4, [sp, #16]
 801e7cc:	b236      	sxth	r6, r6
 801e7ce:	f06f 0001 	mvn.w	r0, #1
 801e7d2:	fb08 4606 	mla	r6, r8, r6, r4
 801e7d6:	9c01      	ldr	r4, [sp, #4]
 801e7d8:	fb00 fa0e 	mul.w	sl, r0, lr
 801e7dc:	9800      	ldr	r0, [sp, #0]
 801e7de:	f816 8007 	ldrb.w	r8, [r6, r7]
 801e7e2:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801e7e6:	eb04 0b08 	add.w	fp, r4, r8
 801e7ea:	f830 400a 	ldrh.w	r4, [r0, sl]
 801e7ee:	9801      	ldr	r0, [sp, #4]
 801e7f0:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801e7f4:	1227      	asrs	r7, r4, #8
 801e7f6:	f89b b001 	ldrb.w	fp, [fp, #1]
 801e7fa:	fb16 f609 	smulbb	r6, r6, r9
 801e7fe:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801e802:	f810 8008 	ldrb.w	r8, [r0, r8]
 801e806:	fb1b fb09 	smulbb	fp, fp, r9
 801e80a:	fb07 6705 	mla	r7, r7, r5, r6
 801e80e:	10e6      	asrs	r6, r4, #3
 801e810:	00e4      	lsls	r4, r4, #3
 801e812:	9800      	ldr	r0, [sp, #0]
 801e814:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801e818:	b2bf      	uxth	r7, r7
 801e81a:	b2e4      	uxtb	r4, r4
 801e81c:	fb06 b605 	mla	r6, r6, r5, fp
 801e820:	fb14 f405 	smulbb	r4, r4, r5
 801e824:	b2b6      	uxth	r6, r6
 801e826:	fb08 4809 	mla	r8, r8, r9, r4
 801e82a:	1c7c      	adds	r4, r7, #1
 801e82c:	f106 0b01 	add.w	fp, r6, #1
 801e830:	fa1f f888 	uxth.w	r8, r8
 801e834:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801e838:	f108 0401 	add.w	r4, r8, #1
 801e83c:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801e840:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801e844:	eb04 2418 	add.w	r4, r4, r8, lsr #8
 801e848:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801e84c:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801e850:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801e854:	4327      	orrs	r7, r4
 801e856:	ea47 070b 	orr.w	r7, r7, fp
 801e85a:	f820 700a 	strh.w	r7, [r0, sl]
 801e85e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801e860:	f10e 3eff 	add.w	lr, lr, #4294967295
 801e864:	4401      	add	r1, r0
 801e866:	9814      	ldr	r0, [sp, #80]	; 0x50
 801e868:	4402      	add	r2, r0
 801e86a:	e759      	b.n	801e720 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801e86c:	b007      	add	sp, #28
 801e86e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801e874 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e878:	b085      	sub	sp, #20
 801e87a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e87e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801e880:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801e882:	9203      	str	r2, [sp, #12]
 801e884:	6870      	ldr	r0, [r6, #4]
 801e886:	686f      	ldr	r7, [r5, #4]
 801e888:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
 801e88c:	3704      	adds	r7, #4
 801e88e:	9101      	str	r1, [sp, #4]
 801e890:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801e894:	fb00 2404 	mla	r4, r0, r4, r2
 801e898:	6832      	ldr	r2, [r6, #0]
 801e89a:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801e89e:	682a      	ldr	r2, [r5, #0]
 801e8a0:	9202      	str	r2, [sp, #8]
 801e8a2:	9a01      	ldr	r2, [sp, #4]
 801e8a4:	2a00      	cmp	r2, #0
 801e8a6:	dc03      	bgt.n	801e8b0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801e8a8:	9a03      	ldr	r2, [sp, #12]
 801e8aa:	2a00      	cmp	r2, #0
 801e8ac:	f340 80cc 	ble.w	801ea48 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801e8b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e8b2:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801e8b6:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801e8ba:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801e8bc:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801e8c0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801e8c4:	2b00      	cmp	r3, #0
 801e8c6:	dd0d      	ble.n	801e8e4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801e8c8:	1406      	asrs	r6, r0, #16
 801e8ca:	d405      	bmi.n	801e8d8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801e8cc:	454e      	cmp	r6, r9
 801e8ce:	da03      	bge.n	801e8d8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801e8d0:	1416      	asrs	r6, r2, #16
 801e8d2:	d401      	bmi.n	801e8d8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801e8d4:	4546      	cmp	r6, r8
 801e8d6:	db06      	blt.n	801e8e6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e8d8:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801e8da:	4460      	add	r0, ip
 801e8dc:	3b01      	subs	r3, #1
 801e8de:	3402      	adds	r4, #2
 801e8e0:	4432      	add	r2, r6
 801e8e2:	e7ef      	b.n	801e8c4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801e8e4:	d00f      	beq.n	801e906 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801e8e6:	1e5e      	subs	r6, r3, #1
 801e8e8:	fb0c 0e06 	mla	lr, ip, r6, r0
 801e8ec:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 801e8f0:	d543      	bpl.n	801e97a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 801e8f2:	4698      	mov	r8, r3
 801e8f4:	eb04 0a43 	add.w	sl, r4, r3, lsl #1
 801e8f8:	f1b8 0f00 	cmp.w	r8, #0
 801e8fc:	dc71      	bgt.n	801e9e2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 801e8fe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e902:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801e906:	9b01      	ldr	r3, [sp, #4]
 801e908:	2b00      	cmp	r3, #0
 801e90a:	f340 809d 	ble.w	801ea48 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801e90e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e912:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e914:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e918:	eeb0 6a62 	vmov.f32	s12, s5
 801e91c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e920:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e924:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e928:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801e92c:	eeb0 6a43 	vmov.f32	s12, s6
 801e930:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e934:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801e938:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e93c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e940:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e944:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e948:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e94c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e950:	ee12 2a90 	vmov	r2, s5
 801e954:	eef0 2a47 	vmov.f32	s5, s14
 801e958:	fb92 fcf3 	sdiv	ip, r2, r3
 801e95c:	ee13 2a10 	vmov	r2, s6
 801e960:	eeb0 3a67 	vmov.f32	s6, s15
 801e964:	fb92 f3f3 	sdiv	r3, r2, r3
 801e968:	9312      	str	r3, [sp, #72]	; 0x48
 801e96a:	9b01      	ldr	r3, [sp, #4]
 801e96c:	9a03      	ldr	r2, [sp, #12]
 801e96e:	3b01      	subs	r3, #1
 801e970:	9301      	str	r3, [sp, #4]
 801e972:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e974:	bf08      	it	eq
 801e976:	4613      	moveq	r3, r2
 801e978:	e793      	b.n	801e8a2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801e97a:	45ce      	cmp	lr, r9
 801e97c:	dab9      	bge.n	801e8f2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801e97e:	9912      	ldr	r1, [sp, #72]	; 0x48
 801e980:	fb01 2606 	mla	r6, r1, r6, r2
 801e984:	1436      	asrs	r6, r6, #16
 801e986:	d4b4      	bmi.n	801e8f2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801e988:	4546      	cmp	r6, r8
 801e98a:	dab2      	bge.n	801e8f2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801e98c:	4698      	mov	r8, r3
 801e98e:	46a2      	mov	sl, r4
 801e990:	f1b8 0f00 	cmp.w	r8, #0
 801e994:	ddb3      	ble.n	801e8fe <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801e996:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801e99a:	1416      	asrs	r6, r2, #16
 801e99c:	9902      	ldr	r1, [sp, #8]
 801e99e:	ea4f 4e20 	mov.w	lr, r0, asr #16
 801e9a2:	f108 38ff 	add.w	r8, r8, #4294967295
 801e9a6:	4460      	add	r0, ip
 801e9a8:	fb09 1606 	mla	r6, r9, r6, r1
 801e9ac:	4928      	ldr	r1, [pc, #160]	; (801ea50 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>)
 801e9ae:	f816 e00e 	ldrb.w	lr, [r6, lr]
 801e9b2:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801e9b6:	eb07 0b0e 	add.w	fp, r7, lr
 801e9ba:	f89b 6001 	ldrb.w	r6, [fp, #1]
 801e9be:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801e9c2:	00f6      	lsls	r6, r6, #3
 801e9c4:	ea01 2909 	and.w	r9, r1, r9, lsl #8
 801e9c8:	9912      	ldr	r1, [sp, #72]	; 0x48
 801e9ca:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801e9ce:	440a      	add	r2, r1
 801e9d0:	ea49 0606 	orr.w	r6, r9, r6
 801e9d4:	f817 900e 	ldrb.w	r9, [r7, lr]
 801e9d8:	ea46 06d9 	orr.w	r6, r6, r9, lsr #3
 801e9dc:	f82a 6b02 	strh.w	r6, [sl], #2
 801e9e0:	e7d6      	b.n	801e990 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801e9e2:	ea5f 4920 	movs.w	r9, r0, asr #16
 801e9e6:	d429      	bmi.n	801ea3c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801e9e8:	68ae      	ldr	r6, [r5, #8]
 801e9ea:	454e      	cmp	r6, r9
 801e9ec:	dd26      	ble.n	801ea3c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801e9ee:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801e9f2:	d423      	bmi.n	801ea3c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801e9f4:	68e9      	ldr	r1, [r5, #12]
 801e9f6:	4559      	cmp	r1, fp
 801e9f8:	dd20      	ble.n	801ea3c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801e9fa:	fa0f fe86 	sxth.w	lr, r6
 801e9fe:	9902      	ldr	r1, [sp, #8]
 801ea00:	fb0b 1e0e 	mla	lr, fp, lr, r1
 801ea04:	f06f 0101 	mvn.w	r1, #1
 801ea08:	f81e e009 	ldrb.w	lr, [lr, r9]
 801ea0c:	fb01 f908 	mul.w	r9, r1, r8
 801ea10:	f2a1 71fe 	subw	r1, r1, #2046	; 0x7fe
 801ea14:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801ea18:	eb07 060e 	add.w	r6, r7, lr
 801ea1c:	f896 b002 	ldrb.w	fp, [r6, #2]
 801ea20:	7876      	ldrb	r6, [r6, #1]
 801ea22:	ea01 2b0b 	and.w	fp, r1, fp, lsl #8
 801ea26:	00f6      	lsls	r6, r6, #3
 801ea28:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801ea2c:	ea4b 0606 	orr.w	r6, fp, r6
 801ea30:	f817 b00e 	ldrb.w	fp, [r7, lr]
 801ea34:	ea46 06db 	orr.w	r6, r6, fp, lsr #3
 801ea38:	f82a 6009 	strh.w	r6, [sl, r9]
 801ea3c:	9912      	ldr	r1, [sp, #72]	; 0x48
 801ea3e:	4460      	add	r0, ip
 801ea40:	f108 38ff 	add.w	r8, r8, #4294967295
 801ea44:	440a      	add	r2, r1
 801ea46:	e757      	b.n	801e8f8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801ea48:	b005      	add	sp, #20
 801ea4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ea4e:	bf00      	nop
 801ea50:	fffff800 	.word	0xfffff800

0801ea54 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ea54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ea58:	b087      	sub	sp, #28
 801ea5a:	468b      	mov	fp, r1
 801ea5c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ea60:	9815      	ldr	r0, [sp, #84]	; 0x54
 801ea62:	9204      	str	r2, [sp, #16]
 801ea64:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801ea68:	6841      	ldr	r1, [r0, #4]
 801ea6a:	9205      	str	r2, [sp, #20]
 801ea6c:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801ea70:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801ea74:	fb01 2404 	mla	r4, r1, r4, r2
 801ea78:	6802      	ldr	r2, [r0, #0]
 801ea7a:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801ea7e:	f8dc 2000 	ldr.w	r2, [ip]
 801ea82:	9201      	str	r2, [sp, #4]
 801ea84:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801ea88:	3204      	adds	r2, #4
 801ea8a:	9202      	str	r2, [sp, #8]
 801ea8c:	f1bb 0f00 	cmp.w	fp, #0
 801ea90:	dc03      	bgt.n	801ea9a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801ea92:	9a04      	ldr	r2, [sp, #16]
 801ea94:	2a00      	cmp	r2, #0
 801ea96:	f340 8138 	ble.w	801ed0a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801ea9a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801ea9c:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801eaa0:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801eaa4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801eaa6:	f9bc 600c 	ldrsh.w	r6, [ip, #12]
 801eaaa:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801eaae:	2b00      	cmp	r3, #0
 801eab0:	dd0e      	ble.n	801ead0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801eab2:	1402      	asrs	r2, r0, #16
 801eab4:	d405      	bmi.n	801eac2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801eab6:	42ba      	cmp	r2, r7
 801eab8:	da03      	bge.n	801eac2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801eaba:	140a      	asrs	r2, r1, #16
 801eabc:	d401      	bmi.n	801eac2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801eabe:	42b2      	cmp	r2, r6
 801eac0:	db07      	blt.n	801ead2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801eac2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801eac4:	3b01      	subs	r3, #1
 801eac6:	3402      	adds	r4, #2
 801eac8:	4410      	add	r0, r2
 801eaca:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801eacc:	4411      	add	r1, r2
 801eace:	e7ee      	b.n	801eaae <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801ead0:	d019      	beq.n	801eb06 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801ead2:	1e5a      	subs	r2, r3, #1
 801ead4:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801ead6:	fb05 0502 	mla	r5, r5, r2, r0
 801eada:	142d      	asrs	r5, r5, #16
 801eadc:	d409      	bmi.n	801eaf2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801eade:	42bd      	cmp	r5, r7
 801eae0:	da07      	bge.n	801eaf2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801eae2:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801eae4:	fb05 1202 	mla	r2, r5, r2, r1
 801eae8:	1412      	asrs	r2, r2, #16
 801eaea:	d402      	bmi.n	801eaf2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801eaec:	42b2      	cmp	r2, r6
 801eaee:	f2c0 80ac 	blt.w	801ec4a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 801eaf2:	f04f 0e00 	mov.w	lr, #0
 801eaf6:	eb03 020e 	add.w	r2, r3, lr
 801eafa:	2a00      	cmp	r2, #0
 801eafc:	dc3e      	bgt.n	801eb7c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801eafe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801eb02:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801eb06:	f1bb 0f00 	cmp.w	fp, #0
 801eb0a:	f340 80fe 	ble.w	801ed0a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801eb0e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801eb12:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801eb14:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801eb18:	f1bb 0b01 	subs.w	fp, fp, #1
 801eb1c:	eeb0 6a62 	vmov.f32	s12, s5
 801eb20:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801eb24:	ee31 1a05 	vadd.f32	s2, s2, s10
 801eb28:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801eb2c:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801eb30:	eeb0 6a43 	vmov.f32	s12, s6
 801eb34:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801eb38:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801eb3c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801eb40:	ee61 7a27 	vmul.f32	s15, s2, s15
 801eb44:	ee77 2a62 	vsub.f32	s5, s14, s5
 801eb48:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801eb4c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801eb50:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801eb54:	ee12 2a90 	vmov	r2, s5
 801eb58:	eef0 2a47 	vmov.f32	s5, s14
 801eb5c:	fb92 f3f3 	sdiv	r3, r2, r3
 801eb60:	ee13 2a10 	vmov	r2, s6
 801eb64:	9313      	str	r3, [sp, #76]	; 0x4c
 801eb66:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801eb68:	eeb0 3a67 	vmov.f32	s6, s15
 801eb6c:	fb92 f3f3 	sdiv	r3, r2, r3
 801eb70:	9a04      	ldr	r2, [sp, #16]
 801eb72:	9314      	str	r3, [sp, #80]	; 0x50
 801eb74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801eb76:	bf08      	it	eq
 801eb78:	4613      	moveq	r3, r2
 801eb7a:	e787      	b.n	801ea8c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801eb7c:	1406      	asrs	r6, r0, #16
 801eb7e:	d45d      	bmi.n	801ec3c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801eb80:	f8dc 5008 	ldr.w	r5, [ip, #8]
 801eb84:	42b5      	cmp	r5, r6
 801eb86:	dd59      	ble.n	801ec3c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801eb88:	140f      	asrs	r7, r1, #16
 801eb8a:	d457      	bmi.n	801ec3c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801eb8c:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801eb90:	42ba      	cmp	r2, r7
 801eb92:	dd53      	ble.n	801ec3c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801eb94:	9a01      	ldr	r2, [sp, #4]
 801eb96:	b22d      	sxth	r5, r5
 801eb98:	fb07 2505 	mla	r5, r7, r5, r2
 801eb9c:	5daa      	ldrb	r2, [r5, r6]
 801eb9e:	9d02      	ldr	r5, [sp, #8]
 801eba0:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801eba4:	0e2e      	lsrs	r6, r5, #24
 801eba6:	d049      	beq.n	801ec3c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801eba8:	f06f 0201 	mvn.w	r2, #1
 801ebac:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801ebb0:	fb02 f20e 	mul.w	r2, r2, lr
 801ebb4:	f834 8002 	ldrh.w	r8, [r4, r2]
 801ebb8:	9203      	str	r2, [sp, #12]
 801ebba:	9a05      	ldr	r2, [sp, #20]
 801ebbc:	ea4f 2728 	mov.w	r7, r8, asr #8
 801ebc0:	4356      	muls	r6, r2
 801ebc2:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801ebc6:	1c72      	adds	r2, r6, #1
 801ebc8:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801ebcc:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801ebd0:	b2ed      	uxtb	r5, r5
 801ebd2:	1212      	asrs	r2, r2, #8
 801ebd4:	fa1f f982 	uxth.w	r9, r2
 801ebd8:	43d2      	mvns	r2, r2
 801ebda:	fb16 f609 	smulbb	r6, r6, r9
 801ebde:	b2d2      	uxtb	r2, r2
 801ebe0:	fb15 f509 	smulbb	r5, r5, r9
 801ebe4:	fb07 6702 	mla	r7, r7, r2, r6
 801ebe8:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801ebec:	fb1a fa09 	smulbb	sl, sl, r9
 801ebf0:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801ebf4:	b2bf      	uxth	r7, r7
 801ebf6:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801ebfa:	fa5f f888 	uxtb.w	r8, r8
 801ebfe:	fb06 a602 	mla	r6, r6, r2, sl
 801ec02:	fb08 5502 	mla	r5, r8, r2, r5
 801ec06:	1c7a      	adds	r2, r7, #1
 801ec08:	b2b6      	uxth	r6, r6
 801ec0a:	b2ad      	uxth	r5, r5
 801ec0c:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801ec10:	9a03      	ldr	r2, [sp, #12]
 801ec12:	f105 0a01 	add.w	sl, r5, #1
 801ec16:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801ec1a:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801ec1e:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801ec22:	ea4a 0707 	orr.w	r7, sl, r7
 801ec26:	f106 0a01 	add.w	sl, r6, #1
 801ec2a:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801ec2e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801ec32:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801ec36:	ea47 070a 	orr.w	r7, r7, sl
 801ec3a:	52a7      	strh	r7, [r4, r2]
 801ec3c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801ec3e:	f10e 3eff 	add.w	lr, lr, #4294967295
 801ec42:	4410      	add	r0, r2
 801ec44:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ec46:	4411      	add	r1, r2
 801ec48:	e755      	b.n	801eaf6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801ec4a:	f04f 0800 	mov.w	r8, #0
 801ec4e:	eba3 0208 	sub.w	r2, r3, r8
 801ec52:	2a00      	cmp	r2, #0
 801ec54:	f77f af53 	ble.w	801eafe <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801ec58:	f9bc 6008 	ldrsh.w	r6, [ip, #8]
 801ec5c:	140a      	asrs	r2, r1, #16
 801ec5e:	9f01      	ldr	r7, [sp, #4]
 801ec60:	1405      	asrs	r5, r0, #16
 801ec62:	fb06 7202 	mla	r2, r6, r2, r7
 801ec66:	5d52      	ldrb	r2, [r2, r5]
 801ec68:	9d02      	ldr	r5, [sp, #8]
 801ec6a:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801ec6e:	0e2e      	lsrs	r6, r5, #24
 801ec70:	d044      	beq.n	801ecfc <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801ec72:	9a05      	ldr	r2, [sp, #20]
 801ec74:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801ec78:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 801ec7c:	4356      	muls	r6, r2
 801ec7e:	ea4f 272e 	mov.w	r7, lr, asr #8
 801ec82:	1c72      	adds	r2, r6, #1
 801ec84:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801ec88:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801ec8c:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801ec90:	b2ed      	uxtb	r5, r5
 801ec92:	1212      	asrs	r2, r2, #8
 801ec94:	fa1f f982 	uxth.w	r9, r2
 801ec98:	43d2      	mvns	r2, r2
 801ec9a:	fb16 f609 	smulbb	r6, r6, r9
 801ec9e:	b2d2      	uxtb	r2, r2
 801eca0:	fb15 f509 	smulbb	r5, r5, r9
 801eca4:	fb07 6702 	mla	r7, r7, r2, r6
 801eca8:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801ecac:	fb1a fa09 	smulbb	sl, sl, r9
 801ecb0:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801ecb4:	b2bf      	uxth	r7, r7
 801ecb6:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801ecba:	fa5f fe8e 	uxtb.w	lr, lr
 801ecbe:	fb06 a602 	mla	r6, r6, r2, sl
 801ecc2:	fb0e 5502 	mla	r5, lr, r2, r5
 801ecc6:	1c7a      	adds	r2, r7, #1
 801ecc8:	b2b6      	uxth	r6, r6
 801ecca:	b2ad      	uxth	r5, r5
 801eccc:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801ecd0:	f105 0a01 	add.w	sl, r5, #1
 801ecd4:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801ecd8:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801ecdc:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801ece0:	ea4a 0707 	orr.w	r7, sl, r7
 801ece4:	f106 0a01 	add.w	sl, r6, #1
 801ece8:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801ecec:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801ecf0:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801ecf4:	ea47 070a 	orr.w	r7, r7, sl
 801ecf8:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801ecfc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801ecfe:	f108 0801 	add.w	r8, r8, #1
 801ed02:	4410      	add	r0, r2
 801ed04:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ed06:	4411      	add	r1, r2
 801ed08:	e7a1      	b.n	801ec4e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801ed0a:	b007      	add	sp, #28
 801ed0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ed10 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ed10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ed14:	b085      	sub	sp, #20
 801ed16:	468b      	mov	fp, r1
 801ed18:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ed1c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801ed1e:	9203      	str	r2, [sp, #12]
 801ed20:	6841      	ldr	r1, [r0, #4]
 801ed22:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 801ed26:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801ed2a:	fb01 2404 	mla	r4, r1, r4, r2
 801ed2e:	6802      	ldr	r2, [r0, #0]
 801ed30:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801ed34:	f8de 2000 	ldr.w	r2, [lr]
 801ed38:	9200      	str	r2, [sp, #0]
 801ed3a:	f8de 2004 	ldr.w	r2, [lr, #4]
 801ed3e:	3204      	adds	r2, #4
 801ed40:	9201      	str	r2, [sp, #4]
 801ed42:	f1bb 0f00 	cmp.w	fp, #0
 801ed46:	dc03      	bgt.n	801ed50 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801ed48:	9a03      	ldr	r2, [sp, #12]
 801ed4a:	2a00      	cmp	r2, #0
 801ed4c:	f340 8153 	ble.w	801eff6 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801ed50:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ed52:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801ed56:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801ed5a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ed5c:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801ed60:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801ed64:	2b00      	cmp	r3, #0
 801ed66:	dd0e      	ble.n	801ed86 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801ed68:	1408      	asrs	r0, r1, #16
 801ed6a:	d405      	bmi.n	801ed78 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801ed6c:	42b8      	cmp	r0, r7
 801ed6e:	da03      	bge.n	801ed78 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801ed70:	1410      	asrs	r0, r2, #16
 801ed72:	d401      	bmi.n	801ed78 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801ed74:	42b0      	cmp	r0, r6
 801ed76:	db07      	blt.n	801ed88 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801ed78:	9811      	ldr	r0, [sp, #68]	; 0x44
 801ed7a:	3b01      	subs	r3, #1
 801ed7c:	3402      	adds	r4, #2
 801ed7e:	4401      	add	r1, r0
 801ed80:	9812      	ldr	r0, [sp, #72]	; 0x48
 801ed82:	4402      	add	r2, r0
 801ed84:	e7ee      	b.n	801ed64 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801ed86:	d017      	beq.n	801edb8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801ed88:	1e58      	subs	r0, r3, #1
 801ed8a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801ed8c:	fb05 1500 	mla	r5, r5, r0, r1
 801ed90:	142d      	asrs	r5, r5, #16
 801ed92:	d409      	bmi.n	801eda8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801ed94:	42bd      	cmp	r5, r7
 801ed96:	da07      	bge.n	801eda8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801ed98:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801ed9a:	fb05 2000 	mla	r0, r5, r0, r2
 801ed9e:	1400      	asrs	r0, r0, #16
 801eda0:	d402      	bmi.n	801eda8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801eda2:	42b0      	cmp	r0, r6
 801eda4:	f2c0 80bc 	blt.w	801ef20 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801eda8:	2600      	movs	r6, #0
 801edaa:	1998      	adds	r0, r3, r6
 801edac:	2800      	cmp	r0, #0
 801edae:	dc3e      	bgt.n	801ee2e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801edb0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801edb4:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801edb8:	f1bb 0f00 	cmp.w	fp, #0
 801edbc:	f340 811b 	ble.w	801eff6 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801edc0:	ee30 0a04 	vadd.f32	s0, s0, s8
 801edc4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801edc6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801edca:	f1bb 0b01 	subs.w	fp, fp, #1
 801edce:	eeb0 6a62 	vmov.f32	s12, s5
 801edd2:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801edd6:	ee31 1a05 	vadd.f32	s2, s2, s10
 801edda:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801edde:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801ede2:	eeb0 6a43 	vmov.f32	s12, s6
 801ede6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801edea:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801edee:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801edf2:	ee61 7a27 	vmul.f32	s15, s2, s15
 801edf6:	ee77 2a62 	vsub.f32	s5, s14, s5
 801edfa:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801edfe:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ee02:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ee06:	ee12 2a90 	vmov	r2, s5
 801ee0a:	eef0 2a47 	vmov.f32	s5, s14
 801ee0e:	fb92 f3f3 	sdiv	r3, r2, r3
 801ee12:	ee13 2a10 	vmov	r2, s6
 801ee16:	9311      	str	r3, [sp, #68]	; 0x44
 801ee18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ee1a:	eeb0 3a67 	vmov.f32	s6, s15
 801ee1e:	fb92 f3f3 	sdiv	r3, r2, r3
 801ee22:	9a03      	ldr	r2, [sp, #12]
 801ee24:	9312      	str	r3, [sp, #72]	; 0x48
 801ee26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ee28:	bf08      	it	eq
 801ee2a:	4613      	moveq	r3, r2
 801ee2c:	e789      	b.n	801ed42 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801ee2e:	140f      	asrs	r7, r1, #16
 801ee30:	d426      	bmi.n	801ee80 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801ee32:	f8de 5008 	ldr.w	r5, [lr, #8]
 801ee36:	42bd      	cmp	r5, r7
 801ee38:	dd22      	ble.n	801ee80 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801ee3a:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801ee3e:	d41f      	bmi.n	801ee80 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801ee40:	f8de 000c 	ldr.w	r0, [lr, #12]
 801ee44:	4560      	cmp	r0, ip
 801ee46:	dd1b      	ble.n	801ee80 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801ee48:	9800      	ldr	r0, [sp, #0]
 801ee4a:	b22d      	sxth	r5, r5
 801ee4c:	fb0c 0505 	mla	r5, ip, r5, r0
 801ee50:	5de8      	ldrb	r0, [r5, r7]
 801ee52:	9d01      	ldr	r5, [sp, #4]
 801ee54:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 801ee58:	0e07      	lsrs	r7, r0, #24
 801ee5a:	2fff      	cmp	r7, #255	; 0xff
 801ee5c:	d116      	bne.n	801ee8c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801ee5e:	f06f 0501 	mvn.w	r5, #1
 801ee62:	fb05 f706 	mul.w	r7, r5, r6
 801ee66:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 801ee6a:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801ee6e:	0945      	lsrs	r5, r0, #5
 801ee70:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801ee74:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801ee78:	ea4c 0505 	orr.w	r5, ip, r5
 801ee7c:	4305      	orrs	r5, r0
 801ee7e:	53e5      	strh	r5, [r4, r7]
 801ee80:	9811      	ldr	r0, [sp, #68]	; 0x44
 801ee82:	3e01      	subs	r6, #1
 801ee84:	4401      	add	r1, r0
 801ee86:	9812      	ldr	r0, [sp, #72]	; 0x48
 801ee88:	4402      	add	r2, r0
 801ee8a:	e78e      	b.n	801edaa <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801ee8c:	b2fd      	uxtb	r5, r7
 801ee8e:	2f00      	cmp	r7, #0
 801ee90:	d0f6      	beq.n	801ee80 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801ee92:	f06f 0701 	mvn.w	r7, #1
 801ee96:	fa1f f985 	uxth.w	r9, r5
 801ee9a:	43ed      	mvns	r5, r5
 801ee9c:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801eea0:	4377      	muls	r7, r6
 801eea2:	fb1a fa09 	smulbb	sl, sl, r9
 801eea6:	b2ed      	uxtb	r5, r5
 801eea8:	f834 8007 	ldrh.w	r8, [r4, r7]
 801eeac:	9702      	str	r7, [sp, #8]
 801eeae:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801eeb2:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801eeb6:	fb17 f709 	smulbb	r7, r7, r9
 801eeba:	b2c0      	uxtb	r0, r0
 801eebc:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801eec0:	fb10 f009 	smulbb	r0, r0, r9
 801eec4:	fb0c 7c05 	mla	ip, ip, r5, r7
 801eec8:	ea4f 07e8 	mov.w	r7, r8, asr #3
 801eecc:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801eed0:	fa1f fc8c 	uxth.w	ip, ip
 801eed4:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801eed8:	fa5f f888 	uxtb.w	r8, r8
 801eedc:	fb07 a705 	mla	r7, r7, r5, sl
 801eee0:	fb08 0005 	mla	r0, r8, r5, r0
 801eee4:	f10c 0501 	add.w	r5, ip, #1
 801eee8:	b2bf      	uxth	r7, r7
 801eeea:	b280      	uxth	r0, r0
 801eeec:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801eef0:	f100 0a01 	add.w	sl, r0, #1
 801eef4:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801eef8:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801eefc:	9802      	ldr	r0, [sp, #8]
 801eefe:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801ef02:	ea4a 0c0c 	orr.w	ip, sl, ip
 801ef06:	f107 0a01 	add.w	sl, r7, #1
 801ef0a:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801ef0e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801ef12:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801ef16:	ea4c 0c0a 	orr.w	ip, ip, sl
 801ef1a:	f824 c000 	strh.w	ip, [r4, r0]
 801ef1e:	e7af      	b.n	801ee80 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801ef20:	f04f 0800 	mov.w	r8, #0
 801ef24:	eba3 0008 	sub.w	r0, r3, r8
 801ef28:	2800      	cmp	r0, #0
 801ef2a:	f77f af41 	ble.w	801edb0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801ef2e:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801ef32:	1410      	asrs	r0, r2, #16
 801ef34:	9f00      	ldr	r7, [sp, #0]
 801ef36:	140d      	asrs	r5, r1, #16
 801ef38:	fb06 7000 	mla	r0, r6, r0, r7
 801ef3c:	5d40      	ldrb	r0, [r0, r5]
 801ef3e:	9d01      	ldr	r5, [sp, #4]
 801ef40:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 801ef44:	0e2e      	lsrs	r6, r5, #24
 801ef46:	2eff      	cmp	r6, #255	; 0xff
 801ef48:	d112      	bne.n	801ef70 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x260>
 801ef4a:	482c      	ldr	r0, [pc, #176]	; (801effc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 801ef4c:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 801ef50:	0968      	lsrs	r0, r5, #5
 801ef52:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801ef56:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801ef5a:	4330      	orrs	r0, r6
 801ef5c:	4328      	orrs	r0, r5
 801ef5e:	f824 0018 	strh.w	r0, [r4, r8, lsl #1]
 801ef62:	9811      	ldr	r0, [sp, #68]	; 0x44
 801ef64:	f108 0801 	add.w	r8, r8, #1
 801ef68:	4401      	add	r1, r0
 801ef6a:	9812      	ldr	r0, [sp, #72]	; 0x48
 801ef6c:	4402      	add	r2, r0
 801ef6e:	e7d9      	b.n	801ef24 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801ef70:	b2f0      	uxtb	r0, r6
 801ef72:	2e00      	cmp	r6, #0
 801ef74:	d0f5      	beq.n	801ef62 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801ef76:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
 801ef7a:	fa1f f980 	uxth.w	r9, r0
 801ef7e:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801ef82:	43c0      	mvns	r0, r0
 801ef84:	ea4f 272c 	mov.w	r7, ip, asr #8
 801ef88:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801ef8c:	fb16 f609 	smulbb	r6, r6, r9
 801ef90:	b2c0      	uxtb	r0, r0
 801ef92:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801ef96:	b2ed      	uxtb	r5, r5
 801ef98:	fb1a fa09 	smulbb	sl, sl, r9
 801ef9c:	fb07 6700 	mla	r7, r7, r0, r6
 801efa0:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801efa4:	fb15 f509 	smulbb	r5, r5, r9
 801efa8:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801efac:	b2bf      	uxth	r7, r7
 801efae:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801efb2:	fa5f fc8c 	uxtb.w	ip, ip
 801efb6:	fb06 a600 	mla	r6, r6, r0, sl
 801efba:	fb0c 5500 	mla	r5, ip, r0, r5
 801efbe:	1c78      	adds	r0, r7, #1
 801efc0:	b2b6      	uxth	r6, r6
 801efc2:	b2ad      	uxth	r5, r5
 801efc4:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 801efc8:	f105 0a01 	add.w	sl, r5, #1
 801efcc:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801efd0:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801efd4:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801efd8:	ea4a 0707 	orr.w	r7, sl, r7
 801efdc:	f106 0a01 	add.w	sl, r6, #1
 801efe0:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801efe4:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801efe8:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801efec:	ea47 070a 	orr.w	r7, r7, sl
 801eff0:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801eff4:	e7b5      	b.n	801ef62 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801eff6:	b005      	add	sp, #20
 801eff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801effc:	fffff800 	.word	0xfffff800

0801f000 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f004:	b087      	sub	sp, #28
 801f006:	468b      	mov	fp, r1
 801f008:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f00c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801f00e:	9204      	str	r2, [sp, #16]
 801f010:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801f014:	6861      	ldr	r1, [r4, #4]
 801f016:	9205      	str	r2, [sp, #20]
 801f018:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 801f01c:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 801f020:	fb01 2000 	mla	r0, r1, r0, r2
 801f024:	6822      	ldr	r2, [r4, #0]
 801f026:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801f02a:	f8de 2000 	ldr.w	r2, [lr]
 801f02e:	9201      	str	r2, [sp, #4]
 801f030:	f8de 2004 	ldr.w	r2, [lr, #4]
 801f034:	9202      	str	r2, [sp, #8]
 801f036:	f1bb 0f00 	cmp.w	fp, #0
 801f03a:	dc03      	bgt.n	801f044 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801f03c:	9a04      	ldr	r2, [sp, #16]
 801f03e:	2a00      	cmp	r2, #0
 801f040:	f340 8142 	ble.w	801f2c8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801f044:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801f046:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801f04a:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801f04e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f050:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801f054:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801f058:	2b00      	cmp	r3, #0
 801f05a:	dd0e      	ble.n	801f07a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801f05c:	140c      	asrs	r4, r1, #16
 801f05e:	d405      	bmi.n	801f06c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801f060:	42bc      	cmp	r4, r7
 801f062:	da03      	bge.n	801f06c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801f064:	1414      	asrs	r4, r2, #16
 801f066:	d401      	bmi.n	801f06c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801f068:	42b4      	cmp	r4, r6
 801f06a:	db07      	blt.n	801f07c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801f06c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f06e:	3b01      	subs	r3, #1
 801f070:	3002      	adds	r0, #2
 801f072:	4421      	add	r1, r4
 801f074:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801f076:	4422      	add	r2, r4
 801f078:	e7ee      	b.n	801f058 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801f07a:	d019      	beq.n	801f0b0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801f07c:	1e5c      	subs	r4, r3, #1
 801f07e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801f080:	fb05 1504 	mla	r5, r5, r4, r1
 801f084:	142d      	asrs	r5, r5, #16
 801f086:	d409      	bmi.n	801f09c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801f088:	42bd      	cmp	r5, r7
 801f08a:	da07      	bge.n	801f09c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801f08c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801f08e:	fb05 2404 	mla	r4, r5, r4, r2
 801f092:	1424      	asrs	r4, r4, #16
 801f094:	d402      	bmi.n	801f09c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801f096:	42b4      	cmp	r4, r6
 801f098:	f2c0 80b1 	blt.w	801f1fe <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 801f09c:	f04f 0800 	mov.w	r8, #0
 801f0a0:	eb03 0408 	add.w	r4, r3, r8
 801f0a4:	2c00      	cmp	r4, #0
 801f0a6:	dc3e      	bgt.n	801f126 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801f0a8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f0ac:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801f0b0:	f1bb 0f00 	cmp.w	fp, #0
 801f0b4:	f340 8108 	ble.w	801f2c8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801f0b8:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f0bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f0be:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f0c2:	f1bb 0b01 	subs.w	fp, fp, #1
 801f0c6:	eeb0 6a62 	vmov.f32	s12, s5
 801f0ca:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f0ce:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f0d2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f0d6:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801f0da:	eeb0 6a43 	vmov.f32	s12, s6
 801f0de:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f0e2:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801f0e6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f0ea:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f0ee:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f0f2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f0f6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f0fa:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f0fe:	ee12 2a90 	vmov	r2, s5
 801f102:	eef0 2a47 	vmov.f32	s5, s14
 801f106:	fb92 f3f3 	sdiv	r3, r2, r3
 801f10a:	ee13 2a10 	vmov	r2, s6
 801f10e:	9313      	str	r3, [sp, #76]	; 0x4c
 801f110:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f112:	eeb0 3a67 	vmov.f32	s6, s15
 801f116:	fb92 f3f3 	sdiv	r3, r2, r3
 801f11a:	9a04      	ldr	r2, [sp, #16]
 801f11c:	9314      	str	r3, [sp, #80]	; 0x50
 801f11e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f120:	bf08      	it	eq
 801f122:	4613      	moveq	r3, r2
 801f124:	e787      	b.n	801f036 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801f126:	140e      	asrs	r6, r1, #16
 801f128:	d462      	bmi.n	801f1f0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801f12a:	f8de 5008 	ldr.w	r5, [lr, #8]
 801f12e:	42b5      	cmp	r5, r6
 801f130:	dd5e      	ble.n	801f1f0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801f132:	1417      	asrs	r7, r2, #16
 801f134:	d45c      	bmi.n	801f1f0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801f136:	f8de 400c 	ldr.w	r4, [lr, #12]
 801f13a:	42bc      	cmp	r4, r7
 801f13c:	dd58      	ble.n	801f1f0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801f13e:	b22d      	sxth	r5, r5
 801f140:	9c02      	ldr	r4, [sp, #8]
 801f142:	fb07 6505 	mla	r5, r7, r5, r6
 801f146:	5d66      	ldrb	r6, [r4, r5]
 801f148:	2e00      	cmp	r6, #0
 801f14a:	d051      	beq.n	801f1f0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801f14c:	9c01      	ldr	r4, [sp, #4]
 801f14e:	f834 9015 	ldrh.w	r9, [r4, r5, lsl #1]
 801f152:	f06f 0401 	mvn.w	r4, #1
 801f156:	fb04 f408 	mul.w	r4, r4, r8
 801f15a:	ea4f 2c29 	mov.w	ip, r9, asr #8
 801f15e:	5b05      	ldrh	r5, [r0, r4]
 801f160:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801f164:	9403      	str	r4, [sp, #12]
 801f166:	9c05      	ldr	r4, [sp, #20]
 801f168:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801f16c:	4366      	muls	r6, r4
 801f16e:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801f172:	1c74      	adds	r4, r6, #1
 801f174:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801f178:	122e      	asrs	r6, r5, #8
 801f17a:	1224      	asrs	r4, r4, #8
 801f17c:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801f180:	00ed      	lsls	r5, r5, #3
 801f182:	b2a7      	uxth	r7, r4
 801f184:	43e4      	mvns	r4, r4
 801f186:	b2ed      	uxtb	r5, r5
 801f188:	b2e4      	uxtb	r4, r4
 801f18a:	fb16 f604 	smulbb	r6, r6, r4
 801f18e:	fb15 f504 	smulbb	r5, r5, r4
 801f192:	fb0c 6c07 	mla	ip, ip, r7, r6
 801f196:	ea4f 06e9 	mov.w	r6, r9, asr #3
 801f19a:	fb1a fa04 	smulbb	sl, sl, r4
 801f19e:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801f1a2:	fa1f fc8c 	uxth.w	ip, ip
 801f1a6:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801f1aa:	fa5f f989 	uxtb.w	r9, r9
 801f1ae:	fb06 a607 	mla	r6, r6, r7, sl
 801f1b2:	f10c 0401 	add.w	r4, ip, #1
 801f1b6:	fb09 5507 	mla	r5, r9, r7, r5
 801f1ba:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801f1be:	9c03      	ldr	r4, [sp, #12]
 801f1c0:	b2ad      	uxth	r5, r5
 801f1c2:	b2b6      	uxth	r6, r6
 801f1c4:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801f1c8:	f105 0a01 	add.w	sl, r5, #1
 801f1cc:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801f1d0:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801f1d4:	ea4a 0c0c 	orr.w	ip, sl, ip
 801f1d8:	f106 0a01 	add.w	sl, r6, #1
 801f1dc:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801f1e0:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801f1e4:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801f1e8:	ea4c 0c0a 	orr.w	ip, ip, sl
 801f1ec:	f820 c004 	strh.w	ip, [r0, r4]
 801f1f0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f1f2:	f108 38ff 	add.w	r8, r8, #4294967295
 801f1f6:	4421      	add	r1, r4
 801f1f8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801f1fa:	4422      	add	r2, r4
 801f1fc:	e750      	b.n	801f0a0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801f1fe:	f04f 0900 	mov.w	r9, #0
 801f202:	eba3 0409 	sub.w	r4, r3, r9
 801f206:	2c00      	cmp	r4, #0
 801f208:	f77f af4e 	ble.w	801f0a8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801f20c:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801f210:	140d      	asrs	r5, r1, #16
 801f212:	1414      	asrs	r4, r2, #16
 801f214:	fb06 5404 	mla	r4, r6, r4, r5
 801f218:	9d02      	ldr	r5, [sp, #8]
 801f21a:	5d2e      	ldrb	r6, [r5, r4]
 801f21c:	2e00      	cmp	r6, #0
 801f21e:	d04c      	beq.n	801f2ba <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801f220:	9d01      	ldr	r5, [sp, #4]
 801f222:	f835 8014 	ldrh.w	r8, [r5, r4, lsl #1]
 801f226:	9c05      	ldr	r4, [sp, #20]
 801f228:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801f22c:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801f230:	4366      	muls	r6, r4
 801f232:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801f236:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801f23a:	1c74      	adds	r4, r6, #1
 801f23c:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801f240:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801f244:	122e      	asrs	r6, r5, #8
 801f246:	1224      	asrs	r4, r4, #8
 801f248:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801f24c:	00ed      	lsls	r5, r5, #3
 801f24e:	b2a7      	uxth	r7, r4
 801f250:	43e4      	mvns	r4, r4
 801f252:	b2ed      	uxtb	r5, r5
 801f254:	b2e4      	uxtb	r4, r4
 801f256:	fb16 f604 	smulbb	r6, r6, r4
 801f25a:	fb15 f504 	smulbb	r5, r5, r4
 801f25e:	fb0c 6c07 	mla	ip, ip, r7, r6
 801f262:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801f266:	fb1a fa04 	smulbb	sl, sl, r4
 801f26a:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801f26e:	fa1f fc8c 	uxth.w	ip, ip
 801f272:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801f276:	fa5f f888 	uxtb.w	r8, r8
 801f27a:	fb06 a607 	mla	r6, r6, r7, sl
 801f27e:	f10c 0401 	add.w	r4, ip, #1
 801f282:	fb08 5507 	mla	r5, r8, r7, r5
 801f286:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801f28a:	b2ad      	uxth	r5, r5
 801f28c:	b2b6      	uxth	r6, r6
 801f28e:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801f292:	f105 0a01 	add.w	sl, r5, #1
 801f296:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801f29a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801f29e:	ea4a 0c0c 	orr.w	ip, sl, ip
 801f2a2:	f106 0a01 	add.w	sl, r6, #1
 801f2a6:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801f2aa:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801f2ae:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801f2b2:	ea4c 0c0a 	orr.w	ip, ip, sl
 801f2b6:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801f2ba:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f2bc:	f109 0901 	add.w	r9, r9, #1
 801f2c0:	4421      	add	r1, r4
 801f2c2:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801f2c4:	4422      	add	r2, r4
 801f2c6:	e79c      	b.n	801f202 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801f2c8:	b007      	add	sp, #28
 801f2ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f2ce <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f2ce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f2d2:	b085      	sub	sp, #20
 801f2d4:	468b      	mov	fp, r1
 801f2d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f2da:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f2dc:	9203      	str	r2, [sp, #12]
 801f2de:	6861      	ldr	r1, [r4, #4]
 801f2e0:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801f2e4:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	; 0x50
 801f2e8:	fb01 2000 	mla	r0, r1, r0, r2
 801f2ec:	6822      	ldr	r2, [r4, #0]
 801f2ee:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801f2f2:	f8d8 2000 	ldr.w	r2, [r8]
 801f2f6:	9200      	str	r2, [sp, #0]
 801f2f8:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801f2fc:	9201      	str	r2, [sp, #4]
 801f2fe:	f1bb 0f00 	cmp.w	fp, #0
 801f302:	dc03      	bgt.n	801f30c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801f304:	9a03      	ldr	r2, [sp, #12]
 801f306:	2a00      	cmp	r2, #0
 801f308:	f340 8146 	ble.w	801f598 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801f30c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f30e:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801f312:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801f316:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f318:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801f31c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801f320:	2b00      	cmp	r3, #0
 801f322:	dd0e      	ble.n	801f342 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801f324:	140c      	asrs	r4, r1, #16
 801f326:	d405      	bmi.n	801f334 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801f328:	42bc      	cmp	r4, r7
 801f32a:	da03      	bge.n	801f334 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801f32c:	1414      	asrs	r4, r2, #16
 801f32e:	d401      	bmi.n	801f334 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801f330:	42b4      	cmp	r4, r6
 801f332:	db07      	blt.n	801f344 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f334:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801f336:	3b01      	subs	r3, #1
 801f338:	3002      	adds	r0, #2
 801f33a:	4421      	add	r1, r4
 801f33c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801f33e:	4422      	add	r2, r4
 801f340:	e7ee      	b.n	801f320 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801f342:	d017      	beq.n	801f374 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801f344:	1e5c      	subs	r4, r3, #1
 801f346:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801f348:	fb05 1504 	mla	r5, r5, r4, r1
 801f34c:	142d      	asrs	r5, r5, #16
 801f34e:	d409      	bmi.n	801f364 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801f350:	42bd      	cmp	r5, r7
 801f352:	da07      	bge.n	801f364 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801f354:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801f356:	fb05 2404 	mla	r4, r5, r4, r2
 801f35a:	1424      	asrs	r4, r4, #16
 801f35c:	d402      	bmi.n	801f364 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801f35e:	42b4      	cmp	r4, r6
 801f360:	f2c0 80b3 	blt.w	801f4ca <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 801f364:	2600      	movs	r6, #0
 801f366:	199c      	adds	r4, r3, r6
 801f368:	2c00      	cmp	r4, #0
 801f36a:	dc3e      	bgt.n	801f3ea <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801f36c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f370:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801f374:	f1bb 0f00 	cmp.w	fp, #0
 801f378:	f340 810e 	ble.w	801f598 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801f37c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f380:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f382:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f386:	f1bb 0b01 	subs.w	fp, fp, #1
 801f38a:	eeb0 6a62 	vmov.f32	s12, s5
 801f38e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f392:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f396:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f39a:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801f39e:	eeb0 6a43 	vmov.f32	s12, s6
 801f3a2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f3a6:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801f3aa:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f3ae:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f3b2:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f3b6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f3ba:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f3be:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f3c2:	ee12 2a90 	vmov	r2, s5
 801f3c6:	eef0 2a47 	vmov.f32	s5, s14
 801f3ca:	fb92 f3f3 	sdiv	r3, r2, r3
 801f3ce:	ee13 2a10 	vmov	r2, s6
 801f3d2:	9311      	str	r3, [sp, #68]	; 0x44
 801f3d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f3d6:	eeb0 3a67 	vmov.f32	s6, s15
 801f3da:	fb92 f3f3 	sdiv	r3, r2, r3
 801f3de:	9a03      	ldr	r2, [sp, #12]
 801f3e0:	9312      	str	r3, [sp, #72]	; 0x48
 801f3e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f3e4:	bf08      	it	eq
 801f3e6:	4613      	moveq	r3, r2
 801f3e8:	e789      	b.n	801f2fe <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801f3ea:	140f      	asrs	r7, r1, #16
 801f3ec:	d418      	bmi.n	801f420 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801f3ee:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801f3f2:	42bd      	cmp	r5, r7
 801f3f4:	dd14      	ble.n	801f420 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801f3f6:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801f3fa:	d411      	bmi.n	801f420 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801f3fc:	f8d8 400c 	ldr.w	r4, [r8, #12]
 801f400:	4564      	cmp	r4, ip
 801f402:	dd0d      	ble.n	801f420 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801f404:	b22d      	sxth	r5, r5
 801f406:	9c01      	ldr	r4, [sp, #4]
 801f408:	fb0c 7505 	mla	r5, ip, r5, r7
 801f40c:	5d64      	ldrb	r4, [r4, r5]
 801f40e:	2cff      	cmp	r4, #255	; 0xff
 801f410:	d10c      	bne.n	801f42c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801f412:	9c00      	ldr	r4, [sp, #0]
 801f414:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
 801f418:	f06f 0401 	mvn.w	r4, #1
 801f41c:	4374      	muls	r4, r6
 801f41e:	5305      	strh	r5, [r0, r4]
 801f420:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801f422:	3e01      	subs	r6, #1
 801f424:	4421      	add	r1, r4
 801f426:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801f428:	4422      	add	r2, r4
 801f42a:	e79c      	b.n	801f366 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801f42c:	2c00      	cmp	r4, #0
 801f42e:	d0f7      	beq.n	801f420 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801f430:	9f00      	ldr	r7, [sp, #0]
 801f432:	fa1f fc84 	uxth.w	ip, r4
 801f436:	43e4      	mvns	r4, r4
 801f438:	f837 9015 	ldrh.w	r9, [r7, r5, lsl #1]
 801f43c:	f06f 0501 	mvn.w	r5, #1
 801f440:	b2e4      	uxtb	r4, r4
 801f442:	4375      	muls	r5, r6
 801f444:	ea4f 2e29 	mov.w	lr, r9, asr #8
 801f448:	9502      	str	r5, [sp, #8]
 801f44a:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801f44e:	5b45      	ldrh	r5, [r0, r5]
 801f450:	122f      	asrs	r7, r5, #8
 801f452:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801f456:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801f45a:	00ed      	lsls	r5, r5, #3
 801f45c:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801f460:	fb17 f704 	smulbb	r7, r7, r4
 801f464:	b2ed      	uxtb	r5, r5
 801f466:	fb1a fa04 	smulbb	sl, sl, r4
 801f46a:	fb0e 7e0c 	mla	lr, lr, ip, r7
 801f46e:	ea4f 07e9 	mov.w	r7, r9, asr #3
 801f472:	fb15 f504 	smulbb	r5, r5, r4
 801f476:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801f47a:	fa1f fe8e 	uxth.w	lr, lr
 801f47e:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801f482:	fa5f f989 	uxtb.w	r9, r9
 801f486:	fb07 a70c 	mla	r7, r7, ip, sl
 801f48a:	f10e 0401 	add.w	r4, lr, #1
 801f48e:	fb09 550c 	mla	r5, r9, ip, r5
 801f492:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
 801f496:	9c02      	ldr	r4, [sp, #8]
 801f498:	b2ad      	uxth	r5, r5
 801f49a:	b2bf      	uxth	r7, r7
 801f49c:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801f4a0:	f105 0a01 	add.w	sl, r5, #1
 801f4a4:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801f4a8:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801f4ac:	ea4a 0e0e 	orr.w	lr, sl, lr
 801f4b0:	f107 0a01 	add.w	sl, r7, #1
 801f4b4:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801f4b8:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801f4bc:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801f4c0:	ea4e 0e0a 	orr.w	lr, lr, sl
 801f4c4:	f820 e004 	strh.w	lr, [r0, r4]
 801f4c8:	e7aa      	b.n	801f420 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801f4ca:	f04f 0900 	mov.w	r9, #0
 801f4ce:	eba3 0409 	sub.w	r4, r3, r9
 801f4d2:	2c00      	cmp	r4, #0
 801f4d4:	f77f af4a 	ble.w	801f36c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801f4d8:	1414      	asrs	r4, r2, #16
 801f4da:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801f4de:	140d      	asrs	r5, r1, #16
 801f4e0:	fb06 5504 	mla	r5, r6, r4, r5
 801f4e4:	9c01      	ldr	r4, [sp, #4]
 801f4e6:	5d64      	ldrb	r4, [r4, r5]
 801f4e8:	2cff      	cmp	r4, #255	; 0xff
 801f4ea:	d10b      	bne.n	801f504 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801f4ec:	9c00      	ldr	r4, [sp, #0]
 801f4ee:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 801f4f2:	f820 4019 	strh.w	r4, [r0, r9, lsl #1]
 801f4f6:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801f4f8:	f109 0901 	add.w	r9, r9, #1
 801f4fc:	4421      	add	r1, r4
 801f4fe:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801f500:	4422      	add	r2, r4
 801f502:	e7e4      	b.n	801f4ce <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801f504:	2c00      	cmp	r4, #0
 801f506:	d0f6      	beq.n	801f4f6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801f508:	9e00      	ldr	r6, [sp, #0]
 801f50a:	b2a7      	uxth	r7, r4
 801f50c:	43e4      	mvns	r4, r4
 801f50e:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
 801f512:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801f516:	b2e4      	uxtb	r4, r4
 801f518:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801f51c:	122e      	asrs	r6, r5, #8
 801f51e:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801f522:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801f526:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801f52a:	00ed      	lsls	r5, r5, #3
 801f52c:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801f530:	fb16 f604 	smulbb	r6, r6, r4
 801f534:	b2ed      	uxtb	r5, r5
 801f536:	fb1a fa04 	smulbb	sl, sl, r4
 801f53a:	fb0c 6c07 	mla	ip, ip, r7, r6
 801f53e:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801f542:	fb15 f504 	smulbb	r5, r5, r4
 801f546:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801f54a:	fa1f fc8c 	uxth.w	ip, ip
 801f54e:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801f552:	fa5f fe8e 	uxtb.w	lr, lr
 801f556:	fb06 a607 	mla	r6, r6, r7, sl
 801f55a:	f10c 0401 	add.w	r4, ip, #1
 801f55e:	fb0e 5507 	mla	r5, lr, r7, r5
 801f562:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801f566:	b2ad      	uxth	r5, r5
 801f568:	b2b6      	uxth	r6, r6
 801f56a:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801f56e:	f105 0a01 	add.w	sl, r5, #1
 801f572:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801f576:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801f57a:	ea4a 0c0c 	orr.w	ip, sl, ip
 801f57e:	f106 0a01 	add.w	sl, r6, #1
 801f582:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801f586:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801f58a:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801f58e:	ea4c 0c0a 	orr.w	ip, ip, sl
 801f592:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801f596:	e7ae      	b.n	801f4f6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801f598:	b005      	add	sp, #20
 801f59a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f59e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f59e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f5a2:	b085      	sub	sp, #20
 801f5a4:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801f5a6:	9203      	str	r2, [sp, #12]
 801f5a8:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801f5ac:	9100      	str	r1, [sp, #0]
 801f5ae:	9201      	str	r2, [sp, #4]
 801f5b0:	6841      	ldr	r1, [r0, #4]
 801f5b2:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 801f5b6:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801f5ba:	fb01 2404 	mla	r4, r1, r4, r2
 801f5be:	6802      	ldr	r2, [r0, #0]
 801f5c0:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801f5c4:	f8de 2000 	ldr.w	r2, [lr]
 801f5c8:	9202      	str	r2, [sp, #8]
 801f5ca:	9a01      	ldr	r2, [sp, #4]
 801f5cc:	43d6      	mvns	r6, r2
 801f5ce:	b2f6      	uxtb	r6, r6
 801f5d0:	9a00      	ldr	r2, [sp, #0]
 801f5d2:	2a00      	cmp	r2, #0
 801f5d4:	dc03      	bgt.n	801f5de <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801f5d6:	9a03      	ldr	r2, [sp, #12]
 801f5d8:	2a00      	cmp	r2, #0
 801f5da:	f340 8124 	ble.w	801f826 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801f5de:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f5e0:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801f5e4:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801f5e8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f5ea:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801f5ee:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801f5f2:	2b00      	cmp	r3, #0
 801f5f4:	dd0e      	ble.n	801f614 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f5f6:	1408      	asrs	r0, r1, #16
 801f5f8:	d405      	bmi.n	801f606 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801f5fa:	4560      	cmp	r0, ip
 801f5fc:	da03      	bge.n	801f606 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801f5fe:	1410      	asrs	r0, r2, #16
 801f600:	d401      	bmi.n	801f606 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801f602:	42b8      	cmp	r0, r7
 801f604:	db07      	blt.n	801f616 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801f606:	9811      	ldr	r0, [sp, #68]	; 0x44
 801f608:	3b01      	subs	r3, #1
 801f60a:	3402      	adds	r4, #2
 801f60c:	4401      	add	r1, r0
 801f60e:	9812      	ldr	r0, [sp, #72]	; 0x48
 801f610:	4402      	add	r2, r0
 801f612:	e7ee      	b.n	801f5f2 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801f614:	d06e      	beq.n	801f6f4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801f616:	1e58      	subs	r0, r3, #1
 801f618:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801f61a:	fb05 1500 	mla	r5, r5, r0, r1
 801f61e:	142d      	asrs	r5, r5, #16
 801f620:	d45c      	bmi.n	801f6dc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801f622:	4565      	cmp	r5, ip
 801f624:	da5a      	bge.n	801f6dc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801f626:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801f628:	fb05 2000 	mla	r0, r5, r0, r2
 801f62c:	1400      	asrs	r0, r0, #16
 801f62e:	d455      	bmi.n	801f6dc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801f630:	42b8      	cmp	r0, r7
 801f632:	da53      	bge.n	801f6dc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801f634:	4699      	mov	r9, r3
 801f636:	46a2      	mov	sl, r4
 801f638:	f8bd b004 	ldrh.w	fp, [sp, #4]
 801f63c:	f1b9 0f00 	cmp.w	r9, #0
 801f640:	dd54      	ble.n	801f6ec <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801f642:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801f646:	140d      	asrs	r5, r1, #16
 801f648:	1410      	asrs	r0, r2, #16
 801f64a:	f109 39ff 	add.w	r9, r9, #4294967295
 801f64e:	fb07 5000 	mla	r0, r7, r0, r5
 801f652:	9d02      	ldr	r5, [sp, #8]
 801f654:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801f658:	f8ba 5000 	ldrh.w	r5, [sl]
 801f65c:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801f660:	122f      	asrs	r7, r5, #8
 801f662:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801f666:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801f66a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801f66e:	00ed      	lsls	r5, r5, #3
 801f670:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 801f674:	fb17 f706 	smulbb	r7, r7, r6
 801f678:	b2ed      	uxtb	r5, r5
 801f67a:	fb18 f806 	smulbb	r8, r8, r6
 801f67e:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801f682:	10c7      	asrs	r7, r0, #3
 801f684:	fb15 f506 	smulbb	r5, r5, r6
 801f688:	00c0      	lsls	r0, r0, #3
 801f68a:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801f68e:	fa1f fc8c 	uxth.w	ip, ip
 801f692:	b2c0      	uxtb	r0, r0
 801f694:	fb07 870b 	mla	r7, r7, fp, r8
 801f698:	fb00 500b 	mla	r0, r0, fp, r5
 801f69c:	f10c 0501 	add.w	r5, ip, #1
 801f6a0:	b2bf      	uxth	r7, r7
 801f6a2:	b280      	uxth	r0, r0
 801f6a4:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801f6a8:	f107 0801 	add.w	r8, r7, #1
 801f6ac:	1c45      	adds	r5, r0, #1
 801f6ae:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801f6b2:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801f6b6:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801f6ba:	9811      	ldr	r0, [sp, #68]	; 0x44
 801f6bc:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801f6c0:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801f6c4:	4401      	add	r1, r0
 801f6c6:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801f6ca:	9812      	ldr	r0, [sp, #72]	; 0x48
 801f6cc:	ea45 0c0c 	orr.w	ip, r5, ip
 801f6d0:	4402      	add	r2, r0
 801f6d2:	ea4c 0c08 	orr.w	ip, ip, r8
 801f6d6:	f82a cb02 	strh.w	ip, [sl], #2
 801f6da:	e7af      	b.n	801f63c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801f6dc:	f04f 0800 	mov.w	r8, #0
 801f6e0:	f8bd a004 	ldrh.w	sl, [sp, #4]
 801f6e4:	eb03 0008 	add.w	r0, r3, r8
 801f6e8:	2800      	cmp	r0, #0
 801f6ea:	dc41      	bgt.n	801f770 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801f6ec:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f6f0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801f6f4:	9b00      	ldr	r3, [sp, #0]
 801f6f6:	2b00      	cmp	r3, #0
 801f6f8:	f340 8095 	ble.w	801f826 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801f6fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f700:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f702:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f706:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f70a:	eef0 6a62 	vmov.f32	s13, s5
 801f70e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801f712:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f716:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f71a:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 801f71e:	eef0 6a43 	vmov.f32	s13, s6
 801f722:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f726:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 801f72a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f72e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f732:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f736:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f73a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f73e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f742:	ee12 2a90 	vmov	r2, s5
 801f746:	eef0 2a47 	vmov.f32	s5, s14
 801f74a:	fb92 f3f3 	sdiv	r3, r2, r3
 801f74e:	ee13 2a10 	vmov	r2, s6
 801f752:	9311      	str	r3, [sp, #68]	; 0x44
 801f754:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f756:	eeb0 3a67 	vmov.f32	s6, s15
 801f75a:	fb92 f3f3 	sdiv	r3, r2, r3
 801f75e:	9312      	str	r3, [sp, #72]	; 0x48
 801f760:	9b00      	ldr	r3, [sp, #0]
 801f762:	9a03      	ldr	r2, [sp, #12]
 801f764:	3b01      	subs	r3, #1
 801f766:	9300      	str	r3, [sp, #0]
 801f768:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f76a:	bf08      	it	eq
 801f76c:	4613      	moveq	r3, r2
 801f76e:	e72f      	b.n	801f5d0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801f770:	140f      	asrs	r7, r1, #16
 801f772:	d451      	bmi.n	801f818 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801f774:	f8de 5008 	ldr.w	r5, [lr, #8]
 801f778:	42bd      	cmp	r5, r7
 801f77a:	dd4d      	ble.n	801f818 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801f77c:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801f780:	d44a      	bmi.n	801f818 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801f782:	f8de 000c 	ldr.w	r0, [lr, #12]
 801f786:	4560      	cmp	r0, ip
 801f788:	dd46      	ble.n	801f818 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801f78a:	b22d      	sxth	r5, r5
 801f78c:	9802      	ldr	r0, [sp, #8]
 801f78e:	fb0c 7505 	mla	r5, ip, r5, r7
 801f792:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
 801f796:	f06f 0501 	mvn.w	r5, #1
 801f79a:	fb05 fb08 	mul.w	fp, r5, r8
 801f79e:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801f7a2:	f834 500b 	ldrh.w	r5, [r4, fp]
 801f7a6:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801f7aa:	122f      	asrs	r7, r5, #8
 801f7ac:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801f7b0:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801f7b4:	00ed      	lsls	r5, r5, #3
 801f7b6:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801f7ba:	fb17 f706 	smulbb	r7, r7, r6
 801f7be:	b2ed      	uxtb	r5, r5
 801f7c0:	fb19 f906 	smulbb	r9, r9, r6
 801f7c4:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801f7c8:	10c7      	asrs	r7, r0, #3
 801f7ca:	fb15 f506 	smulbb	r5, r5, r6
 801f7ce:	00c0      	lsls	r0, r0, #3
 801f7d0:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801f7d4:	fa1f fc8c 	uxth.w	ip, ip
 801f7d8:	b2c0      	uxtb	r0, r0
 801f7da:	fb07 970a 	mla	r7, r7, sl, r9
 801f7de:	fb00 500a 	mla	r0, r0, sl, r5
 801f7e2:	f10c 0501 	add.w	r5, ip, #1
 801f7e6:	b2bf      	uxth	r7, r7
 801f7e8:	b280      	uxth	r0, r0
 801f7ea:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801f7ee:	f107 0901 	add.w	r9, r7, #1
 801f7f2:	1c45      	adds	r5, r0, #1
 801f7f4:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801f7f8:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801f7fc:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801f800:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801f804:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801f808:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801f80c:	ea45 0c0c 	orr.w	ip, r5, ip
 801f810:	ea4c 0c09 	orr.w	ip, ip, r9
 801f814:	f824 c00b 	strh.w	ip, [r4, fp]
 801f818:	9811      	ldr	r0, [sp, #68]	; 0x44
 801f81a:	f108 38ff 	add.w	r8, r8, #4294967295
 801f81e:	4401      	add	r1, r0
 801f820:	9812      	ldr	r0, [sp, #72]	; 0x48
 801f822:	4402      	add	r2, r0
 801f824:	e75e      	b.n	801f6e4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801f826:	b005      	add	sp, #20
 801f828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f82c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f82c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f830:	b085      	sub	sp, #20
 801f832:	4693      	mov	fp, r2
 801f834:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f838:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801f83a:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801f83c:	6870      	ldr	r0, [r6, #4]
 801f83e:	9101      	str	r1, [sp, #4]
 801f840:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801f844:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 801f848:	fb00 2404 	mla	r4, r0, r4, r2
 801f84c:	6832      	ldr	r2, [r6, #0]
 801f84e:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801f852:	682a      	ldr	r2, [r5, #0]
 801f854:	9202      	str	r2, [sp, #8]
 801f856:	9a01      	ldr	r2, [sp, #4]
 801f858:	2a00      	cmp	r2, #0
 801f85a:	dc03      	bgt.n	801f864 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801f85c:	f1bb 0f00 	cmp.w	fp, #0
 801f860:	f340 809a 	ble.w	801f998 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801f864:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f866:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801f86a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801f86e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f870:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801f874:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801f878:	2b00      	cmp	r3, #0
 801f87a:	dd0c      	ble.n	801f896 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801f87c:	1406      	asrs	r6, r0, #16
 801f87e:	d405      	bmi.n	801f88c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801f880:	454e      	cmp	r6, r9
 801f882:	da03      	bge.n	801f88c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801f884:	1416      	asrs	r6, r2, #16
 801f886:	d401      	bmi.n	801f88c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801f888:	4546      	cmp	r6, r8
 801f88a:	db05      	blt.n	801f898 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801f88c:	4470      	add	r0, lr
 801f88e:	4462      	add	r2, ip
 801f890:	3b01      	subs	r3, #1
 801f892:	3402      	adds	r4, #2
 801f894:	e7f0      	b.n	801f878 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801f896:	d00f      	beq.n	801f8b8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801f898:	1e5e      	subs	r6, r3, #1
 801f89a:	fb0e 0706 	mla	r7, lr, r6, r0
 801f89e:	143f      	asrs	r7, r7, #16
 801f8a0:	d541      	bpl.n	801f926 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 801f8a2:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801f8a6:	4698      	mov	r8, r3
 801f8a8:	9603      	str	r6, [sp, #12]
 801f8aa:	f1b8 0f00 	cmp.w	r8, #0
 801f8ae:	dc56      	bgt.n	801f95e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 801f8b0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f8b4:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801f8b8:	9b01      	ldr	r3, [sp, #4]
 801f8ba:	2b00      	cmp	r3, #0
 801f8bc:	dd6c      	ble.n	801f998 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801f8be:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f8c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f8c4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f8c8:	eeb0 6a62 	vmov.f32	s12, s5
 801f8cc:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f8d0:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f8d4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f8d8:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801f8dc:	eeb0 6a43 	vmov.f32	s12, s6
 801f8e0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f8e4:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801f8e8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f8ec:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f8f0:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f8f4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f8f8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f8fc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f900:	ee12 2a90 	vmov	r2, s5
 801f904:	eef0 2a47 	vmov.f32	s5, s14
 801f908:	fb92 fef3 	sdiv	lr, r2, r3
 801f90c:	ee13 2a10 	vmov	r2, s6
 801f910:	eeb0 3a67 	vmov.f32	s6, s15
 801f914:	fb92 fcf3 	sdiv	ip, r2, r3
 801f918:	9b01      	ldr	r3, [sp, #4]
 801f91a:	3b01      	subs	r3, #1
 801f91c:	9301      	str	r3, [sp, #4]
 801f91e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f920:	bf08      	it	eq
 801f922:	465b      	moveq	r3, fp
 801f924:	e797      	b.n	801f856 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801f926:	454f      	cmp	r7, r9
 801f928:	dabb      	bge.n	801f8a2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f92a:	fb0c 2606 	mla	r6, ip, r6, r2
 801f92e:	1436      	asrs	r6, r6, #16
 801f930:	d4b7      	bmi.n	801f8a2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f932:	4546      	cmp	r6, r8
 801f934:	dab5      	bge.n	801f8a2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f936:	461e      	mov	r6, r3
 801f938:	46a0      	mov	r8, r4
 801f93a:	2e00      	cmp	r6, #0
 801f93c:	ddb8      	ble.n	801f8b0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801f93e:	1417      	asrs	r7, r2, #16
 801f940:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801f944:	ea4f 4920 	mov.w	r9, r0, asr #16
 801f948:	9902      	ldr	r1, [sp, #8]
 801f94a:	4470      	add	r0, lr
 801f94c:	4462      	add	r2, ip
 801f94e:	fb0a 9707 	mla	r7, sl, r7, r9
 801f952:	3e01      	subs	r6, #1
 801f954:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801f958:	f828 7b02 	strh.w	r7, [r8], #2
 801f95c:	e7ed      	b.n	801f93a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 801f95e:	ea5f 4920 	movs.w	r9, r0, asr #16
 801f962:	d414      	bmi.n	801f98e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801f964:	68ae      	ldr	r6, [r5, #8]
 801f966:	454e      	cmp	r6, r9
 801f968:	dd11      	ble.n	801f98e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801f96a:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801f96e:	d40e      	bmi.n	801f98e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801f970:	68ef      	ldr	r7, [r5, #12]
 801f972:	4557      	cmp	r7, sl
 801f974:	dd0b      	ble.n	801f98e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801f976:	b236      	sxth	r6, r6
 801f978:	f06f 0101 	mvn.w	r1, #1
 801f97c:	9f02      	ldr	r7, [sp, #8]
 801f97e:	fb0a 9606 	mla	r6, sl, r6, r9
 801f982:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801f986:	fb01 f608 	mul.w	r6, r1, r8
 801f98a:	9903      	ldr	r1, [sp, #12]
 801f98c:	538f      	strh	r7, [r1, r6]
 801f98e:	4470      	add	r0, lr
 801f990:	4462      	add	r2, ip
 801f992:	f108 38ff 	add.w	r8, r8, #4294967295
 801f996:	e788      	b.n	801f8aa <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801f998:	b005      	add	sp, #20
 801f99a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f99e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f99e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f9a2:	b087      	sub	sp, #28
 801f9a4:	468b      	mov	fp, r1
 801f9a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f9aa:	9815      	ldr	r0, [sp, #84]	; 0x54
 801f9ac:	9203      	str	r2, [sp, #12]
 801f9ae:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801f9b2:	6841      	ldr	r1, [r0, #4]
 801f9b4:	9204      	str	r2, [sp, #16]
 801f9b6:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 801f9ba:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801f9be:	fb01 2505 	mla	r5, r1, r5, r2
 801f9c2:	6802      	ldr	r2, [r0, #0]
 801f9c4:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 801f9c8:	f8d9 2000 	ldr.w	r2, [r9]
 801f9cc:	9201      	str	r2, [sp, #4]
 801f9ce:	f1bb 0f00 	cmp.w	fp, #0
 801f9d2:	dc03      	bgt.n	801f9dc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801f9d4:	9a03      	ldr	r2, [sp, #12]
 801f9d6:	2a00      	cmp	r2, #0
 801f9d8:	f340 8158 	ble.w	801fc8c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 801f9dc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801f9de:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 801f9e2:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801f9e6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f9e8:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 801f9ec:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801f9f0:	2b00      	cmp	r3, #0
 801f9f2:	dd0e      	ble.n	801fa12 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801f9f4:	1402      	asrs	r2, r0, #16
 801f9f6:	d405      	bmi.n	801fa04 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801f9f8:	42ba      	cmp	r2, r7
 801f9fa:	da03      	bge.n	801fa04 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801f9fc:	140a      	asrs	r2, r1, #16
 801f9fe:	d401      	bmi.n	801fa04 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801fa00:	42b2      	cmp	r2, r6
 801fa02:	db07      	blt.n	801fa14 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801fa04:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801fa06:	3b01      	subs	r3, #1
 801fa08:	3502      	adds	r5, #2
 801fa0a:	4410      	add	r0, r2
 801fa0c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801fa0e:	4411      	add	r1, r2
 801fa10:	e7ee      	b.n	801f9f0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801fa12:	d017      	beq.n	801fa44 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801fa14:	1e5a      	subs	r2, r3, #1
 801fa16:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801fa18:	fb04 0402 	mla	r4, r4, r2, r0
 801fa1c:	1424      	asrs	r4, r4, #16
 801fa1e:	d409      	bmi.n	801fa34 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801fa20:	42bc      	cmp	r4, r7
 801fa22:	da07      	bge.n	801fa34 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801fa24:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801fa26:	fb04 1202 	mla	r2, r4, r2, r1
 801fa2a:	1412      	asrs	r2, r2, #16
 801fa2c:	d402      	bmi.n	801fa34 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801fa2e:	42b2      	cmp	r2, r6
 801fa30:	f2c0 80bf 	blt.w	801fbb2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801fa34:	2700      	movs	r7, #0
 801fa36:	19da      	adds	r2, r3, r7
 801fa38:	2a00      	cmp	r2, #0
 801fa3a:	dc3e      	bgt.n	801faba <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801fa3c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801fa40:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 801fa44:	f1bb 0f00 	cmp.w	fp, #0
 801fa48:	f340 8120 	ble.w	801fc8c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 801fa4c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fa50:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801fa52:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fa56:	f1bb 0b01 	subs.w	fp, fp, #1
 801fa5a:	eeb0 6a62 	vmov.f32	s12, s5
 801fa5e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801fa62:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fa66:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fa6a:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801fa6e:	eeb0 6a43 	vmov.f32	s12, s6
 801fa72:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fa76:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801fa7a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801fa7e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fa82:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fa86:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fa8a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fa8e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fa92:	ee12 2a90 	vmov	r2, s5
 801fa96:	eef0 2a47 	vmov.f32	s5, s14
 801fa9a:	fb92 f3f3 	sdiv	r3, r2, r3
 801fa9e:	ee13 2a10 	vmov	r2, s6
 801faa2:	9313      	str	r3, [sp, #76]	; 0x4c
 801faa4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801faa6:	eeb0 3a67 	vmov.f32	s6, s15
 801faaa:	fb92 f3f3 	sdiv	r3, r2, r3
 801faae:	9a03      	ldr	r2, [sp, #12]
 801fab0:	9314      	str	r3, [sp, #80]	; 0x50
 801fab2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801fab4:	bf08      	it	eq
 801fab6:	4613      	moveq	r3, r2
 801fab8:	e789      	b.n	801f9ce <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801faba:	1406      	asrs	r6, r0, #16
 801fabc:	d42d      	bmi.n	801fb1a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801fabe:	f8d9 4008 	ldr.w	r4, [r9, #8]
 801fac2:	42b4      	cmp	r4, r6
 801fac4:	dd29      	ble.n	801fb1a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801fac6:	ea5f 4c21 	movs.w	ip, r1, asr #16
 801faca:	d426      	bmi.n	801fb1a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801facc:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801fad0:	4562      	cmp	r2, ip
 801fad2:	dd22      	ble.n	801fb1a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801fad4:	b224      	sxth	r4, r4
 801fad6:	9a01      	ldr	r2, [sp, #4]
 801fad8:	fb0c 6404 	mla	r4, ip, r4, r6
 801fadc:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
 801fae0:	0e22      	lsrs	r2, r4, #24
 801fae2:	d01a      	beq.n	801fb1a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801fae4:	9e04      	ldr	r6, [sp, #16]
 801fae6:	4372      	muls	r2, r6
 801fae8:	1c56      	adds	r6, r2, #1
 801faea:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801faee:	0a26      	lsrs	r6, r4, #8
 801faf0:	1212      	asrs	r2, r2, #8
 801faf2:	9605      	str	r6, [sp, #20]
 801faf4:	2aff      	cmp	r2, #255	; 0xff
 801faf6:	d116      	bne.n	801fb26 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 801faf8:	f06f 0201 	mvn.w	r2, #1
 801fafc:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 801fb00:	fb02 fc07 	mul.w	ip, r2, r7
 801fb04:	0962      	lsrs	r2, r4, #5
 801fb06:	f026 0607 	bic.w	r6, r6, #7
 801fb0a:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801fb0e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801fb12:	4316      	orrs	r6, r2
 801fb14:	4326      	orrs	r6, r4
 801fb16:	f825 600c 	strh.w	r6, [r5, ip]
 801fb1a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801fb1c:	3f01      	subs	r7, #1
 801fb1e:	4410      	add	r0, r2
 801fb20:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801fb22:	4411      	add	r1, r2
 801fb24:	e787      	b.n	801fa36 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801fb26:	f06f 0601 	mvn.w	r6, #1
 801fb2a:	fa1f fa82 	uxth.w	sl, r2
 801fb2e:	f3c4 4c07 	ubfx	ip, r4, #16, #8
 801fb32:	43d2      	mvns	r2, r2
 801fb34:	437e      	muls	r6, r7
 801fb36:	b2e4      	uxtb	r4, r4
 801fb38:	fb1c fc0a 	smulbb	ip, ip, sl
 801fb3c:	b2d2      	uxtb	r2, r2
 801fb3e:	f835 8006 	ldrh.w	r8, [r5, r6]
 801fb42:	fb14 f40a 	smulbb	r4, r4, sl
 801fb46:	9602      	str	r6, [sp, #8]
 801fb48:	ea4f 2e28 	mov.w	lr, r8, asr #8
 801fb4c:	f89d 6014 	ldrb.w	r6, [sp, #20]
 801fb50:	fb16 f60a 	smulbb	r6, r6, sl
 801fb54:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801fb58:	fb0e ce02 	mla	lr, lr, r2, ip
 801fb5c:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 801fb60:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801fb64:	fa1f fe8e 	uxth.w	lr, lr
 801fb68:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801fb6c:	fa5f f888 	uxtb.w	r8, r8
 801fb70:	fb0c 6c02 	mla	ip, ip, r2, r6
 801fb74:	fb08 4402 	mla	r4, r8, r2, r4
 801fb78:	f10e 0201 	add.w	r2, lr, #1
 801fb7c:	fa1f fc8c 	uxth.w	ip, ip
 801fb80:	b2a4      	uxth	r4, r4
 801fb82:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801fb86:	9a02      	ldr	r2, [sp, #8]
 801fb88:	1c66      	adds	r6, r4, #1
 801fb8a:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801fb8e:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801fb92:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801fb96:	ea46 0e0e 	orr.w	lr, r6, lr
 801fb9a:	f10c 0601 	add.w	r6, ip, #1
 801fb9e:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 801fba2:	0976      	lsrs	r6, r6, #5
 801fba4:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801fba8:	ea4e 0e06 	orr.w	lr, lr, r6
 801fbac:	f825 e002 	strh.w	lr, [r5, r2]
 801fbb0:	e7b3      	b.n	801fb1a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801fbb2:	f04f 0800 	mov.w	r8, #0
 801fbb6:	eba3 0208 	sub.w	r2, r3, r8
 801fbba:	2a00      	cmp	r2, #0
 801fbbc:	f77f af3e 	ble.w	801fa3c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801fbc0:	1404      	asrs	r4, r0, #16
 801fbc2:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 801fbc6:	140a      	asrs	r2, r1, #16
 801fbc8:	fb06 4202 	mla	r2, r6, r2, r4
 801fbcc:	9c01      	ldr	r4, [sp, #4]
 801fbce:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
 801fbd2:	0e22      	lsrs	r2, r4, #24
 801fbd4:	d015      	beq.n	801fc02 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 801fbd6:	9e04      	ldr	r6, [sp, #16]
 801fbd8:	4372      	muls	r2, r6
 801fbda:	1c56      	adds	r6, r2, #1
 801fbdc:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801fbe0:	0a26      	lsrs	r6, r4, #8
 801fbe2:	1212      	asrs	r2, r2, #8
 801fbe4:	2aff      	cmp	r2, #255	; 0xff
 801fbe6:	d113      	bne.n	801fc10 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 801fbe8:	0962      	lsrs	r2, r4, #5
 801fbea:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 801fbee:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801fbf2:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801fbf6:	f026 0607 	bic.w	r6, r6, #7
 801fbfa:	4316      	orrs	r6, r2
 801fbfc:	4326      	orrs	r6, r4
 801fbfe:	f825 6018 	strh.w	r6, [r5, r8, lsl #1]
 801fc02:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801fc04:	f108 0801 	add.w	r8, r8, #1
 801fc08:	4410      	add	r0, r2
 801fc0a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801fc0c:	4411      	add	r1, r2
 801fc0e:	e7d2      	b.n	801fbb6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 801fc10:	f835 e018 	ldrh.w	lr, [r5, r8, lsl #1]
 801fc14:	fa1f fa82 	uxth.w	sl, r2
 801fc18:	f3c4 4707 	ubfx	r7, r4, #16, #8
 801fc1c:	43d2      	mvns	r2, r2
 801fc1e:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801fc22:	fb17 f70a 	smulbb	r7, r7, sl
 801fc26:	b2d2      	uxtb	r2, r2
 801fc28:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801fc2c:	b2e4      	uxtb	r4, r4
 801fc2e:	b2f6      	uxtb	r6, r6
 801fc30:	fb0c 7c02 	mla	ip, ip, r2, r7
 801fc34:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801fc38:	fb14 f40a 	smulbb	r4, r4, sl
 801fc3c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801fc40:	fa1f fc8c 	uxth.w	ip, ip
 801fc44:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801fc48:	fb16 f60a 	smulbb	r6, r6, sl
 801fc4c:	fa5f fe8e 	uxtb.w	lr, lr
 801fc50:	fb0e 4402 	mla	r4, lr, r2, r4
 801fc54:	fb07 6702 	mla	r7, r7, r2, r6
 801fc58:	f10c 0201 	add.w	r2, ip, #1
 801fc5c:	b2a4      	uxth	r4, r4
 801fc5e:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801fc62:	1c66      	adds	r6, r4, #1
 801fc64:	b2bf      	uxth	r7, r7
 801fc66:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801fc6a:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801fc6e:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801fc72:	ea46 0c0c 	orr.w	ip, r6, ip
 801fc76:	1c7e      	adds	r6, r7, #1
 801fc78:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 801fc7c:	0976      	lsrs	r6, r6, #5
 801fc7e:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801fc82:	ea4c 0c06 	orr.w	ip, ip, r6
 801fc86:	f825 c018 	strh.w	ip, [r5, r8, lsl #1]
 801fc8a:	e7ba      	b.n	801fc02 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 801fc8c:	b007      	add	sp, #28
 801fc8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801fc94 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fc94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fc98:	b085      	sub	sp, #20
 801fc9a:	468b      	mov	fp, r1
 801fc9c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801fca0:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801fca2:	9203      	str	r2, [sp, #12]
 801fca4:	6841      	ldr	r1, [r0, #4]
 801fca6:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801fcaa:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801fcae:	fb01 2404 	mla	r4, r1, r4, r2
 801fcb2:	6802      	ldr	r2, [r0, #0]
 801fcb4:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801fcb8:	f8d8 2000 	ldr.w	r2, [r8]
 801fcbc:	9201      	str	r2, [sp, #4]
 801fcbe:	f1bb 0f00 	cmp.w	fp, #0
 801fcc2:	dc03      	bgt.n	801fccc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801fcc4:	9a03      	ldr	r2, [sp, #12]
 801fcc6:	2a00      	cmp	r2, #0
 801fcc8:	f340 814f 	ble.w	801ff6a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 801fccc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801fcce:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801fcd2:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801fcd6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801fcd8:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801fcdc:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801fce0:	2b00      	cmp	r3, #0
 801fce2:	dd0e      	ble.n	801fd02 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801fce4:	1408      	asrs	r0, r1, #16
 801fce6:	d405      	bmi.n	801fcf4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801fce8:	42b8      	cmp	r0, r7
 801fcea:	da03      	bge.n	801fcf4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801fcec:	1410      	asrs	r0, r2, #16
 801fcee:	d401      	bmi.n	801fcf4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801fcf0:	42b0      	cmp	r0, r6
 801fcf2:	db07      	blt.n	801fd04 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801fcf4:	9811      	ldr	r0, [sp, #68]	; 0x44
 801fcf6:	3b01      	subs	r3, #1
 801fcf8:	3402      	adds	r4, #2
 801fcfa:	4401      	add	r1, r0
 801fcfc:	9812      	ldr	r0, [sp, #72]	; 0x48
 801fcfe:	4402      	add	r2, r0
 801fd00:	e7ee      	b.n	801fce0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801fd02:	d017      	beq.n	801fd34 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801fd04:	1e58      	subs	r0, r3, #1
 801fd06:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801fd08:	fb05 1500 	mla	r5, r5, r0, r1
 801fd0c:	142d      	asrs	r5, r5, #16
 801fd0e:	d409      	bmi.n	801fd24 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801fd10:	42bd      	cmp	r5, r7
 801fd12:	da07      	bge.n	801fd24 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801fd14:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801fd16:	fb05 2000 	mla	r0, r5, r0, r2
 801fd1a:	1400      	asrs	r0, r0, #16
 801fd1c:	d402      	bmi.n	801fd24 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801fd1e:	42b0      	cmp	r0, r6
 801fd20:	f2c0 80ba 	blt.w	801fe98 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801fd24:	2600      	movs	r6, #0
 801fd26:	1998      	adds	r0, r3, r6
 801fd28:	2800      	cmp	r0, #0
 801fd2a:	dc3e      	bgt.n	801fdaa <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801fd2c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801fd30:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801fd34:	f1bb 0f00 	cmp.w	fp, #0
 801fd38:	f340 8117 	ble.w	801ff6a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 801fd3c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fd40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fd42:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fd46:	f1bb 0b01 	subs.w	fp, fp, #1
 801fd4a:	eeb0 6a62 	vmov.f32	s12, s5
 801fd4e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801fd52:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fd56:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fd5a:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801fd5e:	eeb0 6a43 	vmov.f32	s12, s6
 801fd62:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fd66:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801fd6a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801fd6e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fd72:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fd76:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fd7a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fd7e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fd82:	ee12 2a90 	vmov	r2, s5
 801fd86:	eef0 2a47 	vmov.f32	s5, s14
 801fd8a:	fb92 f3f3 	sdiv	r3, r2, r3
 801fd8e:	ee13 2a10 	vmov	r2, s6
 801fd92:	9311      	str	r3, [sp, #68]	; 0x44
 801fd94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fd96:	eeb0 3a67 	vmov.f32	s6, s15
 801fd9a:	fb92 f3f3 	sdiv	r3, r2, r3
 801fd9e:	9a03      	ldr	r2, [sp, #12]
 801fda0:	9312      	str	r3, [sp, #72]	; 0x48
 801fda2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fda4:	bf08      	it	eq
 801fda6:	4613      	moveq	r3, r2
 801fda8:	e789      	b.n	801fcbe <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801fdaa:	140f      	asrs	r7, r1, #16
 801fdac:	d424      	bmi.n	801fdf8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801fdae:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801fdb2:	42bd      	cmp	r5, r7
 801fdb4:	dd20      	ble.n	801fdf8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801fdb6:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801fdba:	d41d      	bmi.n	801fdf8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801fdbc:	f8d8 000c 	ldr.w	r0, [r8, #12]
 801fdc0:	4560      	cmp	r0, ip
 801fdc2:	dd19      	ble.n	801fdf8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801fdc4:	b22d      	sxth	r5, r5
 801fdc6:	9801      	ldr	r0, [sp, #4]
 801fdc8:	fb0c 7505 	mla	r5, ip, r5, r7
 801fdcc:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 801fdd0:	0e07      	lsrs	r7, r0, #24
 801fdd2:	2fff      	cmp	r7, #255	; 0xff
 801fdd4:	d116      	bne.n	801fe04 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801fdd6:	f06f 0501 	mvn.w	r5, #1
 801fdda:	fb05 f706 	mul.w	r7, r5, r6
 801fdde:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 801fde2:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801fde6:	0945      	lsrs	r5, r0, #5
 801fde8:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801fdec:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801fdf0:	ea4c 0505 	orr.w	r5, ip, r5
 801fdf4:	4305      	orrs	r5, r0
 801fdf6:	53e5      	strh	r5, [r4, r7]
 801fdf8:	9811      	ldr	r0, [sp, #68]	; 0x44
 801fdfa:	3e01      	subs	r6, #1
 801fdfc:	4401      	add	r1, r0
 801fdfe:	9812      	ldr	r0, [sp, #72]	; 0x48
 801fe00:	4402      	add	r2, r0
 801fe02:	e790      	b.n	801fd26 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801fe04:	b2fd      	uxtb	r5, r7
 801fe06:	2f00      	cmp	r7, #0
 801fe08:	d0f6      	beq.n	801fdf8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801fe0a:	f06f 0701 	mvn.w	r7, #1
 801fe0e:	fa1f f985 	uxth.w	r9, r5
 801fe12:	43ed      	mvns	r5, r5
 801fe14:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801fe18:	4377      	muls	r7, r6
 801fe1a:	fb1a fa09 	smulbb	sl, sl, r9
 801fe1e:	b2ed      	uxtb	r5, r5
 801fe20:	f834 e007 	ldrh.w	lr, [r4, r7]
 801fe24:	9702      	str	r7, [sp, #8]
 801fe26:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801fe2a:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801fe2e:	fb17 f709 	smulbb	r7, r7, r9
 801fe32:	b2c0      	uxtb	r0, r0
 801fe34:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801fe38:	fb10 f009 	smulbb	r0, r0, r9
 801fe3c:	fb0c 7c05 	mla	ip, ip, r5, r7
 801fe40:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801fe44:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801fe48:	fa1f fc8c 	uxth.w	ip, ip
 801fe4c:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801fe50:	fa5f fe8e 	uxtb.w	lr, lr
 801fe54:	fb07 a705 	mla	r7, r7, r5, sl
 801fe58:	fb0e 0005 	mla	r0, lr, r5, r0
 801fe5c:	f10c 0501 	add.w	r5, ip, #1
 801fe60:	b2bf      	uxth	r7, r7
 801fe62:	b280      	uxth	r0, r0
 801fe64:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801fe68:	f100 0a01 	add.w	sl, r0, #1
 801fe6c:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801fe70:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801fe74:	9802      	ldr	r0, [sp, #8]
 801fe76:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801fe7a:	ea4a 0c0c 	orr.w	ip, sl, ip
 801fe7e:	f107 0a01 	add.w	sl, r7, #1
 801fe82:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801fe86:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801fe8a:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801fe8e:	ea4c 0c0a 	orr.w	ip, ip, sl
 801fe92:	f824 c000 	strh.w	ip, [r4, r0]
 801fe96:	e7af      	b.n	801fdf8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801fe98:	f04f 0e00 	mov.w	lr, #0
 801fe9c:	eba3 000e 	sub.w	r0, r3, lr
 801fea0:	2800      	cmp	r0, #0
 801fea2:	f77f af43 	ble.w	801fd2c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801fea6:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801feaa:	140d      	asrs	r5, r1, #16
 801feac:	1410      	asrs	r0, r2, #16
 801feae:	fb06 5000 	mla	r0, r6, r0, r5
 801feb2:	9d01      	ldr	r5, [sp, #4]
 801feb4:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 801feb8:	0e2e      	lsrs	r6, r5, #24
 801feba:	2eff      	cmp	r6, #255	; 0xff
 801febc:	d112      	bne.n	801fee4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 801febe:	482c      	ldr	r0, [pc, #176]	; (801ff70 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>)
 801fec0:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 801fec4:	0968      	lsrs	r0, r5, #5
 801fec6:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801feca:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801fece:	4330      	orrs	r0, r6
 801fed0:	4328      	orrs	r0, r5
 801fed2:	f824 001e 	strh.w	r0, [r4, lr, lsl #1]
 801fed6:	9811      	ldr	r0, [sp, #68]	; 0x44
 801fed8:	f10e 0e01 	add.w	lr, lr, #1
 801fedc:	4401      	add	r1, r0
 801fede:	9812      	ldr	r0, [sp, #72]	; 0x48
 801fee0:	4402      	add	r2, r0
 801fee2:	e7db      	b.n	801fe9c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801fee4:	b2f0      	uxtb	r0, r6
 801fee6:	2e00      	cmp	r6, #0
 801fee8:	d0f5      	beq.n	801fed6 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 801feea:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801feee:	fa1f f980 	uxth.w	r9, r0
 801fef2:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801fef6:	43c0      	mvns	r0, r0
 801fef8:	ea4f 272c 	mov.w	r7, ip, asr #8
 801fefc:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801ff00:	fb16 f609 	smulbb	r6, r6, r9
 801ff04:	b2c0      	uxtb	r0, r0
 801ff06:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801ff0a:	b2ed      	uxtb	r5, r5
 801ff0c:	fb1a fa09 	smulbb	sl, sl, r9
 801ff10:	fb07 6700 	mla	r7, r7, r0, r6
 801ff14:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801ff18:	fb15 f509 	smulbb	r5, r5, r9
 801ff1c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801ff20:	b2bf      	uxth	r7, r7
 801ff22:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801ff26:	fa5f fc8c 	uxtb.w	ip, ip
 801ff2a:	fb06 a600 	mla	r6, r6, r0, sl
 801ff2e:	fb0c 5500 	mla	r5, ip, r0, r5
 801ff32:	1c78      	adds	r0, r7, #1
 801ff34:	b2b6      	uxth	r6, r6
 801ff36:	b2ad      	uxth	r5, r5
 801ff38:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 801ff3c:	f105 0a01 	add.w	sl, r5, #1
 801ff40:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801ff44:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801ff48:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801ff4c:	ea4a 0707 	orr.w	r7, sl, r7
 801ff50:	f106 0a01 	add.w	sl, r6, #1
 801ff54:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801ff58:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801ff5c:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801ff60:	ea47 070a 	orr.w	r7, r7, sl
 801ff64:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 801ff68:	e7b5      	b.n	801fed6 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 801ff6a:	b005      	add	sp, #20
 801ff6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ff70:	fffff800 	.word	0xfffff800

0801ff74 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ff74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ff78:	b087      	sub	sp, #28
 801ff7a:	468b      	mov	fp, r1
 801ff7c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ff80:	9815      	ldr	r0, [sp, #84]	; 0x54
 801ff82:	9203      	str	r2, [sp, #12]
 801ff84:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801ff88:	6841      	ldr	r1, [r0, #4]
 801ff8a:	9204      	str	r2, [sp, #16]
 801ff8c:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 801ff90:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801ff94:	fb01 2404 	mla	r4, r1, r4, r2
 801ff98:	6802      	ldr	r2, [r0, #0]
 801ff9a:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801ff9e:	f8d9 2008 	ldr.w	r2, [r9, #8]
 801ffa2:	3201      	adds	r2, #1
 801ffa4:	f022 0201 	bic.w	r2, r2, #1
 801ffa8:	9200      	str	r2, [sp, #0]
 801ffaa:	f8d9 2000 	ldr.w	r2, [r9]
 801ffae:	9201      	str	r2, [sp, #4]
 801ffb0:	f1bb 0f00 	cmp.w	fp, #0
 801ffb4:	dc03      	bgt.n	801ffbe <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801ffb6:	9a03      	ldr	r2, [sp, #12]
 801ffb8:	2a00      	cmp	r2, #0
 801ffba:	f340 816a 	ble.w	8020292 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801ffbe:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801ffc0:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 801ffc4:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801ffc8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ffca:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 801ffce:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801ffd2:	2b00      	cmp	r3, #0
 801ffd4:	dd0e      	ble.n	801fff4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801ffd6:	1402      	asrs	r2, r0, #16
 801ffd8:	d405      	bmi.n	801ffe6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801ffda:	42ba      	cmp	r2, r7
 801ffdc:	da03      	bge.n	801ffe6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801ffde:	140a      	asrs	r2, r1, #16
 801ffe0:	d401      	bmi.n	801ffe6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801ffe2:	42b2      	cmp	r2, r6
 801ffe4:	db07      	blt.n	801fff6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801ffe6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801ffe8:	3b01      	subs	r3, #1
 801ffea:	3402      	adds	r4, #2
 801ffec:	4410      	add	r0, r2
 801ffee:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801fff0:	4411      	add	r1, r2
 801fff2:	e7ee      	b.n	801ffd2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801fff4:	d017      	beq.n	8020026 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801fff6:	1e5a      	subs	r2, r3, #1
 801fff8:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801fffa:	fb05 0502 	mla	r5, r5, r2, r0
 801fffe:	142d      	asrs	r5, r5, #16
 8020000:	d409      	bmi.n	8020016 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8020002:	42bd      	cmp	r5, r7
 8020004:	da07      	bge.n	8020016 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8020006:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8020008:	fb05 1202 	mla	r2, r5, r2, r1
 802000c:	1412      	asrs	r2, r2, #16
 802000e:	d402      	bmi.n	8020016 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8020010:	42b2      	cmp	r2, r6
 8020012:	f2c0 80c8 	blt.w	80201a6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 8020016:	2700      	movs	r7, #0
 8020018:	19da      	adds	r2, r3, r7
 802001a:	2a00      	cmp	r2, #0
 802001c:	dc3e      	bgt.n	802009c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 802001e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020022:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8020026:	f1bb 0f00 	cmp.w	fp, #0
 802002a:	f340 8132 	ble.w	8020292 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 802002e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020032:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020034:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020038:	f1bb 0b01 	subs.w	fp, fp, #1
 802003c:	eeb0 6a62 	vmov.f32	s12, s5
 8020040:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8020044:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020048:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802004c:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8020050:	eeb0 6a43 	vmov.f32	s12, s6
 8020054:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020058:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 802005c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020060:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020064:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020068:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802006c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020070:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020074:	ee12 2a90 	vmov	r2, s5
 8020078:	eef0 2a47 	vmov.f32	s5, s14
 802007c:	fb92 f3f3 	sdiv	r3, r2, r3
 8020080:	ee13 2a10 	vmov	r2, s6
 8020084:	9313      	str	r3, [sp, #76]	; 0x4c
 8020086:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020088:	eeb0 3a67 	vmov.f32	s6, s15
 802008c:	fb92 f3f3 	sdiv	r3, r2, r3
 8020090:	9a03      	ldr	r2, [sp, #12]
 8020092:	9314      	str	r3, [sp, #80]	; 0x50
 8020094:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020096:	bf08      	it	eq
 8020098:	4613      	moveq	r3, r2
 802009a:	e789      	b.n	801ffb0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 802009c:	1405      	asrs	r5, r0, #16
 802009e:	d436      	bmi.n	802010e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80200a0:	f8d9 2008 	ldr.w	r2, [r9, #8]
 80200a4:	42aa      	cmp	r2, r5
 80200a6:	dd32      	ble.n	802010e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80200a8:	140e      	asrs	r6, r1, #16
 80200aa:	d430      	bmi.n	802010e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80200ac:	f8d9 200c 	ldr.w	r2, [r9, #12]
 80200b0:	42b2      	cmp	r2, r6
 80200b2:	dd2c      	ble.n	802010e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80200b4:	9a00      	ldr	r2, [sp, #0]
 80200b6:	fb06 5502 	mla	r5, r6, r2, r5
 80200ba:	9e01      	ldr	r6, [sp, #4]
 80200bc:	086a      	lsrs	r2, r5, #1
 80200be:	5cb2      	ldrb	r2, [r6, r2]
 80200c0:	07ee      	lsls	r6, r5, #31
 80200c2:	bf54      	ite	pl
 80200c4:	f002 020f 	andpl.w	r2, r2, #15
 80200c8:	1112      	asrmi	r2, r2, #4
 80200ca:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80200ce:	b2d2      	uxtb	r2, r2
 80200d0:	b1ea      	cbz	r2, 802010e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80200d2:	9d04      	ldr	r5, [sp, #16]
 80200d4:	436a      	muls	r2, r5
 80200d6:	1c55      	adds	r5, r2, #1
 80200d8:	eb05 2222 	add.w	r2, r5, r2, asr #8
 80200dc:	4d6e      	ldr	r5, [pc, #440]	; (8020298 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 80200de:	1212      	asrs	r2, r2, #8
 80200e0:	682d      	ldr	r5, [r5, #0]
 80200e2:	2aff      	cmp	r2, #255	; 0xff
 80200e4:	ea4f 2615 	mov.w	r6, r5, lsr #8
 80200e8:	9605      	str	r6, [sp, #20]
 80200ea:	d116      	bne.n	802011a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 80200ec:	f06f 0201 	mvn.w	r2, #1
 80200f0:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 80200f4:	fb02 fc07 	mul.w	ip, r2, r7
 80200f8:	096a      	lsrs	r2, r5, #5
 80200fa:	f026 0607 	bic.w	r6, r6, #7
 80200fe:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8020102:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8020106:	4316      	orrs	r6, r2
 8020108:	432e      	orrs	r6, r5
 802010a:	f824 600c 	strh.w	r6, [r4, ip]
 802010e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8020110:	3f01      	subs	r7, #1
 8020112:	4410      	add	r0, r2
 8020114:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020116:	4411      	add	r1, r2
 8020118:	e77e      	b.n	8020018 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 802011a:	f06f 0601 	mvn.w	r6, #1
 802011e:	fa1f fa82 	uxth.w	sl, r2
 8020122:	f3c5 4c07 	ubfx	ip, r5, #16, #8
 8020126:	43d2      	mvns	r2, r2
 8020128:	437e      	muls	r6, r7
 802012a:	b2ed      	uxtb	r5, r5
 802012c:	fb1c fc0a 	smulbb	ip, ip, sl
 8020130:	b2d2      	uxtb	r2, r2
 8020132:	f834 8006 	ldrh.w	r8, [r4, r6]
 8020136:	fb15 f50a 	smulbb	r5, r5, sl
 802013a:	9602      	str	r6, [sp, #8]
 802013c:	ea4f 2e28 	mov.w	lr, r8, asr #8
 8020140:	f89d 6014 	ldrb.w	r6, [sp, #20]
 8020144:	fb16 f60a 	smulbb	r6, r6, sl
 8020148:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 802014c:	fb0e ce02 	mla	lr, lr, r2, ip
 8020150:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 8020154:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8020158:	fa1f fe8e 	uxth.w	lr, lr
 802015c:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8020160:	fa5f f888 	uxtb.w	r8, r8
 8020164:	fb0c 6c02 	mla	ip, ip, r2, r6
 8020168:	fb08 5502 	mla	r5, r8, r2, r5
 802016c:	f10e 0201 	add.w	r2, lr, #1
 8020170:	fa1f fc8c 	uxth.w	ip, ip
 8020174:	b2ad      	uxth	r5, r5
 8020176:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 802017a:	9a02      	ldr	r2, [sp, #8]
 802017c:	1c6e      	adds	r6, r5, #1
 802017e:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 8020182:	eb06 2615 	add.w	r6, r6, r5, lsr #8
 8020186:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 802018a:	ea46 0e0e 	orr.w	lr, r6, lr
 802018e:	f10c 0601 	add.w	r6, ip, #1
 8020192:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 8020196:	0976      	lsrs	r6, r6, #5
 8020198:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 802019c:	ea4e 0e06 	orr.w	lr, lr, r6
 80201a0:	f824 e002 	strh.w	lr, [r4, r2]
 80201a4:	e7b3      	b.n	802010e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80201a6:	f04f 0800 	mov.w	r8, #0
 80201aa:	eba3 0208 	sub.w	r2, r3, r8
 80201ae:	2a00      	cmp	r2, #0
 80201b0:	f77f af35 	ble.w	802001e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 80201b4:	1402      	asrs	r2, r0, #16
 80201b6:	9e00      	ldr	r6, [sp, #0]
 80201b8:	140d      	asrs	r5, r1, #16
 80201ba:	fb06 2505 	mla	r5, r6, r5, r2
 80201be:	9e01      	ldr	r6, [sp, #4]
 80201c0:	086a      	lsrs	r2, r5, #1
 80201c2:	07ed      	lsls	r5, r5, #31
 80201c4:	5cb2      	ldrb	r2, [r6, r2]
 80201c6:	bf54      	ite	pl
 80201c8:	f002 020f 	andpl.w	r2, r2, #15
 80201cc:	1112      	asrmi	r2, r2, #4
 80201ce:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80201d2:	b2d2      	uxtb	r2, r2
 80201d4:	b1c2      	cbz	r2, 8020208 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 80201d6:	9d04      	ldr	r5, [sp, #16]
 80201d8:	436a      	muls	r2, r5
 80201da:	1c55      	adds	r5, r2, #1
 80201dc:	eb05 2222 	add.w	r2, r5, r2, asr #8
 80201e0:	4d2d      	ldr	r5, [pc, #180]	; (8020298 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 80201e2:	1212      	asrs	r2, r2, #8
 80201e4:	682e      	ldr	r6, [r5, #0]
 80201e6:	2aff      	cmp	r2, #255	; 0xff
 80201e8:	ea4f 2516 	mov.w	r5, r6, lsr #8
 80201ec:	d113      	bne.n	8020216 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 80201ee:	0972      	lsrs	r2, r6, #5
 80201f0:	f425 65ff 	bic.w	r5, r5, #2040	; 0x7f8
 80201f4:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 80201f8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80201fc:	f025 0507 	bic.w	r5, r5, #7
 8020200:	4315      	orrs	r5, r2
 8020202:	4335      	orrs	r5, r6
 8020204:	f824 5018 	strh.w	r5, [r4, r8, lsl #1]
 8020208:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802020a:	f108 0801 	add.w	r8, r8, #1
 802020e:	4410      	add	r0, r2
 8020210:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020212:	4411      	add	r1, r2
 8020214:	e7c9      	b.n	80201aa <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8020216:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 802021a:	fa1f fa82 	uxth.w	sl, r2
 802021e:	f3c6 4707 	ubfx	r7, r6, #16, #8
 8020222:	43d2      	mvns	r2, r2
 8020224:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8020228:	fb17 f70a 	smulbb	r7, r7, sl
 802022c:	b2d2      	uxtb	r2, r2
 802022e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8020232:	b2f6      	uxtb	r6, r6
 8020234:	b2ed      	uxtb	r5, r5
 8020236:	fb0c 7c02 	mla	ip, ip, r2, r7
 802023a:	ea4f 07ee 	mov.w	r7, lr, asr #3
 802023e:	fb16 f60a 	smulbb	r6, r6, sl
 8020242:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8020246:	fa1f fc8c 	uxth.w	ip, ip
 802024a:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 802024e:	fb15 f50a 	smulbb	r5, r5, sl
 8020252:	fa5f fe8e 	uxtb.w	lr, lr
 8020256:	fb0e 6602 	mla	r6, lr, r2, r6
 802025a:	fb07 5702 	mla	r7, r7, r2, r5
 802025e:	f10c 0201 	add.w	r2, ip, #1
 8020262:	b2b6      	uxth	r6, r6
 8020264:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8020268:	1c75      	adds	r5, r6, #1
 802026a:	b2bf      	uxth	r7, r7
 802026c:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8020270:	eb05 2516 	add.w	r5, r5, r6, lsr #8
 8020274:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8020278:	ea45 0c0c 	orr.w	ip, r5, ip
 802027c:	1c7d      	adds	r5, r7, #1
 802027e:	eb05 2517 	add.w	r5, r5, r7, lsr #8
 8020282:	096d      	lsrs	r5, r5, #5
 8020284:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8020288:	ea4c 0c05 	orr.w	ip, ip, r5
 802028c:	f824 c018 	strh.w	ip, [r4, r8, lsl #1]
 8020290:	e7ba      	b.n	8020208 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8020292:	b007      	add	sp, #28
 8020294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020298:	200177d4 	.word	0x200177d4

0802029c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802029c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80202a0:	b087      	sub	sp, #28
 80202a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80202a6:	f8df 8308 	ldr.w	r8, [pc, #776]	; 80205b0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 80202aa:	9815      	ldr	r0, [sp, #84]	; 0x54
 80202ac:	9101      	str	r1, [sp, #4]
 80202ae:	9205      	str	r2, [sp, #20]
 80202b0:	6841      	ldr	r1, [r0, #4]
 80202b2:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
 80202b6:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 80202ba:	fb01 2404 	mla	r4, r1, r4, r2
 80202be:	6802      	ldr	r2, [r0, #0]
 80202c0:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80202c4:	f8db 2008 	ldr.w	r2, [fp, #8]
 80202c8:	3201      	adds	r2, #1
 80202ca:	f022 0201 	bic.w	r2, r2, #1
 80202ce:	9202      	str	r2, [sp, #8]
 80202d0:	f8db 2000 	ldr.w	r2, [fp]
 80202d4:	9203      	str	r2, [sp, #12]
 80202d6:	9a01      	ldr	r2, [sp, #4]
 80202d8:	2a00      	cmp	r2, #0
 80202da:	dc03      	bgt.n	80202e4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80202dc:	9a05      	ldr	r2, [sp, #20]
 80202de:	2a00      	cmp	r2, #0
 80202e0:	f340 8162 	ble.w	80205a8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 80202e4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80202e6:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 80202ea:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80202ee:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80202f0:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
 80202f4:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 80202f8:	2b00      	cmp	r3, #0
 80202fa:	dd0e      	ble.n	802031a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 80202fc:	1402      	asrs	r2, r0, #16
 80202fe:	d405      	bmi.n	802030c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8020300:	42ba      	cmp	r2, r7
 8020302:	da03      	bge.n	802030c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8020304:	140a      	asrs	r2, r1, #16
 8020306:	d401      	bmi.n	802030c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8020308:	42b2      	cmp	r2, r6
 802030a:	db07      	blt.n	802031c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 802030c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802030e:	3b01      	subs	r3, #1
 8020310:	3402      	adds	r4, #2
 8020312:	4410      	add	r0, r2
 8020314:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020316:	4411      	add	r1, r2
 8020318:	e7ee      	b.n	80202f8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 802031a:	d017      	beq.n	802034c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 802031c:	1e5a      	subs	r2, r3, #1
 802031e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8020320:	fb05 0502 	mla	r5, r5, r2, r0
 8020324:	142d      	asrs	r5, r5, #16
 8020326:	d409      	bmi.n	802033c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8020328:	42bd      	cmp	r5, r7
 802032a:	da07      	bge.n	802033c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 802032c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802032e:	fb05 1202 	mla	r2, r5, r2, r1
 8020332:	1412      	asrs	r2, r2, #16
 8020334:	d402      	bmi.n	802033c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8020336:	42b2      	cmp	r2, r6
 8020338:	f2c0 80c3 	blt.w	80204c2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x226>
 802033c:	2500      	movs	r5, #0
 802033e:	195a      	adds	r2, r3, r5
 8020340:	2a00      	cmp	r2, #0
 8020342:	dc3f      	bgt.n	80203c4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8020344:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020348:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 802034c:	9b01      	ldr	r3, [sp, #4]
 802034e:	2b00      	cmp	r3, #0
 8020350:	f340 812a 	ble.w	80205a8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8020354:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020358:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802035a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802035e:	eeb0 6a62 	vmov.f32	s12, s5
 8020362:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8020366:	ee31 1a05 	vadd.f32	s2, s2, s10
 802036a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802036e:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8020372:	eeb0 6a43 	vmov.f32	s12, s6
 8020376:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802037a:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 802037e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020382:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020386:	ee77 2a62 	vsub.f32	s5, s14, s5
 802038a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802038e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020392:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020396:	ee12 2a90 	vmov	r2, s5
 802039a:	eef0 2a47 	vmov.f32	s5, s14
 802039e:	fb92 f3f3 	sdiv	r3, r2, r3
 80203a2:	ee13 2a10 	vmov	r2, s6
 80203a6:	9313      	str	r3, [sp, #76]	; 0x4c
 80203a8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80203aa:	eeb0 3a67 	vmov.f32	s6, s15
 80203ae:	fb92 f3f3 	sdiv	r3, r2, r3
 80203b2:	9314      	str	r3, [sp, #80]	; 0x50
 80203b4:	9b01      	ldr	r3, [sp, #4]
 80203b6:	9a05      	ldr	r2, [sp, #20]
 80203b8:	3b01      	subs	r3, #1
 80203ba:	9301      	str	r3, [sp, #4]
 80203bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80203be:	bf08      	it	eq
 80203c0:	4613      	moveq	r3, r2
 80203c2:	e788      	b.n	80202d6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 80203c4:	1406      	asrs	r6, r0, #16
 80203c6:	d42c      	bmi.n	8020422 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80203c8:	f8db 2008 	ldr.w	r2, [fp, #8]
 80203cc:	42b2      	cmp	r2, r6
 80203ce:	dd28      	ble.n	8020422 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80203d0:	140f      	asrs	r7, r1, #16
 80203d2:	d426      	bmi.n	8020422 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80203d4:	f8db 200c 	ldr.w	r2, [fp, #12]
 80203d8:	42ba      	cmp	r2, r7
 80203da:	dd22      	ble.n	8020422 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80203dc:	9a02      	ldr	r2, [sp, #8]
 80203de:	fb07 6602 	mla	r6, r7, r2, r6
 80203e2:	9f03      	ldr	r7, [sp, #12]
 80203e4:	0872      	lsrs	r2, r6, #1
 80203e6:	07f6      	lsls	r6, r6, #31
 80203e8:	5cba      	ldrb	r2, [r7, r2]
 80203ea:	bf54      	ite	pl
 80203ec:	f002 020f 	andpl.w	r2, r2, #15
 80203f0:	1112      	asrmi	r2, r2, #4
 80203f2:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80203f6:	b2d2      	uxtb	r2, r2
 80203f8:	2aff      	cmp	r2, #255	; 0xff
 80203fa:	d118      	bne.n	802042e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 80203fc:	f06f 0601 	mvn.w	r6, #1
 8020400:	f8d8 2000 	ldr.w	r2, [r8]
 8020404:	fb06 f705 	mul.w	r7, r6, r5
 8020408:	f2a6 76fe 	subw	r6, r6, #2046	; 0x7fe
 802040c:	ea06 2c12 	and.w	ip, r6, r2, lsr #8
 8020410:	0956      	lsrs	r6, r2, #5
 8020412:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8020416:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 802041a:	ea4c 0606 	orr.w	r6, ip, r6
 802041e:	4316      	orrs	r6, r2
 8020420:	53e6      	strh	r6, [r4, r7]
 8020422:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8020424:	3d01      	subs	r5, #1
 8020426:	4410      	add	r0, r2
 8020428:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802042a:	4411      	add	r1, r2
 802042c:	e787      	b.n	802033e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 802042e:	2a00      	cmp	r2, #0
 8020430:	d0f7      	beq.n	8020422 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8020432:	f06f 0601 	mvn.w	r6, #1
 8020436:	f8d8 c000 	ldr.w	ip, [r8]
 802043a:	fa1f f982 	uxth.w	r9, r2
 802043e:	43d2      	mvns	r2, r2
 8020440:	436e      	muls	r6, r5
 8020442:	f3cc 2a07 	ubfx	sl, ip, #8, #8
 8020446:	b2d2      	uxtb	r2, r2
 8020448:	f834 e006 	ldrh.w	lr, [r4, r6]
 802044c:	fb1a fa09 	smulbb	sl, sl, r9
 8020450:	9604      	str	r6, [sp, #16]
 8020452:	f3cc 4607 	ubfx	r6, ip, #16, #8
 8020456:	ea4f 272e 	mov.w	r7, lr, asr #8
 802045a:	fb16 f609 	smulbb	r6, r6, r9
 802045e:	fa5f fc8c 	uxtb.w	ip, ip
 8020462:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8020466:	fb1c fc09 	smulbb	ip, ip, r9
 802046a:	fb07 6702 	mla	r7, r7, r2, r6
 802046e:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8020472:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8020476:	b2bf      	uxth	r7, r7
 8020478:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 802047c:	fa5f fe8e 	uxtb.w	lr, lr
 8020480:	fb06 a602 	mla	r6, r6, r2, sl
 8020484:	fb0e cc02 	mla	ip, lr, r2, ip
 8020488:	1c7a      	adds	r2, r7, #1
 802048a:	b2b6      	uxth	r6, r6
 802048c:	fa1f fc8c 	uxth.w	ip, ip
 8020490:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8020494:	9a04      	ldr	r2, [sp, #16]
 8020496:	f10c 0a01 	add.w	sl, ip, #1
 802049a:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 802049e:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 80204a2:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80204a6:	ea4a 0707 	orr.w	r7, sl, r7
 80204aa:	f106 0a01 	add.w	sl, r6, #1
 80204ae:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 80204b2:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80204b6:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80204ba:	ea47 070a 	orr.w	r7, r7, sl
 80204be:	52a7      	strh	r7, [r4, r2]
 80204c0:	e7af      	b.n	8020422 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80204c2:	f04f 0e00 	mov.w	lr, #0
 80204c6:	eba3 020e 	sub.w	r2, r3, lr
 80204ca:	2a00      	cmp	r2, #0
 80204cc:	f77f af3a 	ble.w	8020344 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 80204d0:	1402      	asrs	r2, r0, #16
 80204d2:	9e02      	ldr	r6, [sp, #8]
 80204d4:	140d      	asrs	r5, r1, #16
 80204d6:	fb06 2505 	mla	r5, r6, r5, r2
 80204da:	9e03      	ldr	r6, [sp, #12]
 80204dc:	086a      	lsrs	r2, r5, #1
 80204de:	07ed      	lsls	r5, r5, #31
 80204e0:	5cb2      	ldrb	r2, [r6, r2]
 80204e2:	bf54      	ite	pl
 80204e4:	f002 020f 	andpl.w	r2, r2, #15
 80204e8:	1112      	asrmi	r2, r2, #4
 80204ea:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80204ee:	b2d2      	uxtb	r2, r2
 80204f0:	2aff      	cmp	r2, #255	; 0xff
 80204f2:	d115      	bne.n	8020520 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 80204f4:	f8d8 5000 	ldr.w	r5, [r8]
 80204f8:	f6a2 02ff 	subw	r2, r2, #2303	; 0x8ff
 80204fc:	ea02 2615 	and.w	r6, r2, r5, lsr #8
 8020500:	096a      	lsrs	r2, r5, #5
 8020502:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8020506:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802050a:	4332      	orrs	r2, r6
 802050c:	432a      	orrs	r2, r5
 802050e:	f824 201e 	strh.w	r2, [r4, lr, lsl #1]
 8020512:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8020514:	f10e 0e01 	add.w	lr, lr, #1
 8020518:	4410      	add	r0, r2
 802051a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802051c:	4411      	add	r1, r2
 802051e:	e7d2      	b.n	80204c6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8020520:	2a00      	cmp	r2, #0
 8020522:	d0f6      	beq.n	8020512 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8020524:	f8d8 7000 	ldr.w	r7, [r8]
 8020528:	fa1f f982 	uxth.w	r9, r2
 802052c:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 8020530:	43d2      	mvns	r2, r2
 8020532:	f3c7 4507 	ubfx	r5, r7, #16, #8
 8020536:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 802053a:	ea4f 262c 	mov.w	r6, ip, asr #8
 802053e:	fb15 f509 	smulbb	r5, r5, r9
 8020542:	b2d2      	uxtb	r2, r2
 8020544:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8020548:	b2ff      	uxtb	r7, r7
 802054a:	fb1a fa09 	smulbb	sl, sl, r9
 802054e:	fb06 5602 	mla	r6, r6, r2, r5
 8020552:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8020556:	fb17 f709 	smulbb	r7, r7, r9
 802055a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802055e:	b2b6      	uxth	r6, r6
 8020560:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8020564:	fa5f fc8c 	uxtb.w	ip, ip
 8020568:	fb05 a502 	mla	r5, r5, r2, sl
 802056c:	fb0c 7702 	mla	r7, ip, r2, r7
 8020570:	1c72      	adds	r2, r6, #1
 8020572:	b2ad      	uxth	r5, r5
 8020574:	b2bf      	uxth	r7, r7
 8020576:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 802057a:	f107 0a01 	add.w	sl, r7, #1
 802057e:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 8020582:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 8020586:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 802058a:	ea4a 0606 	orr.w	r6, sl, r6
 802058e:	f105 0a01 	add.w	sl, r5, #1
 8020592:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8020596:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 802059a:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 802059e:	ea46 060a 	orr.w	r6, r6, sl
 80205a2:	f824 601e 	strh.w	r6, [r4, lr, lsl #1]
 80205a6:	e7b4      	b.n	8020512 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 80205a8:	b007      	add	sp, #28
 80205aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80205ae:	bf00      	nop
 80205b0:	200177d4 	.word	0x200177d4

080205b4 <_ZN8touchgfx8LCD16bppD1Ev>:
 80205b4:	4770      	bx	lr

080205b6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 80205b6:	4770      	bx	lr

080205b8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 80205b8:	4770      	bx	lr

080205ba <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 80205ba:	4770      	bx	lr

080205bc <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 80205bc:	4770      	bx	lr

080205be <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 80205be:	4770      	bx	lr

080205c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 80205c0:	4770      	bx	lr

080205c2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 80205c2:	4770      	bx	lr

080205c4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 80205c4:	4770      	bx	lr

080205c6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 80205c6:	4770      	bx	lr

080205c8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 80205c8:	4770      	bx	lr

080205ca <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 80205ca:	4770      	bx	lr

080205cc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
 80205cc:	4770      	bx	lr

080205ce <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 80205ce:	4770      	bx	lr

080205d0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 80205d0:	4770      	bx	lr

080205d2 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 80205d2:	4770      	bx	lr

080205d4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
 80205d4:	4770      	bx	lr

080205d6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 80205d6:	4770      	bx	lr

080205d8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 80205d8:	4770      	bx	lr

080205da <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 80205da:	4770      	bx	lr

080205dc <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 80205dc:	4770      	bx	lr

080205de <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 80205de:	4770      	bx	lr

080205e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 80205e0:	4770      	bx	lr

080205e2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 80205e2:	4770      	bx	lr

080205e4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 80205e4:	4770      	bx	lr

080205e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 80205e6:	4770      	bx	lr

080205e8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 80205e8:	4770      	bx	lr

080205ea <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 80205ea:	4770      	bx	lr

080205ec <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 80205ec:	4770      	bx	lr

080205ee <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 80205ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80205f2:	b088      	sub	sp, #32
 80205f4:	4606      	mov	r6, r0
 80205f6:	4688      	mov	r8, r1
 80205f8:	4691      	mov	r9, r2
 80205fa:	ac08      	add	r4, sp, #32
 80205fc:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 8020600:	4620      	mov	r0, r4
 8020602:	f7fd fc65 	bl	801ded0 <_ZNK8touchgfx6Bitmap7getDataEv>
 8020606:	6833      	ldr	r3, [r6, #0]
 8020608:	4605      	mov	r5, r0
 802060a:	4620      	mov	r0, r4
 802060c:	699f      	ldr	r7, [r3, #24]
 802060e:	f7fd fb73 	bl	801dcf8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8020612:	4682      	mov	sl, r0
 8020614:	4620      	mov	r0, r4
 8020616:	f7fd fba3 	bl	801dd60 <_ZNK8touchgfx6Bitmap9getHeightEv>
 802061a:	9500      	str	r5, [sp, #0]
 802061c:	464b      	mov	r3, r9
 802061e:	4642      	mov	r2, r8
 8020620:	4631      	mov	r1, r6
 8020622:	e9cd a001 	strd	sl, r0, [sp, #4]
 8020626:	a806      	add	r0, sp, #24
 8020628:	47b8      	blx	r7
 802062a:	4628      	mov	r0, r5
 802062c:	b008      	add	sp, #32
 802062e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08020634 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 8020634:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8020638:	2300      	movs	r3, #0
 802063a:	9300      	str	r3, [sp, #0]
 802063c:	4b3d      	ldr	r3, [pc, #244]	; (8020734 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x100>)
 802063e:	781b      	ldrb	r3, [r3, #0]
 8020640:	2b00      	cmp	r3, #0
 8020642:	d137      	bne.n	80206b4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x80>
 8020644:	4a3c      	ldr	r2, [pc, #240]	; (8020738 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 8020646:	f9b2 2000 	ldrsh.w	r2, [r2]
 802064a:	f8ad 2004 	strh.w	r2, [sp, #4]
 802064e:	2b00      	cmp	r3, #0
 8020650:	d132      	bne.n	80206b8 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x84>
 8020652:	4b3a      	ldr	r3, [pc, #232]	; (802073c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 8020654:	f9b3 3000 	ldrsh.w	r3, [r3]
 8020658:	ac02      	add	r4, sp, #8
 802065a:	6808      	ldr	r0, [r1, #0]
 802065c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8020660:	ab02      	add	r3, sp, #8
 8020662:	6849      	ldr	r1, [r1, #4]
 8020664:	4d36      	ldr	r5, [pc, #216]	; (8020740 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x10c>)
 8020666:	c303      	stmia	r3!, {r0, r1}
 8020668:	4669      	mov	r1, sp
 802066a:	4620      	mov	r0, r4
 802066c:	f7fa fce2 	bl	801b034 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020670:	4668      	mov	r0, sp
 8020672:	f7fa fc9b 	bl	801afac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020676:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 802067a:	f8bd 2000 	ldrh.w	r2, [sp]
 802067e:	462f      	mov	r7, r5
 8020680:	6828      	ldr	r0, [r5, #0]
 8020682:	4413      	add	r3, r2
 8020684:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8020688:	f8ad 3008 	strh.w	r3, [sp, #8]
 802068c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8020690:	4413      	add	r3, r2
 8020692:	f8ad 300a 	strh.w	r3, [sp, #10]
 8020696:	6803      	ldr	r3, [r0, #0]
 8020698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802069a:	4798      	blx	r3
 802069c:	f010 0f01 	tst.w	r0, #1
 80206a0:	d00c      	beq.n	80206bc <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x88>
 80206a2:	6828      	ldr	r0, [r5, #0]
 80206a4:	6803      	ldr	r3, [r0, #0]
 80206a6:	e894 0006 	ldmia.w	r4, {r1, r2}
 80206aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80206ac:	4798      	blx	r3
 80206ae:	b004      	add	sp, #16
 80206b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80206b4:	4a21      	ldr	r2, [pc, #132]	; (802073c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 80206b6:	e7c6      	b.n	8020646 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 80206b8:	4b1f      	ldr	r3, [pc, #124]	; (8020738 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 80206ba:	e7cb      	b.n	8020654 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 80206bc:	6838      	ldr	r0, [r7, #0]
 80206be:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 80206c2:	6803      	ldr	r3, [r0, #0]
 80206c4:	f9bd 500e 	ldrsh.w	r5, [sp, #14]
 80206c8:	ea4f 0848 	mov.w	r8, r8, lsl #1
 80206cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80206ce:	4798      	blx	r3
 80206d0:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 80206d4:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80206d8:	f8bd 6004 	ldrh.w	r6, [sp, #4]
 80206dc:	fb16 3602 	smlabb	r6, r6, r2, r3
 80206e0:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 80206e4:	6838      	ldr	r0, [r7, #0]
 80206e6:	6803      	ldr	r3, [r0, #0]
 80206e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80206ea:	4798      	blx	r3
 80206ec:	4a12      	ldr	r2, [pc, #72]	; (8020738 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 80206ee:	f9bd 400a 	ldrsh.w	r4, [sp, #10]
 80206f2:	8813      	ldrh	r3, [r2, #0]
 80206f4:	4691      	mov	r9, r2
 80206f6:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 80206fa:	435d      	muls	r5, r3
 80206fc:	fb03 1404 	mla	r4, r3, r4, r1
 8020700:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8020704:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 8020708:	6838      	ldr	r0, [r7, #0]
 802070a:	42ac      	cmp	r4, r5
 802070c:	6803      	ldr	r3, [r0, #0]
 802070e:	d20e      	bcs.n	802072e <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xfa>
 8020710:	f8d3 a034 	ldr.w	sl, [r3, #52]	; 0x34
 8020714:	4632      	mov	r2, r6
 8020716:	4643      	mov	r3, r8
 8020718:	4621      	mov	r1, r4
 802071a:	47d0      	blx	sl
 802071c:	f8b9 3000 	ldrh.w	r3, [r9]
 8020720:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8020724:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8020728:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 802072c:	e7ec      	b.n	8020708 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd4>
 802072e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020730:	4798      	blx	r3
 8020732:	e7bc      	b.n	80206ae <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 8020734:	200177bc 	.word	0x200177bc
 8020738:	200177be 	.word	0x200177be
 802073c:	200177c0 	.word	0x200177c0
 8020740:	200177c4 	.word	0x200177c4

08020744 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 8020744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020748:	b08b      	sub	sp, #44	; 0x2c
 802074a:	460f      	mov	r7, r1
 802074c:	4616      	mov	r6, r2
 802074e:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
 8020752:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 8020756:	f1bb 0f00 	cmp.w	fp, #0
 802075a:	d049      	beq.n	80207f0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 802075c:	6810      	ldr	r0, [r2, #0]
 802075e:	ad06      	add	r5, sp, #24
 8020760:	6851      	ldr	r1, [r2, #4]
 8020762:	c503      	stmia	r5!, {r0, r1}
 8020764:	6818      	ldr	r0, [r3, #0]
 8020766:	ad08      	add	r5, sp, #32
 8020768:	6859      	ldr	r1, [r3, #4]
 802076a:	c503      	stmia	r5!, {r0, r1}
 802076c:	a806      	add	r0, sp, #24
 802076e:	f7fa fc1d 	bl	801afac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020772:	4631      	mov	r1, r6
 8020774:	a808      	add	r0, sp, #32
 8020776:	f7fa fc5d 	bl	801b034 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802077a:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 802077e:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8020782:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 8020786:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 802078a:	fb16 2103 	smlabb	r1, r6, r3, r2
 802078e:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 8020792:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 8020796:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 802079a:	4f5f      	ldr	r7, [pc, #380]	; (8020918 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 802079c:	440a      	add	r2, r1
 802079e:	6838      	ldr	r0, [r7, #0]
 80207a0:	46b9      	mov	r9, r7
 80207a2:	f8ad 2020 	strh.w	r2, [sp, #32]
 80207a6:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80207aa:	4413      	add	r3, r2
 80207ac:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80207b0:	6803      	ldr	r3, [r0, #0]
 80207b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80207b4:	4798      	blx	r3
 80207b6:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 80207ba:	d01c      	beq.n	80207f6 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 80207bc:	f010 0f04 	tst.w	r0, #4
 80207c0:	d01d      	beq.n	80207fe <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 80207c2:	f8d9 0000 	ldr.w	r0, [r9]
 80207c6:	2700      	movs	r7, #0
 80207c8:	b2ad      	uxth	r5, r5
 80207ca:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 80207ce:	6801      	ldr	r1, [r0, #0]
 80207d0:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80207d4:	f8cd b00c 	str.w	fp, [sp, #12]
 80207d8:	9501      	str	r5, [sp, #4]
 80207da:	e9cd 4704 	strd	r4, r7, [sp, #16]
 80207de:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 80207e2:	9402      	str	r4, [sp, #8]
 80207e4:	fa1f f488 	uxth.w	r4, r8
 80207e8:	9400      	str	r4, [sp, #0]
 80207ea:	6c4c      	ldr	r4, [r1, #68]	; 0x44
 80207ec:	4631      	mov	r1, r6
 80207ee:	47a0      	blx	r4
 80207f0:	b00b      	add	sp, #44	; 0x2c
 80207f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80207f6:	b914      	cbnz	r4, 80207fe <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 80207f8:	f010 0f01 	tst.w	r0, #1
 80207fc:	e7e0      	b.n	80207c0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7c>
 80207fe:	f8d9 0000 	ldr.w	r0, [r9]
 8020802:	ea4f 0748 	mov.w	r7, r8, lsl #1
 8020806:	6803      	ldr	r3, [r0, #0]
 8020808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802080a:	4798      	blx	r3
 802080c:	4b43      	ldr	r3, [pc, #268]	; (802091c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>)
 802080e:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 8020812:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8020816:	881a      	ldrh	r2, [r3, #0]
 8020818:	469a      	mov	sl, r3
 802081a:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 802081e:	fb05 f502 	mul.w	r5, r5, r2
 8020822:	fb02 1404 	mla	r4, r2, r4, r1
 8020826:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 802082a:	d059      	beq.n	80208e0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>
 802082c:	f1cb 09ff 	rsb	r9, fp, #255	; 0xff
 8020830:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 8020834:	fa1f f28b 	uxth.w	r2, fp
 8020838:	469e      	mov	lr, r3
 802083a:	fa1f f989 	uxth.w	r9, r9
 802083e:	42ac      	cmp	r4, r5
 8020840:	d264      	bcs.n	802090c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 8020842:	eb04 0a07 	add.w	sl, r4, r7
 8020846:	4554      	cmp	r4, sl
 8020848:	d23d      	bcs.n	80208c6 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x182>
 802084a:	8821      	ldrh	r1, [r4, #0]
 802084c:	f836 3b02 	ldrh.w	r3, [r6], #2
 8020850:	1208      	asrs	r0, r1, #8
 8020852:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8020856:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802085a:	ea4f 0be1 	mov.w	fp, r1, asr #3
 802085e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8020862:	00c9      	lsls	r1, r1, #3
 8020864:	fb10 f009 	smulbb	r0, r0, r9
 8020868:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 802086c:	b2c9      	uxtb	r1, r1
 802086e:	fb0c 0c02 	mla	ip, ip, r2, r0
 8020872:	10d8      	asrs	r0, r3, #3
 8020874:	fb1b fb09 	smulbb	fp, fp, r9
 8020878:	00db      	lsls	r3, r3, #3
 802087a:	fa1f fc8c 	uxth.w	ip, ip
 802087e:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8020882:	fb11 f109 	smulbb	r1, r1, r9
 8020886:	b2db      	uxtb	r3, r3
 8020888:	fb00 b002 	mla	r0, r0, r2, fp
 802088c:	f10c 0b01 	add.w	fp, ip, #1
 8020890:	fb03 1302 	mla	r3, r3, r2, r1
 8020894:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 8020898:	b29b      	uxth	r3, r3
 802089a:	b280      	uxth	r0, r0
 802089c:	f40c 4b78 	and.w	fp, ip, #63488	; 0xf800
 80208a0:	f103 0c01 	add.w	ip, r3, #1
 80208a4:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 80208a8:	1c43      	adds	r3, r0, #1
 80208aa:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80208ae:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 80208b2:	0940      	lsrs	r0, r0, #5
 80208b4:	ea4c 0c0b 	orr.w	ip, ip, fp
 80208b8:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80208bc:	ea4c 0c00 	orr.w	ip, ip, r0
 80208c0:	f824 cb02 	strh.w	ip, [r4], #2
 80208c4:	e7bf      	b.n	8020846 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x102>
 80208c6:	f8be 3000 	ldrh.w	r3, [lr]
 80208ca:	eba3 0308 	sub.w	r3, r3, r8
 80208ce:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80208d2:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80208d6:	eba3 0308 	sub.w	r3, r3, r8
 80208da:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 80208de:	e7ae      	b.n	802083e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
 80208e0:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 80208e4:	f8d9 0000 	ldr.w	r0, [r9]
 80208e8:	42ac      	cmp	r4, r5
 80208ea:	6803      	ldr	r3, [r0, #0]
 80208ec:	d20e      	bcs.n	802090c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 80208ee:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 80208f2:	4632      	mov	r2, r6
 80208f4:	463b      	mov	r3, r7
 80208f6:	4621      	mov	r1, r4
 80208f8:	47c0      	blx	r8
 80208fa:	f8ba 3000 	ldrh.w	r3, [sl]
 80208fe:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8020902:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8020906:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 802090a:	e7eb      	b.n	80208e4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 802090c:	4b02      	ldr	r3, [pc, #8]	; (8020918 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 802090e:	6818      	ldr	r0, [r3, #0]
 8020910:	6803      	ldr	r3, [r0, #0]
 8020912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020914:	4798      	blx	r3
 8020916:	e76b      	b.n	80207f0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 8020918:	200177c4 	.word	0x200177c4
 802091c:	200177be 	.word	0x200177be

08020920 <_ZN8touchgfx8LCD16bppD0Ev>:
 8020920:	b510      	push	{r4, lr}
 8020922:	4604      	mov	r4, r0
 8020924:	2178      	movs	r1, #120	; 0x78
 8020926:	f009 fbb7 	bl	802a098 <_ZdlPvj>
 802092a:	4620      	mov	r0, r4
 802092c:	bd10      	pop	{r4, pc}

0802092e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 802092e:	b510      	push	{r4, lr}
 8020930:	4604      	mov	r4, r0
 8020932:	2104      	movs	r1, #4
 8020934:	f009 fbb0 	bl	802a098 <_ZdlPvj>
 8020938:	4620      	mov	r0, r4
 802093a:	bd10      	pop	{r4, pc}

0802093c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 802093c:	b510      	push	{r4, lr}
 802093e:	4604      	mov	r4, r0
 8020940:	2104      	movs	r1, #4
 8020942:	f009 fba9 	bl	802a098 <_ZdlPvj>
 8020946:	4620      	mov	r0, r4
 8020948:	bd10      	pop	{r4, pc}

0802094a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 802094a:	b510      	push	{r4, lr}
 802094c:	4604      	mov	r4, r0
 802094e:	2104      	movs	r1, #4
 8020950:	f009 fba2 	bl	802a098 <_ZdlPvj>
 8020954:	4620      	mov	r0, r4
 8020956:	bd10      	pop	{r4, pc}

08020958 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 8020958:	b510      	push	{r4, lr}
 802095a:	4604      	mov	r4, r0
 802095c:	2104      	movs	r1, #4
 802095e:	f009 fb9b 	bl	802a098 <_ZdlPvj>
 8020962:	4620      	mov	r0, r4
 8020964:	bd10      	pop	{r4, pc}

08020966 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8020966:	b510      	push	{r4, lr}
 8020968:	4604      	mov	r4, r0
 802096a:	2104      	movs	r1, #4
 802096c:	f009 fb94 	bl	802a098 <_ZdlPvj>
 8020970:	4620      	mov	r0, r4
 8020972:	bd10      	pop	{r4, pc}

08020974 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8020974:	b510      	push	{r4, lr}
 8020976:	4604      	mov	r4, r0
 8020978:	2104      	movs	r1, #4
 802097a:	f009 fb8d 	bl	802a098 <_ZdlPvj>
 802097e:	4620      	mov	r0, r4
 8020980:	bd10      	pop	{r4, pc}

08020982 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8020982:	b510      	push	{r4, lr}
 8020984:	4604      	mov	r4, r0
 8020986:	2104      	movs	r1, #4
 8020988:	f009 fb86 	bl	802a098 <_ZdlPvj>
 802098c:	4620      	mov	r0, r4
 802098e:	bd10      	pop	{r4, pc}

08020990 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8020990:	b510      	push	{r4, lr}
 8020992:	4604      	mov	r4, r0
 8020994:	2104      	movs	r1, #4
 8020996:	f009 fb7f 	bl	802a098 <_ZdlPvj>
 802099a:	4620      	mov	r0, r4
 802099c:	bd10      	pop	{r4, pc}

0802099e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 802099e:	b510      	push	{r4, lr}
 80209a0:	4604      	mov	r4, r0
 80209a2:	2104      	movs	r1, #4
 80209a4:	f009 fb78 	bl	802a098 <_ZdlPvj>
 80209a8:	4620      	mov	r0, r4
 80209aa:	bd10      	pop	{r4, pc}

080209ac <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 80209ac:	b510      	push	{r4, lr}
 80209ae:	4604      	mov	r4, r0
 80209b0:	2104      	movs	r1, #4
 80209b2:	f009 fb71 	bl	802a098 <_ZdlPvj>
 80209b6:	4620      	mov	r0, r4
 80209b8:	bd10      	pop	{r4, pc}

080209ba <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 80209ba:	b510      	push	{r4, lr}
 80209bc:	4604      	mov	r4, r0
 80209be:	2104      	movs	r1, #4
 80209c0:	f009 fb6a 	bl	802a098 <_ZdlPvj>
 80209c4:	4620      	mov	r0, r4
 80209c6:	bd10      	pop	{r4, pc}

080209c8 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 80209c8:	b510      	push	{r4, lr}
 80209ca:	4604      	mov	r4, r0
 80209cc:	2104      	movs	r1, #4
 80209ce:	f009 fb63 	bl	802a098 <_ZdlPvj>
 80209d2:	4620      	mov	r0, r4
 80209d4:	bd10      	pop	{r4, pc}

080209d6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 80209d6:	b510      	push	{r4, lr}
 80209d8:	4604      	mov	r4, r0
 80209da:	2104      	movs	r1, #4
 80209dc:	f009 fb5c 	bl	802a098 <_ZdlPvj>
 80209e0:	4620      	mov	r0, r4
 80209e2:	bd10      	pop	{r4, pc}

080209e4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 80209e4:	b510      	push	{r4, lr}
 80209e6:	4604      	mov	r4, r0
 80209e8:	2104      	movs	r1, #4
 80209ea:	f009 fb55 	bl	802a098 <_ZdlPvj>
 80209ee:	4620      	mov	r0, r4
 80209f0:	bd10      	pop	{r4, pc}

080209f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 80209f2:	b510      	push	{r4, lr}
 80209f4:	4604      	mov	r4, r0
 80209f6:	2104      	movs	r1, #4
 80209f8:	f009 fb4e 	bl	802a098 <_ZdlPvj>
 80209fc:	4620      	mov	r0, r4
 80209fe:	bd10      	pop	{r4, pc}

08020a00 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8020a00:	b510      	push	{r4, lr}
 8020a02:	4604      	mov	r4, r0
 8020a04:	2104      	movs	r1, #4
 8020a06:	f009 fb47 	bl	802a098 <_ZdlPvj>
 8020a0a:	4620      	mov	r0, r4
 8020a0c:	bd10      	pop	{r4, pc}

08020a0e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 8020a0e:	b510      	push	{r4, lr}
 8020a10:	4604      	mov	r4, r0
 8020a12:	2104      	movs	r1, #4
 8020a14:	f009 fb40 	bl	802a098 <_ZdlPvj>
 8020a18:	4620      	mov	r0, r4
 8020a1a:	bd10      	pop	{r4, pc}

08020a1c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 8020a1c:	b510      	push	{r4, lr}
 8020a1e:	4604      	mov	r4, r0
 8020a20:	2104      	movs	r1, #4
 8020a22:	f009 fb39 	bl	802a098 <_ZdlPvj>
 8020a26:	4620      	mov	r0, r4
 8020a28:	bd10      	pop	{r4, pc}

08020a2a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8020a2a:	b510      	push	{r4, lr}
 8020a2c:	4604      	mov	r4, r0
 8020a2e:	2104      	movs	r1, #4
 8020a30:	f009 fb32 	bl	802a098 <_ZdlPvj>
 8020a34:	4620      	mov	r0, r4
 8020a36:	bd10      	pop	{r4, pc}

08020a38 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
 8020a38:	b510      	push	{r4, lr}
 8020a3a:	4604      	mov	r4, r0
 8020a3c:	2104      	movs	r1, #4
 8020a3e:	f009 fb2b 	bl	802a098 <_ZdlPvj>
 8020a42:	4620      	mov	r0, r4
 8020a44:	bd10      	pop	{r4, pc}

08020a46 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8020a46:	b510      	push	{r4, lr}
 8020a48:	4604      	mov	r4, r0
 8020a4a:	2104      	movs	r1, #4
 8020a4c:	f009 fb24 	bl	802a098 <_ZdlPvj>
 8020a50:	4620      	mov	r0, r4
 8020a52:	bd10      	pop	{r4, pc}

08020a54 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8020a54:	b510      	push	{r4, lr}
 8020a56:	4604      	mov	r4, r0
 8020a58:	2104      	movs	r1, #4
 8020a5a:	f009 fb1d 	bl	802a098 <_ZdlPvj>
 8020a5e:	4620      	mov	r0, r4
 8020a60:	bd10      	pop	{r4, pc}

08020a62 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8020a62:	b510      	push	{r4, lr}
 8020a64:	4604      	mov	r4, r0
 8020a66:	2104      	movs	r1, #4
 8020a68:	f009 fb16 	bl	802a098 <_ZdlPvj>
 8020a6c:	4620      	mov	r0, r4
 8020a6e:	bd10      	pop	{r4, pc}

08020a70 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8020a70:	b510      	push	{r4, lr}
 8020a72:	4604      	mov	r4, r0
 8020a74:	2104      	movs	r1, #4
 8020a76:	f009 fb0f 	bl	802a098 <_ZdlPvj>
 8020a7a:	4620      	mov	r0, r4
 8020a7c:	bd10      	pop	{r4, pc}

08020a7e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 8020a7e:	b510      	push	{r4, lr}
 8020a80:	4604      	mov	r4, r0
 8020a82:	2104      	movs	r1, #4
 8020a84:	f009 fb08 	bl	802a098 <_ZdlPvj>
 8020a88:	4620      	mov	r0, r4
 8020a8a:	bd10      	pop	{r4, pc}

08020a8c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 8020a8c:	b510      	push	{r4, lr}
 8020a8e:	4604      	mov	r4, r0
 8020a90:	2104      	movs	r1, #4
 8020a92:	f009 fb01 	bl	802a098 <_ZdlPvj>
 8020a96:	4620      	mov	r0, r4
 8020a98:	bd10      	pop	{r4, pc}

08020a9a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 8020a9a:	b510      	push	{r4, lr}
 8020a9c:	4604      	mov	r4, r0
 8020a9e:	2104      	movs	r1, #4
 8020aa0:	f009 fafa 	bl	802a098 <_ZdlPvj>
 8020aa4:	4620      	mov	r0, r4
 8020aa6:	bd10      	pop	{r4, pc}

08020aa8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 8020aa8:	b510      	push	{r4, lr}
 8020aaa:	4604      	mov	r4, r0
 8020aac:	2104      	movs	r1, #4
 8020aae:	f009 faf3 	bl	802a098 <_ZdlPvj>
 8020ab2:	4620      	mov	r0, r4
 8020ab4:	bd10      	pop	{r4, pc}
	...

08020ab8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 8020ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020abc:	b091      	sub	sp, #68	; 0x44
 8020abe:	469b      	mov	fp, r3
 8020ac0:	4616      	mov	r6, r2
 8020ac2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8020ac6:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8020aca:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8020ace:	f9bd 906c 	ldrsh.w	r9, [sp, #108]	; 0x6c
 8020ad2:	4604      	mov	r4, r0
 8020ad4:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	; 0x70
 8020ad8:	4640      	mov	r0, r8
 8020ada:	460d      	mov	r5, r1
 8020adc:	4659      	mov	r1, fp
 8020ade:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8020ae2:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8020ae6:	f8ad 902c 	strh.w	r9, [sp, #44]	; 0x2c
 8020aea:	f8ad 702e 	strh.w	r7, [sp, #46]	; 0x2e
 8020aee:	f7f6 fd51 	bl	8017594 <_ZN8touchgfx4RectaNERKS0_>
 8020af2:	4631      	mov	r1, r6
 8020af4:	4640      	mov	r0, r8
 8020af6:	f7f6 fd4d 	bl	8017594 <_ZN8touchgfx4RectaNERKS0_>
 8020afa:	4b74      	ldr	r3, [pc, #464]	; (8020ccc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x214>)
 8020afc:	8818      	ldrh	r0, [r3, #0]
 8020afe:	4b74      	ldr	r3, [pc, #464]	; (8020cd0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x218>)
 8020b00:	b202      	sxth	r2, r0
 8020b02:	8819      	ldrh	r1, [r3, #0]
 8020b04:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8020b08:	b20e      	sxth	r6, r1
 8020b0a:	2b00      	cmp	r3, #0
 8020b0c:	da07      	bge.n	8020b1e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x66>
 8020b0e:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 8020b12:	4463      	add	r3, ip
 8020b14:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 8020b18:	2300      	movs	r3, #0
 8020b1a:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 8020b1e:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8020b22:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 8020b26:	1ad2      	subs	r2, r2, r3
 8020b28:	4594      	cmp	ip, r2
 8020b2a:	bfc4      	itt	gt
 8020b2c:	1ac2      	subgt	r2, r0, r3
 8020b2e:	f8ad 202c 	strhgt.w	r2, [sp, #44]	; 0x2c
 8020b32:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 8020b36:	2a00      	cmp	r2, #0
 8020b38:	da07      	bge.n	8020b4a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x92>
 8020b3a:	f8bd c02e 	ldrh.w	ip, [sp, #46]	; 0x2e
 8020b3e:	4462      	add	r2, ip
 8020b40:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 8020b44:	2200      	movs	r2, #0
 8020b46:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 8020b4a:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	; 0x2a
 8020b4e:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 8020b52:	eba6 060a 	sub.w	r6, r6, sl
 8020b56:	42b2      	cmp	r2, r6
 8020b58:	bfc4      	itt	gt
 8020b5a:	eba1 020a 	subgt.w	r2, r1, sl
 8020b5e:	f8ad 202e 	strhgt.w	r2, [sp, #46]	; 0x2e
 8020b62:	4a5c      	ldr	r2, [pc, #368]	; (8020cd4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x21c>)
 8020b64:	7812      	ldrb	r2, [r2, #0]
 8020b66:	b9a2      	cbnz	r2, 8020b92 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xda>
 8020b68:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 8020b6c:	4286      	cmp	r6, r0
 8020b6e:	4640      	mov	r0, r8
 8020b70:	9303      	str	r3, [sp, #12]
 8020b72:	bf14      	ite	ne
 8020b74:	2600      	movne	r6, #0
 8020b76:	2601      	moveq	r6, #1
 8020b78:	f7f6 fd4f 	bl	801761a <_ZNK8touchgfx4Rect7isEmptyEv>
 8020b7c:	9b03      	ldr	r3, [sp, #12]
 8020b7e:	b160      	cbz	r0, 8020b9a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xe2>
 8020b80:	2300      	movs	r3, #0
 8020b82:	8023      	strh	r3, [r4, #0]
 8020b84:	8063      	strh	r3, [r4, #2]
 8020b86:	80a3      	strh	r3, [r4, #4]
 8020b88:	4620      	mov	r0, r4
 8020b8a:	80e3      	strh	r3, [r4, #6]
 8020b8c:	b011      	add	sp, #68	; 0x44
 8020b8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020b92:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 8020b96:	428e      	cmp	r6, r1
 8020b98:	e7e9      	b.n	8020b6e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb6>
 8020b9a:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 8020b9e:	a90e      	add	r1, sp, #56	; 0x38
 8020ba0:	900e      	str	r0, [sp, #56]	; 0x38
 8020ba2:	a80c      	add	r0, sp, #48	; 0x30
 8020ba4:	9205      	str	r2, [sp, #20]
 8020ba6:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 8020baa:	f8ad 903c 	strh.w	r9, [sp, #60]	; 0x3c
 8020bae:	9206      	str	r2, [sp, #24]
 8020bb0:	f8bb 2000 	ldrh.w	r2, [fp]
 8020bb4:	f8ad 703e 	strh.w	r7, [sp, #62]	; 0x3e
 8020bb8:	1a9b      	subs	r3, r3, r2
 8020bba:	b21b      	sxth	r3, r3
 8020bbc:	9303      	str	r3, [sp, #12]
 8020bbe:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8020bc2:	f8df b118 	ldr.w	fp, [pc, #280]	; 8020cdc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 8020bc6:	ebaa 0a03 	sub.w	sl, sl, r3
 8020bca:	fa0f f38a 	sxth.w	r3, sl
 8020bce:	9304      	str	r3, [sp, #16]
 8020bd0:	9b03      	ldr	r3, [sp, #12]
 8020bd2:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 8020bd6:	9b04      	ldr	r3, [sp, #16]
 8020bd8:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8020bdc:	9b05      	ldr	r3, [sp, #20]
 8020bde:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8020be2:	9b06      	ldr	r3, [sp, #24]
 8020be4:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8020be8:	f7fa fa24 	bl	801b034 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020bec:	4640      	mov	r0, r8
 8020bee:	f7fa f9dd 	bl	801afac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020bf2:	a80e      	add	r0, sp, #56	; 0x38
 8020bf4:	f7fa f9da 	bl	801afac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020bf8:	4b37      	ldr	r3, [pc, #220]	; (8020cd8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 8020bfa:	4628      	mov	r0, r5
 8020bfc:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 8020c00:	881b      	ldrh	r3, [r3, #0]
 8020c02:	9307      	str	r3, [sp, #28]
 8020c04:	682b      	ldr	r3, [r5, #0]
 8020c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c08:	4798      	blx	r3
 8020c0a:	f8bd 5032 	ldrh.w	r5, [sp, #50]	; 0x32
 8020c0e:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8020c12:	4681      	mov	r9, r0
 8020c14:	f8db 0000 	ldr.w	r0, [fp]
 8020c18:	fb1a 3305 	smlabb	r3, sl, r5, r3
 8020c1c:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8020c1e:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 8020c22:	6803      	ldr	r3, [r0, #0]
 8020c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020c26:	4798      	blx	r3
 8020c28:	4607      	mov	r7, r0
 8020c2a:	f8db 0000 	ldr.w	r0, [fp]
 8020c2e:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 8020c32:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 8020c36:	6803      	ldr	r3, [r0, #0]
 8020c38:	9109      	str	r1, [sp, #36]	; 0x24
 8020c3a:	9208      	str	r2, [sp, #32]
 8020c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020c3e:	4798      	blx	r3
 8020c40:	f010 0f01 	tst.w	r0, #1
 8020c44:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8020c48:	d012      	beq.n	8020c70 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b8>
 8020c4a:	f8db 0000 	ldr.w	r0, [fp]
 8020c4e:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 8020c52:	6803      	ldr	r3, [r0, #0]
 8020c54:	9200      	str	r2, [sp, #0]
 8020c56:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 8020c58:	462b      	mov	r3, r5
 8020c5a:	e898 0006 	ldmia.w	r8, {r1, r2}
 8020c5e:	47b0      	blx	r6
 8020c60:	9b03      	ldr	r3, [sp, #12]
 8020c62:	8023      	strh	r3, [r4, #0]
 8020c64:	9b04      	ldr	r3, [sp, #16]
 8020c66:	8063      	strh	r3, [r4, #2]
 8020c68:	9b05      	ldr	r3, [sp, #20]
 8020c6a:	80a3      	strh	r3, [r4, #4]
 8020c6c:	9b06      	ldr	r3, [sp, #24]
 8020c6e:	e78b      	b.n	8020b88 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xd0>
 8020c70:	fb09 f202 	mul.w	r2, r9, r2
 8020c74:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 8020c78:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8020c7c:	440f      	add	r7, r1
 8020c7e:	b166      	cbz	r6, 8020c9a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 8020c80:	9a07      	ldr	r2, [sp, #28]
 8020c82:	4592      	cmp	sl, r2
 8020c84:	d109      	bne.n	8020c9a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 8020c86:	f8db 0000 	ldr.w	r0, [fp]
 8020c8a:	fb09 f303 	mul.w	r3, r9, r3
 8020c8e:	4629      	mov	r1, r5
 8020c90:	6802      	ldr	r2, [r0, #0]
 8020c92:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8020c94:	463a      	mov	r2, r7
 8020c96:	47b0      	blx	r6
 8020c98:	e7e2      	b.n	8020c60 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 8020c9a:	fb0a f303 	mul.w	r3, sl, r3
 8020c9e:	ea4f 064a 	mov.w	r6, sl, lsl #1
 8020ca2:	f8df b038 	ldr.w	fp, [pc, #56]	; 8020cdc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 8020ca6:	eb05 0843 	add.w	r8, r5, r3, lsl #1
 8020caa:	4545      	cmp	r5, r8
 8020cac:	d2d8      	bcs.n	8020c60 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 8020cae:	f8db 0000 	ldr.w	r0, [fp]
 8020cb2:	4629      	mov	r1, r5
 8020cb4:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8020cb8:	4435      	add	r5, r6
 8020cba:	6802      	ldr	r2, [r0, #0]
 8020cbc:	005b      	lsls	r3, r3, #1
 8020cbe:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 8020cc2:	463a      	mov	r2, r7
 8020cc4:	47d0      	blx	sl
 8020cc6:	444f      	add	r7, r9
 8020cc8:	e7ef      	b.n	8020caa <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f2>
 8020cca:	bf00      	nop
 8020ccc:	200177b8 	.word	0x200177b8
 8020cd0:	200177ba 	.word	0x200177ba
 8020cd4:	200177bc 	.word	0x200177bc
 8020cd8:	200177be 	.word	0x200177be
 8020cdc:	200177c4 	.word	0x200177c4

08020ce0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8020ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020ce2:	4606      	mov	r6, r0
 8020ce4:	b087      	sub	sp, #28
 8020ce6:	460c      	mov	r4, r1
 8020ce8:	4617      	mov	r7, r2
 8020cea:	461d      	mov	r5, r3
 8020cec:	b333      	cbz	r3, 8020d3c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8020cee:	4608      	mov	r0, r1
 8020cf0:	f7f6 fc93 	bl	801761a <_ZNK8touchgfx4Rect7isEmptyEv>
 8020cf4:	bb10      	cbnz	r0, 8020d3c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8020cf6:	6820      	ldr	r0, [r4, #0]
 8020cf8:	ab04      	add	r3, sp, #16
 8020cfa:	6861      	ldr	r1, [r4, #4]
 8020cfc:	4c1b      	ldr	r4, [pc, #108]	; (8020d6c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
 8020cfe:	c303      	stmia	r3!, {r0, r1}
 8020d00:	a804      	add	r0, sp, #16
 8020d02:	f7fa f953 	bl	801afac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020d06:	6820      	ldr	r0, [r4, #0]
 8020d08:	6803      	ldr	r3, [r0, #0]
 8020d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020d0c:	4798      	blx	r3
 8020d0e:	2dff      	cmp	r5, #255	; 0xff
 8020d10:	d016      	beq.n	8020d40 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 8020d12:	f010 0f08 	tst.w	r0, #8
 8020d16:	6820      	ldr	r0, [r4, #0]
 8020d18:	d015      	beq.n	8020d46 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 8020d1a:	2400      	movs	r4, #0
 8020d1c:	6801      	ldr	r1, [r0, #0]
 8020d1e:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8020d22:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8020d26:	e9cd 5402 	strd	r5, r4, [sp, #8]
 8020d2a:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8020d2e:	9401      	str	r4, [sp, #4]
 8020d30:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 8020d34:	9400      	str	r4, [sp, #0]
 8020d36:	6e0c      	ldr	r4, [r1, #96]	; 0x60
 8020d38:	4639      	mov	r1, r7
 8020d3a:	47a0      	blx	r4
 8020d3c:	b007      	add	sp, #28
 8020d3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020d40:	f010 0f02 	tst.w	r0, #2
 8020d44:	e7e7      	b.n	8020d16 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
 8020d46:	6803      	ldr	r3, [r0, #0]
 8020d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020d4a:	4798      	blx	r3
 8020d4c:	4b08      	ldr	r3, [pc, #32]	; (8020d70 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 8020d4e:	4601      	mov	r1, r0
 8020d50:	4630      	mov	r0, r6
 8020d52:	881a      	ldrh	r2, [r3, #0]
 8020d54:	6833      	ldr	r3, [r6, #0]
 8020d56:	e9cd 7500 	strd	r7, r5, [sp]
 8020d5a:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8020d5c:	ab04      	add	r3, sp, #16
 8020d5e:	47a8      	blx	r5
 8020d60:	6820      	ldr	r0, [r4, #0]
 8020d62:	6803      	ldr	r3, [r0, #0]
 8020d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020d66:	4798      	blx	r3
 8020d68:	e7e8      	b.n	8020d3c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8020d6a:	bf00      	nop
 8020d6c:	200177c4 	.word	0x200177c4
 8020d70:	200177be 	.word	0x200177be

08020d74 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 8020d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020d78:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
 8020d7c:	4688      	mov	r8, r1
 8020d7e:	4614      	mov	r4, r2
 8020d80:	461d      	mov	r5, r3
 8020d82:	9e08      	ldr	r6, [sp, #32]
 8020d84:	2f00      	cmp	r7, #0
 8020d86:	f000 80ab 	beq.w	8020ee0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 8020d8a:	4618      	mov	r0, r3
 8020d8c:	f7f6 fc45 	bl	801761a <_ZNK8touchgfx4Rect7isEmptyEv>
 8020d90:	2800      	cmp	r0, #0
 8020d92:	f040 80a5 	bne.w	8020ee0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 8020d96:	f9b5 1000 	ldrsh.w	r1, [r5]
 8020d9a:	2fff      	cmp	r7, #255	; 0xff
 8020d9c:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8020da0:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 8020da4:	fb04 1303 	mla	r3, r4, r3, r1
 8020da8:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
 8020dac:	eba4 0200 	sub.w	r2, r4, r0
 8020db0:	eb08 0143 	add.w	r1, r8, r3, lsl #1
 8020db4:	fb04 f505 	mul.w	r5, r4, r5
 8020db8:	ea4f 2816 	mov.w	r8, r6, lsr #8
 8020dbc:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 8020dc0:	d04a      	beq.n	8020e58 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe4>
 8020dc2:	b2bc      	uxth	r4, r7
 8020dc4:	f1c7 0cff 	rsb	ip, r7, #255	; 0xff
 8020dc8:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 8020dcc:	fa5f f788 	uxtb.w	r7, r8
 8020dd0:	b2f3      	uxtb	r3, r6
 8020dd2:	0040      	lsls	r0, r0, #1
 8020dd4:	fb0e fe04 	mul.w	lr, lr, r4
 8020dd8:	4367      	muls	r7, r4
 8020dda:	ea4f 0842 	mov.w	r8, r2, lsl #1
 8020dde:	4363      	muls	r3, r4
 8020de0:	fa1f fc8c 	uxth.w	ip, ip
 8020de4:	42a9      	cmp	r1, r5
 8020de6:	d27b      	bcs.n	8020ee0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 8020de8:	eb01 0900 	add.w	r9, r1, r0
 8020dec:	4549      	cmp	r1, r9
 8020dee:	d231      	bcs.n	8020e54 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe0>
 8020df0:	880a      	ldrh	r2, [r1, #0]
 8020df2:	1214      	asrs	r4, r2, #8
 8020df4:	10d6      	asrs	r6, r2, #3
 8020df6:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8020dfa:	00d2      	lsls	r2, r2, #3
 8020dfc:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8020e00:	b2d2      	uxtb	r2, r2
 8020e02:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8020e06:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8020e0a:	fb14 f40c 	smulbb	r4, r4, ip
 8020e0e:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 8020e12:	fb12 f20c 	smulbb	r2, r2, ip
 8020e16:	fb16 f60c 	smulbb	r6, r6, ip
 8020e1a:	4474      	add	r4, lr
 8020e1c:	441a      	add	r2, r3
 8020e1e:	b2a4      	uxth	r4, r4
 8020e20:	443e      	add	r6, r7
 8020e22:	b292      	uxth	r2, r2
 8020e24:	f104 0a01 	add.w	sl, r4, #1
 8020e28:	b2b6      	uxth	r6, r6
 8020e2a:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8020e2e:	f102 0a01 	add.w	sl, r2, #1
 8020e32:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
 8020e36:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8020e3a:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8020e3e:	4322      	orrs	r2, r4
 8020e40:	1c74      	adds	r4, r6, #1
 8020e42:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 8020e46:	0976      	lsrs	r6, r6, #5
 8020e48:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8020e4c:	4332      	orrs	r2, r6
 8020e4e:	f821 2b02 	strh.w	r2, [r1], #2
 8020e52:	e7cb      	b.n	8020dec <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x78>
 8020e54:	4441      	add	r1, r8
 8020e56:	e7c5      	b.n	8020de4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x70>
 8020e58:	0973      	lsrs	r3, r6, #5
 8020e5a:	4f22      	ldr	r7, [pc, #136]	; (8020ee4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x170>)
 8020e5c:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 8020e60:	ea08 0707 	and.w	r7, r8, r7
 8020e64:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8020e68:	433b      	orrs	r3, r7
 8020e6a:	07e7      	lsls	r7, r4, #31
 8020e6c:	ea43 0306 	orr.w	r3, r3, r6
 8020e70:	b29b      	uxth	r3, r3
 8020e72:	d50b      	bpl.n	8020e8c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x118>
 8020e74:	0040      	lsls	r0, r0, #1
 8020e76:	0052      	lsls	r2, r2, #1
 8020e78:	42a9      	cmp	r1, r5
 8020e7a:	d231      	bcs.n	8020ee0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 8020e7c:	180c      	adds	r4, r1, r0
 8020e7e:	42a1      	cmp	r1, r4
 8020e80:	d202      	bcs.n	8020e88 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x114>
 8020e82:	f821 3b02 	strh.w	r3, [r1], #2
 8020e86:	e7fa      	b.n	8020e7e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x10a>
 8020e88:	4411      	add	r1, r2
 8020e8a:	e7f5      	b.n	8020e78 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x104>
 8020e8c:	078e      	lsls	r6, r1, #30
 8020e8e:	d008      	beq.n	8020ea2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12e>
 8020e90:	0066      	lsls	r6, r4, #1
 8020e92:	460a      	mov	r2, r1
 8020e94:	42aa      	cmp	r2, r5
 8020e96:	d202      	bcs.n	8020e9e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12a>
 8020e98:	8013      	strh	r3, [r2, #0]
 8020e9a:	4432      	add	r2, r6
 8020e9c:	e7fa      	b.n	8020e94 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x120>
 8020e9e:	3102      	adds	r1, #2
 8020ea0:	3801      	subs	r0, #1
 8020ea2:	07c2      	lsls	r2, r0, #31
 8020ea4:	d50b      	bpl.n	8020ebe <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x14a>
 8020ea6:	f100 4200 	add.w	r2, r0, #2147483648	; 0x80000000
 8020eaa:	0066      	lsls	r6, r4, #1
 8020eac:	3a01      	subs	r2, #1
 8020eae:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8020eb2:	42aa      	cmp	r2, r5
 8020eb4:	d202      	bcs.n	8020ebc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x148>
 8020eb6:	8013      	strh	r3, [r2, #0]
 8020eb8:	4432      	add	r2, r6
 8020eba:	e7fa      	b.n	8020eb2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13e>
 8020ebc:	3801      	subs	r0, #1
 8020ebe:	b178      	cbz	r0, 8020ee0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 8020ec0:	1040      	asrs	r0, r0, #1
 8020ec2:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 8020ec6:	0080      	lsls	r0, r0, #2
 8020ec8:	0064      	lsls	r4, r4, #1
 8020eca:	42a9      	cmp	r1, r5
 8020ecc:	d208      	bcs.n	8020ee0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 8020ece:	180e      	adds	r6, r1, r0
 8020ed0:	460a      	mov	r2, r1
 8020ed2:	42b2      	cmp	r2, r6
 8020ed4:	d202      	bcs.n	8020edc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8020ed6:	f842 3b04 	str.w	r3, [r2], #4
 8020eda:	e7fa      	b.n	8020ed2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x15e>
 8020edc:	4421      	add	r1, r4
 8020ede:	e7f4      	b.n	8020eca <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x156>
 8020ee0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020ee4:	00fff800 	.word	0x00fff800

08020ee8 <_ZN8touchgfx8LCD16bppC1Ev>:
 8020ee8:	2200      	movs	r2, #0
 8020eea:	4910      	ldr	r1, [pc, #64]	; (8020f2c <_ZN8touchgfx8LCD16bppC1Ev+0x44>)
 8020eec:	6042      	str	r2, [r0, #4]
 8020eee:	6001      	str	r1, [r0, #0]
 8020ef0:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8020ef4:	e9c0 2204 	strd	r2, r2, [r0, #16]
 8020ef8:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8020efc:	e9c0 2208 	strd	r2, r2, [r0, #32]
 8020f00:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 8020f04:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 8020f08:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 8020f0c:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 8020f10:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 8020f14:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 8020f18:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 8020f1c:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 8020f20:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
 8020f24:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
 8020f28:	4770      	bx	lr
 8020f2a:	bf00      	nop
 8020f2c:	08030214 	.word	0x08030214

08020f30 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 8020f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020f34:	b08d      	sub	sp, #52	; 0x34
 8020f36:	460d      	mov	r5, r1
 8020f38:	4604      	mov	r4, r0
 8020f3a:	4699      	mov	r9, r3
 8020f3c:	6808      	ldr	r0, [r1, #0]
 8020f3e:	ab08      	add	r3, sp, #32
 8020f40:	6849      	ldr	r1, [r1, #4]
 8020f42:	c303      	stmia	r3!, {r0, r1}
 8020f44:	6810      	ldr	r0, [r2, #0]
 8020f46:	ab0a      	add	r3, sp, #40	; 0x28
 8020f48:	6851      	ldr	r1, [r2, #4]
 8020f4a:	c303      	stmia	r3!, {r0, r1}
 8020f4c:	a808      	add	r0, sp, #32
 8020f4e:	f7fa f82d 	bl	801afac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020f52:	4629      	mov	r1, r5
 8020f54:	a80a      	add	r0, sp, #40	; 0x28
 8020f56:	4d67      	ldr	r5, [pc, #412]	; (80210f4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 8020f58:	f7fa f86c 	bl	801b034 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020f5c:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 8020f60:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 8020f64:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8020f68:	6828      	ldr	r0, [r5, #0]
 8020f6a:	fb11 2103 	smlabb	r1, r1, r3, r2
 8020f6e:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	; 0x2c
 8020f72:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 8020f76:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8020f7a:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 8020f7e:	440a      	add	r2, r1
 8020f80:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8020f84:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 8020f88:	4413      	add	r3, r2
 8020f8a:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8020f8e:	6803      	ldr	r3, [r0, #0]
 8020f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020f92:	4798      	blx	r3
 8020f94:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8020f98:	d119      	bne.n	8020fce <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 8020f9a:	f010 0f20 	tst.w	r0, #32
 8020f9e:	6828      	ldr	r0, [r5, #0]
 8020fa0:	d018      	beq.n	8020fd4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 8020fa2:	2500      	movs	r5, #0
 8020fa4:	6801      	ldr	r1, [r0, #0]
 8020fa6:	b2b6      	uxth	r6, r6
 8020fa8:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 8020fac:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8020fb0:	9601      	str	r6, [sp, #4]
 8020fb2:	e9cd 9503 	strd	r9, r5, [sp, #12]
 8020fb6:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 8020fba:	9502      	str	r5, [sp, #8]
 8020fbc:	fa1f f588 	uxth.w	r5, r8
 8020fc0:	9500      	str	r5, [sp, #0]
 8020fc2:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 8020fc4:	4621      	mov	r1, r4
 8020fc6:	47a8      	blx	r5
 8020fc8:	b00d      	add	sp, #52	; 0x34
 8020fca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020fce:	f010 0f40 	tst.w	r0, #64	; 0x40
 8020fd2:	e7e4      	b.n	8020f9e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 8020fd4:	6803      	ldr	r3, [r0, #0]
 8020fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020fd8:	4798      	blx	r3
 8020fda:	4947      	ldr	r1, [pc, #284]	; (80210f8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
 8020fdc:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 8020fe0:	880b      	ldrh	r3, [r1, #0]
 8020fe2:	468a      	mov	sl, r1
 8020fe4:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 8020fe8:	fb03 5202 	mla	r2, r3, r2, r5
 8020fec:	4373      	muls	r3, r6
 8020fee:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8020ff2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8020ff6:	9307      	str	r3, [sp, #28]
 8020ff8:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8020ffc:	9306      	str	r3, [sp, #24]
 8020ffe:	9b07      	ldr	r3, [sp, #28]
 8021000:	4298      	cmp	r0, r3
 8021002:	d270      	bcs.n	80210e6 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
 8021004:	9b06      	ldr	r3, [sp, #24]
 8021006:	4621      	mov	r1, r4
 8021008:	eb00 0b03 	add.w	fp, r0, r3
 802100c:	4558      	cmp	r0, fp
 802100e:	d25d      	bcs.n	80210cc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19c>
 8021010:	f851 4b04 	ldr.w	r4, [r1], #4
 8021014:	0e23      	lsrs	r3, r4, #24
 8021016:	d014      	beq.n	8021042 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 8021018:	2bff      	cmp	r3, #255	; 0xff
 802101a:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 802101e:	d112      	bne.n	8021046 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 8021020:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8021024:	d10f      	bne.n	8021046 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 8021026:	0963      	lsrs	r3, r4, #5
 8021028:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 802102c:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8021030:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8021034:	f02c 0c07 	bic.w	ip, ip, #7
 8021038:	ea43 0c0c 	orr.w	ip, r3, ip
 802103c:	ea4c 0404 	orr.w	r4, ip, r4
 8021040:	8004      	strh	r4, [r0, #0]
 8021042:	3002      	adds	r0, #2
 8021044:	e7e2      	b.n	802100c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xdc>
 8021046:	fb09 f303 	mul.w	r3, r9, r3
 802104a:	8807      	ldrh	r7, [r0, #0]
 802104c:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 8021050:	fa5f fc8c 	uxtb.w	ip, ip
 8021054:	1c5a      	adds	r2, r3, #1
 8021056:	123e      	asrs	r6, r7, #8
 8021058:	10fd      	asrs	r5, r7, #3
 802105a:	eb02 2223 	add.w	r2, r2, r3, asr #8
 802105e:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8021062:	00ff      	lsls	r7, r7, #3
 8021064:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8021068:	1212      	asrs	r2, r2, #8
 802106a:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 802106e:	b293      	uxth	r3, r2
 8021070:	43d2      	mvns	r2, r2
 8021072:	b2ff      	uxtb	r7, r7
 8021074:	fb1e fe03 	smulbb	lr, lr, r3
 8021078:	b2d2      	uxtb	r2, r2
 802107a:	fb1c fc03 	smulbb	ip, ip, r3
 802107e:	b2e4      	uxtb	r4, r4
 8021080:	fb06 e602 	mla	r6, r6, r2, lr
 8021084:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 8021088:	fb14 f403 	smulbb	r4, r4, r3
 802108c:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 8021090:	b2b6      	uxth	r6, r6
 8021092:	fb05 c502 	mla	r5, r5, r2, ip
 8021096:	fb07 4702 	mla	r7, r7, r2, r4
 802109a:	f106 0e01 	add.w	lr, r6, #1
 802109e:	b2ad      	uxth	r5, r5
 80210a0:	b2bf      	uxth	r7, r7
 80210a2:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 80210a6:	f105 0c01 	add.w	ip, r5, #1
 80210aa:	f406 4e78 	and.w	lr, r6, #63488	; 0xf800
 80210ae:	1c7e      	adds	r6, r7, #1
 80210b0:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 80210b4:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 80210b8:	096d      	lsrs	r5, r5, #5
 80210ba:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 80210be:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80210c2:	ea46 060e 	orr.w	r6, r6, lr
 80210c6:	432e      	orrs	r6, r5
 80210c8:	8006      	strh	r6, [r0, #0]
 80210ca:	e7ba      	b.n	8021042 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 80210cc:	f8ba 3000 	ldrh.w	r3, [sl]
 80210d0:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	; 0x24
 80210d4:	eba3 0308 	sub.w	r3, r3, r8
 80210d8:	eba4 0408 	sub.w	r4, r4, r8
 80210dc:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80210e0:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 80210e4:	e78b      	b.n	8020ffe <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 80210e6:	4b03      	ldr	r3, [pc, #12]	; (80210f4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 80210e8:	6818      	ldr	r0, [r3, #0]
 80210ea:	6803      	ldr	r3, [r0, #0]
 80210ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80210ee:	4798      	blx	r3
 80210f0:	e76a      	b.n	8020fc8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 80210f2:	bf00      	nop
 80210f4:	200177c4 	.word	0x200177c4
 80210f8:	200177be 	.word	0x200177be

080210fc <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
 80210fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8021100:	b085      	sub	sp, #20
 8021102:	6810      	ldr	r0, [r2, #0]
 8021104:	460c      	mov	r4, r1
 8021106:	6851      	ldr	r1, [r2, #4]
 8021108:	466d      	mov	r5, sp
 802110a:	4616      	mov	r6, r2
 802110c:	c503      	stmia	r5!, {r0, r1}
 802110e:	6818      	ldr	r0, [r3, #0]
 8021110:	6859      	ldr	r1, [r3, #4]
 8021112:	c503      	stmia	r5!, {r0, r1}
 8021114:	4668      	mov	r0, sp
 8021116:	4d2e      	ldr	r5, [pc, #184]	; (80211d0 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd4>)
 8021118:	f7f9 ff48 	bl	801afac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802111c:	4631      	mov	r1, r6
 802111e:	a802      	add	r0, sp, #8
 8021120:	4e2c      	ldr	r6, [pc, #176]	; (80211d4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd8>)
 8021122:	f7f9 ff87 	bl	801b034 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021126:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 802112a:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 802112e:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8021132:	6828      	ldr	r0, [r5, #0]
 8021134:	fb11 2103 	smlabb	r1, r1, r3, r2
 8021138:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 802113c:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
 8021140:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8021144:	f8bd 1000 	ldrh.w	r1, [sp]
 8021148:	440a      	add	r2, r1
 802114a:	f8ad 2008 	strh.w	r2, [sp, #8]
 802114e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8021152:	4413      	add	r3, r2
 8021154:	f8ad 300a 	strh.w	r3, [sp, #10]
 8021158:	6803      	ldr	r3, [r0, #0]
 802115a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802115c:	4798      	blx	r3
 802115e:	8833      	ldrh	r3, [r6, #0]
 8021160:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8021164:	ea4f 0c47 	mov.w	ip, r7, lsl #1
 8021168:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 802116c:	f8df e068 	ldr.w	lr, [pc, #104]	; 80211d8 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xdc>
 8021170:	fb03 1202 	mla	r2, r3, r2, r1
 8021174:	fb08 f303 	mul.w	r3, r8, r3
 8021178:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 802117c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8021180:	4298      	cmp	r0, r3
 8021182:	d21d      	bcs.n	80211c0 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc4>
 8021184:	eb00 080c 	add.w	r8, r0, ip
 8021188:	4540      	cmp	r0, r8
 802118a:	d20f      	bcs.n	80211ac <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xb0>
 802118c:	f854 1b04 	ldr.w	r1, [r4], #4
 8021190:	ea4f 1951 	mov.w	r9, r1, lsr #5
 8021194:	ea0e 2211 	and.w	r2, lr, r1, lsr #8
 8021198:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 802119c:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80211a0:	ea42 0209 	orr.w	r2, r2, r9
 80211a4:	430a      	orrs	r2, r1
 80211a6:	f820 2b02 	strh.w	r2, [r0], #2
 80211aa:	e7ed      	b.n	8021188 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x8c>
 80211ac:	8832      	ldrh	r2, [r6, #0]
 80211ae:	1bd2      	subs	r2, r2, r7
 80211b0:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80211b4:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 80211b8:	1bd2      	subs	r2, r2, r7
 80211ba:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 80211be:	e7df      	b.n	8021180 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x84>
 80211c0:	6828      	ldr	r0, [r5, #0]
 80211c2:	6803      	ldr	r3, [r0, #0]
 80211c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80211c6:	4798      	blx	r3
 80211c8:	b005      	add	sp, #20
 80211ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80211ce:	bf00      	nop
 80211d0:	200177c4 	.word	0x200177c4
 80211d4:	200177be 	.word	0x200177be
 80211d8:	fffff800 	.word	0xfffff800

080211dc <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
 80211dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80211e0:	b08e      	sub	sp, #56	; 0x38
 80211e2:	460e      	mov	r6, r1
 80211e4:	4604      	mov	r4, r0
 80211e6:	461d      	mov	r5, r3
 80211e8:	6808      	ldr	r0, [r1, #0]
 80211ea:	ab0a      	add	r3, sp, #40	; 0x28
 80211ec:	6849      	ldr	r1, [r1, #4]
 80211ee:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 80213c4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>
 80211f2:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 80213c8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1ec>
 80211f6:	c303      	stmia	r3!, {r0, r1}
 80211f8:	6810      	ldr	r0, [r2, #0]
 80211fa:	ab0c      	add	r3, sp, #48	; 0x30
 80211fc:	6851      	ldr	r1, [r2, #4]
 80211fe:	c303      	stmia	r3!, {r0, r1}
 8021200:	a80a      	add	r0, sp, #40	; 0x28
 8021202:	f7f9 fed3 	bl	801afac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021206:	4631      	mov	r1, r6
 8021208:	a80c      	add	r0, sp, #48	; 0x30
 802120a:	f7f9 ff13 	bl	801b034 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802120e:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 8021212:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8021216:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 802121a:	f8d8 0000 	ldr.w	r0, [r8]
 802121e:	fb11 2103 	smlabb	r1, r1, r3, r2
 8021222:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 8021226:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	; 0x36
 802122a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802122e:	440c      	add	r4, r1
 8021230:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 8021234:	440a      	add	r2, r1
 8021236:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 802123a:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 802123e:	4413      	add	r3, r2
 8021240:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8021244:	6803      	ldr	r3, [r0, #0]
 8021246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021248:	4798      	blx	r3
 802124a:	2dff      	cmp	r5, #255	; 0xff
 802124c:	d124      	bne.n	8021298 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xbc>
 802124e:	f010 0f01 	tst.w	r0, #1
 8021252:	f8d8 0000 	ldr.w	r0, [r8]
 8021256:	d022      	beq.n	802129e <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xc2>
 8021258:	2100      	movs	r1, #0
 802125a:	f04f 0e01 	mov.w	lr, #1
 802125e:	f8d0 c000 	ldr.w	ip, [r0]
 8021262:	b2b6      	uxth	r6, r6
 8021264:	f8cd e018 	str.w	lr, [sp, #24]
 8021268:	b2bf      	uxth	r7, r7
 802126a:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 802126e:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 8021272:	e9cd 1107 	strd	r1, r1, [sp, #28]
 8021276:	f8b9 e000 	ldrh.w	lr, [r9]
 802127a:	9503      	str	r5, [sp, #12]
 802127c:	9601      	str	r6, [sp, #4]
 802127e:	9700      	str	r7, [sp, #0]
 8021280:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 8021284:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8021288:	9102      	str	r1, [sp, #8]
 802128a:	4621      	mov	r1, r4
 802128c:	f8dc 5040 	ldr.w	r5, [ip, #64]	; 0x40
 8021290:	47a8      	blx	r5
 8021292:	b00e      	add	sp, #56	; 0x38
 8021294:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021298:	f010 0f04 	tst.w	r0, #4
 802129c:	e7d9      	b.n	8021252 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x76>
 802129e:	6803      	ldr	r3, [r0, #0]
 80212a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80212a2:	4798      	blx	r3
 80212a4:	f8b9 3000 	ldrh.w	r3, [r9]
 80212a8:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 80212ac:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 80212b0:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 80212b4:	435e      	muls	r6, r3
 80212b6:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 80212ba:	2dff      	cmp	r5, #255	; 0xff
 80212bc:	fb03 1202 	mla	r2, r3, r2, r1
 80212c0:	ebac 0c07 	sub.w	ip, ip, r7
 80212c4:	eba3 0707 	sub.w	r7, r3, r7
 80212c8:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80212cc:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80212d0:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 80212d4:	ea4f 0747 	mov.w	r7, r7, lsl #1
 80212d8:	d049      	beq.n	802136e <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x192>
 80212da:	43eb      	mvns	r3, r5
 80212dc:	fa1f f985 	uxth.w	r9, r5
 80212e0:	b2db      	uxtb	r3, r3
 80212e2:	42b0      	cmp	r0, r6
 80212e4:	d266      	bcs.n	80213b4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 80212e6:	eb00 0a0e 	add.w	sl, r0, lr
 80212ea:	4550      	cmp	r0, sl
 80212ec:	4621      	mov	r1, r4
 80212ee:	f104 0403 	add.w	r4, r4, #3
 80212f2:	d25b      	bcs.n	80213ac <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
 80212f4:	8802      	ldrh	r2, [r0, #0]
 80212f6:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 80212fa:	ea4f 2822 	mov.w	r8, r2, asr #8
 80212fe:	fb11 f109 	smulbb	r1, r1, r9
 8021302:	10d5      	asrs	r5, r2, #3
 8021304:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 8021308:	00d2      	lsls	r2, r2, #3
 802130a:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 802130e:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 8021312:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 8021316:	fb08 1803 	mla	r8, r8, r3, r1
 802131a:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 802131e:	b2d2      	uxtb	r2, r2
 8021320:	fb11 f109 	smulbb	r1, r1, r9
 8021324:	fa1f f888 	uxth.w	r8, r8
 8021328:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 802132c:	fb05 1503 	mla	r5, r5, r3, r1
 8021330:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 8021334:	fb11 f109 	smulbb	r1, r1, r9
 8021338:	b2ad      	uxth	r5, r5
 802133a:	fb02 1203 	mla	r2, r2, r3, r1
 802133e:	f108 0101 	add.w	r1, r8, #1
 8021342:	b292      	uxth	r2, r2
 8021344:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 8021348:	1c51      	adds	r1, r2, #1
 802134a:	f408 4878 	and.w	r8, r8, #63488	; 0xf800
 802134e:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8021352:	1c69      	adds	r1, r5, #1
 8021354:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8021358:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 802135c:	096d      	lsrs	r5, r5, #5
 802135e:	ea42 0208 	orr.w	r2, r2, r8
 8021362:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8021366:	432a      	orrs	r2, r5
 8021368:	f820 2b02 	strh.w	r2, [r0], #2
 802136c:	e7bd      	b.n	80212ea <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10e>
 802136e:	4a14      	ldr	r2, [pc, #80]	; (80213c0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>)
 8021370:	42b0      	cmp	r0, r6
 8021372:	d21f      	bcs.n	80213b4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 8021374:	eb00 050e 	add.w	r5, r0, lr
 8021378:	42a8      	cmp	r0, r5
 802137a:	4621      	mov	r1, r4
 802137c:	f104 0403 	add.w	r4, r4, #3
 8021380:	d210      	bcs.n	80213a4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
 8021382:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 8021386:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 802138a:	00db      	lsls	r3, r3, #3
 802138c:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 8021390:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8021394:	430b      	orrs	r3, r1
 8021396:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 802139a:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 802139e:	f820 3b02 	strh.w	r3, [r0], #2
 80213a2:	e7e9      	b.n	8021378 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x19c>
 80213a4:	4438      	add	r0, r7
 80213a6:	eb01 040c 	add.w	r4, r1, ip
 80213aa:	e7e1      	b.n	8021370 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
 80213ac:	4438      	add	r0, r7
 80213ae:	eb01 040c 	add.w	r4, r1, ip
 80213b2:	e796      	b.n	80212e2 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
 80213b4:	4b03      	ldr	r3, [pc, #12]	; (80213c4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>)
 80213b6:	6818      	ldr	r0, [r3, #0]
 80213b8:	6803      	ldr	r3, [r0, #0]
 80213ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80213bc:	4798      	blx	r3
 80213be:	e768      	b.n	8021292 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb6>
 80213c0:	fffff800 	.word	0xfffff800
 80213c4:	200177c4 	.word	0x200177c4
 80213c8:	200177be 	.word	0x200177be

080213cc <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 80213cc:	b4f0      	push	{r4, r5, r6, r7}
 80213ce:	4616      	mov	r6, r2
 80213d0:	461c      	mov	r4, r3
 80213d2:	460d      	mov	r5, r1
 80213d4:	9a04      	ldr	r2, [sp, #16]
 80213d6:	2e01      	cmp	r6, #1
 80213d8:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80213dc:	f89d 7018 	ldrb.w	r7, [sp, #24]
 80213e0:	d012      	beq.n	8021408 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x3c>
 80213e2:	d303      	bcc.n	80213ec <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x20>
 80213e4:	2e02      	cmp	r6, #2
 80213e6:	d00a      	beq.n	80213fe <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x32>
 80213e8:	bcf0      	pop	{r4, r5, r6, r7}
 80213ea:	4770      	bx	lr
 80213ec:	6805      	ldr	r5, [r0, #0]
 80213ee:	e9cd 3704 	strd	r3, r7, [sp, #16]
 80213f2:	68ed      	ldr	r5, [r5, #12]
 80213f4:	4613      	mov	r3, r2
 80213f6:	4622      	mov	r2, r4
 80213f8:	46ac      	mov	ip, r5
 80213fa:	bcf0      	pop	{r4, r5, r6, r7}
 80213fc:	4760      	bx	ip
 80213fe:	4621      	mov	r1, r4
 8021400:	4628      	mov	r0, r5
 8021402:	bcf0      	pop	{r4, r5, r6, r7}
 8021404:	f7ff bd94 	b.w	8020f30 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8021408:	4621      	mov	r1, r4
 802140a:	4628      	mov	r0, r5
 802140c:	bcf0      	pop	{r4, r5, r6, r7}
 802140e:	f7ff bee5 	b.w	80211dc <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
	...

08021414 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 8021414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021418:	b093      	sub	sp, #76	; 0x4c
 802141a:	4681      	mov	r9, r0
 802141c:	4688      	mov	r8, r1
 802141e:	6810      	ldr	r0, [r2, #0]
 8021420:	6851      	ldr	r1, [r2, #4]
 8021422:	ac0e      	add	r4, sp, #56	; 0x38
 8021424:	4616      	mov	r6, r2
 8021426:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
 802142a:	4f6b      	ldr	r7, [pc, #428]	; (80215d8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 802142c:	c403      	stmia	r4!, {r0, r1}
 802142e:	6818      	ldr	r0, [r3, #0]
 8021430:	ac10      	add	r4, sp, #64	; 0x40
 8021432:	6859      	ldr	r1, [r3, #4]
 8021434:	c403      	stmia	r4!, {r0, r1}
 8021436:	a80e      	add	r0, sp, #56	; 0x38
 8021438:	f7f9 fdb8 	bl	801afac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802143c:	4631      	mov	r1, r6
 802143e:	a810      	add	r0, sp, #64	; 0x40
 8021440:	4e66      	ldr	r6, [pc, #408]	; (80215dc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 8021442:	f7f9 fdf7 	bl	801b034 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021446:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 802144a:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 802144e:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 8021452:	6830      	ldr	r0, [r6, #0]
 8021454:	fb11 2103 	smlabb	r1, r1, r3, r2
 8021458:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	; 0x44
 802145c:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	; 0x46
 8021460:	4489      	add	r9, r1
 8021462:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 8021466:	440a      	add	r2, r1
 8021468:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 802146c:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8021470:	4413      	add	r3, r2
 8021472:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8021476:	6803      	ldr	r3, [r0, #0]
 8021478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802147a:	4798      	blx	r3
 802147c:	f010 0f80 	tst.w	r0, #128	; 0x80
 8021480:	6830      	ldr	r0, [r6, #0]
 8021482:	d01d      	beq.n	80214c0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 8021484:	2200      	movs	r2, #0
 8021486:	6801      	ldr	r1, [r0, #0]
 8021488:	b2a4      	uxth	r4, r4
 802148a:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 802148e:	b2ad      	uxth	r5, r5
 8021490:	e9cd 2208 	strd	r2, r2, [sp, #32]
 8021494:	220b      	movs	r2, #11
 8021496:	9207      	str	r2, [sp, #28]
 8021498:	883a      	ldrh	r2, [r7, #0]
 802149a:	9502      	str	r5, [sp, #8]
 802149c:	9206      	str	r2, [sp, #24]
 802149e:	2201      	movs	r2, #1
 80214a0:	9401      	str	r4, [sp, #4]
 80214a2:	e9cd a204 	strd	sl, r2, [sp, #16]
 80214a6:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 80214aa:	9203      	str	r2, [sp, #12]
 80214ac:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 80214b0:	9200      	str	r2, [sp, #0]
 80214b2:	4642      	mov	r2, r8
 80214b4:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 80214b6:	4649      	mov	r1, r9
 80214b8:	47a0      	blx	r4
 80214ba:	b013      	add	sp, #76	; 0x4c
 80214bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80214c0:	6803      	ldr	r3, [r0, #0]
 80214c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80214c4:	4798      	blx	r3
 80214c6:	883b      	ldrh	r3, [r7, #0]
 80214c8:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 80214cc:	f04f 0e04 	mov.w	lr, #4
 80214d0:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
 80214d4:	435d      	muls	r5, r3
 80214d6:	fb03 1202 	mla	r2, r3, r2, r1
 80214da:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80214de:	eb00 0245 	add.w	r2, r0, r5, lsl #1
 80214e2:	920c      	str	r2, [sp, #48]	; 0x30
 80214e4:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 80214e8:	1b12      	subs	r2, r2, r4
 80214ea:	920d      	str	r2, [sp, #52]	; 0x34
 80214ec:	0062      	lsls	r2, r4, #1
 80214ee:	1b1c      	subs	r4, r3, r4
 80214f0:	920a      	str	r2, [sp, #40]	; 0x28
 80214f2:	0063      	lsls	r3, r4, #1
 80214f4:	930b      	str	r3, [sp, #44]	; 0x2c
 80214f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80214f8:	4298      	cmp	r0, r3
 80214fa:	d266      	bcs.n	80215ca <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b6>
 80214fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80214fe:	eb00 0b03 	add.w	fp, r0, r3
 8021502:	4558      	cmp	r0, fp
 8021504:	d25c      	bcs.n	80215c0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 8021506:	f819 3b01 	ldrb.w	r3, [r9], #1
 802150a:	fb1e e303 	smlabb	r3, lr, r3, lr
 802150e:	f858 2003 	ldr.w	r2, [r8, r3]
 8021512:	0e11      	lsrs	r1, r2, #24
 8021514:	d012      	beq.n	802153c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 8021516:	29ff      	cmp	r1, #255	; 0xff
 8021518:	ea4f 2712 	mov.w	r7, r2, lsr #8
 802151c:	d110      	bne.n	8021540 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 802151e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8021522:	d10d      	bne.n	8021540 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8021524:	0953      	lsrs	r3, r2, #5
 8021526:	f427 67ff 	bic.w	r7, r7, #2040	; 0x7f8
 802152a:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802152e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8021532:	f027 0707 	bic.w	r7, r7, #7
 8021536:	431f      	orrs	r7, r3
 8021538:	433a      	orrs	r2, r7
 802153a:	8002      	strh	r2, [r0, #0]
 802153c:	3002      	adds	r0, #2
 802153e:	e7e0      	b.n	8021502 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xee>
 8021540:	fb0a f101 	mul.w	r1, sl, r1
 8021544:	8806      	ldrh	r6, [r0, #0]
 8021546:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 802154a:	b2d2      	uxtb	r2, r2
 802154c:	1c4b      	adds	r3, r1, #1
 802154e:	1235      	asrs	r5, r6, #8
 8021550:	10f4      	asrs	r4, r6, #3
 8021552:	eb03 2321 	add.w	r3, r3, r1, asr #8
 8021556:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 802155a:	00f6      	lsls	r6, r6, #3
 802155c:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 8021560:	121b      	asrs	r3, r3, #8
 8021562:	b2f6      	uxtb	r6, r6
 8021564:	b299      	uxth	r1, r3
 8021566:	43db      	mvns	r3, r3
 8021568:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 802156c:	fb1c fc01 	smulbb	ip, ip, r1
 8021570:	b2db      	uxtb	r3, r3
 8021572:	fb12 f201 	smulbb	r2, r2, r1
 8021576:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 802157a:	fb05 c503 	mla	r5, r5, r3, ip
 802157e:	b2ff      	uxtb	r7, r7
 8021580:	fb06 2203 	mla	r2, r6, r3, r2
 8021584:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 8021588:	fb17 f701 	smulbb	r7, r7, r1
 802158c:	b2ad      	uxth	r5, r5
 802158e:	b292      	uxth	r2, r2
 8021590:	fb04 7403 	mla	r4, r4, r3, r7
 8021594:	f105 0c01 	add.w	ip, r5, #1
 8021598:	1c57      	adds	r7, r2, #1
 802159a:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 802159e:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 80215a2:	b2a4      	uxth	r4, r4
 80215a4:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 80215a8:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 80215ac:	433d      	orrs	r5, r7
 80215ae:	1c67      	adds	r7, r4, #1
 80215b0:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 80215b4:	0964      	lsrs	r4, r4, #5
 80215b6:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 80215ba:	4325      	orrs	r5, r4
 80215bc:	8005      	strh	r5, [r0, #0]
 80215be:	e7bd      	b.n	802153c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 80215c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80215c2:	4418      	add	r0, r3
 80215c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80215c6:	4499      	add	r9, r3
 80215c8:	e795      	b.n	80214f6 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xe2>
 80215ca:	4b04      	ldr	r3, [pc, #16]	; (80215dc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 80215cc:	6818      	ldr	r0, [r3, #0]
 80215ce:	6803      	ldr	r3, [r0, #0]
 80215d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80215d2:	4798      	blx	r3
 80215d4:	e771      	b.n	80214ba <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xa6>
 80215d6:	bf00      	nop
 80215d8:	200177be 	.word	0x200177be
 80215dc:	200177c4 	.word	0x200177c4

080215e0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 80215e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80215e4:	b087      	sub	sp, #28
 80215e6:	4680      	mov	r8, r0
 80215e8:	460d      	mov	r5, r1
 80215ea:	4614      	mov	r4, r2
 80215ec:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
 80215f0:	2e00      	cmp	r6, #0
 80215f2:	f000 80b9 	beq.w	8021768 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x188>
 80215f6:	6810      	ldr	r0, [r2, #0]
 80215f8:	af02      	add	r7, sp, #8
 80215fa:	6851      	ldr	r1, [r2, #4]
 80215fc:	c703      	stmia	r7!, {r0, r1}
 80215fe:	6818      	ldr	r0, [r3, #0]
 8021600:	af04      	add	r7, sp, #16
 8021602:	6859      	ldr	r1, [r3, #4]
 8021604:	c703      	stmia	r7!, {r0, r1}
 8021606:	a802      	add	r0, sp, #8
 8021608:	f7f9 fcd0 	bl	801afac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802160c:	4621      	mov	r1, r4
 802160e:	a804      	add	r0, sp, #16
 8021610:	f7f9 fd10 	bl	801b034 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021614:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8021618:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802161c:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 8021620:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 8021624:	fb14 2103 	smlabb	r1, r4, r3, r2
 8021628:	eb08 0401 	add.w	r4, r8, r1
 802162c:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8021630:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 8021634:	440a      	add	r2, r1
 8021636:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 802163a:	f8ad 2010 	strh.w	r2, [sp, #16]
 802163e:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8021642:	4413      	add	r3, r2
 8021644:	f8ad 3012 	strh.w	r3, [sp, #18]
 8021648:	4b49      	ldr	r3, [pc, #292]	; (8021770 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 802164a:	6818      	ldr	r0, [r3, #0]
 802164c:	6803      	ldr	r3, [r0, #0]
 802164e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021650:	4798      	blx	r3
 8021652:	4b48      	ldr	r3, [pc, #288]	; (8021774 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x194>)
 8021654:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 8021658:	2eff      	cmp	r6, #255	; 0xff
 802165a:	881a      	ldrh	r2, [r3, #0]
 802165c:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 8021660:	fb02 c101 	mla	r1, r2, r1, ip
 8021664:	fb02 f207 	mul.w	r2, r2, r7
 8021668:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 802166c:	f105 0104 	add.w	r1, r5, #4
 8021670:	461d      	mov	r5, r3
 8021672:	d05a      	beq.n	802172a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14a>
 8021674:	f1c6 0eff 	rsb	lr, r6, #255	; 0xff
 8021678:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 802167c:	b2b6      	uxth	r6, r6
 802167e:	9301      	str	r3, [sp, #4]
 8021680:	fa1f fe8e 	uxth.w	lr, lr
 8021684:	4282      	cmp	r2, r0
 8021686:	d96a      	bls.n	802175e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 8021688:	eb00 0b0a 	add.w	fp, r0, sl
 802168c:	4583      	cmp	fp, r0
 802168e:	d940      	bls.n	8021712 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x132>
 8021690:	8805      	ldrh	r5, [r0, #0]
 8021692:	f814 3b01 	ldrb.w	r3, [r4], #1
 8021696:	122f      	asrs	r7, r5, #8
 8021698:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 802169c:	ea4f 09e5 	mov.w	r9, r5, asr #3
 80216a0:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80216a4:	00ed      	lsls	r5, r5, #3
 80216a6:	ea4f 2c23 	mov.w	ip, r3, asr #8
 80216aa:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 80216ae:	fb17 f70e 	smulbb	r7, r7, lr
 80216b2:	b2ed      	uxtb	r5, r5
 80216b4:	fb19 f90e 	smulbb	r9, r9, lr
 80216b8:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80216bc:	fb15 f50e 	smulbb	r5, r5, lr
 80216c0:	fb0c 7c06 	mla	ip, ip, r6, r7
 80216c4:	10df      	asrs	r7, r3, #3
 80216c6:	00db      	lsls	r3, r3, #3
 80216c8:	fa1f fc8c 	uxth.w	ip, ip
 80216cc:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80216d0:	b2db      	uxtb	r3, r3
 80216d2:	fb07 9706 	mla	r7, r7, r6, r9
 80216d6:	f10c 0901 	add.w	r9, ip, #1
 80216da:	fb03 5306 	mla	r3, r3, r6, r5
 80216de:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 80216e2:	b29b      	uxth	r3, r3
 80216e4:	f40c 4978 	and.w	r9, ip, #63488	; 0xf800
 80216e8:	b2bf      	uxth	r7, r7
 80216ea:	f103 0c01 	add.w	ip, r3, #1
 80216ee:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 80216f2:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 80216f6:	ea4c 0c09 	orr.w	ip, ip, r9
 80216fa:	f107 0901 	add.w	r9, r7, #1
 80216fe:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 8021702:	097f      	lsrs	r7, r7, #5
 8021704:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8021708:	ea4c 0c07 	orr.w	ip, ip, r7
 802170c:	f820 cb02 	strh.w	ip, [r0], #2
 8021710:	e7bc      	b.n	802168c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xac>
 8021712:	9b01      	ldr	r3, [sp, #4]
 8021714:	881b      	ldrh	r3, [r3, #0]
 8021716:	eba3 0308 	sub.w	r3, r3, r8
 802171a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 802171e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8021722:	eba3 0308 	sub.w	r3, r3, r8
 8021726:	441c      	add	r4, r3
 8021728:	e7ac      	b.n	8021684 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xa4>
 802172a:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 802172e:	4282      	cmp	r2, r0
 8021730:	d915      	bls.n	802175e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 8021732:	eb00 060a 	add.w	r6, r0, sl
 8021736:	4286      	cmp	r6, r0
 8021738:	d906      	bls.n	8021748 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x168>
 802173a:	f814 3b01 	ldrb.w	r3, [r4], #1
 802173e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8021742:	f820 3b02 	strh.w	r3, [r0], #2
 8021746:	e7f6      	b.n	8021736 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x156>
 8021748:	882b      	ldrh	r3, [r5, #0]
 802174a:	eba3 0308 	sub.w	r3, r3, r8
 802174e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8021752:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8021756:	eba3 0308 	sub.w	r3, r3, r8
 802175a:	441c      	add	r4, r3
 802175c:	e7e7      	b.n	802172e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14e>
 802175e:	4b04      	ldr	r3, [pc, #16]	; (8021770 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 8021760:	6818      	ldr	r0, [r3, #0]
 8021762:	6803      	ldr	r3, [r0, #0]
 8021764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021766:	4798      	blx	r3
 8021768:	b007      	add	sp, #28
 802176a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802176e:	bf00      	nop
 8021770:	200177c4 	.word	0x200177c4
 8021774:	200177be 	.word	0x200177be

08021778 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 8021778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802177c:	b091      	sub	sp, #68	; 0x44
 802177e:	4680      	mov	r8, r0
 8021780:	460f      	mov	r7, r1
 8021782:	4614      	mov	r4, r2
 8021784:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
 8021788:	2d00      	cmp	r5, #0
 802178a:	d051      	beq.n	8021830 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 802178c:	6810      	ldr	r0, [r2, #0]
 802178e:	ae0c      	add	r6, sp, #48	; 0x30
 8021790:	6851      	ldr	r1, [r2, #4]
 8021792:	f8df 9200 	ldr.w	r9, [pc, #512]	; 8021994 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>
 8021796:	c603      	stmia	r6!, {r0, r1}
 8021798:	6818      	ldr	r0, [r3, #0]
 802179a:	ae0e      	add	r6, sp, #56	; 0x38
 802179c:	6859      	ldr	r1, [r3, #4]
 802179e:	c603      	stmia	r6!, {r0, r1}
 80217a0:	a80c      	add	r0, sp, #48	; 0x30
 80217a2:	f7f9 fc03 	bl	801afac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80217a6:	4621      	mov	r1, r4
 80217a8:	a80e      	add	r0, sp, #56	; 0x38
 80217aa:	f7f9 fc43 	bl	801b034 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80217ae:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 80217b2:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 80217b6:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 80217ba:	f8d9 0000 	ldr.w	r0, [r9]
 80217be:	fb11 2103 	smlabb	r1, r1, r3, r2
 80217c2:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	; 0x3c
 80217c6:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 80217ca:	eb08 0401 	add.w	r4, r8, r1
 80217ce:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 80217d2:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 8021998 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x220>
 80217d6:	440a      	add	r2, r1
 80217d8:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 80217dc:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 80217e0:	4413      	add	r3, r2
 80217e2:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 80217e6:	6803      	ldr	r3, [r0, #0]
 80217e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80217ea:	4798      	blx	r3
 80217ec:	f010 0f80 	tst.w	r0, #128	; 0x80
 80217f0:	f8d9 0000 	ldr.w	r0, [r9]
 80217f4:	d01f      	beq.n	8021836 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xbe>
 80217f6:	2200      	movs	r2, #0
 80217f8:	6801      	ldr	r1, [r0, #0]
 80217fa:	b2b6      	uxth	r6, r6
 80217fc:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8021800:	e9cd 2208 	strd	r2, r2, [sp, #32]
 8021804:	220b      	movs	r2, #11
 8021806:	9207      	str	r2, [sp, #28]
 8021808:	f8b8 2000 	ldrh.w	r2, [r8]
 802180c:	9601      	str	r6, [sp, #4]
 802180e:	9206      	str	r2, [sp, #24]
 8021810:	2201      	movs	r2, #1
 8021812:	e9cd 5204 	strd	r5, r2, [sp, #16]
 8021816:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 802181a:	9203      	str	r2, [sp, #12]
 802181c:	fa1f f28a 	uxth.w	r2, sl
 8021820:	9202      	str	r2, [sp, #8]
 8021822:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8021826:	9200      	str	r2, [sp, #0]
 8021828:	463a      	mov	r2, r7
 802182a:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 802182c:	4621      	mov	r1, r4
 802182e:	47a8      	blx	r5
 8021830:	b011      	add	sp, #68	; 0x44
 8021832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021836:	6803      	ldr	r3, [r0, #0]
 8021838:	ea4f 0946 	mov.w	r9, r6, lsl #1
 802183c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802183e:	4798      	blx	r3
 8021840:	f8b8 2000 	ldrh.w	r2, [r8]
 8021844:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8021848:	2dff      	cmp	r5, #255	; 0xff
 802184a:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 802184e:	fb0a fa02 	mul.w	sl, sl, r2
 8021852:	fb02 1303 	mla	r3, r2, r3, r1
 8021856:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 802185a:	d062      	beq.n	8021922 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 802185c:	ea6f 0c05 	mvn.w	ip, r5
 8021860:	eb00 034a 	add.w	r3, r0, sl, lsl #1
 8021864:	b2ad      	uxth	r5, r5
 8021866:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 802186a:	fa5f fc8c 	uxtb.w	ip, ip
 802186e:	930a      	str	r3, [sp, #40]	; 0x28
 8021870:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021872:	4298      	cmp	r0, r3
 8021874:	f080 8085 	bcs.w	8021982 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 8021878:	eb00 0b09 	add.w	fp, r0, r9
 802187c:	4558      	cmp	r0, fp
 802187e:	d246      	bcs.n	802190e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x196>
 8021880:	f814 eb01 	ldrb.w	lr, [r4], #1
 8021884:	2303      	movs	r3, #3
 8021886:	2204      	movs	r2, #4
 8021888:	fb13 2e0e 	smlabb	lr, r3, lr, r2
 802188c:	8803      	ldrh	r3, [r0, #0]
 802188e:	eb07 0a0e 	add.w	sl, r7, lr
 8021892:	1219      	asrs	r1, r3, #8
 8021894:	10da      	asrs	r2, r3, #3
 8021896:	f817 e00e 	ldrb.w	lr, [r7, lr]
 802189a:	f89a 8002 	ldrb.w	r8, [sl, #2]
 802189e:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80218a2:	00db      	lsls	r3, r3, #3
 80218a4:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80218a8:	fb18 f805 	smulbb	r8, r8, r5
 80218ac:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 80218b0:	fb1e fe05 	smulbb	lr, lr, r5
 80218b4:	b2db      	uxtb	r3, r3
 80218b6:	fb01 810c 	mla	r1, r1, ip, r8
 80218ba:	f89a 8001 	ldrb.w	r8, [sl, #1]
 80218be:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 80218c2:	fb18 f805 	smulbb	r8, r8, r5
 80218c6:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 80218ca:	b289      	uxth	r1, r1
 80218cc:	fb02 820c 	mla	r2, r2, ip, r8
 80218d0:	fb03 e30c 	mla	r3, r3, ip, lr
 80218d4:	f101 0801 	add.w	r8, r1, #1
 80218d8:	b292      	uxth	r2, r2
 80218da:	b29b      	uxth	r3, r3
 80218dc:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 80218e0:	f102 0801 	add.w	r8, r2, #1
 80218e4:	f103 0e01 	add.w	lr, r3, #1
 80218e8:	eb08 2812 	add.w	r8, r8, r2, lsr #8
 80218ec:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 80218f0:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 80218f4:	ea4f 1858 	mov.w	r8, r8, lsr #5
 80218f8:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 80218fc:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8021900:	ea4e 0101 	orr.w	r1, lr, r1
 8021904:	ea41 0108 	orr.w	r1, r1, r8
 8021908:	f820 1b02 	strh.w	r1, [r0], #2
 802190c:	e7b6      	b.n	802187c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x104>
 802190e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021910:	881b      	ldrh	r3, [r3, #0]
 8021912:	1b9b      	subs	r3, r3, r6
 8021914:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8021918:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 802191c:	1b9b      	subs	r3, r3, r6
 802191e:	441c      	add	r4, r3
 8021920:	e7a6      	b.n	8021870 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xf8>
 8021922:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
 8021926:	2203      	movs	r2, #3
 8021928:	2504      	movs	r5, #4
 802192a:	4919      	ldr	r1, [pc, #100]	; (8021990 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x218>)
 802192c:	4550      	cmp	r0, sl
 802192e:	d228      	bcs.n	8021982 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 8021930:	eb00 0c09 	add.w	ip, r0, r9
 8021934:	4560      	cmp	r0, ip
 8021936:	4623      	mov	r3, r4
 8021938:	d219      	bcs.n	802196e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1f6>
 802193a:	f893 e000 	ldrb.w	lr, [r3]
 802193e:	3401      	adds	r4, #1
 8021940:	fb12 5e0e 	smlabb	lr, r2, lr, r5
 8021944:	eb07 0b0e 	add.w	fp, r7, lr
 8021948:	f817 e00e 	ldrb.w	lr, [r7, lr]
 802194c:	f89b 3002 	ldrb.w	r3, [fp, #2]
 8021950:	f89b b001 	ldrb.w	fp, [fp, #1]
 8021954:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 8021958:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 802195c:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8021960:	ea43 030b 	orr.w	r3, r3, fp
 8021964:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
 8021968:	f820 3b02 	strh.w	r3, [r0], #2
 802196c:	e7e2      	b.n	8021934 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1bc>
 802196e:	f8b8 3000 	ldrh.w	r3, [r8]
 8021972:	1b9b      	subs	r3, r3, r6
 8021974:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8021978:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 802197c:	1b9b      	subs	r3, r3, r6
 802197e:	441c      	add	r4, r3
 8021980:	e7d4      	b.n	802192c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 8021982:	4b04      	ldr	r3, [pc, #16]	; (8021994 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>)
 8021984:	6818      	ldr	r0, [r3, #0]
 8021986:	6803      	ldr	r3, [r0, #0]
 8021988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802198a:	4798      	blx	r3
 802198c:	e750      	b.n	8021830 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 802198e:	bf00      	nop
 8021990:	fffff800 	.word	0xfffff800
 8021994:	200177c4 	.word	0x200177c4
 8021998:	200177be 	.word	0x200177be

0802199c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 802199c:	b430      	push	{r4, r5}
 802199e:	780d      	ldrb	r5, [r1, #0]
 80219a0:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80219a4:	2d01      	cmp	r5, #1
 80219a6:	d00a      	beq.n	80219be <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x22>
 80219a8:	d305      	bcc.n	80219b6 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 80219aa:	2d02      	cmp	r5, #2
 80219ac:	d10b      	bne.n	80219c6 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2a>
 80219ae:	9402      	str	r4, [sp, #8]
 80219b0:	bc30      	pop	{r4, r5}
 80219b2:	f7ff be15 	b.w	80215e0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 80219b6:	9402      	str	r4, [sp, #8]
 80219b8:	bc30      	pop	{r4, r5}
 80219ba:	f7ff bd2b 	b.w	8021414 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 80219be:	9402      	str	r4, [sp, #8]
 80219c0:	bc30      	pop	{r4, r5}
 80219c2:	f7ff bed9 	b.w	8021778 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 80219c6:	bc30      	pop	{r4, r5}
 80219c8:	4770      	bx	lr
	...

080219cc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 80219cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80219d0:	b087      	sub	sp, #28
 80219d2:	4604      	mov	r4, r0
 80219d4:	460e      	mov	r6, r1
 80219d6:	6810      	ldr	r0, [r2, #0]
 80219d8:	6851      	ldr	r1, [r2, #4]
 80219da:	ad02      	add	r5, sp, #8
 80219dc:	4617      	mov	r7, r2
 80219de:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 80219e2:	f8df 9230 	ldr.w	r9, [pc, #560]	; 8021c14 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 80219e6:	c503      	stmia	r5!, {r0, r1}
 80219e8:	6818      	ldr	r0, [r3, #0]
 80219ea:	ad04      	add	r5, sp, #16
 80219ec:	6859      	ldr	r1, [r3, #4]
 80219ee:	c503      	stmia	r5!, {r0, r1}
 80219f0:	a802      	add	r0, sp, #8
 80219f2:	f7f9 fadb 	bl	801afac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80219f6:	4639      	mov	r1, r7
 80219f8:	a804      	add	r0, sp, #16
 80219fa:	f7f9 fb1b 	bl	801b034 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80219fe:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8021a02:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8021a06:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8021a0a:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 8021a0e:	fb11 2103 	smlabb	r1, r1, r3, r2
 8021a12:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 8021a16:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 8021a1a:	440e      	add	r6, r1
 8021a1c:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8021a20:	440a      	add	r2, r1
 8021a22:	f8ad 2010 	strh.w	r2, [sp, #16]
 8021a26:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8021a2a:	4413      	add	r3, r2
 8021a2c:	f8ad 3012 	strh.w	r3, [sp, #18]
 8021a30:	4b77      	ldr	r3, [pc, #476]	; (8021c10 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 8021a32:	6818      	ldr	r0, [r3, #0]
 8021a34:	6803      	ldr	r3, [r0, #0]
 8021a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021a38:	4798      	blx	r3
 8021a3a:	f8b9 b000 	ldrh.w	fp, [r9]
 8021a3e:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8021a42:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8021a46:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8021a4a:	fb05 f50b 	mul.w	r5, r5, fp
 8021a4e:	fb0b 2303 	mla	r3, fp, r3, r2
 8021a52:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8021a56:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8021a5a:	9300      	str	r3, [sp, #0]
 8021a5c:	d069      	beq.n	8021b32 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
 8021a5e:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 8021a62:	4558      	cmp	r0, fp
 8021a64:	f080 80cc 	bcs.w	8021c00 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 8021a68:	9b00      	ldr	r3, [sp, #0]
 8021a6a:	4631      	mov	r1, r6
 8021a6c:	18c3      	adds	r3, r0, r3
 8021a6e:	9301      	str	r3, [sp, #4]
 8021a70:	9b01      	ldr	r3, [sp, #4]
 8021a72:	4298      	cmp	r0, r3
 8021a74:	d24f      	bcs.n	8021b16 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
 8021a76:	f811 2b01 	ldrb.w	r2, [r1], #1
 8021a7a:	2a00      	cmp	r2, #0
 8021a7c:	d048      	beq.n	8021b10 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 8021a7e:	fb0a f202 	mul.w	r2, sl, r2
 8021a82:	1c53      	adds	r3, r2, #1
 8021a84:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8021a88:	121b      	asrs	r3, r3, #8
 8021a8a:	d041      	beq.n	8021b10 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 8021a8c:	8802      	ldrh	r2, [r0, #0]
 8021a8e:	b29e      	uxth	r6, r3
 8021a90:	f8b4 c000 	ldrh.w	ip, [r4]
 8021a94:	43db      	mvns	r3, r3
 8021a96:	1215      	asrs	r5, r2, #8
 8021a98:	b2db      	uxtb	r3, r3
 8021a9a:	ea4f 272c 	mov.w	r7, ip, asr #8
 8021a9e:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8021aa2:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 8021aa6:	fb15 f503 	smulbb	r5, r5, r3
 8021aaa:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8021aae:	00d2      	lsls	r2, r2, #3
 8021ab0:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8021ab4:	fb07 5706 	mla	r7, r7, r6, r5
 8021ab8:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8021abc:	b2d2      	uxtb	r2, r2
 8021abe:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8021ac2:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8021ac6:	fb1e fe03 	smulbb	lr, lr, r3
 8021aca:	b2bf      	uxth	r7, r7
 8021acc:	fb12 f203 	smulbb	r2, r2, r3
 8021ad0:	fa5f fc8c 	uxtb.w	ip, ip
 8021ad4:	fb05 e506 	mla	r5, r5, r6, lr
 8021ad8:	f107 0e01 	add.w	lr, r7, #1
 8021adc:	fb0c 2c06 	mla	ip, ip, r6, r2
 8021ae0:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8021ae4:	fa1f fc8c 	uxth.w	ip, ip
 8021ae8:	f407 4e78 	and.w	lr, r7, #63488	; 0xf800
 8021aec:	b2ad      	uxth	r5, r5
 8021aee:	f10c 0701 	add.w	r7, ip, #1
 8021af2:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8021af6:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8021afa:	ea47 070e 	orr.w	r7, r7, lr
 8021afe:	f105 0e01 	add.w	lr, r5, #1
 8021b02:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 8021b06:	096d      	lsrs	r5, r5, #5
 8021b08:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8021b0c:	432f      	orrs	r7, r5
 8021b0e:	8007      	strh	r7, [r0, #0]
 8021b10:	3002      	adds	r0, #2
 8021b12:	3402      	adds	r4, #2
 8021b14:	e7ac      	b.n	8021a70 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 8021b16:	f8b9 3000 	ldrh.w	r3, [r9]
 8021b1a:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8021b1e:	eba3 0308 	sub.w	r3, r3, r8
 8021b22:	eba6 0608 	sub.w	r6, r6, r8
 8021b26:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8021b2a:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8021b2e:	440e      	add	r6, r1
 8021b30:	e797      	b.n	8021a62 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 8021b32:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8021b36:	42a8      	cmp	r0, r5
 8021b38:	d262      	bcs.n	8021c00 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 8021b3a:	9b00      	ldr	r3, [sp, #0]
 8021b3c:	4631      	mov	r1, r6
 8021b3e:	eb00 0b03 	add.w	fp, r0, r3
 8021b42:	4558      	cmp	r0, fp
 8021b44:	d24e      	bcs.n	8021be4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 8021b46:	f811 3b01 	ldrb.w	r3, [r1], #1
 8021b4a:	b12b      	cbz	r3, 8021b58 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 8021b4c:	2bff      	cmp	r3, #255	; 0xff
 8021b4e:	f8b4 e000 	ldrh.w	lr, [r4]
 8021b52:	d104      	bne.n	8021b5e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
 8021b54:	f8a0 e000 	strh.w	lr, [r0]
 8021b58:	3002      	adds	r0, #2
 8021b5a:	3402      	adds	r4, #2
 8021b5c:	e7f1      	b.n	8021b42 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
 8021b5e:	8802      	ldrh	r2, [r0, #0]
 8021b60:	b29f      	uxth	r7, r3
 8021b62:	43db      	mvns	r3, r3
 8021b64:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8021b68:	1216      	asrs	r6, r2, #8
 8021b6a:	b2db      	uxtb	r3, r3
 8021b6c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8021b70:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8021b74:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 8021b78:	00d2      	lsls	r2, r2, #3
 8021b7a:	fb16 f603 	smulbb	r6, r6, r3
 8021b7e:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8021b82:	b2d2      	uxtb	r2, r2
 8021b84:	fb0c 6c07 	mla	ip, ip, r7, r6
 8021b88:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8021b8c:	fb1a fa03 	smulbb	sl, sl, r3
 8021b90:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8021b94:	fa1f fc8c 	uxth.w	ip, ip
 8021b98:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8021b9c:	fb12 f303 	smulbb	r3, r2, r3
 8021ba0:	fa5f fe8e 	uxtb.w	lr, lr
 8021ba4:	fb06 a607 	mla	r6, r6, r7, sl
 8021ba8:	f10c 0201 	add.w	r2, ip, #1
 8021bac:	fb0e 3307 	mla	r3, lr, r7, r3
 8021bb0:	b2b6      	uxth	r6, r6
 8021bb2:	b29b      	uxth	r3, r3
 8021bb4:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8021bb8:	f106 0a01 	add.w	sl, r6, #1
 8021bbc:	f40c 4278 	and.w	r2, ip, #63488	; 0xf800
 8021bc0:	f103 0c01 	add.w	ip, r3, #1
 8021bc4:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 8021bc8:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8021bcc:	0976      	lsrs	r6, r6, #5
 8021bce:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8021bd2:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8021bd6:	ea4c 0c02 	orr.w	ip, ip, r2
 8021bda:	ea4c 0c06 	orr.w	ip, ip, r6
 8021bde:	f8a0 c000 	strh.w	ip, [r0]
 8021be2:	e7b9      	b.n	8021b58 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 8021be4:	f8b9 3000 	ldrh.w	r3, [r9]
 8021be8:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8021bec:	eba3 0308 	sub.w	r3, r3, r8
 8021bf0:	eba6 0608 	sub.w	r6, r6, r8
 8021bf4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8021bf8:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8021bfc:	440e      	add	r6, r1
 8021bfe:	e79a      	b.n	8021b36 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
 8021c00:	4b03      	ldr	r3, [pc, #12]	; (8021c10 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 8021c02:	6818      	ldr	r0, [r3, #0]
 8021c04:	6803      	ldr	r3, [r0, #0]
 8021c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021c08:	4798      	blx	r3
 8021c0a:	b007      	add	sp, #28
 8021c0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021c10:	200177c4 	.word	0x200177c4
 8021c14:	200177be 	.word	0x200177be

08021c18 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8021c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021c1c:	b089      	sub	sp, #36	; 0x24
 8021c1e:	4682      	mov	sl, r0
 8021c20:	460f      	mov	r7, r1
 8021c22:	4691      	mov	r9, r2
 8021c24:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 8021c28:	4698      	mov	r8, r3
 8021c2a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8021c2c:	2e00      	cmp	r6, #0
 8021c2e:	d036      	beq.n	8021c9e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 8021c30:	4608      	mov	r0, r1
 8021c32:	f7fc f861 	bl	801dcf8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8021c36:	4605      	mov	r5, r0
 8021c38:	4638      	mov	r0, r7
 8021c3a:	f7fc f891 	bl	801dd60 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8021c3e:	f8ad 000e 	strh.w	r0, [sp, #14]
 8021c42:	4638      	mov	r0, r7
 8021c44:	f8ad 9008 	strh.w	r9, [sp, #8]
 8021c48:	f8ad 500c 	strh.w	r5, [sp, #12]
 8021c4c:	f8ad 800a 	strh.w	r8, [sp, #10]
 8021c50:	f7fc f93e 	bl	801ded0 <_ZNK8touchgfx6Bitmap7getDataEv>
 8021c54:	4605      	mov	r5, r0
 8021c56:	4638      	mov	r0, r7
 8021c58:	f7fc f96a 	bl	801df30 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8021c5c:	4681      	mov	r9, r0
 8021c5e:	4638      	mov	r0, r7
 8021c60:	f7fc f9ba 	bl	801dfd8 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8021c64:	280b      	cmp	r0, #11
 8021c66:	d81a      	bhi.n	8021c9e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 8021c68:	e8df f000 	tbb	[pc, r0]
 8021c6c:	1906aebd 	.word	0x1906aebd
 8021c70:	19191919 	.word	0x19191919
 8021c74:	b5191919 	.word	0xb5191919
 8021c78:	4bb0      	ldr	r3, [pc, #704]	; (8021f3c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x324>)
 8021c7a:	6818      	ldr	r0, [r3, #0]
 8021c7c:	6803      	ldr	r3, [r0, #0]
 8021c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021c80:	4798      	blx	r3
 8021c82:	2eff      	cmp	r6, #255	; 0xff
 8021c84:	d121      	bne.n	8021cca <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb2>
 8021c86:	0683      	lsls	r3, r0, #26
 8021c88:	d41f      	bmi.n	8021cca <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb2>
 8021c8a:	4638      	mov	r0, r7
 8021c8c:	f7fc f8e8 	bl	801de60 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8021c90:	b940      	cbnz	r0, 8021ca4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x8c>
 8021c92:	4623      	mov	r3, r4
 8021c94:	aa02      	add	r2, sp, #8
 8021c96:	4629      	mov	r1, r5
 8021c98:	4650      	mov	r0, sl
 8021c9a:	f7ff fa2f 	bl	80210fc <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 8021c9e:	b009      	add	sp, #36	; 0x24
 8021ca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021ca4:	f10d 0818 	add.w	r8, sp, #24
 8021ca8:	4639      	mov	r1, r7
 8021caa:	af04      	add	r7, sp, #16
 8021cac:	4640      	mov	r0, r8
 8021cae:	f7fc f88b 	bl	801ddc8 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8021cb2:	e898 0003 	ldmia.w	r8, {r0, r1}
 8021cb6:	e887 0003 	stmia.w	r7, {r0, r1}
 8021cba:	4638      	mov	r0, r7
 8021cbc:	4621      	mov	r1, r4
 8021cbe:	f7f5 fc69 	bl	8017594 <_ZN8touchgfx4RectaNERKS0_>
 8021cc2:	4638      	mov	r0, r7
 8021cc4:	f7f5 fca9 	bl	801761a <_ZNK8touchgfx4Rect7isEmptyEv>
 8021cc8:	b130      	cbz	r0, 8021cd8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
 8021cca:	4633      	mov	r3, r6
 8021ccc:	4622      	mov	r2, r4
 8021cce:	a902      	add	r1, sp, #8
 8021cd0:	4628      	mov	r0, r5
 8021cd2:	f7ff f92d 	bl	8020f30 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8021cd6:	e7e2      	b.n	8021c9e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 8021cd8:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8021cdc:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8021ce0:	4293      	cmp	r3, r2
 8021ce2:	dd12      	ble.n	8021d0a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xf2>
 8021ce4:	1a9b      	subs	r3, r3, r2
 8021ce6:	f9b4 0000 	ldrsh.w	r0, [r4]
 8021cea:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8021cee:	f8ad 0018 	strh.w	r0, [sp, #24]
 8021cf2:	4628      	mov	r0, r5
 8021cf4:	f8ad 201a 	strh.w	r2, [sp, #26]
 8021cf8:	4642      	mov	r2, r8
 8021cfa:	f8ad 101c 	strh.w	r1, [sp, #28]
 8021cfe:	a902      	add	r1, sp, #8
 8021d00:	f8ad 301e 	strh.w	r3, [sp, #30]
 8021d04:	4633      	mov	r3, r6
 8021d06:	f7ff f913 	bl	8020f30 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8021d0a:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8021d0e:	f9b4 2000 	ldrsh.w	r2, [r4]
 8021d12:	4293      	cmp	r3, r2
 8021d14:	dd12      	ble.n	8021d3c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x124>
 8021d16:	1a9b      	subs	r3, r3, r2
 8021d18:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8021d1c:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8021d20:	f8ad 2018 	strh.w	r2, [sp, #24]
 8021d24:	4642      	mov	r2, r8
 8021d26:	f8ad 001a 	strh.w	r0, [sp, #26]
 8021d2a:	4628      	mov	r0, r5
 8021d2c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8021d30:	23ff      	movs	r3, #255	; 0xff
 8021d32:	f8ad 101e 	strh.w	r1, [sp, #30]
 8021d36:	a902      	add	r1, sp, #8
 8021d38:	f7ff f8fa 	bl	8020f30 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8021d3c:	463b      	mov	r3, r7
 8021d3e:	aa02      	add	r2, sp, #8
 8021d40:	4629      	mov	r1, r5
 8021d42:	4650      	mov	r0, sl
 8021d44:	f7ff f9da 	bl	80210fc <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 8021d48:	88a2      	ldrh	r2, [r4, #4]
 8021d4a:	8823      	ldrh	r3, [r4, #0]
 8021d4c:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8021d50:	4413      	add	r3, r2
 8021d52:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8021d56:	440a      	add	r2, r1
 8021d58:	b29b      	uxth	r3, r3
 8021d5a:	b292      	uxth	r2, r2
 8021d5c:	b218      	sxth	r0, r3
 8021d5e:	b211      	sxth	r1, r2
 8021d60:	4288      	cmp	r0, r1
 8021d62:	dd12      	ble.n	8021d8a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x172>
 8021d64:	1a9b      	subs	r3, r3, r2
 8021d66:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8021d6a:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 8021d6e:	4642      	mov	r2, r8
 8021d70:	f8ad 1018 	strh.w	r1, [sp, #24]
 8021d74:	a902      	add	r1, sp, #8
 8021d76:	f8ad 301c 	strh.w	r3, [sp, #28]
 8021d7a:	23ff      	movs	r3, #255	; 0xff
 8021d7c:	f8ad 001e 	strh.w	r0, [sp, #30]
 8021d80:	4628      	mov	r0, r5
 8021d82:	f8ad 601a 	strh.w	r6, [sp, #26]
 8021d86:	f7ff f8d3 	bl	8020f30 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8021d8a:	88e2      	ldrh	r2, [r4, #6]
 8021d8c:	8863      	ldrh	r3, [r4, #2]
 8021d8e:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8021d92:	4413      	add	r3, r2
 8021d94:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8021d98:	440a      	add	r2, r1
 8021d9a:	b29b      	uxth	r3, r3
 8021d9c:	b292      	uxth	r2, r2
 8021d9e:	b218      	sxth	r0, r3
 8021da0:	b211      	sxth	r1, r2
 8021da2:	4288      	cmp	r0, r1
 8021da4:	f77f af7b 	ble.w	8021c9e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 8021da8:	1a9b      	subs	r3, r3, r2
 8021daa:	f9b4 6000 	ldrsh.w	r6, [r4]
 8021dae:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8021db2:	4642      	mov	r2, r8
 8021db4:	f8ad 301e 	strh.w	r3, [sp, #30]
 8021db8:	23ff      	movs	r3, #255	; 0xff
 8021dba:	f8ad 6018 	strh.w	r6, [sp, #24]
 8021dbe:	f8ad 101a 	strh.w	r1, [sp, #26]
 8021dc2:	f8ad 001c 	strh.w	r0, [sp, #28]
 8021dc6:	e782      	b.n	8021cce <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb6>
 8021dc8:	4633      	mov	r3, r6
 8021dca:	4622      	mov	r2, r4
 8021dcc:	a902      	add	r1, sp, #8
 8021dce:	4628      	mov	r0, r5
 8021dd0:	f7ff fa04 	bl	80211dc <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 8021dd4:	e763      	b.n	8021c9e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 8021dd6:	9600      	str	r6, [sp, #0]
 8021dd8:	4623      	mov	r3, r4
 8021dda:	aa02      	add	r2, sp, #8
 8021ddc:	4649      	mov	r1, r9
 8021dde:	4628      	mov	r0, r5
 8021de0:	f7ff fddc 	bl	802199c <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 8021de4:	e75b      	b.n	8021c9e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 8021de6:	4638      	mov	r0, r7
 8021de8:	f7fc f83a 	bl	801de60 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8021dec:	b950      	cbnz	r0, 8021e04 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1ec>
 8021dee:	f8da 3000 	ldr.w	r3, [sl]
 8021df2:	aa02      	add	r2, sp, #8
 8021df4:	4629      	mov	r1, r5
 8021df6:	e9cd 6000 	strd	r6, r0, [sp]
 8021dfa:	4650      	mov	r0, sl
 8021dfc:	68de      	ldr	r6, [r3, #12]
 8021dfe:	4623      	mov	r3, r4
 8021e00:	47b0      	blx	r6
 8021e02:	e74c      	b.n	8021c9e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 8021e04:	f10d 0818 	add.w	r8, sp, #24
 8021e08:	4639      	mov	r1, r7
 8021e0a:	af04      	add	r7, sp, #16
 8021e0c:	4640      	mov	r0, r8
 8021e0e:	f7fb ffdb 	bl	801ddc8 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8021e12:	e898 0003 	ldmia.w	r8, {r0, r1}
 8021e16:	e887 0003 	stmia.w	r7, {r0, r1}
 8021e1a:	4638      	mov	r0, r7
 8021e1c:	4621      	mov	r1, r4
 8021e1e:	f7f5 fbb9 	bl	8017594 <_ZN8touchgfx4RectaNERKS0_>
 8021e22:	4638      	mov	r0, r7
 8021e24:	f7f5 fbf9 	bl	801761a <_ZNK8touchgfx4Rect7isEmptyEv>
 8021e28:	b138      	cbz	r0, 8021e3a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x222>
 8021e2a:	4623      	mov	r3, r4
 8021e2c:	9600      	str	r6, [sp, #0]
 8021e2e:	aa02      	add	r2, sp, #8
 8021e30:	4649      	mov	r1, r9
 8021e32:	4628      	mov	r0, r5
 8021e34:	f7ff fdca 	bl	80219cc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8021e38:	e731      	b.n	8021c9e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 8021e3a:	f8da 3000 	ldr.w	r3, [sl]
 8021e3e:	aa02      	add	r2, sp, #8
 8021e40:	4629      	mov	r1, r5
 8021e42:	e9cd 6000 	strd	r6, r0, [sp]
 8021e46:	4650      	mov	r0, sl
 8021e48:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 8021e4c:	463b      	mov	r3, r7
 8021e4e:	47d8      	blx	fp
 8021e50:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8021e54:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8021e58:	4293      	cmp	r3, r2
 8021e5a:	dd13      	ble.n	8021e84 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x26c>
 8021e5c:	f9b4 0000 	ldrsh.w	r0, [r4]
 8021e60:	1a9b      	subs	r3, r3, r2
 8021e62:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8021e66:	f8ad 0018 	strh.w	r0, [sp, #24]
 8021e6a:	4628      	mov	r0, r5
 8021e6c:	f8ad 201a 	strh.w	r2, [sp, #26]
 8021e70:	aa02      	add	r2, sp, #8
 8021e72:	f8ad 101c 	strh.w	r1, [sp, #28]
 8021e76:	4649      	mov	r1, r9
 8021e78:	f8ad 301e 	strh.w	r3, [sp, #30]
 8021e7c:	4643      	mov	r3, r8
 8021e7e:	9600      	str	r6, [sp, #0]
 8021e80:	f7ff fda4 	bl	80219cc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8021e84:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8021e88:	f9b4 2000 	ldrsh.w	r2, [r4]
 8021e8c:	4293      	cmp	r3, r2
 8021e8e:	dd13      	ble.n	8021eb8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2a0>
 8021e90:	1a9b      	subs	r3, r3, r2
 8021e92:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8021e96:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8021e9a:	f8ad 2018 	strh.w	r2, [sp, #24]
 8021e9e:	aa02      	add	r2, sp, #8
 8021ea0:	f8ad 001a 	strh.w	r0, [sp, #26]
 8021ea4:	4628      	mov	r0, r5
 8021ea6:	f8ad 301c 	strh.w	r3, [sp, #28]
 8021eaa:	4643      	mov	r3, r8
 8021eac:	f8ad 101e 	strh.w	r1, [sp, #30]
 8021eb0:	4649      	mov	r1, r9
 8021eb2:	9600      	str	r6, [sp, #0]
 8021eb4:	f7ff fd8a 	bl	80219cc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8021eb8:	88a2      	ldrh	r2, [r4, #4]
 8021eba:	8823      	ldrh	r3, [r4, #0]
 8021ebc:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8021ec0:	4413      	add	r3, r2
 8021ec2:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8021ec6:	440a      	add	r2, r1
 8021ec8:	b29b      	uxth	r3, r3
 8021eca:	b292      	uxth	r2, r2
 8021ecc:	b218      	sxth	r0, r3
 8021ece:	b211      	sxth	r1, r2
 8021ed0:	4288      	cmp	r0, r1
 8021ed2:	dd13      	ble.n	8021efc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2e4>
 8021ed4:	1a9b      	subs	r3, r3, r2
 8021ed6:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8021eda:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
 8021ede:	aa02      	add	r2, sp, #8
 8021ee0:	f8ad 1018 	strh.w	r1, [sp, #24]
 8021ee4:	4649      	mov	r1, r9
 8021ee6:	f8ad 301c 	strh.w	r3, [sp, #28]
 8021eea:	4643      	mov	r3, r8
 8021eec:	f8ad 001e 	strh.w	r0, [sp, #30]
 8021ef0:	4628      	mov	r0, r5
 8021ef2:	9600      	str	r6, [sp, #0]
 8021ef4:	f8ad 701a 	strh.w	r7, [sp, #26]
 8021ef8:	f7ff fd68 	bl	80219cc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8021efc:	88e2      	ldrh	r2, [r4, #6]
 8021efe:	8863      	ldrh	r3, [r4, #2]
 8021f00:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8021f04:	4413      	add	r3, r2
 8021f06:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8021f0a:	440a      	add	r2, r1
 8021f0c:	b29b      	uxth	r3, r3
 8021f0e:	b292      	uxth	r2, r2
 8021f10:	b218      	sxth	r0, r3
 8021f12:	b211      	sxth	r1, r2
 8021f14:	4288      	cmp	r0, r1
 8021f16:	f77f aec2 	ble.w	8021c9e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 8021f1a:	f9b4 7000 	ldrsh.w	r7, [r4]
 8021f1e:	1a9b      	subs	r3, r3, r2
 8021f20:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8021f24:	f8ad 301e 	strh.w	r3, [sp, #30]
 8021f28:	4643      	mov	r3, r8
 8021f2a:	f8ad 7018 	strh.w	r7, [sp, #24]
 8021f2e:	f8ad 101a 	strh.w	r1, [sp, #26]
 8021f32:	f8ad 001c 	strh.w	r0, [sp, #28]
 8021f36:	9600      	str	r6, [sp, #0]
 8021f38:	e779      	b.n	8021e2e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x216>
 8021f3a:	bf00      	nop
 8021f3c:	200177c4 	.word	0x200177c4

08021f40 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 8021f40:	b180      	cbz	r0, 8021f64 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x24>
 8021f42:	2903      	cmp	r1, #3
 8021f44:	d81c      	bhi.n	8021f80 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 8021f46:	e8df f001 	tbb	[pc, r1]
 8021f4a:	1d02      	.short	0x1d02
 8021f4c:	1f08      	.short	0x1f08
 8021f4e:	4b10      	ldr	r3, [pc, #64]	; (8021f90 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8021f50:	8818      	ldrh	r0, [r3, #0]
 8021f52:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8021f56:	4240      	negs	r0, r0
 8021f58:	4770      	bx	lr
 8021f5a:	4b0d      	ldr	r3, [pc, #52]	; (8021f90 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8021f5c:	8818      	ldrh	r0, [r3, #0]
 8021f5e:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8021f62:	4770      	bx	lr
 8021f64:	2903      	cmp	r1, #3
 8021f66:	d80b      	bhi.n	8021f80 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 8021f68:	a301      	add	r3, pc, #4	; (adr r3, 8021f70 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x30>)
 8021f6a:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8021f6e:	bf00      	nop
 8021f70:	08021f85 	.word	0x08021f85
 8021f74:	08021f5b 	.word	0x08021f5b
 8021f78:	08021f89 	.word	0x08021f89
 8021f7c:	08021f4f 	.word	0x08021f4f
 8021f80:	2000      	movs	r0, #0
 8021f82:	4770      	bx	lr
 8021f84:	2001      	movs	r0, #1
 8021f86:	4770      	bx	lr
 8021f88:	f04f 30ff 	mov.w	r0, #4294967295
 8021f8c:	4770      	bx	lr
 8021f8e:	bf00      	nop
 8021f90:	200177be 	.word	0x200177be

08021f94 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 8021f94:	b180      	cbz	r0, 8021fb8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x24>
 8021f96:	2903      	cmp	r1, #3
 8021f98:	d81c      	bhi.n	8021fd4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 8021f9a:	e8df f001 	tbb	[pc, r1]
 8021f9e:	021d      	.short	0x021d
 8021fa0:	071f      	.short	0x071f
 8021fa2:	4b10      	ldr	r3, [pc, #64]	; (8021fe4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 8021fa4:	8818      	ldrh	r0, [r3, #0]
 8021fa6:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8021faa:	4770      	bx	lr
 8021fac:	4b0d      	ldr	r3, [pc, #52]	; (8021fe4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 8021fae:	8818      	ldrh	r0, [r3, #0]
 8021fb0:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8021fb4:	4240      	negs	r0, r0
 8021fb6:	4770      	bx	lr
 8021fb8:	2903      	cmp	r1, #3
 8021fba:	d80b      	bhi.n	8021fd4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 8021fbc:	a301      	add	r3, pc, #4	; (adr r3, 8021fc4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x30>)
 8021fbe:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8021fc2:	bf00      	nop
 8021fc4:	08021fa3 	.word	0x08021fa3
 8021fc8:	08021fdd 	.word	0x08021fdd
 8021fcc:	08021fad 	.word	0x08021fad
 8021fd0:	08021fd9 	.word	0x08021fd9
 8021fd4:	2000      	movs	r0, #0
 8021fd6:	4770      	bx	lr
 8021fd8:	2001      	movs	r0, #1
 8021fda:	4770      	bx	lr
 8021fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8021fe0:	4770      	bx	lr
 8021fe2:	bf00      	nop
 8021fe4:	200177be 	.word	0x200177be

08021fe8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 8021fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021fec:	b099      	sub	sp, #100	; 0x64
 8021fee:	910b      	str	r1, [sp, #44]	; 0x2c
 8021ff0:	a914      	add	r1, sp, #80	; 0x50
 8021ff2:	f9bd 4088 	ldrsh.w	r4, [sp, #136]	; 0x88
 8021ff6:	f8bd 5090 	ldrh.w	r5, [sp, #144]	; 0x90
 8021ffa:	f8bd 6094 	ldrh.w	r6, [sp, #148]	; 0x94
 8021ffe:	f89d 80ac 	ldrb.w	r8, [sp, #172]	; 0xac
 8022002:	f89d a0b4 	ldrb.w	sl, [sp, #180]	; 0xb4
 8022006:	e881 000c 	stmia.w	r1, {r2, r3}
 802200a:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
 802200e:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	; 0x98
 8022012:	9309      	str	r3, [sp, #36]	; 0x24
 8022014:	f891 900d 	ldrb.w	r9, [r1, #13]
 8022018:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 802201c:	ea4f 1749 	mov.w	r7, r9, lsl #5
 8022020:	9310      	str	r3, [sp, #64]	; 0x40
 8022022:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
 8022026:	930c      	str	r3, [sp, #48]	; 0x30
 8022028:	f407 7380 	and.w	r3, r7, #256	; 0x100
 802202c:	798f      	ldrb	r7, [r1, #6]
 802202e:	431f      	orrs	r7, r3
 8022030:	f000 8195 	beq.w	802235e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 8022034:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8022038:	f409 7380 	and.w	r3, r9, #256	; 0x100
 802203c:	f891 9007 	ldrb.w	r9, [r1, #7]
 8022040:	ea59 0903 	orrs.w	r9, r9, r3
 8022044:	f000 818b 	beq.w	802235e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 8022048:	f991 3009 	ldrsb.w	r3, [r1, #9]
 802204c:	b29b      	uxth	r3, r3
 802204e:	2d00      	cmp	r5, #0
 8022050:	f000 812e 	beq.w	80222b0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c8>
 8022054:	1aed      	subs	r5, r5, r3
 8022056:	b2ad      	uxth	r5, r5
 8022058:	042b      	lsls	r3, r5, #16
 802205a:	d502      	bpl.n	8022062 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 802205c:	1b64      	subs	r4, r4, r5
 802205e:	2500      	movs	r5, #0
 8022060:	b224      	sxth	r4, r4
 8022062:	f9b2 1000 	ldrsh.w	r1, [r2]
 8022066:	a814      	add	r0, sp, #80	; 0x50
 8022068:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 802206c:	428c      	cmp	r4, r1
 802206e:	b28b      	uxth	r3, r1
 8022070:	bfbf      	itttt	lt
 8022072:	18ed      	addlt	r5, r5, r3
 8022074:	1b2c      	sublt	r4, r5, r4
 8022076:	b2a5      	uxthlt	r5, r4
 8022078:	460c      	movlt	r4, r1
 802207a:	8891      	ldrh	r1, [r2, #4]
 802207c:	440b      	add	r3, r1
 802207e:	4621      	mov	r1, r4
 8022080:	b21b      	sxth	r3, r3
 8022082:	930f      	str	r3, [sp, #60]	; 0x3c
 8022084:	88d3      	ldrh	r3, [r2, #6]
 8022086:	8852      	ldrh	r2, [r2, #2]
 8022088:	4413      	add	r3, r2
 802208a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802208c:	b21b      	sxth	r3, r3
 802208e:	930d      	str	r3, [sp, #52]	; 0x34
 8022090:	4bbd      	ldr	r3, [pc, #756]	; (8022388 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>)
 8022092:	f893 b000 	ldrb.w	fp, [r3]
 8022096:	f10b 3cff 	add.w	ip, fp, #4294967295
 802209a:	f1dc 0300 	rsbs	r3, ip, #0
 802209e:	eb43 030c 	adc.w	r3, r3, ip
 80220a2:	930e      	str	r3, [sp, #56]	; 0x38
 80220a4:	4653      	mov	r3, sl
 80220a6:	f7f8 fdfb 	bl	801aca0 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 80220aa:	4621      	mov	r1, r4
 80220ac:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
 80220b0:	4653      	mov	r3, sl
 80220b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80220b4:	a814      	add	r0, sp, #80	; 0x50
 80220b6:	f7f8 fe10 	bl	801acda <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 80220ba:	a918      	add	r1, sp, #96	; 0x60
 80220bc:	f821 0d02 	strh.w	r0, [r1, #-2]!
 80220c0:	a817      	add	r0, sp, #92	; 0x5c
 80220c2:	f7f8 ff31 	bl	801af28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 80220c6:	f1ba 0f00 	cmp.w	sl, #0
 80220ca:	f040 80f4 	bne.w	80222b6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
 80220ce:	f1bb 0f01 	cmp.w	fp, #1
 80220d2:	f040 80f8 	bne.w	80222c6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2de>
 80220d6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80220d8:	2b00      	cmp	r3, #0
 80220da:	f040 8145 	bne.w	8022368 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>
 80220de:	b2ba      	uxth	r2, r7
 80220e0:	b905      	cbnz	r5, 80220e4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xfc>
 80220e2:	b16e      	cbz	r6, 8022100 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x118>
 80220e4:	fb06 5302 	mla	r3, r6, r2, r5
 80220e8:	9828      	ldr	r0, [sp, #160]	; 0xa0
 80220ea:	4631      	mov	r1, r6
 80220ec:	fb08 f303 	mul.w	r3, r8, r3
 80220f0:	f003 0607 	and.w	r6, r3, #7
 80220f4:	eb00 03d3 	add.w	r3, r0, r3, lsr #3
 80220f8:	9328      	str	r3, [sp, #160]	; 0xa0
 80220fa:	eba9 0301 	sub.w	r3, r9, r1
 80220fe:	930a      	str	r3, [sp, #40]	; 0x28
 8022100:	4651      	mov	r1, sl
 8022102:	980e      	ldr	r0, [sp, #56]	; 0x38
 8022104:	f7ff ff1c 	bl	8021f40 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 8022108:	4681      	mov	r9, r0
 802210a:	980e      	ldr	r0, [sp, #56]	; 0x38
 802210c:	f7ff ff42 	bl	8021f94 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 8022110:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022112:	9909      	ldr	r1, [sp, #36]	; 0x24
 8022114:	4683      	mov	fp, r0
 8022116:	eba3 0a01 	sub.w	sl, r3, r1
 802211a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802211c:	459a      	cmp	sl, r3
 802211e:	bfa8      	it	ge
 8022120:	469a      	movge	sl, r3
 8022122:	f1ba 0f00 	cmp.w	sl, #0
 8022126:	f340 811a 	ble.w	802235e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 802212a:	1b64      	subs	r4, r4, r5
 802212c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802212e:	1b1c      	subs	r4, r3, r4
 8022130:	42bc      	cmp	r4, r7
 8022132:	bfd4      	ite	le
 8022134:	ebc5 0504 	rsble	r5, r5, r4
 8022138:	ebc5 0507 	rsbgt	r5, r5, r7
 802213c:	2d00      	cmp	r5, #0
 802213e:	f340 810e 	ble.w	802235e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 8022142:	1b52      	subs	r2, r2, r5
 8022144:	fb08 f302 	mul.w	r3, r8, r2
 8022148:	930f      	str	r3, [sp, #60]	; 0x3c
 802214a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802214c:	2b00      	cmp	r3, #0
 802214e:	f040 8116 	bne.w	802237e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x396>
 8022152:	4b8e      	ldr	r3, [pc, #568]	; (802238c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
 8022154:	6818      	ldr	r0, [r3, #0]
 8022156:	6803      	ldr	r3, [r0, #0]
 8022158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802215a:	4798      	blx	r3
 802215c:	2301      	movs	r3, #1
 802215e:	4a8c      	ldr	r2, [pc, #560]	; (8022390 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
 8022160:	fa03 f308 	lsl.w	r3, r3, r8
 8022164:	8811      	ldrh	r1, [r2, #0]
 8022166:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 802216a:	3b01      	subs	r3, #1
 802216c:	b2db      	uxtb	r3, r3
 802216e:	930e      	str	r3, [sp, #56]	; 0x38
 8022170:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 8022174:	fb01 2303 	mla	r3, r1, r3, r2
 8022178:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 802217c:	930a      	str	r3, [sp, #40]	; 0x28
 802217e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022180:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8022184:	9313      	str	r3, [sp, #76]	; 0x4c
 8022186:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022188:	0a19      	lsrs	r1, r3, #8
 802218a:	b2cb      	uxtb	r3, r1
 802218c:	9312      	str	r3, [sp, #72]	; 0x48
 802218e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022190:	b2db      	uxtb	r3, r3
 8022192:	9311      	str	r3, [sp, #68]	; 0x44
 8022194:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022196:	095a      	lsrs	r2, r3, #5
 8022198:	4b7e      	ldr	r3, [pc, #504]	; (8022394 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 802219a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802219e:	400b      	ands	r3, r1
 80221a0:	4313      	orrs	r3, r2
 80221a2:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80221a4:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80221a8:	4313      	orrs	r3, r2
 80221aa:	b29b      	uxth	r3, r3
 80221ac:	9310      	str	r3, [sp, #64]	; 0x40
 80221ae:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80221b0:	781a      	ldrb	r2, [r3, #0]
 80221b2:	ea4f 0349 	mov.w	r3, r9, lsl #1
 80221b6:	fb05 b919 	mls	r9, r5, r9, fp
 80221ba:	4132      	asrs	r2, r6
 80221bc:	fb03 fb05 	mul.w	fp, r3, r5
 80221c0:	930d      	str	r3, [sp, #52]	; 0x34
 80221c2:	b2d2      	uxtb	r2, r2
 80221c4:	eb0b 0b49 	add.w	fp, fp, r9, lsl #1
 80221c8:	f11a 3aff 	adds.w	sl, sl, #4294967295
 80221cc:	f0c0 80f5 	bcc.w	80223ba <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3d2>
 80221d0:	46ae      	mov	lr, r5
 80221d2:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 80221d6:	f11e 3eff 	adds.w	lr, lr, #4294967295
 80221da:	f0c0 80dd 	bcc.w	8022398 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>
 80221de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80221e0:	4013      	ands	r3, r2
 80221e2:	d055      	beq.n	8022290 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 80221e4:	20ff      	movs	r0, #255	; 0xff
 80221e6:	990e      	ldr	r1, [sp, #56]	; 0x38
 80221e8:	fb90 f1f1 	sdiv	r1, r0, r1
 80221ec:	434b      	muls	r3, r1
 80221ee:	2bfe      	cmp	r3, #254	; 0xfe
 80221f0:	dd03      	ble.n	80221fa <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x212>
 80221f2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80221f4:	4281      	cmp	r1, r0
 80221f6:	f000 80c4 	beq.w	8022382 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39a>
 80221fa:	990c      	ldr	r1, [sp, #48]	; 0x30
 80221fc:	f8bc 4000 	ldrh.w	r4, [ip]
 8022200:	fb11 f303 	smulbb	r3, r1, r3
 8022204:	1220      	asrs	r0, r4, #8
 8022206:	b29b      	uxth	r3, r3
 8022208:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802220c:	1c59      	adds	r1, r3, #1
 802220e:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 8022212:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8022216:	10e1      	asrs	r1, r4, #3
 8022218:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802221c:	00e4      	lsls	r4, r4, #3
 802221e:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8022222:	b29f      	uxth	r7, r3
 8022224:	43db      	mvns	r3, r3
 8022226:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 802222a:	b2db      	uxtb	r3, r3
 802222c:	b2e4      	uxtb	r4, r4
 802222e:	9309      	str	r3, [sp, #36]	; 0x24
 8022230:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8022232:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8022236:	fb13 f907 	smulbb	r9, r3, r7
 802223a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802223c:	fb00 9003 	mla	r0, r0, r3, r9
 8022240:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8022242:	fb13 f907 	smulbb	r9, r3, r7
 8022246:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022248:	b280      	uxth	r0, r0
 802224a:	fb01 9103 	mla	r1, r1, r3, r9
 802224e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022250:	fb13 f707 	smulbb	r7, r3, r7
 8022254:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022256:	b289      	uxth	r1, r1
 8022258:	fb04 7403 	mla	r4, r4, r3, r7
 802225c:	1c43      	adds	r3, r0, #1
 802225e:	b2a4      	uxth	r4, r4
 8022260:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8022264:	f104 0901 	add.w	r9, r4, #1
 8022268:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 802226c:	eb09 2914 	add.w	r9, r9, r4, lsr #8
 8022270:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 8022274:	ea49 0000 	orr.w	r0, r9, r0
 8022278:	f101 0901 	add.w	r9, r1, #1
 802227c:	eb09 2911 	add.w	r9, r9, r1, lsr #8
 8022280:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8022284:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8022288:	ea40 0009 	orr.w	r0, r0, r9
 802228c:	f8ac 0000 	strh.w	r0, [ip]
 8022290:	4446      	add	r6, r8
 8022292:	b2b6      	uxth	r6, r6
 8022294:	2e07      	cmp	r6, #7
 8022296:	bf89      	itett	hi
 8022298:	9b28      	ldrhi	r3, [sp, #160]	; 0xa0
 802229a:	fa42 f208 	asrls.w	r2, r2, r8
 802229e:	2600      	movhi	r6, #0
 80222a0:	785a      	ldrbhi	r2, [r3, #1]
 80222a2:	bf8a      	itet	hi
 80222a4:	3301      	addhi	r3, #1
 80222a6:	b2d2      	uxtbls	r2, r2
 80222a8:	9328      	strhi	r3, [sp, #160]	; 0xa0
 80222aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80222ac:	449c      	add	ip, r3
 80222ae:	e792      	b.n	80221d6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ee>
 80222b0:	441c      	add	r4, r3
 80222b2:	b224      	sxth	r4, r4
 80222b4:	e6d5      	b.n	8022062 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 80222b6:	f1ba 0f01 	cmp.w	sl, #1
 80222ba:	f47f af0c 	bne.w	80220d6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 80222be:	f1bb 0f01 	cmp.w	fp, #1
 80222c2:	f47f af08 	bne.w	80220d6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 80222c6:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 802238c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>
 80222ca:	f8db 0000 	ldr.w	r0, [fp]
 80222ce:	6803      	ldr	r3, [r0, #0]
 80222d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80222d2:	4798      	blx	r3
 80222d4:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 80222d8:	465a      	mov	r2, fp
 80222da:	d006      	beq.n	80222ea <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
 80222dc:	f1b8 0f04 	cmp.w	r8, #4
 80222e0:	d140      	bne.n	8022364 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>
 80222e2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80222e4:	3300      	adds	r3, #0
 80222e6:	bf18      	it	ne
 80222e8:	2301      	movne	r3, #1
 80222ea:	0580      	lsls	r0, r0, #22
 80222ec:	d56e      	bpl.n	80223cc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
 80222ee:	f1b8 0f08 	cmp.w	r8, #8
 80222f2:	d16b      	bne.n	80223cc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
 80222f4:	2b00      	cmp	r3, #0
 80222f6:	bf0c      	ite	eq
 80222f8:	f44f 7100 	moveq.w	r1, #512	; 0x200
 80222fc:	f44f 7180 	movne.w	r1, #256	; 0x100
 8022300:	2d00      	cmp	r5, #0
 8022302:	f47f aee8 	bne.w	80220d6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 8022306:	2e00      	cmp	r6, #0
 8022308:	f47f aee5 	bne.w	80220d6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 802230c:	19e3      	adds	r3, r4, r7
 802230e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8022310:	4283      	cmp	r3, r0
 8022312:	f73f aee0 	bgt.w	80220d6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 8022316:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022318:	980d      	ldr	r0, [sp, #52]	; 0x34
 802231a:	444b      	add	r3, r9
 802231c:	4283      	cmp	r3, r0
 802231e:	f73f aeda 	bgt.w	80220d6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 8022322:	b2bf      	uxth	r7, r7
 8022324:	f1b8 0f08 	cmp.w	r8, #8
 8022328:	6810      	ldr	r0, [r2, #0]
 802232a:	f04f 0500 	mov.w	r5, #0
 802232e:	bf18      	it	ne
 8022330:	3701      	addne	r7, #1
 8022332:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
 8022336:	6804      	ldr	r4, [r0, #0]
 8022338:	bf18      	it	ne
 802233a:	f027 0701 	bicne.w	r7, r7, #1
 802233e:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 8022342:	e9cd 1505 	strd	r1, r5, [sp, #20]
 8022346:	990c      	ldr	r1, [sp, #48]	; 0x30
 8022348:	bf18      	it	ne
 802234a:	b2bf      	uxthne	r7, r7
 802234c:	9104      	str	r1, [sp, #16]
 802234e:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8022350:	e9cd 7900 	strd	r7, r9, [sp]
 8022354:	e9cd 7102 	strd	r7, r1, [sp, #8]
 8022358:	9928      	ldr	r1, [sp, #160]	; 0xa0
 802235a:	6d64      	ldr	r4, [r4, #84]	; 0x54
 802235c:	47a0      	blx	r4
 802235e:	b019      	add	sp, #100	; 0x64
 8022360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022364:	2300      	movs	r3, #0
 8022366:	e7c0      	b.n	80222ea <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
 8022368:	2208      	movs	r2, #8
 802236a:	fb92 f3f8 	sdiv	r3, r2, r8
 802236e:	1e5a      	subs	r2, r3, #1
 8022370:	443a      	add	r2, r7
 8022372:	fb92 f2f3 	sdiv	r2, r2, r3
 8022376:	fb12 f203 	smulbb	r2, r2, r3
 802237a:	b292      	uxth	r2, r2
 802237c:	e6b0      	b.n	80220e0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf8>
 802237e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8022380:	e6ec      	b.n	802215c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x174>
 8022382:	9810      	ldr	r0, [sp, #64]	; 0x40
 8022384:	e782      	b.n	802228c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a4>
 8022386:	bf00      	nop
 8022388:	200177bc 	.word	0x200177bc
 802238c:	200177c4 	.word	0x200177c4
 8022390:	200177be 	.word	0x200177be
 8022394:	00fff800 	.word	0x00fff800
 8022398:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802239a:	b153      	cbz	r3, 80223b2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ca>
 802239c:	441e      	add	r6, r3
 802239e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80223a0:	b2b6      	uxth	r6, r6
 80223a2:	eb03 03d6 	add.w	r3, r3, r6, lsr #3
 80223a6:	f006 0607 	and.w	r6, r6, #7
 80223aa:	781a      	ldrb	r2, [r3, #0]
 80223ac:	9328      	str	r3, [sp, #160]	; 0xa0
 80223ae:	4132      	asrs	r2, r6
 80223b0:	b2d2      	uxtb	r2, r2
 80223b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80223b4:	445b      	add	r3, fp
 80223b6:	930a      	str	r3, [sp, #40]	; 0x28
 80223b8:	e706      	b.n	80221c8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e0>
 80223ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80223bc:	2b00      	cmp	r3, #0
 80223be:	d1ce      	bne.n	802235e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 80223c0:	4b05      	ldr	r3, [pc, #20]	; (80223d8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f0>)
 80223c2:	6818      	ldr	r0, [r3, #0]
 80223c4:	6803      	ldr	r3, [r0, #0]
 80223c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80223c8:	4798      	blx	r3
 80223ca:	e7c8      	b.n	802235e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 80223cc:	2b00      	cmp	r3, #0
 80223ce:	f43f ae82 	beq.w	80220d6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 80223d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80223d6:	e793      	b.n	8022300 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x318>
 80223d8:	200177c4 	.word	0x200177c4

080223dc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
 80223dc:	b538      	push	{r3, r4, r5, lr}
 80223de:	4c15      	ldr	r4, [pc, #84]	; (8022434 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 80223e0:	4605      	mov	r5, r0
 80223e2:	7823      	ldrb	r3, [r4, #0]
 80223e4:	f3bf 8f5b 	dmb	ish
 80223e8:	07da      	lsls	r2, r3, #31
 80223ea:	d40b      	bmi.n	8022404 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 80223ec:	4620      	mov	r0, r4
 80223ee:	f007 fe55 	bl	802a09c <__cxa_guard_acquire>
 80223f2:	b138      	cbz	r0, 8022404 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 80223f4:	4620      	mov	r0, r4
 80223f6:	f007 fe5d 	bl	802a0b4 <__cxa_guard_release>
 80223fa:	4a0f      	ldr	r2, [pc, #60]	; (8022438 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 80223fc:	490f      	ldr	r1, [pc, #60]	; (802243c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 80223fe:	4810      	ldr	r0, [pc, #64]	; (8022440 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 8022400:	f007 fe45 	bl	802a08e <__aeabi_atexit>
 8022404:	4c0f      	ldr	r4, [pc, #60]	; (8022444 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
 8022406:	7823      	ldrb	r3, [r4, #0]
 8022408:	f3bf 8f5b 	dmb	ish
 802240c:	07db      	lsls	r3, r3, #31
 802240e:	d40b      	bmi.n	8022428 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 8022410:	4620      	mov	r0, r4
 8022412:	f007 fe43 	bl	802a09c <__cxa_guard_acquire>
 8022416:	b138      	cbz	r0, 8022428 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 8022418:	4620      	mov	r0, r4
 802241a:	f007 fe4b 	bl	802a0b4 <__cxa_guard_release>
 802241e:	4a06      	ldr	r2, [pc, #24]	; (8022438 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 8022420:	4909      	ldr	r1, [pc, #36]	; (8022448 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 8022422:	480a      	ldr	r0, [pc, #40]	; (802244c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 8022424:	f007 fe33 	bl	802a08e <__aeabi_atexit>
 8022428:	4b05      	ldr	r3, [pc, #20]	; (8022440 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 802242a:	612b      	str	r3, [r5, #16]
 802242c:	4b07      	ldr	r3, [pc, #28]	; (802244c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 802242e:	616b      	str	r3, [r5, #20]
 8022430:	bd38      	pop	{r3, r4, r5, pc}
 8022432:	bf00      	nop
 8022434:	20017898 	.word	0x20017898
 8022438:	20000000 	.word	0x20000000
 802243c:	080205e9 	.word	0x080205e9
 8022440:	20000088 	.word	0x20000088
 8022444:	2001789c 	.word	0x2001789c
 8022448:	080205e7 	.word	0x080205e7
 802244c:	2000008c 	.word	0x2000008c

08022450 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
 8022450:	b538      	push	{r3, r4, r5, lr}
 8022452:	4c15      	ldr	r4, [pc, #84]	; (80224a8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 8022454:	4605      	mov	r5, r0
 8022456:	7823      	ldrb	r3, [r4, #0]
 8022458:	f3bf 8f5b 	dmb	ish
 802245c:	07da      	lsls	r2, r3, #31
 802245e:	d40b      	bmi.n	8022478 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 8022460:	4620      	mov	r0, r4
 8022462:	f007 fe1b 	bl	802a09c <__cxa_guard_acquire>
 8022466:	b138      	cbz	r0, 8022478 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 8022468:	4620      	mov	r0, r4
 802246a:	f007 fe23 	bl	802a0b4 <__cxa_guard_release>
 802246e:	4a0f      	ldr	r2, [pc, #60]	; (80224ac <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 8022470:	490f      	ldr	r1, [pc, #60]	; (80224b0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 8022472:	4810      	ldr	r0, [pc, #64]	; (80224b4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 8022474:	f007 fe0b 	bl	802a08e <__aeabi_atexit>
 8022478:	4c0f      	ldr	r4, [pc, #60]	; (80224b8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
 802247a:	7823      	ldrb	r3, [r4, #0]
 802247c:	f3bf 8f5b 	dmb	ish
 8022480:	07db      	lsls	r3, r3, #31
 8022482:	d40b      	bmi.n	802249c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 8022484:	4620      	mov	r0, r4
 8022486:	f007 fe09 	bl	802a09c <__cxa_guard_acquire>
 802248a:	b138      	cbz	r0, 802249c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 802248c:	4620      	mov	r0, r4
 802248e:	f007 fe11 	bl	802a0b4 <__cxa_guard_release>
 8022492:	4a06      	ldr	r2, [pc, #24]	; (80224ac <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 8022494:	4909      	ldr	r1, [pc, #36]	; (80224bc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 8022496:	480a      	ldr	r0, [pc, #40]	; (80224c0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 8022498:	f007 fdf9 	bl	802a08e <__aeabi_atexit>
 802249c:	4b05      	ldr	r3, [pc, #20]	; (80224b4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 802249e:	60ab      	str	r3, [r5, #8]
 80224a0:	4b07      	ldr	r3, [pc, #28]	; (80224c0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 80224a2:	60eb      	str	r3, [r5, #12]
 80224a4:	bd38      	pop	{r3, r4, r5, pc}
 80224a6:	bf00      	nop
 80224a8:	20017870 	.word	0x20017870
 80224ac:	20000000 	.word	0x20000000
 80224b0:	080205ed 	.word	0x080205ed
 80224b4:	20000060 	.word	0x20000060
 80224b8:	20017874 	.word	0x20017874
 80224bc:	080205eb 	.word	0x080205eb
 80224c0:	20000064 	.word	0x20000064

080224c4 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
 80224c4:	b510      	push	{r4, lr}
 80224c6:	4604      	mov	r4, r0
 80224c8:	f7ff ff88 	bl	80223dc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
 80224cc:	4620      	mov	r0, r4
 80224ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80224d2:	f7ff bfbd 	b.w	8022450 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

080224d8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 80224d8:	b538      	push	{r3, r4, r5, lr}
 80224da:	4c15      	ldr	r4, [pc, #84]	; (8022530 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 80224dc:	4605      	mov	r5, r0
 80224de:	7823      	ldrb	r3, [r4, #0]
 80224e0:	f3bf 8f5b 	dmb	ish
 80224e4:	07da      	lsls	r2, r3, #31
 80224e6:	d40b      	bmi.n	8022500 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 80224e8:	4620      	mov	r0, r4
 80224ea:	f007 fdd7 	bl	802a09c <__cxa_guard_acquire>
 80224ee:	b138      	cbz	r0, 8022500 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 80224f0:	4620      	mov	r0, r4
 80224f2:	f007 fddf 	bl	802a0b4 <__cxa_guard_release>
 80224f6:	4a0f      	ldr	r2, [pc, #60]	; (8022534 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 80224f8:	490f      	ldr	r1, [pc, #60]	; (8022538 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 80224fa:	4810      	ldr	r0, [pc, #64]	; (802253c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 80224fc:	f007 fdc7 	bl	802a08e <__aeabi_atexit>
 8022500:	4c0f      	ldr	r4, [pc, #60]	; (8022540 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 8022502:	7823      	ldrb	r3, [r4, #0]
 8022504:	f3bf 8f5b 	dmb	ish
 8022508:	07db      	lsls	r3, r3, #31
 802250a:	d40b      	bmi.n	8022524 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 802250c:	4620      	mov	r0, r4
 802250e:	f007 fdc5 	bl	802a09c <__cxa_guard_acquire>
 8022512:	b138      	cbz	r0, 8022524 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8022514:	4620      	mov	r0, r4
 8022516:	f007 fdcd 	bl	802a0b4 <__cxa_guard_release>
 802251a:	4a06      	ldr	r2, [pc, #24]	; (8022534 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 802251c:	4909      	ldr	r1, [pc, #36]	; (8022544 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 802251e:	480a      	ldr	r0, [pc, #40]	; (8022548 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8022520:	f007 fdb5 	bl	802a08e <__aeabi_atexit>
 8022524:	4b05      	ldr	r3, [pc, #20]	; (802253c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8022526:	622b      	str	r3, [r5, #32]
 8022528:	4b07      	ldr	r3, [pc, #28]	; (8022548 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 802252a:	626b      	str	r3, [r5, #36]	; 0x24
 802252c:	bd38      	pop	{r3, r4, r5, pc}
 802252e:	bf00      	nop
 8022530:	200178a0 	.word	0x200178a0
 8022534:	20000000 	.word	0x20000000
 8022538:	080205e1 	.word	0x080205e1
 802253c:	20000090 	.word	0x20000090
 8022540:	200178a4 	.word	0x200178a4
 8022544:	080205df 	.word	0x080205df
 8022548:	20000094 	.word	0x20000094

0802254c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 802254c:	b538      	push	{r3, r4, r5, lr}
 802254e:	4c15      	ldr	r4, [pc, #84]	; (80225a4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 8022550:	4605      	mov	r5, r0
 8022552:	7823      	ldrb	r3, [r4, #0]
 8022554:	f3bf 8f5b 	dmb	ish
 8022558:	07da      	lsls	r2, r3, #31
 802255a:	d40b      	bmi.n	8022574 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 802255c:	4620      	mov	r0, r4
 802255e:	f007 fd9d 	bl	802a09c <__cxa_guard_acquire>
 8022562:	b138      	cbz	r0, 8022574 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8022564:	4620      	mov	r0, r4
 8022566:	f007 fda5 	bl	802a0b4 <__cxa_guard_release>
 802256a:	4a0f      	ldr	r2, [pc, #60]	; (80225a8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 802256c:	490f      	ldr	r1, [pc, #60]	; (80225ac <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 802256e:	4810      	ldr	r0, [pc, #64]	; (80225b0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8022570:	f007 fd8d 	bl	802a08e <__aeabi_atexit>
 8022574:	4c0f      	ldr	r4, [pc, #60]	; (80225b4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 8022576:	7823      	ldrb	r3, [r4, #0]
 8022578:	f3bf 8f5b 	dmb	ish
 802257c:	07db      	lsls	r3, r3, #31
 802257e:	d40b      	bmi.n	8022598 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8022580:	4620      	mov	r0, r4
 8022582:	f007 fd8b 	bl	802a09c <__cxa_guard_acquire>
 8022586:	b138      	cbz	r0, 8022598 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8022588:	4620      	mov	r0, r4
 802258a:	f007 fd93 	bl	802a0b4 <__cxa_guard_release>
 802258e:	4a06      	ldr	r2, [pc, #24]	; (80225a8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8022590:	4909      	ldr	r1, [pc, #36]	; (80225b8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 8022592:	480a      	ldr	r0, [pc, #40]	; (80225bc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8022594:	f007 fd7b 	bl	802a08e <__aeabi_atexit>
 8022598:	4b05      	ldr	r3, [pc, #20]	; (80225b0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 802259a:	61ab      	str	r3, [r5, #24]
 802259c:	4b07      	ldr	r3, [pc, #28]	; (80225bc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 802259e:	61eb      	str	r3, [r5, #28]
 80225a0:	bd38      	pop	{r3, r4, r5, pc}
 80225a2:	bf00      	nop
 80225a4:	20017878 	.word	0x20017878
 80225a8:	20000000 	.word	0x20000000
 80225ac:	080205e5 	.word	0x080205e5
 80225b0:	20000068 	.word	0x20000068
 80225b4:	2001787c 	.word	0x2001787c
 80225b8:	080205e3 	.word	0x080205e3
 80225bc:	2000006c 	.word	0x2000006c

080225c0 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
 80225c0:	b510      	push	{r4, lr}
 80225c2:	4604      	mov	r4, r0
 80225c4:	f7ff ff88 	bl	80224d8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 80225c8:	4620      	mov	r0, r4
 80225ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80225ce:	f7ff bfbd 	b.w	802254c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

080225d4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 80225d4:	b538      	push	{r3, r4, r5, lr}
 80225d6:	4c15      	ldr	r4, [pc, #84]	; (802262c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 80225d8:	4605      	mov	r5, r0
 80225da:	7823      	ldrb	r3, [r4, #0]
 80225dc:	f3bf 8f5b 	dmb	ish
 80225e0:	07da      	lsls	r2, r3, #31
 80225e2:	d40b      	bmi.n	80225fc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 80225e4:	4620      	mov	r0, r4
 80225e6:	f007 fd59 	bl	802a09c <__cxa_guard_acquire>
 80225ea:	b138      	cbz	r0, 80225fc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 80225ec:	4620      	mov	r0, r4
 80225ee:	f007 fd61 	bl	802a0b4 <__cxa_guard_release>
 80225f2:	4a0f      	ldr	r2, [pc, #60]	; (8022630 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 80225f4:	490f      	ldr	r1, [pc, #60]	; (8022634 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 80225f6:	4810      	ldr	r0, [pc, #64]	; (8022638 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 80225f8:	f007 fd49 	bl	802a08e <__aeabi_atexit>
 80225fc:	4c0f      	ldr	r4, [pc, #60]	; (802263c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 80225fe:	7823      	ldrb	r3, [r4, #0]
 8022600:	f3bf 8f5b 	dmb	ish
 8022604:	07db      	lsls	r3, r3, #31
 8022606:	d40b      	bmi.n	8022620 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8022608:	4620      	mov	r0, r4
 802260a:	f007 fd47 	bl	802a09c <__cxa_guard_acquire>
 802260e:	b138      	cbz	r0, 8022620 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8022610:	4620      	mov	r0, r4
 8022612:	f007 fd4f 	bl	802a0b4 <__cxa_guard_release>
 8022616:	4a06      	ldr	r2, [pc, #24]	; (8022630 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8022618:	4909      	ldr	r1, [pc, #36]	; (8022640 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 802261a:	480a      	ldr	r0, [pc, #40]	; (8022644 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 802261c:	f007 fd37 	bl	802a08e <__aeabi_atexit>
 8022620:	4b05      	ldr	r3, [pc, #20]	; (8022638 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8022622:	632b      	str	r3, [r5, #48]	; 0x30
 8022624:	4b07      	ldr	r3, [pc, #28]	; (8022644 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8022626:	636b      	str	r3, [r5, #52]	; 0x34
 8022628:	bd38      	pop	{r3, r4, r5, pc}
 802262a:	bf00      	nop
 802262c:	200178b0 	.word	0x200178b0
 8022630:	20000000 	.word	0x20000000
 8022634:	080205d9 	.word	0x080205d9
 8022638:	200000a0 	.word	0x200000a0
 802263c:	200178b4 	.word	0x200178b4
 8022640:	080205d7 	.word	0x080205d7
 8022644:	200000a4 	.word	0x200000a4

08022648 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 8022648:	b538      	push	{r3, r4, r5, lr}
 802264a:	4c15      	ldr	r4, [pc, #84]	; (80226a0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 802264c:	4605      	mov	r5, r0
 802264e:	7823      	ldrb	r3, [r4, #0]
 8022650:	f3bf 8f5b 	dmb	ish
 8022654:	07da      	lsls	r2, r3, #31
 8022656:	d40b      	bmi.n	8022670 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8022658:	4620      	mov	r0, r4
 802265a:	f007 fd1f 	bl	802a09c <__cxa_guard_acquire>
 802265e:	b138      	cbz	r0, 8022670 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8022660:	4620      	mov	r0, r4
 8022662:	f007 fd27 	bl	802a0b4 <__cxa_guard_release>
 8022666:	4a0f      	ldr	r2, [pc, #60]	; (80226a4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8022668:	490f      	ldr	r1, [pc, #60]	; (80226a8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 802266a:	4810      	ldr	r0, [pc, #64]	; (80226ac <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 802266c:	f007 fd0f 	bl	802a08e <__aeabi_atexit>
 8022670:	4c0f      	ldr	r4, [pc, #60]	; (80226b0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 8022672:	7823      	ldrb	r3, [r4, #0]
 8022674:	f3bf 8f5b 	dmb	ish
 8022678:	07db      	lsls	r3, r3, #31
 802267a:	d40b      	bmi.n	8022694 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 802267c:	4620      	mov	r0, r4
 802267e:	f007 fd0d 	bl	802a09c <__cxa_guard_acquire>
 8022682:	b138      	cbz	r0, 8022694 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8022684:	4620      	mov	r0, r4
 8022686:	f007 fd15 	bl	802a0b4 <__cxa_guard_release>
 802268a:	4a06      	ldr	r2, [pc, #24]	; (80226a4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 802268c:	4909      	ldr	r1, [pc, #36]	; (80226b4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 802268e:	480a      	ldr	r0, [pc, #40]	; (80226b8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8022690:	f007 fcfd 	bl	802a08e <__aeabi_atexit>
 8022694:	4b05      	ldr	r3, [pc, #20]	; (80226ac <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8022696:	62ab      	str	r3, [r5, #40]	; 0x28
 8022698:	4b07      	ldr	r3, [pc, #28]	; (80226b8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 802269a:	62eb      	str	r3, [r5, #44]	; 0x2c
 802269c:	bd38      	pop	{r3, r4, r5, pc}
 802269e:	bf00      	nop
 80226a0:	20017880 	.word	0x20017880
 80226a4:	20000000 	.word	0x20000000
 80226a8:	080205dd 	.word	0x080205dd
 80226ac:	20000070 	.word	0x20000070
 80226b0:	20017884 	.word	0x20017884
 80226b4:	080205db 	.word	0x080205db
 80226b8:	20000074 	.word	0x20000074

080226bc <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
 80226bc:	b510      	push	{r4, lr}
 80226be:	4604      	mov	r4, r0
 80226c0:	f7ff ff88 	bl	80225d4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 80226c4:	4620      	mov	r0, r4
 80226c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80226ca:	f7ff bfbd 	b.w	8022648 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

080226d0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
 80226d0:	b538      	push	{r3, r4, r5, lr}
 80226d2:	4c15      	ldr	r4, [pc, #84]	; (8022728 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 80226d4:	4605      	mov	r5, r0
 80226d6:	7823      	ldrb	r3, [r4, #0]
 80226d8:	f3bf 8f5b 	dmb	ish
 80226dc:	07da      	lsls	r2, r3, #31
 80226de:	d40b      	bmi.n	80226f8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 80226e0:	4620      	mov	r0, r4
 80226e2:	f007 fcdb 	bl	802a09c <__cxa_guard_acquire>
 80226e6:	b138      	cbz	r0, 80226f8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 80226e8:	4620      	mov	r0, r4
 80226ea:	f007 fce3 	bl	802a0b4 <__cxa_guard_release>
 80226ee:	4a0f      	ldr	r2, [pc, #60]	; (802272c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 80226f0:	490f      	ldr	r1, [pc, #60]	; (8022730 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 80226f2:	4810      	ldr	r0, [pc, #64]	; (8022734 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 80226f4:	f007 fccb 	bl	802a08e <__aeabi_atexit>
 80226f8:	4c0f      	ldr	r4, [pc, #60]	; (8022738 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
 80226fa:	7823      	ldrb	r3, [r4, #0]
 80226fc:	f3bf 8f5b 	dmb	ish
 8022700:	07db      	lsls	r3, r3, #31
 8022702:	d40b      	bmi.n	802271c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 8022704:	4620      	mov	r0, r4
 8022706:	f007 fcc9 	bl	802a09c <__cxa_guard_acquire>
 802270a:	b138      	cbz	r0, 802271c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 802270c:	4620      	mov	r0, r4
 802270e:	f007 fcd1 	bl	802a0b4 <__cxa_guard_release>
 8022712:	4a06      	ldr	r2, [pc, #24]	; (802272c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 8022714:	4909      	ldr	r1, [pc, #36]	; (802273c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 8022716:	480a      	ldr	r0, [pc, #40]	; (8022740 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 8022718:	f007 fcb9 	bl	802a08e <__aeabi_atexit>
 802271c:	4b05      	ldr	r3, [pc, #20]	; (8022734 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 802271e:	652b      	str	r3, [r5, #80]	; 0x50
 8022720:	4b07      	ldr	r3, [pc, #28]	; (8022740 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 8022722:	656b      	str	r3, [r5, #84]	; 0x54
 8022724:	bd38      	pop	{r3, r4, r5, pc}
 8022726:	bf00      	nop
 8022728:	200178b8 	.word	0x200178b8
 802272c:	20000000 	.word	0x20000000
 8022730:	080205c9 	.word	0x080205c9
 8022734:	200000a8 	.word	0x200000a8
 8022738:	200178bc 	.word	0x200178bc
 802273c:	080205c7 	.word	0x080205c7
 8022740:	200000ac 	.word	0x200000ac

08022744 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
 8022744:	b538      	push	{r3, r4, r5, lr}
 8022746:	4c15      	ldr	r4, [pc, #84]	; (802279c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 8022748:	4605      	mov	r5, r0
 802274a:	7823      	ldrb	r3, [r4, #0]
 802274c:	f3bf 8f5b 	dmb	ish
 8022750:	07da      	lsls	r2, r3, #31
 8022752:	d40b      	bmi.n	802276c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 8022754:	4620      	mov	r0, r4
 8022756:	f007 fca1 	bl	802a09c <__cxa_guard_acquire>
 802275a:	b138      	cbz	r0, 802276c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 802275c:	4620      	mov	r0, r4
 802275e:	f007 fca9 	bl	802a0b4 <__cxa_guard_release>
 8022762:	4a0f      	ldr	r2, [pc, #60]	; (80227a0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 8022764:	490f      	ldr	r1, [pc, #60]	; (80227a4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 8022766:	4810      	ldr	r0, [pc, #64]	; (80227a8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 8022768:	f007 fc91 	bl	802a08e <__aeabi_atexit>
 802276c:	4c0f      	ldr	r4, [pc, #60]	; (80227ac <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
 802276e:	7823      	ldrb	r3, [r4, #0]
 8022770:	f3bf 8f5b 	dmb	ish
 8022774:	07db      	lsls	r3, r3, #31
 8022776:	d40b      	bmi.n	8022790 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 8022778:	4620      	mov	r0, r4
 802277a:	f007 fc8f 	bl	802a09c <__cxa_guard_acquire>
 802277e:	b138      	cbz	r0, 8022790 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 8022780:	4620      	mov	r0, r4
 8022782:	f007 fc97 	bl	802a0b4 <__cxa_guard_release>
 8022786:	4a06      	ldr	r2, [pc, #24]	; (80227a0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 8022788:	4909      	ldr	r1, [pc, #36]	; (80227b0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 802278a:	480a      	ldr	r0, [pc, #40]	; (80227b4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 802278c:	f007 fc7f 	bl	802a08e <__aeabi_atexit>
 8022790:	4b05      	ldr	r3, [pc, #20]	; (80227a8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 8022792:	64ab      	str	r3, [r5, #72]	; 0x48
 8022794:	4b07      	ldr	r3, [pc, #28]	; (80227b4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 8022796:	64eb      	str	r3, [r5, #76]	; 0x4c
 8022798:	bd38      	pop	{r3, r4, r5, pc}
 802279a:	bf00      	nop
 802279c:	200178c0 	.word	0x200178c0
 80227a0:	20000000 	.word	0x20000000
 80227a4:	080205cd 	.word	0x080205cd
 80227a8:	200000b0 	.word	0x200000b0
 80227ac:	200178c4 	.word	0x200178c4
 80227b0:	080205cb 	.word	0x080205cb
 80227b4:	200000b4 	.word	0x200000b4

080227b8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
 80227b8:	b538      	push	{r3, r4, r5, lr}
 80227ba:	4c15      	ldr	r4, [pc, #84]	; (8022810 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 80227bc:	4605      	mov	r5, r0
 80227be:	7823      	ldrb	r3, [r4, #0]
 80227c0:	f3bf 8f5b 	dmb	ish
 80227c4:	07da      	lsls	r2, r3, #31
 80227c6:	d40b      	bmi.n	80227e0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 80227c8:	4620      	mov	r0, r4
 80227ca:	f007 fc67 	bl	802a09c <__cxa_guard_acquire>
 80227ce:	b138      	cbz	r0, 80227e0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 80227d0:	4620      	mov	r0, r4
 80227d2:	f007 fc6f 	bl	802a0b4 <__cxa_guard_release>
 80227d6:	4a0f      	ldr	r2, [pc, #60]	; (8022814 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 80227d8:	490f      	ldr	r1, [pc, #60]	; (8022818 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 80227da:	4810      	ldr	r0, [pc, #64]	; (802281c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 80227dc:	f007 fc57 	bl	802a08e <__aeabi_atexit>
 80227e0:	4c0f      	ldr	r4, [pc, #60]	; (8022820 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
 80227e2:	7823      	ldrb	r3, [r4, #0]
 80227e4:	f3bf 8f5b 	dmb	ish
 80227e8:	07db      	lsls	r3, r3, #31
 80227ea:	d40b      	bmi.n	8022804 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 80227ec:	4620      	mov	r0, r4
 80227ee:	f007 fc55 	bl	802a09c <__cxa_guard_acquire>
 80227f2:	b138      	cbz	r0, 8022804 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 80227f4:	4620      	mov	r0, r4
 80227f6:	f007 fc5d 	bl	802a0b4 <__cxa_guard_release>
 80227fa:	4a06      	ldr	r2, [pc, #24]	; (8022814 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 80227fc:	4909      	ldr	r1, [pc, #36]	; (8022824 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 80227fe:	480a      	ldr	r0, [pc, #40]	; (8022828 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 8022800:	f007 fc45 	bl	802a08e <__aeabi_atexit>
 8022804:	4b05      	ldr	r3, [pc, #20]	; (802281c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 8022806:	642b      	str	r3, [r5, #64]	; 0x40
 8022808:	4b07      	ldr	r3, [pc, #28]	; (8022828 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 802280a:	646b      	str	r3, [r5, #68]	; 0x44
 802280c:	bd38      	pop	{r3, r4, r5, pc}
 802280e:	bf00      	nop
 8022810:	20017888 	.word	0x20017888
 8022814:	20000000 	.word	0x20000000
 8022818:	080205d1 	.word	0x080205d1
 802281c:	20000078 	.word	0x20000078
 8022820:	2001788c 	.word	0x2001788c
 8022824:	080205cf 	.word	0x080205cf
 8022828:	2000007c 	.word	0x2000007c

0802282c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
 802282c:	b538      	push	{r3, r4, r5, lr}
 802282e:	4c15      	ldr	r4, [pc, #84]	; (8022884 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 8022830:	4605      	mov	r5, r0
 8022832:	7823      	ldrb	r3, [r4, #0]
 8022834:	f3bf 8f5b 	dmb	ish
 8022838:	07da      	lsls	r2, r3, #31
 802283a:	d40b      	bmi.n	8022854 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 802283c:	4620      	mov	r0, r4
 802283e:	f007 fc2d 	bl	802a09c <__cxa_guard_acquire>
 8022842:	b138      	cbz	r0, 8022854 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 8022844:	4620      	mov	r0, r4
 8022846:	f007 fc35 	bl	802a0b4 <__cxa_guard_release>
 802284a:	4a0f      	ldr	r2, [pc, #60]	; (8022888 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 802284c:	490f      	ldr	r1, [pc, #60]	; (802288c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 802284e:	4810      	ldr	r0, [pc, #64]	; (8022890 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 8022850:	f007 fc1d 	bl	802a08e <__aeabi_atexit>
 8022854:	4c0f      	ldr	r4, [pc, #60]	; (8022894 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
 8022856:	7823      	ldrb	r3, [r4, #0]
 8022858:	f3bf 8f5b 	dmb	ish
 802285c:	07db      	lsls	r3, r3, #31
 802285e:	d40b      	bmi.n	8022878 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 8022860:	4620      	mov	r0, r4
 8022862:	f007 fc1b 	bl	802a09c <__cxa_guard_acquire>
 8022866:	b138      	cbz	r0, 8022878 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 8022868:	4620      	mov	r0, r4
 802286a:	f007 fc23 	bl	802a0b4 <__cxa_guard_release>
 802286e:	4a06      	ldr	r2, [pc, #24]	; (8022888 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 8022870:	4909      	ldr	r1, [pc, #36]	; (8022898 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 8022872:	480a      	ldr	r0, [pc, #40]	; (802289c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 8022874:	f007 fc0b 	bl	802a08e <__aeabi_atexit>
 8022878:	4b05      	ldr	r3, [pc, #20]	; (8022890 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 802287a:	63ab      	str	r3, [r5, #56]	; 0x38
 802287c:	4b07      	ldr	r3, [pc, #28]	; (802289c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 802287e:	63eb      	str	r3, [r5, #60]	; 0x3c
 8022880:	bd38      	pop	{r3, r4, r5, pc}
 8022882:	bf00      	nop
 8022884:	200178a8 	.word	0x200178a8
 8022888:	20000000 	.word	0x20000000
 802288c:	080205d5 	.word	0x080205d5
 8022890:	20000098 	.word	0x20000098
 8022894:	200178ac 	.word	0x200178ac
 8022898:	080205d3 	.word	0x080205d3
 802289c:	2000009c 	.word	0x2000009c

080228a0 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
 80228a0:	b510      	push	{r4, lr}
 80228a2:	4604      	mov	r4, r0
 80228a4:	f7ff ff14 	bl	80226d0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
 80228a8:	4620      	mov	r0, r4
 80228aa:	f7ff ff85 	bl	80227b8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
 80228ae:	4620      	mov	r0, r4
 80228b0:	f7ff ff48 	bl	8022744 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
 80228b4:	4620      	mov	r0, r4
 80228b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80228ba:	f7ff bfb7 	b.w	802282c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

080228c0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 80228c0:	b538      	push	{r3, r4, r5, lr}
 80228c2:	4c15      	ldr	r4, [pc, #84]	; (8022918 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 80228c4:	4605      	mov	r5, r0
 80228c6:	7823      	ldrb	r3, [r4, #0]
 80228c8:	f3bf 8f5b 	dmb	ish
 80228cc:	07da      	lsls	r2, r3, #31
 80228ce:	d40b      	bmi.n	80228e8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 80228d0:	4620      	mov	r0, r4
 80228d2:	f007 fbe3 	bl	802a09c <__cxa_guard_acquire>
 80228d6:	b138      	cbz	r0, 80228e8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 80228d8:	4620      	mov	r0, r4
 80228da:	f007 fbeb 	bl	802a0b4 <__cxa_guard_release>
 80228de:	4a0f      	ldr	r2, [pc, #60]	; (802291c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 80228e0:	490f      	ldr	r1, [pc, #60]	; (8022920 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 80228e2:	4810      	ldr	r0, [pc, #64]	; (8022924 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 80228e4:	f007 fbd3 	bl	802a08e <__aeabi_atexit>
 80228e8:	4c0f      	ldr	r4, [pc, #60]	; (8022928 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 80228ea:	7823      	ldrb	r3, [r4, #0]
 80228ec:	f3bf 8f5b 	dmb	ish
 80228f0:	07db      	lsls	r3, r3, #31
 80228f2:	d40b      	bmi.n	802290c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 80228f4:	4620      	mov	r0, r4
 80228f6:	f007 fbd1 	bl	802a09c <__cxa_guard_acquire>
 80228fa:	b138      	cbz	r0, 802290c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 80228fc:	4620      	mov	r0, r4
 80228fe:	f007 fbd9 	bl	802a0b4 <__cxa_guard_release>
 8022902:	4a06      	ldr	r2, [pc, #24]	; (802291c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8022904:	4909      	ldr	r1, [pc, #36]	; (802292c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 8022906:	480a      	ldr	r0, [pc, #40]	; (8022930 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8022908:	f007 fbc1 	bl	802a08e <__aeabi_atexit>
 802290c:	4b05      	ldr	r3, [pc, #20]	; (8022924 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 802290e:	662b      	str	r3, [r5, #96]	; 0x60
 8022910:	4b07      	ldr	r3, [pc, #28]	; (8022930 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8022912:	666b      	str	r3, [r5, #100]	; 0x64
 8022914:	bd38      	pop	{r3, r4, r5, pc}
 8022916:	bf00      	nop
 8022918:	20017890 	.word	0x20017890
 802291c:	20000000 	.word	0x20000000
 8022920:	080205c1 	.word	0x080205c1
 8022924:	20000080 	.word	0x20000080
 8022928:	20017894 	.word	0x20017894
 802292c:	080205bf 	.word	0x080205bf
 8022930:	20000084 	.word	0x20000084

08022934 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 8022934:	b538      	push	{r3, r4, r5, lr}
 8022936:	4c15      	ldr	r4, [pc, #84]	; (802298c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 8022938:	4605      	mov	r5, r0
 802293a:	7823      	ldrb	r3, [r4, #0]
 802293c:	f3bf 8f5b 	dmb	ish
 8022940:	07da      	lsls	r2, r3, #31
 8022942:	d40b      	bmi.n	802295c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8022944:	4620      	mov	r0, r4
 8022946:	f007 fba9 	bl	802a09c <__cxa_guard_acquire>
 802294a:	b138      	cbz	r0, 802295c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 802294c:	4620      	mov	r0, r4
 802294e:	f007 fbb1 	bl	802a0b4 <__cxa_guard_release>
 8022952:	4a0f      	ldr	r2, [pc, #60]	; (8022990 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8022954:	490f      	ldr	r1, [pc, #60]	; (8022994 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 8022956:	4810      	ldr	r0, [pc, #64]	; (8022998 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8022958:	f007 fb99 	bl	802a08e <__aeabi_atexit>
 802295c:	4c0f      	ldr	r4, [pc, #60]	; (802299c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 802295e:	7823      	ldrb	r3, [r4, #0]
 8022960:	f3bf 8f5b 	dmb	ish
 8022964:	07db      	lsls	r3, r3, #31
 8022966:	d40b      	bmi.n	8022980 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8022968:	4620      	mov	r0, r4
 802296a:	f007 fb97 	bl	802a09c <__cxa_guard_acquire>
 802296e:	b138      	cbz	r0, 8022980 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8022970:	4620      	mov	r0, r4
 8022972:	f007 fb9f 	bl	802a0b4 <__cxa_guard_release>
 8022976:	4a06      	ldr	r2, [pc, #24]	; (8022990 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8022978:	4909      	ldr	r1, [pc, #36]	; (80229a0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 802297a:	480a      	ldr	r0, [pc, #40]	; (80229a4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 802297c:	f007 fb87 	bl	802a08e <__aeabi_atexit>
 8022980:	4b05      	ldr	r3, [pc, #20]	; (8022998 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8022982:	65ab      	str	r3, [r5, #88]	; 0x58
 8022984:	4b07      	ldr	r3, [pc, #28]	; (80229a4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8022986:	65eb      	str	r3, [r5, #92]	; 0x5c
 8022988:	bd38      	pop	{r3, r4, r5, pc}
 802298a:	bf00      	nop
 802298c:	20017868 	.word	0x20017868
 8022990:	20000000 	.word	0x20000000
 8022994:	080205c5 	.word	0x080205c5
 8022998:	20000058 	.word	0x20000058
 802299c:	2001786c 	.word	0x2001786c
 80229a0:	080205c3 	.word	0x080205c3
 80229a4:	2000005c 	.word	0x2000005c

080229a8 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
 80229a8:	b510      	push	{r4, lr}
 80229aa:	4604      	mov	r4, r0
 80229ac:	f7ff ff88 	bl	80228c0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 80229b0:	4620      	mov	r0, r4
 80229b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80229b6:	f7ff bfbd 	b.w	8022934 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

080229bc <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 80229bc:	b538      	push	{r3, r4, r5, lr}
 80229be:	4c15      	ldr	r4, [pc, #84]	; (8022a14 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 80229c0:	4605      	mov	r5, r0
 80229c2:	7823      	ldrb	r3, [r4, #0]
 80229c4:	f3bf 8f5b 	dmb	ish
 80229c8:	07da      	lsls	r2, r3, #31
 80229ca:	d40b      	bmi.n	80229e4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 80229cc:	4620      	mov	r0, r4
 80229ce:	f007 fb65 	bl	802a09c <__cxa_guard_acquire>
 80229d2:	b138      	cbz	r0, 80229e4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 80229d4:	4620      	mov	r0, r4
 80229d6:	f007 fb6d 	bl	802a0b4 <__cxa_guard_release>
 80229da:	4a0f      	ldr	r2, [pc, #60]	; (8022a18 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 80229dc:	490f      	ldr	r1, [pc, #60]	; (8022a1c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 80229de:	4810      	ldr	r0, [pc, #64]	; (8022a20 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 80229e0:	f007 fb55 	bl	802a08e <__aeabi_atexit>
 80229e4:	4c0f      	ldr	r4, [pc, #60]	; (8022a24 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 80229e6:	7823      	ldrb	r3, [r4, #0]
 80229e8:	f3bf 8f5b 	dmb	ish
 80229ec:	07db      	lsls	r3, r3, #31
 80229ee:	d40b      	bmi.n	8022a08 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 80229f0:	4620      	mov	r0, r4
 80229f2:	f007 fb53 	bl	802a09c <__cxa_guard_acquire>
 80229f6:	b138      	cbz	r0, 8022a08 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 80229f8:	4620      	mov	r0, r4
 80229fa:	f007 fb5b 	bl	802a0b4 <__cxa_guard_release>
 80229fe:	4a06      	ldr	r2, [pc, #24]	; (8022a18 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8022a00:	4909      	ldr	r1, [pc, #36]	; (8022a28 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 8022a02:	480a      	ldr	r0, [pc, #40]	; (8022a2c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8022a04:	f007 fb43 	bl	802a08e <__aeabi_atexit>
 8022a08:	4b05      	ldr	r3, [pc, #20]	; (8022a20 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8022a0a:	672b      	str	r3, [r5, #112]	; 0x70
 8022a0c:	4b07      	ldr	r3, [pc, #28]	; (8022a2c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8022a0e:	676b      	str	r3, [r5, #116]	; 0x74
 8022a10:	bd38      	pop	{r3, r4, r5, pc}
 8022a12:	bf00      	nop
 8022a14:	20017860 	.word	0x20017860
 8022a18:	20000000 	.word	0x20000000
 8022a1c:	080205b9 	.word	0x080205b9
 8022a20:	20000050 	.word	0x20000050
 8022a24:	20017864 	.word	0x20017864
 8022a28:	080205b7 	.word	0x080205b7
 8022a2c:	20000054 	.word	0x20000054

08022a30 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
 8022a30:	b538      	push	{r3, r4, r5, lr}
 8022a32:	4c15      	ldr	r4, [pc, #84]	; (8022a88 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 8022a34:	4605      	mov	r5, r0
 8022a36:	7823      	ldrb	r3, [r4, #0]
 8022a38:	f3bf 8f5b 	dmb	ish
 8022a3c:	07da      	lsls	r2, r3, #31
 8022a3e:	d40b      	bmi.n	8022a58 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8022a40:	4620      	mov	r0, r4
 8022a42:	f007 fb2b 	bl	802a09c <__cxa_guard_acquire>
 8022a46:	b138      	cbz	r0, 8022a58 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8022a48:	4620      	mov	r0, r4
 8022a4a:	f007 fb33 	bl	802a0b4 <__cxa_guard_release>
 8022a4e:	4a0f      	ldr	r2, [pc, #60]	; (8022a8c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8022a50:	490f      	ldr	r1, [pc, #60]	; (8022a90 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 8022a52:	4810      	ldr	r0, [pc, #64]	; (8022a94 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8022a54:	f007 fb1b 	bl	802a08e <__aeabi_atexit>
 8022a58:	4c0f      	ldr	r4, [pc, #60]	; (8022a98 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 8022a5a:	7823      	ldrb	r3, [r4, #0]
 8022a5c:	f3bf 8f5b 	dmb	ish
 8022a60:	07db      	lsls	r3, r3, #31
 8022a62:	d40b      	bmi.n	8022a7c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8022a64:	4620      	mov	r0, r4
 8022a66:	f007 fb19 	bl	802a09c <__cxa_guard_acquire>
 8022a6a:	b138      	cbz	r0, 8022a7c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8022a6c:	4620      	mov	r0, r4
 8022a6e:	f007 fb21 	bl	802a0b4 <__cxa_guard_release>
 8022a72:	4a06      	ldr	r2, [pc, #24]	; (8022a8c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8022a74:	4909      	ldr	r1, [pc, #36]	; (8022a9c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 8022a76:	480a      	ldr	r0, [pc, #40]	; (8022aa0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8022a78:	f007 fb09 	bl	802a08e <__aeabi_atexit>
 8022a7c:	4b05      	ldr	r3, [pc, #20]	; (8022a94 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8022a7e:	66ab      	str	r3, [r5, #104]	; 0x68
 8022a80:	4b07      	ldr	r3, [pc, #28]	; (8022aa0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8022a82:	66eb      	str	r3, [r5, #108]	; 0x6c
 8022a84:	bd38      	pop	{r3, r4, r5, pc}
 8022a86:	bf00      	nop
 8022a88:	20017858 	.word	0x20017858
 8022a8c:	20000000 	.word	0x20000000
 8022a90:	080205bd 	.word	0x080205bd
 8022a94:	20000048 	.word	0x20000048
 8022a98:	2001785c 	.word	0x2001785c
 8022a9c:	080205bb 	.word	0x080205bb
 8022aa0:	2000004c 	.word	0x2000004c

08022aa4 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
 8022aa4:	b510      	push	{r4, lr}
 8022aa6:	4604      	mov	r4, r0
 8022aa8:	f7ff ff88 	bl	80229bc <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
 8022aac:	4620      	mov	r0, r4
 8022aae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022ab2:	f7ff bfbd 	b.w	8022a30 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

08022ab6 <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
 8022ab6:	b510      	push	{r4, lr}
 8022ab8:	4604      	mov	r4, r0
 8022aba:	f7ff fff3 	bl	8022aa4 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
 8022abe:	4620      	mov	r0, r4
 8022ac0:	f7ff ff72 	bl	80229a8 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
 8022ac4:	4620      	mov	r0, r4
 8022ac6:	f7ff fdf9 	bl	80226bc <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
 8022aca:	4620      	mov	r0, r4
 8022acc:	f7ff fcfa 	bl	80224c4 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
 8022ad0:	4620      	mov	r0, r4
 8022ad2:	f7ff fd75 	bl	80225c0 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
 8022ad6:	4620      	mov	r0, r4
 8022ad8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022adc:	f7ff bee0 	b.w	80228a0 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

08022ae0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
 8022ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022ae4:	e9dd 450b 	ldrd	r4, r5, [sp, #44]	; 0x2c
 8022ae8:	f9bd e024 	ldrsh.w	lr, [sp, #36]	; 0x24
 8022aec:	2d00      	cmp	r5, #0
 8022aee:	f9bd b028 	ldrsh.w	fp, [sp, #40]	; 0x28
 8022af2:	fb05 4c0e 	mla	ip, r5, lr, r4
 8022af6:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 8022afa:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 8022afe:	f89d 603c 	ldrb.w	r6, [sp, #60]	; 0x3c
 8022b02:	eb02 0a0c 	add.w	sl, r2, ip
 8022b06:	8808      	ldrh	r0, [r1, #0]
 8022b08:	f2c0 80b0 	blt.w	8022c6c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 8022b0c:	45ab      	cmp	fp, r5
 8022b0e:	f340 80ad 	ble.w	8022c6c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 8022b12:	2c00      	cmp	r4, #0
 8022b14:	f2c0 80a8 	blt.w	8022c68 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 8022b18:	45a6      	cmp	lr, r4
 8022b1a:	f340 80a5 	ble.w	8022c68 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 8022b1e:	f812 200c 	ldrb.w	r2, [r2, ip]
 8022b22:	f833 8012 	ldrh.w	r8, [r3, r2, lsl #1]
 8022b26:	1c62      	adds	r2, r4, #1
 8022b28:	f100 80a3 	bmi.w	8022c72 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 8022b2c:	4596      	cmp	lr, r2
 8022b2e:	f340 80a0 	ble.w	8022c72 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 8022b32:	f1b9 0f00 	cmp.w	r9, #0
 8022b36:	f000 809c 	beq.w	8022c72 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 8022b3a:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8022b3e:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 8022b42:	3501      	adds	r5, #1
 8022b44:	f100 8099 	bmi.w	8022c7a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 8022b48:	45ab      	cmp	fp, r5
 8022b4a:	f340 8096 	ble.w	8022c7a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 8022b4e:	2f00      	cmp	r7, #0
 8022b50:	f000 8093 	beq.w	8022c7a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 8022b54:	2c00      	cmp	r4, #0
 8022b56:	f2c0 808e 	blt.w	8022c76 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 8022b5a:	45a6      	cmp	lr, r4
 8022b5c:	f340 808b 	ble.w	8022c76 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 8022b60:	f81a 200e 	ldrb.w	r2, [sl, lr]
 8022b64:	f833 5012 	ldrh.w	r5, [r3, r2, lsl #1]
 8022b68:	3401      	adds	r4, #1
 8022b6a:	f100 8089 	bmi.w	8022c80 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 8022b6e:	45a6      	cmp	lr, r4
 8022b70:	f340 8086 	ble.w	8022c80 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 8022b74:	f1b9 0f00 	cmp.w	r9, #0
 8022b78:	f000 8082 	beq.w	8022c80 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 8022b7c:	44d6      	add	lr, sl
 8022b7e:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8022b82:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8022b86:	ea4f 4408 	mov.w	r4, r8, lsl #16
 8022b8a:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 8022b8e:	fb19 fe07 	smulbb	lr, r9, r7
 8022b92:	f1c7 0210 	rsb	r2, r7, #16
 8022b96:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8022b9a:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 8022b9e:	eba2 0209 	sub.w	r2, r2, r9
 8022ba2:	ea44 0808 	orr.w	r8, r4, r8
 8022ba6:	ea4f 440c 	mov.w	r4, ip, lsl #16
 8022baa:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8022bae:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 8022bb2:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8022bb6:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 8022bba:	ea44 0c0c 	orr.w	ip, r4, ip
 8022bbe:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 8022bc2:	fb04 f40c 	mul.w	r4, r4, ip
 8022bc6:	fb02 4808 	mla	r8, r2, r8, r4
 8022bca:	041a      	lsls	r2, r3, #16
 8022bcc:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8022bd0:	b2b4      	uxth	r4, r6
 8022bd2:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8022bd6:	43f6      	mvns	r6, r6
 8022bd8:	4313      	orrs	r3, r2
 8022bda:	042a      	lsls	r2, r5, #16
 8022bdc:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8022be0:	b2f6      	uxtb	r6, r6
 8022be2:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8022be6:	fb0e 8303 	mla	r3, lr, r3, r8
 8022bea:	432a      	orrs	r2, r5
 8022bec:	fb07 3202 	mla	r2, r7, r2, r3
 8022bf0:	10c7      	asrs	r7, r0, #3
 8022bf2:	0d53      	lsrs	r3, r2, #21
 8022bf4:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8022bf8:	0952      	lsrs	r2, r2, #5
 8022bfa:	fb17 f706 	smulbb	r7, r7, r6
 8022bfe:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022c02:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8022c06:	431a      	orrs	r2, r3
 8022c08:	b293      	uxth	r3, r2
 8022c0a:	1202      	asrs	r2, r0, #8
 8022c0c:	121d      	asrs	r5, r3, #8
 8022c0e:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8022c12:	00c0      	lsls	r0, r0, #3
 8022c14:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8022c18:	fb12 f206 	smulbb	r2, r2, r6
 8022c1c:	b2c0      	uxtb	r0, r0
 8022c1e:	fb05 2504 	mla	r5, r5, r4, r2
 8022c22:	10da      	asrs	r2, r3, #3
 8022c24:	fb10 f006 	smulbb	r0, r0, r6
 8022c28:	00db      	lsls	r3, r3, #3
 8022c2a:	b2ad      	uxth	r5, r5
 8022c2c:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8022c30:	b2db      	uxtb	r3, r3
 8022c32:	fb02 7204 	mla	r2, r2, r4, r7
 8022c36:	fb03 0004 	mla	r0, r3, r4, r0
 8022c3a:	1c6b      	adds	r3, r5, #1
 8022c3c:	b292      	uxth	r2, r2
 8022c3e:	b280      	uxth	r0, r0
 8022c40:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8022c44:	1c43      	adds	r3, r0, #1
 8022c46:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8022c4a:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8022c4e:	1c50      	adds	r0, r2, #1
 8022c50:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8022c54:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8022c58:	0952      	lsrs	r2, r2, #5
 8022c5a:	432b      	orrs	r3, r5
 8022c5c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8022c60:	4313      	orrs	r3, r2
 8022c62:	800b      	strh	r3, [r1, #0]
 8022c64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022c68:	4680      	mov	r8, r0
 8022c6a:	e75c      	b.n	8022b26 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x46>
 8022c6c:	4684      	mov	ip, r0
 8022c6e:	4680      	mov	r8, r0
 8022c70:	e767      	b.n	8022b42 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 8022c72:	4684      	mov	ip, r0
 8022c74:	e765      	b.n	8022b42 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 8022c76:	4605      	mov	r5, r0
 8022c78:	e776      	b.n	8022b68 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x88>
 8022c7a:	4603      	mov	r3, r0
 8022c7c:	4605      	mov	r5, r0
 8022c7e:	e782      	b.n	8022b86 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 8022c80:	4603      	mov	r3, r0
 8022c82:	e780      	b.n	8022b86 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>

08022c84 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022c88:	b099      	sub	sp, #100	; 0x64
 8022c8a:	9215      	str	r2, [sp, #84]	; 0x54
 8022c8c:	9309      	str	r3, [sp, #36]	; 0x24
 8022c8e:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8022c90:	f89d 30ac 	ldrb.w	r3, [sp, #172]	; 0xac
 8022c94:	9016      	str	r0, [sp, #88]	; 0x58
 8022c96:	930d      	str	r3, [sp, #52]	; 0x34
 8022c98:	6850      	ldr	r0, [r2, #4]
 8022c9a:	910c      	str	r1, [sp, #48]	; 0x30
 8022c9c:	6812      	ldr	r2, [r2, #0]
 8022c9e:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 8022ca2:	e9dd a523 	ldrd	sl, r5, [sp, #140]	; 0x8c
 8022ca6:	fb00 1303 	mla	r3, r0, r3, r1
 8022caa:	eb02 0843 	add.w	r8, r2, r3, lsl #1
 8022cae:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022cb0:	681b      	ldr	r3, [r3, #0]
 8022cb2:	930b      	str	r3, [sp, #44]	; 0x2c
 8022cb4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022cb6:	685e      	ldr	r6, [r3, #4]
 8022cb8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022cba:	3604      	adds	r6, #4
 8022cbc:	43db      	mvns	r3, r3
 8022cbe:	b2db      	uxtb	r3, r3
 8022cc0:	930a      	str	r3, [sp, #40]	; 0x28
 8022cc2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022cc4:	2b00      	cmp	r3, #0
 8022cc6:	dc03      	bgt.n	8022cd0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8022cc8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8022cca:	2b00      	cmp	r3, #0
 8022ccc:	f340 8225 	ble.w	802311a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 8022cd0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022cd2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022cd6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8022cda:	1e48      	subs	r0, r1, #1
 8022cdc:	1e57      	subs	r7, r2, #1
 8022cde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022ce0:	2b00      	cmp	r3, #0
 8022ce2:	f340 80e3 	ble.w	8022eac <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8022ce6:	ea5f 4c2a 	movs.w	ip, sl, asr #16
 8022cea:	ea4f 4325 	mov.w	r3, r5, asr #16
 8022cee:	d406      	bmi.n	8022cfe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8022cf0:	4584      	cmp	ip, r0
 8022cf2:	da04      	bge.n	8022cfe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8022cf4:	2b00      	cmp	r3, #0
 8022cf6:	db02      	blt.n	8022cfe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8022cf8:	42bb      	cmp	r3, r7
 8022cfa:	f2c0 80d8 	blt.w	8022eae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8022cfe:	f11c 0c01 	adds.w	ip, ip, #1
 8022d02:	f100 80c9 	bmi.w	8022e98 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8022d06:	4561      	cmp	r1, ip
 8022d08:	f2c0 80c6 	blt.w	8022e98 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8022d0c:	3301      	adds	r3, #1
 8022d0e:	f100 80c3 	bmi.w	8022e98 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8022d12:	429a      	cmp	r2, r3
 8022d14:	f2c0 80c0 	blt.w	8022e98 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8022d18:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8022d1c:	4647      	mov	r7, r8
 8022d1e:	f1bb 0f00 	cmp.w	fp, #0
 8022d22:	f340 80e3 	ble.w	8022eec <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 8022d26:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8022d28:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8022d2c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022d2e:	f3ca 3003 	ubfx	r0, sl, #12, #4
 8022d32:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8022d36:	ea5f 422a 	movs.w	r2, sl, asr #16
 8022d3a:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8022d3e:	689b      	ldr	r3, [r3, #8]
 8022d40:	f100 8121 	bmi.w	8022f86 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 8022d44:	f103 39ff 	add.w	r9, r3, #4294967295
 8022d48:	454a      	cmp	r2, r9
 8022d4a:	f280 811c 	bge.w	8022f86 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 8022d4e:	f1bc 0f00 	cmp.w	ip, #0
 8022d52:	f2c0 8118 	blt.w	8022f86 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 8022d56:	f10e 39ff 	add.w	r9, lr, #4294967295
 8022d5a:	45cc      	cmp	ip, r9
 8022d5c:	f280 8113 	bge.w	8022f86 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 8022d60:	b21b      	sxth	r3, r3
 8022d62:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8022d64:	fb0c 2203 	mla	r2, ip, r3, r2
 8022d68:	eb04 0902 	add.w	r9, r4, r2
 8022d6c:	5ca2      	ldrb	r2, [r4, r2]
 8022d6e:	f836 e012 	ldrh.w	lr, [r6, r2, lsl #1]
 8022d72:	2800      	cmp	r0, #0
 8022d74:	f000 80fe 	beq.w	8022f74 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 8022d78:	f899 2001 	ldrb.w	r2, [r9, #1]
 8022d7c:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 8022d80:	9211      	str	r2, [sp, #68]	; 0x44
 8022d82:	b151      	cbz	r1, 8022d9a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8022d84:	eb09 0203 	add.w	r2, r9, r3
 8022d88:	f819 3003 	ldrb.w	r3, [r9, r3]
 8022d8c:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8022d90:	930f      	str	r3, [sp, #60]	; 0x3c
 8022d92:	7853      	ldrb	r3, [r2, #1]
 8022d94:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8022d98:	9312      	str	r3, [sp, #72]	; 0x48
 8022d9a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022d9c:	fb10 f201 	smulbb	r2, r0, r1
 8022da0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8022da2:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8022da6:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8022daa:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 8022dae:	10d2      	asrs	r2, r2, #3
 8022db0:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8022db4:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
 8022db8:	ea4c 0c03 	orr.w	ip, ip, r3
 8022dbc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8022dbe:	041b      	lsls	r3, r3, #16
 8022dc0:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8022dc4:	4323      	orrs	r3, r4
 8022dc6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8022dc8:	4353      	muls	r3, r2
 8022dca:	fb09 330c 	mla	r3, r9, ip, r3
 8022dce:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 8022dd2:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8022dd6:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8022dda:	ea4c 0e0e 	orr.w	lr, ip, lr
 8022dde:	f1c1 0c10 	rsb	ip, r1, #16
 8022de2:	ebac 0c00 	sub.w	ip, ip, r0
 8022de6:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8022dea:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 8022dee:	fb0c 3c0e 	mla	ip, ip, lr, r3
 8022df2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8022df4:	0418      	lsls	r0, r3, #16
 8022df6:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8022dfa:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8022dfe:	4318      	orrs	r0, r3
 8022e00:	fb02 c200 	mla	r2, r2, r0, ip
 8022e04:	8838      	ldrh	r0, [r7, #0]
 8022e06:	0d53      	lsrs	r3, r2, #21
 8022e08:	0952      	lsrs	r2, r2, #5
 8022e0a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022e0e:	1201      	asrs	r1, r0, #8
 8022e10:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8022e14:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 8022e18:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8022e1c:	00c0      	lsls	r0, r0, #3
 8022e1e:	431a      	orrs	r2, r3
 8022e20:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 8022e24:	fb11 f104 	smulbb	r1, r1, r4
 8022e28:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8022e2c:	b292      	uxth	r2, r2
 8022e2e:	fb1e fe04 	smulbb	lr, lr, r4
 8022e32:	b2c0      	uxtb	r0, r0
 8022e34:	ea4f 2c22 	mov.w	ip, r2, asr #8
 8022e38:	fb10 f004 	smulbb	r0, r0, r4
 8022e3c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8022e40:	fb0c 1c03 	mla	ip, ip, r3, r1
 8022e44:	10d1      	asrs	r1, r2, #3
 8022e46:	00d2      	lsls	r2, r2, #3
 8022e48:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8022e4c:	fa1f fc8c 	uxth.w	ip, ip
 8022e50:	b2d2      	uxtb	r2, r2
 8022e52:	fb01 e103 	mla	r1, r1, r3, lr
 8022e56:	fb02 0303 	mla	r3, r2, r3, r0
 8022e5a:	b289      	uxth	r1, r1
 8022e5c:	b29a      	uxth	r2, r3
 8022e5e:	f10c 0301 	add.w	r3, ip, #1
 8022e62:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8022e66:	1c53      	adds	r3, r2, #1
 8022e68:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8022e6c:	1c4a      	adds	r2, r1, #1
 8022e6e:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8022e72:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8022e76:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8022e7a:	0949      	lsrs	r1, r1, #5
 8022e7c:	ea43 030c 	orr.w	r3, r3, ip
 8022e80:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8022e84:	430b      	orrs	r3, r1
 8022e86:	803b      	strh	r3, [r7, #0]
 8022e88:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8022e8a:	3702      	adds	r7, #2
 8022e8c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8022e90:	449a      	add	sl, r3
 8022e92:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8022e94:	441d      	add	r5, r3
 8022e96:	e742      	b.n	8022d1e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8022e98:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8022e9a:	f108 0802 	add.w	r8, r8, #2
 8022e9e:	449a      	add	sl, r3
 8022ea0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8022ea2:	441d      	add	r5, r3
 8022ea4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022ea6:	3b01      	subs	r3, #1
 8022ea8:	9309      	str	r3, [sp, #36]	; 0x24
 8022eaa:	e718      	b.n	8022cde <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8022eac:	d023      	beq.n	8022ef6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 8022eae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022eb0:	9825      	ldr	r0, [sp, #148]	; 0x94
 8022eb2:	3b01      	subs	r3, #1
 8022eb4:	fb00 a003 	mla	r0, r0, r3, sl
 8022eb8:	1400      	asrs	r0, r0, #16
 8022eba:	f53f af2d 	bmi.w	8022d18 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8022ebe:	3901      	subs	r1, #1
 8022ec0:	4288      	cmp	r0, r1
 8022ec2:	f6bf af29 	bge.w	8022d18 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8022ec6:	9926      	ldr	r1, [sp, #152]	; 0x98
 8022ec8:	fb01 5303 	mla	r3, r1, r3, r5
 8022ecc:	141b      	asrs	r3, r3, #16
 8022ece:	f53f af23 	bmi.w	8022d18 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8022ed2:	3a01      	subs	r2, #1
 8022ed4:	4293      	cmp	r3, r2
 8022ed6:	f6bf af1f 	bge.w	8022d18 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8022eda:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8022ede:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
 8022ee2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8022ee6:	f1be 0f00 	cmp.w	lr, #0
 8022eea:	dc6c      	bgt.n	8022fc6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8022eec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022eee:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8022ef2:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 8022ef6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022ef8:	2b00      	cmp	r3, #0
 8022efa:	f340 810e 	ble.w	802311a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 8022efe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022f02:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8022f04:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022f08:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022f0c:	eef0 6a62 	vmov.f32	s13, s5
 8022f10:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8022f14:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022f18:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022f1c:	ee16 aa90 	vmov	sl, s13
 8022f20:	eef0 6a43 	vmov.f32	s13, s6
 8022f24:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022f28:	ee16 5a90 	vmov	r5, s13
 8022f2c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022f30:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022f34:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022f38:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022f3c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022f40:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022f44:	ee12 2a90 	vmov	r2, s5
 8022f48:	eef0 2a47 	vmov.f32	s5, s14
 8022f4c:	fb92 f3f3 	sdiv	r3, r2, r3
 8022f50:	ee13 2a10 	vmov	r2, s6
 8022f54:	9325      	str	r3, [sp, #148]	; 0x94
 8022f56:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8022f58:	eeb0 3a67 	vmov.f32	s6, s15
 8022f5c:	fb92 f3f3 	sdiv	r3, r2, r3
 8022f60:	9326      	str	r3, [sp, #152]	; 0x98
 8022f62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022f64:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8022f66:	3b01      	subs	r3, #1
 8022f68:	930c      	str	r3, [sp, #48]	; 0x30
 8022f6a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8022f6c:	bf08      	it	eq
 8022f6e:	4613      	moveq	r3, r2
 8022f70:	9309      	str	r3, [sp, #36]	; 0x24
 8022f72:	e6a6      	b.n	8022cc2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8022f74:	2900      	cmp	r1, #0
 8022f76:	f43f af10 	beq.w	8022d9a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8022f7a:	f819 3003 	ldrb.w	r3, [r9, r3]
 8022f7e:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8022f82:	930f      	str	r3, [sp, #60]	; 0x3c
 8022f84:	e709      	b.n	8022d9a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8022f86:	f112 0901 	adds.w	r9, r2, #1
 8022f8a:	f53f af7d 	bmi.w	8022e88 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8022f8e:	454b      	cmp	r3, r9
 8022f90:	f6ff af7a 	blt.w	8022e88 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8022f94:	f11c 0901 	adds.w	r9, ip, #1
 8022f98:	f53f af76 	bmi.w	8022e88 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8022f9c:	45ce      	cmp	lr, r9
 8022f9e:	f6ff af73 	blt.w	8022e88 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8022fa2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8022fa4:	b21b      	sxth	r3, r3
 8022fa6:	9202      	str	r2, [sp, #8]
 8022fa8:	fa0f f28e 	sxth.w	r2, lr
 8022fac:	9300      	str	r3, [sp, #0]
 8022fae:	4633      	mov	r3, r6
 8022fb0:	9201      	str	r2, [sp, #4]
 8022fb2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8022fb4:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8022fb8:	e9cd c003 	strd	ip, r0, [sp, #12]
 8022fbc:	4639      	mov	r1, r7
 8022fbe:	9816      	ldr	r0, [sp, #88]	; 0x58
 8022fc0:	f7ff fd8e 	bl	8022ae0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
 8022fc4:	e760      	b.n	8022e88 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8022fc6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022fc8:	ea4f 422a 	mov.w	r2, sl, asr #16
 8022fcc:	1429      	asrs	r1, r5, #16
 8022fce:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8022fd0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8022fd4:	f3ca 3c03 	ubfx	ip, sl, #12, #4
 8022fd8:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8022fdc:	fb03 2101 	mla	r1, r3, r1, r2
 8022fe0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8022fe2:	440a      	add	r2, r1
 8022fe4:	5c61      	ldrb	r1, [r4, r1]
 8022fe6:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 8022fea:	f1bc 0f00 	cmp.w	ip, #0
 8022fee:	f000 808c 	beq.w	802310a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
 8022ff2:	7857      	ldrb	r7, [r2, #1]
 8022ff4:	f836 4017 	ldrh.w	r4, [r6, r7, lsl #1]
 8022ff8:	9413      	str	r4, [sp, #76]	; 0x4c
 8022ffa:	b140      	cbz	r0, 802300e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8022ffc:	18d7      	adds	r7, r2, r3
 8022ffe:	5cd3      	ldrb	r3, [r2, r3]
 8023000:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8023004:	9310      	str	r3, [sp, #64]	; 0x40
 8023006:	787b      	ldrb	r3, [r7, #1]
 8023008:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 802300c:	9314      	str	r3, [sp, #80]	; 0x50
 802300e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8023010:	fb1c f200 	smulbb	r2, ip, r0
 8023014:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8023016:	f10e 3eff 	add.w	lr, lr, #4294967295
 802301a:	041f      	lsls	r7, r3, #16
 802301c:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8023020:	10d2      	asrs	r2, r2, #3
 8023022:	f424 6bfc 	bic.w	fp, r4, #2016	; 0x7e0
 8023026:	f007 67fc 	and.w	r7, r7, #132120576	; 0x7e00000
 802302a:	431f      	orrs	r7, r3
 802302c:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
 8023030:	9317      	str	r3, [sp, #92]	; 0x5c
 8023032:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8023034:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8023036:	041b      	lsls	r3, r3, #16
 8023038:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 802303c:	ea43 030b 	orr.w	r3, r3, fp
 8023040:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8023044:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8023048:	4353      	muls	r3, r2
 802304a:	fb04 3707 	mla	r7, r4, r7, r3
 802304e:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 8023052:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8023054:	ea43 0b01 	orr.w	fp, r3, r1
 8023058:	f1c0 0110 	rsb	r1, r0, #16
 802305c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802305e:	eba1 0c0c 	sub.w	ip, r1, ip
 8023062:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8023066:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 802306a:	fb0c 770b 	mla	r7, ip, fp, r7
 802306e:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8023072:	f423 6bfc 	bic.w	fp, r3, #2016	; 0x7e0
 8023076:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 802307a:	ea4c 0c0b 	orr.w	ip, ip, fp
 802307e:	fb02 770c 	mla	r7, r2, ip, r7
 8023082:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023084:	0d79      	lsrs	r1, r7, #21
 8023086:	8812      	ldrh	r2, [r2, #0]
 8023088:	097f      	lsrs	r7, r7, #5
 802308a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802308e:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8023092:	430f      	orrs	r7, r1
 8023094:	1211      	asrs	r1, r2, #8
 8023096:	b2bb      	uxth	r3, r7
 8023098:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 802309c:	10d7      	asrs	r7, r2, #3
 802309e:	fb11 f104 	smulbb	r1, r1, r4
 80230a2:	1218      	asrs	r0, r3, #8
 80230a4:	00d2      	lsls	r2, r2, #3
 80230a6:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80230aa:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80230ae:	fb17 f704 	smulbb	r7, r7, r4
 80230b2:	b2d2      	uxtb	r2, r2
 80230b4:	fb00 1009 	mla	r0, r0, r9, r1
 80230b8:	10d9      	asrs	r1, r3, #3
 80230ba:	fb12 f204 	smulbb	r2, r2, r4
 80230be:	00db      	lsls	r3, r3, #3
 80230c0:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80230c4:	b280      	uxth	r0, r0
 80230c6:	b2db      	uxtb	r3, r3
 80230c8:	fb01 7109 	mla	r1, r1, r9, r7
 80230cc:	fb03 2309 	mla	r3, r3, r9, r2
 80230d0:	1c42      	adds	r2, r0, #1
 80230d2:	b289      	uxth	r1, r1
 80230d4:	b29b      	uxth	r3, r3
 80230d6:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80230da:	1c4f      	adds	r7, r1, #1
 80230dc:	1c5a      	adds	r2, r3, #1
 80230de:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 80230e2:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 80230e6:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80230ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80230ec:	0949      	lsrs	r1, r1, #5
 80230ee:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80230f2:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80230f6:	4310      	orrs	r0, r2
 80230f8:	4308      	orrs	r0, r1
 80230fa:	f823 0b02 	strh.w	r0, [r3], #2
 80230fe:	930e      	str	r3, [sp, #56]	; 0x38
 8023100:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8023102:	449a      	add	sl, r3
 8023104:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023106:	441d      	add	r5, r3
 8023108:	e6ed      	b.n	8022ee6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x262>
 802310a:	2800      	cmp	r0, #0
 802310c:	f43f af7f 	beq.w	802300e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8023110:	5cd3      	ldrb	r3, [r2, r3]
 8023112:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8023116:	9310      	str	r3, [sp, #64]	; 0x40
 8023118:	e779      	b.n	802300e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 802311a:	b019      	add	sp, #100	; 0x64
 802311c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023120 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 8023120:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023124:	e9dd 480a 	ldrd	r4, r8, [sp, #40]	; 0x28
 8023128:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 802312c:	f1b8 0f00 	cmp.w	r8, #0
 8023130:	f9bd a024 	ldrsh.w	sl, [sp, #36]	; 0x24
 8023134:	fb08 470e 	mla	r7, r8, lr, r4
 8023138:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 802313c:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 8023140:	eb02 0907 	add.w	r9, r2, r7
 8023144:	8808      	ldrh	r0, [r1, #0]
 8023146:	db67      	blt.n	8023218 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 8023148:	45c2      	cmp	sl, r8
 802314a:	dd65      	ble.n	8023218 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 802314c:	2c00      	cmp	r4, #0
 802314e:	db61      	blt.n	8023214 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 8023150:	45a6      	cmp	lr, r4
 8023152:	dd5f      	ble.n	8023214 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 8023154:	5dd2      	ldrb	r2, [r2, r7]
 8023156:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 802315a:	1c62      	adds	r2, r4, #1
 802315c:	d45f      	bmi.n	802321e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 802315e:	4596      	cmp	lr, r2
 8023160:	dd5d      	ble.n	802321e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 8023162:	2d00      	cmp	r5, #0
 8023164:	d05b      	beq.n	802321e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 8023166:	f899 2001 	ldrb.w	r2, [r9, #1]
 802316a:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 802316e:	f118 0801 	adds.w	r8, r8, #1
 8023172:	d458      	bmi.n	8023226 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 8023174:	45c2      	cmp	sl, r8
 8023176:	dd56      	ble.n	8023226 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 8023178:	2e00      	cmp	r6, #0
 802317a:	d054      	beq.n	8023226 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 802317c:	2c00      	cmp	r4, #0
 802317e:	db50      	blt.n	8023222 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 8023180:	45a6      	cmp	lr, r4
 8023182:	dd4e      	ble.n	8023222 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 8023184:	f819 200e 	ldrb.w	r2, [r9, lr]
 8023188:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 802318c:	3401      	adds	r4, #1
 802318e:	d407      	bmi.n	80231a0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 8023190:	45a6      	cmp	lr, r4
 8023192:	dd05      	ble.n	80231a0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 8023194:	b125      	cbz	r5, 80231a0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 8023196:	44ce      	add	lr, r9
 8023198:	f89e 0001 	ldrb.w	r0, [lr, #1]
 802319c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 80231a0:	fb15 f406 	smulbb	r4, r5, r6
 80231a4:	ea4f 430c 	mov.w	r3, ip, lsl #16
 80231a8:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 80231ac:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 80231b0:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 80231b4:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 80231b8:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 80231bc:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 80231c0:	ea43 0c0c 	orr.w	ip, r3, ip
 80231c4:	f1c6 0310 	rsb	r3, r6, #16
 80231c8:	ea4e 0707 	orr.w	r7, lr, r7
 80231cc:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 80231d0:	1b5b      	subs	r3, r3, r5
 80231d2:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 80231d6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80231da:	437d      	muls	r5, r7
 80231dc:	fb03 5c0c 	mla	ip, r3, ip, r5
 80231e0:	0403      	lsls	r3, r0, #16
 80231e2:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80231e6:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 80231ea:	4318      	orrs	r0, r3
 80231ec:	0413      	lsls	r3, r2, #16
 80231ee:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80231f2:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 80231f6:	fb04 c000 	mla	r0, r4, r0, ip
 80231fa:	4313      	orrs	r3, r2
 80231fc:	fb06 0003 	mla	r0, r6, r3, r0
 8023200:	0d43      	lsrs	r3, r0, #21
 8023202:	0940      	lsrs	r0, r0, #5
 8023204:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8023208:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802320c:	4318      	orrs	r0, r3
 802320e:	8008      	strh	r0, [r1, #0]
 8023210:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023214:	4684      	mov	ip, r0
 8023216:	e7a0      	b.n	802315a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x3a>
 8023218:	4607      	mov	r7, r0
 802321a:	4684      	mov	ip, r0
 802321c:	e7a7      	b.n	802316e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 802321e:	4607      	mov	r7, r0
 8023220:	e7a5      	b.n	802316e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 8023222:	4602      	mov	r2, r0
 8023224:	e7b2      	b.n	802318c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x6c>
 8023226:	4602      	mov	r2, r0
 8023228:	e7ba      	b.n	80231a0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>

0802322a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802322a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802322e:	b093      	sub	sp, #76	; 0x4c
 8023230:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8023234:	920f      	str	r2, [sp, #60]	; 0x3c
 8023236:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8023238:	9010      	str	r0, [sp, #64]	; 0x40
 802323a:	9108      	str	r1, [sp, #32]
 802323c:	6850      	ldr	r0, [r2, #4]
 802323e:	9306      	str	r3, [sp, #24]
 8023240:	6812      	ldr	r2, [r2, #0]
 8023242:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 8023246:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 802324a:	fb00 1303 	mla	r3, r0, r3, r1
 802324e:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8023252:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023254:	681b      	ldr	r3, [r3, #0]
 8023256:	9307      	str	r3, [sp, #28]
 8023258:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802325a:	685f      	ldr	r7, [r3, #4]
 802325c:	3704      	adds	r7, #4
 802325e:	9b08      	ldr	r3, [sp, #32]
 8023260:	2b00      	cmp	r3, #0
 8023262:	dc03      	bgt.n	802326c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8023264:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8023266:	2b00      	cmp	r3, #0
 8023268:	f340 81b2 	ble.w	80235d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 802326c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802326e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023272:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023276:	1e48      	subs	r0, r1, #1
 8023278:	f102 3cff 	add.w	ip, r2, #4294967295
 802327c:	9b06      	ldr	r3, [sp, #24]
 802327e:	2b00      	cmp	r3, #0
 8023280:	f340 80a9 	ble.w	80233d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8023284:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8023288:	ea4f 4326 	mov.w	r3, r6, asr #16
 802328c:	d406      	bmi.n	802329c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 802328e:	4586      	cmp	lr, r0
 8023290:	da04      	bge.n	802329c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8023292:	2b00      	cmp	r3, #0
 8023294:	db02      	blt.n	802329c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8023296:	4563      	cmp	r3, ip
 8023298:	f2c0 809e 	blt.w	80233d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 802329c:	f11e 0e01 	adds.w	lr, lr, #1
 80232a0:	f100 808f 	bmi.w	80233c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 80232a4:	4571      	cmp	r1, lr
 80232a6:	f2c0 808c 	blt.w	80233c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 80232aa:	3301      	adds	r3, #1
 80232ac:	f100 8089 	bmi.w	80233c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 80232b0:	429a      	cmp	r2, r3
 80232b2:	f2c0 8086 	blt.w	80233c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 80232b6:	f8dd b018 	ldr.w	fp, [sp, #24]
 80232ba:	46c8      	mov	r8, r9
 80232bc:	f1bb 0f00 	cmp.w	fp, #0
 80232c0:	f340 80a6 	ble.w	8023410 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 80232c4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80232c6:	ea4f 4c26 	mov.w	ip, r6, asr #16
 80232ca:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80232cc:	f3c4 3003 	ubfx	r0, r4, #12, #4
 80232d0:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 80232d4:	1422      	asrs	r2, r4, #16
 80232d6:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80232da:	689b      	ldr	r3, [r3, #8]
 80232dc:	f100 80e3 	bmi.w	80234a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 80232e0:	f103 3aff 	add.w	sl, r3, #4294967295
 80232e4:	4552      	cmp	r2, sl
 80232e6:	f280 80de 	bge.w	80234a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 80232ea:	f1bc 0f00 	cmp.w	ip, #0
 80232ee:	f2c0 80da 	blt.w	80234a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 80232f2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80232f6:	45d4      	cmp	ip, sl
 80232f8:	f280 80d5 	bge.w	80234a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 80232fc:	b21b      	sxth	r3, r3
 80232fe:	9d07      	ldr	r5, [sp, #28]
 8023300:	fb0c 2203 	mla	r2, ip, r3, r2
 8023304:	eb05 0a02 	add.w	sl, r5, r2
 8023308:	5caa      	ldrb	r2, [r5, r2]
 802330a:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 802330e:	2800      	cmp	r0, #0
 8023310:	f000 80c0 	beq.w	8023494 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8023314:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8023318:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 802331c:	920b      	str	r2, [sp, #44]	; 0x2c
 802331e:	b151      	cbz	r1, 8023336 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 8023320:	eb0a 0203 	add.w	r2, sl, r3
 8023324:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8023328:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 802332c:	9309      	str	r3, [sp, #36]	; 0x24
 802332e:	7853      	ldrb	r3, [r2, #1]
 8023330:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8023334:	930c      	str	r3, [sp, #48]	; 0x30
 8023336:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023338:	fb10 f201 	smulbb	r2, r0, r1
 802333c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802333e:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8023342:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8023346:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 802334a:	10d2      	asrs	r2, r2, #3
 802334c:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8023350:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
 8023354:	ea4c 0c03 	orr.w	ip, ip, r3
 8023358:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802335a:	041b      	lsls	r3, r3, #16
 802335c:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8023360:	432b      	orrs	r3, r5
 8023362:	4353      	muls	r3, r2
 8023364:	fb0a 330c 	mla	r3, sl, ip, r3
 8023368:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 802336c:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8023370:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8023374:	ea4c 0e0e 	orr.w	lr, ip, lr
 8023378:	f1c1 0c10 	rsb	ip, r1, #16
 802337c:	ebac 0c00 	sub.w	ip, ip, r0
 8023380:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8023384:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 8023388:	fb0c 3c0e 	mla	ip, ip, lr, r3
 802338c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802338e:	0418      	lsls	r0, r3, #16
 8023390:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8023394:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8023398:	4318      	orrs	r0, r3
 802339a:	fb02 c200 	mla	r2, r2, r0, ip
 802339e:	0d53      	lsrs	r3, r2, #21
 80233a0:	0952      	lsrs	r2, r2, #5
 80233a2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80233a6:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80233aa:	431a      	orrs	r2, r3
 80233ac:	f8a8 2000 	strh.w	r2, [r8]
 80233b0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80233b2:	f108 0802 	add.w	r8, r8, #2
 80233b6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80233ba:	441c      	add	r4, r3
 80233bc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80233be:	441e      	add	r6, r3
 80233c0:	e77c      	b.n	80232bc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80233c2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80233c4:	f109 0902 	add.w	r9, r9, #2
 80233c8:	441c      	add	r4, r3
 80233ca:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80233cc:	441e      	add	r6, r3
 80233ce:	9b06      	ldr	r3, [sp, #24]
 80233d0:	3b01      	subs	r3, #1
 80233d2:	9306      	str	r3, [sp, #24]
 80233d4:	e752      	b.n	802327c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 80233d6:	d020      	beq.n	802341a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 80233d8:	9b06      	ldr	r3, [sp, #24]
 80233da:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80233dc:	3b01      	subs	r3, #1
 80233de:	fb00 4003 	mla	r0, r0, r3, r4
 80233e2:	1400      	asrs	r0, r0, #16
 80233e4:	f53f af67 	bmi.w	80232b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 80233e8:	3901      	subs	r1, #1
 80233ea:	4288      	cmp	r0, r1
 80233ec:	f6bf af63 	bge.w	80232b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 80233f0:	9920      	ldr	r1, [sp, #128]	; 0x80
 80233f2:	fb01 6303 	mla	r3, r1, r3, r6
 80233f6:	141b      	asrs	r3, r3, #16
 80233f8:	f53f af5d 	bmi.w	80232b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 80233fc:	3a01      	subs	r2, #1
 80233fe:	4293      	cmp	r3, r2
 8023400:	f6bf af59 	bge.w	80232b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8023404:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8023408:	46ca      	mov	sl, r9
 802340a:	f1b8 0f00 	cmp.w	r8, #0
 802340e:	dc67      	bgt.n	80234e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 8023410:	9b06      	ldr	r3, [sp, #24]
 8023412:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8023416:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 802341a:	9b08      	ldr	r3, [sp, #32]
 802341c:	2b00      	cmp	r3, #0
 802341e:	f340 80d7 	ble.w	80235d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 8023422:	ee30 0a04 	vadd.f32	s0, s0, s8
 8023426:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8023428:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802342c:	eeb0 6a62 	vmov.f32	s12, s5
 8023430:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8023434:	ee31 1a05 	vadd.f32	s2, s2, s10
 8023438:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802343c:	ee16 4a10 	vmov	r4, s12
 8023440:	eeb0 6a43 	vmov.f32	s12, s6
 8023444:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8023448:	ee16 6a10 	vmov	r6, s12
 802344c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8023450:	ee61 7a27 	vmul.f32	s15, s2, s15
 8023454:	ee77 2a62 	vsub.f32	s5, s14, s5
 8023458:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802345c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8023460:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8023464:	ee12 2a90 	vmov	r2, s5
 8023468:	eef0 2a47 	vmov.f32	s5, s14
 802346c:	fb92 f3f3 	sdiv	r3, r2, r3
 8023470:	ee13 2a10 	vmov	r2, s6
 8023474:	931f      	str	r3, [sp, #124]	; 0x7c
 8023476:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8023478:	eeb0 3a67 	vmov.f32	s6, s15
 802347c:	fb92 f3f3 	sdiv	r3, r2, r3
 8023480:	9320      	str	r3, [sp, #128]	; 0x80
 8023482:	9b08      	ldr	r3, [sp, #32]
 8023484:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8023486:	3b01      	subs	r3, #1
 8023488:	9308      	str	r3, [sp, #32]
 802348a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802348c:	bf08      	it	eq
 802348e:	4613      	moveq	r3, r2
 8023490:	9306      	str	r3, [sp, #24]
 8023492:	e6e4      	b.n	802325e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8023494:	2900      	cmp	r1, #0
 8023496:	f43f af4e 	beq.w	8023336 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 802349a:	f81a 3003 	ldrb.w	r3, [sl, r3]
 802349e:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80234a2:	9309      	str	r3, [sp, #36]	; 0x24
 80234a4:	e747      	b.n	8023336 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 80234a6:	f112 0a01 	adds.w	sl, r2, #1
 80234aa:	d481      	bmi.n	80233b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80234ac:	4553      	cmp	r3, sl
 80234ae:	f6ff af7f 	blt.w	80233b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80234b2:	f11c 0a01 	adds.w	sl, ip, #1
 80234b6:	f53f af7b 	bmi.w	80233b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80234ba:	45d6      	cmp	lr, sl
 80234bc:	f6ff af78 	blt.w	80233b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80234c0:	b21b      	sxth	r3, r3
 80234c2:	e9cd 2c02 	strd	r2, ip, [sp, #8]
 80234c6:	fa0f f28e 	sxth.w	r2, lr
 80234ca:	9300      	str	r3, [sp, #0]
 80234cc:	463b      	mov	r3, r7
 80234ce:	9201      	str	r2, [sp, #4]
 80234d0:	9a07      	ldr	r2, [sp, #28]
 80234d2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80234d6:	4641      	mov	r1, r8
 80234d8:	9810      	ldr	r0, [sp, #64]	; 0x40
 80234da:	f7ff fe21 	bl	8023120 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 80234de:	e767      	b.n	80233b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80234e0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80234e2:	1422      	asrs	r2, r4, #16
 80234e4:	1431      	asrs	r1, r6, #16
 80234e6:	9d07      	ldr	r5, [sp, #28]
 80234e8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80234ec:	f3c4 3e03 	ubfx	lr, r4, #12, #4
 80234f0:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80234f4:	fb03 2101 	mla	r1, r3, r1, r2
 80234f8:	9a07      	ldr	r2, [sp, #28]
 80234fa:	440a      	add	r2, r1
 80234fc:	5c69      	ldrb	r1, [r5, r1]
 80234fe:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 8023502:	f1be 0f00 	cmp.w	lr, #0
 8023506:	d05c      	beq.n	80235c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>
 8023508:	f892 c001 	ldrb.w	ip, [r2, #1]
 802350c:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
 8023510:	950d      	str	r5, [sp, #52]	; 0x34
 8023512:	b150      	cbz	r0, 802352a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 8023514:	eb02 0c03 	add.w	ip, r2, r3
 8023518:	5cd3      	ldrb	r3, [r2, r3]
 802351a:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 802351e:	930a      	str	r3, [sp, #40]	; 0x28
 8023520:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8023524:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8023528:	930e      	str	r3, [sp, #56]	; 0x38
 802352a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802352c:	fb1e f200 	smulbb	r2, lr, r0
 8023530:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8023532:	f108 38ff 	add.w	r8, r8, #4294967295
 8023536:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 802353a:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802353e:	10d2      	asrs	r2, r2, #3
 8023540:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
 8023544:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8023548:	ea4c 0c03 	orr.w	ip, ip, r3
 802354c:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
 8023550:	9311      	str	r3, [sp, #68]	; 0x44
 8023552:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023554:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8023556:	041b      	lsls	r3, r3, #16
 8023558:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 802355c:	ea43 030b 	orr.w	r3, r3, fp
 8023560:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8023564:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8023568:	4353      	muls	r3, r2
 802356a:	fb05 3c0c 	mla	ip, r5, ip, r3
 802356e:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 8023572:	ea43 0b01 	orr.w	fp, r3, r1
 8023576:	f1c0 0110 	rsb	r1, r0, #16
 802357a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802357c:	eba1 0e0e 	sub.w	lr, r1, lr
 8023580:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 8023584:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 8023588:	fb0e cc0b 	mla	ip, lr, fp, ip
 802358c:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 8023590:	f423 6efc 	bic.w	lr, r3, #2016	; 0x7e0
 8023594:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8023598:	ea4b 0e0e 	orr.w	lr, fp, lr
 802359c:	fb02 cc0e 	mla	ip, r2, lr, ip
 80235a0:	ea4f 535c 	mov.w	r3, ip, lsr #21
 80235a4:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80235a8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80235ac:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 80235b0:	ea43 0c0c 	orr.w	ip, r3, ip
 80235b4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80235b6:	441c      	add	r4, r3
 80235b8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80235ba:	f82a cb02 	strh.w	ip, [sl], #2
 80235be:	441e      	add	r6, r3
 80235c0:	e723      	b.n	802340a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 80235c2:	2800      	cmp	r0, #0
 80235c4:	d0b1      	beq.n	802352a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 80235c6:	5cd3      	ldrb	r3, [r2, r3]
 80235c8:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80235cc:	930a      	str	r3, [sp, #40]	; 0x28
 80235ce:	e7ac      	b.n	802352a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 80235d0:	b013      	add	sp, #76	; 0x4c
 80235d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080235d6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
 80235d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80235da:	880d      	ldrh	r5, [r1, #0]
 80235dc:	b087      	sub	sp, #28
 80235de:	10ef      	asrs	r7, r5, #3
 80235e0:	9103      	str	r1, [sp, #12]
 80235e2:	ea4f 2a25 	mov.w	sl, r5, asr #8
 80235e6:	f9bd 9040 	ldrsh.w	r9, [sp, #64]	; 0x40
 80235ea:	00ed      	lsls	r5, r5, #3
 80235ec:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80235f0:	f00a 0af8 	and.w	sl, sl, #248	; 0xf8
 80235f4:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 80235f8:	b2ed      	uxtb	r5, r5
 80235fa:	9701      	str	r7, [sp, #4]
 80235fc:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
 8023600:	9502      	str	r5, [sp, #8]
 8023602:	9d01      	ldr	r5, [sp, #4]
 8023604:	9902      	ldr	r1, [sp, #8]
 8023606:	022d      	lsls	r5, r5, #8
 8023608:	f89d e054 	ldrb.w	lr, [sp, #84]	; 0x54
 802360c:	f89d 8058 	ldrb.w	r8, [sp, #88]	; 0x58
 8023610:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 8023614:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	; 0x48
 8023618:	430d      	orrs	r5, r1
 802361a:	fb06 0709 	mla	r7, r6, r9, r0
 802361e:	2e00      	cmp	r6, #0
 8023620:	9505      	str	r5, [sp, #20]
 8023622:	eb02 0c07 	add.w	ip, r2, r7
 8023626:	f2c0 80b6 	blt.w	8023796 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 802362a:	45b3      	cmp	fp, r6
 802362c:	f340 80b3 	ble.w	8023796 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 8023630:	2800      	cmp	r0, #0
 8023632:	f2c0 80ae 	blt.w	8023792 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 8023636:	4581      	cmp	r9, r0
 8023638:	f340 80ab 	ble.w	8023792 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 802363c:	5dd7      	ldrb	r7, [r2, r7]
 802363e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8023642:	441f      	add	r7, r3
 8023644:	1c42      	adds	r2, r0, #1
 8023646:	f100 80a9 	bmi.w	802379c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 802364a:	4591      	cmp	r9, r2
 802364c:	f340 80a6 	ble.w	802379c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 8023650:	2c00      	cmp	r4, #0
 8023652:	f000 80a3 	beq.w	802379c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 8023656:	f89c 5001 	ldrb.w	r5, [ip, #1]
 802365a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802365e:	441d      	add	r5, r3
 8023660:	3601      	adds	r6, #1
 8023662:	f100 809f 	bmi.w	80237a4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 8023666:	45b3      	cmp	fp, r6
 8023668:	f340 809c 	ble.w	80237a4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 802366c:	f1be 0f00 	cmp.w	lr, #0
 8023670:	f000 8098 	beq.w	80237a4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 8023674:	2800      	cmp	r0, #0
 8023676:	f2c0 8093 	blt.w	80237a0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 802367a:	4581      	cmp	r9, r0
 802367c:	f340 8090 	ble.w	80237a0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 8023680:	f81c 6009 	ldrb.w	r6, [ip, r9]
 8023684:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8023688:	441e      	add	r6, r3
 802368a:	3001      	adds	r0, #1
 802368c:	f100 808d 	bmi.w	80237aa <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 8023690:	4581      	cmp	r9, r0
 8023692:	f340 808a 	ble.w	80237aa <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 8023696:	2c00      	cmp	r4, #0
 8023698:	f000 8087 	beq.w	80237aa <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 802369c:	44e1      	add	r9, ip
 802369e:	f899 2001 	ldrb.w	r2, [r9, #1]
 80236a2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80236a6:	4413      	add	r3, r2
 80236a8:	b2a4      	uxth	r4, r4
 80236aa:	f897 c002 	ldrb.w	ip, [r7, #2]
 80236ae:	fa1f fe8e 	uxth.w	lr, lr
 80236b2:	9901      	ldr	r1, [sp, #4]
 80236b4:	fb04 fb0e 	mul.w	fp, r4, lr
 80236b8:	0124      	lsls	r4, r4, #4
 80236ba:	ebcb 1e0e 	rsb	lr, fp, lr, lsl #4
 80236be:	f5c4 7980 	rsb	r9, r4, #256	; 0x100
 80236c2:	eba4 040b 	sub.w	r4, r4, fp
 80236c6:	fa1f f08e 	uxth.w	r0, lr
 80236ca:	b2a2      	uxth	r2, r4
 80236cc:	78ac      	ldrb	r4, [r5, #2]
 80236ce:	eba9 0900 	sub.w	r9, r9, r0
 80236d2:	fa1f fe88 	uxth.w	lr, r8
 80236d6:	4354      	muls	r4, r2
 80236d8:	ea6f 0808 	mvn.w	r8, r8
 80236dc:	fa1f f989 	uxth.w	r9, r9
 80236e0:	fa5f f888 	uxtb.w	r8, r8
 80236e4:	fb09 440c 	mla	r4, r9, ip, r4
 80236e8:	f896 c002 	ldrb.w	ip, [r6, #2]
 80236ec:	fb1a fa08 	smulbb	sl, sl, r8
 80236f0:	fb00 440c 	mla	r4, r0, ip, r4
 80236f4:	f893 c002 	ldrb.w	ip, [r3, #2]
 80236f8:	fb0b 4c0c 	mla	ip, fp, ip, r4
 80236fc:	787c      	ldrb	r4, [r7, #1]
 80236fe:	783f      	ldrb	r7, [r7, #0]
 8023700:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8023704:	fb0c ac0e 	mla	ip, ip, lr, sl
 8023708:	f895 a001 	ldrb.w	sl, [r5, #1]
 802370c:	782d      	ldrb	r5, [r5, #0]
 802370e:	fb02 fa0a 	mul.w	sl, r2, sl
 8023712:	fa1f fc8c 	uxth.w	ip, ip
 8023716:	436a      	muls	r2, r5
 8023718:	7835      	ldrb	r5, [r6, #0]
 802371a:	fb09 aa04 	mla	sl, r9, r4, sl
 802371e:	7874      	ldrb	r4, [r6, #1]
 8023720:	fb09 2207 	mla	r2, r9, r7, r2
 8023724:	fb00 aa04 	mla	sl, r0, r4, sl
 8023728:	785c      	ldrb	r4, [r3, #1]
 802372a:	fb00 2005 	mla	r0, r0, r5, r2
 802372e:	781b      	ldrb	r3, [r3, #0]
 8023730:	fb0b a404 	mla	r4, fp, r4, sl
 8023734:	fb11 fa08 	smulbb	sl, r1, r8
 8023738:	fb0b 0b03 	mla	fp, fp, r3, r0
 802373c:	9b02      	ldr	r3, [sp, #8]
 802373e:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8023742:	fb13 f808 	smulbb	r8, r3, r8
 8023746:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 802374a:	fb04 a40e 	mla	r4, r4, lr, sl
 802374e:	f10c 0301 	add.w	r3, ip, #1
 8023752:	fb0b 8e0e 	mla	lr, fp, lr, r8
 8023756:	b2a4      	uxth	r4, r4
 8023758:	fa1f fe8e 	uxth.w	lr, lr
 802375c:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8023760:	f104 0a01 	add.w	sl, r4, #1
 8023764:	f40c 4378 	and.w	r3, ip, #63488	; 0xf800
 8023768:	f10e 0c01 	add.w	ip, lr, #1
 802376c:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8023770:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8023774:	0964      	lsrs	r4, r4, #5
 8023776:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 802377a:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 802377e:	ea4c 0c03 	orr.w	ip, ip, r3
 8023782:	9b03      	ldr	r3, [sp, #12]
 8023784:	ea4c 0c04 	orr.w	ip, ip, r4
 8023788:	f8a3 c000 	strh.w	ip, [r3]
 802378c:	b007      	add	sp, #28
 802378e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023792:	af05      	add	r7, sp, #20
 8023794:	e756      	b.n	8023644 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6e>
 8023796:	ad05      	add	r5, sp, #20
 8023798:	462f      	mov	r7, r5
 802379a:	e761      	b.n	8023660 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 802379c:	ad05      	add	r5, sp, #20
 802379e:	e75f      	b.n	8023660 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 80237a0:	ae05      	add	r6, sp, #20
 80237a2:	e772      	b.n	802368a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
 80237a4:	ab05      	add	r3, sp, #20
 80237a6:	461e      	mov	r6, r3
 80237a8:	e77e      	b.n	80236a8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>
 80237aa:	ab05      	add	r3, sp, #20
 80237ac:	e77c      	b.n	80236a8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>

080237ae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80237ae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80237b2:	b095      	sub	sp, #84	; 0x54
 80237b4:	9212      	str	r2, [sp, #72]	; 0x48
 80237b6:	9309      	str	r3, [sp, #36]	; 0x24
 80237b8:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80237ba:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 80237be:	9013      	str	r0, [sp, #76]	; 0x4c
 80237c0:	930f      	str	r3, [sp, #60]	; 0x3c
 80237c2:	6850      	ldr	r0, [r2, #4]
 80237c4:	910e      	str	r1, [sp, #56]	; 0x38
 80237c6:	6812      	ldr	r2, [r2, #0]
 80237c8:	e9dd 1324 	ldrd	r1, r3, [sp, #144]	; 0x90
 80237cc:	fb00 1303 	mla	r3, r0, r3, r1
 80237d0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80237d4:	930a      	str	r3, [sp, #40]	; 0x28
 80237d6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80237d8:	681b      	ldr	r3, [r3, #0]
 80237da:	930d      	str	r3, [sp, #52]	; 0x34
 80237dc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80237de:	685c      	ldr	r4, [r3, #4]
 80237e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80237e2:	3404      	adds	r4, #4
 80237e4:	43db      	mvns	r3, r3
 80237e6:	b2db      	uxtb	r3, r3
 80237e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80237ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80237ec:	2b00      	cmp	r3, #0
 80237ee:	dc03      	bgt.n	80237f8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 80237f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80237f2:	2b00      	cmp	r3, #0
 80237f4:	f340 8255 	ble.w	8023ca2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 80237f8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80237fa:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80237fe:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023802:	1e48      	subs	r0, r1, #1
 8023804:	1e55      	subs	r5, r2, #1
 8023806:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023808:	2b00      	cmp	r3, #0
 802380a:	f340 80f9 	ble.w	8023a00 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 802380e:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 8023810:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8023812:	1436      	asrs	r6, r6, #16
 8023814:	ea4f 4323 	mov.w	r3, r3, asr #16
 8023818:	d406      	bmi.n	8023828 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 802381a:	4286      	cmp	r6, r0
 802381c:	da04      	bge.n	8023828 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 802381e:	2b00      	cmp	r3, #0
 8023820:	db02      	blt.n	8023828 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8023822:	42ab      	cmp	r3, r5
 8023824:	f2c0 80ed 	blt.w	8023a02 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 8023828:	3601      	adds	r6, #1
 802382a:	f100 80da 	bmi.w	80239e2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 802382e:	42b1      	cmp	r1, r6
 8023830:	f2c0 80d7 	blt.w	80239e2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8023834:	3301      	adds	r3, #1
 8023836:	f100 80d4 	bmi.w	80239e2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 802383a:	429a      	cmp	r2, r3
 802383c:	f2c0 80d1 	blt.w	80239e2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8023840:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023842:	9311      	str	r3, [sp, #68]	; 0x44
 8023844:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023846:	930c      	str	r3, [sp, #48]	; 0x30
 8023848:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802384a:	2b00      	cmp	r3, #0
 802384c:	f340 80fa 	ble.w	8023a44 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8023850:	9826      	ldr	r0, [sp, #152]	; 0x98
 8023852:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8023854:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8023856:	68c6      	ldr	r6, [r0, #12]
 8023858:	141d      	asrs	r5, r3, #16
 802385a:	981f      	ldr	r0, [sp, #124]	; 0x7c
 802385c:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8023860:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8023862:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8023864:	1400      	asrs	r0, r0, #16
 8023866:	f3c3 3303 	ubfx	r3, r3, #12, #4
 802386a:	6892      	ldr	r2, [r2, #8]
 802386c:	f100 813e 	bmi.w	8023aec <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8023870:	1e57      	subs	r7, r2, #1
 8023872:	42b8      	cmp	r0, r7
 8023874:	f280 813a 	bge.w	8023aec <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8023878:	2d00      	cmp	r5, #0
 802387a:	f2c0 8137 	blt.w	8023aec <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 802387e:	1e77      	subs	r7, r6, #1
 8023880:	42bd      	cmp	r5, r7
 8023882:	f280 8133 	bge.w	8023aec <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8023886:	b212      	sxth	r2, r2
 8023888:	fb05 0002 	mla	r0, r5, r2, r0
 802388c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802388e:	f815 a000 	ldrb.w	sl, [r5, r0]
 8023892:	182e      	adds	r6, r5, r0
 8023894:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 8023898:	eb04 050a 	add.w	r5, r4, sl
 802389c:	2b00      	cmp	r3, #0
 802389e:	f000 8117 	beq.w	8023ad0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 80238a2:	f896 c001 	ldrb.w	ip, [r6, #1]
 80238a6:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80238aa:	44a4      	add	ip, r4
 80238ac:	2900      	cmp	r1, #0
 80238ae:	f000 8117 	beq.w	8023ae0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 80238b2:	18b0      	adds	r0, r6, r2
 80238b4:	5cb2      	ldrb	r2, [r6, r2]
 80238b6:	7840      	ldrb	r0, [r0, #1]
 80238b8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80238bc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80238c0:	4422      	add	r2, r4
 80238c2:	4420      	add	r0, r4
 80238c4:	b29b      	uxth	r3, r3
 80238c6:	f89c 7002 	ldrb.w	r7, [ip, #2]
 80238ca:	b289      	uxth	r1, r1
 80238cc:	f895 b002 	ldrb.w	fp, [r5, #2]
 80238d0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80238d2:	fb03 f901 	mul.w	r9, r3, r1
 80238d6:	011b      	lsls	r3, r3, #4
 80238d8:	f8b6 e000 	ldrh.w	lr, [r6]
 80238dc:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80238e0:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 80238e4:	eba3 0309 	sub.w	r3, r3, r9
 80238e8:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 80238ec:	b289      	uxth	r1, r1
 80238ee:	f814 a00a 	ldrb.w	sl, [r4, sl]
 80238f2:	b29b      	uxth	r3, r3
 80238f4:	eba8 0801 	sub.w	r8, r8, r1
 80238f8:	435f      	muls	r7, r3
 80238fa:	fa1f f888 	uxth.w	r8, r8
 80238fe:	9310      	str	r3, [sp, #64]	; 0x40
 8023900:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023902:	fb08 770b 	mla	r7, r8, fp, r7
 8023906:	f892 b002 	ldrb.w	fp, [r2, #2]
 802390a:	fb01 770b 	mla	r7, r1, fp, r7
 802390e:	f890 b002 	ldrb.w	fp, [r0, #2]
 8023912:	fb09 770b 	mla	r7, r9, fp, r7
 8023916:	ea4f 2b2e 	mov.w	fp, lr, asr #8
 802391a:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 802391e:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8023922:	fb1b fb03 	smulbb	fp, fp, r3
 8023926:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8023928:	fb07 b706 	mla	r7, r7, r6, fp
 802392c:	f895 b001 	ldrb.w	fp, [r5, #1]
 8023930:	f89c 5001 	ldrb.w	r5, [ip, #1]
 8023934:	f89c c000 	ldrb.w	ip, [ip]
 8023938:	b2bf      	uxth	r7, r7
 802393a:	435d      	muls	r5, r3
 802393c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802393e:	fb08 550b 	mla	r5, r8, fp, r5
 8023942:	f892 b001 	ldrb.w	fp, [r2, #1]
 8023946:	fb01 550b 	mla	r5, r1, fp, r5
 802394a:	f890 b001 	ldrb.w	fp, [r0, #1]
 802394e:	fb09 550b 	mla	r5, r9, fp, r5
 8023952:	ea4f 0bee 	mov.w	fp, lr, asr #3
 8023956:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802395a:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 802395e:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8023962:	fa5f fe8e 	uxtb.w	lr, lr
 8023966:	fb1b fb03 	smulbb	fp, fp, r3
 802396a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802396c:	fb03 f30c 	mul.w	r3, r3, ip
 8023970:	f892 c000 	ldrb.w	ip, [r2]
 8023974:	fb05 b506 	mla	r5, r5, r6, fp
 8023978:	fb08 330a 	mla	r3, r8, sl, r3
 802397c:	b2ad      	uxth	r5, r5
 802397e:	fb01 330c 	mla	r3, r1, ip, r3
 8023982:	f890 c000 	ldrb.w	ip, [r0]
 8023986:	f105 0b01 	add.w	fp, r5, #1
 802398a:	fb09 3c0c 	mla	ip, r9, ip, r3
 802398e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023990:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 8023994:	fb1e fe03 	smulbb	lr, lr, r3
 8023998:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 802399c:	1c7b      	adds	r3, r7, #1
 802399e:	096d      	lsrs	r5, r5, #5
 80239a0:	fb0c e606 	mla	r6, ip, r6, lr
 80239a4:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 80239a8:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80239ac:	b2b6      	uxth	r6, r6
 80239ae:	f407 4378 	and.w	r3, r7, #63488	; 0xf800
 80239b2:	1c77      	adds	r7, r6, #1
 80239b4:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 80239b8:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 80239bc:	431f      	orrs	r7, r3
 80239be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80239c0:	433d      	orrs	r5, r7
 80239c2:	801d      	strh	r5, [r3, #0]
 80239c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80239c6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80239c8:	3302      	adds	r3, #2
 80239ca:	930c      	str	r3, [sp, #48]	; 0x30
 80239cc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80239ce:	4413      	add	r3, r2
 80239d0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80239d2:	931f      	str	r3, [sp, #124]	; 0x7c
 80239d4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80239d6:	4413      	add	r3, r2
 80239d8:	9320      	str	r3, [sp, #128]	; 0x80
 80239da:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80239dc:	3b01      	subs	r3, #1
 80239de:	9311      	str	r3, [sp, #68]	; 0x44
 80239e0:	e732      	b.n	8023848 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 80239e2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80239e4:	9e21      	ldr	r6, [sp, #132]	; 0x84
 80239e6:	4433      	add	r3, r6
 80239e8:	9e22      	ldr	r6, [sp, #136]	; 0x88
 80239ea:	931f      	str	r3, [sp, #124]	; 0x7c
 80239ec:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80239ee:	4433      	add	r3, r6
 80239f0:	9320      	str	r3, [sp, #128]	; 0x80
 80239f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80239f4:	3b01      	subs	r3, #1
 80239f6:	9309      	str	r3, [sp, #36]	; 0x24
 80239f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80239fa:	3302      	adds	r3, #2
 80239fc:	930a      	str	r3, [sp, #40]	; 0x28
 80239fe:	e702      	b.n	8023806 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8023a00:	d027      	beq.n	8023a52 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 8023a02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023a04:	9821      	ldr	r0, [sp, #132]	; 0x84
 8023a06:	3b01      	subs	r3, #1
 8023a08:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 8023a0a:	fb00 5003 	mla	r0, r0, r3, r5
 8023a0e:	1400      	asrs	r0, r0, #16
 8023a10:	f53f af16 	bmi.w	8023840 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8023a14:	3901      	subs	r1, #1
 8023a16:	4288      	cmp	r0, r1
 8023a18:	f6bf af12 	bge.w	8023840 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8023a1c:	9922      	ldr	r1, [sp, #136]	; 0x88
 8023a1e:	9820      	ldr	r0, [sp, #128]	; 0x80
 8023a20:	fb01 0303 	mla	r3, r1, r3, r0
 8023a24:	141b      	asrs	r3, r3, #16
 8023a26:	f53f af0b 	bmi.w	8023840 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8023a2a:	3a01      	subs	r2, #1
 8023a2c:	4293      	cmp	r3, r2
 8023a2e:	f6bf af07 	bge.w	8023840 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8023a32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023a34:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 8023a38:	9311      	str	r3, [sp, #68]	; 0x44
 8023a3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023a3c:	930c      	str	r3, [sp, #48]	; 0x30
 8023a3e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8023a40:	2b00      	cmp	r3, #0
 8023a42:	dc70      	bgt.n	8023b26 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 8023a44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023a46:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023a48:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8023a4c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8023a50:	930a      	str	r3, [sp, #40]	; 0x28
 8023a52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023a54:	2b00      	cmp	r3, #0
 8023a56:	f340 8124 	ble.w	8023ca2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 8023a5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023a5e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8023a60:	ee30 0a04 	vadd.f32	s0, s0, s8
 8023a64:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8023a68:	eef0 6a62 	vmov.f32	s13, s5
 8023a6c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8023a70:	ee31 1a05 	vadd.f32	s2, s2, s10
 8023a74:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023a78:	edcd 6a1f 	vstr	s13, [sp, #124]	; 0x7c
 8023a7c:	eef0 6a43 	vmov.f32	s13, s6
 8023a80:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023a84:	edcd 6a20 	vstr	s13, [sp, #128]	; 0x80
 8023a88:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8023a8c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8023a90:	ee77 2a62 	vsub.f32	s5, s14, s5
 8023a94:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8023a98:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8023a9c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8023aa0:	ee12 2a90 	vmov	r2, s5
 8023aa4:	eef0 2a47 	vmov.f32	s5, s14
 8023aa8:	fb92 f3f3 	sdiv	r3, r2, r3
 8023aac:	ee13 2a10 	vmov	r2, s6
 8023ab0:	9321      	str	r3, [sp, #132]	; 0x84
 8023ab2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8023ab4:	eeb0 3a67 	vmov.f32	s6, s15
 8023ab8:	fb92 f3f3 	sdiv	r3, r2, r3
 8023abc:	9322      	str	r3, [sp, #136]	; 0x88
 8023abe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023ac0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8023ac2:	3b01      	subs	r3, #1
 8023ac4:	930e      	str	r3, [sp, #56]	; 0x38
 8023ac6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8023ac8:	bf08      	it	eq
 8023aca:	4613      	moveq	r3, r2
 8023acc:	9309      	str	r3, [sp, #36]	; 0x24
 8023ace:	e68c      	b.n	80237ea <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8023ad0:	b149      	cbz	r1, 8023ae6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x338>
 8023ad2:	5cb2      	ldrb	r2, [r6, r2]
 8023ad4:	4628      	mov	r0, r5
 8023ad6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023ada:	4422      	add	r2, r4
 8023adc:	46ac      	mov	ip, r5
 8023ade:	e6f1      	b.n	80238c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8023ae0:	4628      	mov	r0, r5
 8023ae2:	462a      	mov	r2, r5
 8023ae4:	e6ee      	b.n	80238c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8023ae6:	4628      	mov	r0, r5
 8023ae8:	462a      	mov	r2, r5
 8023aea:	e7f7      	b.n	8023adc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 8023aec:	1c47      	adds	r7, r0, #1
 8023aee:	f53f af69 	bmi.w	80239c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8023af2:	42ba      	cmp	r2, r7
 8023af4:	f6ff af66 	blt.w	80239c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8023af8:	1c6f      	adds	r7, r5, #1
 8023afa:	f53f af63 	bmi.w	80239c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8023afe:	42be      	cmp	r6, r7
 8023b00:	f6ff af60 	blt.w	80239c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8023b04:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8023b06:	b236      	sxth	r6, r6
 8023b08:	b212      	sxth	r2, r2
 8023b0a:	9002      	str	r0, [sp, #8]
 8023b0c:	9601      	str	r6, [sp, #4]
 8023b0e:	9200      	str	r2, [sp, #0]
 8023b10:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8023b12:	e9cd 1705 	strd	r1, r7, [sp, #20]
 8023b16:	e9cd 5303 	strd	r5, r3, [sp, #12]
 8023b1a:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 8023b1e:	4623      	mov	r3, r4
 8023b20:	f7ff fd59 	bl	80235d6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
 8023b24:	e74e      	b.n	80239c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8023b26:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8023b28:	9820      	ldr	r0, [sp, #128]	; 0x80
 8023b2a:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8023b2e:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 8023b30:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8023b32:	1400      	asrs	r0, r0, #16
 8023b34:	142d      	asrs	r5, r5, #16
 8023b36:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8023b38:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8023b3c:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8023b40:	fb02 5000 	mla	r0, r2, r0, r5
 8023b44:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8023b46:	f815 9000 	ldrb.w	r9, [r5, r0]
 8023b4a:	182e      	adds	r6, r5, r0
 8023b4c:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8023b50:	eb04 0509 	add.w	r5, r4, r9
 8023b54:	2b00      	cmp	r3, #0
 8023b56:	f000 8096 	beq.w	8023c86 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8023b5a:	7877      	ldrb	r7, [r6, #1]
 8023b5c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8023b60:	4427      	add	r7, r4
 8023b62:	2900      	cmp	r1, #0
 8023b64:	f000 8097 	beq.w	8023c96 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e8>
 8023b68:	18b0      	adds	r0, r6, r2
 8023b6a:	5cb2      	ldrb	r2, [r6, r2]
 8023b6c:	7840      	ldrb	r0, [r0, #1]
 8023b6e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023b72:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8023b76:	4422      	add	r2, r4
 8023b78:	4420      	add	r0, r4
 8023b7a:	b29b      	uxth	r3, r3
 8023b7c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8023b7e:	b289      	uxth	r1, r1
 8023b80:	f895 b002 	ldrb.w	fp, [r5, #2]
 8023b84:	f8b6 c000 	ldrh.w	ip, [r6]
 8023b88:	fb03 f801 	mul.w	r8, r3, r1
 8023b8c:	011b      	lsls	r3, r3, #4
 8023b8e:	78be      	ldrb	r6, [r7, #2]
 8023b90:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 8023b94:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8023b98:	eba3 0308 	sub.w	r3, r3, r8
 8023b9c:	f814 9009 	ldrb.w	r9, [r4, r9]
 8023ba0:	b289      	uxth	r1, r1
 8023ba2:	b29b      	uxth	r3, r3
 8023ba4:	ebae 0e01 	sub.w	lr, lr, r1
 8023ba8:	435e      	muls	r6, r3
 8023baa:	fa1f fe8e 	uxth.w	lr, lr
 8023bae:	9310      	str	r3, [sp, #64]	; 0x40
 8023bb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023bb2:	fb0e 660b 	mla	r6, lr, fp, r6
 8023bb6:	f892 b002 	ldrb.w	fp, [r2, #2]
 8023bba:	fb01 660b 	mla	r6, r1, fp, r6
 8023bbe:	f890 b002 	ldrb.w	fp, [r0, #2]
 8023bc2:	fb08 660b 	mla	r6, r8, fp, r6
 8023bc6:	ea4f 2b2c 	mov.w	fp, ip, asr #8
 8023bca:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 8023bce:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8023bd2:	fb1b fb03 	smulbb	fp, fp, r3
 8023bd6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8023bd8:	fb06 b60a 	mla	r6, r6, sl, fp
 8023bdc:	f895 b001 	ldrb.w	fp, [r5, #1]
 8023be0:	787d      	ldrb	r5, [r7, #1]
 8023be2:	783f      	ldrb	r7, [r7, #0]
 8023be4:	b2b6      	uxth	r6, r6
 8023be6:	435d      	muls	r5, r3
 8023be8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023bea:	fb0e 550b 	mla	r5, lr, fp, r5
 8023bee:	f892 b001 	ldrb.w	fp, [r2, #1]
 8023bf2:	fb01 550b 	mla	r5, r1, fp, r5
 8023bf6:	f890 b001 	ldrb.w	fp, [r0, #1]
 8023bfa:	fb08 550b 	mla	r5, r8, fp, r5
 8023bfe:	ea4f 0bec 	mov.w	fp, ip, asr #3
 8023c02:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8023c06:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 8023c0a:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8023c0e:	fa5f fc8c 	uxtb.w	ip, ip
 8023c12:	fb1b fb03 	smulbb	fp, fp, r3
 8023c16:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8023c18:	437b      	muls	r3, r7
 8023c1a:	7817      	ldrb	r7, [r2, #0]
 8023c1c:	fb05 b50a 	mla	r5, r5, sl, fp
 8023c20:	fb0e 3309 	mla	r3, lr, r9, r3
 8023c24:	b2ad      	uxth	r5, r5
 8023c26:	fb01 3307 	mla	r3, r1, r7, r3
 8023c2a:	7807      	ldrb	r7, [r0, #0]
 8023c2c:	f105 0b01 	add.w	fp, r5, #1
 8023c30:	fb08 3707 	mla	r7, r8, r7, r3
 8023c34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023c36:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 8023c3a:	fb1c fc03 	smulbb	ip, ip, r3
 8023c3e:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8023c42:	1c73      	adds	r3, r6, #1
 8023c44:	096d      	lsrs	r5, r5, #5
 8023c46:	fb07 c70a 	mla	r7, r7, sl, ip
 8023c4a:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8023c4e:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8023c52:	b2bf      	uxth	r7, r7
 8023c54:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023c56:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 8023c5a:	1c7a      	adds	r2, r7, #1
 8023c5c:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 8023c60:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8023c64:	4316      	orrs	r6, r2
 8023c66:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8023c68:	432e      	orrs	r6, r5
 8023c6a:	f823 6b02 	strh.w	r6, [r3], #2
 8023c6e:	930c      	str	r3, [sp, #48]	; 0x30
 8023c70:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8023c72:	4413      	add	r3, r2
 8023c74:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8023c76:	931f      	str	r3, [sp, #124]	; 0x7c
 8023c78:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8023c7a:	4413      	add	r3, r2
 8023c7c:	9320      	str	r3, [sp, #128]	; 0x80
 8023c7e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8023c80:	3b01      	subs	r3, #1
 8023c82:	9311      	str	r3, [sp, #68]	; 0x44
 8023c84:	e6db      	b.n	8023a3e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
 8023c86:	b149      	cbz	r1, 8023c9c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ee>
 8023c88:	5cb2      	ldrb	r2, [r6, r2]
 8023c8a:	4628      	mov	r0, r5
 8023c8c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023c90:	4422      	add	r2, r4
 8023c92:	462f      	mov	r7, r5
 8023c94:	e771      	b.n	8023b7a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 8023c96:	4628      	mov	r0, r5
 8023c98:	462a      	mov	r2, r5
 8023c9a:	e76e      	b.n	8023b7a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 8023c9c:	4628      	mov	r0, r5
 8023c9e:	462a      	mov	r2, r5
 8023ca0:	e7f7      	b.n	8023c92 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8023ca2:	b015      	add	sp, #84	; 0x54
 8023ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023ca8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
 8023ca8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023cac:	880f      	ldrh	r7, [r1, #0]
 8023cae:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 8023cb2:	023c      	lsls	r4, r7, #8
 8023cb4:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 8023cb8:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 8023cbc:	f404 0b78 	and.w	fp, r4, #16252928	; 0xf80000
 8023cc0:	017c      	lsls	r4, r7, #5
 8023cc2:	00ff      	lsls	r7, r7, #3
 8023cc4:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 8023cc8:	f404 447c 	and.w	r4, r4, #64512	; 0xfc00
 8023ccc:	b2ff      	uxtb	r7, r7
 8023cce:	ea4b 0404 	orr.w	r4, fp, r4
 8023cd2:	e9dd c50e 	ldrd	ip, r5, [sp, #56]	; 0x38
 8023cd6:	4327      	orrs	r7, r4
 8023cd8:	fb05 ca0e 	mla	sl, r5, lr, ip
 8023cdc:	2d00      	cmp	r5, #0
 8023cde:	9701      	str	r7, [sp, #4]
 8023ce0:	eb02 080a 	add.w	r8, r2, sl
 8023ce4:	db7e      	blt.n	8023de4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 8023ce6:	45a9      	cmp	r9, r5
 8023ce8:	dd7c      	ble.n	8023de4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 8023cea:	f1bc 0f00 	cmp.w	ip, #0
 8023cee:	db77      	blt.n	8023de0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 8023cf0:	45e6      	cmp	lr, ip
 8023cf2:	dd75      	ble.n	8023de0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 8023cf4:	f812 700a 	ldrb.w	r7, [r2, sl]
 8023cf8:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8023cfc:	441f      	add	r7, r3
 8023cfe:	f11c 0201 	adds.w	r2, ip, #1
 8023d02:	d472      	bmi.n	8023dea <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 8023d04:	4596      	cmp	lr, r2
 8023d06:	dd70      	ble.n	8023dea <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 8023d08:	2800      	cmp	r0, #0
 8023d0a:	d06e      	beq.n	8023dea <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 8023d0c:	f898 4001 	ldrb.w	r4, [r8, #1]
 8023d10:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8023d14:	441c      	add	r4, r3
 8023d16:	3501      	adds	r5, #1
 8023d18:	d46b      	bmi.n	8023df2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 8023d1a:	45a9      	cmp	r9, r5
 8023d1c:	dd69      	ble.n	8023df2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 8023d1e:	2e00      	cmp	r6, #0
 8023d20:	d067      	beq.n	8023df2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 8023d22:	f1bc 0f00 	cmp.w	ip, #0
 8023d26:	db62      	blt.n	8023dee <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 8023d28:	45e6      	cmp	lr, ip
 8023d2a:	dd60      	ble.n	8023dee <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 8023d2c:	f818 500e 	ldrb.w	r5, [r8, lr]
 8023d30:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8023d34:	441d      	add	r5, r3
 8023d36:	f11c 0201 	adds.w	r2, ip, #1
 8023d3a:	d45d      	bmi.n	8023df8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 8023d3c:	4596      	cmp	lr, r2
 8023d3e:	dd5b      	ble.n	8023df8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 8023d40:	2800      	cmp	r0, #0
 8023d42:	d059      	beq.n	8023df8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 8023d44:	44c6      	add	lr, r8
 8023d46:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8023d4a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023d4e:	4413      	add	r3, r2
 8023d50:	b280      	uxth	r0, r0
 8023d52:	f897 e002 	ldrb.w	lr, [r7, #2]
 8023d56:	b2b2      	uxth	r2, r6
 8023d58:	f897 9000 	ldrb.w	r9, [r7]
 8023d5c:	787f      	ldrb	r7, [r7, #1]
 8023d5e:	fb00 f602 	mul.w	r6, r0, r2
 8023d62:	0100      	lsls	r0, r0, #4
 8023d64:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 8023d68:	f5c0 7880 	rsb	r8, r0, #256	; 0x100
 8023d6c:	1b80      	subs	r0, r0, r6
 8023d6e:	fa1f fc82 	uxth.w	ip, r2
 8023d72:	b282      	uxth	r2, r0
 8023d74:	78a0      	ldrb	r0, [r4, #2]
 8023d76:	eba8 080c 	sub.w	r8, r8, ip
 8023d7a:	4350      	muls	r0, r2
 8023d7c:	fa1f f888 	uxth.w	r8, r8
 8023d80:	fb08 0e0e 	mla	lr, r8, lr, r0
 8023d84:	78a8      	ldrb	r0, [r5, #2]
 8023d86:	fb0c e000 	mla	r0, ip, r0, lr
 8023d8a:	f893 e002 	ldrb.w	lr, [r3, #2]
 8023d8e:	fb06 0e0e 	mla	lr, r6, lr, r0
 8023d92:	f40e 4078 	and.w	r0, lr, #63488	; 0xf800
 8023d96:	f894 e000 	ldrb.w	lr, [r4]
 8023d9a:	fb02 fe0e 	mul.w	lr, r2, lr
 8023d9e:	fb08 e909 	mla	r9, r8, r9, lr
 8023da2:	f895 e000 	ldrb.w	lr, [r5]
 8023da6:	fb0c 990e 	mla	r9, ip, lr, r9
 8023daa:	f893 e000 	ldrb.w	lr, [r3]
 8023dae:	785b      	ldrb	r3, [r3, #1]
 8023db0:	fb06 9e0e 	mla	lr, r6, lr, r9
 8023db4:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 8023db8:	ea4e 0e00 	orr.w	lr, lr, r0
 8023dbc:	7860      	ldrb	r0, [r4, #1]
 8023dbe:	4350      	muls	r0, r2
 8023dc0:	786a      	ldrb	r2, [r5, #1]
 8023dc2:	fb08 0007 	mla	r0, r8, r7, r0
 8023dc6:	fb0c 0202 	mla	r2, ip, r2, r0
 8023dca:	fb06 2303 	mla	r3, r6, r3, r2
 8023dce:	095b      	lsrs	r3, r3, #5
 8023dd0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8023dd4:	ea4e 0303 	orr.w	r3, lr, r3
 8023dd8:	800b      	strh	r3, [r1, #0]
 8023dda:	b003      	add	sp, #12
 8023ddc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023de0:	af01      	add	r7, sp, #4
 8023de2:	e78c      	b.n	8023cfe <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x56>
 8023de4:	ac01      	add	r4, sp, #4
 8023de6:	4627      	mov	r7, r4
 8023de8:	e795      	b.n	8023d16 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 8023dea:	ac01      	add	r4, sp, #4
 8023dec:	e793      	b.n	8023d16 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 8023dee:	ad01      	add	r5, sp, #4
 8023df0:	e7a1      	b.n	8023d36 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x8e>
 8023df2:	ab01      	add	r3, sp, #4
 8023df4:	461d      	mov	r5, r3
 8023df6:	e7ab      	b.n	8023d50 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>
 8023df8:	ab01      	add	r3, sp, #4
 8023dfa:	e7a9      	b.n	8023d50 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>

08023dfc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023dfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023e00:	b08f      	sub	sp, #60	; 0x3c
 8023e02:	920c      	str	r2, [sp, #48]	; 0x30
 8023e04:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8023e06:	900d      	str	r0, [sp, #52]	; 0x34
 8023e08:	910a      	str	r1, [sp, #40]	; 0x28
 8023e0a:	6850      	ldr	r0, [r2, #4]
 8023e0c:	9306      	str	r3, [sp, #24]
 8023e0e:	6812      	ldr	r2, [r2, #0]
 8023e10:	e9dd 131e 	ldrd	r1, r3, [sp, #120]	; 0x78
 8023e14:	e9dd b519 	ldrd	fp, r5, [sp, #100]	; 0x64
 8023e18:	fb00 1303 	mla	r3, r0, r3, r1
 8023e1c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8023e20:	9307      	str	r3, [sp, #28]
 8023e22:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8023e24:	681b      	ldr	r3, [r3, #0]
 8023e26:	9308      	str	r3, [sp, #32]
 8023e28:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8023e2a:	685c      	ldr	r4, [r3, #4]
 8023e2c:	3404      	adds	r4, #4
 8023e2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023e30:	2b00      	cmp	r3, #0
 8023e32:	dc03      	bgt.n	8023e3c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 8023e34:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023e36:	2b00      	cmp	r3, #0
 8023e38:	f340 81d5 	ble.w	80241e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 8023e3c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8023e3e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023e42:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023e46:	1e48      	subs	r0, r1, #1
 8023e48:	1e56      	subs	r6, r2, #1
 8023e4a:	9b06      	ldr	r3, [sp, #24]
 8023e4c:	2b00      	cmp	r3, #0
 8023e4e:	f340 80b6 	ble.w	8023fbe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8023e52:	ea5f 472b 	movs.w	r7, fp, asr #16
 8023e56:	ea4f 4325 	mov.w	r3, r5, asr #16
 8023e5a:	d406      	bmi.n	8023e6a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8023e5c:	4287      	cmp	r7, r0
 8023e5e:	da04      	bge.n	8023e6a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8023e60:	2b00      	cmp	r3, #0
 8023e62:	db02      	blt.n	8023e6a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8023e64:	42b3      	cmp	r3, r6
 8023e66:	f2c0 80ab 	blt.w	8023fc0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c4>
 8023e6a:	3701      	adds	r7, #1
 8023e6c:	f100 809c 	bmi.w	8023fa8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8023e70:	42b9      	cmp	r1, r7
 8023e72:	f2c0 8099 	blt.w	8023fa8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8023e76:	3301      	adds	r3, #1
 8023e78:	f100 8096 	bmi.w	8023fa8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8023e7c:	429a      	cmp	r2, r3
 8023e7e:	f2c0 8093 	blt.w	8023fa8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8023e82:	9b06      	ldr	r3, [sp, #24]
 8023e84:	930b      	str	r3, [sp, #44]	; 0x2c
 8023e86:	9b07      	ldr	r3, [sp, #28]
 8023e88:	9309      	str	r3, [sp, #36]	; 0x24
 8023e8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023e8c:	2b00      	cmp	r3, #0
 8023e8e:	f340 80b4 	ble.w	8023ffa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 8023e92:	9820      	ldr	r0, [sp, #128]	; 0x80
 8023e94:	142e      	asrs	r6, r5, #16
 8023e96:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8023e98:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8023e9c:	68c7      	ldr	r7, [r0, #12]
 8023e9e:	ea5f 402b 	movs.w	r0, fp, asr #16
 8023ea2:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8023ea6:	6892      	ldr	r2, [r2, #8]
 8023ea8:	f100 80fb 	bmi.w	80240a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8023eac:	f102 3cff 	add.w	ip, r2, #4294967295
 8023eb0:	4560      	cmp	r0, ip
 8023eb2:	f280 80f6 	bge.w	80240a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8023eb6:	2e00      	cmp	r6, #0
 8023eb8:	f2c0 80f3 	blt.w	80240a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8023ebc:	f107 3cff 	add.w	ip, r7, #4294967295
 8023ec0:	4566      	cmp	r6, ip
 8023ec2:	f280 80ee 	bge.w	80240a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8023ec6:	b212      	sxth	r2, r2
 8023ec8:	fb06 0002 	mla	r0, r6, r2, r0
 8023ecc:	9e08      	ldr	r6, [sp, #32]
 8023ece:	1837      	adds	r7, r6, r0
 8023ed0:	5c30      	ldrb	r0, [r6, r0]
 8023ed2:	eb00 0840 	add.w	r8, r0, r0, lsl #1
 8023ed6:	eb04 0c08 	add.w	ip, r4, r8
 8023eda:	2b00      	cmp	r3, #0
 8023edc:	f000 80d3 	beq.w	8024086 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8023ee0:	787e      	ldrb	r6, [r7, #1]
 8023ee2:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8023ee6:	4426      	add	r6, r4
 8023ee8:	2900      	cmp	r1, #0
 8023eea:	f000 80d4 	beq.w	8024096 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8023eee:	18b8      	adds	r0, r7, r2
 8023ef0:	5cba      	ldrb	r2, [r7, r2]
 8023ef2:	7840      	ldrb	r0, [r0, #1]
 8023ef4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023ef8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8023efc:	4422      	add	r2, r4
 8023efe:	4420      	add	r0, r4
 8023f00:	b29b      	uxth	r3, r3
 8023f02:	78b7      	ldrb	r7, [r6, #2]
 8023f04:	b289      	uxth	r1, r1
 8023f06:	f89c a002 	ldrb.w	sl, [ip, #2]
 8023f0a:	f89c c001 	ldrb.w	ip, [ip, #1]
 8023f0e:	fb03 f901 	mul.w	r9, r3, r1
 8023f12:	011b      	lsls	r3, r3, #4
 8023f14:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8023f18:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8023f1c:	eba3 0309 	sub.w	r3, r3, r9
 8023f20:	b289      	uxth	r1, r1
 8023f22:	b29b      	uxth	r3, r3
 8023f24:	ebae 0e01 	sub.w	lr, lr, r1
 8023f28:	435f      	muls	r7, r3
 8023f2a:	fa1f fe8e 	uxth.w	lr, lr
 8023f2e:	fb0e 770a 	mla	r7, lr, sl, r7
 8023f32:	f892 a002 	ldrb.w	sl, [r2, #2]
 8023f36:	fb01 770a 	mla	r7, r1, sl, r7
 8023f3a:	f890 a002 	ldrb.w	sl, [r0, #2]
 8023f3e:	fb09 7a0a 	mla	sl, r9, sl, r7
 8023f42:	f814 7008 	ldrb.w	r7, [r4, r8]
 8023f46:	f896 8000 	ldrb.w	r8, [r6]
 8023f4a:	7876      	ldrb	r6, [r6, #1]
 8023f4c:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 8023f50:	fb03 f808 	mul.w	r8, r3, r8
 8023f54:	4373      	muls	r3, r6
 8023f56:	fb0e 8807 	mla	r8, lr, r7, r8
 8023f5a:	7817      	ldrb	r7, [r2, #0]
 8023f5c:	fb0e 330c 	mla	r3, lr, ip, r3
 8023f60:	fb01 8807 	mla	r8, r1, r7, r8
 8023f64:	7807      	ldrb	r7, [r0, #0]
 8023f66:	fb09 8707 	mla	r7, r9, r7, r8
 8023f6a:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8023f6e:	ea47 070a 	orr.w	r7, r7, sl
 8023f72:	f892 a001 	ldrb.w	sl, [r2, #1]
 8023f76:	fb01 310a 	mla	r1, r1, sl, r3
 8023f7a:	f890 a001 	ldrb.w	sl, [r0, #1]
 8023f7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023f80:	fb09 1a0a 	mla	sl, r9, sl, r1
 8023f84:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8023f88:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8023f8c:	ea47 070a 	orr.w	r7, r7, sl
 8023f90:	801f      	strh	r7, [r3, #0]
 8023f92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023f94:	3302      	adds	r3, #2
 8023f96:	9309      	str	r3, [sp, #36]	; 0x24
 8023f98:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8023f9a:	449b      	add	fp, r3
 8023f9c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8023f9e:	441d      	add	r5, r3
 8023fa0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023fa2:	3b01      	subs	r3, #1
 8023fa4:	930b      	str	r3, [sp, #44]	; 0x2c
 8023fa6:	e770      	b.n	8023e8a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8023fa8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8023faa:	449b      	add	fp, r3
 8023fac:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8023fae:	441d      	add	r5, r3
 8023fb0:	9b06      	ldr	r3, [sp, #24]
 8023fb2:	3b01      	subs	r3, #1
 8023fb4:	9306      	str	r3, [sp, #24]
 8023fb6:	9b07      	ldr	r3, [sp, #28]
 8023fb8:	3302      	adds	r3, #2
 8023fba:	9307      	str	r3, [sp, #28]
 8023fbc:	e745      	b.n	8023e4a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 8023fbe:	d023      	beq.n	8024008 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8023fc0:	9b06      	ldr	r3, [sp, #24]
 8023fc2:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8023fc4:	3b01      	subs	r3, #1
 8023fc6:	fb00 b003 	mla	r0, r0, r3, fp
 8023fca:	1400      	asrs	r0, r0, #16
 8023fcc:	f53f af59 	bmi.w	8023e82 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8023fd0:	3901      	subs	r1, #1
 8023fd2:	4288      	cmp	r0, r1
 8023fd4:	f6bf af55 	bge.w	8023e82 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8023fd8:	991c      	ldr	r1, [sp, #112]	; 0x70
 8023fda:	fb01 5303 	mla	r3, r1, r3, r5
 8023fde:	141b      	asrs	r3, r3, #16
 8023fe0:	f53f af4f 	bmi.w	8023e82 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8023fe4:	3a01      	subs	r2, #1
 8023fe6:	4293      	cmp	r3, r2
 8023fe8:	f6bf af4b 	bge.w	8023e82 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8023fec:	9b06      	ldr	r3, [sp, #24]
 8023fee:	9309      	str	r3, [sp, #36]	; 0x24
 8023ff0:	9b07      	ldr	r3, [sp, #28]
 8023ff2:	930b      	str	r3, [sp, #44]	; 0x2c
 8023ff4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023ff6:	2b00      	cmp	r3, #0
 8023ff8:	dc70      	bgt.n	80240dc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8023ffa:	9b06      	ldr	r3, [sp, #24]
 8023ffc:	9a07      	ldr	r2, [sp, #28]
 8023ffe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8024002:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8024006:	9307      	str	r3, [sp, #28]
 8024008:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802400a:	2b00      	cmp	r3, #0
 802400c:	f340 80eb 	ble.w	80241e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 8024010:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8024014:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8024016:	ee30 0a04 	vadd.f32	s0, s0, s8
 802401a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802401e:	eef0 6a62 	vmov.f32	s13, s5
 8024022:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8024026:	ee31 1a05 	vadd.f32	s2, s2, s10
 802402a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802402e:	ee16 ba90 	vmov	fp, s13
 8024032:	eef0 6a43 	vmov.f32	s13, s6
 8024036:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802403a:	ee16 5a90 	vmov	r5, s13
 802403e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8024042:	ee61 7a27 	vmul.f32	s15, s2, s15
 8024046:	ee77 2a62 	vsub.f32	s5, s14, s5
 802404a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802404e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8024052:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8024056:	ee12 2a90 	vmov	r2, s5
 802405a:	eef0 2a47 	vmov.f32	s5, s14
 802405e:	fb92 f3f3 	sdiv	r3, r2, r3
 8024062:	ee13 2a10 	vmov	r2, s6
 8024066:	931b      	str	r3, [sp, #108]	; 0x6c
 8024068:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802406a:	eeb0 3a67 	vmov.f32	s6, s15
 802406e:	fb92 f3f3 	sdiv	r3, r2, r3
 8024072:	931c      	str	r3, [sp, #112]	; 0x70
 8024074:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024076:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8024078:	3b01      	subs	r3, #1
 802407a:	930a      	str	r3, [sp, #40]	; 0x28
 802407c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802407e:	bf08      	it	eq
 8024080:	4613      	moveq	r3, r2
 8024082:	9306      	str	r3, [sp, #24]
 8024084:	e6d3      	b.n	8023e2e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 8024086:	b149      	cbz	r1, 802409c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8024088:	5cba      	ldrb	r2, [r7, r2]
 802408a:	4660      	mov	r0, ip
 802408c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024090:	4422      	add	r2, r4
 8024092:	4666      	mov	r6, ip
 8024094:	e734      	b.n	8023f00 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 8024096:	4660      	mov	r0, ip
 8024098:	4662      	mov	r2, ip
 802409a:	e731      	b.n	8023f00 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 802409c:	4660      	mov	r0, ip
 802409e:	4662      	mov	r2, ip
 80240a0:	e7f7      	b.n	8024092 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 80240a2:	f110 0c01 	adds.w	ip, r0, #1
 80240a6:	f53f af74 	bmi.w	8023f92 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 80240aa:	4562      	cmp	r2, ip
 80240ac:	f6ff af71 	blt.w	8023f92 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 80240b0:	f116 0c01 	adds.w	ip, r6, #1
 80240b4:	f53f af6d 	bmi.w	8023f92 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 80240b8:	4567      	cmp	r7, ip
 80240ba:	f6ff af6a 	blt.w	8023f92 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 80240be:	b23f      	sxth	r7, r7
 80240c0:	b212      	sxth	r2, r2
 80240c2:	9701      	str	r7, [sp, #4]
 80240c4:	9200      	str	r2, [sp, #0]
 80240c6:	e9cd 3104 	strd	r3, r1, [sp, #16]
 80240ca:	e9cd 0602 	strd	r0, r6, [sp, #8]
 80240ce:	4623      	mov	r3, r4
 80240d0:	980d      	ldr	r0, [sp, #52]	; 0x34
 80240d2:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 80240d6:	f7ff fde7 	bl	8023ca8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
 80240da:	e75a      	b.n	8023f92 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 80240dc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80240de:	ea4f 462b 	mov.w	r6, fp, asr #16
 80240e2:	1428      	asrs	r0, r5, #16
 80240e4:	f3cb 3303 	ubfx	r3, fp, #12, #4
 80240e8:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80240ec:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80240f0:	fb02 6000 	mla	r0, r2, r0, r6
 80240f4:	9e08      	ldr	r6, [sp, #32]
 80240f6:	f816 8000 	ldrb.w	r8, [r6, r0]
 80240fa:	1837      	adds	r7, r6, r0
 80240fc:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8024100:	eb04 0c08 	add.w	ip, r4, r8
 8024104:	2b00      	cmp	r3, #0
 8024106:	d060      	beq.n	80241ca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ce>
 8024108:	787e      	ldrb	r6, [r7, #1]
 802410a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 802410e:	4426      	add	r6, r4
 8024110:	2900      	cmp	r1, #0
 8024112:	d062      	beq.n	80241da <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
 8024114:	18b8      	adds	r0, r7, r2
 8024116:	5cba      	ldrb	r2, [r7, r2]
 8024118:	7840      	ldrb	r0, [r0, #1]
 802411a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802411e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8024122:	4422      	add	r2, r4
 8024124:	4420      	add	r0, r4
 8024126:	b29b      	uxth	r3, r3
 8024128:	78b7      	ldrb	r7, [r6, #2]
 802412a:	b289      	uxth	r1, r1
 802412c:	f89c a002 	ldrb.w	sl, [ip, #2]
 8024130:	f89c c001 	ldrb.w	ip, [ip, #1]
 8024134:	fb03 f901 	mul.w	r9, r3, r1
 8024138:	011b      	lsls	r3, r3, #4
 802413a:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 802413e:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8024142:	eba3 0309 	sub.w	r3, r3, r9
 8024146:	b289      	uxth	r1, r1
 8024148:	b29b      	uxth	r3, r3
 802414a:	ebae 0e01 	sub.w	lr, lr, r1
 802414e:	435f      	muls	r7, r3
 8024150:	fa1f fe8e 	uxth.w	lr, lr
 8024154:	fb0e 770a 	mla	r7, lr, sl, r7
 8024158:	f892 a002 	ldrb.w	sl, [r2, #2]
 802415c:	fb01 770a 	mla	r7, r1, sl, r7
 8024160:	f890 a002 	ldrb.w	sl, [r0, #2]
 8024164:	fb09 7a0a 	mla	sl, r9, sl, r7
 8024168:	f814 7008 	ldrb.w	r7, [r4, r8]
 802416c:	f896 8000 	ldrb.w	r8, [r6]
 8024170:	7876      	ldrb	r6, [r6, #1]
 8024172:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 8024176:	fb03 f808 	mul.w	r8, r3, r8
 802417a:	4373      	muls	r3, r6
 802417c:	7856      	ldrb	r6, [r2, #1]
 802417e:	fb0e 8807 	mla	r8, lr, r7, r8
 8024182:	7817      	ldrb	r7, [r2, #0]
 8024184:	fb0e 330c 	mla	r3, lr, ip, r3
 8024188:	fb01 8807 	mla	r8, r1, r7, r8
 802418c:	7807      	ldrb	r7, [r0, #0]
 802418e:	fb01 3306 	mla	r3, r1, r6, r3
 8024192:	fb09 8707 	mla	r7, r9, r7, r8
 8024196:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 802419a:	ea47 070a 	orr.w	r7, r7, sl
 802419e:	f890 a001 	ldrb.w	sl, [r0, #1]
 80241a2:	fb09 3a0a 	mla	sl, r9, sl, r3
 80241a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80241a8:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80241ac:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80241b0:	ea47 070a 	orr.w	r7, r7, sl
 80241b4:	f823 7b02 	strh.w	r7, [r3], #2
 80241b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80241ba:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80241bc:	449b      	add	fp, r3
 80241be:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80241c0:	441d      	add	r5, r3
 80241c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80241c4:	3b01      	subs	r3, #1
 80241c6:	9309      	str	r3, [sp, #36]	; 0x24
 80241c8:	e714      	b.n	8023ff4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
 80241ca:	b149      	cbz	r1, 80241e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 80241cc:	5cba      	ldrb	r2, [r7, r2]
 80241ce:	4660      	mov	r0, ip
 80241d0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80241d4:	4422      	add	r2, r4
 80241d6:	4666      	mov	r6, ip
 80241d8:	e7a5      	b.n	8024126 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 80241da:	4660      	mov	r0, ip
 80241dc:	4662      	mov	r2, ip
 80241de:	e7a2      	b.n	8024126 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 80241e0:	4660      	mov	r0, ip
 80241e2:	4662      	mov	r2, ip
 80241e4:	e7f7      	b.n	80241d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3da>
 80241e6:	b00f      	add	sp, #60	; 0x3c
 80241e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080241ec <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
 80241ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80241f0:	b085      	sub	sp, #20
 80241f2:	e9dd 7410 	ldrd	r7, r4, [sp, #64]	; 0x40
 80241f6:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 80241fa:	9102      	str	r1, [sp, #8]
 80241fc:	2c00      	cmp	r4, #0
 80241fe:	fb04 710c 	mla	r1, r4, ip, r7
 8024202:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 8024206:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
 802420a:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 802420e:	eb02 0e01 	add.w	lr, r2, r1
 8024212:	f2c0 8122 	blt.w	802445a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 8024216:	45a0      	cmp	r8, r4
 8024218:	f340 811f 	ble.w	802445a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 802421c:	2f00      	cmp	r7, #0
 802421e:	f2c0 811a 	blt.w	8024456 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 8024222:	45bc      	cmp	ip, r7
 8024224:	f340 8117 	ble.w	8024456 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 8024228:	5c52      	ldrb	r2, [r2, r1]
 802422a:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 802422e:	1c7a      	adds	r2, r7, #1
 8024230:	f100 8116 	bmi.w	8024460 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 8024234:	4594      	cmp	ip, r2
 8024236:	f340 8113 	ble.w	8024460 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 802423a:	2e00      	cmp	r6, #0
 802423c:	f000 8112 	beq.w	8024464 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x278>
 8024240:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8024244:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8024248:	3401      	adds	r4, #1
 802424a:	f100 810f 	bmi.w	802446c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 802424e:	45a0      	cmp	r8, r4
 8024250:	f340 810c 	ble.w	802446c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 8024254:	2800      	cmp	r0, #0
 8024256:	f000 810c 	beq.w	8024472 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x286>
 802425a:	2f00      	cmp	r7, #0
 802425c:	f2c0 8104 	blt.w	8024468 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 8024260:	45bc      	cmp	ip, r7
 8024262:	f340 8101 	ble.w	8024468 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 8024266:	f81e 200c 	ldrb.w	r2, [lr, ip]
 802426a:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 802426e:	3701      	adds	r7, #1
 8024270:	f100 8102 	bmi.w	8024478 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 8024274:	45bc      	cmp	ip, r7
 8024276:	f340 80ff 	ble.w	8024478 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 802427a:	2e00      	cmp	r6, #0
 802427c:	f000 80fe 	beq.w	802447c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x290>
 8024280:	44f4      	add	ip, lr
 8024282:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8024286:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 802428a:	b2b6      	uxth	r6, r6
 802428c:	b280      	uxth	r0, r0
 802428e:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 8024292:	fb00 fe06 	mul.w	lr, r0, r6
 8024296:	0136      	lsls	r6, r6, #4
 8024298:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 802429c:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 80242a0:	eba6 070e 	sub.w	r7, r6, lr
 80242a4:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 80242a8:	ea4f 6914 	mov.w	r9, r4, lsr #24
 80242ac:	b280      	uxth	r0, r0
 80242ae:	b2bf      	uxth	r7, r7
 80242b0:	1a1b      	subs	r3, r3, r0
 80242b2:	ea4f 6812 	mov.w	r8, r2, lsr #24
 80242b6:	fb0a f607 	mul.w	r6, sl, r7
 80242ba:	b29b      	uxth	r3, r3
 80242bc:	fb0b 6603 	mla	r6, fp, r3, r6
 80242c0:	fb00 6609 	mla	r6, r0, r9, r6
 80242c4:	fb0e 6608 	mla	r6, lr, r8, r6
 80242c8:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80242cc:	9600      	str	r6, [sp, #0]
 80242ce:	2e00      	cmp	r6, #0
 80242d0:	f000 80be 	beq.w	8024450 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x264>
 80242d4:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80242d8:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80242dc:	9e02      	ldr	r6, [sp, #8]
 80242de:	fb0b fc0c 	mul.w	ip, fp, ip
 80242e2:	fb0b f505 	mul.w	r5, fp, r5
 80242e6:	8836      	ldrh	r6, [r6, #0]
 80242e8:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 80242ec:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80242f0:	9501      	str	r5, [sp, #4]
 80242f2:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 80242f6:	44dc      	add	ip, fp
 80242f8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80242fc:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 8024300:	9503      	str	r5, [sp, #12]
 8024302:	9d01      	ldr	r5, [sp, #4]
 8024304:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 8024308:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 802430c:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 8024310:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8024314:	fb0a fc0c 	mul.w	ip, sl, ip
 8024318:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 802431c:	fb0a fa01 	mul.w	sl, sl, r1
 8024320:	ea4f 251c 	mov.w	r5, ip, lsr #8
 8024324:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8024328:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 802432c:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8024330:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 8024334:	4465      	add	r5, ip
 8024336:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802433a:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802433e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024342:	fb09 fc0c 	mul.w	ip, r9, ip
 8024346:	0a2d      	lsrs	r5, r5, #8
 8024348:	fb09 f904 	mul.w	r9, r9, r4
 802434c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024350:	ea4f 211c 	mov.w	r1, ip, lsr #8
 8024354:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8024358:	f509 7480 	add.w	r4, r9, #256	; 0x100
 802435c:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8024360:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8024364:	437d      	muls	r5, r7
 8024366:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 802436a:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 802436e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8024372:	4461      	add	r1, ip
 8024374:	fb08 f404 	mul.w	r4, r8, r4
 8024378:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802437c:	fb08 f802 	mul.w	r8, r8, r2
 8024380:	0a09      	lsrs	r1, r1, #8
 8024382:	0a22      	lsrs	r2, r4, #8
 8024384:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 8024388:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 802438c:	fb07 f70a 	mul.w	r7, r7, sl
 8024390:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8024394:	4414      	add	r4, r2
 8024396:	f508 7280 	add.w	r2, r8, #256	; 0x100
 802439a:	0a24      	lsrs	r4, r4, #8
 802439c:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 80243a0:	9a03      	ldr	r2, [sp, #12]
 80243a2:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80243a6:	fb02 5503 	mla	r5, r2, r3, r5
 80243aa:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80243ae:	9a00      	ldr	r2, [sp, #0]
 80243b0:	fb04 540e 	mla	r4, r4, lr, r5
 80243b4:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 80243b8:	1235      	asrs	r5, r6, #8
 80243ba:	fb01 4100 	mla	r1, r1, r0, r4
 80243be:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 80243c2:	0a09      	lsrs	r1, r1, #8
 80243c4:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 80243c8:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 80243cc:	fb03 7101 	mla	r1, r3, r1, r7
 80243d0:	fb0e 1e08 	mla	lr, lr, r8, r1
 80243d4:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 80243d8:	fb00 e101 	mla	r1, r0, r1, lr
 80243dc:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 80243e0:	b287      	uxth	r7, r0
 80243e2:	0a09      	lsrs	r1, r1, #8
 80243e4:	437a      	muls	r2, r7
 80243e6:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 80243ea:	1c53      	adds	r3, r2, #1
 80243ec:	4321      	orrs	r1, r4
 80243ee:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80243f2:	0c0a      	lsrs	r2, r1, #16
 80243f4:	f3c1 2407 	ubfx	r4, r1, #8, #8
 80243f8:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 80243fc:	b2c8      	uxtb	r0, r1
 80243fe:	fb12 f207 	smulbb	r2, r2, r7
 8024402:	fb14 f407 	smulbb	r4, r4, r7
 8024406:	b2db      	uxtb	r3, r3
 8024408:	fb10 f007 	smulbb	r0, r0, r7
 802440c:	fb05 2503 	mla	r5, r5, r3, r2
 8024410:	10f2      	asrs	r2, r6, #3
 8024412:	00f6      	lsls	r6, r6, #3
 8024414:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8024418:	b2ad      	uxth	r5, r5
 802441a:	b2f6      	uxtb	r6, r6
 802441c:	fb02 4203 	mla	r2, r2, r3, r4
 8024420:	fb06 0303 	mla	r3, r6, r3, r0
 8024424:	b294      	uxth	r4, r2
 8024426:	b299      	uxth	r1, r3
 8024428:	1c6b      	adds	r3, r5, #1
 802442a:	1c62      	adds	r2, r4, #1
 802442c:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8024430:	1c4b      	adds	r3, r1, #1
 8024432:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8024436:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 802443a:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 802443e:	0952      	lsrs	r2, r2, #5
 8024440:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8024444:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8024448:	432b      	orrs	r3, r5
 802444a:	4313      	orrs	r3, r2
 802444c:	9a02      	ldr	r2, [sp, #8]
 802444e:	8013      	strh	r3, [r2, #0]
 8024450:	b005      	add	sp, #20
 8024452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024456:	2500      	movs	r5, #0
 8024458:	e6e9      	b.n	802422e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x42>
 802445a:	2100      	movs	r1, #0
 802445c:	460d      	mov	r5, r1
 802445e:	e6f3      	b.n	8024248 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 8024460:	2100      	movs	r1, #0
 8024462:	e6f1      	b.n	8024248 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 8024464:	4631      	mov	r1, r6
 8024466:	e6ef      	b.n	8024248 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 8024468:	2400      	movs	r4, #0
 802446a:	e700      	b.n	802426e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x82>
 802446c:	2200      	movs	r2, #0
 802446e:	4614      	mov	r4, r2
 8024470:	e70b      	b.n	802428a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 8024472:	4602      	mov	r2, r0
 8024474:	4604      	mov	r4, r0
 8024476:	e708      	b.n	802428a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 8024478:	2200      	movs	r2, #0
 802447a:	e706      	b.n	802428a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 802447c:	4632      	mov	r2, r6
 802447e:	e704      	b.n	802428a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>

08024480 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024484:	b09f      	sub	sp, #124	; 0x7c
 8024486:	921b      	str	r2, [sp, #108]	; 0x6c
 8024488:	9309      	str	r3, [sp, #36]	; 0x24
 802448a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 802448c:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 8024490:	901d      	str	r0, [sp, #116]	; 0x74
 8024492:	931c      	str	r3, [sp, #112]	; 0x70
 8024494:	6850      	ldr	r0, [r2, #4]
 8024496:	9119      	str	r1, [sp, #100]	; 0x64
 8024498:	6812      	ldr	r2, [r2, #0]
 802449a:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 802449c:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 80244a0:	fb00 1303 	mla	r3, r0, r3, r1
 80244a4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80244a8:	930c      	str	r3, [sp, #48]	; 0x30
 80244aa:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80244ac:	681b      	ldr	r3, [r3, #0]
 80244ae:	9312      	str	r3, [sp, #72]	; 0x48
 80244b0:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80244b2:	685e      	ldr	r6, [r3, #4]
 80244b4:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 80244b8:	3604      	adds	r6, #4
 80244ba:	930d      	str	r3, [sp, #52]	; 0x34
 80244bc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80244be:	2b00      	cmp	r3, #0
 80244c0:	dc03      	bgt.n	80244ca <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 80244c2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80244c4:	2b00      	cmp	r3, #0
 80244c6:	f340 8387 	ble.w	8024bd8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
 80244ca:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80244cc:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80244d0:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80244d4:	1e48      	subs	r0, r1, #1
 80244d6:	1e57      	subs	r7, r2, #1
 80244d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80244da:	2b00      	cmp	r3, #0
 80244dc:	f340 8194 	ble.w	8024808 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
 80244e0:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80244e2:	142b      	asrs	r3, r5, #16
 80244e4:	ea5f 4c24 	movs.w	ip, r4, asr #16
 80244e8:	d406      	bmi.n	80244f8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80244ea:	4584      	cmp	ip, r0
 80244ec:	da04      	bge.n	80244f8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80244ee:	2b00      	cmp	r3, #0
 80244f0:	db02      	blt.n	80244f8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80244f2:	42bb      	cmp	r3, r7
 80244f4:	f2c0 8189 	blt.w	802480a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 80244f8:	f11c 0c01 	adds.w	ip, ip, #1
 80244fc:	f100 8177 	bmi.w	80247ee <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8024500:	4561      	cmp	r1, ip
 8024502:	f2c0 8174 	blt.w	80247ee <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8024506:	3301      	adds	r3, #1
 8024508:	f100 8171 	bmi.w	80247ee <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 802450c:	429a      	cmp	r2, r3
 802450e:	f2c0 816e 	blt.w	80247ee <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8024512:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024514:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8024516:	931a      	str	r3, [sp, #104]	; 0x68
 8024518:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 802451a:	2b00      	cmp	r3, #0
 802451c:	f340 8193 	ble.w	8024846 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 8024520:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8024522:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8024526:	f3c5 3103 	ubfx	r1, r5, #12, #4
 802452a:	f3c3 3203 	ubfx	r2, r3, #12, #4
 802452e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8024530:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 8024534:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8024536:	141b      	asrs	r3, r3, #16
 8024538:	f100 81d6 	bmi.w	80248e8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 802453c:	f100 38ff 	add.w	r8, r0, #4294967295
 8024540:	4543      	cmp	r3, r8
 8024542:	f280 81d1 	bge.w	80248e8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 8024546:	f1bc 0f00 	cmp.w	ip, #0
 802454a:	f2c0 81cd 	blt.w	80248e8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 802454e:	f10e 38ff 	add.w	r8, lr, #4294967295
 8024552:	45c4      	cmp	ip, r8
 8024554:	f280 81c8 	bge.w	80248e8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 8024558:	b200      	sxth	r0, r0
 802455a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802455c:	fb0c 3300 	mla	r3, ip, r0, r3
 8024560:	eb04 0803 	add.w	r8, r4, r3
 8024564:	5ce3      	ldrb	r3, [r4, r3]
 8024566:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 802456a:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 802456e:	2a00      	cmp	r2, #0
 8024570:	f000 81af 	beq.w	80248d2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8024574:	f898 c001 	ldrb.w	ip, [r8, #1]
 8024578:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 802457c:	940e      	str	r4, [sp, #56]	; 0x38
 802457e:	0e24      	lsrs	r4, r4, #24
 8024580:	9415      	str	r4, [sp, #84]	; 0x54
 8024582:	b179      	cbz	r1, 80245a4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 8024584:	eb08 0c00 	add.w	ip, r8, r0
 8024588:	f818 0000 	ldrb.w	r0, [r8, r0]
 802458c:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8024590:	900a      	str	r0, [sp, #40]	; 0x28
 8024592:	0e00      	lsrs	r0, r0, #24
 8024594:	9013      	str	r0, [sp, #76]	; 0x4c
 8024596:	f89c 0001 	ldrb.w	r0, [ip, #1]
 802459a:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 802459e:	900f      	str	r0, [sp, #60]	; 0x3c
 80245a0:	0e00      	lsrs	r0, r0, #24
 80245a2:	9016      	str	r0, [sp, #88]	; 0x58
 80245a4:	b292      	uxth	r2, r2
 80245a6:	9815      	ldr	r0, [sp, #84]	; 0x54
 80245a8:	b289      	uxth	r1, r1
 80245aa:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80245ac:	fb02 f901 	mul.w	r9, r2, r1
 80245b0:	0112      	lsls	r2, r2, #4
 80245b2:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80245b6:	eba2 0809 	sub.w	r8, r2, r9
 80245ba:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80245be:	b289      	uxth	r1, r1
 80245c0:	fa1f f888 	uxth.w	r8, r8
 80245c4:	1a52      	subs	r2, r2, r1
 80245c6:	fb08 f000 	mul.w	r0, r8, r0
 80245ca:	b292      	uxth	r2, r2
 80245cc:	fb02 000e 	mla	r0, r2, lr, r0
 80245d0:	fb01 0004 	mla	r0, r1, r4, r0
 80245d4:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80245d6:	fb09 0004 	mla	r0, r9, r4, r0
 80245da:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80245de:	2800      	cmp	r0, #0
 80245e0:	f000 80fa 	beq.w	80247d8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80245e4:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80245e8:	d01b      	beq.n	8024622 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 80245ea:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80245ee:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80245f2:	fb0e fa0a 	mul.w	sl, lr, sl
 80245f6:	fb0e fe03 	mul.w	lr, lr, r3
 80245fa:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80245fe:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8024602:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8024606:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802460a:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 802460e:	4453      	add	r3, sl
 8024610:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024614:	0a1b      	lsrs	r3, r3, #8
 8024616:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802461a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802461e:	ea43 030c 	orr.w	r3, r3, ip
 8024622:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8024624:	2cff      	cmp	r4, #255	; 0xff
 8024626:	d021      	beq.n	802466c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 8024628:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802462a:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 802462e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8024630:	fb04 fb0b 	mul.w	fp, r4, fp
 8024634:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8024636:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802463a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802463c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8024640:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8024644:	fb04 fa0a 	mul.w	sl, r4, sl
 8024648:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802464c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8024650:	44de      	add	lr, fp
 8024652:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8024656:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802465a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802465e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024662:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024666:	ea4e 040a 	orr.w	r4, lr, sl
 802466a:	940e      	str	r4, [sp, #56]	; 0x38
 802466c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802466e:	2cff      	cmp	r4, #255	; 0xff
 8024670:	d021      	beq.n	80246b6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8024672:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8024674:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8024678:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802467a:	fb04 fb0b 	mul.w	fp, r4, fp
 802467e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8024680:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8024684:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8024686:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802468a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802468e:	fb04 fa0a 	mul.w	sl, r4, sl
 8024692:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024696:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802469a:	44de      	add	lr, fp
 802469c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80246a0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80246a4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80246a8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80246ac:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80246b0:	ea4e 040a 	orr.w	r4, lr, sl
 80246b4:	940a      	str	r4, [sp, #40]	; 0x28
 80246b6:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80246b8:	2cff      	cmp	r4, #255	; 0xff
 80246ba:	d021      	beq.n	8024700 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x280>
 80246bc:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80246be:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80246c2:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80246c4:	fb04 fb0b 	mul.w	fp, r4, fp
 80246c8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80246ca:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80246ce:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80246d0:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80246d4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80246d8:	fb04 fa0a 	mul.w	sl, r4, sl
 80246dc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80246e0:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80246e4:	44de      	add	lr, fp
 80246e6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80246ea:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80246ee:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80246f2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80246f6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80246fa:	ea4e 040a 	orr.w	r4, lr, sl
 80246fe:	940f      	str	r4, [sp, #60]	; 0x3c
 8024700:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8024702:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8024706:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802470a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802470e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8024710:	fb08 fc0c 	mul.w	ip, r8, ip
 8024714:	fb02 cc0e 	mla	ip, r2, lr, ip
 8024718:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 802471c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 802471e:	fb01 cc0e 	mla	ip, r1, lr, ip
 8024722:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8024726:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8024728:	fb09 cc0e 	mla	ip, r9, lr, ip
 802472c:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8024730:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8024732:	fb08 f80e 	mul.w	r8, r8, lr
 8024736:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802473a:	fb02 8303 	mla	r3, r2, r3, r8
 802473e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024740:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024744:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8024748:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802474a:	fb01 330a 	mla	r3, r1, sl, r3
 802474e:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 8024752:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8024754:	fb09 3901 	mla	r9, r9, r1, r3
 8024758:	883b      	ldrh	r3, [r7, #0]
 802475a:	4342      	muls	r2, r0
 802475c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8024760:	1c50      	adds	r0, r2, #1
 8024762:	1219      	asrs	r1, r3, #8
 8024764:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8024768:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 802476c:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8024770:	ea4c 0c09 	orr.w	ip, ip, r9
 8024774:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8024778:	ea4f 421c 	mov.w	r2, ip, lsr #16
 802477c:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 8024780:	b2c0      	uxtb	r0, r0
 8024782:	fb12 f204 	smulbb	r2, r2, r4
 8024786:	fa5f fc8c 	uxtb.w	ip, ip
 802478a:	fb1e fe04 	smulbb	lr, lr, r4
 802478e:	fb01 2100 	mla	r1, r1, r0, r2
 8024792:	10da      	asrs	r2, r3, #3
 8024794:	fb1c fc04 	smulbb	ip, ip, r4
 8024798:	00db      	lsls	r3, r3, #3
 802479a:	b289      	uxth	r1, r1
 802479c:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80247a0:	b2db      	uxtb	r3, r3
 80247a2:	fb02 e200 	mla	r2, r2, r0, lr
 80247a6:	fb03 c300 	mla	r3, r3, r0, ip
 80247aa:	b292      	uxth	r2, r2
 80247ac:	fa1f fc83 	uxth.w	ip, r3
 80247b0:	1c4b      	adds	r3, r1, #1
 80247b2:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80247b6:	f10c 0301 	add.w	r3, ip, #1
 80247ba:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 80247be:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 80247c2:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80247c6:	430b      	orrs	r3, r1
 80247c8:	1c51      	adds	r1, r2, #1
 80247ca:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80247ce:	0952      	lsrs	r2, r2, #5
 80247d0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80247d4:	4313      	orrs	r3, r2
 80247d6:	803b      	strh	r3, [r7, #0]
 80247d8:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80247da:	3702      	adds	r7, #2
 80247dc:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80247de:	441a      	add	r2, r3
 80247e0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80247e2:	441d      	add	r5, r3
 80247e4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80247e6:	9229      	str	r2, [sp, #164]	; 0xa4
 80247e8:	3b01      	subs	r3, #1
 80247ea:	931a      	str	r3, [sp, #104]	; 0x68
 80247ec:	e694      	b.n	8024518 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80247ee:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80247f0:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80247f2:	441c      	add	r4, r3
 80247f4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80247f6:	441d      	add	r5, r3
 80247f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80247fa:	9429      	str	r4, [sp, #164]	; 0xa4
 80247fc:	3b01      	subs	r3, #1
 80247fe:	9309      	str	r3, [sp, #36]	; 0x24
 8024800:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024802:	3302      	adds	r3, #2
 8024804:	930c      	str	r3, [sp, #48]	; 0x30
 8024806:	e667      	b.n	80244d8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8024808:	d024      	beq.n	8024854 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d4>
 802480a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802480c:	982b      	ldr	r0, [sp, #172]	; 0xac
 802480e:	3b01      	subs	r3, #1
 8024810:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8024812:	fb00 4003 	mla	r0, r0, r3, r4
 8024816:	1400      	asrs	r0, r0, #16
 8024818:	f53f ae7b 	bmi.w	8024512 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802481c:	3901      	subs	r1, #1
 802481e:	4288      	cmp	r0, r1
 8024820:	f6bf ae77 	bge.w	8024512 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8024824:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8024826:	fb01 5303 	mla	r3, r1, r3, r5
 802482a:	141b      	asrs	r3, r3, #16
 802482c:	f53f ae71 	bmi.w	8024512 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8024830:	3a01      	subs	r2, #1
 8024832:	4293      	cmp	r3, r2
 8024834:	f6bf ae6d 	bge.w	8024512 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8024838:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 802483c:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8024840:	f1bb 0f00 	cmp.w	fp, #0
 8024844:	dc70      	bgt.n	8024928 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>
 8024846:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024848:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802484c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802484e:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8024852:	930c      	str	r3, [sp, #48]	; 0x30
 8024854:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8024856:	2b00      	cmp	r3, #0
 8024858:	f340 81be 	ble.w	8024bd8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
 802485c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8024860:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024862:	ee30 0a04 	vadd.f32	s0, s0, s8
 8024866:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802486a:	eef0 6a62 	vmov.f32	s13, s5
 802486e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8024872:	ee31 1a05 	vadd.f32	s2, s2, s10
 8024876:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802487a:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 802487e:	eef0 6a43 	vmov.f32	s13, s6
 8024882:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024886:	ee16 5a90 	vmov	r5, s13
 802488a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802488e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8024892:	ee77 2a62 	vsub.f32	s5, s14, s5
 8024896:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802489a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802489e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80248a2:	ee12 2a90 	vmov	r2, s5
 80248a6:	eef0 2a47 	vmov.f32	s5, s14
 80248aa:	fb92 f3f3 	sdiv	r3, r2, r3
 80248ae:	ee13 2a10 	vmov	r2, s6
 80248b2:	932b      	str	r3, [sp, #172]	; 0xac
 80248b4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80248b6:	eeb0 3a67 	vmov.f32	s6, s15
 80248ba:	fb92 f3f3 	sdiv	r3, r2, r3
 80248be:	932c      	str	r3, [sp, #176]	; 0xb0
 80248c0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80248c2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80248c4:	3b01      	subs	r3, #1
 80248c6:	9319      	str	r3, [sp, #100]	; 0x64
 80248c8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80248ca:	bf08      	it	eq
 80248cc:	4613      	moveq	r3, r2
 80248ce:	9309      	str	r3, [sp, #36]	; 0x24
 80248d0:	e5f4      	b.n	80244bc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80248d2:	2900      	cmp	r1, #0
 80248d4:	f43f ae66 	beq.w	80245a4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 80248d8:	f818 0000 	ldrb.w	r0, [r8, r0]
 80248dc:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 80248e0:	900a      	str	r0, [sp, #40]	; 0x28
 80248e2:	0e00      	lsrs	r0, r0, #24
 80248e4:	9013      	str	r0, [sp, #76]	; 0x4c
 80248e6:	e65d      	b.n	80245a4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 80248e8:	f113 0801 	adds.w	r8, r3, #1
 80248ec:	f53f af74 	bmi.w	80247d8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80248f0:	4540      	cmp	r0, r8
 80248f2:	f6ff af71 	blt.w	80247d8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80248f6:	f11c 0801 	adds.w	r8, ip, #1
 80248fa:	f53f af6d 	bmi.w	80247d8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80248fe:	45c6      	cmp	lr, r8
 8024900:	f6ff af6a 	blt.w	80247d8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8024904:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8024906:	b200      	sxth	r0, r0
 8024908:	9302      	str	r3, [sp, #8]
 802490a:	fa0f f38e 	sxth.w	r3, lr
 802490e:	9000      	str	r0, [sp, #0]
 8024910:	9301      	str	r3, [sp, #4]
 8024912:	4633      	mov	r3, r6
 8024914:	981d      	ldr	r0, [sp, #116]	; 0x74
 8024916:	e9cd 1405 	strd	r1, r4, [sp, #20]
 802491a:	e9cd c203 	strd	ip, r2, [sp, #12]
 802491e:	4639      	mov	r1, r7
 8024920:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8024922:	f7ff fc63 	bl	80241ec <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
 8024926:	e757      	b.n	80247d8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8024928:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802492a:	f3c5 3003 	ubfx	r0, r5, #12, #4
 802492e:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8024930:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8024934:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8024936:	1427      	asrs	r7, r4, #16
 8024938:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802493a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802493e:	142b      	asrs	r3, r5, #16
 8024940:	fb01 7303 	mla	r3, r1, r3, r7
 8024944:	18e7      	adds	r7, r4, r3
 8024946:	5ce3      	ldrb	r3, [r4, r3]
 8024948:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 802494c:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8024950:	2a00      	cmp	r2, #0
 8024952:	f000 8137 	beq.w	8024bc4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x744>
 8024956:	f897 e001 	ldrb.w	lr, [r7, #1]
 802495a:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 802495e:	9410      	str	r4, [sp, #64]	; 0x40
 8024960:	0e24      	lsrs	r4, r4, #24
 8024962:	9417      	str	r4, [sp, #92]	; 0x5c
 8024964:	b170      	cbz	r0, 8024984 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 8024966:	eb07 0e01 	add.w	lr, r7, r1
 802496a:	5c79      	ldrb	r1, [r7, r1]
 802496c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8024970:	910b      	str	r1, [sp, #44]	; 0x2c
 8024972:	0e09      	lsrs	r1, r1, #24
 8024974:	9114      	str	r1, [sp, #80]	; 0x50
 8024976:	f89e 1001 	ldrb.w	r1, [lr, #1]
 802497a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802497e:	9111      	str	r1, [sp, #68]	; 0x44
 8024980:	0e09      	lsrs	r1, r1, #24
 8024982:	9118      	str	r1, [sp, #96]	; 0x60
 8024984:	b292      	uxth	r2, r2
 8024986:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8024988:	b280      	uxth	r0, r0
 802498a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802498c:	fb02 f800 	mul.w	r8, r2, r0
 8024990:	0112      	lsls	r2, r2, #4
 8024992:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8024996:	eba2 0e08 	sub.w	lr, r2, r8
 802499a:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 802499e:	b280      	uxth	r0, r0
 80249a0:	fa1f fe8e 	uxth.w	lr, lr
 80249a4:	1a12      	subs	r2, r2, r0
 80249a6:	fb0e f101 	mul.w	r1, lr, r1
 80249aa:	b292      	uxth	r2, r2
 80249ac:	fb02 110c 	mla	r1, r2, ip, r1
 80249b0:	fb00 1104 	mla	r1, r0, r4, r1
 80249b4:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80249b6:	fb08 1104 	mla	r1, r8, r4, r1
 80249ba:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80249be:	2900      	cmp	r1, #0
 80249c0:	f000 80f5 	beq.w	8024bae <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
 80249c4:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80249c8:	d019      	beq.n	80249fe <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57e>
 80249ca:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80249ce:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80249d2:	fb0c fa0a 	mul.w	sl, ip, sl
 80249d6:	fb0c fc03 	mul.w	ip, ip, r3
 80249da:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80249de:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80249e2:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 80249e6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80249ea:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80249ee:	4453      	add	r3, sl
 80249f0:	0a3f      	lsrs	r7, r7, #8
 80249f2:	0a1b      	lsrs	r3, r3, #8
 80249f4:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80249f8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80249fc:	433b      	orrs	r3, r7
 80249fe:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8024a00:	2cff      	cmp	r4, #255	; 0xff
 8024a02:	d020      	beq.n	8024a46 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c6>
 8024a04:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8024a06:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8024a0a:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8024a0c:	4367      	muls	r7, r4
 8024a0e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8024a10:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024a14:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8024a18:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8024a1a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8024a1e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024a22:	fb04 fa0a 	mul.w	sl, r4, sl
 8024a26:	44bc      	add	ip, r7
 8024a28:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8024a2c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024a30:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8024a34:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024a38:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024a3c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024a40:	ea4c 040a 	orr.w	r4, ip, sl
 8024a44:	9410      	str	r4, [sp, #64]	; 0x40
 8024a46:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8024a48:	2cff      	cmp	r4, #255	; 0xff
 8024a4a:	d020      	beq.n	8024a8e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60e>
 8024a4c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8024a4e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8024a52:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8024a54:	4367      	muls	r7, r4
 8024a56:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8024a58:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024a5c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8024a60:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8024a62:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8024a66:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024a6a:	fb04 fa0a 	mul.w	sl, r4, sl
 8024a6e:	44bc      	add	ip, r7
 8024a70:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8024a74:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024a78:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8024a7c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024a80:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024a84:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024a88:	ea4c 040a 	orr.w	r4, ip, sl
 8024a8c:	940b      	str	r4, [sp, #44]	; 0x2c
 8024a8e:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8024a90:	2cff      	cmp	r4, #255	; 0xff
 8024a92:	d020      	beq.n	8024ad6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x656>
 8024a94:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8024a96:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8024a9a:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8024a9c:	4367      	muls	r7, r4
 8024a9e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8024aa0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024aa4:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8024aa8:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8024aaa:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8024aae:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024ab2:	fb04 fa0a 	mul.w	sl, r4, sl
 8024ab6:	44bc      	add	ip, r7
 8024ab8:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8024abc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024ac0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8024ac4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024ac8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024acc:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024ad0:	ea4c 040a 	orr.w	r4, ip, sl
 8024ad4:	9411      	str	r4, [sp, #68]	; 0x44
 8024ad6:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8024ad8:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8024adc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024ae0:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8024ae4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8024ae6:	fb0e f707 	mul.w	r7, lr, r7
 8024aea:	fb02 770c 	mla	r7, r2, ip, r7
 8024aee:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8024af2:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8024af4:	fb00 770c 	mla	r7, r0, ip, r7
 8024af8:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8024afc:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8024afe:	fb08 770c 	mla	r7, r8, ip, r7
 8024b02:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8024b06:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8024b08:	fb0e fe0c 	mul.w	lr, lr, ip
 8024b0c:	0a3f      	lsrs	r7, r7, #8
 8024b0e:	fb02 e303 	mla	r3, r2, r3, lr
 8024b12:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8024b14:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8024b18:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8024b1c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8024b1e:	fb00 330a 	mla	r3, r0, sl, r3
 8024b22:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8024b26:	f8b9 0000 	ldrh.w	r0, [r9]
 8024b2a:	fb08 3c0c 	mla	ip, r8, ip, r3
 8024b2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024b30:	1202      	asrs	r2, r0, #8
 8024b32:	434b      	muls	r3, r1
 8024b34:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024b38:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8024b3c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8024b40:	1c59      	adds	r1, r3, #1
 8024b42:	ea47 070c 	orr.w	r7, r7, ip
 8024b46:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8024b4a:	0c3b      	lsrs	r3, r7, #16
 8024b4c:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8024b50:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 8024b54:	b2ff      	uxtb	r7, r7
 8024b56:	fb13 f304 	smulbb	r3, r3, r4
 8024b5a:	b2c9      	uxtb	r1, r1
 8024b5c:	fb1c fc04 	smulbb	ip, ip, r4
 8024b60:	fb02 3201 	mla	r2, r2, r1, r3
 8024b64:	10c3      	asrs	r3, r0, #3
 8024b66:	fb17 f704 	smulbb	r7, r7, r4
 8024b6a:	00c0      	lsls	r0, r0, #3
 8024b6c:	b292      	uxth	r2, r2
 8024b6e:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8024b72:	b2c0      	uxtb	r0, r0
 8024b74:	fb03 c301 	mla	r3, r3, r1, ip
 8024b78:	f102 0c01 	add.w	ip, r2, #1
 8024b7c:	fb00 7001 	mla	r0, r0, r1, r7
 8024b80:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8024b84:	b280      	uxth	r0, r0
 8024b86:	f402 4c78 	and.w	ip, r2, #63488	; 0xf800
 8024b8a:	b29b      	uxth	r3, r3
 8024b8c:	1c42      	adds	r2, r0, #1
 8024b8e:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8024b92:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8024b96:	ea42 020c 	orr.w	r2, r2, ip
 8024b9a:	f103 0c01 	add.w	ip, r3, #1
 8024b9e:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8024ba2:	095b      	lsrs	r3, r3, #5
 8024ba4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024ba8:	431a      	orrs	r2, r3
 8024baa:	f8a9 2000 	strh.w	r2, [r9]
 8024bae:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8024bb0:	f109 0902 	add.w	r9, r9, #2
 8024bb4:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8024bb6:	f10b 3bff 	add.w	fp, fp, #4294967295
 8024bba:	441a      	add	r2, r3
 8024bbc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024bbe:	9229      	str	r2, [sp, #164]	; 0xa4
 8024bc0:	441d      	add	r5, r3
 8024bc2:	e63d      	b.n	8024840 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8024bc4:	2800      	cmp	r0, #0
 8024bc6:	f43f aedd 	beq.w	8024984 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 8024bca:	5c79      	ldrb	r1, [r7, r1]
 8024bcc:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8024bd0:	910b      	str	r1, [sp, #44]	; 0x2c
 8024bd2:	0e09      	lsrs	r1, r1, #24
 8024bd4:	9114      	str	r1, [sp, #80]	; 0x50
 8024bd6:	e6d5      	b.n	8024984 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 8024bd8:	b01f      	add	sp, #124	; 0x7c
 8024bda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024bde <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
 8024bde:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024be2:	b089      	sub	sp, #36	; 0x24
 8024be4:	9101      	str	r1, [sp, #4]
 8024be6:	9801      	ldr	r0, [sp, #4]
 8024be8:	f9bd c048 	ldrsh.w	ip, [sp, #72]	; 0x48
 8024bec:	8800      	ldrh	r0, [r0, #0]
 8024bee:	f9bd 804c 	ldrsh.w	r8, [sp, #76]	; 0x4c
 8024bf2:	1206      	asrs	r6, r0, #8
 8024bf4:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 8024bf8:	f89d 405c 	ldrb.w	r4, [sp, #92]	; 0x5c
 8024bfc:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8024c00:	9602      	str	r6, [sp, #8]
 8024c02:	10c6      	asrs	r6, r0, #3
 8024c04:	00c0      	lsls	r0, r0, #3
 8024c06:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8024c0a:	b2c0      	uxtb	r0, r0
 8024c0c:	9603      	str	r6, [sp, #12]
 8024c0e:	9004      	str	r0, [sp, #16]
 8024c10:	e9dd 1714 	ldrd	r1, r7, [sp, #80]	; 0x50
 8024c14:	fb07 100c 	mla	r0, r7, ip, r1
 8024c18:	2f00      	cmp	r7, #0
 8024c1a:	eb02 0e00 	add.w	lr, r2, r0
 8024c1e:	f2c0 810a 	blt.w	8024e36 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 8024c22:	45b8      	cmp	r8, r7
 8024c24:	f340 8107 	ble.w	8024e36 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 8024c28:	2900      	cmp	r1, #0
 8024c2a:	f2c0 8102 	blt.w	8024e32 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 8024c2e:	458c      	cmp	ip, r1
 8024c30:	f340 80ff 	ble.w	8024e32 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 8024c34:	5c12      	ldrb	r2, [r2, r0]
 8024c36:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8024c3a:	1c4a      	adds	r2, r1, #1
 8024c3c:	f100 80fe 	bmi.w	8024e3c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 8024c40:	4594      	cmp	ip, r2
 8024c42:	f340 80fb 	ble.w	8024e3c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 8024c46:	2d00      	cmp	r5, #0
 8024c48:	f000 80fa 	beq.w	8024e40 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x262>
 8024c4c:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8024c50:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8024c54:	3701      	adds	r7, #1
 8024c56:	f100 80f7 	bmi.w	8024e48 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 8024c5a:	45b8      	cmp	r8, r7
 8024c5c:	f340 80f4 	ble.w	8024e48 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 8024c60:	2c00      	cmp	r4, #0
 8024c62:	f000 80f4 	beq.w	8024e4e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x270>
 8024c66:	2900      	cmp	r1, #0
 8024c68:	eb0e 020c 	add.w	r2, lr, ip
 8024c6c:	f2c0 80ea 	blt.w	8024e44 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 8024c70:	458c      	cmp	ip, r1
 8024c72:	f340 80e7 	ble.w	8024e44 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 8024c76:	f81e 700c 	ldrb.w	r7, [lr, ip]
 8024c7a:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 8024c7e:	3101      	adds	r1, #1
 8024c80:	f100 80e8 	bmi.w	8024e54 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 8024c84:	458c      	cmp	ip, r1
 8024c86:	f340 80e5 	ble.w	8024e54 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 8024c8a:	2d00      	cmp	r5, #0
 8024c8c:	f000 80e4 	beq.w	8024e58 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x27a>
 8024c90:	7852      	ldrb	r2, [r2, #1]
 8024c92:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8024c96:	0e0b      	lsrs	r3, r1, #24
 8024c98:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8024c9c:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 8024ca0:	9300      	str	r3, [sp, #0]
 8024ca2:	b2a4      	uxth	r4, r4
 8024ca4:	b2ab      	uxth	r3, r5
 8024ca6:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 8024caa:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8024cae:	fb03 f904 	mul.w	r9, r3, r4
 8024cb2:	011b      	lsls	r3, r3, #4
 8024cb4:	fb0a f505 	mul.w	r5, sl, r5
 8024cb8:	ea4f 6817 	mov.w	r8, r7, lsr #24
 8024cbc:	eba3 0e09 	sub.w	lr, r3, r9
 8024cc0:	f5c3 7280 	rsb	r2, r3, #256	; 0x100
 8024cc4:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 8024cc8:	0a28      	lsrs	r0, r5, #8
 8024cca:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 8024cce:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8024cd2:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8024cd6:	fb0a f303 	mul.w	r3, sl, r3
 8024cda:	fb08 f707 	mul.w	r7, r8, r7
 8024cde:	ebc9 1404 	rsb	r4, r9, r4, lsl #4
 8024ce2:	4405      	add	r5, r0
 8024ce4:	fb08 fc0c 	mul.w	ip, r8, ip
 8024ce8:	b2a4      	uxth	r4, r4
 8024cea:	0a2d      	lsrs	r5, r5, #8
 8024cec:	fa1f fe8e 	uxth.w	lr, lr
 8024cf0:	1b12      	subs	r2, r2, r4
 8024cf2:	f005 10ff 	and.w	r0, r5, #16711935	; 0xff00ff
 8024cf6:	b292      	uxth	r2, r2
 8024cf8:	9005      	str	r0, [sp, #20]
 8024cfa:	f503 7080 	add.w	r0, r3, #256	; 0x100
 8024cfe:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8024d02:	ea4f 201c 	mov.w	r0, ip, lsr #8
 8024d06:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8024d0a:	0a1b      	lsrs	r3, r3, #8
 8024d0c:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8024d10:	9306      	str	r3, [sp, #24]
 8024d12:	f006 13ff 	and.w	r3, r6, #16711935	; 0xff00ff
 8024d16:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8024d1a:	4460      	add	r0, ip
 8024d1c:	fb0b f303 	mul.w	r3, fp, r3
 8024d20:	fb0b f606 	mul.w	r6, fp, r6
 8024d24:	0a00      	lsrs	r0, r0, #8
 8024d26:	0a1d      	lsrs	r5, r3, #8
 8024d28:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 8024d2c:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8024d30:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8024d34:	441d      	add	r5, r3
 8024d36:	f506 7380 	add.w	r3, r6, #256	; 0x100
 8024d3a:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8024d3e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8024d42:	0a2d      	lsrs	r5, r5, #8
 8024d44:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 8024d48:	f001 17ff 	and.w	r7, r1, #16711935	; 0xff00ff
 8024d4c:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8024d50:	0a36      	lsrs	r6, r6, #8
 8024d52:	0a1b      	lsrs	r3, r3, #8
 8024d54:	fb05 f50e 	mul.w	r5, r5, lr
 8024d58:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8024d5c:	9307      	str	r3, [sp, #28]
 8024d5e:	0e0b      	lsrs	r3, r1, #24
 8024d60:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8024d64:	fb0e f606 	mul.w	r6, lr, r6
 8024d68:	435f      	muls	r7, r3
 8024d6a:	4359      	muls	r1, r3
 8024d6c:	9b05      	ldr	r3, [sp, #20]
 8024d6e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024d72:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8024d76:	fb03 5502 	mla	r5, r3, r2, r5
 8024d7a:	9b06      	ldr	r3, [sp, #24]
 8024d7c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024d80:	fb0e fe0b 	mul.w	lr, lr, fp
 8024d84:	44bc      	add	ip, r7
 8024d86:	f501 7780 	add.w	r7, r1, #256	; 0x100
 8024d8a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024d8e:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8024d92:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024d96:	0a09      	lsrs	r1, r1, #8
 8024d98:	fb0c 5509 	mla	r5, ip, r9, r5
 8024d9c:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8024da0:	fb00 5504 	mla	r5, r0, r4, r5
 8024da4:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 8024da8:	9b07      	ldr	r3, [sp, #28]
 8024daa:	fb02 6000 	mla	r0, r2, r0, r6
 8024dae:	0a2d      	lsrs	r5, r5, #8
 8024db0:	fb02 e20a 	mla	r2, r2, sl, lr
 8024db4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024db8:	fb09 0001 	mla	r0, r9, r1, r0
 8024dbc:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8024dc0:	fb04 0003 	mla	r0, r4, r3, r0
 8024dc4:	9b00      	ldr	r3, [sp, #0]
 8024dc6:	fb04 2408 	mla	r4, r4, r8, r2
 8024dca:	9a04      	ldr	r2, [sp, #16]
 8024dcc:	0a00      	lsrs	r0, r0, #8
 8024dce:	fb09 4903 	mla	r9, r9, r3, r4
 8024dd2:	9b02      	ldr	r3, [sp, #8]
 8024dd4:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8024dd8:	ea6f 2929 	mvn.w	r9, r9, asr #8
 8024ddc:	4305      	orrs	r5, r0
 8024dde:	fa5f f989 	uxtb.w	r9, r9
 8024de2:	fb03 f109 	mul.w	r1, r3, r9
 8024de6:	9b03      	ldr	r3, [sp, #12]
 8024de8:	fb03 f309 	mul.w	r3, r3, r9
 8024dec:	fb02 f909 	mul.w	r9, r2, r9
 8024df0:	1c4a      	adds	r2, r1, #1
 8024df2:	1c58      	adds	r0, r3, #1
 8024df4:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8024df8:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8024dfc:	0c2a      	lsrs	r2, r5, #16
 8024dfe:	0a2b      	lsrs	r3, r5, #8
 8024e00:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 8024e04:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8024e08:	0212      	lsls	r2, r2, #8
 8024e0a:	00db      	lsls	r3, r3, #3
 8024e0c:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 8024e10:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024e14:	4313      	orrs	r3, r2
 8024e16:	f109 0201 	add.w	r2, r9, #1
 8024e1a:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 8024e1e:	eb05 2519 	add.w	r5, r5, r9, lsr #8
 8024e22:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8024e26:	431d      	orrs	r5, r3
 8024e28:	9b01      	ldr	r3, [sp, #4]
 8024e2a:	801d      	strh	r5, [r3, #0]
 8024e2c:	b009      	add	sp, #36	; 0x24
 8024e2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024e32:	2000      	movs	r0, #0
 8024e34:	e701      	b.n	8024c3a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x5c>
 8024e36:	2600      	movs	r6, #0
 8024e38:	4630      	mov	r0, r6
 8024e3a:	e70b      	b.n	8024c54 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 8024e3c:	2600      	movs	r6, #0
 8024e3e:	e709      	b.n	8024c54 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 8024e40:	462e      	mov	r6, r5
 8024e42:	e707      	b.n	8024c54 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 8024e44:	2700      	movs	r7, #0
 8024e46:	e71a      	b.n	8024c7e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa0>
 8024e48:	2100      	movs	r1, #0
 8024e4a:	460f      	mov	r7, r1
 8024e4c:	e723      	b.n	8024c96 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 8024e4e:	4621      	mov	r1, r4
 8024e50:	4627      	mov	r7, r4
 8024e52:	e720      	b.n	8024c96 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 8024e54:	2100      	movs	r1, #0
 8024e56:	e71e      	b.n	8024c96 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 8024e58:	4629      	mov	r1, r5
 8024e5a:	e71c      	b.n	8024c96 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>

08024e5c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024e5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024e60:	b09b      	sub	sp, #108	; 0x6c
 8024e62:	9218      	str	r2, [sp, #96]	; 0x60
 8024e64:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8024e66:	9019      	str	r0, [sp, #100]	; 0x64
 8024e68:	9116      	str	r1, [sp, #88]	; 0x58
 8024e6a:	6850      	ldr	r0, [r2, #4]
 8024e6c:	9307      	str	r3, [sp, #28]
 8024e6e:	6812      	ldr	r2, [r2, #0]
 8024e70:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8024e72:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8024e76:	fb00 1303 	mla	r3, r0, r3, r1
 8024e7a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8024e7e:	930a      	str	r3, [sp, #40]	; 0x28
 8024e80:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024e82:	681b      	ldr	r3, [r3, #0]
 8024e84:	930f      	str	r3, [sp, #60]	; 0x3c
 8024e86:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024e88:	685e      	ldr	r6, [r3, #4]
 8024e8a:	3604      	adds	r6, #4
 8024e8c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8024e8e:	2b00      	cmp	r3, #0
 8024e90:	dc03      	bgt.n	8024e9a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8024e92:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8024e94:	2b00      	cmp	r3, #0
 8024e96:	f340 8373 	ble.w	8025580 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 8024e9a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024e9c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024ea0:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024ea4:	1e48      	subs	r0, r1, #1
 8024ea6:	1e57      	subs	r7, r2, #1
 8024ea8:	9b07      	ldr	r3, [sp, #28]
 8024eaa:	2b00      	cmp	r3, #0
 8024eac:	f340 818f 	ble.w	80251ce <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 8024eb0:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8024eb2:	142b      	asrs	r3, r5, #16
 8024eb4:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8024eb8:	d406      	bmi.n	8024ec8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8024eba:	4584      	cmp	ip, r0
 8024ebc:	da04      	bge.n	8024ec8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8024ebe:	2b00      	cmp	r3, #0
 8024ec0:	db02      	blt.n	8024ec8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8024ec2:	42bb      	cmp	r3, r7
 8024ec4:	f2c0 8184 	blt.w	80251d0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8024ec8:	f11c 0c01 	adds.w	ip, ip, #1
 8024ecc:	f100 8172 	bmi.w	80251b4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8024ed0:	4561      	cmp	r1, ip
 8024ed2:	f2c0 816f 	blt.w	80251b4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8024ed6:	3301      	adds	r3, #1
 8024ed8:	f100 816c 	bmi.w	80251b4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8024edc:	429a      	cmp	r2, r3
 8024ede:	f2c0 8169 	blt.w	80251b4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8024ee2:	9b07      	ldr	r3, [sp, #28]
 8024ee4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8024ee6:	9317      	str	r3, [sp, #92]	; 0x5c
 8024ee8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8024eea:	2b00      	cmp	r3, #0
 8024eec:	f340 818e 	ble.w	802520c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b0>
 8024ef0:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8024ef2:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8024ef6:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8024efa:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8024efe:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024f00:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 8024f04:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8024f06:	141b      	asrs	r3, r3, #16
 8024f08:	f100 81d1 	bmi.w	80252ae <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8024f0c:	f101 38ff 	add.w	r8, r1, #4294967295
 8024f10:	4543      	cmp	r3, r8
 8024f12:	f280 81cc 	bge.w	80252ae <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8024f16:	f1bc 0f00 	cmp.w	ip, #0
 8024f1a:	f2c0 81c8 	blt.w	80252ae <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8024f1e:	f10e 38ff 	add.w	r8, lr, #4294967295
 8024f22:	45c4      	cmp	ip, r8
 8024f24:	f280 81c3 	bge.w	80252ae <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8024f28:	b209      	sxth	r1, r1
 8024f2a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8024f2c:	fb0c 3301 	mla	r3, ip, r1, r3
 8024f30:	eb04 0803 	add.w	r8, r4, r3
 8024f34:	5ce3      	ldrb	r3, [r4, r3]
 8024f36:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8024f3a:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8024f3e:	2a00      	cmp	r2, #0
 8024f40:	f000 81aa 	beq.w	8025298 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x43c>
 8024f44:	f898 c001 	ldrb.w	ip, [r8, #1]
 8024f48:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8024f4c:	940b      	str	r4, [sp, #44]	; 0x2c
 8024f4e:	0e24      	lsrs	r4, r4, #24
 8024f50:	9412      	str	r4, [sp, #72]	; 0x48
 8024f52:	b178      	cbz	r0, 8024f74 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 8024f54:	eb08 0c01 	add.w	ip, r8, r1
 8024f58:	f818 1001 	ldrb.w	r1, [r8, r1]
 8024f5c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8024f60:	9108      	str	r1, [sp, #32]
 8024f62:	0e09      	lsrs	r1, r1, #24
 8024f64:	9110      	str	r1, [sp, #64]	; 0x40
 8024f66:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8024f6a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8024f6e:	910c      	str	r1, [sp, #48]	; 0x30
 8024f70:	0e09      	lsrs	r1, r1, #24
 8024f72:	9113      	str	r1, [sp, #76]	; 0x4c
 8024f74:	b292      	uxth	r2, r2
 8024f76:	9912      	ldr	r1, [sp, #72]	; 0x48
 8024f78:	b280      	uxth	r0, r0
 8024f7a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8024f7c:	fb02 f900 	mul.w	r9, r2, r0
 8024f80:	0112      	lsls	r2, r2, #4
 8024f82:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8024f86:	eba2 0809 	sub.w	r8, r2, r9
 8024f8a:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8024f8e:	b280      	uxth	r0, r0
 8024f90:	fa1f f888 	uxth.w	r8, r8
 8024f94:	1a12      	subs	r2, r2, r0
 8024f96:	fb08 f101 	mul.w	r1, r8, r1
 8024f9a:	b292      	uxth	r2, r2
 8024f9c:	fb02 110e 	mla	r1, r2, lr, r1
 8024fa0:	fb00 1104 	mla	r1, r0, r4, r1
 8024fa4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8024fa6:	fb09 1104 	mla	r1, r9, r4, r1
 8024faa:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8024fae:	2900      	cmp	r1, #0
 8024fb0:	f000 80f5 	beq.w	802519e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8024fb4:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8024fb8:	d01b      	beq.n	8024ff2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8024fba:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8024fbe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024fc2:	fb0e fa0a 	mul.w	sl, lr, sl
 8024fc6:	fb0e fe03 	mul.w	lr, lr, r3
 8024fca:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8024fce:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8024fd2:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8024fd6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024fda:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8024fde:	4453      	add	r3, sl
 8024fe0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024fe4:	0a1b      	lsrs	r3, r3, #8
 8024fe6:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8024fea:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024fee:	ea43 030c 	orr.w	r3, r3, ip
 8024ff2:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8024ff4:	2cff      	cmp	r4, #255	; 0xff
 8024ff6:	d021      	beq.n	802503c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 8024ff8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8024ffa:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8024ffe:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8025000:	fb04 fb0b 	mul.w	fp, r4, fp
 8025004:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8025006:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802500a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802500c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8025010:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8025014:	fb04 fa0a 	mul.w	sl, r4, sl
 8025018:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802501c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8025020:	44de      	add	lr, fp
 8025022:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8025026:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802502a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802502e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025032:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025036:	ea4e 040a 	orr.w	r4, lr, sl
 802503a:	940b      	str	r4, [sp, #44]	; 0x2c
 802503c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802503e:	2cff      	cmp	r4, #255	; 0xff
 8025040:	d021      	beq.n	8025086 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8025042:	9c08      	ldr	r4, [sp, #32]
 8025044:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8025048:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802504a:	fb04 fb0b 	mul.w	fp, r4, fp
 802504e:	9c08      	ldr	r4, [sp, #32]
 8025050:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8025054:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8025056:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802505a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802505e:	fb04 fa0a 	mul.w	sl, r4, sl
 8025062:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025066:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802506a:	44de      	add	lr, fp
 802506c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8025070:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025074:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025078:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802507c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025080:	ea4e 040a 	orr.w	r4, lr, sl
 8025084:	9408      	str	r4, [sp, #32]
 8025086:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8025088:	2cff      	cmp	r4, #255	; 0xff
 802508a:	d021      	beq.n	80250d0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 802508c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802508e:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8025092:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8025094:	fb04 fb0b 	mul.w	fp, r4, fp
 8025098:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802509a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802509e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80250a0:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80250a4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80250a8:	fb04 fa0a 	mul.w	sl, r4, sl
 80250ac:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80250b0:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80250b4:	44de      	add	lr, fp
 80250b6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80250ba:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80250be:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80250c2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80250c6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80250ca:	ea4e 040a 	orr.w	r4, lr, sl
 80250ce:	940c      	str	r4, [sp, #48]	; 0x30
 80250d0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80250d2:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 80250d6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80250da:	43c9      	mvns	r1, r1
 80250dc:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80250e0:	9c08      	ldr	r4, [sp, #32]
 80250e2:	fb08 fc0c 	mul.w	ip, r8, ip
 80250e6:	fb02 cc0e 	mla	ip, r2, lr, ip
 80250ea:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80250ee:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80250f0:	fb00 cc0e 	mla	ip, r0, lr, ip
 80250f4:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80250f8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80250fa:	fb09 cc0e 	mla	ip, r9, lr, ip
 80250fe:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8025102:	fb08 f80e 	mul.w	r8, r8, lr
 8025106:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802510a:	fa5f fe81 	uxtb.w	lr, r1
 802510e:	fb02 8303 	mla	r3, r2, r3, r8
 8025112:	9a08      	ldr	r2, [sp, #32]
 8025114:	f8b7 8000 	ldrh.w	r8, [r7]
 8025118:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802511c:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8025120:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8025122:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8025126:	fb00 330a 	mla	r3, r0, sl, r3
 802512a:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 802512e:	ea4f 2228 	mov.w	r2, r8, asr #8
 8025132:	fb09 3900 	mla	r9, r9, r0, r3
 8025136:	ea4f 00e8 	mov.w	r0, r8, asr #3
 802513a:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 802513e:	b2c9      	uxtb	r1, r1
 8025140:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8025144:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8025148:	fb02 f20e 	mul.w	r2, r2, lr
 802514c:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8025150:	fb00 f00e 	mul.w	r0, r0, lr
 8025154:	1c53      	adds	r3, r2, #1
 8025156:	fb01 f10e 	mul.w	r1, r1, lr
 802515a:	ea4c 0c09 	orr.w	ip, ip, r9
 802515e:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8025162:	ea4f 431c 	mov.w	r3, ip, lsr #16
 8025166:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802516a:	4a60      	ldr	r2, [pc, #384]	; (80252ec <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>)
 802516c:	b2db      	uxtb	r3, r3
 802516e:	ea02 2203 	and.w	r2, r2, r3, lsl #8
 8025172:	1c43      	adds	r3, r0, #1
 8025174:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8025178:	ea4f 231c 	mov.w	r3, ip, lsr #8
 802517c:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8025180:	00db      	lsls	r3, r3, #3
 8025182:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8025186:	4313      	orrs	r3, r2
 8025188:	1c4a      	adds	r2, r1, #1
 802518a:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 802518e:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8025192:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 8025196:	ea4c 0c03 	orr.w	ip, ip, r3
 802519a:	f8a7 c000 	strh.w	ip, [r7]
 802519e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80251a0:	3702      	adds	r7, #2
 80251a2:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80251a4:	441a      	add	r2, r3
 80251a6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80251a8:	441d      	add	r5, r3
 80251aa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80251ac:	9225      	str	r2, [sp, #148]	; 0x94
 80251ae:	3b01      	subs	r3, #1
 80251b0:	9317      	str	r3, [sp, #92]	; 0x5c
 80251b2:	e699      	b.n	8024ee8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 80251b4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80251b6:	9c25      	ldr	r4, [sp, #148]	; 0x94
 80251b8:	441c      	add	r4, r3
 80251ba:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80251bc:	441d      	add	r5, r3
 80251be:	9b07      	ldr	r3, [sp, #28]
 80251c0:	9425      	str	r4, [sp, #148]	; 0x94
 80251c2:	3b01      	subs	r3, #1
 80251c4:	9307      	str	r3, [sp, #28]
 80251c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80251c8:	3302      	adds	r3, #2
 80251ca:	930a      	str	r3, [sp, #40]	; 0x28
 80251cc:	e66c      	b.n	8024ea8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 80251ce:	d024      	beq.n	802521a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3be>
 80251d0:	9b07      	ldr	r3, [sp, #28]
 80251d2:	9827      	ldr	r0, [sp, #156]	; 0x9c
 80251d4:	3b01      	subs	r3, #1
 80251d6:	9c25      	ldr	r4, [sp, #148]	; 0x94
 80251d8:	fb00 4003 	mla	r0, r0, r3, r4
 80251dc:	1400      	asrs	r0, r0, #16
 80251de:	f53f ae80 	bmi.w	8024ee2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80251e2:	3901      	subs	r1, #1
 80251e4:	4288      	cmp	r0, r1
 80251e6:	f6bf ae7c 	bge.w	8024ee2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80251ea:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80251ec:	fb01 5303 	mla	r3, r1, r3, r5
 80251f0:	141b      	asrs	r3, r3, #16
 80251f2:	f53f ae76 	bmi.w	8024ee2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80251f6:	3a01      	subs	r2, #1
 80251f8:	4293      	cmp	r3, r2
 80251fa:	f6bf ae72 	bge.w	8024ee2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80251fe:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8025202:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8025206:	f1bb 0f00 	cmp.w	fp, #0
 802520a:	dc71      	bgt.n	80252f0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 802520c:	9b07      	ldr	r3, [sp, #28]
 802520e:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8025212:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025214:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8025218:	930a      	str	r3, [sp, #40]	; 0x28
 802521a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802521c:	2b00      	cmp	r3, #0
 802521e:	f340 81af 	ble.w	8025580 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 8025222:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8025226:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025228:	ee30 0a04 	vadd.f32	s0, s0, s8
 802522c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8025230:	eef0 6a62 	vmov.f32	s13, s5
 8025234:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8025238:	ee31 1a05 	vadd.f32	s2, s2, s10
 802523c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025240:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 8025244:	eef0 6a43 	vmov.f32	s13, s6
 8025248:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802524c:	ee16 5a90 	vmov	r5, s13
 8025250:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8025254:	ee61 7a27 	vmul.f32	s15, s2, s15
 8025258:	ee77 2a62 	vsub.f32	s5, s14, s5
 802525c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8025260:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8025264:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8025268:	ee12 2a90 	vmov	r2, s5
 802526c:	eef0 2a47 	vmov.f32	s5, s14
 8025270:	fb92 f3f3 	sdiv	r3, r2, r3
 8025274:	ee13 2a10 	vmov	r2, s6
 8025278:	9327      	str	r3, [sp, #156]	; 0x9c
 802527a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802527c:	eeb0 3a67 	vmov.f32	s6, s15
 8025280:	fb92 f3f3 	sdiv	r3, r2, r3
 8025284:	9328      	str	r3, [sp, #160]	; 0xa0
 8025286:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8025288:	9a18      	ldr	r2, [sp, #96]	; 0x60
 802528a:	3b01      	subs	r3, #1
 802528c:	9316      	str	r3, [sp, #88]	; 0x58
 802528e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025290:	bf08      	it	eq
 8025292:	4613      	moveq	r3, r2
 8025294:	9307      	str	r3, [sp, #28]
 8025296:	e5f9      	b.n	8024e8c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 8025298:	2800      	cmp	r0, #0
 802529a:	f43f ae6b 	beq.w	8024f74 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 802529e:	f818 1001 	ldrb.w	r1, [r8, r1]
 80252a2:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80252a6:	9108      	str	r1, [sp, #32]
 80252a8:	0e09      	lsrs	r1, r1, #24
 80252aa:	9110      	str	r1, [sp, #64]	; 0x40
 80252ac:	e662      	b.n	8024f74 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 80252ae:	f113 0801 	adds.w	r8, r3, #1
 80252b2:	f53f af74 	bmi.w	802519e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 80252b6:	4541      	cmp	r1, r8
 80252b8:	f6ff af71 	blt.w	802519e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 80252bc:	f11c 0801 	adds.w	r8, ip, #1
 80252c0:	f53f af6d 	bmi.w	802519e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 80252c4:	45c6      	cmp	lr, r8
 80252c6:	f6ff af6a 	blt.w	802519e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 80252ca:	b209      	sxth	r1, r1
 80252cc:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 80252d0:	fa0f f38e 	sxth.w	r3, lr
 80252d4:	9100      	str	r1, [sp, #0]
 80252d6:	4639      	mov	r1, r7
 80252d8:	9301      	str	r3, [sp, #4]
 80252da:	4633      	mov	r3, r6
 80252dc:	e9cd 2004 	strd	r2, r0, [sp, #16]
 80252e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80252e2:	9819      	ldr	r0, [sp, #100]	; 0x64
 80252e4:	f7ff fc7b 	bl	8024bde <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
 80252e8:	e759      	b.n	802519e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 80252ea:	bf00      	nop
 80252ec:	fffff800 	.word	0xfffff800
 80252f0:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80252f2:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80252f6:	9c25      	ldr	r4, [sp, #148]	; 0x94
 80252f8:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80252fc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80252fe:	1427      	asrs	r7, r4, #16
 8025300:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8025302:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025306:	142b      	asrs	r3, r5, #16
 8025308:	fb01 7303 	mla	r3, r1, r3, r7
 802530c:	18e7      	adds	r7, r4, r3
 802530e:	5ce3      	ldrb	r3, [r4, r3]
 8025310:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8025314:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8025318:	2a00      	cmp	r2, #0
 802531a:	f000 8127 	beq.w	802556c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 802531e:	f897 e001 	ldrb.w	lr, [r7, #1]
 8025322:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 8025326:	940d      	str	r4, [sp, #52]	; 0x34
 8025328:	0e24      	lsrs	r4, r4, #24
 802532a:	9414      	str	r4, [sp, #80]	; 0x50
 802532c:	b170      	cbz	r0, 802534c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 802532e:	eb07 0e01 	add.w	lr, r7, r1
 8025332:	5c79      	ldrb	r1, [r7, r1]
 8025334:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8025338:	9109      	str	r1, [sp, #36]	; 0x24
 802533a:	0e09      	lsrs	r1, r1, #24
 802533c:	9111      	str	r1, [sp, #68]	; 0x44
 802533e:	f89e 1001 	ldrb.w	r1, [lr, #1]
 8025342:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8025346:	910e      	str	r1, [sp, #56]	; 0x38
 8025348:	0e09      	lsrs	r1, r1, #24
 802534a:	9115      	str	r1, [sp, #84]	; 0x54
 802534c:	b292      	uxth	r2, r2
 802534e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8025350:	b280      	uxth	r0, r0
 8025352:	fb02 f800 	mul.w	r8, r2, r0
 8025356:	0112      	lsls	r2, r2, #4
 8025358:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 802535c:	eba2 0e08 	sub.w	lr, r2, r8
 8025360:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8025364:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8025366:	b280      	uxth	r0, r0
 8025368:	fa1f fe8e 	uxth.w	lr, lr
 802536c:	1a09      	subs	r1, r1, r0
 802536e:	fb0e f202 	mul.w	r2, lr, r2
 8025372:	b289      	uxth	r1, r1
 8025374:	fb01 220c 	mla	r2, r1, ip, r2
 8025378:	fb00 2204 	mla	r2, r0, r4, r2
 802537c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802537e:	fb08 2204 	mla	r2, r8, r4, r2
 8025382:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8025386:	2a00      	cmp	r2, #0
 8025388:	f000 80e5 	beq.w	8025556 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fa>
 802538c:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8025390:	d019      	beq.n	80253c6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56a>
 8025392:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8025396:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802539a:	fb0c fa0a 	mul.w	sl, ip, sl
 802539e:	fb0c fc03 	mul.w	ip, ip, r3
 80253a2:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80253a6:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80253aa:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 80253ae:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80253b2:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80253b6:	4453      	add	r3, sl
 80253b8:	0a3f      	lsrs	r7, r7, #8
 80253ba:	0a1b      	lsrs	r3, r3, #8
 80253bc:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80253c0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80253c4:	433b      	orrs	r3, r7
 80253c6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80253c8:	2cff      	cmp	r4, #255	; 0xff
 80253ca:	d020      	beq.n	802540e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5b2>
 80253cc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80253ce:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80253d2:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80253d4:	4367      	muls	r7, r4
 80253d6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80253d8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80253dc:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80253e0:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80253e2:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80253e6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80253ea:	fb04 fa0a 	mul.w	sl, r4, sl
 80253ee:	44bc      	add	ip, r7
 80253f0:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80253f4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80253f8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80253fc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025400:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025404:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025408:	ea4c 040a 	orr.w	r4, ip, sl
 802540c:	940d      	str	r4, [sp, #52]	; 0x34
 802540e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8025410:	2cff      	cmp	r4, #255	; 0xff
 8025412:	d020      	beq.n	8025456 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5fa>
 8025414:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8025416:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802541a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802541c:	4367      	muls	r7, r4
 802541e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8025420:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8025424:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8025428:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802542a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802542e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025432:	fb04 fa0a 	mul.w	sl, r4, sl
 8025436:	44bc      	add	ip, r7
 8025438:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802543c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025440:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8025444:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025448:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802544c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025450:	ea4c 040a 	orr.w	r4, ip, sl
 8025454:	9409      	str	r4, [sp, #36]	; 0x24
 8025456:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8025458:	2cff      	cmp	r4, #255	; 0xff
 802545a:	d020      	beq.n	802549e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x642>
 802545c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802545e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8025462:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8025464:	4367      	muls	r7, r4
 8025466:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8025468:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802546c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8025470:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8025472:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8025476:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802547a:	fb04 fa0a 	mul.w	sl, r4, sl
 802547e:	44bc      	add	ip, r7
 8025480:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8025484:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025488:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802548c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025490:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025494:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025498:	ea4c 040a 	orr.w	r4, ip, sl
 802549c:	940e      	str	r4, [sp, #56]	; 0x38
 802549e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80254a0:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80254a4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80254a8:	43d2      	mvns	r2, r2
 80254aa:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80254ae:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80254b0:	b2d2      	uxtb	r2, r2
 80254b2:	fb0e f707 	mul.w	r7, lr, r7
 80254b6:	fb01 770c 	mla	r7, r1, ip, r7
 80254ba:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80254be:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80254c0:	fb00 770c 	mla	r7, r0, ip, r7
 80254c4:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80254c8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80254ca:	fb08 770c 	mla	r7, r8, ip, r7
 80254ce:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 80254d2:	fb0e fe0c 	mul.w	lr, lr, ip
 80254d6:	0a3f      	lsrs	r7, r7, #8
 80254d8:	fb01 e303 	mla	r3, r1, r3, lr
 80254dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80254de:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80254e2:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 80254e6:	990e      	ldr	r1, [sp, #56]	; 0x38
 80254e8:	fb00 330a 	mla	r3, r0, sl, r3
 80254ec:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 80254f0:	fb08 3c0c 	mla	ip, r8, ip, r3
 80254f4:	f8b9 3000 	ldrh.w	r3, [r9]
 80254f8:	1218      	asrs	r0, r3, #8
 80254fa:	10d9      	asrs	r1, r3, #3
 80254fc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025500:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8025504:	00db      	lsls	r3, r3, #3
 8025506:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 802550a:	4350      	muls	r0, r2
 802550c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8025510:	b2db      	uxtb	r3, r3
 8025512:	4351      	muls	r1, r2
 8025514:	ea47 070c 	orr.w	r7, r7, ip
 8025518:	4353      	muls	r3, r2
 802551a:	1c42      	adds	r2, r0, #1
 802551c:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8025520:	0c3a      	lsrs	r2, r7, #16
 8025522:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8025526:	4a18      	ldr	r2, [pc, #96]	; (8025588 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72c>)
 8025528:	b2c0      	uxtb	r0, r0
 802552a:	ea02 2000 	and.w	r0, r2, r0, lsl #8
 802552e:	1c4a      	adds	r2, r1, #1
 8025530:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8025534:	0a3a      	lsrs	r2, r7, #8
 8025536:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 802553a:	00c9      	lsls	r1, r1, #3
 802553c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8025540:	4301      	orrs	r1, r0
 8025542:	1c58      	adds	r0, r3, #1
 8025544:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8025548:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 802554c:	f3c7 00c4 	ubfx	r0, r7, #3, #5
 8025550:	4308      	orrs	r0, r1
 8025552:	f8a9 0000 	strh.w	r0, [r9]
 8025556:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8025558:	f109 0902 	add.w	r9, r9, #2
 802555c:	9a25      	ldr	r2, [sp, #148]	; 0x94
 802555e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8025562:	441a      	add	r2, r3
 8025564:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025566:	9225      	str	r2, [sp, #148]	; 0x94
 8025568:	441d      	add	r5, r3
 802556a:	e64c      	b.n	8025206 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 802556c:	2800      	cmp	r0, #0
 802556e:	f43f aeed 	beq.w	802534c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 8025572:	5c79      	ldrb	r1, [r7, r1]
 8025574:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8025578:	9109      	str	r1, [sp, #36]	; 0x24
 802557a:	0e09      	lsrs	r1, r1, #24
 802557c:	9111      	str	r1, [sp, #68]	; 0x44
 802557e:	e6e5      	b.n	802534c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 8025580:	b01b      	add	sp, #108	; 0x6c
 8025582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025586:	bf00      	nop
 8025588:	fffff800 	.word	0xfffff800

0802558c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
 802558c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025590:	b085      	sub	sp, #20
 8025592:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
 8025596:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 802559a:	2800      	cmp	r0, #0
 802559c:	9103      	str	r1, [sp, #12]
 802559e:	fb00 7406 	mla	r4, r0, r6, r7
 80255a2:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
 80255a6:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 80255aa:	eb02 0544 	add.w	r5, r2, r4, lsl #1
 80255ae:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 80255b2:	eb03 0904 	add.w	r9, r3, r4
 80255b6:	9501      	str	r5, [sp, #4]
 80255b8:	f2c0 8150 	blt.w	802585c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 80255bc:	4583      	cmp	fp, r0
 80255be:	f340 814d 	ble.w	802585c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 80255c2:	2f00      	cmp	r7, #0
 80255c4:	f2c0 8146 	blt.w	8025854 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 80255c8:	42be      	cmp	r6, r7
 80255ca:	f340 8143 	ble.w	8025854 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 80255ce:	f813 c004 	ldrb.w	ip, [r3, r4]
 80255d2:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
 80255d6:	f64f 041f 	movw	r4, #63519	; 0xf81f
 80255da:	ea4f 02ec 	mov.w	r2, ip, asr #3
 80255de:	f423 65fc 	bic.w	r5, r3, #2016	; 0x7e0
 80255e2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80255e6:	4355      	muls	r5, r2
 80255e8:	fb0c f203 	mul.w	r2, ip, r3
 80255ec:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 80255f0:	f605 0501 	addw	r5, r5, #2049	; 0x801
 80255f4:	441d      	add	r5, r3
 80255f6:	f102 0320 	add.w	r3, r2, #32
 80255fa:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80255fe:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 8025602:	0a1b      	lsrs	r3, r3, #8
 8025604:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8025608:	431c      	orrs	r4, r3
 802560a:	1c7b      	adds	r3, r7, #1
 802560c:	f100 812b 	bmi.w	8025866 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 8025610:	429e      	cmp	r6, r3
 8025612:	f340 8128 	ble.w	8025866 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 8025616:	2900      	cmp	r1, #0
 8025618:	f000 8128 	beq.w	802586c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e0>
 802561c:	9a01      	ldr	r2, [sp, #4]
 802561e:	f899 3001 	ldrb.w	r3, [r9, #1]
 8025622:	8855      	ldrh	r5, [r2, #2]
 8025624:	ea4f 08e3 	mov.w	r8, r3, asr #3
 8025628:	f425 62fc 	bic.w	r2, r5, #2016	; 0x7e0
 802562c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8025630:	fb08 f802 	mul.w	r8, r8, r2
 8025634:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8025638:	435d      	muls	r5, r3
 802563a:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 802563e:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8025642:	44d0      	add	r8, sl
 8025644:	f105 0a20 	add.w	sl, r5, #32
 8025648:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 802564c:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 8025650:	0a2d      	lsrs	r5, r5, #8
 8025652:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8025656:	432a      	orrs	r2, r5
 8025658:	3001      	adds	r0, #1
 802565a:	f100 810d 	bmi.w	8025878 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 802565e:	4583      	cmp	fp, r0
 8025660:	f340 810a 	ble.w	8025878 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 8025664:	f1be 0f00 	cmp.w	lr, #0
 8025668:	f000 810b 	beq.w	8025882 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2f6>
 802566c:	2f00      	cmp	r7, #0
 802566e:	f2c0 8100 	blt.w	8025872 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 8025672:	42be      	cmp	r6, r7
 8025674:	f340 80fd 	ble.w	8025872 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 8025678:	9801      	ldr	r0, [sp, #4]
 802567a:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 802567e:	f819 5006 	ldrb.w	r5, [r9, r6]
 8025682:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 8025686:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 802568a:	f428 60fc 	bic.w	r0, r8, #2016	; 0x7e0
 802568e:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8025692:	fb0a fa00 	mul.w	sl, sl, r0
 8025696:	fb05 f808 	mul.w	r8, r5, r8
 802569a:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 802569e:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 80256a2:	4482      	add	sl, r0
 80256a4:	f108 0020 	add.w	r0, r8, #32
 80256a8:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 80256ac:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 80256b0:	0a00      	lsrs	r0, r0, #8
 80256b2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80256b6:	ea4b 0b00 	orr.w	fp, fp, r0
 80256ba:	3701      	adds	r7, #1
 80256bc:	f100 80e6 	bmi.w	802588c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 80256c0:	42be      	cmp	r6, r7
 80256c2:	f340 80e3 	ble.w	802588c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 80256c6:	2900      	cmp	r1, #0
 80256c8:	f000 80e3 	beq.w	8025892 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x306>
 80256cc:	3601      	adds	r6, #1
 80256ce:	9801      	ldr	r0, [sp, #4]
 80256d0:	f819 7006 	ldrb.w	r7, [r9, r6]
 80256d4:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 80256d8:	ea4f 09e7 	mov.w	r9, r7, asr #3
 80256dc:	f420 66fc 	bic.w	r6, r0, #2016	; 0x7e0
 80256e0:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80256e4:	fb09 f906 	mul.w	r9, r9, r6
 80256e8:	fb07 f800 	mul.w	r8, r7, r0
 80256ec:	f64f 001f 	movw	r0, #63519	; 0xf81f
 80256f0:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 80256f4:	f609 0901 	addw	r9, r9, #2049	; 0x801
 80256f8:	44d1      	add	r9, sl
 80256fa:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 80256fe:	f108 0020 	add.w	r0, r8, #32
 8025702:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8025706:	0a00      	lsrs	r0, r0, #8
 8025708:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802570c:	4330      	orrs	r0, r6
 802570e:	b28e      	uxth	r6, r1
 8025710:	fa1f f98e 	uxth.w	r9, lr
 8025714:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 8025718:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 802571c:	fb06 f809 	mul.w	r8, r6, r9
 8025720:	0136      	lsls	r6, r6, #4
 8025722:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8025726:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 802572a:	9601      	str	r6, [sp, #4]
 802572c:	ea4a 0404 	orr.w	r4, sl, r4
 8025730:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8025734:	fa1f f689 	uxth.w	r6, r9
 8025738:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802573c:	fb11 f90e 	smulbb	r9, r1, lr
 8025740:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8025744:	9602      	str	r6, [sp, #8]
 8025746:	4626      	mov	r6, r4
 8025748:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 802574c:	f1ce 0410 	rsb	r4, lr, #16
 8025750:	ea4a 0202 	orr.w	r2, sl, r2
 8025754:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8025758:	1a64      	subs	r4, r4, r1
 802575a:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 802575e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8025762:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8025766:	434a      	muls	r2, r1
 8025768:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 802576c:	ea4a 0000 	orr.w	r0, sl, r0
 8025770:	9903      	ldr	r1, [sp, #12]
 8025772:	fb04 2406 	mla	r4, r4, r6, r2
 8025776:	9e02      	ldr	r6, [sp, #8]
 8025778:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 802577c:	fb09 4200 	mla	r2, r9, r0, r4
 8025780:	ea4f 440b 	mov.w	r4, fp, lsl #16
 8025784:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8025788:	8808      	ldrh	r0, [r1, #0]
 802578a:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 802578e:	f89d 1050 	ldrb.w	r1, [sp, #80]	; 0x50
 8025792:	ea44 0b0b 	orr.w	fp, r4, fp
 8025796:	9c01      	ldr	r4, [sp, #4]
 8025798:	b289      	uxth	r1, r1
 802579a:	f5c4 7480 	rsb	r4, r4, #256	; 0x100
 802579e:	fb0e 2e0b 	mla	lr, lr, fp, r2
 80257a2:	1ba4      	subs	r4, r4, r6
 80257a4:	9e01      	ldr	r6, [sp, #4]
 80257a6:	ea4f 525e 	mov.w	r2, lr, lsr #21
 80257aa:	eba6 0608 	sub.w	r6, r6, r8
 80257ae:	b2a4      	uxth	r4, r4
 80257b0:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80257b4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80257b8:	b2b6      	uxth	r6, r6
 80257ba:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 80257be:	4373      	muls	r3, r6
 80257c0:	ea42 0e0e 	orr.w	lr, r2, lr
 80257c4:	fb0c 3304 	mla	r3, ip, r4, r3
 80257c8:	9c02      	ldr	r4, [sp, #8]
 80257ca:	fa1f f28e 	uxth.w	r2, lr
 80257ce:	fb04 3505 	mla	r5, r4, r5, r3
 80257d2:	10d4      	asrs	r4, r2, #3
 80257d4:	fb08 5707 	mla	r7, r8, r7, r5
 80257d8:	1215      	asrs	r5, r2, #8
 80257da:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 80257de:	00d2      	lsls	r2, r2, #3
 80257e0:	f3c7 2707 	ubfx	r7, r7, #8, #8
 80257e4:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 80257e8:	b2d2      	uxtb	r2, r2
 80257ea:	434f      	muls	r7, r1
 80257ec:	1c7b      	adds	r3, r7, #1
 80257ee:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 80257f2:	1203      	asrs	r3, r0, #8
 80257f4:	ea6f 2717 	mvn.w	r7, r7, lsr #8
 80257f8:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80257fc:	b2ff      	uxtb	r7, r7
 80257fe:	fb13 f307 	smulbb	r3, r3, r7
 8025802:	fb05 3501 	mla	r5, r5, r1, r3
 8025806:	10c3      	asrs	r3, r0, #3
 8025808:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 802580c:	b2ad      	uxth	r5, r5
 802580e:	fb13 f307 	smulbb	r3, r3, r7
 8025812:	fb04 3401 	mla	r4, r4, r1, r3
 8025816:	00c3      	lsls	r3, r0, #3
 8025818:	b2db      	uxtb	r3, r3
 802581a:	b2a4      	uxth	r4, r4
 802581c:	fb13 f307 	smulbb	r3, r3, r7
 8025820:	fb02 3101 	mla	r1, r2, r1, r3
 8025824:	1c6b      	adds	r3, r5, #1
 8025826:	1c62      	adds	r2, r4, #1
 8025828:	b289      	uxth	r1, r1
 802582a:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 802582e:	1c4b      	adds	r3, r1, #1
 8025830:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8025834:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8025838:	9a03      	ldr	r2, [sp, #12]
 802583a:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 802583e:	0964      	lsrs	r4, r4, #5
 8025840:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8025844:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 8025848:	432b      	orrs	r3, r5
 802584a:	4323      	orrs	r3, r4
 802584c:	8013      	strh	r3, [r2, #0]
 802584e:	b005      	add	sp, #20
 8025850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025854:	f04f 0c00 	mov.w	ip, #0
 8025858:	4664      	mov	r4, ip
 802585a:	e6d6      	b.n	802560a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x7e>
 802585c:	2300      	movs	r3, #0
 802585e:	469c      	mov	ip, r3
 8025860:	461a      	mov	r2, r3
 8025862:	461c      	mov	r4, r3
 8025864:	e6f8      	b.n	8025658 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 8025866:	2300      	movs	r3, #0
 8025868:	461a      	mov	r2, r3
 802586a:	e6f5      	b.n	8025658 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 802586c:	460b      	mov	r3, r1
 802586e:	460a      	mov	r2, r1
 8025870:	e6f2      	b.n	8025658 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 8025872:	2500      	movs	r5, #0
 8025874:	46ab      	mov	fp, r5
 8025876:	e720      	b.n	80256ba <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x12e>
 8025878:	2700      	movs	r7, #0
 802587a:	463d      	mov	r5, r7
 802587c:	4638      	mov	r0, r7
 802587e:	46bb      	mov	fp, r7
 8025880:	e745      	b.n	802570e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 8025882:	4677      	mov	r7, lr
 8025884:	4675      	mov	r5, lr
 8025886:	4670      	mov	r0, lr
 8025888:	46f3      	mov	fp, lr
 802588a:	e740      	b.n	802570e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 802588c:	2700      	movs	r7, #0
 802588e:	4638      	mov	r0, r7
 8025890:	e73d      	b.n	802570e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 8025892:	460f      	mov	r7, r1
 8025894:	4608      	mov	r0, r1
 8025896:	e73a      	b.n	802570e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>

08025898 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802589c:	b097      	sub	sp, #92	; 0x5c
 802589e:	9214      	str	r2, [sp, #80]	; 0x50
 80258a0:	9308      	str	r3, [sp, #32]
 80258a2:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80258a4:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 80258a8:	9015      	str	r0, [sp, #84]	; 0x54
 80258aa:	9312      	str	r3, [sp, #72]	; 0x48
 80258ac:	6850      	ldr	r0, [r2, #4]
 80258ae:	9111      	str	r1, [sp, #68]	; 0x44
 80258b0:	6812      	ldr	r2, [r2, #0]
 80258b2:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 80258b6:	fb00 1303 	mla	r3, r0, r3, r1
 80258ba:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80258be:	9309      	str	r3, [sp, #36]	; 0x24
 80258c0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80258c2:	681b      	ldr	r3, [r3, #0]
 80258c4:	930b      	str	r3, [sp, #44]	; 0x2c
 80258c6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80258c8:	685b      	ldr	r3, [r3, #4]
 80258ca:	930c      	str	r3, [sp, #48]	; 0x30
 80258cc:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80258d0:	930a      	str	r3, [sp, #40]	; 0x28
 80258d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80258d4:	2b00      	cmp	r3, #0
 80258d6:	dc03      	bgt.n	80258e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80258d8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80258da:	2b00      	cmp	r3, #0
 80258dc:	f340 83cd 	ble.w	802607a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e2>
 80258e0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80258e2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80258e6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80258ea:	1e48      	subs	r0, r1, #1
 80258ec:	1e55      	subs	r5, r2, #1
 80258ee:	9b08      	ldr	r3, [sp, #32]
 80258f0:	2b00      	cmp	r3, #0
 80258f2:	f340 81a5 	ble.w	8025c40 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 80258f6:	9e21      	ldr	r6, [sp, #132]	; 0x84
 80258f8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80258fa:	1436      	asrs	r6, r6, #16
 80258fc:	ea4f 4323 	mov.w	r3, r3, asr #16
 8025900:	d406      	bmi.n	8025910 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8025902:	4286      	cmp	r6, r0
 8025904:	da04      	bge.n	8025910 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8025906:	2b00      	cmp	r3, #0
 8025908:	db02      	blt.n	8025910 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802590a:	42ab      	cmp	r3, r5
 802590c:	f2c0 8199 	blt.w	8025c42 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8025910:	3601      	adds	r6, #1
 8025912:	f100 8186 	bmi.w	8025c22 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8025916:	42b1      	cmp	r1, r6
 8025918:	f2c0 8183 	blt.w	8025c22 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 802591c:	3301      	adds	r3, #1
 802591e:	f100 8180 	bmi.w	8025c22 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8025922:	429a      	cmp	r2, r3
 8025924:	f2c0 817d 	blt.w	8025c22 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8025928:	9b08      	ldr	r3, [sp, #32]
 802592a:	f64f 061f 	movw	r6, #63519	; 0xf81f
 802592e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8025930:	9313      	str	r3, [sp, #76]	; 0x4c
 8025932:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8025934:	2b00      	cmp	r3, #0
 8025936:	f340 81a6 	ble.w	8025c86 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 802593a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 802593c:	9d21      	ldr	r5, [sp, #132]	; 0x84
 802593e:	1418      	asrs	r0, r3, #16
 8025940:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8025942:	142d      	asrs	r5, r5, #16
 8025944:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8025948:	9b22      	ldr	r3, [sp, #136]	; 0x88
 802594a:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 802594e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025950:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8025954:	f100 81fa 	bmi.w	8025d4c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8025958:	f102 3eff 	add.w	lr, r2, #4294967295
 802595c:	4575      	cmp	r5, lr
 802595e:	f280 81f5 	bge.w	8025d4c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8025962:	2800      	cmp	r0, #0
 8025964:	f2c0 81f2 	blt.w	8025d4c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8025968:	f103 3eff 	add.w	lr, r3, #4294967295
 802596c:	4570      	cmp	r0, lr
 802596e:	f280 81ed 	bge.w	8025d4c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8025972:	b212      	sxth	r2, r2
 8025974:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8025976:	fa1f fe81 	uxth.w	lr, r1
 802597a:	fb00 5002 	mla	r0, r0, r2, r5
 802597e:	ea4f 150e 	mov.w	r5, lr, lsl #4
 8025982:	eb03 0a00 	add.w	sl, r3, r0
 8025986:	f813 9000 	ldrb.w	r9, [r3, r0]
 802598a:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 802598e:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8025992:	b29b      	uxth	r3, r3
 8025994:	f1bc 0f00 	cmp.w	ip, #0
 8025998:	f000 81bb 	beq.w	8025d12 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 802599c:	f81a 4002 	ldrb.w	r4, [sl, r2]
 80259a0:	eb0a 0b02 	add.w	fp, sl, r2
 80259a4:	fa1f fa8c 	uxth.w	sl, ip
 80259a8:	940d      	str	r4, [sp, #52]	; 0x34
 80259aa:	fb0a fe0e 	mul.w	lr, sl, lr
 80259ae:	f89b 4001 	ldrb.w	r4, [fp, #1]
 80259b2:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 80259b6:	eba5 050e 	sub.w	r5, r5, lr
 80259ba:	940e      	str	r4, [sp, #56]	; 0x38
 80259bc:	fa1f fa8a 	uxth.w	sl, sl
 80259c0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80259c2:	b2ad      	uxth	r5, r5
 80259c4:	eba3 030a 	sub.w	r3, r3, sl
 80259c8:	fb08 f505 	mul.w	r5, r8, r5
 80259cc:	b29b      	uxth	r3, r3
 80259ce:	fb09 5303 	mla	r3, r9, r3, r5
 80259d2:	fb0a 3304 	mla	r3, sl, r4, r3
 80259d6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80259d8:	fb0e 3304 	mla	r3, lr, r4, r3
 80259dc:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80259e0:	2b00      	cmp	r3, #0
 80259e2:	f000 8111 	beq.w	8025c08 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 80259e6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80259e8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80259ec:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 80259f0:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 80259f4:	f000 8192 	beq.w	8025d1c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>
 80259f8:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 80259fc:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8025a00:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8025a04:	fb0a fe0e 	mul.w	lr, sl, lr
 8025a08:	fb09 f000 	mul.w	r0, r9, r0
 8025a0c:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 8025a10:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8025a14:	f100 0b20 	add.w	fp, r0, #32
 8025a18:	44ce      	add	lr, r9
 8025a1a:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 8025a1e:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8025a22:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8025a26:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8025a2a:	ea4e 0909 	orr.w	r9, lr, r9
 8025a2e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8025a32:	8868      	ldrh	r0, [r5, #2]
 8025a34:	d019      	beq.n	8025a6a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8025a36:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8025a3a:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8025a3e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8025a42:	fb0a fe0e 	mul.w	lr, sl, lr
 8025a46:	fb08 f800 	mul.w	r8, r8, r0
 8025a4a:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 8025a4e:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8025a52:	f108 0b20 	add.w	fp, r8, #32
 8025a56:	4486      	add	lr, r0
 8025a58:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8025a5c:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8025a60:	0a00      	lsrs	r0, r0, #8
 8025a62:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8025a66:	ea4e 0000 	orr.w	r0, lr, r0
 8025a6a:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8025a6e:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8025a72:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8025a76:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8025a7a:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8025a7e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8025a82:	ea4e 0909 	orr.w	r9, lr, r9
 8025a86:	ea4a 0000 	orr.w	r0, sl, r0
 8025a8a:	f1bc 0f00 	cmp.w	ip, #0
 8025a8e:	f000 8147 	beq.w	8025d20 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 8025a92:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8025a96:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8025a98:	3a01      	subs	r2, #1
 8025a9a:	2cff      	cmp	r4, #255	; 0xff
 8025a9c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8025aa0:	f102 0202 	add.w	r2, r2, #2
 8025aa4:	eb05 0e02 	add.w	lr, r5, r2
 8025aa8:	5aaa      	ldrh	r2, [r5, r2]
 8025aaa:	d018      	beq.n	8025ade <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 8025aac:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 8025ab0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8025ab4:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8025ab8:	fb04 fa02 	mul.w	sl, r4, r2
 8025abc:	fb08 f805 	mul.w	r8, r8, r5
 8025ac0:	f10a 0520 	add.w	r5, sl, #32
 8025ac4:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 8025ac8:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8025acc:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 8025ad0:	4442      	add	r2, r8
 8025ad2:	0a2d      	lsrs	r5, r5, #8
 8025ad4:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 8025ad8:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8025adc:	432a      	orrs	r2, r5
 8025ade:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8025ae0:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8025ae4:	2cff      	cmp	r4, #255	; 0xff
 8025ae6:	d01a      	beq.n	8025b1e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x286>
 8025ae8:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 8025aec:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8025af0:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8025af4:	fb04 fa05 	mul.w	sl, r4, r5
 8025af8:	fb08 f80e 	mul.w	r8, r8, lr
 8025afc:	f10a 0e20 	add.w	lr, sl, #32
 8025b00:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 8025b04:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8025b08:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8025b0c:	4445      	add	r5, r8
 8025b0e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025b12:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 8025b16:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 8025b1a:	ea45 050e 	orr.w	r5, r5, lr
 8025b1e:	fb1c fe01 	smulbb	lr, ip, r1
 8025b22:	f1cc 0810 	rsb	r8, ip, #16
 8025b26:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8025b2a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8025b2e:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8025b32:	eba8 0801 	sub.w	r8, r8, r1
 8025b36:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 8025b3a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8025b3e:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 8025b42:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8025b46:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 8025b4a:	ea4a 0202 	orr.w	r2, sl, r2
 8025b4e:	4341      	muls	r1, r0
 8025b50:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8025b54:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8025b58:	fb09 1108 	mla	r1, r9, r8, r1
 8025b5c:	ea4b 0505 	orr.w	r5, fp, r5
 8025b60:	fb0c 1102 	mla	r1, ip, r2, r1
 8025b64:	fb0e 1e05 	mla	lr, lr, r5, r1
 8025b68:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8025b6c:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8025b70:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8025b74:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8025b78:	ea42 0e0e 	orr.w	lr, r2, lr
 8025b7c:	fa1f f28e 	uxth.w	r2, lr
 8025b80:	2bff      	cmp	r3, #255	; 0xff
 8025b82:	d103      	bne.n	8025b8c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8025b84:	9912      	ldr	r1, [sp, #72]	; 0x48
 8025b86:	29ff      	cmp	r1, #255	; 0xff
 8025b88:	f000 80de 	beq.w	8025d48 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 8025b8c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8025b8e:	1215      	asrs	r5, r2, #8
 8025b90:	8838      	ldrh	r0, [r7, #0]
 8025b92:	434b      	muls	r3, r1
 8025b94:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8025b98:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8025b9a:	f103 0c01 	add.w	ip, r3, #1
 8025b9e:	eb0c 2323 	add.w	r3, ip, r3, asr #8
 8025ba2:	ea6f 2323 	mvn.w	r3, r3, asr #8
 8025ba6:	fa5f fc83 	uxtb.w	ip, r3
 8025baa:	1203      	asrs	r3, r0, #8
 8025bac:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8025bb0:	fb13 f30c 	smulbb	r3, r3, ip
 8025bb4:	fb05 3501 	mla	r5, r5, r1, r3
 8025bb8:	10c3      	asrs	r3, r0, #3
 8025bba:	10d1      	asrs	r1, r2, #3
 8025bbc:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8025bc0:	00d2      	lsls	r2, r2, #3
 8025bc2:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8025bc6:	b2ad      	uxth	r5, r5
 8025bc8:	fb13 f30c 	smulbb	r3, r3, ip
 8025bcc:	b2d2      	uxtb	r2, r2
 8025bce:	fb01 3104 	mla	r1, r1, r4, r3
 8025bd2:	00c3      	lsls	r3, r0, #3
 8025bd4:	b2db      	uxtb	r3, r3
 8025bd6:	b289      	uxth	r1, r1
 8025bd8:	fb13 f30c 	smulbb	r3, r3, ip
 8025bdc:	fb02 3304 	mla	r3, r2, r4, r3
 8025be0:	b29a      	uxth	r2, r3
 8025be2:	1c6b      	adds	r3, r5, #1
 8025be4:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8025be8:	1c53      	adds	r3, r2, #1
 8025bea:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8025bee:	1c4a      	adds	r2, r1, #1
 8025bf0:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8025bf4:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8025bf8:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8025bfc:	0949      	lsrs	r1, r1, #5
 8025bfe:	432b      	orrs	r3, r5
 8025c00:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8025c04:	430b      	orrs	r3, r1
 8025c06:	803b      	strh	r3, [r7, #0]
 8025c08:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8025c0a:	3702      	adds	r7, #2
 8025c0c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8025c0e:	4413      	add	r3, r2
 8025c10:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8025c12:	9321      	str	r3, [sp, #132]	; 0x84
 8025c14:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025c16:	441a      	add	r2, r3
 8025c18:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8025c1a:	3b01      	subs	r3, #1
 8025c1c:	9222      	str	r2, [sp, #136]	; 0x88
 8025c1e:	9313      	str	r3, [sp, #76]	; 0x4c
 8025c20:	e687      	b.n	8025932 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8025c22:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8025c24:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 8025c26:	9c22      	ldr	r4, [sp, #136]	; 0x88
 8025c28:	4433      	add	r3, r6
 8025c2a:	9321      	str	r3, [sp, #132]	; 0x84
 8025c2c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025c2e:	441c      	add	r4, r3
 8025c30:	9b08      	ldr	r3, [sp, #32]
 8025c32:	3b01      	subs	r3, #1
 8025c34:	9422      	str	r4, [sp, #136]	; 0x88
 8025c36:	9308      	str	r3, [sp, #32]
 8025c38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025c3a:	3302      	adds	r3, #2
 8025c3c:	9309      	str	r3, [sp, #36]	; 0x24
 8025c3e:	e656      	b.n	80258ee <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8025c40:	d028      	beq.n	8025c94 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fc>
 8025c42:	9b08      	ldr	r3, [sp, #32]
 8025c44:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8025c46:	3b01      	subs	r3, #1
 8025c48:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8025c4a:	fb00 5003 	mla	r0, r0, r3, r5
 8025c4e:	1400      	asrs	r0, r0, #16
 8025c50:	f53f ae6a 	bmi.w	8025928 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8025c54:	3901      	subs	r1, #1
 8025c56:	4288      	cmp	r0, r1
 8025c58:	f6bf ae66 	bge.w	8025928 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8025c5c:	9924      	ldr	r1, [sp, #144]	; 0x90
 8025c5e:	9822      	ldr	r0, [sp, #136]	; 0x88
 8025c60:	fb01 0303 	mla	r3, r1, r3, r0
 8025c64:	141b      	asrs	r3, r3, #16
 8025c66:	f53f ae5f 	bmi.w	8025928 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8025c6a:	3a01      	subs	r2, #1
 8025c6c:	4293      	cmp	r3, r2
 8025c6e:	f6bf ae5b 	bge.w	8025928 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8025c72:	9b08      	ldr	r3, [sp, #32]
 8025c74:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8025c78:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8025c7c:	9313      	str	r3, [sp, #76]	; 0x4c
 8025c7e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8025c80:	2b00      	cmp	r3, #0
 8025c82:	f300 8082 	bgt.w	8025d8a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f2>
 8025c86:	9b08      	ldr	r3, [sp, #32]
 8025c88:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8025c8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025c8e:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8025c92:	9309      	str	r3, [sp, #36]	; 0x24
 8025c94:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8025c96:	2b00      	cmp	r3, #0
 8025c98:	f340 81ef 	ble.w	802607a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e2>
 8025c9c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8025ca0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8025ca2:	ee30 0a04 	vadd.f32	s0, s0, s8
 8025ca6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8025caa:	eef0 6a62 	vmov.f32	s13, s5
 8025cae:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8025cb2:	ee31 1a05 	vadd.f32	s2, s2, s10
 8025cb6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025cba:	edcd 6a21 	vstr	s13, [sp, #132]	; 0x84
 8025cbe:	eef0 6a43 	vmov.f32	s13, s6
 8025cc2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025cc6:	edcd 6a22 	vstr	s13, [sp, #136]	; 0x88
 8025cca:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8025cce:	ee61 7a27 	vmul.f32	s15, s2, s15
 8025cd2:	ee77 2a62 	vsub.f32	s5, s14, s5
 8025cd6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8025cda:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8025cde:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8025ce2:	ee12 2a90 	vmov	r2, s5
 8025ce6:	eef0 2a47 	vmov.f32	s5, s14
 8025cea:	fb92 f3f3 	sdiv	r3, r2, r3
 8025cee:	ee13 2a10 	vmov	r2, s6
 8025cf2:	9323      	str	r3, [sp, #140]	; 0x8c
 8025cf4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8025cf6:	eeb0 3a67 	vmov.f32	s6, s15
 8025cfa:	fb92 f3f3 	sdiv	r3, r2, r3
 8025cfe:	9324      	str	r3, [sp, #144]	; 0x90
 8025d00:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8025d02:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8025d04:	3b01      	subs	r3, #1
 8025d06:	9311      	str	r3, [sp, #68]	; 0x44
 8025d08:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8025d0a:	bf08      	it	eq
 8025d0c:	4613      	moveq	r3, r2
 8025d0e:	9308      	str	r3, [sp, #32]
 8025d10:	e5df      	b.n	80258d2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8025d12:	fb08 f505 	mul.w	r5, r8, r5
 8025d16:	fb09 5303 	mla	r3, r9, r3, r5
 8025d1a:	e65f      	b.n	80259dc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x144>
 8025d1c:	4681      	mov	r9, r0
 8025d1e:	e686      	b.n	8025a2e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8025d20:	f1c1 0210 	rsb	r2, r1, #16
 8025d24:	4341      	muls	r1, r0
 8025d26:	fb09 1902 	mla	r9, r9, r2, r1
 8025d2a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8025d2e:	ea4f 5259 	mov.w	r2, r9, lsr #21
 8025d32:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8025d36:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8025d3a:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8025d3e:	ea42 0909 	orr.w	r9, r2, r9
 8025d42:	fa1f f289 	uxth.w	r2, r9
 8025d46:	e71b      	b.n	8025b80 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 8025d48:	803a      	strh	r2, [r7, #0]
 8025d4a:	e75d      	b.n	8025c08 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8025d4c:	f115 0e01 	adds.w	lr, r5, #1
 8025d50:	f53f af5a 	bmi.w	8025c08 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8025d54:	4572      	cmp	r2, lr
 8025d56:	f6ff af57 	blt.w	8025c08 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8025d5a:	f110 0e01 	adds.w	lr, r0, #1
 8025d5e:	f53f af53 	bmi.w	8025c08 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8025d62:	4573      	cmp	r3, lr
 8025d64:	f6ff af50 	blt.w	8025c08 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8025d68:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8025d6a:	b21b      	sxth	r3, r3
 8025d6c:	b212      	sxth	r2, r2
 8025d6e:	9502      	str	r5, [sp, #8]
 8025d70:	9301      	str	r3, [sp, #4]
 8025d72:	9200      	str	r2, [sp, #0]
 8025d74:	e9cd 0103 	strd	r0, r1, [sp, #12]
 8025d78:	e9cd c405 	strd	ip, r4, [sp, #20]
 8025d7c:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 8025d80:	4639      	mov	r1, r7
 8025d82:	9815      	ldr	r0, [sp, #84]	; 0x54
 8025d84:	f7ff fc02 	bl	802558c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
 8025d88:	e73e      	b.n	8025c08 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8025d8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8025d8c:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8025d90:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8025d92:	f3c3 3503 	ubfx	r5, r3, #12, #4
 8025d96:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025d98:	fa1f fc82 	uxth.w	ip, r2
 8025d9c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025da0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8025da2:	ea4f 100c 	mov.w	r0, ip, lsl #4
 8025da6:	141f      	asrs	r7, r3, #16
 8025da8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8025daa:	141b      	asrs	r3, r3, #16
 8025dac:	fb01 3707 	mla	r7, r1, r7, r3
 8025db0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8025db2:	eb03 0a07 	add.w	sl, r3, r7
 8025db6:	f813 9007 	ldrb.w	r9, [r3, r7]
 8025dba:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8025dbe:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8025dc2:	b29b      	uxth	r3, r3
 8025dc4:	2d00      	cmp	r5, #0
 8025dc6:	f000 813d 	beq.w	8026044 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ac>
 8025dca:	f81a 4001 	ldrb.w	r4, [sl, r1]
 8025dce:	eb0a 0b01 	add.w	fp, sl, r1
 8025dd2:	fa1f fa85 	uxth.w	sl, r5
 8025dd6:	940f      	str	r4, [sp, #60]	; 0x3c
 8025dd8:	fb0a fc0c 	mul.w	ip, sl, ip
 8025ddc:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8025de0:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 8025de4:	eba0 000c 	sub.w	r0, r0, ip
 8025de8:	9410      	str	r4, [sp, #64]	; 0x40
 8025dea:	fa1f fa8a 	uxth.w	sl, sl
 8025dee:	b280      	uxth	r0, r0
 8025df0:	eba3 030a 	sub.w	r3, r3, sl
 8025df4:	fb08 f000 	mul.w	r0, r8, r0
 8025df8:	b29b      	uxth	r3, r3
 8025dfa:	fb09 0303 	mla	r3, r9, r3, r0
 8025dfe:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8025e00:	fb0a 3300 	mla	r3, sl, r0, r3
 8025e04:	fb0c 3304 	mla	r3, ip, r4, r3
 8025e08:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8025e0c:	2b00      	cmp	r3, #0
 8025e0e:	f000 810b 	beq.w	8026028 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x790>
 8025e12:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8025e14:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8025e18:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8025e1a:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 8025e1e:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 8025e22:	f000 8114 	beq.w	802604e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b6>
 8025e26:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8025e2a:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8025e2e:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8025e32:	fb0a fc0c 	mul.w	ip, sl, ip
 8025e36:	fb09 f707 	mul.w	r7, r9, r7
 8025e3a:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 8025e3e:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8025e42:	f107 0b20 	add.w	fp, r7, #32
 8025e46:	44cc      	add	ip, r9
 8025e48:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 8025e4c:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8025e50:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8025e54:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8025e58:	ea4c 0909 	orr.w	r9, ip, r9
 8025e5c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8025e60:	8847      	ldrh	r7, [r0, #2]
 8025e62:	d019      	beq.n	8025e98 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x600>
 8025e64:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8025e68:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8025e6c:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8025e70:	fb0a fc0c 	mul.w	ip, sl, ip
 8025e74:	fb08 f807 	mul.w	r8, r8, r7
 8025e78:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 8025e7c:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8025e80:	f108 0b20 	add.w	fp, r8, #32
 8025e84:	44bc      	add	ip, r7
 8025e86:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 8025e8a:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8025e8e:	0a3f      	lsrs	r7, r7, #8
 8025e90:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8025e94:	ea4c 0707 	orr.w	r7, ip, r7
 8025e98:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8025e9c:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8025ea0:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8025ea4:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8025ea8:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8025eac:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8025eb0:	ea4c 0909 	orr.w	r9, ip, r9
 8025eb4:	ea4a 0707 	orr.w	r7, sl, r7
 8025eb8:	2d00      	cmp	r5, #0
 8025eba:	f000 80ca 	beq.w	8026052 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ba>
 8025ebe:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8025ec2:	3901      	subs	r1, #1
 8025ec4:	0049      	lsls	r1, r1, #1
 8025ec6:	3102      	adds	r1, #2
 8025ec8:	eb00 0c01 	add.w	ip, r0, r1
 8025ecc:	5a41      	ldrh	r1, [r0, r1]
 8025ece:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8025ed0:	28ff      	cmp	r0, #255	; 0xff
 8025ed2:	d019      	beq.n	8025f08 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x670>
 8025ed4:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 8025ed8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8025eda:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8025ede:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8025ee2:	fb04 fa01 	mul.w	sl, r4, r1
 8025ee6:	fb08 f800 	mul.w	r8, r8, r0
 8025eea:	f10a 0020 	add.w	r0, sl, #32
 8025eee:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 8025ef2:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8025ef6:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8025efa:	4441      	add	r1, r8
 8025efc:	0a00      	lsrs	r0, r0, #8
 8025efe:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 8025f02:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8025f06:	4301      	orrs	r1, r0
 8025f08:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8025f0a:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 8025f0e:	2cff      	cmp	r4, #255	; 0xff
 8025f10:	d01a      	beq.n	8025f48 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b0>
 8025f12:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 8025f16:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8025f1a:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8025f1e:	fb04 fa00 	mul.w	sl, r4, r0
 8025f22:	fb08 f80c 	mul.w	r8, r8, ip
 8025f26:	f10a 0c20 	add.w	ip, sl, #32
 8025f2a:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 8025f2e:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8025f32:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 8025f36:	4440      	add	r0, r8
 8025f38:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025f3c:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 8025f40:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8025f44:	ea40 000c 	orr.w	r0, r0, ip
 8025f48:	fb15 fc02 	smulbb	ip, r5, r2
 8025f4c:	f1c5 0810 	rsb	r8, r5, #16
 8025f50:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8025f54:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8025f58:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8025f5c:	eba8 0802 	sub.w	r8, r8, r2
 8025f60:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8025f64:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8025f68:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 8025f6c:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8025f70:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 8025f74:	ea4a 0101 	orr.w	r1, sl, r1
 8025f78:	437a      	muls	r2, r7
 8025f7a:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 8025f7e:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8025f82:	fb09 2208 	mla	r2, r9, r8, r2
 8025f86:	ea4b 0000 	orr.w	r0, fp, r0
 8025f8a:	fb05 2201 	mla	r2, r5, r1, r2
 8025f8e:	fb0c 2200 	mla	r2, ip, r0, r2
 8025f92:	0d57      	lsrs	r7, r2, #21
 8025f94:	0952      	lsrs	r2, r2, #5
 8025f96:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8025f9a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8025f9e:	433a      	orrs	r2, r7
 8025fa0:	2bff      	cmp	r3, #255	; 0xff
 8025fa2:	b292      	uxth	r2, r2
 8025fa4:	d102      	bne.n	8025fac <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
 8025fa6:	9912      	ldr	r1, [sp, #72]	; 0x48
 8025fa8:	29ff      	cmp	r1, #255	; 0xff
 8025faa:	d063      	beq.n	8026074 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7dc>
 8025fac:	980a      	ldr	r0, [sp, #40]	; 0x28
 8025fae:	1215      	asrs	r5, r2, #8
 8025fb0:	f8be 1000 	ldrh.w	r1, [lr]
 8025fb4:	4343      	muls	r3, r0
 8025fb6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8025fb8:	10cf      	asrs	r7, r1, #3
 8025fba:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8025fbe:	1c58      	adds	r0, r3, #1
 8025fc0:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8025fc4:	eb00 2323 	add.w	r3, r0, r3, asr #8
 8025fc8:	1208      	asrs	r0, r1, #8
 8025fca:	ea6f 2323 	mvn.w	r3, r3, asr #8
 8025fce:	00c9      	lsls	r1, r1, #3
 8025fd0:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8025fd4:	b2db      	uxtb	r3, r3
 8025fd6:	b2c9      	uxtb	r1, r1
 8025fd8:	fb10 f003 	smulbb	r0, r0, r3
 8025fdc:	fb11 f103 	smulbb	r1, r1, r3
 8025fe0:	fb05 0504 	mla	r5, r5, r4, r0
 8025fe4:	10d0      	asrs	r0, r2, #3
 8025fe6:	fb17 f703 	smulbb	r7, r7, r3
 8025fea:	00d2      	lsls	r2, r2, #3
 8025fec:	b2ad      	uxth	r5, r5
 8025fee:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8025ff2:	b2d2      	uxtb	r2, r2
 8025ff4:	fb00 7004 	mla	r0, r0, r4, r7
 8025ff8:	1c6b      	adds	r3, r5, #1
 8025ffa:	fb02 1204 	mla	r2, r2, r4, r1
 8025ffe:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8026002:	b292      	uxth	r2, r2
 8026004:	b280      	uxth	r0, r0
 8026006:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 802600a:	1c57      	adds	r7, r2, #1
 802600c:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8026010:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8026014:	433d      	orrs	r5, r7
 8026016:	1c47      	adds	r7, r0, #1
 8026018:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 802601c:	097f      	lsrs	r7, r7, #5
 802601e:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8026022:	433d      	orrs	r5, r7
 8026024:	f8ae 5000 	strh.w	r5, [lr]
 8026028:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802602a:	f10e 0e02 	add.w	lr, lr, #2
 802602e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8026030:	4413      	add	r3, r2
 8026032:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8026034:	9321      	str	r3, [sp, #132]	; 0x84
 8026036:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8026038:	441a      	add	r2, r3
 802603a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802603c:	3b01      	subs	r3, #1
 802603e:	9222      	str	r2, [sp, #136]	; 0x88
 8026040:	9313      	str	r3, [sp, #76]	; 0x4c
 8026042:	e61c      	b.n	8025c7e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 8026044:	fb08 f000 	mul.w	r0, r8, r0
 8026048:	fb09 0303 	mla	r3, r9, r3, r0
 802604c:	e6dc      	b.n	8025e08 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x570>
 802604e:	46b9      	mov	r9, r7
 8026050:	e704      	b.n	8025e5c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c4>
 8026052:	f1c2 0110 	rsb	r1, r2, #16
 8026056:	437a      	muls	r2, r7
 8026058:	fb09 2901 	mla	r9, r9, r1, r2
 802605c:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8026060:	ea4f 5059 	mov.w	r0, r9, lsr #21
 8026064:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8026068:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802606c:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8026070:	4302      	orrs	r2, r0
 8026072:	e795      	b.n	8025fa0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x708>
 8026074:	f8ae 2000 	strh.w	r2, [lr]
 8026078:	e7d6      	b.n	8026028 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x790>
 802607a:	b017      	add	sp, #92	; 0x5c
 802607c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08026080 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 8026080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026084:	b085      	sub	sp, #20
 8026086:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
 802608a:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 802608e:	2800      	cmp	r0, #0
 8026090:	9103      	str	r1, [sp, #12]
 8026092:	fb00 7406 	mla	r4, r0, r6, r7
 8026096:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
 802609a:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 802609e:	eb03 0544 	add.w	r5, r3, r4, lsl #1
 80260a2:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 80260a6:	eb02 0904 	add.w	r9, r2, r4
 80260aa:	9501      	str	r5, [sp, #4]
 80260ac:	f2c0 8141 	blt.w	8026332 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 80260b0:	4583      	cmp	fp, r0
 80260b2:	f340 813e 	ble.w	8026332 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 80260b6:	2f00      	cmp	r7, #0
 80260b8:	f2c0 8137 	blt.w	802632a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 80260bc:	42be      	cmp	r6, r7
 80260be:	f340 8134 	ble.w	802632a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 80260c2:	f812 c004 	ldrb.w	ip, [r2, r4]
 80260c6:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80260ca:	f64f 041f 	movw	r4, #63519	; 0xf81f
 80260ce:	ea4f 02ec 	mov.w	r2, ip, asr #3
 80260d2:	f423 65fc 	bic.w	r5, r3, #2016	; 0x7e0
 80260d6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80260da:	4355      	muls	r5, r2
 80260dc:	fb0c f203 	mul.w	r2, ip, r3
 80260e0:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 80260e4:	f605 0501 	addw	r5, r5, #2049	; 0x801
 80260e8:	441d      	add	r5, r3
 80260ea:	f102 0320 	add.w	r3, r2, #32
 80260ee:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80260f2:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 80260f6:	0a1b      	lsrs	r3, r3, #8
 80260f8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80260fc:	431c      	orrs	r4, r3
 80260fe:	1c7b      	adds	r3, r7, #1
 8026100:	f100 811c 	bmi.w	802633c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 8026104:	429e      	cmp	r6, r3
 8026106:	f340 8119 	ble.w	802633c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 802610a:	2900      	cmp	r1, #0
 802610c:	f000 8119 	beq.w	8026342 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c2>
 8026110:	9a01      	ldr	r2, [sp, #4]
 8026112:	f899 3001 	ldrb.w	r3, [r9, #1]
 8026116:	8855      	ldrh	r5, [r2, #2]
 8026118:	ea4f 08e3 	mov.w	r8, r3, asr #3
 802611c:	f425 62fc 	bic.w	r2, r5, #2016	; 0x7e0
 8026120:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8026124:	fb08 f802 	mul.w	r8, r8, r2
 8026128:	f64f 021f 	movw	r2, #63519	; 0xf81f
 802612c:	435d      	muls	r5, r3
 802612e:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 8026132:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8026136:	44d0      	add	r8, sl
 8026138:	f105 0a20 	add.w	sl, r5, #32
 802613c:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 8026140:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 8026144:	0a2d      	lsrs	r5, r5, #8
 8026146:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 802614a:	432a      	orrs	r2, r5
 802614c:	3001      	adds	r0, #1
 802614e:	f100 80fe 	bmi.w	802634e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 8026152:	4583      	cmp	fp, r0
 8026154:	f340 80fb 	ble.w	802634e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 8026158:	f1be 0f00 	cmp.w	lr, #0
 802615c:	f000 80fc 	beq.w	8026358 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2d8>
 8026160:	2f00      	cmp	r7, #0
 8026162:	f2c0 80f1 	blt.w	8026348 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 8026166:	42be      	cmp	r6, r7
 8026168:	f340 80ee 	ble.w	8026348 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 802616c:	9801      	ldr	r0, [sp, #4]
 802616e:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8026172:	f819 5006 	ldrb.w	r5, [r9, r6]
 8026176:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 802617a:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 802617e:	f428 60fc 	bic.w	r0, r8, #2016	; 0x7e0
 8026182:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8026186:	fb0a fa00 	mul.w	sl, sl, r0
 802618a:	fb05 f808 	mul.w	r8, r5, r8
 802618e:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 8026192:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 8026196:	4482      	add	sl, r0
 8026198:	f108 0020 	add.w	r0, r8, #32
 802619c:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 80261a0:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 80261a4:	0a00      	lsrs	r0, r0, #8
 80261a6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80261aa:	ea4b 0b00 	orr.w	fp, fp, r0
 80261ae:	3701      	adds	r7, #1
 80261b0:	f100 80d7 	bmi.w	8026362 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 80261b4:	42be      	cmp	r6, r7
 80261b6:	f340 80d4 	ble.w	8026362 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 80261ba:	2900      	cmp	r1, #0
 80261bc:	f000 80d4 	beq.w	8026368 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e8>
 80261c0:	3601      	adds	r6, #1
 80261c2:	9801      	ldr	r0, [sp, #4]
 80261c4:	f819 7006 	ldrb.w	r7, [r9, r6]
 80261c8:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 80261cc:	ea4f 09e7 	mov.w	r9, r7, asr #3
 80261d0:	f420 66fc 	bic.w	r6, r0, #2016	; 0x7e0
 80261d4:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80261d8:	fb09 f906 	mul.w	r9, r9, r6
 80261dc:	fb07 f800 	mul.w	r8, r7, r0
 80261e0:	f64f 001f 	movw	r0, #63519	; 0xf81f
 80261e4:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 80261e8:	f609 0901 	addw	r9, r9, #2049	; 0x801
 80261ec:	44d1      	add	r9, sl
 80261ee:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 80261f2:	f108 0020 	add.w	r0, r8, #32
 80261f6:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 80261fa:	0a00      	lsrs	r0, r0, #8
 80261fc:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8026200:	4330      	orrs	r0, r6
 8026202:	b28e      	uxth	r6, r1
 8026204:	fa1f f98e 	uxth.w	r9, lr
 8026208:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 802620c:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 8026210:	fb06 f809 	mul.w	r8, r6, r9
 8026214:	0136      	lsls	r6, r6, #4
 8026216:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802621a:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 802621e:	9601      	str	r6, [sp, #4]
 8026220:	ea4a 0404 	orr.w	r4, sl, r4
 8026224:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8026228:	fa1f f689 	uxth.w	r6, r9
 802622c:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8026230:	fb11 f90e 	smulbb	r9, r1, lr
 8026234:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8026238:	9602      	str	r6, [sp, #8]
 802623a:	4626      	mov	r6, r4
 802623c:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 8026240:	f1ce 0410 	rsb	r4, lr, #16
 8026244:	ea4a 0202 	orr.w	r2, sl, r2
 8026248:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 802624c:	1a64      	subs	r4, r4, r1
 802624e:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 8026252:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8026256:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802625a:	434a      	muls	r2, r1
 802625c:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 8026260:	ea4a 0000 	orr.w	r0, sl, r0
 8026264:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 8026268:	fb04 2406 	mla	r4, r4, r6, r2
 802626c:	9903      	ldr	r1, [sp, #12]
 802626e:	fb09 4200 	mla	r2, r9, r0, r4
 8026272:	ea4f 440b 	mov.w	r4, fp, lsl #16
 8026276:	9801      	ldr	r0, [sp, #4]
 8026278:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 802627c:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8026280:	8809      	ldrh	r1, [r1, #0]
 8026282:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8026286:	ea44 0b0b 	orr.w	fp, r4, fp
 802628a:	9c02      	ldr	r4, [sp, #8]
 802628c:	1b00      	subs	r0, r0, r4
 802628e:	9c01      	ldr	r4, [sp, #4]
 8026290:	fb0e 2e0b 	mla	lr, lr, fp, r2
 8026294:	eba4 0608 	sub.w	r6, r4, r8
 8026298:	b280      	uxth	r0, r0
 802629a:	ea4f 525e 	mov.w	r2, lr, lsr #21
 802629e:	b2b6      	uxth	r6, r6
 80262a0:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80262a4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80262a8:	4373      	muls	r3, r6
 80262aa:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 80262ae:	fb0c 3300 	mla	r3, ip, r0, r3
 80262b2:	9802      	ldr	r0, [sp, #8]
 80262b4:	ea42 0e0e 	orr.w	lr, r2, lr
 80262b8:	fb00 3505 	mla	r5, r0, r5, r3
 80262bc:	120b      	asrs	r3, r1, #8
 80262be:	10c8      	asrs	r0, r1, #3
 80262c0:	fb08 5707 	mla	r7, r8, r7, r5
 80262c4:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80262c8:	00c9      	lsls	r1, r1, #3
 80262ca:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80262ce:	ea6f 2727 	mvn.w	r7, r7, asr #8
 80262d2:	fa1f f28e 	uxth.w	r2, lr
 80262d6:	b2c9      	uxtb	r1, r1
 80262d8:	b2ff      	uxtb	r7, r7
 80262da:	437b      	muls	r3, r7
 80262dc:	4378      	muls	r0, r7
 80262de:	434f      	muls	r7, r1
 80262e0:	1c59      	adds	r1, r3, #1
 80262e2:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80262e6:	1213      	asrs	r3, r2, #8
 80262e8:	f023 0307 	bic.w	r3, r3, #7
 80262ec:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80262f0:	1c41      	adds	r1, r0, #1
 80262f2:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 80262f6:	10d1      	asrs	r1, r2, #3
 80262f8:	021b      	lsls	r3, r3, #8
 80262fa:	f021 0103 	bic.w	r1, r1, #3
 80262fe:	00d2      	lsls	r2, r2, #3
 8026300:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8026304:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8026308:	00c9      	lsls	r1, r1, #3
 802630a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802630e:	430b      	orrs	r3, r1
 8026310:	1c79      	adds	r1, r7, #1
 8026312:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 8026316:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 802631a:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802631e:	431a      	orrs	r2, r3
 8026320:	9b03      	ldr	r3, [sp, #12]
 8026322:	801a      	strh	r2, [r3, #0]
 8026324:	b005      	add	sp, #20
 8026326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802632a:	f04f 0c00 	mov.w	ip, #0
 802632e:	4664      	mov	r4, ip
 8026330:	e6e5      	b.n	80260fe <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7e>
 8026332:	2300      	movs	r3, #0
 8026334:	469c      	mov	ip, r3
 8026336:	461a      	mov	r2, r3
 8026338:	461c      	mov	r4, r3
 802633a:	e707      	b.n	802614c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 802633c:	2300      	movs	r3, #0
 802633e:	461a      	mov	r2, r3
 8026340:	e704      	b.n	802614c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 8026342:	460b      	mov	r3, r1
 8026344:	460a      	mov	r2, r1
 8026346:	e701      	b.n	802614c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 8026348:	2500      	movs	r5, #0
 802634a:	46ab      	mov	fp, r5
 802634c:	e72f      	b.n	80261ae <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x12e>
 802634e:	2700      	movs	r7, #0
 8026350:	463d      	mov	r5, r7
 8026352:	4638      	mov	r0, r7
 8026354:	46bb      	mov	fp, r7
 8026356:	e754      	b.n	8026202 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 8026358:	4677      	mov	r7, lr
 802635a:	4675      	mov	r5, lr
 802635c:	4670      	mov	r0, lr
 802635e:	46f3      	mov	fp, lr
 8026360:	e74f      	b.n	8026202 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 8026362:	2700      	movs	r7, #0
 8026364:	4638      	mov	r0, r7
 8026366:	e74c      	b.n	8026202 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 8026368:	460f      	mov	r7, r1
 802636a:	4608      	mov	r0, r1
 802636c:	e749      	b.n	8026202 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
	...

08026370 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026374:	b093      	sub	sp, #76	; 0x4c
 8026376:	9210      	str	r2, [sp, #64]	; 0x40
 8026378:	9a21      	ldr	r2, [sp, #132]	; 0x84
 802637a:	9011      	str	r0, [sp, #68]	; 0x44
 802637c:	910e      	str	r1, [sp, #56]	; 0x38
 802637e:	6850      	ldr	r0, [r2, #4]
 8026380:	9306      	str	r3, [sp, #24]
 8026382:	6812      	ldr	r2, [r2, #0]
 8026384:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 8026388:	fb00 1303 	mla	r3, r0, r3, r1
 802638c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8026390:	9307      	str	r3, [sp, #28]
 8026392:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8026394:	681b      	ldr	r3, [r3, #0]
 8026396:	9308      	str	r3, [sp, #32]
 8026398:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802639a:	685b      	ldr	r3, [r3, #4]
 802639c:	9309      	str	r3, [sp, #36]	; 0x24
 802639e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80263a0:	2b00      	cmp	r3, #0
 80263a2:	dc03      	bgt.n	80263ac <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80263a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80263a6:	2b00      	cmp	r3, #0
 80263a8:	f340 83b6 	ble.w	8026b18 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
 80263ac:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80263ae:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80263b2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80263b6:	1e48      	subs	r0, r1, #1
 80263b8:	1e55      	subs	r5, r2, #1
 80263ba:	9b06      	ldr	r3, [sp, #24]
 80263bc:	2b00      	cmp	r3, #0
 80263be:	f340 8165 	ble.w	802668c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 80263c2:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80263c4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80263c6:	1436      	asrs	r6, r6, #16
 80263c8:	ea4f 4323 	mov.w	r3, r3, asr #16
 80263cc:	d406      	bmi.n	80263dc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80263ce:	4286      	cmp	r6, r0
 80263d0:	da04      	bge.n	80263dc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80263d2:	2b00      	cmp	r3, #0
 80263d4:	db02      	blt.n	80263dc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80263d6:	42ab      	cmp	r3, r5
 80263d8:	f2c0 8159 	blt.w	802668e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 80263dc:	3601      	adds	r6, #1
 80263de:	f100 8146 	bmi.w	802666e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 80263e2:	42b1      	cmp	r1, r6
 80263e4:	f2c0 8143 	blt.w	802666e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 80263e8:	3301      	adds	r3, #1
 80263ea:	f100 8140 	bmi.w	802666e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 80263ee:	429a      	cmp	r2, r3
 80263f0:	f2c0 813d 	blt.w	802666e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 80263f4:	9b06      	ldr	r3, [sp, #24]
 80263f6:	f64f 061f 	movw	r6, #63519	; 0xf81f
 80263fa:	9f07      	ldr	r7, [sp, #28]
 80263fc:	930f      	str	r3, [sp, #60]	; 0x3c
 80263fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8026400:	2b00      	cmp	r3, #0
 8026402:	f340 8166 	ble.w	80266d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8026406:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8026408:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 802640a:	1418      	asrs	r0, r3, #16
 802640c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802640e:	142d      	asrs	r5, r5, #16
 8026410:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8026414:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8026416:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 802641a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802641c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8026420:	f100 81f0 	bmi.w	8026804 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 8026424:	f102 3eff 	add.w	lr, r2, #4294967295
 8026428:	4575      	cmp	r5, lr
 802642a:	f280 81eb 	bge.w	8026804 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 802642e:	2800      	cmp	r0, #0
 8026430:	f2c0 81e8 	blt.w	8026804 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 8026434:	f103 3eff 	add.w	lr, r3, #4294967295
 8026438:	4570      	cmp	r0, lr
 802643a:	f280 81e3 	bge.w	8026804 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 802643e:	b212      	sxth	r2, r2
 8026440:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026442:	fa1f fe81 	uxth.w	lr, r1
 8026446:	fb00 5002 	mla	r0, r0, r2, r5
 802644a:	ea4f 150e 	mov.w	r5, lr, lsl #4
 802644e:	eb03 0a00 	add.w	sl, r3, r0
 8026452:	f813 9000 	ldrb.w	r9, [r3, r0]
 8026456:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 802645a:	f89a 8001 	ldrb.w	r8, [sl, #1]
 802645e:	b29b      	uxth	r3, r3
 8026460:	f1bc 0f00 	cmp.w	ip, #0
 8026464:	f000 817b 	beq.w	802675e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8026468:	f81a 4002 	ldrb.w	r4, [sl, r2]
 802646c:	eb0a 0b02 	add.w	fp, sl, r2
 8026470:	fa1f fa8c 	uxth.w	sl, ip
 8026474:	940a      	str	r4, [sp, #40]	; 0x28
 8026476:	fb0a fe0e 	mul.w	lr, sl, lr
 802647a:	f89b 4001 	ldrb.w	r4, [fp, #1]
 802647e:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 8026482:	eba5 050e 	sub.w	r5, r5, lr
 8026486:	940b      	str	r4, [sp, #44]	; 0x2c
 8026488:	fa1f fa8a 	uxth.w	sl, sl
 802648c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802648e:	b2ad      	uxth	r5, r5
 8026490:	eba3 030a 	sub.w	r3, r3, sl
 8026494:	fb08 f505 	mul.w	r5, r8, r5
 8026498:	b29b      	uxth	r3, r3
 802649a:	fb09 5303 	mla	r3, r9, r3, r5
 802649e:	fb0a 3304 	mla	r3, sl, r4, r3
 80264a2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80264a4:	fb0e 3304 	mla	r3, lr, r4, r3
 80264a8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80264ac:	2b00      	cmp	r3, #0
 80264ae:	f000 80d1 	beq.w	8026654 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 80264b2:	9c08      	ldr	r4, [sp, #32]
 80264b4:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80264b8:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 80264bc:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 80264c0:	f000 8152 	beq.w	8026768 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 80264c4:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 80264c8:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 80264cc:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80264d0:	fb0a fe0e 	mul.w	lr, sl, lr
 80264d4:	fb09 f000 	mul.w	r0, r9, r0
 80264d8:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 80264dc:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 80264e0:	f100 0b20 	add.w	fp, r0, #32
 80264e4:	44ce      	add	lr, r9
 80264e6:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 80264ea:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 80264ee:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80264f2:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80264f6:	ea4e 0909 	orr.w	r9, lr, r9
 80264fa:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80264fe:	8868      	ldrh	r0, [r5, #2]
 8026500:	d019      	beq.n	8026536 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8026502:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8026506:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 802650a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802650e:	fb0a fe0e 	mul.w	lr, sl, lr
 8026512:	fb08 f800 	mul.w	r8, r8, r0
 8026516:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 802651a:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 802651e:	f108 0b20 	add.w	fp, r8, #32
 8026522:	4486      	add	lr, r0
 8026524:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8026528:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 802652c:	0a00      	lsrs	r0, r0, #8
 802652e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8026532:	ea4e 0000 	orr.w	r0, lr, r0
 8026536:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 802653a:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 802653e:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8026542:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8026546:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 802654a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802654e:	ea4e 0909 	orr.w	r9, lr, r9
 8026552:	ea4a 0000 	orr.w	r0, sl, r0
 8026556:	f1bc 0f00 	cmp.w	ip, #0
 802655a:	f000 8107 	beq.w	802676c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fc>
 802655e:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8026562:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8026564:	3a01      	subs	r2, #1
 8026566:	2cff      	cmp	r4, #255	; 0xff
 8026568:	ea4f 0242 	mov.w	r2, r2, lsl #1
 802656c:	f102 0202 	add.w	r2, r2, #2
 8026570:	eb05 0e02 	add.w	lr, r5, r2
 8026574:	5aaa      	ldrh	r2, [r5, r2]
 8026576:	d018      	beq.n	80265aa <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8026578:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 802657c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8026580:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8026584:	fb04 fa02 	mul.w	sl, r4, r2
 8026588:	fb08 f805 	mul.w	r8, r8, r5
 802658c:	f10a 0520 	add.w	r5, sl, #32
 8026590:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 8026594:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8026598:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 802659c:	4442      	add	r2, r8
 802659e:	0a2d      	lsrs	r5, r5, #8
 80265a0:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 80265a4:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80265a8:	432a      	orrs	r2, r5
 80265aa:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80265ac:	f8be 5002 	ldrh.w	r5, [lr, #2]
 80265b0:	2cff      	cmp	r4, #255	; 0xff
 80265b2:	d01a      	beq.n	80265ea <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 80265b4:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 80265b8:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80265bc:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80265c0:	fb04 fa05 	mul.w	sl, r4, r5
 80265c4:	fb08 f80e 	mul.w	r8, r8, lr
 80265c8:	f10a 0e20 	add.w	lr, sl, #32
 80265cc:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 80265d0:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80265d4:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 80265d8:	4445      	add	r5, r8
 80265da:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80265de:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 80265e2:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 80265e6:	ea45 050e 	orr.w	r5, r5, lr
 80265ea:	fb1c fe01 	smulbb	lr, ip, r1
 80265ee:	f1cc 0810 	rsb	r8, ip, #16
 80265f2:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 80265f6:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80265fa:	ea4f 0eee 	mov.w	lr, lr, asr #3
 80265fe:	eba8 0801 	sub.w	r8, r8, r1
 8026602:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 8026606:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802660a:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 802660e:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8026612:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 8026616:	ea4a 0202 	orr.w	r2, sl, r2
 802661a:	4341      	muls	r1, r0
 802661c:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8026620:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8026624:	fb09 1108 	mla	r1, r9, r8, r1
 8026628:	ea4b 0505 	orr.w	r5, fp, r5
 802662c:	fb0c 1102 	mla	r1, ip, r2, r1
 8026630:	fb0e 1e05 	mla	lr, lr, r5, r1
 8026634:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8026638:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 802663c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8026640:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8026644:	ea42 0e0e 	orr.w	lr, r2, lr
 8026648:	fa1f f28e 	uxth.w	r2, lr
 802664c:	2bff      	cmp	r3, #255	; 0xff
 802664e:	f040 80a1 	bne.w	8026794 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 8026652:	803a      	strh	r2, [r7, #0]
 8026654:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8026656:	3702      	adds	r7, #2
 8026658:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 802665a:	4413      	add	r3, r2
 802665c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 802665e:	931d      	str	r3, [sp, #116]	; 0x74
 8026660:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8026662:	441a      	add	r2, r3
 8026664:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8026666:	3b01      	subs	r3, #1
 8026668:	921e      	str	r2, [sp, #120]	; 0x78
 802666a:	930f      	str	r3, [sp, #60]	; 0x3c
 802666c:	e6c7      	b.n	80263fe <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802666e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8026670:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 8026672:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8026674:	4433      	add	r3, r6
 8026676:	931d      	str	r3, [sp, #116]	; 0x74
 8026678:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802667a:	441c      	add	r4, r3
 802667c:	9b06      	ldr	r3, [sp, #24]
 802667e:	3b01      	subs	r3, #1
 8026680:	941e      	str	r4, [sp, #120]	; 0x78
 8026682:	9306      	str	r3, [sp, #24]
 8026684:	9b07      	ldr	r3, [sp, #28]
 8026686:	3302      	adds	r3, #2
 8026688:	9307      	str	r3, [sp, #28]
 802668a:	e696      	b.n	80263ba <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 802668c:	d028      	beq.n	80266e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 802668e:	9b06      	ldr	r3, [sp, #24]
 8026690:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8026692:	3b01      	subs	r3, #1
 8026694:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8026696:	fb00 5003 	mla	r0, r0, r3, r5
 802669a:	1400      	asrs	r0, r0, #16
 802669c:	f53f aeaa 	bmi.w	80263f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80266a0:	3901      	subs	r1, #1
 80266a2:	4288      	cmp	r0, r1
 80266a4:	f6bf aea6 	bge.w	80263f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80266a8:	9920      	ldr	r1, [sp, #128]	; 0x80
 80266aa:	981e      	ldr	r0, [sp, #120]	; 0x78
 80266ac:	fb01 0303 	mla	r3, r1, r3, r0
 80266b0:	141b      	asrs	r3, r3, #16
 80266b2:	f53f ae9f 	bmi.w	80263f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80266b6:	3a01      	subs	r2, #1
 80266b8:	4293      	cmp	r3, r2
 80266ba:	f6bf ae9b 	bge.w	80263f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80266be:	9b06      	ldr	r3, [sp, #24]
 80266c0:	f64f 061f 	movw	r6, #63519	; 0xf81f
 80266c4:	f8dd e01c 	ldr.w	lr, [sp, #28]
 80266c8:	930f      	str	r3, [sp, #60]	; 0x3c
 80266ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80266cc:	2b00      	cmp	r3, #0
 80266ce:	f300 80b6 	bgt.w	802683e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
 80266d2:	9b06      	ldr	r3, [sp, #24]
 80266d4:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80266d8:	9b07      	ldr	r3, [sp, #28]
 80266da:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 80266de:	9307      	str	r3, [sp, #28]
 80266e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80266e2:	2b00      	cmp	r3, #0
 80266e4:	f340 8218 	ble.w	8026b18 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
 80266e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80266ec:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80266ee:	ee30 0a04 	vadd.f32	s0, s0, s8
 80266f2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80266f6:	eef0 6a62 	vmov.f32	s13, s5
 80266fa:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80266fe:	ee31 1a05 	vadd.f32	s2, s2, s10
 8026702:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026706:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
 802670a:	eef0 6a43 	vmov.f32	s13, s6
 802670e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026712:	edcd 6a1e 	vstr	s13, [sp, #120]	; 0x78
 8026716:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802671a:	ee61 7a27 	vmul.f32	s15, s2, s15
 802671e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8026722:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8026726:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802672a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802672e:	ee12 2a90 	vmov	r2, s5
 8026732:	eef0 2a47 	vmov.f32	s5, s14
 8026736:	fb92 f3f3 	sdiv	r3, r2, r3
 802673a:	ee13 2a10 	vmov	r2, s6
 802673e:	931f      	str	r3, [sp, #124]	; 0x7c
 8026740:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8026742:	eeb0 3a67 	vmov.f32	s6, s15
 8026746:	fb92 f3f3 	sdiv	r3, r2, r3
 802674a:	9320      	str	r3, [sp, #128]	; 0x80
 802674c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802674e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8026750:	3b01      	subs	r3, #1
 8026752:	930e      	str	r3, [sp, #56]	; 0x38
 8026754:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8026756:	bf08      	it	eq
 8026758:	4613      	moveq	r3, r2
 802675a:	9306      	str	r3, [sp, #24]
 802675c:	e61f      	b.n	802639e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 802675e:	fb08 f505 	mul.w	r5, r8, r5
 8026762:	fb09 5303 	mla	r3, r9, r3, r5
 8026766:	e69f      	b.n	80264a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8026768:	4681      	mov	r9, r0
 802676a:	e6c6      	b.n	80264fa <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 802676c:	f1c1 0210 	rsb	r2, r1, #16
 8026770:	4341      	muls	r1, r0
 8026772:	fb09 1902 	mla	r9, r9, r2, r1
 8026776:	ea4f 0949 	mov.w	r9, r9, lsl #1
 802677a:	ea4f 5259 	mov.w	r2, r9, lsr #21
 802677e:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8026782:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8026786:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 802678a:	ea42 0909 	orr.w	r9, r2, r9
 802678e:	fa1f f289 	uxth.w	r2, r9
 8026792:	e75b      	b.n	802664c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>
 8026794:	f8b7 c000 	ldrh.w	ip, [r7]
 8026798:	43db      	mvns	r3, r3
 802679a:	ea4f 202c 	mov.w	r0, ip, asr #8
 802679e:	fa5f fe83 	uxtb.w	lr, r3
 80267a2:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80267a6:	ea4f 05ec 	mov.w	r5, ip, asr #3
 80267aa:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 80267ae:	fb00 f00e 	mul.w	r0, r0, lr
 80267b2:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 80267b6:	b2db      	uxtb	r3, r3
 80267b8:	1c41      	adds	r1, r0, #1
 80267ba:	fb05 f50e 	mul.w	r5, r5, lr
 80267be:	fb03 f30e 	mul.w	r3, r3, lr
 80267c2:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 80267c6:	1211      	asrs	r1, r2, #8
 80267c8:	f021 0107 	bic.w	r1, r1, #7
 80267cc:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 80267d0:	48d3      	ldr	r0, [pc, #844]	; (8026b20 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b0>)
 80267d2:	b2c9      	uxtb	r1, r1
 80267d4:	ea00 2001 	and.w	r0, r0, r1, lsl #8
 80267d8:	1c69      	adds	r1, r5, #1
 80267da:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 80267de:	10d1      	asrs	r1, r2, #3
 80267e0:	00d2      	lsls	r2, r2, #3
 80267e2:	f021 0103 	bic.w	r1, r1, #3
 80267e6:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 80267ea:	00c9      	lsls	r1, r1, #3
 80267ec:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80267f0:	4301      	orrs	r1, r0
 80267f2:	1c58      	adds	r0, r3, #1
 80267f4:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 80267f8:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80267fc:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8026800:	430a      	orrs	r2, r1
 8026802:	e726      	b.n	8026652 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e2>
 8026804:	f115 0e01 	adds.w	lr, r5, #1
 8026808:	f53f af24 	bmi.w	8026654 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 802680c:	4572      	cmp	r2, lr
 802680e:	f6ff af21 	blt.w	8026654 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 8026812:	f110 0e01 	adds.w	lr, r0, #1
 8026816:	f53f af1d 	bmi.w	8026654 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 802681a:	4573      	cmp	r3, lr
 802681c:	f6ff af1a 	blt.w	8026654 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 8026820:	b21b      	sxth	r3, r3
 8026822:	b212      	sxth	r2, r2
 8026824:	9301      	str	r3, [sp, #4]
 8026826:	9200      	str	r2, [sp, #0]
 8026828:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 802682c:	e9cd 5002 	strd	r5, r0, [sp, #8]
 8026830:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 8026834:	4639      	mov	r1, r7
 8026836:	9811      	ldr	r0, [sp, #68]	; 0x44
 8026838:	f7ff fc22 	bl	8026080 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 802683c:	e70a      	b.n	8026654 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 802683e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8026840:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8026844:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8026846:	f3c3 3503 	ubfx	r5, r3, #12, #4
 802684a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802684c:	fa1f fc82 	uxth.w	ip, r2
 8026850:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026854:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8026856:	ea4f 100c 	mov.w	r0, ip, lsl #4
 802685a:	141f      	asrs	r7, r3, #16
 802685c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802685e:	141b      	asrs	r3, r3, #16
 8026860:	fb01 3707 	mla	r7, r1, r7, r3
 8026864:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026866:	eb03 0a07 	add.w	sl, r3, r7
 802686a:	f813 9007 	ldrb.w	r9, [r3, r7]
 802686e:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8026872:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8026876:	b29b      	uxth	r3, r3
 8026878:	2d00      	cmp	r5, #0
 802687a:	f000 80fe 	beq.w	8026a7a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70a>
 802687e:	f81a 4001 	ldrb.w	r4, [sl, r1]
 8026882:	eb0a 0b01 	add.w	fp, sl, r1
 8026886:	fa1f fa85 	uxth.w	sl, r5
 802688a:	940c      	str	r4, [sp, #48]	; 0x30
 802688c:	fb0a fc0c 	mul.w	ip, sl, ip
 8026890:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8026894:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 8026898:	eba0 000c 	sub.w	r0, r0, ip
 802689c:	940d      	str	r4, [sp, #52]	; 0x34
 802689e:	fa1f fa8a 	uxth.w	sl, sl
 80268a2:	b280      	uxth	r0, r0
 80268a4:	eba3 030a 	sub.w	r3, r3, sl
 80268a8:	fb08 f000 	mul.w	r0, r8, r0
 80268ac:	b29b      	uxth	r3, r3
 80268ae:	fb09 0303 	mla	r3, r9, r3, r0
 80268b2:	980c      	ldr	r0, [sp, #48]	; 0x30
 80268b4:	fb0a 3300 	mla	r3, sl, r0, r3
 80268b8:	fb0c 3304 	mla	r3, ip, r4, r3
 80268bc:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80268c0:	2b00      	cmp	r3, #0
 80268c2:	f000 80cc 	beq.w	8026a5e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ee>
 80268c6:	9808      	ldr	r0, [sp, #32]
 80268c8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80268cc:	9c08      	ldr	r4, [sp, #32]
 80268ce:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 80268d2:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 80268d6:	f000 80d5 	beq.w	8026a84 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
 80268da:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 80268de:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 80268e2:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80268e6:	fb0a fc0c 	mul.w	ip, sl, ip
 80268ea:	fb09 f707 	mul.w	r7, r9, r7
 80268ee:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 80268f2:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 80268f6:	f107 0b20 	add.w	fp, r7, #32
 80268fa:	44cc      	add	ip, r9
 80268fc:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 8026900:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8026904:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8026908:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 802690c:	ea4c 0909 	orr.w	r9, ip, r9
 8026910:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8026914:	8847      	ldrh	r7, [r0, #2]
 8026916:	d019      	beq.n	802694c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5dc>
 8026918:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 802691c:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8026920:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8026924:	fb0a fc0c 	mul.w	ip, sl, ip
 8026928:	fb08 f807 	mul.w	r8, r8, r7
 802692c:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 8026930:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8026934:	f108 0b20 	add.w	fp, r8, #32
 8026938:	44bc      	add	ip, r7
 802693a:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 802693e:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8026942:	0a3f      	lsrs	r7, r7, #8
 8026944:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8026948:	ea4c 0707 	orr.w	r7, ip, r7
 802694c:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8026950:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8026954:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8026958:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 802695c:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8026960:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8026964:	ea4c 0909 	orr.w	r9, ip, r9
 8026968:	ea4a 0707 	orr.w	r7, sl, r7
 802696c:	2d00      	cmp	r5, #0
 802696e:	f000 808b 	beq.w	8026a88 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 8026972:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8026976:	3901      	subs	r1, #1
 8026978:	0049      	lsls	r1, r1, #1
 802697a:	3102      	adds	r1, #2
 802697c:	eb00 0c01 	add.w	ip, r0, r1
 8026980:	5a41      	ldrh	r1, [r0, r1]
 8026982:	980c      	ldr	r0, [sp, #48]	; 0x30
 8026984:	28ff      	cmp	r0, #255	; 0xff
 8026986:	d019      	beq.n	80269bc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
 8026988:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 802698c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802698e:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8026992:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8026996:	fb04 fa01 	mul.w	sl, r4, r1
 802699a:	fb08 f800 	mul.w	r8, r8, r0
 802699e:	f10a 0020 	add.w	r0, sl, #32
 80269a2:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 80269a6:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80269aa:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 80269ae:	4441      	add	r1, r8
 80269b0:	0a00      	lsrs	r0, r0, #8
 80269b2:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 80269b6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80269ba:	4301      	orrs	r1, r0
 80269bc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80269be:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 80269c2:	2cff      	cmp	r4, #255	; 0xff
 80269c4:	d01a      	beq.n	80269fc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68c>
 80269c6:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 80269ca:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80269ce:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80269d2:	fb04 fa00 	mul.w	sl, r4, r0
 80269d6:	fb08 f80c 	mul.w	r8, r8, ip
 80269da:	f10a 0c20 	add.w	ip, sl, #32
 80269de:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 80269e2:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80269e6:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 80269ea:	4440      	add	r0, r8
 80269ec:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80269f0:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 80269f4:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 80269f8:	ea40 000c 	orr.w	r0, r0, ip
 80269fc:	fb15 fc02 	smulbb	ip, r5, r2
 8026a00:	f1c5 0810 	rsb	r8, r5, #16
 8026a04:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8026a08:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8026a0c:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8026a10:	eba8 0802 	sub.w	r8, r8, r2
 8026a14:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8026a18:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8026a1c:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 8026a20:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8026a24:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 8026a28:	ea4a 0101 	orr.w	r1, sl, r1
 8026a2c:	437a      	muls	r2, r7
 8026a2e:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 8026a32:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8026a36:	fb09 2208 	mla	r2, r9, r8, r2
 8026a3a:	ea4b 0000 	orr.w	r0, fp, r0
 8026a3e:	fb05 2201 	mla	r2, r5, r1, r2
 8026a42:	fb0c 2200 	mla	r2, ip, r0, r2
 8026a46:	0d57      	lsrs	r7, r2, #21
 8026a48:	0952      	lsrs	r2, r2, #5
 8026a4a:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8026a4e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8026a52:	433a      	orrs	r2, r7
 8026a54:	2bff      	cmp	r3, #255	; 0xff
 8026a56:	b292      	uxth	r2, r2
 8026a58:	d127      	bne.n	8026aaa <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73a>
 8026a5a:	f8ae 2000 	strh.w	r2, [lr]
 8026a5e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8026a60:	f10e 0e02 	add.w	lr, lr, #2
 8026a64:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8026a66:	4413      	add	r3, r2
 8026a68:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8026a6a:	931d      	str	r3, [sp, #116]	; 0x74
 8026a6c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8026a6e:	441a      	add	r2, r3
 8026a70:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8026a72:	3b01      	subs	r3, #1
 8026a74:	921e      	str	r2, [sp, #120]	; 0x78
 8026a76:	930f      	str	r3, [sp, #60]	; 0x3c
 8026a78:	e627      	b.n	80266ca <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8026a7a:	fb08 f000 	mul.w	r0, r8, r0
 8026a7e:	fb09 0303 	mla	r3, r9, r3, r0
 8026a82:	e71b      	b.n	80268bc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54c>
 8026a84:	46b9      	mov	r9, r7
 8026a86:	e743      	b.n	8026910 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a0>
 8026a88:	f1c2 0110 	rsb	r1, r2, #16
 8026a8c:	437a      	muls	r2, r7
 8026a8e:	fb09 2901 	mla	r9, r9, r1, r2
 8026a92:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8026a96:	ea4f 5059 	mov.w	r0, r9, lsr #21
 8026a9a:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8026a9e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8026aa2:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8026aa6:	4302      	orrs	r2, r0
 8026aa8:	e7d4      	b.n	8026a54 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e4>
 8026aaa:	f8be 7000 	ldrh.w	r7, [lr]
 8026aae:	43db      	mvns	r3, r3
 8026ab0:	4c1b      	ldr	r4, [pc, #108]	; (8026b20 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b0>)
 8026ab2:	1238      	asrs	r0, r7, #8
 8026ab4:	fa5f fc83 	uxtb.w	ip, r3
 8026ab8:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8026abc:	10fd      	asrs	r5, r7, #3
 8026abe:	00fb      	lsls	r3, r7, #3
 8026ac0:	fb00 f00c 	mul.w	r0, r0, ip
 8026ac4:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8026ac8:	b2db      	uxtb	r3, r3
 8026aca:	fb05 f10c 	mul.w	r1, r5, ip
 8026ace:	1c45      	adds	r5, r0, #1
 8026ad0:	fb03 f30c 	mul.w	r3, r3, ip
 8026ad4:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8026ad8:	1215      	asrs	r5, r2, #8
 8026ada:	f025 0507 	bic.w	r5, r5, #7
 8026ade:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8026ae2:	1c4d      	adds	r5, r1, #1
 8026ae4:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 8026ae8:	10d1      	asrs	r1, r2, #3
 8026aea:	b2c0      	uxtb	r0, r0
 8026aec:	f021 0103 	bic.w	r1, r1, #3
 8026af0:	00d2      	lsls	r2, r2, #3
 8026af2:	ea04 2000 	and.w	r0, r4, r0, lsl #8
 8026af6:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8026afa:	00c9      	lsls	r1, r1, #3
 8026afc:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8026b00:	4308      	orrs	r0, r1
 8026b02:	1c59      	adds	r1, r3, #1
 8026b04:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8026b08:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8026b0c:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 8026b10:	4318      	orrs	r0, r3
 8026b12:	f8ae 0000 	strh.w	r0, [lr]
 8026b16:	e7a2      	b.n	8026a5e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ee>
 8026b18:	b013      	add	sp, #76	; 0x4c
 8026b1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026b1e:	bf00      	nop
 8026b20:	fffff800 	.word	0xfffff800

08026b24 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
 8026b24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026b28:	e9dd 4509 	ldrd	r4, r5, [sp, #36]	; 0x24
 8026b2c:	f9bd a020 	ldrsh.w	sl, [sp, #32]
 8026b30:	fb05 4c03 	mla	ip, r5, r3, r4
 8026b34:	2d00      	cmp	r5, #0
 8026b36:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 8026b3a:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 8026b3e:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
 8026b42:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 8026b46:	8808      	ldrh	r0, [r1, #0]
 8026b48:	f2c0 80a7 	blt.w	8026c9a <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 8026b4c:	45aa      	cmp	sl, r5
 8026b4e:	f340 80a4 	ble.w	8026c9a <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 8026b52:	2c00      	cmp	r4, #0
 8026b54:	f2c0 809f 	blt.w	8026c96 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 8026b58:	42a3      	cmp	r3, r4
 8026b5a:	f340 809c 	ble.w	8026c96 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 8026b5e:	f832 801c 	ldrh.w	r8, [r2, ip, lsl #1]
 8026b62:	1c62      	adds	r2, r4, #1
 8026b64:	f100 809c 	bmi.w	8026ca0 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 8026b68:	4293      	cmp	r3, r2
 8026b6a:	f340 8099 	ble.w	8026ca0 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 8026b6e:	f1b9 0f00 	cmp.w	r9, #0
 8026b72:	f000 8095 	beq.w	8026ca0 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 8026b76:	f8be c002 	ldrh.w	ip, [lr, #2]
 8026b7a:	3501      	adds	r5, #1
 8026b7c:	f100 8094 	bmi.w	8026ca8 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 8026b80:	45aa      	cmp	sl, r5
 8026b82:	f340 8091 	ble.w	8026ca8 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 8026b86:	2f00      	cmp	r7, #0
 8026b88:	f000 808e 	beq.w	8026ca8 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 8026b8c:	2c00      	cmp	r4, #0
 8026b8e:	f2c0 8089 	blt.w	8026ca4 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 8026b92:	42a3      	cmp	r3, r4
 8026b94:	f340 8086 	ble.w	8026ca4 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 8026b98:	f83e 5013 	ldrh.w	r5, [lr, r3, lsl #1]
 8026b9c:	3401      	adds	r4, #1
 8026b9e:	f100 8086 	bmi.w	8026cae <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 8026ba2:	42a3      	cmp	r3, r4
 8026ba4:	f340 8083 	ble.w	8026cae <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 8026ba8:	f1b9 0f00 	cmp.w	r9, #0
 8026bac:	d07f      	beq.n	8026cae <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 8026bae:	3301      	adds	r3, #1
 8026bb0:	f83e 3013 	ldrh.w	r3, [lr, r3, lsl #1]
 8026bb4:	ea4f 4408 	mov.w	r4, r8, lsl #16
 8026bb8:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 8026bbc:	fb19 fe07 	smulbb	lr, r9, r7
 8026bc0:	f1c7 0210 	rsb	r2, r7, #16
 8026bc4:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8026bc8:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 8026bcc:	eba2 0209 	sub.w	r2, r2, r9
 8026bd0:	ea44 0808 	orr.w	r8, r4, r8
 8026bd4:	ea4f 440c 	mov.w	r4, ip, lsl #16
 8026bd8:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8026bdc:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 8026be0:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8026be4:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 8026be8:	ea44 0c0c 	orr.w	ip, r4, ip
 8026bec:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 8026bf0:	fb04 f40c 	mul.w	r4, r4, ip
 8026bf4:	fb02 4808 	mla	r8, r2, r8, r4
 8026bf8:	041a      	lsls	r2, r3, #16
 8026bfa:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8026bfe:	b2b4      	uxth	r4, r6
 8026c00:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8026c04:	43f6      	mvns	r6, r6
 8026c06:	4313      	orrs	r3, r2
 8026c08:	042a      	lsls	r2, r5, #16
 8026c0a:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8026c0e:	b2f6      	uxtb	r6, r6
 8026c10:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8026c14:	fb0e 8303 	mla	r3, lr, r3, r8
 8026c18:	432a      	orrs	r2, r5
 8026c1a:	fb07 3202 	mla	r2, r7, r2, r3
 8026c1e:	10c7      	asrs	r7, r0, #3
 8026c20:	0d53      	lsrs	r3, r2, #21
 8026c22:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8026c26:	0952      	lsrs	r2, r2, #5
 8026c28:	fb17 f706 	smulbb	r7, r7, r6
 8026c2c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8026c30:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8026c34:	431a      	orrs	r2, r3
 8026c36:	b293      	uxth	r3, r2
 8026c38:	1202      	asrs	r2, r0, #8
 8026c3a:	121d      	asrs	r5, r3, #8
 8026c3c:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8026c40:	00c0      	lsls	r0, r0, #3
 8026c42:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8026c46:	fb12 f206 	smulbb	r2, r2, r6
 8026c4a:	b2c0      	uxtb	r0, r0
 8026c4c:	fb05 2504 	mla	r5, r5, r4, r2
 8026c50:	10da      	asrs	r2, r3, #3
 8026c52:	fb10 f006 	smulbb	r0, r0, r6
 8026c56:	00db      	lsls	r3, r3, #3
 8026c58:	b2ad      	uxth	r5, r5
 8026c5a:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8026c5e:	b2db      	uxtb	r3, r3
 8026c60:	fb02 7204 	mla	r2, r2, r4, r7
 8026c64:	fb03 0004 	mla	r0, r3, r4, r0
 8026c68:	1c6b      	adds	r3, r5, #1
 8026c6a:	b292      	uxth	r2, r2
 8026c6c:	b280      	uxth	r0, r0
 8026c6e:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8026c72:	1c43      	adds	r3, r0, #1
 8026c74:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8026c78:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8026c7c:	1c50      	adds	r0, r2, #1
 8026c7e:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8026c82:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8026c86:	0952      	lsrs	r2, r2, #5
 8026c88:	432b      	orrs	r3, r5
 8026c8a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8026c8e:	4313      	orrs	r3, r2
 8026c90:	800b      	strh	r3, [r1, #0]
 8026c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026c96:	4680      	mov	r8, r0
 8026c98:	e763      	b.n	8026b62 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x3e>
 8026c9a:	4684      	mov	ip, r0
 8026c9c:	4680      	mov	r8, r0
 8026c9e:	e76c      	b.n	8026b7a <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 8026ca0:	4684      	mov	ip, r0
 8026ca2:	e76a      	b.n	8026b7a <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 8026ca4:	4605      	mov	r5, r0
 8026ca6:	e779      	b.n	8026b9c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x78>
 8026ca8:	4603      	mov	r3, r0
 8026caa:	4605      	mov	r5, r0
 8026cac:	e782      	b.n	8026bb4 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>
 8026cae:	4603      	mov	r3, r0
 8026cb0:	e780      	b.n	8026bb4 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>

08026cb2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026cb2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026cb6:	b093      	sub	sp, #76	; 0x4c
 8026cb8:	461d      	mov	r5, r3
 8026cba:	9210      	str	r2, [sp, #64]	; 0x40
 8026cbc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8026cbe:	f89d 2094 	ldrb.w	r2, [sp, #148]	; 0x94
 8026cc2:	910a      	str	r1, [sp, #40]	; 0x28
 8026cc4:	920b      	str	r2, [sp, #44]	; 0x2c
 8026cc6:	6859      	ldr	r1, [r3, #4]
 8026cc8:	681b      	ldr	r3, [r3, #0]
 8026cca:	9011      	str	r0, [sp, #68]	; 0x44
 8026ccc:	e9dd 2722 	ldrd	r2, r7, [sp, #136]	; 0x88
 8026cd0:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 8026cd4:	fb01 2707 	mla	r7, r1, r7, r2
 8026cd8:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 8026cdc:	9307      	str	r3, [sp, #28]
 8026cde:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8026ce0:	681b      	ldr	r3, [r3, #0]
 8026ce2:	9309      	str	r3, [sp, #36]	; 0x24
 8026ce4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8026ce6:	43db      	mvns	r3, r3
 8026ce8:	b2db      	uxtb	r3, r3
 8026cea:	9308      	str	r3, [sp, #32]
 8026cec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026cee:	2b00      	cmp	r3, #0
 8026cf0:	dc03      	bgt.n	8026cfa <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8026cf2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8026cf4:	2b00      	cmp	r3, #0
 8026cf6:	f340 8205 	ble.w	8027104 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8026cfa:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8026cfc:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026d00:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8026d04:	1e48      	subs	r0, r1, #1
 8026d06:	f102 3cff 	add.w	ip, r2, #4294967295
 8026d0a:	2d00      	cmp	r5, #0
 8026d0c:	f340 80da 	ble.w	8026ec4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8026d10:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8026d14:	ea4f 4326 	mov.w	r3, r6, asr #16
 8026d18:	d406      	bmi.n	8026d28 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8026d1a:	4586      	cmp	lr, r0
 8026d1c:	da04      	bge.n	8026d28 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8026d1e:	2b00      	cmp	r3, #0
 8026d20:	db02      	blt.n	8026d28 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8026d22:	4563      	cmp	r3, ip
 8026d24:	f2c0 80cf 	blt.w	8026ec6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8026d28:	f11e 0e01 	adds.w	lr, lr, #1
 8026d2c:	f100 80c1 	bmi.w	8026eb2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8026d30:	4571      	cmp	r1, lr
 8026d32:	f2c0 80be 	blt.w	8026eb2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8026d36:	3301      	adds	r3, #1
 8026d38:	f100 80bb 	bmi.w	8026eb2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8026d3c:	429a      	cmp	r2, r3
 8026d3e:	f2c0 80b8 	blt.w	8026eb2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8026d42:	46a9      	mov	r9, r5
 8026d44:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8026d48:	f1b9 0f00 	cmp.w	r9, #0
 8026d4c:	f340 80d8 	ble.w	8026f00 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 8026d50:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8026d52:	1421      	asrs	r1, r4, #16
 8026d54:	ea4f 4026 	mov.w	r0, r6, asr #16
 8026d58:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8026d5c:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8026d60:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8026d64:	f100 8112 	bmi.w	8026f8c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8026d68:	f10e 3aff 	add.w	sl, lr, #4294967295
 8026d6c:	4551      	cmp	r1, sl
 8026d6e:	f280 810d 	bge.w	8026f8c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8026d72:	2800      	cmp	r0, #0
 8026d74:	f2c0 810a 	blt.w	8026f8c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8026d78:	f103 3aff 	add.w	sl, r3, #4294967295
 8026d7c:	4550      	cmp	r0, sl
 8026d7e:	f280 8105 	bge.w	8026f8c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8026d82:	fa0f f38e 	sxth.w	r3, lr
 8026d86:	fb00 1103 	mla	r1, r0, r3, r1
 8026d8a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8026d8c:	eb00 0a41 	add.w	sl, r0, r1, lsl #1
 8026d90:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
 8026d94:	f8ba 1002 	ldrh.w	r1, [sl, #2]
 8026d98:	f1bc 0f00 	cmp.w	ip, #0
 8026d9c:	d007      	beq.n	8026dae <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfc>
 8026d9e:	005b      	lsls	r3, r3, #1
 8026da0:	eb0a 0003 	add.w	r0, sl, r3
 8026da4:	f83a 3003 	ldrh.w	r3, [sl, r3]
 8026da8:	930c      	str	r3, [sp, #48]	; 0x30
 8026daa:	8843      	ldrh	r3, [r0, #2]
 8026dac:	930d      	str	r3, [sp, #52]	; 0x34
 8026dae:	ea4f 400e 	mov.w	r0, lr, lsl #16
 8026db2:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8026db6:	fb12 f30c 	smulbb	r3, r2, ip
 8026dba:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8026dbe:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8026dc2:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8026dc6:	10db      	asrs	r3, r3, #3
 8026dc8:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8026dcc:	ea40 000e 	orr.w	r0, r0, lr
 8026dd0:	f1cc 0e10 	rsb	lr, ip, #16
 8026dd4:	ea4a 0101 	orr.w	r1, sl, r1
 8026dd8:	9f08      	ldr	r7, [sp, #32]
 8026dda:	ebae 0e02 	sub.w	lr, lr, r2
 8026dde:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8026de2:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8026de6:	4351      	muls	r1, r2
 8026de8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8026dea:	fb0e 1e00 	mla	lr, lr, r0, r1
 8026dee:	990c      	ldr	r1, [sp, #48]	; 0x30
 8026df0:	0410      	lsls	r0, r2, #16
 8026df2:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8026df6:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8026dfa:	4310      	orrs	r0, r2
 8026dfc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8026dfe:	0412      	lsls	r2, r2, #16
 8026e00:	fb03 e000 	mla	r0, r3, r0, lr
 8026e04:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 8026e08:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8026e0c:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8026e10:	ea42 020e 	orr.w	r2, r2, lr
 8026e14:	fb03 0302 	mla	r3, r3, r2, r0
 8026e18:	f8b8 0000 	ldrh.w	r0, [r8]
 8026e1c:	0d5a      	lsrs	r2, r3, #21
 8026e1e:	095b      	lsrs	r3, r3, #5
 8026e20:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8026e24:	1201      	asrs	r1, r0, #8
 8026e26:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8026e2a:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 8026e2e:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8026e32:	00c0      	lsls	r0, r0, #3
 8026e34:	4313      	orrs	r3, r2
 8026e36:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8026e3a:	fb11 f107 	smulbb	r1, r1, r7
 8026e3e:	b2c0      	uxtb	r0, r0
 8026e40:	b29b      	uxth	r3, r3
 8026e42:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8026e46:	fb10 f007 	smulbb	r0, r0, r7
 8026e4a:	fb1e fe07 	smulbb	lr, lr, r7
 8026e4e:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8026e52:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8026e56:	fb0c 1c02 	mla	ip, ip, r2, r1
 8026e5a:	10d9      	asrs	r1, r3, #3
 8026e5c:	00db      	lsls	r3, r3, #3
 8026e5e:	fa1f fc8c 	uxth.w	ip, ip
 8026e62:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8026e66:	b2db      	uxtb	r3, r3
 8026e68:	fb01 e102 	mla	r1, r1, r2, lr
 8026e6c:	fb03 0302 	mla	r3, r3, r2, r0
 8026e70:	b289      	uxth	r1, r1
 8026e72:	b29a      	uxth	r2, r3
 8026e74:	f10c 0301 	add.w	r3, ip, #1
 8026e78:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8026e7c:	1c53      	adds	r3, r2, #1
 8026e7e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8026e82:	1c4a      	adds	r2, r1, #1
 8026e84:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8026e88:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8026e8c:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8026e90:	0949      	lsrs	r1, r1, #5
 8026e92:	ea43 030c 	orr.w	r3, r3, ip
 8026e96:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8026e9a:	430b      	orrs	r3, r1
 8026e9c:	f8a8 3000 	strh.w	r3, [r8]
 8026ea0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8026ea2:	f108 0802 	add.w	r8, r8, #2
 8026ea6:	f109 39ff 	add.w	r9, r9, #4294967295
 8026eaa:	441c      	add	r4, r3
 8026eac:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8026eae:	441e      	add	r6, r3
 8026eb0:	e74a      	b.n	8026d48 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8026eb2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8026eb4:	3d01      	subs	r5, #1
 8026eb6:	441c      	add	r4, r3
 8026eb8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8026eba:	441e      	add	r6, r3
 8026ebc:	9b07      	ldr	r3, [sp, #28]
 8026ebe:	3302      	adds	r3, #2
 8026ec0:	9307      	str	r3, [sp, #28]
 8026ec2:	e722      	b.n	8026d0a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8026ec4:	d022      	beq.n	8026f0c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 8026ec6:	1e6b      	subs	r3, r5, #1
 8026ec8:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8026eca:	fb00 4003 	mla	r0, r0, r3, r4
 8026ece:	1400      	asrs	r0, r0, #16
 8026ed0:	f53f af37 	bmi.w	8026d42 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8026ed4:	3901      	subs	r1, #1
 8026ed6:	4288      	cmp	r0, r1
 8026ed8:	f6bf af33 	bge.w	8026d42 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8026edc:	9920      	ldr	r1, [sp, #128]	; 0x80
 8026ede:	fb01 6303 	mla	r3, r1, r3, r6
 8026ee2:	141b      	asrs	r3, r3, #16
 8026ee4:	f53f af2d 	bmi.w	8026d42 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8026ee8:	3a01      	subs	r2, #1
 8026eea:	4293      	cmp	r3, r2
 8026eec:	f6bf af29 	bge.w	8026d42 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8026ef0:	46a8      	mov	r8, r5
 8026ef2:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8026ef6:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
 8026efa:	f1b8 0f00 	cmp.w	r8, #0
 8026efe:	dc60      	bgt.n	8026fc2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
 8026f00:	9b07      	ldr	r3, [sp, #28]
 8026f02:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8026f06:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8026f0a:	9307      	str	r3, [sp, #28]
 8026f0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026f0e:	2b00      	cmp	r3, #0
 8026f10:	f340 80f8 	ble.w	8027104 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8026f14:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8026f18:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8026f1a:	ee30 0a04 	vadd.f32	s0, s0, s8
 8026f1e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8026f22:	eef0 6a62 	vmov.f32	s13, s5
 8026f26:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8026f2a:	ee31 1a05 	vadd.f32	s2, s2, s10
 8026f2e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026f32:	ee16 4a90 	vmov	r4, s13
 8026f36:	eef0 6a43 	vmov.f32	s13, s6
 8026f3a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026f3e:	ee16 6a90 	vmov	r6, s13
 8026f42:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8026f46:	ee61 7a27 	vmul.f32	s15, s2, s15
 8026f4a:	ee77 2a62 	vsub.f32	s5, s14, s5
 8026f4e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8026f52:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8026f56:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8026f5a:	ee12 2a90 	vmov	r2, s5
 8026f5e:	eef0 2a47 	vmov.f32	s5, s14
 8026f62:	fb92 f3f3 	sdiv	r3, r2, r3
 8026f66:	ee13 2a10 	vmov	r2, s6
 8026f6a:	931f      	str	r3, [sp, #124]	; 0x7c
 8026f6c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8026f6e:	eeb0 3a67 	vmov.f32	s6, s15
 8026f72:	fb92 f3f3 	sdiv	r3, r2, r3
 8026f76:	9320      	str	r3, [sp, #128]	; 0x80
 8026f78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026f7a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8026f7c:	3b01      	subs	r3, #1
 8026f7e:	930a      	str	r3, [sp, #40]	; 0x28
 8026f80:	bf08      	it	eq
 8026f82:	4615      	moveq	r5, r2
 8026f84:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8026f86:	bf18      	it	ne
 8026f88:	461d      	movne	r5, r3
 8026f8a:	e6af      	b.n	8026cec <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8026f8c:	f111 0a01 	adds.w	sl, r1, #1
 8026f90:	d486      	bmi.n	8026ea0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8026f92:	45d6      	cmp	lr, sl
 8026f94:	db84      	blt.n	8026ea0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8026f96:	f110 0a01 	adds.w	sl, r0, #1
 8026f9a:	d481      	bmi.n	8026ea0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8026f9c:	4553      	cmp	r3, sl
 8026f9e:	f6ff af7f 	blt.w	8026ea0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8026fa2:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8026fa4:	b21b      	sxth	r3, r3
 8026fa6:	9101      	str	r1, [sp, #4]
 8026fa8:	4641      	mov	r1, r8
 8026faa:	9300      	str	r3, [sp, #0]
 8026fac:	fa0f f38e 	sxth.w	r3, lr
 8026fb0:	e9cd 0202 	strd	r0, r2, [sp, #8]
 8026fb4:	e9cd c704 	strd	ip, r7, [sp, #16]
 8026fb8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8026fba:	9811      	ldr	r0, [sp, #68]	; 0x44
 8026fbc:	f7ff fdb2 	bl	8026b24 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
 8026fc0:	e76e      	b.n	8026ea0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8026fc2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8026fc4:	1430      	asrs	r0, r6, #16
 8026fc6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8026fc8:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8026fcc:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026fd0:	1423      	asrs	r3, r4, #16
 8026fd2:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8026fd6:	fb01 3000 	mla	r0, r1, r0, r3
 8026fda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026fdc:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8026fe0:	f837 c010 	ldrh.w	ip, [r7, r0, lsl #1]
 8026fe4:	8858      	ldrh	r0, [r3, #2]
 8026fe6:	f1be 0f00 	cmp.w	lr, #0
 8026fea:	d00b      	beq.n	8027004 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 8026fec:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8026ff0:	3901      	subs	r1, #1
 8026ff2:	0049      	lsls	r1, r1, #1
 8026ff4:	3102      	adds	r1, #2
 8026ff6:	eb03 0b01 	add.w	fp, r3, r1
 8026ffa:	5a5b      	ldrh	r3, [r3, r1]
 8026ffc:	930e      	str	r3, [sp, #56]	; 0x38
 8026ffe:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8027002:	930f      	str	r3, [sp, #60]	; 0x3c
 8027004:	ea4f 410c 	mov.w	r1, ip, lsl #16
 8027008:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 802700c:	fb12 f30e 	smulbb	r3, r2, lr
 8027010:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8027014:	f001 61fc 	and.w	r1, r1, #132120576	; 0x7e00000
 8027018:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802701c:	10db      	asrs	r3, r3, #3
 802701e:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8027022:	ea41 010c 	orr.w	r1, r1, ip
 8027026:	f1ce 0c10 	rsb	ip, lr, #16
 802702a:	ea4b 0000 	orr.w	r0, fp, r0
 802702e:	9f08      	ldr	r7, [sp, #32]
 8027030:	ebac 0c02 	sub.w	ip, ip, r2
 8027034:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8027038:	f108 38ff 	add.w	r8, r8, #4294967295
 802703c:	4350      	muls	r0, r2
 802703e:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 8027042:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8027044:	fb0c 0c01 	mla	ip, ip, r1, r0
 8027048:	980e      	ldr	r0, [sp, #56]	; 0x38
 802704a:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 802704e:	f422 61fc 	bic.w	r1, r2, #2016	; 0x7e0
 8027052:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8027054:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8027058:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 802705c:	0412      	lsls	r2, r2, #16
 802705e:	ea4b 0101 	orr.w	r1, fp, r1
 8027062:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8027066:	fb03 c101 	mla	r1, r3, r1, ip
 802706a:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 802706e:	4302      	orrs	r2, r0
 8027070:	fb03 1202 	mla	r2, r3, r2, r1
 8027074:	ea4f 5b52 	mov.w	fp, r2, lsr #21
 8027078:	0952      	lsrs	r2, r2, #5
 802707a:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 802707e:	f422 63fc 	bic.w	r3, r2, #2016	; 0x7e0
 8027082:	f8b9 2000 	ldrh.w	r2, [r9]
 8027086:	ea4b 0303 	orr.w	r3, fp, r3
 802708a:	1211      	asrs	r1, r2, #8
 802708c:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 8027090:	b29b      	uxth	r3, r3
 8027092:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8027096:	00d2      	lsls	r2, r2, #3
 8027098:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 802709c:	fb11 f107 	smulbb	r1, r1, r7
 80270a0:	1218      	asrs	r0, r3, #8
 80270a2:	fb1c fc07 	smulbb	ip, ip, r7
 80270a6:	b2d2      	uxtb	r2, r2
 80270a8:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80270ac:	fb12 f207 	smulbb	r2, r2, r7
 80270b0:	fb00 100a 	mla	r0, r0, sl, r1
 80270b4:	10d9      	asrs	r1, r3, #3
 80270b6:	00db      	lsls	r3, r3, #3
 80270b8:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80270bc:	b280      	uxth	r0, r0
 80270be:	b2db      	uxtb	r3, r3
 80270c0:	fb01 c10a 	mla	r1, r1, sl, ip
 80270c4:	fb03 230a 	mla	r3, r3, sl, r2
 80270c8:	1c42      	adds	r2, r0, #1
 80270ca:	b289      	uxth	r1, r1
 80270cc:	b29b      	uxth	r3, r3
 80270ce:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80270d2:	f101 0c01 	add.w	ip, r1, #1
 80270d6:	1c5a      	adds	r2, r3, #1
 80270d8:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 80270dc:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 80270e0:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80270e4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80270e6:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80270ea:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80270ee:	441c      	add	r4, r3
 80270f0:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 80270f4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80270f6:	4310      	orrs	r0, r2
 80270f8:	441e      	add	r6, r3
 80270fa:	ea40 000c 	orr.w	r0, r0, ip
 80270fe:	f829 0b02 	strh.w	r0, [r9], #2
 8027102:	e6fa      	b.n	8026efa <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8027104:	b013      	add	sp, #76	; 0x4c
 8027106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802710a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
 802710a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802710e:	e9dd 4e08 	ldrd	r4, lr, [sp, #32]
 8027112:	f9bd 901c 	ldrsh.w	r9, [sp, #28]
 8027116:	fb0e 4703 	mla	r7, lr, r3, r4
 802711a:	f1be 0f00 	cmp.w	lr, #0
 802711e:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
 8027122:	f89d 602c 	ldrb.w	r6, [sp, #44]	; 0x2c
 8027126:	eb02 0847 	add.w	r8, r2, r7, lsl #1
 802712a:	8808      	ldrh	r0, [r1, #0]
 802712c:	db60      	blt.n	80271f0 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 802712e:	45f1      	cmp	r9, lr
 8027130:	dd5e      	ble.n	80271f0 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 8027132:	2c00      	cmp	r4, #0
 8027134:	db5a      	blt.n	80271ec <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 8027136:	42a3      	cmp	r3, r4
 8027138:	dd58      	ble.n	80271ec <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 802713a:	f832 c017 	ldrh.w	ip, [r2, r7, lsl #1]
 802713e:	1c62      	adds	r2, r4, #1
 8027140:	d459      	bmi.n	80271f6 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 8027142:	4293      	cmp	r3, r2
 8027144:	dd57      	ble.n	80271f6 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 8027146:	2d00      	cmp	r5, #0
 8027148:	d055      	beq.n	80271f6 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 802714a:	f8b8 7002 	ldrh.w	r7, [r8, #2]
 802714e:	f11e 0e01 	adds.w	lr, lr, #1
 8027152:	d454      	bmi.n	80271fe <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 8027154:	45f1      	cmp	r9, lr
 8027156:	dd52      	ble.n	80271fe <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 8027158:	2e00      	cmp	r6, #0
 802715a:	d050      	beq.n	80271fe <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 802715c:	2c00      	cmp	r4, #0
 802715e:	db4c      	blt.n	80271fa <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 8027160:	42a3      	cmp	r3, r4
 8027162:	dd4a      	ble.n	80271fa <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 8027164:	f838 2013 	ldrh.w	r2, [r8, r3, lsl #1]
 8027168:	3401      	adds	r4, #1
 802716a:	d405      	bmi.n	8027178 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 802716c:	42a3      	cmp	r3, r4
 802716e:	dd03      	ble.n	8027178 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8027170:	b115      	cbz	r5, 8027178 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8027172:	3301      	adds	r3, #1
 8027174:	f838 0013 	ldrh.w	r0, [r8, r3, lsl #1]
 8027178:	fb15 f406 	smulbb	r4, r5, r6
 802717c:	ea4f 430c 	mov.w	r3, ip, lsl #16
 8027180:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 8027184:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8027188:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 802718c:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 8027190:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8027194:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8027198:	ea43 0c0c 	orr.w	ip, r3, ip
 802719c:	f1c6 0310 	rsb	r3, r6, #16
 80271a0:	ea4e 0707 	orr.w	r7, lr, r7
 80271a4:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 80271a8:	1b5b      	subs	r3, r3, r5
 80271aa:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 80271ae:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80271b2:	437d      	muls	r5, r7
 80271b4:	fb03 5c0c 	mla	ip, r3, ip, r5
 80271b8:	0403      	lsls	r3, r0, #16
 80271ba:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80271be:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 80271c2:	4318      	orrs	r0, r3
 80271c4:	0413      	lsls	r3, r2, #16
 80271c6:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80271ca:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 80271ce:	fb04 c000 	mla	r0, r4, r0, ip
 80271d2:	4313      	orrs	r3, r2
 80271d4:	fb06 0003 	mla	r0, r6, r3, r0
 80271d8:	0d43      	lsrs	r3, r0, #21
 80271da:	0940      	lsrs	r0, r0, #5
 80271dc:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80271e0:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80271e4:	4318      	orrs	r0, r3
 80271e6:	8008      	strh	r0, [r1, #0]
 80271e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80271ec:	4684      	mov	ip, r0
 80271ee:	e7a6      	b.n	802713e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x34>
 80271f0:	4607      	mov	r7, r0
 80271f2:	4684      	mov	ip, r0
 80271f4:	e7ab      	b.n	802714e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 80271f6:	4607      	mov	r7, r0
 80271f8:	e7a9      	b.n	802714e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 80271fa:	4602      	mov	r2, r0
 80271fc:	e7b4      	b.n	8027168 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x5e>
 80271fe:	4602      	mov	r2, r0
 8027200:	e7ba      	b.n	8027178 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>

08027202 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8027202:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027206:	b08f      	sub	sp, #60	; 0x3c
 8027208:	461d      	mov	r5, r3
 802720a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802720c:	9107      	str	r1, [sp, #28]
 802720e:	920c      	str	r2, [sp, #48]	; 0x30
 8027210:	6859      	ldr	r1, [r3, #4]
 8027212:	681b      	ldr	r3, [r3, #0]
 8027214:	900d      	str	r0, [sp, #52]	; 0x34
 8027216:	e9dd 271e 	ldrd	r2, r7, [sp, #120]	; 0x78
 802721a:	e9dd 4619 	ldrd	r4, r6, [sp, #100]	; 0x64
 802721e:	fb01 2707 	mla	r7, r1, r7, r2
 8027222:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 8027226:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8027228:	f8d3 8000 	ldr.w	r8, [r3]
 802722c:	9b07      	ldr	r3, [sp, #28]
 802722e:	2b00      	cmp	r3, #0
 8027230:	dc03      	bgt.n	802723a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8027232:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8027234:	2b00      	cmp	r3, #0
 8027236:	f340 8182 	ble.w	802753e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33c>
 802723a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802723c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027240:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8027244:	1e48      	subs	r0, r1, #1
 8027246:	f102 3cff 	add.w	ip, r2, #4294967295
 802724a:	2d00      	cmp	r5, #0
 802724c:	f340 809b 	ble.w	8027386 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x184>
 8027250:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8027254:	ea4f 4326 	mov.w	r3, r6, asr #16
 8027258:	d406      	bmi.n	8027268 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 802725a:	4586      	cmp	lr, r0
 802725c:	da04      	bge.n	8027268 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 802725e:	2b00      	cmp	r3, #0
 8027260:	db02      	blt.n	8027268 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8027262:	4563      	cmp	r3, ip
 8027264:	f2c0 8090 	blt.w	8027388 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8027268:	f11e 0e01 	adds.w	lr, lr, #1
 802726c:	f100 8084 	bmi.w	8027378 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8027270:	4571      	cmp	r1, lr
 8027272:	f2c0 8081 	blt.w	8027378 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8027276:	3301      	adds	r3, #1
 8027278:	d47e      	bmi.n	8027378 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 802727a:	429a      	cmp	r2, r3
 802727c:	db7c      	blt.n	8027378 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 802727e:	46aa      	mov	sl, r5
 8027280:	46b9      	mov	r9, r7
 8027282:	f1ba 0f00 	cmp.w	sl, #0
 8027286:	f340 8099 	ble.w	80273bc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 802728a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802728c:	1421      	asrs	r1, r4, #16
 802728e:	ea4f 4026 	mov.w	r0, r6, asr #16
 8027292:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8027296:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 802729a:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 802729e:	f100 80d1 	bmi.w	8027444 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 80272a2:	f10e 3bff 	add.w	fp, lr, #4294967295
 80272a6:	4559      	cmp	r1, fp
 80272a8:	f280 80cc 	bge.w	8027444 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 80272ac:	2800      	cmp	r0, #0
 80272ae:	f2c0 80c9 	blt.w	8027444 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 80272b2:	f103 3bff 	add.w	fp, r3, #4294967295
 80272b6:	4558      	cmp	r0, fp
 80272b8:	f280 80c4 	bge.w	8027444 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 80272bc:	fa0f fe8e 	sxth.w	lr, lr
 80272c0:	fb00 110e 	mla	r1, r0, lr, r1
 80272c4:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 80272c8:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
 80272cc:	8841      	ldrh	r1, [r0, #2]
 80272ce:	f1bc 0f00 	cmp.w	ip, #0
 80272d2:	d00b      	beq.n	80272ec <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xea>
 80272d4:	f10e 4300 	add.w	r3, lr, #2147483648	; 0x80000000
 80272d8:	3b01      	subs	r3, #1
 80272da:	005b      	lsls	r3, r3, #1
 80272dc:	3302      	adds	r3, #2
 80272de:	eb00 0e03 	add.w	lr, r0, r3
 80272e2:	5ac3      	ldrh	r3, [r0, r3]
 80272e4:	9308      	str	r3, [sp, #32]
 80272e6:	f8be 3002 	ldrh.w	r3, [lr, #2]
 80272ea:	9309      	str	r3, [sp, #36]	; 0x24
 80272ec:	ea4f 400b 	mov.w	r0, fp, lsl #16
 80272f0:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 80272f4:	fb12 f30c 	smulbb	r3, r2, ip
 80272f8:	f1cc 0e10 	rsb	lr, ip, #16
 80272fc:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8027300:	10db      	asrs	r3, r3, #3
 8027302:	ebae 0e02 	sub.w	lr, lr, r2
 8027306:	ea40 000b 	orr.w	r0, r0, fp
 802730a:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 802730e:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8027312:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8027316:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 802731a:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 802731e:	ea4b 0101 	orr.w	r1, fp, r1
 8027322:	4351      	muls	r1, r2
 8027324:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8027326:	fb0e 1e00 	mla	lr, lr, r0, r1
 802732a:	0410      	lsls	r0, r2, #16
 802732c:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8027330:	9908      	ldr	r1, [sp, #32]
 8027332:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8027336:	4310      	orrs	r0, r2
 8027338:	9a08      	ldr	r2, [sp, #32]
 802733a:	0412      	lsls	r2, r2, #16
 802733c:	fb03 e000 	mla	r0, r3, r0, lr
 8027340:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 8027344:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8027348:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 802734c:	ea42 020e 	orr.w	r2, r2, lr
 8027350:	fb03 0302 	mla	r3, r3, r2, r0
 8027354:	0d5a      	lsrs	r2, r3, #21
 8027356:	095b      	lsrs	r3, r3, #5
 8027358:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802735c:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8027360:	4313      	orrs	r3, r2
 8027362:	f8a9 3000 	strh.w	r3, [r9]
 8027366:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8027368:	f109 0902 	add.w	r9, r9, #2
 802736c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8027370:	441c      	add	r4, r3
 8027372:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8027374:	441e      	add	r6, r3
 8027376:	e784      	b.n	8027282 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8027378:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 802737a:	3d01      	subs	r5, #1
 802737c:	3702      	adds	r7, #2
 802737e:	441c      	add	r4, r3
 8027380:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8027382:	441e      	add	r6, r3
 8027384:	e761      	b.n	802724a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8027386:	d01d      	beq.n	80273c4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8027388:	1e6b      	subs	r3, r5, #1
 802738a:	981b      	ldr	r0, [sp, #108]	; 0x6c
 802738c:	fb00 4003 	mla	r0, r0, r3, r4
 8027390:	1400      	asrs	r0, r0, #16
 8027392:	f53f af74 	bmi.w	802727e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8027396:	3901      	subs	r1, #1
 8027398:	4288      	cmp	r0, r1
 802739a:	f6bf af70 	bge.w	802727e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802739e:	991c      	ldr	r1, [sp, #112]	; 0x70
 80273a0:	fb01 6303 	mla	r3, r1, r3, r6
 80273a4:	141b      	asrs	r3, r3, #16
 80273a6:	f53f af6a 	bmi.w	802727e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80273aa:	3a01      	subs	r2, #1
 80273ac:	4293      	cmp	r3, r2
 80273ae:	f6bf af66 	bge.w	802727e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80273b2:	46a9      	mov	r9, r5
 80273b4:	46ba      	mov	sl, r7
 80273b6:	f1b9 0f00 	cmp.w	r9, #0
 80273ba:	dc5b      	bgt.n	8027474 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 80273bc:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 80273c0:	eb07 0745 	add.w	r7, r7, r5, lsl #1
 80273c4:	9b07      	ldr	r3, [sp, #28]
 80273c6:	2b00      	cmp	r3, #0
 80273c8:	f340 80b9 	ble.w	802753e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33c>
 80273cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80273d0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80273d2:	ee30 0a04 	vadd.f32	s0, s0, s8
 80273d6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80273da:	eef0 6a62 	vmov.f32	s13, s5
 80273de:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80273e2:	ee31 1a05 	vadd.f32	s2, s2, s10
 80273e6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80273ea:	ee16 4a90 	vmov	r4, s13
 80273ee:	eef0 6a43 	vmov.f32	s13, s6
 80273f2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80273f6:	ee16 6a90 	vmov	r6, s13
 80273fa:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80273fe:	ee61 7a27 	vmul.f32	s15, s2, s15
 8027402:	ee77 2a62 	vsub.f32	s5, s14, s5
 8027406:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802740a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802740e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8027412:	ee12 2a90 	vmov	r2, s5
 8027416:	eef0 2a47 	vmov.f32	s5, s14
 802741a:	fb92 f3f3 	sdiv	r3, r2, r3
 802741e:	ee13 2a10 	vmov	r2, s6
 8027422:	931b      	str	r3, [sp, #108]	; 0x6c
 8027424:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8027426:	eeb0 3a67 	vmov.f32	s6, s15
 802742a:	fb92 f3f3 	sdiv	r3, r2, r3
 802742e:	931c      	str	r3, [sp, #112]	; 0x70
 8027430:	9b07      	ldr	r3, [sp, #28]
 8027432:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8027434:	3b01      	subs	r3, #1
 8027436:	9307      	str	r3, [sp, #28]
 8027438:	bf08      	it	eq
 802743a:	4615      	moveq	r5, r2
 802743c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802743e:	bf18      	it	ne
 8027440:	461d      	movne	r5, r3
 8027442:	e6f3      	b.n	802722c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 8027444:	f111 0b01 	adds.w	fp, r1, #1
 8027448:	d48d      	bmi.n	8027366 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 802744a:	45de      	cmp	lr, fp
 802744c:	db8b      	blt.n	8027366 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 802744e:	f110 0b01 	adds.w	fp, r0, #1
 8027452:	d488      	bmi.n	8027366 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8027454:	455b      	cmp	r3, fp
 8027456:	db86      	blt.n	8027366 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8027458:	b21b      	sxth	r3, r3
 802745a:	e9cd 1001 	strd	r1, r0, [sp, #4]
 802745e:	e9cd 2c03 	strd	r2, ip, [sp, #12]
 8027462:	9300      	str	r3, [sp, #0]
 8027464:	4642      	mov	r2, r8
 8027466:	fa0f f38e 	sxth.w	r3, lr
 802746a:	4649      	mov	r1, r9
 802746c:	980d      	ldr	r0, [sp, #52]	; 0x34
 802746e:	f7ff fe4c 	bl	802710a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
 8027472:	e778      	b.n	8027366 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8027474:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8027476:	1420      	asrs	r0, r4, #16
 8027478:	1431      	asrs	r1, r6, #16
 802747a:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 802747e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8027482:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8027486:	fb03 0101 	mla	r1, r3, r1, r0
 802748a:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 802748e:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
 8027492:	8841      	ldrh	r1, [r0, #2]
 8027494:	f1be 0f00 	cmp.w	lr, #0
 8027498:	d00b      	beq.n	80274b2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 802749a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 802749e:	3b01      	subs	r3, #1
 80274a0:	005b      	lsls	r3, r3, #1
 80274a2:	3302      	adds	r3, #2
 80274a4:	eb00 0b03 	add.w	fp, r0, r3
 80274a8:	5ac3      	ldrh	r3, [r0, r3]
 80274aa:	930a      	str	r3, [sp, #40]	; 0x28
 80274ac:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 80274b0:	930b      	str	r3, [sp, #44]	; 0x2c
 80274b2:	ea4f 400c 	mov.w	r0, ip, lsl #16
 80274b6:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 80274ba:	fb12 f30e 	smulbb	r3, r2, lr
 80274be:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 80274c2:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80274c6:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80274ca:	10db      	asrs	r3, r3, #3
 80274cc:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80274d0:	ea40 000c 	orr.w	r0, r0, ip
 80274d4:	f1ce 0c10 	rsb	ip, lr, #16
 80274d8:	ea4b 0101 	orr.w	r1, fp, r1
 80274dc:	f109 39ff 	add.w	r9, r9, #4294967295
 80274e0:	ebac 0c02 	sub.w	ip, ip, r2
 80274e4:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 80274e8:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 80274ec:	4351      	muls	r1, r2
 80274ee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80274f0:	fb0c 1c00 	mla	ip, ip, r0, r1
 80274f4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80274f6:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 80274fa:	f422 60fc 	bic.w	r0, r2, #2016	; 0x7e0
 80274fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8027500:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8027504:	0412      	lsls	r2, r2, #16
 8027506:	ea4b 0000 	orr.w	r0, fp, r0
 802750a:	f421 6bfc 	bic.w	fp, r1, #2016	; 0x7e0
 802750e:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8027512:	fb03 c000 	mla	r0, r3, r0, ip
 8027516:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 802751a:	ea42 0b0b 	orr.w	fp, r2, fp
 802751e:	fb03 000b 	mla	r0, r3, fp, r0
 8027522:	0d43      	lsrs	r3, r0, #21
 8027524:	0940      	lsrs	r0, r0, #5
 8027526:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802752a:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802752e:	4318      	orrs	r0, r3
 8027530:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8027532:	441c      	add	r4, r3
 8027534:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8027536:	f82a 0b02 	strh.w	r0, [sl], #2
 802753a:	441e      	add	r6, r3
 802753c:	e73b      	b.n	80273b6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 802753e:	b00f      	add	sp, #60	; 0x3c
 8027540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08027544 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
 8027544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027548:	b085      	sub	sp, #20
 802754a:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	; 0x3c
 802754e:	9102      	str	r1, [sp, #8]
 8027550:	2c00      	cmp	r4, #0
 8027552:	fb04 7103 	mla	r1, r4, r3, r7
 8027556:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
 802755a:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 802755e:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 8027562:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8027566:	f2c0 811b 	blt.w	80277a0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 802756a:	45a6      	cmp	lr, r4
 802756c:	f340 8118 	ble.w	80277a0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 8027570:	2f00      	cmp	r7, #0
 8027572:	f2c0 8113 	blt.w	802779c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 8027576:	42bb      	cmp	r3, r7
 8027578:	f340 8110 	ble.w	802779c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 802757c:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 8027580:	1c7a      	adds	r2, r7, #1
 8027582:	f100 8110 	bmi.w	80277a6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 8027586:	4293      	cmp	r3, r2
 8027588:	f340 810d 	ble.w	80277a6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 802758c:	2e00      	cmp	r6, #0
 802758e:	f000 810c 	beq.w	80277aa <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x266>
 8027592:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8027596:	3401      	adds	r4, #1
 8027598:	f100 810b 	bmi.w	80277b2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 802759c:	45a6      	cmp	lr, r4
 802759e:	f340 8108 	ble.w	80277b2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 80275a2:	2800      	cmp	r0, #0
 80275a4:	f000 8108 	beq.w	80277b8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x274>
 80275a8:	2f00      	cmp	r7, #0
 80275aa:	f2c0 8100 	blt.w	80277ae <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 80275ae:	42bb      	cmp	r3, r7
 80275b0:	f340 80fd 	ble.w	80277ae <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 80275b4:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 80275b8:	3701      	adds	r7, #1
 80275ba:	f100 8100 	bmi.w	80277be <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 80275be:	42bb      	cmp	r3, r7
 80275c0:	f340 80fd 	ble.w	80277be <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 80275c4:	2e00      	cmp	r6, #0
 80275c6:	f000 80fc 	beq.w	80277c2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27e>
 80275ca:	3301      	adds	r3, #1
 80275cc:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80275d0:	b2b6      	uxth	r6, r6
 80275d2:	b280      	uxth	r0, r0
 80275d4:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 80275d8:	fb00 fe06 	mul.w	lr, r0, r6
 80275dc:	0136      	lsls	r6, r6, #4
 80275de:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 80275e2:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 80275e6:	eba6 070e 	sub.w	r7, r6, lr
 80275ea:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 80275ee:	ea4f 6914 	mov.w	r9, r4, lsr #24
 80275f2:	b280      	uxth	r0, r0
 80275f4:	b2bf      	uxth	r7, r7
 80275f6:	1a1b      	subs	r3, r3, r0
 80275f8:	ea4f 6812 	mov.w	r8, r2, lsr #24
 80275fc:	fb0a f607 	mul.w	r6, sl, r7
 8027600:	b29b      	uxth	r3, r3
 8027602:	fb0b 6603 	mla	r6, fp, r3, r6
 8027606:	fb00 6609 	mla	r6, r0, r9, r6
 802760a:	fb0e 6608 	mla	r6, lr, r8, r6
 802760e:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8027612:	9600      	str	r6, [sp, #0]
 8027614:	2e00      	cmp	r6, #0
 8027616:	f000 80be 	beq.w	8027796 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x252>
 802761a:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802761e:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8027622:	9e02      	ldr	r6, [sp, #8]
 8027624:	fb0b fc0c 	mul.w	ip, fp, ip
 8027628:	fb0b f505 	mul.w	r5, fp, r5
 802762c:	8836      	ldrh	r6, [r6, #0]
 802762e:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8027632:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8027636:	9501      	str	r5, [sp, #4]
 8027638:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 802763c:	44dc      	add	ip, fp
 802763e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027642:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 8027646:	9503      	str	r5, [sp, #12]
 8027648:	9d01      	ldr	r5, [sp, #4]
 802764a:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 802764e:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8027652:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 8027656:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 802765a:	fb0a fc0c 	mul.w	ip, sl, ip
 802765e:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 8027662:	fb0a fa01 	mul.w	sl, sl, r1
 8027666:	ea4f 251c 	mov.w	r5, ip, lsr #8
 802766a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802766e:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 8027672:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8027676:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 802767a:	4465      	add	r5, ip
 802767c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8027680:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8027684:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027688:	fb09 fc0c 	mul.w	ip, r9, ip
 802768c:	0a2d      	lsrs	r5, r5, #8
 802768e:	fb09 f904 	mul.w	r9, r9, r4
 8027692:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027696:	ea4f 211c 	mov.w	r1, ip, lsr #8
 802769a:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802769e:	f509 7480 	add.w	r4, r9, #256	; 0x100
 80276a2:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80276a6:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 80276aa:	437d      	muls	r5, r7
 80276ac:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 80276b0:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 80276b4:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80276b8:	4461      	add	r1, ip
 80276ba:	fb08 f404 	mul.w	r4, r8, r4
 80276be:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80276c2:	fb08 f802 	mul.w	r8, r8, r2
 80276c6:	0a09      	lsrs	r1, r1, #8
 80276c8:	0a22      	lsrs	r2, r4, #8
 80276ca:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 80276ce:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 80276d2:	fb07 f70a 	mul.w	r7, r7, sl
 80276d6:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80276da:	4414      	add	r4, r2
 80276dc:	f508 7280 	add.w	r2, r8, #256	; 0x100
 80276e0:	0a24      	lsrs	r4, r4, #8
 80276e2:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 80276e6:	9a03      	ldr	r2, [sp, #12]
 80276e8:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80276ec:	fb02 5503 	mla	r5, r2, r3, r5
 80276f0:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80276f4:	9a00      	ldr	r2, [sp, #0]
 80276f6:	fb04 540e 	mla	r4, r4, lr, r5
 80276fa:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 80276fe:	1235      	asrs	r5, r6, #8
 8027700:	fb01 4100 	mla	r1, r1, r0, r4
 8027704:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8027708:	0a09      	lsrs	r1, r1, #8
 802770a:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 802770e:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 8027712:	fb03 7101 	mla	r1, r3, r1, r7
 8027716:	fb0e 1e08 	mla	lr, lr, r8, r1
 802771a:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 802771e:	fb00 e101 	mla	r1, r0, r1, lr
 8027722:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 8027726:	b287      	uxth	r7, r0
 8027728:	0a09      	lsrs	r1, r1, #8
 802772a:	437a      	muls	r2, r7
 802772c:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8027730:	1c53      	adds	r3, r2, #1
 8027732:	4321      	orrs	r1, r4
 8027734:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8027738:	0c0a      	lsrs	r2, r1, #16
 802773a:	f3c1 2407 	ubfx	r4, r1, #8, #8
 802773e:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 8027742:	b2c8      	uxtb	r0, r1
 8027744:	fb12 f207 	smulbb	r2, r2, r7
 8027748:	fb14 f407 	smulbb	r4, r4, r7
 802774c:	b2db      	uxtb	r3, r3
 802774e:	fb10 f007 	smulbb	r0, r0, r7
 8027752:	fb05 2503 	mla	r5, r5, r3, r2
 8027756:	10f2      	asrs	r2, r6, #3
 8027758:	00f6      	lsls	r6, r6, #3
 802775a:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 802775e:	b2ad      	uxth	r5, r5
 8027760:	b2f6      	uxtb	r6, r6
 8027762:	fb02 4203 	mla	r2, r2, r3, r4
 8027766:	fb06 0303 	mla	r3, r6, r3, r0
 802776a:	b294      	uxth	r4, r2
 802776c:	b299      	uxth	r1, r3
 802776e:	1c6b      	adds	r3, r5, #1
 8027770:	1c62      	adds	r2, r4, #1
 8027772:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8027776:	1c4b      	adds	r3, r1, #1
 8027778:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 802777c:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8027780:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8027784:	0952      	lsrs	r2, r2, #5
 8027786:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802778a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802778e:	432b      	orrs	r3, r5
 8027790:	4313      	orrs	r3, r2
 8027792:	9a02      	ldr	r2, [sp, #8]
 8027794:	8013      	strh	r3, [r2, #0]
 8027796:	b005      	add	sp, #20
 8027798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802779c:	2500      	movs	r5, #0
 802779e:	e6ef      	b.n	8027580 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3c>
 80277a0:	2100      	movs	r1, #0
 80277a2:	460d      	mov	r5, r1
 80277a4:	e6f7      	b.n	8027596 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 80277a6:	2100      	movs	r1, #0
 80277a8:	e6f5      	b.n	8027596 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 80277aa:	4631      	mov	r1, r6
 80277ac:	e6f3      	b.n	8027596 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 80277ae:	2400      	movs	r4, #0
 80277b0:	e702      	b.n	80275b8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x74>
 80277b2:	2200      	movs	r2, #0
 80277b4:	4614      	mov	r4, r2
 80277b6:	e70b      	b.n	80275d0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 80277b8:	4602      	mov	r2, r0
 80277ba:	4604      	mov	r4, r0
 80277bc:	e708      	b.n	80275d0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 80277be:	2200      	movs	r2, #0
 80277c0:	e706      	b.n	80275d0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 80277c2:	4632      	mov	r2, r6
 80277c4:	e704      	b.n	80275d0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>

080277c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80277c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80277ca:	b09d      	sub	sp, #116	; 0x74
 80277cc:	9219      	str	r2, [sp, #100]	; 0x64
 80277ce:	9307      	str	r3, [sp, #28]
 80277d0:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80277d2:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 80277d6:	901b      	str	r0, [sp, #108]	; 0x6c
 80277d8:	931a      	str	r3, [sp, #104]	; 0x68
 80277da:	6850      	ldr	r0, [r2, #4]
 80277dc:	9117      	str	r1, [sp, #92]	; 0x5c
 80277de:	6812      	ldr	r2, [r2, #0]
 80277e0:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 80277e4:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
 80277e8:	fb00 1303 	mla	r3, r0, r3, r1
 80277ec:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80277f0:	930a      	str	r3, [sp, #40]	; 0x28
 80277f2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80277f4:	681b      	ldr	r3, [r3, #0]
 80277f6:	9310      	str	r3, [sp, #64]	; 0x40
 80277f8:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 80277fc:	930b      	str	r3, [sp, #44]	; 0x2c
 80277fe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8027800:	2b00      	cmp	r3, #0
 8027802:	dc03      	bgt.n	802780c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 8027804:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8027806:	2b00      	cmp	r3, #0
 8027808:	f340 8375 	ble.w	8027ef6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 802780c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802780e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027812:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8027816:	1e48      	subs	r0, r1, #1
 8027818:	1e57      	subs	r7, r2, #1
 802781a:	9b07      	ldr	r3, [sp, #28]
 802781c:	2b00      	cmp	r3, #0
 802781e:	f340 818e 	ble.w	8027b3e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 8027822:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8027826:	ea4f 4326 	mov.w	r3, r6, asr #16
 802782a:	d406      	bmi.n	802783a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 802782c:	4584      	cmp	ip, r0
 802782e:	da04      	bge.n	802783a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8027830:	2b00      	cmp	r3, #0
 8027832:	db02      	blt.n	802783a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8027834:	42bb      	cmp	r3, r7
 8027836:	f2c0 8183 	blt.w	8027b40 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 802783a:	f11c 0c01 	adds.w	ip, ip, #1
 802783e:	f100 8173 	bmi.w	8027b28 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8027842:	4561      	cmp	r1, ip
 8027844:	f2c0 8170 	blt.w	8027b28 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8027848:	3301      	adds	r3, #1
 802784a:	f100 816d 	bmi.w	8027b28 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 802784e:	429a      	cmp	r2, r3
 8027850:	f2c0 816a 	blt.w	8027b28 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8027854:	9b07      	ldr	r3, [sp, #28]
 8027856:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8027858:	9318      	str	r3, [sp, #96]	; 0x60
 802785a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802785c:	2b00      	cmp	r3, #0
 802785e:	f340 818c 	ble.w	8027b7a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 8027862:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8027864:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8027868:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802786a:	f3c4 3003 	ubfx	r0, r4, #12, #4
 802786e:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8027872:	1422      	asrs	r2, r4, #16
 8027874:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8027878:	689b      	ldr	r3, [r3, #8]
 802787a:	f100 81cd 	bmi.w	8027c18 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 802787e:	f103 38ff 	add.w	r8, r3, #4294967295
 8027882:	4542      	cmp	r2, r8
 8027884:	f280 81c8 	bge.w	8027c18 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8027888:	f1bc 0f00 	cmp.w	ip, #0
 802788c:	f2c0 81c4 	blt.w	8027c18 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8027890:	f10e 38ff 	add.w	r8, lr, #4294967295
 8027894:	45c4      	cmp	ip, r8
 8027896:	f280 81bf 	bge.w	8027c18 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 802789a:	b21b      	sxth	r3, r3
 802789c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802789e:	fb0c 2203 	mla	r2, ip, r3, r2
 80278a2:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 80278a6:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80278aa:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 80278ae:	2800      	cmp	r0, #0
 80278b0:	f000 81a9 	beq.w	8027c06 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x440>
 80278b4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80278b8:	950c      	str	r5, [sp, #48]	; 0x30
 80278ba:	0e2d      	lsrs	r5, r5, #24
 80278bc:	9513      	str	r5, [sp, #76]	; 0x4c
 80278be:	b181      	cbz	r1, 80278e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 80278c0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80278c4:	3b01      	subs	r3, #1
 80278c6:	009b      	lsls	r3, r3, #2
 80278c8:	3304      	adds	r3, #4
 80278ca:	eb08 0c03 	add.w	ip, r8, r3
 80278ce:	f858 3003 	ldr.w	r3, [r8, r3]
 80278d2:	9308      	str	r3, [sp, #32]
 80278d4:	0e1b      	lsrs	r3, r3, #24
 80278d6:	9311      	str	r3, [sp, #68]	; 0x44
 80278d8:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80278dc:	930d      	str	r3, [sp, #52]	; 0x34
 80278de:	0e1b      	lsrs	r3, r3, #24
 80278e0:	9314      	str	r3, [sp, #80]	; 0x50
 80278e2:	b280      	uxth	r0, r0
 80278e4:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80278e6:	b289      	uxth	r1, r1
 80278e8:	fb00 f901 	mul.w	r9, r0, r1
 80278ec:	0100      	lsls	r0, r0, #4
 80278ee:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80278f2:	eba0 0809 	sub.w	r8, r0, r9
 80278f6:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 80278fa:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80278fc:	b289      	uxth	r1, r1
 80278fe:	fa1f f888 	uxth.w	r8, r8
 8027902:	1a5b      	subs	r3, r3, r1
 8027904:	fb08 f000 	mul.w	r0, r8, r0
 8027908:	b29b      	uxth	r3, r3
 802790a:	fb03 000e 	mla	r0, r3, lr, r0
 802790e:	fb01 0005 	mla	r0, r1, r5, r0
 8027912:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8027914:	fb09 0005 	mla	r0, r9, r5, r0
 8027918:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802791c:	2800      	cmp	r0, #0
 802791e:	f000 80fa 	beq.w	8027b16 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8027922:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8027926:	d01b      	beq.n	8027960 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8027928:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 802792c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8027930:	fb0e fa0a 	mul.w	sl, lr, sl
 8027934:	fb0e fe02 	mul.w	lr, lr, r2
 8027938:	ea4f 221a 	mov.w	r2, sl, lsr #8
 802793c:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8027940:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8027944:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8027948:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 802794c:	4452      	add	r2, sl
 802794e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027952:	0a12      	lsrs	r2, r2, #8
 8027954:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8027958:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802795c:	ea42 020c 	orr.w	r2, r2, ip
 8027960:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8027962:	2dff      	cmp	r5, #255	; 0xff
 8027964:	d021      	beq.n	80279aa <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 8027966:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8027968:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 802796c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802796e:	fb05 fb0b 	mul.w	fp, r5, fp
 8027972:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8027974:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8027978:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802797a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802797e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8027982:	fb05 fa0a 	mul.w	sl, r5, sl
 8027986:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802798a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802798e:	44de      	add	lr, fp
 8027990:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8027994:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027998:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802799c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80279a0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80279a4:	ea4e 050a 	orr.w	r5, lr, sl
 80279a8:	950c      	str	r5, [sp, #48]	; 0x30
 80279aa:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80279ac:	2dff      	cmp	r5, #255	; 0xff
 80279ae:	d021      	beq.n	80279f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 80279b0:	9d08      	ldr	r5, [sp, #32]
 80279b2:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 80279b6:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80279b8:	fb05 fb0b 	mul.w	fp, r5, fp
 80279bc:	9d08      	ldr	r5, [sp, #32]
 80279be:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80279c2:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80279c4:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80279c8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80279cc:	fb05 fa0a 	mul.w	sl, r5, sl
 80279d0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80279d4:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80279d8:	44de      	add	lr, fp
 80279da:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80279de:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80279e2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80279e6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80279ea:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80279ee:	ea4e 050a 	orr.w	r5, lr, sl
 80279f2:	9508      	str	r5, [sp, #32]
 80279f4:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80279f6:	2dff      	cmp	r5, #255	; 0xff
 80279f8:	d021      	beq.n	8027a3e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 80279fa:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80279fc:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8027a00:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8027a02:	fb05 fb0b 	mul.w	fp, r5, fp
 8027a06:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8027a08:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8027a0c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8027a0e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8027a12:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8027a16:	fb05 fa0a 	mul.w	sl, r5, sl
 8027a1a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027a1e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8027a22:	44de      	add	lr, fp
 8027a24:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8027a28:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027a2c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027a30:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027a34:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027a38:	ea4e 050a 	orr.w	r5, lr, sl
 8027a3c:	950d      	str	r5, [sp, #52]	; 0x34
 8027a3e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8027a40:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8027a44:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8027a48:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8027a4c:	9d08      	ldr	r5, [sp, #32]
 8027a4e:	fb08 fc0c 	mul.w	ip, r8, ip
 8027a52:	fb03 cc0e 	mla	ip, r3, lr, ip
 8027a56:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8027a5a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8027a5c:	fb01 cc0e 	mla	ip, r1, lr, ip
 8027a60:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8027a64:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8027a66:	fb09 cc0e 	mla	ip, r9, lr, ip
 8027a6a:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8027a6e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8027a70:	fb08 f80e 	mul.w	r8, r8, lr
 8027a74:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027a78:	fb03 8202 	mla	r2, r3, r2, r8
 8027a7c:	9b08      	ldr	r3, [sp, #32]
 8027a7e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027a82:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 8027a86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8027a88:	fb01 220a 	mla	r2, r1, sl, r2
 8027a8c:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 8027a90:	883b      	ldrh	r3, [r7, #0]
 8027a92:	fb09 2901 	mla	r9, r9, r1, r2
 8027a96:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8027a98:	1219      	asrs	r1, r3, #8
 8027a9a:	4342      	muls	r2, r0
 8027a9c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8027aa0:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8027aa4:	1c50      	adds	r0, r2, #1
 8027aa6:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8027aaa:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8027aae:	ea4c 0c09 	orr.w	ip, ip, r9
 8027ab2:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8027ab6:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8027aba:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 8027abe:	fa5f fc8c 	uxtb.w	ip, ip
 8027ac2:	fb12 f205 	smulbb	r2, r2, r5
 8027ac6:	b2c0      	uxtb	r0, r0
 8027ac8:	fb1c fc05 	smulbb	ip, ip, r5
 8027acc:	fb01 2100 	mla	r1, r1, r0, r2
 8027ad0:	10da      	asrs	r2, r3, #3
 8027ad2:	fb1e fe05 	smulbb	lr, lr, r5
 8027ad6:	00db      	lsls	r3, r3, #3
 8027ad8:	b289      	uxth	r1, r1
 8027ada:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8027ade:	b2db      	uxtb	r3, r3
 8027ae0:	fb02 e200 	mla	r2, r2, r0, lr
 8027ae4:	fb03 c300 	mla	r3, r3, r0, ip
 8027ae8:	b292      	uxth	r2, r2
 8027aea:	fa1f fc83 	uxth.w	ip, r3
 8027aee:	1c4b      	adds	r3, r1, #1
 8027af0:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8027af4:	f10c 0301 	add.w	r3, ip, #1
 8027af8:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8027afc:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8027b00:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8027b04:	430b      	orrs	r3, r1
 8027b06:	1c51      	adds	r1, r2, #1
 8027b08:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8027b0c:	0952      	lsrs	r2, r2, #5
 8027b0e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8027b12:	4313      	orrs	r3, r2
 8027b14:	803b      	strh	r3, [r7, #0]
 8027b16:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8027b18:	3702      	adds	r7, #2
 8027b1a:	441c      	add	r4, r3
 8027b1c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8027b1e:	441e      	add	r6, r3
 8027b20:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8027b22:	3b01      	subs	r3, #1
 8027b24:	9318      	str	r3, [sp, #96]	; 0x60
 8027b26:	e698      	b.n	802785a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8027b28:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8027b2a:	441c      	add	r4, r3
 8027b2c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8027b2e:	441e      	add	r6, r3
 8027b30:	9b07      	ldr	r3, [sp, #28]
 8027b32:	3b01      	subs	r3, #1
 8027b34:	9307      	str	r3, [sp, #28]
 8027b36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027b38:	3302      	adds	r3, #2
 8027b3a:	930a      	str	r3, [sp, #40]	; 0x28
 8027b3c:	e66d      	b.n	802781a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8027b3e:	d023      	beq.n	8027b88 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 8027b40:	9b07      	ldr	r3, [sp, #28]
 8027b42:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8027b44:	3b01      	subs	r3, #1
 8027b46:	fb00 4003 	mla	r0, r0, r3, r4
 8027b4a:	1400      	asrs	r0, r0, #16
 8027b4c:	f53f ae82 	bmi.w	8027854 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8027b50:	3901      	subs	r1, #1
 8027b52:	4288      	cmp	r0, r1
 8027b54:	f6bf ae7e 	bge.w	8027854 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8027b58:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8027b5a:	fb01 6303 	mla	r3, r1, r3, r6
 8027b5e:	141b      	asrs	r3, r3, #16
 8027b60:	f53f ae78 	bmi.w	8027854 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8027b64:	3a01      	subs	r2, #1
 8027b66:	4293      	cmp	r3, r2
 8027b68:	f6bf ae74 	bge.w	8027854 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8027b6c:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8027b70:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8027b74:	f1bb 0f00 	cmp.w	fp, #0
 8027b78:	dc6c      	bgt.n	8027c54 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 8027b7a:	9b07      	ldr	r3, [sp, #28]
 8027b7c:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8027b80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027b82:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8027b86:	930a      	str	r3, [sp, #40]	; 0x28
 8027b88:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8027b8a:	2b00      	cmp	r3, #0
 8027b8c:	f340 81b3 	ble.w	8027ef6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 8027b90:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8027b94:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8027b96:	ee30 0a04 	vadd.f32	s0, s0, s8
 8027b9a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8027b9e:	eef0 6a62 	vmov.f32	s13, s5
 8027ba2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8027ba6:	ee31 1a05 	vadd.f32	s2, s2, s10
 8027baa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027bae:	ee16 4a90 	vmov	r4, s13
 8027bb2:	eef0 6a43 	vmov.f32	s13, s6
 8027bb6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027bba:	ee16 6a90 	vmov	r6, s13
 8027bbe:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8027bc2:	ee61 7a27 	vmul.f32	s15, s2, s15
 8027bc6:	ee77 2a62 	vsub.f32	s5, s14, s5
 8027bca:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8027bce:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8027bd2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8027bd6:	ee12 2a90 	vmov	r2, s5
 8027bda:	eef0 2a47 	vmov.f32	s5, s14
 8027bde:	fb92 f3f3 	sdiv	r3, r2, r3
 8027be2:	ee13 2a10 	vmov	r2, s6
 8027be6:	9329      	str	r3, [sp, #164]	; 0xa4
 8027be8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8027bea:	eeb0 3a67 	vmov.f32	s6, s15
 8027bee:	fb92 f3f3 	sdiv	r3, r2, r3
 8027bf2:	932a      	str	r3, [sp, #168]	; 0xa8
 8027bf4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8027bf6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8027bf8:	3b01      	subs	r3, #1
 8027bfa:	9317      	str	r3, [sp, #92]	; 0x5c
 8027bfc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8027bfe:	bf08      	it	eq
 8027c00:	4613      	moveq	r3, r2
 8027c02:	9307      	str	r3, [sp, #28]
 8027c04:	e5fb      	b.n	80277fe <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8027c06:	2900      	cmp	r1, #0
 8027c08:	f43f ae6b 	beq.w	80278e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8027c0c:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8027c10:	9308      	str	r3, [sp, #32]
 8027c12:	0e1b      	lsrs	r3, r3, #24
 8027c14:	9311      	str	r3, [sp, #68]	; 0x44
 8027c16:	e664      	b.n	80278e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8027c18:	f112 0801 	adds.w	r8, r2, #1
 8027c1c:	f53f af7b 	bmi.w	8027b16 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8027c20:	4543      	cmp	r3, r8
 8027c22:	f6ff af78 	blt.w	8027b16 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8027c26:	f11c 0801 	adds.w	r8, ip, #1
 8027c2a:	f53f af74 	bmi.w	8027b16 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8027c2e:	45c6      	cmp	lr, r8
 8027c30:	f6ff af71 	blt.w	8027b16 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8027c34:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8027c36:	b21b      	sxth	r3, r3
 8027c38:	9201      	str	r2, [sp, #4]
 8027c3a:	fa0f f28e 	sxth.w	r2, lr
 8027c3e:	e9cd 1504 	strd	r1, r5, [sp, #16]
 8027c42:	e9cd c002 	strd	ip, r0, [sp, #8]
 8027c46:	9200      	str	r2, [sp, #0]
 8027c48:	4639      	mov	r1, r7
 8027c4a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8027c4c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8027c4e:	f7ff fc79 	bl	8027544 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
 8027c52:	e760      	b.n	8027b16 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8027c54:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8027c56:	1427      	asrs	r7, r4, #16
 8027c58:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8027c5a:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8027c5e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027c62:	1433      	asrs	r3, r6, #16
 8027c64:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8027c68:	fb01 7303 	mla	r3, r1, r3, r7
 8027c6c:	eb05 0783 	add.w	r7, r5, r3, lsl #2
 8027c70:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8027c74:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8027c78:	2a00      	cmp	r2, #0
 8027c7a:	f000 8133 	beq.w	8027ee4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x71e>
 8027c7e:	687d      	ldr	r5, [r7, #4]
 8027c80:	950e      	str	r5, [sp, #56]	; 0x38
 8027c82:	0e2d      	lsrs	r5, r5, #24
 8027c84:	9515      	str	r5, [sp, #84]	; 0x54
 8027c86:	b178      	cbz	r0, 8027ca8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 8027c88:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8027c8c:	3901      	subs	r1, #1
 8027c8e:	0089      	lsls	r1, r1, #2
 8027c90:	3104      	adds	r1, #4
 8027c92:	eb07 0e01 	add.w	lr, r7, r1
 8027c96:	5879      	ldr	r1, [r7, r1]
 8027c98:	9109      	str	r1, [sp, #36]	; 0x24
 8027c9a:	0e09      	lsrs	r1, r1, #24
 8027c9c:	9112      	str	r1, [sp, #72]	; 0x48
 8027c9e:	f8de 1004 	ldr.w	r1, [lr, #4]
 8027ca2:	910f      	str	r1, [sp, #60]	; 0x3c
 8027ca4:	0e09      	lsrs	r1, r1, #24
 8027ca6:	9116      	str	r1, [sp, #88]	; 0x58
 8027ca8:	b292      	uxth	r2, r2
 8027caa:	9915      	ldr	r1, [sp, #84]	; 0x54
 8027cac:	b280      	uxth	r0, r0
 8027cae:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8027cb0:	fb02 f800 	mul.w	r8, r2, r0
 8027cb4:	0112      	lsls	r2, r2, #4
 8027cb6:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8027cba:	eba2 0e08 	sub.w	lr, r2, r8
 8027cbe:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8027cc2:	b280      	uxth	r0, r0
 8027cc4:	fa1f fe8e 	uxth.w	lr, lr
 8027cc8:	1a12      	subs	r2, r2, r0
 8027cca:	fb0e f101 	mul.w	r1, lr, r1
 8027cce:	b292      	uxth	r2, r2
 8027cd0:	fb02 110c 	mla	r1, r2, ip, r1
 8027cd4:	fb00 1105 	mla	r1, r0, r5, r1
 8027cd8:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8027cda:	fb08 1105 	mla	r1, r8, r5, r1
 8027cde:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8027ce2:	2900      	cmp	r1, #0
 8027ce4:	f000 80f5 	beq.w	8027ed2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70c>
 8027ce8:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8027cec:	d019      	beq.n	8027d22 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55c>
 8027cee:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8027cf2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8027cf6:	fb0c fa0a 	mul.w	sl, ip, sl
 8027cfa:	fb0c fc03 	mul.w	ip, ip, r3
 8027cfe:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8027d02:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8027d06:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8027d0a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8027d0e:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8027d12:	4453      	add	r3, sl
 8027d14:	0a3f      	lsrs	r7, r7, #8
 8027d16:	0a1b      	lsrs	r3, r3, #8
 8027d18:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8027d1c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8027d20:	433b      	orrs	r3, r7
 8027d22:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8027d24:	2dff      	cmp	r5, #255	; 0xff
 8027d26:	d020      	beq.n	8027d6a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a4>
 8027d28:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8027d2a:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8027d2e:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8027d30:	436f      	muls	r7, r5
 8027d32:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8027d34:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8027d38:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8027d3c:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8027d3e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8027d42:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027d46:	fb05 fa0a 	mul.w	sl, r5, sl
 8027d4a:	44bc      	add	ip, r7
 8027d4c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8027d50:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027d54:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8027d58:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027d5c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027d60:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027d64:	ea4c 050a 	orr.w	r5, ip, sl
 8027d68:	950e      	str	r5, [sp, #56]	; 0x38
 8027d6a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8027d6c:	2dff      	cmp	r5, #255	; 0xff
 8027d6e:	d020      	beq.n	8027db2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ec>
 8027d70:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8027d72:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8027d76:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8027d78:	436f      	muls	r7, r5
 8027d7a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8027d7c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8027d80:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8027d84:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8027d86:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8027d8a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027d8e:	fb05 fa0a 	mul.w	sl, r5, sl
 8027d92:	44bc      	add	ip, r7
 8027d94:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8027d98:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027d9c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8027da0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027da4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027da8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027dac:	ea4c 050a 	orr.w	r5, ip, sl
 8027db0:	9509      	str	r5, [sp, #36]	; 0x24
 8027db2:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8027db4:	2dff      	cmp	r5, #255	; 0xff
 8027db6:	d020      	beq.n	8027dfa <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x634>
 8027db8:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8027dba:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8027dbe:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8027dc0:	436f      	muls	r7, r5
 8027dc2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8027dc4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8027dc8:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8027dcc:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8027dce:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8027dd2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027dd6:	fb05 fa0a 	mul.w	sl, r5, sl
 8027dda:	44bc      	add	ip, r7
 8027ddc:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8027de0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027de4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8027de8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027dec:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027df0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027df4:	ea4c 050a 	orr.w	r5, ip, sl
 8027df8:	950f      	str	r5, [sp, #60]	; 0x3c
 8027dfa:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8027dfc:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8027e00:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8027e04:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8027e08:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8027e0a:	fb0e f707 	mul.w	r7, lr, r7
 8027e0e:	fb02 770c 	mla	r7, r2, ip, r7
 8027e12:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8027e16:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8027e18:	fb00 770c 	mla	r7, r0, ip, r7
 8027e1c:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8027e20:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8027e22:	fb08 770c 	mla	r7, r8, ip, r7
 8027e26:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8027e2a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8027e2c:	fb0e fe0c 	mul.w	lr, lr, ip
 8027e30:	0a3f      	lsrs	r7, r7, #8
 8027e32:	fb02 e303 	mla	r3, r2, r3, lr
 8027e36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8027e38:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8027e3c:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8027e40:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8027e42:	fb00 330a 	mla	r3, r0, sl, r3
 8027e46:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8027e4a:	f8b9 0000 	ldrh.w	r0, [r9]
 8027e4e:	fb08 3c0c 	mla	ip, r8, ip, r3
 8027e52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8027e54:	1202      	asrs	r2, r0, #8
 8027e56:	4359      	muls	r1, r3
 8027e58:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027e5c:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8027e60:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8027e64:	1c4b      	adds	r3, r1, #1
 8027e66:	ea47 070c 	orr.w	r7, r7, ip
 8027e6a:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8027e6e:	0c3b      	lsrs	r3, r7, #16
 8027e70:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8027e74:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 8027e78:	b2ff      	uxtb	r7, r7
 8027e7a:	fb13 f305 	smulbb	r3, r3, r5
 8027e7e:	b2c9      	uxtb	r1, r1
 8027e80:	fb17 f705 	smulbb	r7, r7, r5
 8027e84:	fb02 3201 	mla	r2, r2, r1, r3
 8027e88:	10c3      	asrs	r3, r0, #3
 8027e8a:	fb1c fc05 	smulbb	ip, ip, r5
 8027e8e:	00c0      	lsls	r0, r0, #3
 8027e90:	b292      	uxth	r2, r2
 8027e92:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8027e96:	b2c0      	uxtb	r0, r0
 8027e98:	fb03 c301 	mla	r3, r3, r1, ip
 8027e9c:	fb00 7001 	mla	r0, r0, r1, r7
 8027ea0:	1c51      	adds	r1, r2, #1
 8027ea2:	b29b      	uxth	r3, r3
 8027ea4:	b280      	uxth	r0, r0
 8027ea6:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8027eaa:	f100 0c01 	add.w	ip, r0, #1
 8027eae:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 8027eb2:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
 8027eb6:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8027eba:	ea4c 0202 	orr.w	r2, ip, r2
 8027ebe:	f103 0c01 	add.w	ip, r3, #1
 8027ec2:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8027ec6:	095b      	lsrs	r3, r3, #5
 8027ec8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8027ecc:	431a      	orrs	r2, r3
 8027ece:	f8a9 2000 	strh.w	r2, [r9]
 8027ed2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8027ed4:	f109 0902 	add.w	r9, r9, #2
 8027ed8:	f10b 3bff 	add.w	fp, fp, #4294967295
 8027edc:	441c      	add	r4, r3
 8027ede:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8027ee0:	441e      	add	r6, r3
 8027ee2:	e647      	b.n	8027b74 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8027ee4:	2800      	cmp	r0, #0
 8027ee6:	f43f aedf 	beq.w	8027ca8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 8027eea:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8027eee:	9109      	str	r1, [sp, #36]	; 0x24
 8027ef0:	0e09      	lsrs	r1, r1, #24
 8027ef2:	9112      	str	r1, [sp, #72]	; 0x48
 8027ef4:	e6d8      	b.n	8027ca8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 8027ef6:	b01d      	add	sp, #116	; 0x74
 8027ef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08027efc <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
 8027efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027f00:	b085      	sub	sp, #20
 8027f02:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	; 0x3c
 8027f06:	9102      	str	r1, [sp, #8]
 8027f08:	2c00      	cmp	r4, #0
 8027f0a:	fb04 7103 	mla	r1, r4, r3, r7
 8027f0e:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
 8027f12:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 8027f16:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 8027f1a:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8027f1e:	f2c0 810c 	blt.w	802813a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 8027f22:	45a6      	cmp	lr, r4
 8027f24:	f340 8109 	ble.w	802813a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 8027f28:	2f00      	cmp	r7, #0
 8027f2a:	f2c0 8104 	blt.w	8028136 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 8027f2e:	42bb      	cmp	r3, r7
 8027f30:	f340 8101 	ble.w	8028136 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 8027f34:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 8027f38:	1c7a      	adds	r2, r7, #1
 8027f3a:	f100 8101 	bmi.w	8028140 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 8027f3e:	4293      	cmp	r3, r2
 8027f40:	f340 80fe 	ble.w	8028140 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 8027f44:	2e00      	cmp	r6, #0
 8027f46:	f000 80fd 	beq.w	8028144 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x248>
 8027f4a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8027f4e:	3401      	adds	r4, #1
 8027f50:	f100 80fc 	bmi.w	802814c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 8027f54:	45a6      	cmp	lr, r4
 8027f56:	f340 80f9 	ble.w	802814c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 8027f5a:	2800      	cmp	r0, #0
 8027f5c:	f000 80f9 	beq.w	8028152 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x256>
 8027f60:	2f00      	cmp	r7, #0
 8027f62:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
 8027f66:	f2c0 80ef 	blt.w	8028148 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 8027f6a:	42bb      	cmp	r3, r7
 8027f6c:	f340 80ec 	ble.w	8028148 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 8027f70:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8027f74:	3701      	adds	r7, #1
 8027f76:	f100 80ef 	bmi.w	8028158 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 8027f7a:	42bb      	cmp	r3, r7
 8027f7c:	f340 80ec 	ble.w	8028158 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 8027f80:	2e00      	cmp	r6, #0
 8027f82:	f000 80eb 	beq.w	802815c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x260>
 8027f86:	6852      	ldr	r2, [r2, #4]
 8027f88:	b2b6      	uxth	r6, r6
 8027f8a:	b280      	uxth	r0, r0
 8027f8c:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 8027f90:	fb00 fe06 	mul.w	lr, r0, r6
 8027f94:	0136      	lsls	r6, r6, #4
 8027f96:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 8027f9a:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 8027f9e:	eba6 070e 	sub.w	r7, r6, lr
 8027fa2:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 8027fa6:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8027faa:	b280      	uxth	r0, r0
 8027fac:	b2bf      	uxth	r7, r7
 8027fae:	1a1b      	subs	r3, r3, r0
 8027fb0:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8027fb4:	fb07 f60a 	mul.w	r6, r7, sl
 8027fb8:	b29b      	uxth	r3, r3
 8027fba:	fb0b 6603 	mla	r6, fp, r3, r6
 8027fbe:	fb00 6609 	mla	r6, r0, r9, r6
 8027fc2:	fb0e 6608 	mla	r6, lr, r8, r6
 8027fc6:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8027fca:	9600      	str	r6, [sp, #0]
 8027fcc:	2e00      	cmp	r6, #0
 8027fce:	f000 80af 	beq.w	8028130 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x234>
 8027fd2:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8027fd6:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8027fda:	9e02      	ldr	r6, [sp, #8]
 8027fdc:	fb0b fc0c 	mul.w	ip, fp, ip
 8027fe0:	fb0b f505 	mul.w	r5, fp, r5
 8027fe4:	8836      	ldrh	r6, [r6, #0]
 8027fe6:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8027fea:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8027fee:	9501      	str	r5, [sp, #4]
 8027ff0:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8027ff4:	44dc      	add	ip, fp
 8027ff6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027ffa:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 8027ffe:	9503      	str	r5, [sp, #12]
 8028000:	9d01      	ldr	r5, [sp, #4]
 8028002:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 8028006:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 802800a:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 802800e:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8028012:	fb0a fc0c 	mul.w	ip, sl, ip
 8028016:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 802801a:	fb0a fa01 	mul.w	sl, sl, r1
 802801e:	ea4f 251c 	mov.w	r5, ip, lsr #8
 8028022:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8028026:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 802802a:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802802e:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 8028032:	4465      	add	r5, ip
 8028034:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8028038:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802803c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028040:	fb09 fc0c 	mul.w	ip, r9, ip
 8028044:	0a2d      	lsrs	r5, r5, #8
 8028046:	fb09 f904 	mul.w	r9, r9, r4
 802804a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802804e:	ea4f 211c 	mov.w	r1, ip, lsr #8
 8028052:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8028056:	f509 7480 	add.w	r4, r9, #256	; 0x100
 802805a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802805e:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8028062:	437d      	muls	r5, r7
 8028064:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8028068:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 802806c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8028070:	4461      	add	r1, ip
 8028072:	fb08 f404 	mul.w	r4, r8, r4
 8028076:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802807a:	fb08 f802 	mul.w	r8, r8, r2
 802807e:	0a09      	lsrs	r1, r1, #8
 8028080:	0a22      	lsrs	r2, r4, #8
 8028082:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 8028086:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 802808a:	fb07 f70a 	mul.w	r7, r7, sl
 802808e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8028092:	4414      	add	r4, r2
 8028094:	f508 7280 	add.w	r2, r8, #256	; 0x100
 8028098:	0a24      	lsrs	r4, r4, #8
 802809a:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 802809e:	9a03      	ldr	r2, [sp, #12]
 80280a0:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80280a4:	fb02 5503 	mla	r5, r2, r3, r5
 80280a8:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80280ac:	fb04 540e 	mla	r4, r4, lr, r5
 80280b0:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 80280b4:	fb01 4100 	mla	r1, r1, r0, r4
 80280b8:	0a09      	lsrs	r1, r1, #8
 80280ba:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 80280be:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 80280c2:	fb03 7101 	mla	r1, r3, r1, r7
 80280c6:	9b00      	ldr	r3, [sp, #0]
 80280c8:	fb0e 1e08 	mla	lr, lr, r8, r1
 80280cc:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 80280d0:	43da      	mvns	r2, r3
 80280d2:	1233      	asrs	r3, r6, #8
 80280d4:	fb00 e101 	mla	r1, r0, r1, lr
 80280d8:	10f0      	asrs	r0, r6, #3
 80280da:	b2d2      	uxtb	r2, r2
 80280dc:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80280e0:	0a09      	lsrs	r1, r1, #8
 80280e2:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80280e6:	00f6      	lsls	r6, r6, #3
 80280e8:	4353      	muls	r3, r2
 80280ea:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 80280ee:	4350      	muls	r0, r2
 80280f0:	b2f6      	uxtb	r6, r6
 80280f2:	4321      	orrs	r1, r4
 80280f4:	4356      	muls	r6, r2
 80280f6:	1c5a      	adds	r2, r3, #1
 80280f8:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80280fc:	0c0b      	lsrs	r3, r1, #16
 80280fe:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8028102:	1c42      	adds	r2, r0, #1
 8028104:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8028108:	0a0a      	lsrs	r2, r1, #8
 802810a:	021b      	lsls	r3, r3, #8
 802810c:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8028110:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8028114:	00d2      	lsls	r2, r2, #3
 8028116:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802811a:	4313      	orrs	r3, r2
 802811c:	1c72      	adds	r2, r6, #1
 802811e:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 8028122:	eb01 2116 	add.w	r1, r1, r6, lsr #8
 8028126:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 802812a:	4319      	orrs	r1, r3
 802812c:	9b02      	ldr	r3, [sp, #8]
 802812e:	8019      	strh	r1, [r3, #0]
 8028130:	b005      	add	sp, #20
 8028132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028136:	2500      	movs	r5, #0
 8028138:	e6fe      	b.n	8027f38 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3c>
 802813a:	2100      	movs	r1, #0
 802813c:	460d      	mov	r5, r1
 802813e:	e706      	b.n	8027f4e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 8028140:	2100      	movs	r1, #0
 8028142:	e704      	b.n	8027f4e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 8028144:	4631      	mov	r1, r6
 8028146:	e702      	b.n	8027f4e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 8028148:	2400      	movs	r4, #0
 802814a:	e713      	b.n	8027f74 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x78>
 802814c:	2200      	movs	r2, #0
 802814e:	4614      	mov	r4, r2
 8028150:	e71a      	b.n	8027f88 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8028152:	4602      	mov	r2, r0
 8028154:	4604      	mov	r4, r0
 8028156:	e717      	b.n	8027f88 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8028158:	2200      	movs	r2, #0
 802815a:	e715      	b.n	8027f88 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 802815c:	4632      	mov	r2, r6
 802815e:	e713      	b.n	8027f88 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>

08028160 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8028160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028164:	b09b      	sub	sp, #108	; 0x6c
 8028166:	9218      	str	r2, [sp, #96]	; 0x60
 8028168:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802816a:	9019      	str	r0, [sp, #100]	; 0x64
 802816c:	9116      	str	r1, [sp, #88]	; 0x58
 802816e:	6850      	ldr	r0, [r2, #4]
 8028170:	9307      	str	r3, [sp, #28]
 8028172:	6812      	ldr	r2, [r2, #0]
 8028174:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8028178:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
 802817c:	fb00 1303 	mla	r3, r0, r3, r1
 8028180:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8028184:	930a      	str	r3, [sp, #40]	; 0x28
 8028186:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8028188:	681b      	ldr	r3, [r3, #0]
 802818a:	930f      	str	r3, [sp, #60]	; 0x3c
 802818c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802818e:	2b00      	cmp	r3, #0
 8028190:	dc03      	bgt.n	802819a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8028192:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8028194:	2b00      	cmp	r3, #0
 8028196:	f340 8387 	ble.w	80288a8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 802819a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802819c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80281a0:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80281a4:	1e48      	subs	r0, r1, #1
 80281a6:	1e57      	subs	r7, r2, #1
 80281a8:	9b07      	ldr	r3, [sp, #28]
 80281aa:	2b00      	cmp	r3, #0
 80281ac:	f340 8166 	ble.w	802847c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 80281b0:	ea5f 4c24 	movs.w	ip, r4, asr #16
 80281b4:	ea4f 4326 	mov.w	r3, r6, asr #16
 80281b8:	d406      	bmi.n	80281c8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80281ba:	4584      	cmp	ip, r0
 80281bc:	da04      	bge.n	80281c8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80281be:	2b00      	cmp	r3, #0
 80281c0:	db02      	blt.n	80281c8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80281c2:	42bb      	cmp	r3, r7
 80281c4:	f2c0 815b 	blt.w	802847e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 80281c8:	f11c 0c01 	adds.w	ip, ip, #1
 80281cc:	f100 814b 	bmi.w	8028466 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 80281d0:	4561      	cmp	r1, ip
 80281d2:	f2c0 8148 	blt.w	8028466 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 80281d6:	3301      	adds	r3, #1
 80281d8:	f100 8145 	bmi.w	8028466 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 80281dc:	429a      	cmp	r2, r3
 80281de:	f2c0 8142 	blt.w	8028466 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 80281e2:	9b07      	ldr	r3, [sp, #28]
 80281e4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80281e6:	9317      	str	r3, [sp, #92]	; 0x5c
 80281e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80281ea:	2b00      	cmp	r3, #0
 80281ec:	f340 8165 	ble.w	80284ba <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 80281f0:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80281f2:	ea4f 4c26 	mov.w	ip, r6, asr #16
 80281f6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80281f8:	f3c4 3103 	ubfx	r1, r4, #12, #4
 80281fc:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8028200:	1422      	asrs	r2, r4, #16
 8028202:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8028206:	689b      	ldr	r3, [r3, #8]
 8028208:	f100 81d5 	bmi.w	80285b6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 802820c:	f103 38ff 	add.w	r8, r3, #4294967295
 8028210:	4542      	cmp	r2, r8
 8028212:	f280 81d0 	bge.w	80285b6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8028216:	f1bc 0f00 	cmp.w	ip, #0
 802821a:	f2c0 81cc 	blt.w	80285b6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 802821e:	f10e 38ff 	add.w	r8, lr, #4294967295
 8028222:	45c4      	cmp	ip, r8
 8028224:	f280 81c7 	bge.w	80285b6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8028228:	b21b      	sxth	r3, r3
 802822a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802822c:	fb0c 2203 	mla	r2, ip, r3, r2
 8028230:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8028234:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8028238:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 802823c:	2900      	cmp	r1, #0
 802823e:	f000 8182 	beq.w	8028546 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 8028242:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8028246:	950b      	str	r5, [sp, #44]	; 0x2c
 8028248:	0e2d      	lsrs	r5, r5, #24
 802824a:	9512      	str	r5, [sp, #72]	; 0x48
 802824c:	b180      	cbz	r0, 8028270 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 802824e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8028252:	3b01      	subs	r3, #1
 8028254:	009b      	lsls	r3, r3, #2
 8028256:	3304      	adds	r3, #4
 8028258:	eb08 0c03 	add.w	ip, r8, r3
 802825c:	f858 3003 	ldr.w	r3, [r8, r3]
 8028260:	9308      	str	r3, [sp, #32]
 8028262:	0e1b      	lsrs	r3, r3, #24
 8028264:	9310      	str	r3, [sp, #64]	; 0x40
 8028266:	f8dc 3004 	ldr.w	r3, [ip, #4]
 802826a:	930c      	str	r3, [sp, #48]	; 0x30
 802826c:	0e1b      	lsrs	r3, r3, #24
 802826e:	9313      	str	r3, [sp, #76]	; 0x4c
 8028270:	b289      	uxth	r1, r1
 8028272:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8028274:	b280      	uxth	r0, r0
 8028276:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8028278:	fb01 f900 	mul.w	r9, r1, r0
 802827c:	0109      	lsls	r1, r1, #4
 802827e:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8028282:	eba1 0809 	sub.w	r8, r1, r9
 8028286:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 802828a:	b280      	uxth	r0, r0
 802828c:	fa1f f888 	uxth.w	r8, r8
 8028290:	1a09      	subs	r1, r1, r0
 8028292:	fb08 f303 	mul.w	r3, r8, r3
 8028296:	b289      	uxth	r1, r1
 8028298:	fb01 330e 	mla	r3, r1, lr, r3
 802829c:	fb00 3305 	mla	r3, r0, r5, r3
 80282a0:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80282a2:	fb09 3305 	mla	r3, r9, r5, r3
 80282a6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80282aa:	2b00      	cmp	r3, #0
 80282ac:	f000 80d2 	beq.w	8028454 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 80282b0:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80282b4:	d01b      	beq.n	80282ee <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
 80282b6:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 80282ba:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80282be:	fb0e fa0a 	mul.w	sl, lr, sl
 80282c2:	fb0e fe02 	mul.w	lr, lr, r2
 80282c6:	ea4f 221a 	mov.w	r2, sl, lsr #8
 80282ca:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80282ce:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 80282d2:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80282d6:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80282da:	4452      	add	r2, sl
 80282dc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80282e0:	0a12      	lsrs	r2, r2, #8
 80282e2:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80282e6:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80282ea:	ea42 020c 	orr.w	r2, r2, ip
 80282ee:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80282f0:	2dff      	cmp	r5, #255	; 0xff
 80282f2:	d021      	beq.n	8028338 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 80282f4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80282f6:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 80282fa:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80282fc:	fb05 fb0b 	mul.w	fp, r5, fp
 8028300:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8028302:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8028306:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8028308:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802830c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8028310:	fb05 fa0a 	mul.w	sl, r5, sl
 8028314:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028318:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802831c:	44de      	add	lr, fp
 802831e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8028322:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028326:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802832a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802832e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8028332:	ea4e 050a 	orr.w	r5, lr, sl
 8028336:	950b      	str	r5, [sp, #44]	; 0x2c
 8028338:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802833a:	2dff      	cmp	r5, #255	; 0xff
 802833c:	d021      	beq.n	8028382 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
 802833e:	9d08      	ldr	r5, [sp, #32]
 8028340:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8028344:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8028346:	fb05 fb0b 	mul.w	fp, r5, fp
 802834a:	9d08      	ldr	r5, [sp, #32]
 802834c:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8028350:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8028352:	fb05 fa0e 	mul.w	sl, r5, lr
 8028356:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802835a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802835e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028362:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8028366:	44de      	add	lr, fp
 8028368:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802836c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028370:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028374:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028378:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802837c:	ea4e 050a 	orr.w	r5, lr, sl
 8028380:	9508      	str	r5, [sp, #32]
 8028382:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8028384:	2dff      	cmp	r5, #255	; 0xff
 8028386:	d021      	beq.n	80283cc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8028388:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802838a:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 802838e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8028390:	fb05 fb0b 	mul.w	fp, r5, fp
 8028394:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8028396:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802839a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802839c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80283a0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80283a4:	fb05 fa0a 	mul.w	sl, r5, sl
 80283a8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80283ac:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80283b0:	44de      	add	lr, fp
 80283b2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80283b6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80283ba:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80283be:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80283c2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80283c6:	ea4e 050a 	orr.w	r5, lr, sl
 80283ca:	950c      	str	r5, [sp, #48]	; 0x30
 80283cc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80283ce:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 80283d2:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80283d6:	2bff      	cmp	r3, #255	; 0xff
 80283d8:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80283dc:	9d08      	ldr	r5, [sp, #32]
 80283de:	fb08 fc0c 	mul.w	ip, r8, ip
 80283e2:	fb01 cc0e 	mla	ip, r1, lr, ip
 80283e6:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 80283ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80283ec:	fb00 cc0e 	mla	ip, r0, lr, ip
 80283f0:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 80283f4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80283f6:	fb09 cc0e 	mla	ip, r9, lr, ip
 80283fa:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 80283fe:	fb08 f80e 	mul.w	r8, r8, lr
 8028402:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028406:	fb01 8202 	mla	r2, r1, r2, r8
 802840a:	9908      	ldr	r1, [sp, #32]
 802840c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028410:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8028414:	990c      	ldr	r1, [sp, #48]	; 0x30
 8028416:	fb00 220a 	mla	r2, r0, sl, r2
 802841a:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 802841e:	fb09 2900 	mla	r9, r9, r0, r2
 8028422:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8028426:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 802842a:	ea4c 0c09 	orr.w	ip, ip, r9
 802842e:	ea4f 221c 	mov.w	r2, ip, lsr #8
 8028432:	f040 8091 	bne.w	8028558 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 8028436:	ea4f 135c 	mov.w	r3, ip, lsr #5
 802843a:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 802843e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8028442:	f022 0207 	bic.w	r2, r2, #7
 8028446:	431a      	orrs	r2, r3
 8028448:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 802844c:	ea4c 0c02 	orr.w	ip, ip, r2
 8028450:	f8a7 c000 	strh.w	ip, [r7]
 8028454:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8028456:	3702      	adds	r7, #2
 8028458:	441c      	add	r4, r3
 802845a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802845c:	441e      	add	r6, r3
 802845e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8028460:	3b01      	subs	r3, #1
 8028462:	9317      	str	r3, [sp, #92]	; 0x5c
 8028464:	e6c0      	b.n	80281e8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 8028466:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8028468:	441c      	add	r4, r3
 802846a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802846c:	441e      	add	r6, r3
 802846e:	9b07      	ldr	r3, [sp, #28]
 8028470:	3b01      	subs	r3, #1
 8028472:	9307      	str	r3, [sp, #28]
 8028474:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028476:	3302      	adds	r3, #2
 8028478:	930a      	str	r3, [sp, #40]	; 0x28
 802847a:	e695      	b.n	80281a8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 802847c:	d024      	beq.n	80284c8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 802847e:	9b07      	ldr	r3, [sp, #28]
 8028480:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8028482:	3b01      	subs	r3, #1
 8028484:	fb00 4003 	mla	r0, r0, r3, r4
 8028488:	1400      	asrs	r0, r0, #16
 802848a:	f53f aeaa 	bmi.w	80281e2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802848e:	3901      	subs	r1, #1
 8028490:	4288      	cmp	r0, r1
 8028492:	f6bf aea6 	bge.w	80281e2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8028496:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8028498:	fb01 6303 	mla	r3, r1, r3, r6
 802849c:	141b      	asrs	r3, r3, #16
 802849e:	f53f aea0 	bmi.w	80281e2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80284a2:	3a01      	subs	r2, #1
 80284a4:	4293      	cmp	r3, r2
 80284a6:	f6bf ae9c 	bge.w	80281e2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80284aa:	f8dd b01c 	ldr.w	fp, [sp, #28]
 80284ae:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 80284b2:	f1bb 0f00 	cmp.w	fp, #0
 80284b6:	f300 809a 	bgt.w	80285ee <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 80284ba:	9b07      	ldr	r3, [sp, #28]
 80284bc:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 80284c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80284c2:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 80284c6:	930a      	str	r3, [sp, #40]	; 0x28
 80284c8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80284ca:	2b00      	cmp	r3, #0
 80284cc:	f340 81ec 	ble.w	80288a8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 80284d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80284d4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80284d6:	ee30 0a04 	vadd.f32	s0, s0, s8
 80284da:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80284de:	eef0 6a62 	vmov.f32	s13, s5
 80284e2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80284e6:	ee31 1a05 	vadd.f32	s2, s2, s10
 80284ea:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80284ee:	ee16 4a90 	vmov	r4, s13
 80284f2:	eef0 6a43 	vmov.f32	s13, s6
 80284f6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80284fa:	ee16 6a90 	vmov	r6, s13
 80284fe:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8028502:	ee61 7a27 	vmul.f32	s15, s2, s15
 8028506:	ee77 2a62 	vsub.f32	s5, s14, s5
 802850a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802850e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8028512:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8028516:	ee12 2a90 	vmov	r2, s5
 802851a:	eef0 2a47 	vmov.f32	s5, s14
 802851e:	fb92 f3f3 	sdiv	r3, r2, r3
 8028522:	ee13 2a10 	vmov	r2, s6
 8028526:	9327      	str	r3, [sp, #156]	; 0x9c
 8028528:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802852a:	eeb0 3a67 	vmov.f32	s6, s15
 802852e:	fb92 f3f3 	sdiv	r3, r2, r3
 8028532:	9328      	str	r3, [sp, #160]	; 0xa0
 8028534:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8028536:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8028538:	3b01      	subs	r3, #1
 802853a:	9316      	str	r3, [sp, #88]	; 0x58
 802853c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802853e:	bf08      	it	eq
 8028540:	4613      	moveq	r3, r2
 8028542:	9307      	str	r3, [sp, #28]
 8028544:	e622      	b.n	802818c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c>
 8028546:	2800      	cmp	r0, #0
 8028548:	f43f ae92 	beq.w	8028270 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 802854c:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8028550:	9308      	str	r3, [sp, #32]
 8028552:	0e1b      	lsrs	r3, r3, #24
 8028554:	9310      	str	r3, [sp, #64]	; 0x40
 8028556:	e68b      	b.n	8028270 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 8028558:	8839      	ldrh	r1, [r7, #0]
 802855a:	43db      	mvns	r3, r3
 802855c:	4dd4      	ldr	r5, [pc, #848]	; (80288b0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
 802855e:	ea4f 2e21 	mov.w	lr, r1, asr #8
 8028562:	fa5f f883 	uxtb.w	r8, r3
 8028566:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 802856a:	10c8      	asrs	r0, r1, #3
 802856c:	00cb      	lsls	r3, r1, #3
 802856e:	fb0e fe08 	mul.w	lr, lr, r8
 8028572:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8028576:	b2db      	uxtb	r3, r3
 8028578:	f10e 0101 	add.w	r1, lr, #1
 802857c:	fb00 f008 	mul.w	r0, r0, r8
 8028580:	fb03 f308 	mul.w	r3, r3, r8
 8028584:	eb01 2e1e 	add.w	lr, r1, lr, lsr #8
 8028588:	ea4f 411c 	mov.w	r1, ip, lsr #16
 802858c:	eb01 211e 	add.w	r1, r1, lr, lsr #8
 8028590:	f100 0e01 	add.w	lr, r0, #1
 8028594:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
 8028598:	b2c9      	uxtb	r1, r1
 802859a:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 802859e:	ea05 2101 	and.w	r1, r5, r1, lsl #8
 80285a2:	00d2      	lsls	r2, r2, #3
 80285a4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80285a8:	430a      	orrs	r2, r1
 80285aa:	1c59      	adds	r1, r3, #1
 80285ac:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 80285b0:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 80285b4:	e748      	b.n	8028448 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 80285b6:	f112 0801 	adds.w	r8, r2, #1
 80285ba:	f53f af4b 	bmi.w	8028454 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 80285be:	4543      	cmp	r3, r8
 80285c0:	f6ff af48 	blt.w	8028454 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 80285c4:	f11c 0801 	adds.w	r8, ip, #1
 80285c8:	f53f af44 	bmi.w	8028454 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 80285cc:	45c6      	cmp	lr, r8
 80285ce:	f6ff af41 	blt.w	8028454 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 80285d2:	b21b      	sxth	r3, r3
 80285d4:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 80285d8:	fa0f f28e 	sxth.w	r2, lr
 80285dc:	e9cd 1003 	strd	r1, r0, [sp, #12]
 80285e0:	9200      	str	r2, [sp, #0]
 80285e2:	4639      	mov	r1, r7
 80285e4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80285e6:	9819      	ldr	r0, [sp, #100]	; 0x64
 80285e8:	f7ff fc88 	bl	8027efc <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
 80285ec:	e732      	b.n	8028454 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 80285ee:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80285f0:	1421      	asrs	r1, r4, #16
 80285f2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80285f4:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80285f8:	f9b3 7008 	ldrsh.w	r7, [r3, #8]
 80285fc:	1433      	asrs	r3, r6, #16
 80285fe:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8028602:	fb07 1303 	mla	r3, r7, r3, r1
 8028606:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8028608:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 802860c:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8028610:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8028614:	2a00      	cmp	r2, #0
 8028616:	f000 8108 	beq.w	802882a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ca>
 802861a:	684d      	ldr	r5, [r1, #4]
 802861c:	950d      	str	r5, [sp, #52]	; 0x34
 802861e:	0e2d      	lsrs	r5, r5, #24
 8028620:	9514      	str	r5, [sp, #80]	; 0x50
 8028622:	b178      	cbz	r0, 8028644 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8028624:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8028628:	3f01      	subs	r7, #1
 802862a:	00bf      	lsls	r7, r7, #2
 802862c:	3704      	adds	r7, #4
 802862e:	eb01 0e07 	add.w	lr, r1, r7
 8028632:	59c9      	ldr	r1, [r1, r7]
 8028634:	9109      	str	r1, [sp, #36]	; 0x24
 8028636:	0e09      	lsrs	r1, r1, #24
 8028638:	9111      	str	r1, [sp, #68]	; 0x44
 802863a:	f8de 1004 	ldr.w	r1, [lr, #4]
 802863e:	910e      	str	r1, [sp, #56]	; 0x38
 8028640:	0e09      	lsrs	r1, r1, #24
 8028642:	9115      	str	r1, [sp, #84]	; 0x54
 8028644:	b292      	uxth	r2, r2
 8028646:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8028648:	b280      	uxth	r0, r0
 802864a:	fb02 f900 	mul.w	r9, r2, r0
 802864e:	0112      	lsls	r2, r2, #4
 8028650:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8028654:	eba2 0e09 	sub.w	lr, r2, r9
 8028658:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 802865c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802865e:	b280      	uxth	r0, r0
 8028660:	fa1f fe8e 	uxth.w	lr, lr
 8028664:	1a09      	subs	r1, r1, r0
 8028666:	fb0e f202 	mul.w	r2, lr, r2
 802866a:	b289      	uxth	r1, r1
 802866c:	fb01 220c 	mla	r2, r1, ip, r2
 8028670:	fb00 2205 	mla	r2, r0, r5, r2
 8028674:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8028676:	fb09 2205 	mla	r2, r9, r5, r2
 802867a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802867e:	2a00      	cmp	r2, #0
 8028680:	f000 80ca 	beq.w	8028818 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 8028684:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8028688:	d019      	beq.n	80286be <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55e>
 802868a:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 802868e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8028692:	fb0c fa0a 	mul.w	sl, ip, sl
 8028696:	fb0c fc03 	mul.w	ip, ip, r3
 802869a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802869e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80286a2:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 80286a6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80286aa:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80286ae:	4453      	add	r3, sl
 80286b0:	0a3f      	lsrs	r7, r7, #8
 80286b2:	0a1b      	lsrs	r3, r3, #8
 80286b4:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80286b8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80286bc:	433b      	orrs	r3, r7
 80286be:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80286c0:	2dff      	cmp	r5, #255	; 0xff
 80286c2:	d020      	beq.n	8028706 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a6>
 80286c4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80286c6:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80286ca:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80286cc:	436f      	muls	r7, r5
 80286ce:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80286d0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80286d4:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80286d8:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80286da:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80286de:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80286e2:	fb05 fa0a 	mul.w	sl, r5, sl
 80286e6:	44bc      	add	ip, r7
 80286e8:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80286ec:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80286f0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80286f4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80286f8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80286fc:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8028700:	ea4c 050a 	orr.w	r5, ip, sl
 8028704:	950d      	str	r5, [sp, #52]	; 0x34
 8028706:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8028708:	2dff      	cmp	r5, #255	; 0xff
 802870a:	d020      	beq.n	802874e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ee>
 802870c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802870e:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8028712:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8028714:	436f      	muls	r7, r5
 8028716:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8028718:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 802871c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802871e:	fb05 fa0c 	mul.w	sl, r5, ip
 8028722:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8028726:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802872a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802872e:	44bc      	add	ip, r7
 8028730:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8028734:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8028738:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802873c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028740:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028744:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8028748:	ea4c 050a 	orr.w	r5, ip, sl
 802874c:	9509      	str	r5, [sp, #36]	; 0x24
 802874e:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8028750:	2dff      	cmp	r5, #255	; 0xff
 8028752:	d020      	beq.n	8028796 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x636>
 8028754:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8028756:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802875a:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802875c:	436f      	muls	r7, r5
 802875e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8028760:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8028764:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8028768:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802876a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802876e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028772:	fb05 fa0a 	mul.w	sl, r5, sl
 8028776:	44bc      	add	ip, r7
 8028778:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802877c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028780:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8028784:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028788:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802878c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8028790:	ea4c 050a 	orr.w	r5, ip, sl
 8028794:	950e      	str	r5, [sp, #56]	; 0x38
 8028796:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8028798:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 802879c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80287a0:	2aff      	cmp	r2, #255	; 0xff
 80287a2:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80287a6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80287a8:	fb0e f707 	mul.w	r7, lr, r7
 80287ac:	fb01 770c 	mla	r7, r1, ip, r7
 80287b0:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80287b4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80287b6:	fb00 770c 	mla	r7, r0, ip, r7
 80287ba:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80287be:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80287c0:	fb09 770c 	mla	r7, r9, ip, r7
 80287c4:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 80287c8:	fb0e fe0c 	mul.w	lr, lr, ip
 80287cc:	ea4f 2717 	mov.w	r7, r7, lsr #8
 80287d0:	fb01 e303 	mla	r3, r1, r3, lr
 80287d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80287d6:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80287da:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 80287de:	990e      	ldr	r1, [sp, #56]	; 0x38
 80287e0:	fb00 330a 	mla	r3, r0, sl, r3
 80287e4:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 80287e8:	fb09 3c0c 	mla	ip, r9, ip, r3
 80287ec:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80287f0:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80287f4:	ea47 070c 	orr.w	r7, r7, ip
 80287f8:	ea4f 2317 	mov.w	r3, r7, lsr #8
 80287fc:	d11e      	bne.n	802883c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 80287fe:	097a      	lsrs	r2, r7, #5
 8028800:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8028804:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 8028808:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802880c:	f023 0307 	bic.w	r3, r3, #7
 8028810:	4313      	orrs	r3, r2
 8028812:	431f      	orrs	r7, r3
 8028814:	f8a8 7000 	strh.w	r7, [r8]
 8028818:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802881a:	f108 0802 	add.w	r8, r8, #2
 802881e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8028822:	441c      	add	r4, r3
 8028824:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8028826:	441e      	add	r6, r3
 8028828:	e643      	b.n	80284b2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 802882a:	2800      	cmp	r0, #0
 802882c:	f43f af0a 	beq.w	8028644 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8028830:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8028834:	9109      	str	r1, [sp, #36]	; 0x24
 8028836:	0e09      	lsrs	r1, r1, #24
 8028838:	9111      	str	r1, [sp, #68]	; 0x44
 802883a:	e703      	b.n	8028644 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 802883c:	f8b8 1000 	ldrh.w	r1, [r8]
 8028840:	43d2      	mvns	r2, r2
 8028842:	ea4f 2c21 	mov.w	ip, r1, asr #8
 8028846:	fa5f fe82 	uxtb.w	lr, r2
 802884a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 802884e:	10c8      	asrs	r0, r1, #3
 8028850:	00ca      	lsls	r2, r1, #3
 8028852:	fb0c fc0e 	mul.w	ip, ip, lr
 8028856:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802885a:	b2d2      	uxtb	r2, r2
 802885c:	f10c 0101 	add.w	r1, ip, #1
 8028860:	fb00 f00e 	mul.w	r0, r0, lr
 8028864:	fb02 f20e 	mul.w	r2, r2, lr
 8028868:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 802886c:	0c39      	lsrs	r1, r7, #16
 802886e:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8028872:	490f      	ldr	r1, [pc, #60]	; (80288b0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
 8028874:	fa5f fc8c 	uxtb.w	ip, ip
 8028878:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
 802887c:	1c41      	adds	r1, r0, #1
 802887e:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8028882:	1c51      	adds	r1, r2, #1
 8028884:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8028888:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 802888c:	00c0      	lsls	r0, r0, #3
 802888e:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8028892:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8028896:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 802889a:	ea4c 0c00 	orr.w	ip, ip, r0
 802889e:	ea47 0c0c 	orr.w	ip, r7, ip
 80288a2:	f8a8 c000 	strh.w	ip, [r8]
 80288a6:	e7b7      	b.n	8028818 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 80288a8:	b01b      	add	sp, #108	; 0x6c
 80288aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80288ae:	bf00      	nop
 80288b0:	fffff800 	.word	0xfffff800

080288b4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
 80288b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80288b8:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	; 0x28
 80288bc:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 80288c0:	2d00      	cmp	r5, #0
 80288c2:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 80288c6:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 80288ca:	fb05 0e03 	mla	lr, r5, r3, r0
 80288ce:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 80288d2:	f2c0 808c 	blt.w	80289ee <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 80288d6:	45a9      	cmp	r9, r5
 80288d8:	f340 8089 	ble.w	80289ee <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 80288dc:	2800      	cmp	r0, #0
 80288de:	f2c0 8084 	blt.w	80289ea <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 80288e2:	4580      	cmp	r8, r0
 80288e4:	f340 8081 	ble.w	80289ea <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 80288e8:	ea4f 045e 	mov.w	r4, lr, lsr #1
 80288ec:	f01e 0f01 	tst.w	lr, #1
 80288f0:	5d16      	ldrb	r6, [r2, r4]
 80288f2:	bf0c      	ite	eq
 80288f4:	f006 060f 	andeq.w	r6, r6, #15
 80288f8:	1136      	asrne	r6, r6, #4
 80288fa:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 80288fe:	b2f6      	uxtb	r6, r6
 8028900:	1c44      	adds	r4, r0, #1
 8028902:	d477      	bmi.n	80289f4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 8028904:	45a0      	cmp	r8, r4
 8028906:	dd75      	ble.n	80289f4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 8028908:	2f00      	cmp	r7, #0
 802890a:	d075      	beq.n	80289f8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x144>
 802890c:	f10e 0a01 	add.w	sl, lr, #1
 8028910:	ea4f 045a 	mov.w	r4, sl, lsr #1
 8028914:	f01a 0f01 	tst.w	sl, #1
 8028918:	5d14      	ldrb	r4, [r2, r4]
 802891a:	bf0c      	ite	eq
 802891c:	f004 040f 	andeq.w	r4, r4, #15
 8028920:	1124      	asrne	r4, r4, #4
 8028922:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8028926:	b2e4      	uxtb	r4, r4
 8028928:	3501      	adds	r5, #1
 802892a:	d469      	bmi.n	8028a00 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 802892c:	45a9      	cmp	r9, r5
 802892e:	dd67      	ble.n	8028a00 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 8028930:	f1bc 0f00 	cmp.w	ip, #0
 8028934:	d067      	beq.n	8028a06 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x152>
 8028936:	2800      	cmp	r0, #0
 8028938:	db60      	blt.n	80289fc <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 802893a:	4580      	cmp	r8, r0
 802893c:	dd5e      	ble.n	80289fc <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 802893e:	eb03 090e 	add.w	r9, r3, lr
 8028942:	ea4f 0559 	mov.w	r5, r9, lsr #1
 8028946:	f019 0f01 	tst.w	r9, #1
 802894a:	5d55      	ldrb	r5, [r2, r5]
 802894c:	bf0c      	ite	eq
 802894e:	f005 050f 	andeq.w	r5, r5, #15
 8028952:	112d      	asrne	r5, r5, #4
 8028954:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8028958:	b2ed      	uxtb	r5, r5
 802895a:	3001      	adds	r0, #1
 802895c:	d456      	bmi.n	8028a0c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 802895e:	4580      	cmp	r8, r0
 8028960:	dd54      	ble.n	8028a0c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 8028962:	2f00      	cmp	r7, #0
 8028964:	d054      	beq.n	8028a10 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x15c>
 8028966:	3301      	adds	r3, #1
 8028968:	449e      	add	lr, r3
 802896a:	ea4f 035e 	mov.w	r3, lr, lsr #1
 802896e:	f01e 0f01 	tst.w	lr, #1
 8028972:	5cd0      	ldrb	r0, [r2, r3]
 8028974:	bf0c      	ite	eq
 8028976:	f000 000f 	andeq.w	r0, r0, #15
 802897a:	1100      	asrne	r0, r0, #4
 802897c:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8028980:	b2c3      	uxtb	r3, r0
 8028982:	b2ba      	uxth	r2, r7
 8028984:	fa1f fc8c 	uxth.w	ip, ip
 8028988:	fb02 f00c 	mul.w	r0, r2, ip
 802898c:	0112      	lsls	r2, r2, #4
 802898e:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 8028992:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 8028996:	1a12      	subs	r2, r2, r0
 8028998:	fa1f fc8c 	uxth.w	ip, ip
 802899c:	b292      	uxth	r2, r2
 802899e:	eba7 070c 	sub.w	r7, r7, ip
 80289a2:	4362      	muls	r2, r4
 80289a4:	b2bf      	uxth	r7, r7
 80289a6:	fb06 2207 	mla	r2, r6, r7, r2
 80289aa:	fb0c 2505 	mla	r5, ip, r5, r2
 80289ae:	fb00 5303 	mla	r3, r0, r3, r5
 80289b2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80289b6:	b1b3      	cbz	r3, 80289e6 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 80289b8:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 80289bc:	435a      	muls	r2, r3
 80289be:	1c53      	adds	r3, r2, #1
 80289c0:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80289c4:	4a2d      	ldr	r2, [pc, #180]	; (8028a7c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c8>)
 80289c6:	121b      	asrs	r3, r3, #8
 80289c8:	6812      	ldr	r2, [r2, #0]
 80289ca:	2bff      	cmp	r3, #255	; 0xff
 80289cc:	ea4f 2612 	mov.w	r6, r2, lsr #8
 80289d0:	d120      	bne.n	8028a14 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x160>
 80289d2:	0950      	lsrs	r0, r2, #5
 80289d4:	4b2a      	ldr	r3, [pc, #168]	; (8028a80 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1cc>)
 80289d6:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80289da:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80289de:	4033      	ands	r3, r6
 80289e0:	4318      	orrs	r0, r3
 80289e2:	4302      	orrs	r2, r0
 80289e4:	800a      	strh	r2, [r1, #0]
 80289e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80289ea:	2600      	movs	r6, #0
 80289ec:	e788      	b.n	8028900 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x4c>
 80289ee:	2400      	movs	r4, #0
 80289f0:	4626      	mov	r6, r4
 80289f2:	e799      	b.n	8028928 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 80289f4:	2400      	movs	r4, #0
 80289f6:	e797      	b.n	8028928 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 80289f8:	463c      	mov	r4, r7
 80289fa:	e795      	b.n	8028928 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 80289fc:	2500      	movs	r5, #0
 80289fe:	e7ac      	b.n	802895a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa6>
 8028a00:	2300      	movs	r3, #0
 8028a02:	461d      	mov	r5, r3
 8028a04:	e7bd      	b.n	8028982 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8028a06:	4663      	mov	r3, ip
 8028a08:	4665      	mov	r5, ip
 8028a0a:	e7ba      	b.n	8028982 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8028a0c:	2300      	movs	r3, #0
 8028a0e:	e7b8      	b.n	8028982 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8028a10:	463b      	mov	r3, r7
 8028a12:	e7b6      	b.n	8028982 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8028a14:	880d      	ldrh	r5, [r1, #0]
 8028a16:	b29f      	uxth	r7, r3
 8028a18:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8028a1c:	43db      	mvns	r3, r3
 8028a1e:	122c      	asrs	r4, r5, #8
 8028a20:	fb10 f007 	smulbb	r0, r0, r7
 8028a24:	b2db      	uxtb	r3, r3
 8028a26:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8028a2a:	b2f6      	uxtb	r6, r6
 8028a2c:	b2d2      	uxtb	r2, r2
 8028a2e:	fb04 0403 	mla	r4, r4, r3, r0
 8028a32:	10e8      	asrs	r0, r5, #3
 8028a34:	fb12 f207 	smulbb	r2, r2, r7
 8028a38:	00ed      	lsls	r5, r5, #3
 8028a3a:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8028a3e:	b2a4      	uxth	r4, r4
 8028a40:	fb16 f607 	smulbb	r6, r6, r7
 8028a44:	b2ed      	uxtb	r5, r5
 8028a46:	fb00 6603 	mla	r6, r0, r3, r6
 8028a4a:	fb05 2303 	mla	r3, r5, r3, r2
 8028a4e:	b2b0      	uxth	r0, r6
 8028a50:	b29a      	uxth	r2, r3
 8028a52:	1c63      	adds	r3, r4, #1
 8028a54:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8028a58:	1c53      	adds	r3, r2, #1
 8028a5a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8028a5e:	1c42      	adds	r2, r0, #1
 8028a60:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8028a64:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8028a68:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8028a6c:	0940      	lsrs	r0, r0, #5
 8028a6e:	4323      	orrs	r3, r4
 8028a70:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8028a74:	4303      	orrs	r3, r0
 8028a76:	800b      	strh	r3, [r1, #0]
 8028a78:	e7b5      	b.n	80289e6 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 8028a7a:	bf00      	nop
 8028a7c:	200177d4 	.word	0x200177d4
 8028a80:	00fff800 	.word	0x00fff800

08028a84 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8028a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028a88:	b097      	sub	sp, #92	; 0x5c
 8028a8a:	9214      	str	r2, [sp, #80]	; 0x50
 8028a8c:	9309      	str	r3, [sp, #36]	; 0x24
 8028a8e:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8028a90:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 8028a94:	9015      	str	r0, [sp, #84]	; 0x54
 8028a96:	910d      	str	r1, [sp, #52]	; 0x34
 8028a98:	6850      	ldr	r0, [r2, #4]
 8028a9a:	930f      	str	r3, [sp, #60]	; 0x3c
 8028a9c:	6812      	ldr	r2, [r2, #0]
 8028a9e:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 8028aa2:	e9dd 4621 	ldrd	r4, r6, [sp, #132]	; 0x84
 8028aa6:	fb00 1303 	mla	r3, r0, r3, r1
 8028aaa:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8028aae:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8028ab0:	689b      	ldr	r3, [r3, #8]
 8028ab2:	3301      	adds	r3, #1
 8028ab4:	f023 0301 	bic.w	r3, r3, #1
 8028ab8:	930a      	str	r3, [sp, #40]	; 0x28
 8028aba:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8028abc:	681f      	ldr	r7, [r3, #0]
 8028abe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8028ac0:	2b00      	cmp	r3, #0
 8028ac2:	dc03      	bgt.n	8028acc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8028ac4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8028ac6:	2b00      	cmp	r3, #0
 8028ac8:	f340 8289 	ble.w	8028fde <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55a>
 8028acc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8028ace:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8028ad2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8028ad6:	1e48      	subs	r0, r1, #1
 8028ad8:	f102 3cff 	add.w	ip, r2, #4294967295
 8028adc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028ade:	2b00      	cmp	r3, #0
 8028ae0:	f340 80c5 	ble.w	8028c6e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8028ae4:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8028ae8:	ea4f 4326 	mov.w	r3, r6, asr #16
 8028aec:	d406      	bmi.n	8028afc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8028aee:	4586      	cmp	lr, r0
 8028af0:	da04      	bge.n	8028afc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8028af2:	2b00      	cmp	r3, #0
 8028af4:	db02      	blt.n	8028afc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8028af6:	4563      	cmp	r3, ip
 8028af8:	f2c0 80ba 	blt.w	8028c70 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 8028afc:	f11e 0e01 	adds.w	lr, lr, #1
 8028b00:	f100 80ab 	bmi.w	8028c5a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 8028b04:	4571      	cmp	r1, lr
 8028b06:	f2c0 80a8 	blt.w	8028c5a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 8028b0a:	3301      	adds	r3, #1
 8028b0c:	f100 80a5 	bmi.w	8028c5a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 8028b10:	429a      	cmp	r2, r3
 8028b12:	f2c0 80a2 	blt.w	8028c5a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 8028b16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028b18:	46c8      	mov	r8, r9
 8028b1a:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
 8028b1e:	930e      	str	r3, [sp, #56]	; 0x38
 8028b20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8028b22:	2b00      	cmp	r3, #0
 8028b24:	f340 80c4 	ble.w	8028cb0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 8028b28:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8028b2a:	1430      	asrs	r0, r6, #16
 8028b2c:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8028b30:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8028b34:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8028b38:	1423      	asrs	r3, r4, #16
 8028b3a:	f100 814f 	bmi.w	8028ddc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8028b3e:	f10c 3bff 	add.w	fp, ip, #4294967295
 8028b42:	455b      	cmp	r3, fp
 8028b44:	f280 814a 	bge.w	8028ddc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8028b48:	2800      	cmp	r0, #0
 8028b4a:	f2c0 8147 	blt.w	8028ddc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8028b4e:	f10e 3bff 	add.w	fp, lr, #4294967295
 8028b52:	4558      	cmp	r0, fp
 8028b54:	f280 8142 	bge.w	8028ddc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8028b58:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8028b5a:	fb00 3305 	mla	r3, r0, r5, r3
 8028b5e:	0858      	lsrs	r0, r3, #1
 8028b60:	07dd      	lsls	r5, r3, #31
 8028b62:	f817 c000 	ldrb.w	ip, [r7, r0]
 8028b66:	bf54      	ite	pl
 8028b68:	f00c 0c0f 	andpl.w	ip, ip, #15
 8028b6c:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8028b70:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8028b74:	fa5f fc8c 	uxtb.w	ip, ip
 8028b78:	2a00      	cmp	r2, #0
 8028b7a:	f000 80dd 	beq.w	8028d38 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b4>
 8028b7e:	1c58      	adds	r0, r3, #1
 8028b80:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8028b84:	07c0      	lsls	r0, r0, #31
 8028b86:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8028b8a:	bf54      	ite	pl
 8028b8c:	f00e 0e0f 	andpl.w	lr, lr, #15
 8028b90:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8028b94:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8028b98:	fa5f f08e 	uxtb.w	r0, lr
 8028b9c:	9010      	str	r0, [sp, #64]	; 0x40
 8028b9e:	b1d9      	cbz	r1, 8028bd8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8028ba0:	4453      	add	r3, sl
 8028ba2:	0858      	lsrs	r0, r3, #1
 8028ba4:	07dd      	lsls	r5, r3, #31
 8028ba6:	f103 0301 	add.w	r3, r3, #1
 8028baa:	5c38      	ldrb	r0, [r7, r0]
 8028bac:	bf54      	ite	pl
 8028bae:	f000 000f 	andpl.w	r0, r0, #15
 8028bb2:	1100      	asrmi	r0, r0, #4
 8028bb4:	07dd      	lsls	r5, r3, #31
 8028bb6:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8028bba:	b2c0      	uxtb	r0, r0
 8028bbc:	900b      	str	r0, [sp, #44]	; 0x2c
 8028bbe:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8028bc2:	f817 e000 	ldrb.w	lr, [r7, r0]
 8028bc6:	bf54      	ite	pl
 8028bc8:	f00e 030f 	andpl.w	r3, lr, #15
 8028bcc:	ea4f 132e 	movmi.w	r3, lr, asr #4
 8028bd0:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8028bd4:	b2db      	uxtb	r3, r3
 8028bd6:	9311      	str	r3, [sp, #68]	; 0x44
 8028bd8:	b292      	uxth	r2, r2
 8028bda:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8028bdc:	b289      	uxth	r1, r1
 8028bde:	fb02 f301 	mul.w	r3, r2, r1
 8028be2:	0112      	lsls	r2, r2, #4
 8028be4:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8028be8:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 8028bec:	1ad2      	subs	r2, r2, r3
 8028bee:	b289      	uxth	r1, r1
 8028bf0:	b292      	uxth	r2, r2
 8028bf2:	1a40      	subs	r0, r0, r1
 8028bf4:	436a      	muls	r2, r5
 8028bf6:	b280      	uxth	r0, r0
 8028bf8:	fb0c 2c00 	mla	ip, ip, r0, r2
 8028bfc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8028bfe:	fb01 c102 	mla	r1, r1, r2, ip
 8028c02:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8028c04:	fb03 1302 	mla	r3, r3, r2, r1
 8028c08:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8028c0c:	b1db      	cbz	r3, 8028c46 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8028c0e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8028c10:	4353      	muls	r3, r2
 8028c12:	1c5a      	adds	r2, r3, #1
 8028c14:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8028c18:	4ac6      	ldr	r2, [pc, #792]	; (8028f34 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 8028c1a:	121b      	asrs	r3, r3, #8
 8028c1c:	6812      	ldr	r2, [r2, #0]
 8028c1e:	2bff      	cmp	r3, #255	; 0xff
 8028c20:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 8028c24:	f040 8099 	bne.w	8028d5a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 8028c28:	0953      	lsrs	r3, r2, #5
 8028c2a:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 8028c2e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8028c32:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8028c36:	f02c 0c07 	bic.w	ip, ip, #7
 8028c3a:	ea43 0c0c 	orr.w	ip, r3, ip
 8028c3e:	ea4c 0202 	orr.w	r2, ip, r2
 8028c42:	f8a8 2000 	strh.w	r2, [r8]
 8028c46:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8028c48:	f108 0802 	add.w	r8, r8, #2
 8028c4c:	441c      	add	r4, r3
 8028c4e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8028c50:	441e      	add	r6, r3
 8028c52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8028c54:	3b01      	subs	r3, #1
 8028c56:	930e      	str	r3, [sp, #56]	; 0x38
 8028c58:	e762      	b.n	8028b20 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8028c5a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8028c5c:	f109 0902 	add.w	r9, r9, #2
 8028c60:	441c      	add	r4, r3
 8028c62:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8028c64:	441e      	add	r6, r3
 8028c66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028c68:	3b01      	subs	r3, #1
 8028c6a:	9309      	str	r3, [sp, #36]	; 0x24
 8028c6c:	e736      	b.n	8028adc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8028c6e:	d024      	beq.n	8028cba <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8028c70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028c72:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8028c74:	3b01      	subs	r3, #1
 8028c76:	fb00 4003 	mla	r0, r0, r3, r4
 8028c7a:	1400      	asrs	r0, r0, #16
 8028c7c:	f53f af4b 	bmi.w	8028b16 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8028c80:	3901      	subs	r1, #1
 8028c82:	4288      	cmp	r0, r1
 8028c84:	f6bf af47 	bge.w	8028b16 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8028c88:	9924      	ldr	r1, [sp, #144]	; 0x90
 8028c8a:	fb01 6303 	mla	r3, r1, r3, r6
 8028c8e:	141b      	asrs	r3, r3, #16
 8028c90:	f53f af41 	bmi.w	8028b16 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8028c94:	3a01      	subs	r2, #1
 8028c96:	4293      	cmp	r3, r2
 8028c98:	f6bf af3d 	bge.w	8028b16 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8028c9c:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8028ca0:	46c8      	mov	r8, r9
 8028ca2:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8028ca6:	930e      	str	r3, [sp, #56]	; 0x38
 8028ca8:	f1bb 0f00 	cmp.w	fp, #0
 8028cac:	f300 80b7 	bgt.w	8028e1e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
 8028cb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028cb2:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8028cb6:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8028cba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8028cbc:	2b00      	cmp	r3, #0
 8028cbe:	f340 818e 	ble.w	8028fde <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55a>
 8028cc2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8028cc6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8028cc8:	ee30 0a04 	vadd.f32	s0, s0, s8
 8028ccc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8028cd0:	eef0 6a62 	vmov.f32	s13, s5
 8028cd4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8028cd8:	ee31 1a05 	vadd.f32	s2, s2, s10
 8028cdc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028ce0:	ee16 4a90 	vmov	r4, s13
 8028ce4:	eef0 6a43 	vmov.f32	s13, s6
 8028ce8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028cec:	ee16 6a90 	vmov	r6, s13
 8028cf0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8028cf4:	ee61 7a27 	vmul.f32	s15, s2, s15
 8028cf8:	ee77 2a62 	vsub.f32	s5, s14, s5
 8028cfc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8028d00:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8028d04:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8028d08:	ee12 2a90 	vmov	r2, s5
 8028d0c:	eef0 2a47 	vmov.f32	s5, s14
 8028d10:	fb92 f3f3 	sdiv	r3, r2, r3
 8028d14:	ee13 2a10 	vmov	r2, s6
 8028d18:	9323      	str	r3, [sp, #140]	; 0x8c
 8028d1a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8028d1c:	eeb0 3a67 	vmov.f32	s6, s15
 8028d20:	fb92 f3f3 	sdiv	r3, r2, r3
 8028d24:	9324      	str	r3, [sp, #144]	; 0x90
 8028d26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8028d28:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8028d2a:	3b01      	subs	r3, #1
 8028d2c:	930d      	str	r3, [sp, #52]	; 0x34
 8028d2e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8028d30:	bf08      	it	eq
 8028d32:	4613      	moveq	r3, r2
 8028d34:	9309      	str	r3, [sp, #36]	; 0x24
 8028d36:	e6c2      	b.n	8028abe <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8028d38:	2900      	cmp	r1, #0
 8028d3a:	f43f af4d 	beq.w	8028bd8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8028d3e:	eb0a 0003 	add.w	r0, sl, r3
 8028d42:	0843      	lsrs	r3, r0, #1
 8028d44:	07c0      	lsls	r0, r0, #31
 8028d46:	5cfb      	ldrb	r3, [r7, r3]
 8028d48:	bf54      	ite	pl
 8028d4a:	f003 030f 	andpl.w	r3, r3, #15
 8028d4e:	111b      	asrmi	r3, r3, #4
 8028d50:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8028d54:	b2db      	uxtb	r3, r3
 8028d56:	930b      	str	r3, [sp, #44]	; 0x2c
 8028d58:	e73e      	b.n	8028bd8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8028d5a:	f8b8 e000 	ldrh.w	lr, [r8]
 8028d5e:	fa1f fb83 	uxth.w	fp, r3
 8028d62:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8028d66:	43db      	mvns	r3, r3
 8028d68:	ea4f 202e 	mov.w	r0, lr, asr #8
 8028d6c:	fb11 f10b 	smulbb	r1, r1, fp
 8028d70:	b2db      	uxtb	r3, r3
 8028d72:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8028d76:	fa5f fc8c 	uxtb.w	ip, ip
 8028d7a:	b2d2      	uxtb	r2, r2
 8028d7c:	fb00 1003 	mla	r0, r0, r3, r1
 8028d80:	ea4f 01ee 	mov.w	r1, lr, asr #3
 8028d84:	fb1c fc0b 	smulbb	ip, ip, fp
 8028d88:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8028d8c:	b280      	uxth	r0, r0
 8028d8e:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8028d92:	fb12 fb0b 	smulbb	fp, r2, fp
 8028d96:	fa5f fe8e 	uxtb.w	lr, lr
 8028d9a:	fb01 cc03 	mla	ip, r1, r3, ip
 8028d9e:	fb0e bb03 	mla	fp, lr, r3, fp
 8028da2:	1c43      	adds	r3, r0, #1
 8028da4:	fa1f fc8c 	uxth.w	ip, ip
 8028da8:	fa1f fb8b 	uxth.w	fp, fp
 8028dac:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8028db0:	f10c 0101 	add.w	r1, ip, #1
 8028db4:	f400 4378 	and.w	r3, r0, #63488	; 0xf800
 8028db8:	f10b 0001 	add.w	r0, fp, #1
 8028dbc:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8028dc0:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8028dc4:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8028dc8:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8028dcc:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8028dd0:	4318      	orrs	r0, r3
 8028dd2:	ea40 000c 	orr.w	r0, r0, ip
 8028dd6:	f8a8 0000 	strh.w	r0, [r8]
 8028dda:	e734      	b.n	8028c46 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8028ddc:	f113 0b01 	adds.w	fp, r3, #1
 8028de0:	f53f af31 	bmi.w	8028c46 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8028de4:	45dc      	cmp	ip, fp
 8028de6:	f6ff af2e 	blt.w	8028c46 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8028dea:	f110 0b01 	adds.w	fp, r0, #1
 8028dee:	f53f af2a 	bmi.w	8028c46 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8028df2:	45de      	cmp	lr, fp
 8028df4:	f6ff af27 	blt.w	8028c46 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8028df8:	9302      	str	r3, [sp, #8]
 8028dfa:	fa0f f38e 	sxth.w	r3, lr
 8028dfe:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8028e00:	9301      	str	r3, [sp, #4]
 8028e02:	fa0f f38c 	sxth.w	r3, ip
 8028e06:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8028e0a:	e9cd 1505 	strd	r1, r5, [sp, #20]
 8028e0e:	9300      	str	r3, [sp, #0]
 8028e10:	463a      	mov	r2, r7
 8028e12:	4653      	mov	r3, sl
 8028e14:	4641      	mov	r1, r8
 8028e16:	9815      	ldr	r0, [sp, #84]	; 0x54
 8028e18:	f7ff fd4c 	bl	80288b4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
 8028e1c:	e713      	b.n	8028c46 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8028e1e:	1422      	asrs	r2, r4, #16
 8028e20:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8028e22:	1433      	asrs	r3, r6, #16
 8028e24:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8028e28:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8028e2c:	fb05 2303 	mla	r3, r5, r3, r2
 8028e30:	085a      	lsrs	r2, r3, #1
 8028e32:	07dd      	lsls	r5, r3, #31
 8028e34:	5cba      	ldrb	r2, [r7, r2]
 8028e36:	bf54      	ite	pl
 8028e38:	f002 020f 	andpl.w	r2, r2, #15
 8028e3c:	1112      	asrmi	r2, r2, #4
 8028e3e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8028e42:	b2d2      	uxtb	r2, r2
 8028e44:	2900      	cmp	r1, #0
 8028e46:	d077      	beq.n	8028f38 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8028e48:	f103 0e01 	add.w	lr, r3, #1
 8028e4c:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8028e50:	f01e 0f01 	tst.w	lr, #1
 8028e54:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8028e58:	bf0c      	ite	eq
 8028e5a:	f00c 0c0f 	andeq.w	ip, ip, #15
 8028e5e:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8028e62:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8028e66:	fa5f f58c 	uxtb.w	r5, ip
 8028e6a:	9512      	str	r5, [sp, #72]	; 0x48
 8028e6c:	b308      	cbz	r0, 8028eb2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 8028e6e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8028e70:	442b      	add	r3, r5
 8028e72:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8028e76:	07dd      	lsls	r5, r3, #31
 8028e78:	f103 0301 	add.w	r3, r3, #1
 8028e7c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8028e80:	bf54      	ite	pl
 8028e82:	f00c 0c0f 	andpl.w	ip, ip, #15
 8028e86:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8028e8a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8028e8e:	fa5f f58c 	uxtb.w	r5, ip
 8028e92:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8028e96:	950c      	str	r5, [sp, #48]	; 0x30
 8028e98:	07dd      	lsls	r5, r3, #31
 8028e9a:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8028e9e:	bf54      	ite	pl
 8028ea0:	f00c 0c0f 	andpl.w	ip, ip, #15
 8028ea4:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8028ea8:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8028eac:	fa5f f38c 	uxtb.w	r3, ip
 8028eb0:	9313      	str	r3, [sp, #76]	; 0x4c
 8028eb2:	b289      	uxth	r1, r1
 8028eb4:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8028eb6:	b280      	uxth	r0, r0
 8028eb8:	fb01 f300 	mul.w	r3, r1, r0
 8028ebc:	0109      	lsls	r1, r1, #4
 8028ebe:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 8028ec2:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 8028ec6:	1ac9      	subs	r1, r1, r3
 8028ec8:	b280      	uxth	r0, r0
 8028eca:	b289      	uxth	r1, r1
 8028ecc:	ebac 0c00 	sub.w	ip, ip, r0
 8028ed0:	4369      	muls	r1, r5
 8028ed2:	fa1f fc8c 	uxth.w	ip, ip
 8028ed6:	fb02 120c 	mla	r2, r2, ip, r1
 8028eda:	990c      	ldr	r1, [sp, #48]	; 0x30
 8028edc:	fb00 2001 	mla	r0, r0, r1, r2
 8028ee0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8028ee2:	fb03 0302 	mla	r3, r3, r2, r0
 8028ee6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8028eea:	b1d3      	cbz	r3, 8028f22 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8028eec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8028eee:	4353      	muls	r3, r2
 8028ef0:	1c5a      	adds	r2, r3, #1
 8028ef2:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8028ef6:	4a0f      	ldr	r2, [pc, #60]	; (8028f34 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 8028ef8:	121b      	asrs	r3, r3, #8
 8028efa:	6812      	ldr	r2, [r2, #0]
 8028efc:	2bff      	cmp	r3, #255	; 0xff
 8028efe:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 8028f02:	d12d      	bne.n	8028f60 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 8028f04:	0953      	lsrs	r3, r2, #5
 8028f06:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 8028f0a:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8028f0e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8028f12:	f02c 0c07 	bic.w	ip, ip, #7
 8028f16:	ea43 0c0c 	orr.w	ip, r3, ip
 8028f1a:	ea4c 0202 	orr.w	r2, ip, r2
 8028f1e:	f8a8 2000 	strh.w	r2, [r8]
 8028f22:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8028f24:	f108 0802 	add.w	r8, r8, #2
 8028f28:	f10b 3bff 	add.w	fp, fp, #4294967295
 8028f2c:	441c      	add	r4, r3
 8028f2e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8028f30:	441e      	add	r6, r3
 8028f32:	e6b9      	b.n	8028ca8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8028f34:	200177d4 	.word	0x200177d4
 8028f38:	2800      	cmp	r0, #0
 8028f3a:	d0ba      	beq.n	8028eb2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 8028f3c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8028f3e:	442b      	add	r3, r5
 8028f40:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8028f44:	07db      	lsls	r3, r3, #31
 8028f46:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8028f4a:	bf54      	ite	pl
 8028f4c:	f00c 0c0f 	andpl.w	ip, ip, #15
 8028f50:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8028f54:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8028f58:	fa5f f38c 	uxtb.w	r3, ip
 8028f5c:	930c      	str	r3, [sp, #48]	; 0x30
 8028f5e:	e7a8      	b.n	8028eb2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 8028f60:	f8b8 e000 	ldrh.w	lr, [r8]
 8028f64:	fa1f fa83 	uxth.w	sl, r3
 8028f68:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8028f6c:	43db      	mvns	r3, r3
 8028f6e:	ea4f 202e 	mov.w	r0, lr, asr #8
 8028f72:	fb11 f10a 	smulbb	r1, r1, sl
 8028f76:	b2db      	uxtb	r3, r3
 8028f78:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8028f7c:	b2d2      	uxtb	r2, r2
 8028f7e:	fa5f fc8c 	uxtb.w	ip, ip
 8028f82:	fb00 1003 	mla	r0, r0, r3, r1
 8028f86:	ea4f 01ee 	mov.w	r1, lr, asr #3
 8028f8a:	fb12 f20a 	smulbb	r2, r2, sl
 8028f8e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8028f92:	b280      	uxth	r0, r0
 8028f94:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8028f98:	fb1c fc0a 	smulbb	ip, ip, sl
 8028f9c:	fa5f fe8e 	uxtb.w	lr, lr
 8028fa0:	fb0e 2203 	mla	r2, lr, r3, r2
 8028fa4:	fb01 cc03 	mla	ip, r1, r3, ip
 8028fa8:	1c43      	adds	r3, r0, #1
 8028faa:	b292      	uxth	r2, r2
 8028fac:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8028fb0:	1c51      	adds	r1, r2, #1
 8028fb2:	fa1f fc8c 	uxth.w	ip, ip
 8028fb6:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8028fba:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 8028fbe:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 8028fc2:	4308      	orrs	r0, r1
 8028fc4:	f10c 0101 	add.w	r1, ip, #1
 8028fc8:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8028fcc:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8028fd0:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8028fd4:	ea40 000c 	orr.w	r0, r0, ip
 8028fd8:	f8a8 0000 	strh.w	r0, [r8]
 8028fdc:	e7a1      	b.n	8028f22 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8028fde:	b017      	add	sp, #92	; 0x5c
 8028fe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08028fe4 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
 8028fe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8028fe8:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	; 0x28
 8028fec:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8028ff0:	2d00      	cmp	r5, #0
 8028ff2:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8028ff6:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 8028ffa:	fb05 0e03 	mla	lr, r5, r3, r0
 8028ffe:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 8029002:	f2c0 80b0 	blt.w	8029166 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 8029006:	45a9      	cmp	r9, r5
 8029008:	f340 80ad 	ble.w	8029166 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 802900c:	2800      	cmp	r0, #0
 802900e:	f2c0 80a8 	blt.w	8029162 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 8029012:	4580      	cmp	r8, r0
 8029014:	f340 80a5 	ble.w	8029162 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 8029018:	ea4f 045e 	mov.w	r4, lr, lsr #1
 802901c:	f01e 0f01 	tst.w	lr, #1
 8029020:	5d16      	ldrb	r6, [r2, r4]
 8029022:	bf0c      	ite	eq
 8029024:	f006 060f 	andeq.w	r6, r6, #15
 8029028:	1136      	asrne	r6, r6, #4
 802902a:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 802902e:	b2f6      	uxtb	r6, r6
 8029030:	1c44      	adds	r4, r0, #1
 8029032:	f100 809b 	bmi.w	802916c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 8029036:	45a0      	cmp	r8, r4
 8029038:	f340 8098 	ble.w	802916c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 802903c:	2f00      	cmp	r7, #0
 802903e:	f000 8097 	beq.w	8029170 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x18c>
 8029042:	f10e 0a01 	add.w	sl, lr, #1
 8029046:	ea4f 045a 	mov.w	r4, sl, lsr #1
 802904a:	f01a 0f01 	tst.w	sl, #1
 802904e:	5d14      	ldrb	r4, [r2, r4]
 8029050:	bf0c      	ite	eq
 8029052:	f004 040f 	andeq.w	r4, r4, #15
 8029056:	1124      	asrne	r4, r4, #4
 8029058:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 802905c:	b2e4      	uxtb	r4, r4
 802905e:	3501      	adds	r5, #1
 8029060:	f100 808a 	bmi.w	8029178 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 8029064:	45a9      	cmp	r9, r5
 8029066:	f340 8087 	ble.w	8029178 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 802906a:	f1bc 0f00 	cmp.w	ip, #0
 802906e:	f000 8086 	beq.w	802917e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x19a>
 8029072:	2800      	cmp	r0, #0
 8029074:	db7e      	blt.n	8029174 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 8029076:	4580      	cmp	r8, r0
 8029078:	dd7c      	ble.n	8029174 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 802907a:	eb03 090e 	add.w	r9, r3, lr
 802907e:	ea4f 0559 	mov.w	r5, r9, lsr #1
 8029082:	f019 0f01 	tst.w	r9, #1
 8029086:	5d55      	ldrb	r5, [r2, r5]
 8029088:	bf0c      	ite	eq
 802908a:	f005 050f 	andeq.w	r5, r5, #15
 802908e:	112d      	asrne	r5, r5, #4
 8029090:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8029094:	b2ed      	uxtb	r5, r5
 8029096:	3001      	adds	r0, #1
 8029098:	d474      	bmi.n	8029184 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 802909a:	4580      	cmp	r8, r0
 802909c:	dd72      	ble.n	8029184 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 802909e:	2f00      	cmp	r7, #0
 80290a0:	d072      	beq.n	8029188 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a4>
 80290a2:	3301      	adds	r3, #1
 80290a4:	449e      	add	lr, r3
 80290a6:	ea4f 035e 	mov.w	r3, lr, lsr #1
 80290aa:	f01e 0f01 	tst.w	lr, #1
 80290ae:	5cd0      	ldrb	r0, [r2, r3]
 80290b0:	bf0c      	ite	eq
 80290b2:	f000 000f 	andeq.w	r0, r0, #15
 80290b6:	1100      	asrne	r0, r0, #4
 80290b8:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80290bc:	b2c3      	uxtb	r3, r0
 80290be:	b2ba      	uxth	r2, r7
 80290c0:	fa1f fc8c 	uxth.w	ip, ip
 80290c4:	fb02 f00c 	mul.w	r0, r2, ip
 80290c8:	0112      	lsls	r2, r2, #4
 80290ca:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 80290ce:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 80290d2:	1a12      	subs	r2, r2, r0
 80290d4:	fa1f fc8c 	uxth.w	ip, ip
 80290d8:	b292      	uxth	r2, r2
 80290da:	eba7 070c 	sub.w	r7, r7, ip
 80290de:	4362      	muls	r2, r4
 80290e0:	b2bf      	uxth	r7, r7
 80290e2:	fb06 2207 	mla	r2, r6, r7, r2
 80290e6:	fb0c 2505 	mla	r5, ip, r5, r2
 80290ea:	fb00 5303 	mla	r3, r0, r3, r5
 80290ee:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80290f2:	b3a3      	cbz	r3, 802915e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17a>
 80290f4:	4a25      	ldr	r2, [pc, #148]	; (802918c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a8>)
 80290f6:	880e      	ldrh	r6, [r1, #0]
 80290f8:	6815      	ldr	r5, [r2, #0]
 80290fa:	b29a      	uxth	r2, r3
 80290fc:	1234      	asrs	r4, r6, #8
 80290fe:	43db      	mvns	r3, r3
 8029100:	f3c5 4007 	ubfx	r0, r5, #16, #8
 8029104:	f3c5 2707 	ubfx	r7, r5, #8, #8
 8029108:	b2db      	uxtb	r3, r3
 802910a:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 802910e:	fb10 f002 	smulbb	r0, r0, r2
 8029112:	b2ed      	uxtb	r5, r5
 8029114:	fb17 f702 	smulbb	r7, r7, r2
 8029118:	fb04 0403 	mla	r4, r4, r3, r0
 802911c:	10f0      	asrs	r0, r6, #3
 802911e:	fb15 f202 	smulbb	r2, r5, r2
 8029122:	00f6      	lsls	r6, r6, #3
 8029124:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8029128:	b2a4      	uxth	r4, r4
 802912a:	b2f6      	uxtb	r6, r6
 802912c:	fb00 7003 	mla	r0, r0, r3, r7
 8029130:	fb06 2303 	mla	r3, r6, r3, r2
 8029134:	b280      	uxth	r0, r0
 8029136:	b29a      	uxth	r2, r3
 8029138:	1c63      	adds	r3, r4, #1
 802913a:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 802913e:	1c53      	adds	r3, r2, #1
 8029140:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8029144:	1c42      	adds	r2, r0, #1
 8029146:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 802914a:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802914e:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8029152:	0940      	lsrs	r0, r0, #5
 8029154:	4323      	orrs	r3, r4
 8029156:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802915a:	4303      	orrs	r3, r0
 802915c:	800b      	strh	r3, [r1, #0]
 802915e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8029162:	2600      	movs	r6, #0
 8029164:	e764      	b.n	8029030 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x4c>
 8029166:	2400      	movs	r4, #0
 8029168:	4626      	mov	r6, r4
 802916a:	e778      	b.n	802905e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 802916c:	2400      	movs	r4, #0
 802916e:	e776      	b.n	802905e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 8029170:	463c      	mov	r4, r7
 8029172:	e774      	b.n	802905e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 8029174:	2500      	movs	r5, #0
 8029176:	e78e      	b.n	8029096 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xb2>
 8029178:	2300      	movs	r3, #0
 802917a:	461d      	mov	r5, r3
 802917c:	e79f      	b.n	80290be <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 802917e:	4663      	mov	r3, ip
 8029180:	4665      	mov	r5, ip
 8029182:	e79c      	b.n	80290be <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8029184:	2300      	movs	r3, #0
 8029186:	e79a      	b.n	80290be <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8029188:	463b      	mov	r3, r7
 802918a:	e798      	b.n	80290be <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 802918c:	200177d4 	.word	0x200177d4

08029190 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8029190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029194:	b093      	sub	sp, #76	; 0x4c
 8029196:	461d      	mov	r5, r3
 8029198:	920c      	str	r2, [sp, #48]	; 0x30
 802919a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 802919c:	9011      	str	r0, [sp, #68]	; 0x44
 802919e:	9107      	str	r1, [sp, #28]
 80291a0:	6850      	ldr	r0, [r2, #4]
 80291a2:	6812      	ldr	r2, [r2, #0]
 80291a4:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 80291a8:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 80291ac:	fb00 1303 	mla	r3, r0, r3, r1
 80291b0:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 80291b4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80291b6:	689b      	ldr	r3, [r3, #8]
 80291b8:	3301      	adds	r3, #1
 80291ba:	f023 0301 	bic.w	r3, r3, #1
 80291be:	9306      	str	r3, [sp, #24]
 80291c0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80291c2:	681f      	ldr	r7, [r3, #0]
 80291c4:	9b07      	ldr	r3, [sp, #28]
 80291c6:	2b00      	cmp	r3, #0
 80291c8:	dc03      	bgt.n	80291d2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 80291ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80291cc:	2b00      	cmp	r3, #0
 80291ce:	f340 8267 	ble.w	80296a0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 80291d2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80291d4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80291d8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80291dc:	1e48      	subs	r0, r1, #1
 80291de:	f102 3cff 	add.w	ip, r2, #4294967295
 80291e2:	2d00      	cmp	r5, #0
 80291e4:	f340 80b7 	ble.w	8029356 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 80291e8:	ea5f 4e24 	movs.w	lr, r4, asr #16
 80291ec:	ea4f 4326 	mov.w	r3, r6, asr #16
 80291f0:	d406      	bmi.n	8029200 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80291f2:	4586      	cmp	lr, r0
 80291f4:	da04      	bge.n	8029200 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80291f6:	2b00      	cmp	r3, #0
 80291f8:	db02      	blt.n	8029200 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80291fa:	4563      	cmp	r3, ip
 80291fc:	f2c0 80ac 	blt.w	8029358 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8029200:	f11e 0e01 	adds.w	lr, lr, #1
 8029204:	f100 809f 	bmi.w	8029346 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8029208:	4571      	cmp	r1, lr
 802920a:	f2c0 809c 	blt.w	8029346 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 802920e:	3301      	adds	r3, #1
 8029210:	f100 8099 	bmi.w	8029346 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8029214:	429a      	cmp	r2, r3
 8029216:	f2c0 8096 	blt.w	8029346 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 802921a:	46c8      	mov	r8, r9
 802921c:	f9bd a018 	ldrsh.w	sl, [sp, #24]
 8029220:	9509      	str	r5, [sp, #36]	; 0x24
 8029222:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8029224:	2b00      	cmp	r3, #0
 8029226:	f340 80b5 	ble.w	8029394 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 802922a:	f3c4 3303 	ubfx	r3, r4, #12, #4
 802922e:	1430      	asrs	r0, r6, #16
 8029230:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8029234:	9308      	str	r3, [sp, #32]
 8029236:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8029238:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 802923c:	1423      	asrs	r3, r4, #16
 802923e:	f100 813f 	bmi.w	80294c0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8029242:	f10c 3bff 	add.w	fp, ip, #4294967295
 8029246:	455b      	cmp	r3, fp
 8029248:	f280 813a 	bge.w	80294c0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 802924c:	2800      	cmp	r0, #0
 802924e:	f2c0 8137 	blt.w	80294c0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8029252:	f10e 3bff 	add.w	fp, lr, #4294967295
 8029256:	4558      	cmp	r0, fp
 8029258:	f280 8132 	bge.w	80294c0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 802925c:	9a06      	ldr	r2, [sp, #24]
 802925e:	fb00 3302 	mla	r3, r0, r2, r3
 8029262:	0858      	lsrs	r0, r3, #1
 8029264:	07da      	lsls	r2, r3, #31
 8029266:	9a08      	ldr	r2, [sp, #32]
 8029268:	f817 c000 	ldrb.w	ip, [r7, r0]
 802926c:	bf54      	ite	pl
 802926e:	f00c 0c0f 	andpl.w	ip, ip, #15
 8029272:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8029276:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802927a:	fa5f fc8c 	uxtb.w	ip, ip
 802927e:	2a00      	cmp	r2, #0
 8029280:	f000 80cc 	beq.w	802941c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8029284:	1c58      	adds	r0, r3, #1
 8029286:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 802928a:	07c0      	lsls	r0, r0, #31
 802928c:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8029290:	bf54      	ite	pl
 8029292:	f00e 0e0f 	andpl.w	lr, lr, #15
 8029296:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 802929a:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 802929e:	fa5f fe8e 	uxtb.w	lr, lr
 80292a2:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 80292a6:	b1b9      	cbz	r1, 80292d8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 80292a8:	4453      	add	r3, sl
 80292aa:	0858      	lsrs	r0, r3, #1
 80292ac:	07da      	lsls	r2, r3, #31
 80292ae:	5c38      	ldrb	r0, [r7, r0]
 80292b0:	bf54      	ite	pl
 80292b2:	f000 000f 	andpl.w	r0, r0, #15
 80292b6:	1100      	asrmi	r0, r0, #4
 80292b8:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80292bc:	b2c0      	uxtb	r0, r0
 80292be:	900a      	str	r0, [sp, #40]	; 0x28
 80292c0:	1c58      	adds	r0, r3, #1
 80292c2:	0843      	lsrs	r3, r0, #1
 80292c4:	07c2      	lsls	r2, r0, #31
 80292c6:	5cfb      	ldrb	r3, [r7, r3]
 80292c8:	bf54      	ite	pl
 80292ca:	f003 030f 	andpl.w	r3, r3, #15
 80292ce:	111b      	asrmi	r3, r3, #4
 80292d0:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80292d4:	b2db      	uxtb	r3, r3
 80292d6:	930e      	str	r3, [sp, #56]	; 0x38
 80292d8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80292dc:	b289      	uxth	r1, r1
 80292de:	fb02 f301 	mul.w	r3, r2, r1
 80292e2:	0112      	lsls	r2, r2, #4
 80292e4:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 80292e8:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 80292ec:	1ad2      	subs	r2, r2, r3
 80292ee:	b289      	uxth	r1, r1
 80292f0:	b292      	uxth	r2, r2
 80292f2:	1a40      	subs	r0, r0, r1
 80292f4:	fa1f fe80 	uxth.w	lr, r0
 80292f8:	980d      	ldr	r0, [sp, #52]	; 0x34
 80292fa:	4342      	muls	r2, r0
 80292fc:	fb0c 2c0e 	mla	ip, ip, lr, r2
 8029300:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8029302:	fb01 c102 	mla	r1, r1, r2, ip
 8029306:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8029308:	fb03 1302 	mla	r3, r3, r2, r1
 802930c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8029310:	2bff      	cmp	r3, #255	; 0xff
 8029312:	f040 8094 	bne.w	802943e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
 8029316:	4bbf      	ldr	r3, [pc, #764]	; (8029614 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 8029318:	681a      	ldr	r2, [r3, #0]
 802931a:	4bbf      	ldr	r3, [pc, #764]	; (8029618 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>)
 802931c:	0951      	lsrs	r1, r2, #5
 802931e:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 8029322:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8029326:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802932a:	430b      	orrs	r3, r1
 802932c:	4313      	orrs	r3, r2
 802932e:	f8a8 3000 	strh.w	r3, [r8]
 8029332:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8029334:	f108 0802 	add.w	r8, r8, #2
 8029338:	441c      	add	r4, r3
 802933a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802933c:	441e      	add	r6, r3
 802933e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8029340:	3b01      	subs	r3, #1
 8029342:	9309      	str	r3, [sp, #36]	; 0x24
 8029344:	e76d      	b.n	8029222 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8029346:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8029348:	3d01      	subs	r5, #1
 802934a:	f109 0902 	add.w	r9, r9, #2
 802934e:	441c      	add	r4, r3
 8029350:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8029352:	441e      	add	r6, r3
 8029354:	e745      	b.n	80291e2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8029356:	d021      	beq.n	802939c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8029358:	1e6b      	subs	r3, r5, #1
 802935a:	981f      	ldr	r0, [sp, #124]	; 0x7c
 802935c:	fb00 4003 	mla	r0, r0, r3, r4
 8029360:	1400      	asrs	r0, r0, #16
 8029362:	f53f af5a 	bmi.w	802921a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8029366:	3901      	subs	r1, #1
 8029368:	4288      	cmp	r0, r1
 802936a:	f6bf af56 	bge.w	802921a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802936e:	9920      	ldr	r1, [sp, #128]	; 0x80
 8029370:	fb01 6303 	mla	r3, r1, r3, r6
 8029374:	141b      	asrs	r3, r3, #16
 8029376:	f53f af50 	bmi.w	802921a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802937a:	3a01      	subs	r2, #1
 802937c:	4293      	cmp	r3, r2
 802937e:	f6bf af4c 	bge.w	802921a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8029382:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8029386:	46a8      	mov	r8, r5
 8029388:	46ce      	mov	lr, r9
 802938a:	9308      	str	r3, [sp, #32]
 802938c:	f1b8 0f00 	cmp.w	r8, #0
 8029390:	f300 80b6 	bgt.w	8029500 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8029394:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8029398:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 802939c:	9b07      	ldr	r3, [sp, #28]
 802939e:	2b00      	cmp	r3, #0
 80293a0:	f340 817e 	ble.w	80296a0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 80293a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80293a8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80293aa:	ee30 0a04 	vadd.f32	s0, s0, s8
 80293ae:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80293b2:	eef0 6a62 	vmov.f32	s13, s5
 80293b6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80293ba:	ee31 1a05 	vadd.f32	s2, s2, s10
 80293be:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80293c2:	ee16 4a90 	vmov	r4, s13
 80293c6:	eef0 6a43 	vmov.f32	s13, s6
 80293ca:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80293ce:	ee16 6a90 	vmov	r6, s13
 80293d2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80293d6:	ee61 7a27 	vmul.f32	s15, s2, s15
 80293da:	ee77 2a62 	vsub.f32	s5, s14, s5
 80293de:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80293e2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80293e6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80293ea:	ee12 2a90 	vmov	r2, s5
 80293ee:	eef0 2a47 	vmov.f32	s5, s14
 80293f2:	fb92 f3f3 	sdiv	r3, r2, r3
 80293f6:	ee13 2a10 	vmov	r2, s6
 80293fa:	931f      	str	r3, [sp, #124]	; 0x7c
 80293fc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80293fe:	eeb0 3a67 	vmov.f32	s6, s15
 8029402:	fb92 f3f3 	sdiv	r3, r2, r3
 8029406:	9320      	str	r3, [sp, #128]	; 0x80
 8029408:	9b07      	ldr	r3, [sp, #28]
 802940a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802940c:	3b01      	subs	r3, #1
 802940e:	9307      	str	r3, [sp, #28]
 8029410:	bf08      	it	eq
 8029412:	4615      	moveq	r5, r2
 8029414:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8029416:	bf18      	it	ne
 8029418:	461d      	movne	r5, r3
 802941a:	e6d3      	b.n	80291c4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 802941c:	2900      	cmp	r1, #0
 802941e:	f43f af5b 	beq.w	80292d8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8029422:	eb0a 0003 	add.w	r0, sl, r3
 8029426:	0843      	lsrs	r3, r0, #1
 8029428:	07c0      	lsls	r0, r0, #31
 802942a:	5cfb      	ldrb	r3, [r7, r3]
 802942c:	bf54      	ite	pl
 802942e:	f003 030f 	andpl.w	r3, r3, #15
 8029432:	111b      	asrmi	r3, r3, #4
 8029434:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8029438:	b2db      	uxtb	r3, r3
 802943a:	930a      	str	r3, [sp, #40]	; 0x28
 802943c:	e74c      	b.n	80292d8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 802943e:	2b00      	cmp	r3, #0
 8029440:	f43f af77 	beq.w	8029332 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8029444:	4a73      	ldr	r2, [pc, #460]	; (8029614 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 8029446:	fa1f fe83 	uxth.w	lr, r3
 802944a:	f8b8 c000 	ldrh.w	ip, [r8]
 802944e:	43db      	mvns	r3, r3
 8029450:	6810      	ldr	r0, [r2, #0]
 8029452:	ea4f 212c 	mov.w	r1, ip, asr #8
 8029456:	f3c0 4207 	ubfx	r2, r0, #16, #8
 802945a:	b2db      	uxtb	r3, r3
 802945c:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8029460:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 8029464:	fb12 f20e 	smulbb	r2, r2, lr
 8029468:	b2c0      	uxtb	r0, r0
 802946a:	fb1b fb0e 	smulbb	fp, fp, lr
 802946e:	fb01 2103 	mla	r1, r1, r3, r2
 8029472:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8029476:	fb10 fe0e 	smulbb	lr, r0, lr
 802947a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802947e:	b289      	uxth	r1, r1
 8029480:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8029484:	fa5f fc8c 	uxtb.w	ip, ip
 8029488:	fb02 b203 	mla	r2, r2, r3, fp
 802948c:	1c48      	adds	r0, r1, #1
 802948e:	fb0c e303 	mla	r3, ip, r3, lr
 8029492:	b292      	uxth	r2, r2
 8029494:	b29b      	uxth	r3, r3
 8029496:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 802949a:	f102 0b01 	add.w	fp, r2, #1
 802949e:	f401 4078 	and.w	r0, r1, #63488	; 0xf800
 80294a2:	1c59      	adds	r1, r3, #1
 80294a4:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 80294a8:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80294ac:	0952      	lsrs	r2, r2, #5
 80294ae:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 80294b2:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80294b6:	4301      	orrs	r1, r0
 80294b8:	4311      	orrs	r1, r2
 80294ba:	f8a8 1000 	strh.w	r1, [r8]
 80294be:	e738      	b.n	8029332 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 80294c0:	f113 0b01 	adds.w	fp, r3, #1
 80294c4:	f53f af35 	bmi.w	8029332 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 80294c8:	45dc      	cmp	ip, fp
 80294ca:	f6ff af32 	blt.w	8029332 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 80294ce:	f110 0b01 	adds.w	fp, r0, #1
 80294d2:	f53f af2e 	bmi.w	8029332 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 80294d6:	45de      	cmp	lr, fp
 80294d8:	f6ff af2b 	blt.w	8029332 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 80294dc:	9302      	str	r3, [sp, #8]
 80294de:	fa0f f38e 	sxth.w	r3, lr
 80294e2:	9a08      	ldr	r2, [sp, #32]
 80294e4:	9301      	str	r3, [sp, #4]
 80294e6:	fa0f f38c 	sxth.w	r3, ip
 80294ea:	9105      	str	r1, [sp, #20]
 80294ec:	4641      	mov	r1, r8
 80294ee:	9300      	str	r3, [sp, #0]
 80294f0:	4653      	mov	r3, sl
 80294f2:	e9cd 0203 	strd	r0, r2, [sp, #12]
 80294f6:	463a      	mov	r2, r7
 80294f8:	9811      	ldr	r0, [sp, #68]	; 0x44
 80294fa:	f7ff fd73 	bl	8028fe4 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
 80294fe:	e718      	b.n	8029332 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8029500:	1422      	asrs	r2, r4, #16
 8029502:	9906      	ldr	r1, [sp, #24]
 8029504:	1433      	asrs	r3, r6, #16
 8029506:	f3c4 3003 	ubfx	r0, r4, #12, #4
 802950a:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 802950e:	fb01 2303 	mla	r3, r1, r3, r2
 8029512:	085a      	lsrs	r2, r3, #1
 8029514:	07d9      	lsls	r1, r3, #31
 8029516:	5cba      	ldrb	r2, [r7, r2]
 8029518:	bf54      	ite	pl
 802951a:	f002 020f 	andpl.w	r2, r2, #15
 802951e:	1112      	asrmi	r2, r2, #4
 8029520:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8029524:	b2d2      	uxtb	r2, r2
 8029526:	2800      	cmp	r0, #0
 8029528:	d063      	beq.n	80295f2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
 802952a:	f103 0a01 	add.w	sl, r3, #1
 802952e:	ea4f 015a 	mov.w	r1, sl, lsr #1
 8029532:	f01a 0f01 	tst.w	sl, #1
 8029536:	5c79      	ldrb	r1, [r7, r1]
 8029538:	bf0c      	ite	eq
 802953a:	f001 010f 	andeq.w	r1, r1, #15
 802953e:	1109      	asrne	r1, r1, #4
 8029540:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8029544:	b2c9      	uxtb	r1, r1
 8029546:	910f      	str	r1, [sp, #60]	; 0x3c
 8029548:	f1bc 0f00 	cmp.w	ip, #0
 802954c:	d01a      	beq.n	8029584 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 802954e:	9908      	ldr	r1, [sp, #32]
 8029550:	440b      	add	r3, r1
 8029552:	0859      	lsrs	r1, r3, #1
 8029554:	f013 0f01 	tst.w	r3, #1
 8029558:	f103 0301 	add.w	r3, r3, #1
 802955c:	5c79      	ldrb	r1, [r7, r1]
 802955e:	bf0c      	ite	eq
 8029560:	f001 010f 	andeq.w	r1, r1, #15
 8029564:	1109      	asrne	r1, r1, #4
 8029566:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802956a:	b2c9      	uxtb	r1, r1
 802956c:	910b      	str	r1, [sp, #44]	; 0x2c
 802956e:	0859      	lsrs	r1, r3, #1
 8029570:	07db      	lsls	r3, r3, #31
 8029572:	5c79      	ldrb	r1, [r7, r1]
 8029574:	bf54      	ite	pl
 8029576:	f001 010f 	andpl.w	r1, r1, #15
 802957a:	1109      	asrmi	r1, r1, #4
 802957c:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8029580:	b2c9      	uxtb	r1, r1
 8029582:	9110      	str	r1, [sp, #64]	; 0x40
 8029584:	b280      	uxth	r0, r0
 8029586:	fa1f fc8c 	uxth.w	ip, ip
 802958a:	fb00 f30c 	mul.w	r3, r0, ip
 802958e:	0100      	lsls	r0, r0, #4
 8029590:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 8029594:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 8029598:	1ac0      	subs	r0, r0, r3
 802959a:	fa1f fc8c 	uxth.w	ip, ip
 802959e:	b280      	uxth	r0, r0
 80295a0:	eba1 010c 	sub.w	r1, r1, ip
 80295a4:	fa1f fa81 	uxth.w	sl, r1
 80295a8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80295aa:	4348      	muls	r0, r1
 80295ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80295ae:	fb02 020a 	mla	r2, r2, sl, r0
 80295b2:	fb0c 2c01 	mla	ip, ip, r1, r2
 80295b6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80295b8:	fb03 c302 	mla	r3, r3, r2, ip
 80295bc:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80295c0:	2bff      	cmp	r3, #255	; 0xff
 80295c2:	d12b      	bne.n	802961c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 80295c4:	4b13      	ldr	r3, [pc, #76]	; (8029614 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 80295c6:	681a      	ldr	r2, [r3, #0]
 80295c8:	4b13      	ldr	r3, [pc, #76]	; (8029618 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>)
 80295ca:	0951      	lsrs	r1, r2, #5
 80295cc:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 80295d0:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80295d4:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80295d8:	430b      	orrs	r3, r1
 80295da:	4313      	orrs	r3, r2
 80295dc:	f8ae 3000 	strh.w	r3, [lr]
 80295e0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80295e2:	f10e 0e02 	add.w	lr, lr, #2
 80295e6:	f108 38ff 	add.w	r8, r8, #4294967295
 80295ea:	441c      	add	r4, r3
 80295ec:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80295ee:	441e      	add	r6, r3
 80295f0:	e6cc      	b.n	802938c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 80295f2:	f1bc 0f00 	cmp.w	ip, #0
 80295f6:	d0c5      	beq.n	8029584 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 80295f8:	9908      	ldr	r1, [sp, #32]
 80295fa:	440b      	add	r3, r1
 80295fc:	0859      	lsrs	r1, r3, #1
 80295fe:	07db      	lsls	r3, r3, #31
 8029600:	5c79      	ldrb	r1, [r7, r1]
 8029602:	bf54      	ite	pl
 8029604:	f001 010f 	andpl.w	r1, r1, #15
 8029608:	1109      	asrmi	r1, r1, #4
 802960a:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802960e:	b2c9      	uxtb	r1, r1
 8029610:	910b      	str	r1, [sp, #44]	; 0x2c
 8029612:	e7b7      	b.n	8029584 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 8029614:	200177d4 	.word	0x200177d4
 8029618:	fffff800 	.word	0xfffff800
 802961c:	2b00      	cmp	r3, #0
 802961e:	d0df      	beq.n	80295e0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x450>
 8029620:	4a21      	ldr	r2, [pc, #132]	; (80296a8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>)
 8029622:	fa1f fa83 	uxth.w	sl, r3
 8029626:	f8be c000 	ldrh.w	ip, [lr]
 802962a:	43db      	mvns	r3, r3
 802962c:	6810      	ldr	r0, [r2, #0]
 802962e:	ea4f 212c 	mov.w	r1, ip, asr #8
 8029632:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8029636:	b2db      	uxtb	r3, r3
 8029638:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 802963c:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 8029640:	fb12 f20a 	smulbb	r2, r2, sl
 8029644:	b2c0      	uxtb	r0, r0
 8029646:	fb1b fb0a 	smulbb	fp, fp, sl
 802964a:	fb01 2103 	mla	r1, r1, r3, r2
 802964e:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8029652:	fb10 f00a 	smulbb	r0, r0, sl
 8029656:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802965a:	b289      	uxth	r1, r1
 802965c:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8029660:	fa5f fc8c 	uxtb.w	ip, ip
 8029664:	fb02 b203 	mla	r2, r2, r3, fp
 8029668:	fb0c 0003 	mla	r0, ip, r3, r0
 802966c:	1c4b      	adds	r3, r1, #1
 802966e:	b292      	uxth	r2, r2
 8029670:	b280      	uxth	r0, r0
 8029672:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8029676:	f100 0b01 	add.w	fp, r0, #1
 802967a:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 802967e:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 8029682:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 8029686:	ea4b 0101 	orr.w	r1, fp, r1
 802968a:	f102 0b01 	add.w	fp, r2, #1
 802968e:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 8029692:	0952      	lsrs	r2, r2, #5
 8029694:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8029698:	4311      	orrs	r1, r2
 802969a:	f8ae 1000 	strh.w	r1, [lr]
 802969e:	e79f      	b.n	80295e0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x450>
 80296a0:	b013      	add	sp, #76	; 0x4c
 80296a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80296a6:	bf00      	nop
 80296a8:	200177d4 	.word	0x200177d4

080296ac <CRC_Lock>:
 80296ac:	4a20      	ldr	r2, [pc, #128]	; (8029730 <CRC_Lock+0x84>)
 80296ae:	b530      	push	{r4, r5, lr}
 80296b0:	6813      	ldr	r3, [r2, #0]
 80296b2:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 80296b6:	f24c 2540 	movw	r5, #49728	; 0xc240
 80296ba:	f023 0301 	bic.w	r3, r3, #1
 80296be:	6013      	str	r3, [r2, #0]
 80296c0:	4b1c      	ldr	r3, [pc, #112]	; (8029734 <CRC_Lock+0x88>)
 80296c2:	681a      	ldr	r2, [r3, #0]
 80296c4:	4022      	ands	r2, r4
 80296c6:	42aa      	cmp	r2, r5
 80296c8:	d005      	beq.n	80296d6 <CRC_Lock+0x2a>
 80296ca:	681b      	ldr	r3, [r3, #0]
 80296cc:	f24c 2270 	movw	r2, #49776	; 0xc270
 80296d0:	4023      	ands	r3, r4
 80296d2:	4293      	cmp	r3, r2
 80296d4:	d124      	bne.n	8029720 <CRC_Lock+0x74>
 80296d6:	4b18      	ldr	r3, [pc, #96]	; (8029738 <CRC_Lock+0x8c>)
 80296d8:	681b      	ldr	r3, [r3, #0]
 80296da:	bb0b      	cbnz	r3, 8029720 <CRC_Lock+0x74>
 80296dc:	4b17      	ldr	r3, [pc, #92]	; (802973c <CRC_Lock+0x90>)
 80296de:	681a      	ldr	r2, [r3, #0]
 80296e0:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80296e4:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 80296e8:	d00d      	beq.n	8029706 <CRC_Lock+0x5a>
 80296ea:	681a      	ldr	r2, [r3, #0]
 80296ec:	f240 4483 	movw	r4, #1155	; 0x483
 80296f0:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80296f4:	42a2      	cmp	r2, r4
 80296f6:	d006      	beq.n	8029706 <CRC_Lock+0x5a>
 80296f8:	681b      	ldr	r3, [r3, #0]
 80296fa:	f240 4285 	movw	r2, #1157	; 0x485
 80296fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8029702:	4293      	cmp	r3, r2
 8029704:	d10c      	bne.n	8029720 <CRC_Lock+0x74>
 8029706:	4b0e      	ldr	r3, [pc, #56]	; (8029740 <CRC_Lock+0x94>)
 8029708:	2201      	movs	r2, #1
 802970a:	601a      	str	r2, [r3, #0]
 802970c:	681a      	ldr	r2, [r3, #0]
 802970e:	2a00      	cmp	r2, #0
 8029710:	d1fc      	bne.n	802970c <CRC_Lock+0x60>
 8029712:	4b0c      	ldr	r3, [pc, #48]	; (8029744 <CRC_Lock+0x98>)
 8029714:	6018      	str	r0, [r3, #0]
 8029716:	6818      	ldr	r0, [r3, #0]
 8029718:	1a43      	subs	r3, r0, r1
 802971a:	4258      	negs	r0, r3
 802971c:	4158      	adcs	r0, r3
 802971e:	bd30      	pop	{r4, r5, pc}
 8029720:	4b09      	ldr	r3, [pc, #36]	; (8029748 <CRC_Lock+0x9c>)
 8029722:	2201      	movs	r2, #1
 8029724:	601a      	str	r2, [r3, #0]
 8029726:	681a      	ldr	r2, [r3, #0]
 8029728:	2a00      	cmp	r2, #0
 802972a:	d1fc      	bne.n	8029726 <CRC_Lock+0x7a>
 802972c:	4b07      	ldr	r3, [pc, #28]	; (802974c <CRC_Lock+0xa0>)
 802972e:	e7f1      	b.n	8029714 <CRC_Lock+0x68>
 8029730:	e0002000 	.word	0xe0002000
 8029734:	e000ed00 	.word	0xe000ed00
 8029738:	e0042000 	.word	0xe0042000
 802973c:	5c001000 	.word	0x5c001000
 8029740:	58024c08 	.word	0x58024c08
 8029744:	58024c00 	.word	0x58024c00
 8029748:	40023008 	.word	0x40023008
 802974c:	40023000 	.word	0x40023000

08029750 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8029750:	6101      	str	r1, [r0, #16]
 8029752:	4770      	bx	lr

08029754 <_ZN8touchgfx8Gestures4tickEv>:
 8029754:	7b83      	ldrb	r3, [r0, #14]
 8029756:	b14b      	cbz	r3, 802976c <_ZN8touchgfx8Gestures4tickEv+0x18>
 8029758:	8903      	ldrh	r3, [r0, #8]
 802975a:	3301      	adds	r3, #1
 802975c:	b29b      	uxth	r3, r3
 802975e:	2b07      	cmp	r3, #7
 8029760:	8103      	strh	r3, [r0, #8]
 8029762:	bf81      	itttt	hi
 8029764:	2300      	movhi	r3, #0
 8029766:	8143      	strhhi	r3, [r0, #10]
 8029768:	8183      	strhhi	r3, [r0, #12]
 802976a:	7383      	strbhi	r3, [r0, #14]
 802976c:	4770      	bx	lr
	...

08029770 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8029770:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8029774:	4698      	mov	r8, r3
 8029776:	8883      	ldrh	r3, [r0, #4]
 8029778:	4604      	mov	r4, r0
 802977a:	4617      	mov	r7, r2
 802977c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8029780:	eba8 0303 	sub.w	r3, r8, r3
 8029784:	4a19      	ldr	r2, [pc, #100]	; (80297ec <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 8029786:	460e      	mov	r6, r1
 8029788:	b21b      	sxth	r3, r3
 802978a:	88c1      	ldrh	r1, [r0, #6]
 802978c:	9200      	str	r2, [sp, #0]
 802978e:	2000      	movs	r0, #0
 8029790:	2b00      	cmp	r3, #0
 8029792:	8aa2      	ldrh	r2, [r4, #20]
 8029794:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 8029798:	bfb8      	it	lt
 802979a:	425b      	neglt	r3, r3
 802979c:	f88d 0004 	strb.w	r0, [sp, #4]
 80297a0:	f8ad 1008 	strh.w	r1, [sp, #8]
 80297a4:	b21b      	sxth	r3, r3
 80297a6:	f8ad 800a 	strh.w	r8, [sp, #10]
 80297aa:	f8ad 500c 	strh.w	r5, [sp, #12]
 80297ae:	4293      	cmp	r3, r2
 80297b0:	dc07      	bgt.n	80297c2 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 80297b2:	1a69      	subs	r1, r5, r1
 80297b4:	b209      	sxth	r1, r1
 80297b6:	2900      	cmp	r1, #0
 80297b8:	bfb8      	it	lt
 80297ba:	4249      	neglt	r1, r1
 80297bc:	b209      	sxth	r1, r1
 80297be:	428a      	cmp	r2, r1
 80297c0:	da10      	bge.n	80297e4 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 80297c2:	6920      	ldr	r0, [r4, #16]
 80297c4:	4669      	mov	r1, sp
 80297c6:	eba8 0606 	sub.w	r6, r8, r6
 80297ca:	1bef      	subs	r7, r5, r7
 80297cc:	6803      	ldr	r3, [r0, #0]
 80297ce:	685b      	ldr	r3, [r3, #4]
 80297d0:	4798      	blx	r3
 80297d2:	2300      	movs	r3, #0
 80297d4:	2001      	movs	r0, #1
 80297d6:	8166      	strh	r6, [r4, #10]
 80297d8:	8123      	strh	r3, [r4, #8]
 80297da:	81a7      	strh	r7, [r4, #12]
 80297dc:	f8a4 8004 	strh.w	r8, [r4, #4]
 80297e0:	80e5      	strh	r5, [r4, #6]
 80297e2:	73a0      	strb	r0, [r4, #14]
 80297e4:	b004      	add	sp, #16
 80297e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80297ea:	bf00      	nop
 80297ec:	0802ff88 	.word	0x0802ff88

080297f0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 80297f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80297f2:	461e      	mov	r6, r3
 80297f4:	1e4b      	subs	r3, r1, #1
 80297f6:	b085      	sub	sp, #20
 80297f8:	4604      	mov	r4, r0
 80297fa:	2b01      	cmp	r3, #1
 80297fc:	460d      	mov	r5, r1
 80297fe:	4617      	mov	r7, r2
 8029800:	d84b      	bhi.n	802989a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8029802:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8029806:	1cd3      	adds	r3, r2, #3
 8029808:	b29b      	uxth	r3, r3
 802980a:	2b06      	cmp	r3, #6
 802980c:	d916      	bls.n	802983c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 802980e:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 80298b0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8029812:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8029816:	f8cd c004 	str.w	ip, [sp, #4]
 802981a:	f04f 0c00 	mov.w	ip, #0
 802981e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8029822:	6900      	ldr	r0, [r0, #16]
 8029824:	f8ad 100c 	strh.w	r1, [sp, #12]
 8029828:	a901      	add	r1, sp, #4
 802982a:	f88d c008 	strb.w	ip, [sp, #8]
 802982e:	f8ad 200a 	strh.w	r2, [sp, #10]
 8029832:	f8ad 300e 	strh.w	r3, [sp, #14]
 8029836:	6803      	ldr	r3, [r0, #0]
 8029838:	689b      	ldr	r3, [r3, #8]
 802983a:	4798      	blx	r3
 802983c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8029840:	1cd3      	adds	r3, r2, #3
 8029842:	b29b      	uxth	r3, r3
 8029844:	2b06      	cmp	r3, #6
 8029846:	d916      	bls.n	8029876 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8029848:	f8df c064 	ldr.w	ip, [pc, #100]	; 80298b0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802984c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8029850:	f8cd c004 	str.w	ip, [sp, #4]
 8029854:	f04f 0c01 	mov.w	ip, #1
 8029858:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802985c:	6920      	ldr	r0, [r4, #16]
 802985e:	f8ad 100c 	strh.w	r1, [sp, #12]
 8029862:	a901      	add	r1, sp, #4
 8029864:	f88d c008 	strb.w	ip, [sp, #8]
 8029868:	f8ad 200a 	strh.w	r2, [sp, #10]
 802986c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8029870:	6803      	ldr	r3, [r0, #0]
 8029872:	689b      	ldr	r3, [r3, #8]
 8029874:	4798      	blx	r3
 8029876:	4b0d      	ldr	r3, [pc, #52]	; (80298ac <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 8029878:	a901      	add	r1, sp, #4
 802987a:	6920      	ldr	r0, [r4, #16]
 802987c:	9301      	str	r3, [sp, #4]
 802987e:	2300      	movs	r3, #0
 8029880:	f88d 5008 	strb.w	r5, [sp, #8]
 8029884:	f8ad 700a 	strh.w	r7, [sp, #10]
 8029888:	f8ad 600c 	strh.w	r6, [sp, #12]
 802988c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8029890:	6803      	ldr	r3, [r0, #0]
 8029892:	681b      	ldr	r3, [r3, #0]
 8029894:	4798      	blx	r3
 8029896:	b005      	add	sp, #20
 8029898:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802989a:	2900      	cmp	r1, #0
 802989c:	d1eb      	bne.n	8029876 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802989e:	80a2      	strh	r2, [r4, #4]
 80298a0:	80c6      	strh	r6, [r0, #6]
 80298a2:	60a1      	str	r1, [r4, #8]
 80298a4:	81a1      	strh	r1, [r4, #12]
 80298a6:	73a1      	strb	r1, [r4, #14]
 80298a8:	e7e5      	b.n	8029876 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80298aa:	bf00      	nop
 80298ac:	0802ff74 	.word	0x0802ff74
 80298b0:	0802ff9c 	.word	0x0802ff9c

080298b4 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5>:
 80298b4:	10c9      	asrs	r1, r1, #3
 80298b6:	2900      	cmp	r1, #0
 80298b8:	bfb8      	it	lt
 80298ba:	4249      	neglt	r1, r1
 80298bc:	2801      	cmp	r0, #1
 80298be:	d108      	bne.n	80298d2 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5+0x1e>
 80298c0:	f3c1 0008 	ubfx	r0, r1, #0, #9
 80298c4:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 80298c8:	4601      	mov	r1, r0
 80298ca:	dd02      	ble.n	80298d2 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5+0x1e>
 80298cc:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
 80298d0:	4770      	bx	lr
 80298d2:	29ff      	cmp	r1, #255	; 0xff
 80298d4:	bfa8      	it	ge
 80298d6:	21ff      	movge	r1, #255	; 0xff
 80298d8:	4608      	mov	r0, r1
 80298da:	4770      	bx	lr

080298dc <_ZN8touchgfx10Rasterizer6lineToEii>:
 80298dc:	b410      	push	{r4}
 80298de:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 80298e2:	429c      	cmp	r4, r3
 80298e4:	d803      	bhi.n	80298ee <_ZN8touchgfx10Rasterizer6lineToEii+0x12>
 80298e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80298ea:	f7f0 bb0f 	b.w	8019f0c <_ZN8touchgfx7Outline6lineToEii>
 80298ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80298f2:	4770      	bx	lr

080298f4 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>:
 80298f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80298f8:	b08b      	sub	sp, #44	; 0x2c
 80298fa:	4606      	mov	r6, r0
 80298fc:	468a      	mov	sl, r1
 80298fe:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8029902:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8029906:	9308      	str	r3, [sp, #32]
 8029908:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 802990c:	9309      	str	r3, [sp, #36]	; 0x24
 802990e:	f7f0 fc68 	bl	801a1e2 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>
 8029912:	68b5      	ldr	r5, [r6, #8]
 8029914:	4604      	mov	r4, r0
 8029916:	2d00      	cmp	r5, #0
 8029918:	d044      	beq.n	80299a4 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 802991a:	6873      	ldr	r3, [r6, #4]
 802991c:	42ab      	cmp	r3, r5
 802991e:	d33d      	bcc.n	802999c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa8>
 8029920:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8029924:	f04f 0800 	mov.w	r8, #0
 8029928:	f9b6 2034 	ldrsh.w	r2, [r6, #52]	; 0x34
 802992c:	eb02 0b03 	add.w	fp, r2, r3
 8029930:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8029934:	fb02 1203 	mla	r2, r2, r3, r1
 8029938:	9205      	str	r2, [sp, #20]
 802993a:	1e6a      	subs	r2, r5, #1
 802993c:	9204      	str	r2, [sp, #16]
 802993e:	f9b4 9002 	ldrsh.w	r9, [r4, #2]
 8029942:	f9b4 7000 	ldrsh.w	r7, [r4]
 8029946:	454b      	cmp	r3, r9
 8029948:	463a      	mov	r2, r7
 802994a:	d008      	beq.n	802995e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x6a>
 802994c:	f9b6 3034 	ldrsh.w	r3, [r6, #52]	; 0x34
 8029950:	eb03 0b09 	add.w	fp, r3, r9
 8029954:	e9dd 1306 	ldrd	r1, r3, [sp, #24]
 8029958:	fb03 1309 	mla	r3, r3, r9, r1
 802995c:	9305      	str	r3, [sp, #20]
 802995e:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8029962:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8029966:	4498      	add	r8, r3
 8029968:	9b04      	ldr	r3, [sp, #16]
 802996a:	3b01      	subs	r3, #1
 802996c:	9304      	str	r3, [sp, #16]
 802996e:	9b04      	ldr	r3, [sp, #16]
 8029970:	3301      	adds	r3, #1
 8029972:	d015      	beq.n	80299a0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xac>
 8029974:	f934 3f08 	ldrsh.w	r3, [r4, #8]!
 8029978:	42bb      	cmp	r3, r7
 802997a:	d117      	bne.n	80299ac <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb8>
 802997c:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 8029980:	9b04      	ldr	r3, [sp, #16]
 8029982:	4548      	cmp	r0, r9
 8029984:	f103 33ff 	add.w	r3, r3, #4294967295
 8029988:	d17d      	bne.n	8029a86 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x192>
 802998a:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 802998e:	4401      	add	r1, r0
 8029990:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8029994:	4480      	add	r8, r0
 8029996:	e7e9      	b.n	802996c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x78>
 8029998:	461f      	mov	r7, r3
 802999a:	e042      	b.n	8029a22 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x12e>
 802999c:	2000      	movs	r0, #0
 802999e:	e002      	b.n	80299a6 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb2>
 80299a0:	2900      	cmp	r1, #0
 80299a2:	d16d      	bne.n	8029a80 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x18c>
 80299a4:	2001      	movs	r0, #1
 80299a6:	b00b      	add	sp, #44	; 0x2c
 80299a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80299ac:	b379      	cbz	r1, 8029a0e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x11a>
 80299ae:	2f00      	cmp	r7, #0
 80299b0:	db29      	blt.n	8029a06 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 80299b2:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	; 0x36
 80299b6:	42bb      	cmp	r3, r7
 80299b8:	dd25      	ble.n	8029a06 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 80299ba:	ebc1 1188 	rsb	r1, r1, r8, lsl #6
 80299be:	f896 0030 	ldrb.w	r0, [r6, #48]	; 0x30
 80299c2:	f7ff ff77 	bl	80298b4 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5>
 80299c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80299c8:	fb10 f003 	smulbb	r0, r0, r3
 80299cc:	b280      	uxth	r0, r0
 80299ce:	1c41      	adds	r1, r0, #1
 80299d0:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 80299d4:	1209      	asrs	r1, r1, #8
 80299d6:	f011 0fff 	tst.w	r1, #255	; 0xff
 80299da:	d014      	beq.n	8029a06 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 80299dc:	b2c9      	uxtb	r1, r1
 80299de:	9808      	ldr	r0, [sp, #32]
 80299e0:	b2ba      	uxth	r2, r7
 80299e2:	8e73      	ldrh	r3, [r6, #50]	; 0x32
 80299e4:	9102      	str	r1, [sp, #8]
 80299e6:	2101      	movs	r1, #1
 80299e8:	4413      	add	r3, r2
 80299ea:	4402      	add	r2, r0
 80299ec:	9101      	str	r1, [sp, #4]
 80299ee:	fa0f f18b 	sxth.w	r1, fp
 80299f2:	f8da 0000 	ldr.w	r0, [sl]
 80299f6:	b21b      	sxth	r3, r3
 80299f8:	9100      	str	r1, [sp, #0]
 80299fa:	b212      	sxth	r2, r2
 80299fc:	6941      	ldr	r1, [r0, #20]
 80299fe:	4650      	mov	r0, sl
 8029a00:	460d      	mov	r5, r1
 8029a02:	9905      	ldr	r1, [sp, #20]
 8029a04:	47a8      	blx	r5
 8029a06:	9b04      	ldr	r3, [sp, #16]
 8029a08:	1c7a      	adds	r2, r7, #1
 8029a0a:	3301      	adds	r3, #1
 8029a0c:	d0ca      	beq.n	80299a4 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 8029a0e:	f9b4 7000 	ldrsh.w	r7, [r4]
 8029a12:	1abb      	subs	r3, r7, r2
 8029a14:	2b00      	cmp	r3, #0
 8029a16:	dd31      	ble.n	8029a7c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8029a18:	2a00      	cmp	r2, #0
 8029a1a:	dabd      	bge.n	8029998 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa4>
 8029a1c:	2f00      	cmp	r7, #0
 8029a1e:	dd2d      	ble.n	8029a7c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8029a20:	2200      	movs	r2, #0
 8029a22:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	; 0x36
 8029a26:	19d1      	adds	r1, r2, r7
 8029a28:	4299      	cmp	r1, r3
 8029a2a:	db02      	blt.n	8029a32 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x13e>
 8029a2c:	1a9f      	subs	r7, r3, r2
 8029a2e:	2f00      	cmp	r7, #0
 8029a30:	dd24      	ble.n	8029a7c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8029a32:	ea4f 1188 	mov.w	r1, r8, lsl #6
 8029a36:	f896 0030 	ldrb.w	r0, [r6, #48]	; 0x30
 8029a3a:	f7ff ff3b 	bl	80298b4 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5>
 8029a3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8029a40:	fb10 f003 	smulbb	r0, r0, r3
 8029a44:	b280      	uxth	r0, r0
 8029a46:	1c41      	adds	r1, r0, #1
 8029a48:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8029a4c:	1209      	asrs	r1, r1, #8
 8029a4e:	f011 0fff 	tst.w	r1, #255	; 0xff
 8029a52:	d013      	beq.n	8029a7c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8029a54:	b292      	uxth	r2, r2
 8029a56:	9808      	ldr	r0, [sp, #32]
 8029a58:	b2c9      	uxtb	r1, r1
 8029a5a:	8e73      	ldrh	r3, [r6, #50]	; 0x32
 8029a5c:	b23f      	sxth	r7, r7
 8029a5e:	4413      	add	r3, r2
 8029a60:	9102      	str	r1, [sp, #8]
 8029a62:	4402      	add	r2, r0
 8029a64:	fa0f f18b 	sxth.w	r1, fp
 8029a68:	f8da 0000 	ldr.w	r0, [sl]
 8029a6c:	b21b      	sxth	r3, r3
 8029a6e:	9100      	str	r1, [sp, #0]
 8029a70:	b212      	sxth	r2, r2
 8029a72:	9701      	str	r7, [sp, #4]
 8029a74:	9905      	ldr	r1, [sp, #20]
 8029a76:	6947      	ldr	r7, [r0, #20]
 8029a78:	4650      	mov	r0, sl
 8029a7a:	47b8      	blx	r7
 8029a7c:	464b      	mov	r3, r9
 8029a7e:	e75e      	b.n	802993e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x4a>
 8029a80:	2f00      	cmp	r7, #0
 8029a82:	da96      	bge.n	80299b2 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xbe>
 8029a84:	e78e      	b.n	80299a4 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 8029a86:	2900      	cmp	r1, #0
 8029a88:	d0f8      	beq.n	8029a7c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8029a8a:	e790      	b.n	80299ae <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xba>

08029a8c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>:
 8029a8c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8029a90:	4b4b      	ldr	r3, [pc, #300]	; (8029bc0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x134>)
 8029a92:	2500      	movs	r5, #0
 8029a94:	f100 0620 	add.w	r6, r0, #32
 8029a98:	4604      	mov	r4, r0
 8029a9a:	f100 0718 	add.w	r7, r0, #24
 8029a9e:	4690      	mov	r8, r2
 8029aa0:	e9c0 3100 	strd	r3, r1, [r0]
 8029aa4:	e9c0 5502 	strd	r5, r5, [r0, #8]
 8029aa8:	e9c0 5504 	strd	r5, r5, [r0, #16]
 8029aac:	e9c0 5506 	strd	r5, r5, [r0, #24]
 8029ab0:	4630      	mov	r0, r6
 8029ab2:	f7ef fd71 	bl	8019598 <_ZN8touchgfx7OutlineC1Ev>
 8029ab6:	2301      	movs	r3, #1
 8029ab8:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 8029abc:	f8a4 5052 	strh.w	r5, [r4, #82]	; 0x52
 8029ac0:	f8a4 5054 	strh.w	r5, [r4, #84]	; 0x54
 8029ac4:	f8a4 5056 	strh.w	r5, [r4, #86]	; 0x56
 8029ac8:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 8029acc:	f884 5059 	strb.w	r5, [r4, #89]	; 0x59
 8029ad0:	f8a4 5064 	strh.w	r5, [r4, #100]	; 0x64
 8029ad4:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8029ad8:	9500      	str	r5, [sp, #0]
 8029ada:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
 8029ade:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
 8029ae2:	f9b8 2000 	ldrsh.w	r2, [r8]
 8029ae6:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 8029aea:	f9bc 9008 	ldrsh.w	r9, [ip, #8]
 8029aee:	4410      	add	r0, r2
 8029af0:	f9bc e00a 	ldrsh.w	lr, [ip, #10]
 8029af4:	b280      	uxth	r0, r0
 8029af6:	fa0f fa80 	sxth.w	sl, r0
 8029afa:	45aa      	cmp	sl, r5
 8029afc:	dd5c      	ble.n	8029bb8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12c>
 8029afe:	4591      	cmp	r9, r2
 8029b00:	dd5a      	ble.n	8029bb8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12c>
 8029b02:	f9b8 1002 	ldrsh.w	r1, [r8, #2]
 8029b06:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8029b0a:	440b      	add	r3, r1
 8029b0c:	b29b      	uxth	r3, r3
 8029b0e:	b21d      	sxth	r5, r3
 8029b10:	2d00      	cmp	r5, #0
 8029b12:	dd51      	ble.n	8029bb8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12c>
 8029b14:	458e      	cmp	lr, r1
 8029b16:	dd4f      	ble.n	8029bb8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12c>
 8029b18:	45d1      	cmp	r9, sl
 8029b1a:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8029b1e:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8029b22:	bfb8      	it	lt
 8029b24:	fa1f f089 	uxthlt.w	r0, r9
 8029b28:	45ae      	cmp	lr, r5
 8029b2a:	f8ad 2000 	strh.w	r2, [sp]
 8029b2e:	bfb8      	it	lt
 8029b30:	fa1f f38e 	uxthlt.w	r3, lr
 8029b34:	1a80      	subs	r0, r0, r2
 8029b36:	f8ad 1002 	strh.w	r1, [sp, #2]
 8029b3a:	1a5b      	subs	r3, r3, r1
 8029b3c:	f8ad 0004 	strh.w	r0, [sp, #4]
 8029b40:	f8ad 3006 	strh.w	r3, [sp, #6]
 8029b44:	466d      	mov	r5, sp
 8029b46:	e895 0003 	ldmia.w	r5, {r0, r1}
 8029b4a:	e887 0003 	stmia.w	r7, {r0, r1}
 8029b4e:	f8dc 3000 	ldr.w	r3, [ip]
 8029b52:	4660      	mov	r0, ip
 8029b54:	4639      	mov	r1, r7
 8029b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8029b58:	4798      	blx	r3
 8029b5a:	6861      	ldr	r1, [r4, #4]
 8029b5c:	4628      	mov	r0, r5
 8029b5e:	3104      	adds	r1, #4
 8029b60:	f7f1 fa68 	bl	801b034 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8029b64:	4638      	mov	r0, r7
 8029b66:	f7f1 fa21 	bl	801afac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8029b6a:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8029b6e:	f8bd 2000 	ldrh.w	r2, [sp]
 8029b72:	4630      	mov	r0, r6
 8029b74:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 8029b78:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 8029b7c:	f7ef fcf0 	bl	8019560 <_ZN8touchgfx7Outline5resetEv>
 8029b80:	f9bd 3000 	ldrsh.w	r3, [sp]
 8029b84:	f9b4 201e 	ldrsh.w	r2, [r4, #30]
 8029b88:	4620      	mov	r0, r4
 8029b8a:	015b      	lsls	r3, r3, #5
 8029b8c:	60a3      	str	r3, [r4, #8]
 8029b8e:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8029b92:	015b      	lsls	r3, r3, #5
 8029b94:	60e3      	str	r3, [r4, #12]
 8029b96:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8029b9a:	015b      	lsls	r3, r3, #5
 8029b9c:	6123      	str	r3, [r4, #16]
 8029b9e:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8029ba2:	015b      	lsls	r3, r3, #5
 8029ba4:	6163      	str	r3, [r4, #20]
 8029ba6:	f9b4 301c 	ldrsh.w	r3, [r4, #28]
 8029baa:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 8029bae:	e9c4 3212 	strd	r3, r2, [r4, #72]	; 0x48
 8029bb2:	b002      	add	sp, #8
 8029bb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8029bb8:	2300      	movs	r3, #0
 8029bba:	9301      	str	r3, [sp, #4]
 8029bbc:	e7c2      	b.n	8029b44 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0xb8>
 8029bbe:	bf00      	nop
 8029bc0:	0802fb68 	.word	0x0802fb68

08029bc4 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 8029bc4:	4b07      	ldr	r3, [pc, #28]	; (8029be4 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x20>)
 8029bc6:	b510      	push	{r4, lr}
 8029bc8:	781b      	ldrb	r3, [r3, #0]
 8029bca:	2b01      	cmp	r3, #1
 8029bcc:	d108      	bne.n	8029be0 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>
 8029bce:	6843      	ldr	r3, [r0, #4]
 8029bd0:	6814      	ldr	r4, [r2, #0]
 8029bd2:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8029bd6:	680b      	ldr	r3, [r1, #0]
 8029bd8:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 8029bdc:	6013      	str	r3, [r2, #0]
 8029bde:	600c      	str	r4, [r1, #0]
 8029be0:	bd10      	pop	{r4, pc}
 8029be2:	bf00      	nop
 8029be4:	200177bc 	.word	0x200177bc

08029be8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 8029be8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8029bea:	ab02      	add	r3, sp, #8
 8029bec:	4604      	mov	r4, r0
 8029bee:	9101      	str	r1, [sp, #4]
 8029bf0:	a901      	add	r1, sp, #4
 8029bf2:	f843 2d08 	str.w	r2, [r3, #-8]!
 8029bf6:	461a      	mov	r2, r3
 8029bf8:	f7ff ffe4 	bl	8029bc4 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 8029bfc:	68a3      	ldr	r3, [r4, #8]
 8029bfe:	9901      	ldr	r1, [sp, #4]
 8029c00:	9a00      	ldr	r2, [sp, #0]
 8029c02:	1ac9      	subs	r1, r1, r3
 8029c04:	68e3      	ldr	r3, [r4, #12]
 8029c06:	1ad2      	subs	r2, r2, r3
 8029c08:	9101      	str	r1, [sp, #4]
 8029c0a:	2a00      	cmp	r2, #0
 8029c0c:	9200      	str	r2, [sp, #0]
 8029c0e:	db1c      	blt.n	8029c4a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x62>
 8029c10:	6963      	ldr	r3, [r4, #20]
 8029c12:	429a      	cmp	r2, r3
 8029c14:	bfac      	ite	ge
 8029c16:	2002      	movge	r0, #2
 8029c18:	2000      	movlt	r0, #0
 8029c1a:	2900      	cmp	r1, #0
 8029c1c:	db17      	blt.n	8029c4e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x66>
 8029c1e:	6923      	ldr	r3, [r4, #16]
 8029c20:	4299      	cmp	r1, r3
 8029c22:	bfac      	ite	ge
 8029c24:	2308      	movge	r3, #8
 8029c26:	2300      	movlt	r3, #0
 8029c28:	4303      	orrs	r3, r0
 8029c2a:	f894 0064 	ldrb.w	r0, [r4, #100]	; 0x64
 8029c2e:	b2dd      	uxtb	r5, r3
 8029c30:	b978      	cbnz	r0, 8029c52 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6a>
 8029c32:	f104 0020 	add.w	r0, r4, #32
 8029c36:	f7ff fe51 	bl	80298dc <_ZN8touchgfx10Rasterizer6lineToEii>
 8029c3a:	9b01      	ldr	r3, [sp, #4]
 8029c3c:	f884 5064 	strb.w	r5, [r4, #100]	; 0x64
 8029c40:	65e3      	str	r3, [r4, #92]	; 0x5c
 8029c42:	9b00      	ldr	r3, [sp, #0]
 8029c44:	6623      	str	r3, [r4, #96]	; 0x60
 8029c46:	b002      	add	sp, #8
 8029c48:	bd70      	pop	{r4, r5, r6, pc}
 8029c4a:	2001      	movs	r0, #1
 8029c4c:	e7e5      	b.n	8029c1a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x32>
 8029c4e:	2304      	movs	r3, #4
 8029c50:	e7ea      	b.n	8029c28 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x40>
 8029c52:	b113      	cbz	r3, 8029c5a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x72>
 8029c54:	ea10 0305 	ands.w	r3, r0, r5
 8029c58:	d11d      	bne.n	8029c96 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xae>
 8029c5a:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 8029c5e:	f104 0620 	add.w	r6, r4, #32
 8029c62:	e9d4 1217 	ldrd	r1, r2, [r4, #92]	; 0x5c
 8029c66:	b193      	cbz	r3, 8029c8e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa6>
 8029c68:	f884 0065 	strb.w	r0, [r4, #101]	; 0x65
 8029c6c:	e9d4 3009 	ldrd	r3, r0, [r4, #36]	; 0x24
 8029c70:	4298      	cmp	r0, r3
 8029c72:	d802      	bhi.n	8029c7a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x92>
 8029c74:	4630      	mov	r0, r6
 8029c76:	f7f0 f963 	bl	8019f40 <_ZN8touchgfx7Outline6moveToEii>
 8029c7a:	2300      	movs	r3, #0
 8029c7c:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 8029c80:	2301      	movs	r3, #1
 8029c82:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8029c86:	4630      	mov	r0, r6
 8029c88:	e9dd 2100 	ldrd	r2, r1, [sp]
 8029c8c:	e7d3      	b.n	8029c36 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4e>
 8029c8e:	4630      	mov	r0, r6
 8029c90:	f7ff fe24 	bl	80298dc <_ZN8touchgfx10Rasterizer6lineToEii>
 8029c94:	e7f7      	b.n	8029c86 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9e>
 8029c96:	461d      	mov	r5, r3
 8029c98:	e7cf      	b.n	8029c3a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x52>

08029c9a <_ZN8touchgfx6Canvas5closeEv>:
 8029c9a:	b538      	push	{r3, r4, r5, lr}
 8029c9c:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 8029ca0:	4604      	mov	r4, r0
 8029ca2:	b993      	cbnz	r3, 8029cca <_ZN8touchgfx6Canvas5closeEv+0x30>
 8029ca4:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
 8029ca8:	f890 2065 	ldrb.w	r2, [r0, #101]	; 0x65
 8029cac:	4213      	tst	r3, r2
 8029cae:	d10c      	bne.n	8029cca <_ZN8touchgfx6Canvas5closeEv+0x30>
 8029cb0:	f100 0520 	add.w	r5, r0, #32
 8029cb4:	b123      	cbz	r3, 8029cc0 <_ZN8touchgfx6Canvas5closeEv+0x26>
 8029cb6:	e9d0 1217 	ldrd	r1, r2, [r0, #92]	; 0x5c
 8029cba:	4628      	mov	r0, r5
 8029cbc:	f7ff fe0e 	bl	80298dc <_ZN8touchgfx10Rasterizer6lineToEii>
 8029cc0:	4628      	mov	r0, r5
 8029cc2:	e9d4 121a 	ldrd	r1, r2, [r4, #104]	; 0x68
 8029cc6:	f7ff fe09 	bl	80298dc <_ZN8touchgfx10Rasterizer6lineToEii>
 8029cca:	2300      	movs	r3, #0
 8029ccc:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 8029cd0:	e9d4 0309 	ldrd	r0, r3, [r4, #36]	; 0x24
 8029cd4:	4298      	cmp	r0, r3
 8029cd6:	bf34      	ite	cc
 8029cd8:	2000      	movcc	r0, #0
 8029cda:	2001      	movcs	r0, #1
 8029cdc:	bd38      	pop	{r3, r4, r5, pc}
	...

08029ce0 <_ZN8touchgfx6Canvas6renderEh>:
 8029ce0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8029ce4:	4604      	mov	r4, r0
 8029ce6:	6840      	ldr	r0, [r0, #4]
 8029ce8:	460d      	mov	r5, r1
 8029cea:	6803      	ldr	r3, [r0, #0]
 8029cec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8029cee:	4798      	blx	r3
 8029cf0:	fb10 f105 	smulbb	r1, r0, r5
 8029cf4:	b289      	uxth	r1, r1
 8029cf6:	1c4d      	adds	r5, r1, #1
 8029cf8:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 8029cfc:	122d      	asrs	r5, r5, #8
 8029cfe:	f000 8097 	beq.w	8029e30 <_ZN8touchgfx6Canvas6renderEh+0x150>
 8029d02:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
 8029d06:	2b00      	cmp	r3, #0
 8029d08:	f000 8092 	beq.w	8029e30 <_ZN8touchgfx6Canvas6renderEh+0x150>
 8029d0c:	4620      	mov	r0, r4
 8029d0e:	f7ff ffc4 	bl	8029c9a <_ZN8touchgfx6Canvas5closeEv>
 8029d12:	4607      	mov	r7, r0
 8029d14:	2800      	cmp	r0, #0
 8029d16:	d043      	beq.n	8029da0 <_ZN8touchgfx6Canvas6renderEh+0xc0>
 8029d18:	6863      	ldr	r3, [r4, #4]
 8029d1a:	4e46      	ldr	r6, [pc, #280]	; (8029e34 <_ZN8touchgfx6Canvas6renderEh+0x154>)
 8029d1c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8029d1e:	6837      	ldr	r7, [r6, #0]
 8029d20:	6803      	ldr	r3, [r0, #0]
 8029d22:	689b      	ldr	r3, [r3, #8]
 8029d24:	4798      	blx	r3
 8029d26:	4601      	mov	r1, r0
 8029d28:	4638      	mov	r0, r7
 8029d2a:	f7ee fb4b 	bl	80183c4 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>
 8029d2e:	4607      	mov	r7, r0
 8029d30:	f7ed ff0c 	bl	8017b4c <_ZN8touchgfx3HAL3lcdEv>
 8029d34:	6803      	ldr	r3, [r0, #0]
 8029d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8029d38:	4798      	blx	r3
 8029d3a:	4680      	mov	r8, r0
 8029d3c:	f7ed ff06 	bl	8017b4c <_ZN8touchgfx3HAL3lcdEv>
 8029d40:	6803      	ldr	r3, [r0, #0]
 8029d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8029d44:	4798      	blx	r3
 8029d46:	280b      	cmp	r0, #11
 8029d48:	d857      	bhi.n	8029dfa <_ZN8touchgfx6Canvas6renderEh+0x11a>
 8029d4a:	e8df f000 	tbb	[pc, r0]
 8029d4e:	584d      	.short	0x584d
 8029d50:	2d560668 	.word	0x2d560668
 8029d54:	6161613d 	.word	0x6161613d
 8029d58:	6161      	.short	0x6161
 8029d5a:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
 8029d5e:	2208      	movs	r2, #8
 8029d60:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 8029d64:	fb91 f2f2 	sdiv	r2, r1, r2
 8029d68:	fb08 2303 	mla	r3, r8, r3, r2
 8029d6c:	441f      	add	r7, r3
 8029d6e:	424b      	negs	r3, r1
 8029d70:	f001 0107 	and.w	r1, r1, #7
 8029d74:	f003 0307 	and.w	r3, r3, #7
 8029d78:	bf58      	it	pl
 8029d7a:	4259      	negpl	r1, r3
 8029d7c:	b2c9      	uxtb	r1, r1
 8029d7e:	6860      	ldr	r0, [r4, #4]
 8029d80:	b2ed      	uxtb	r5, r5
 8029d82:	fa0f f388 	sxth.w	r3, r8
 8029d86:	463a      	mov	r2, r7
 8029d88:	e9cd 1500 	strd	r1, r5, [sp]
 8029d8c:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8029d8e:	f104 0020 	add.w	r0, r4, #32
 8029d92:	f7ff fdaf 	bl	80298f4 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>
 8029d96:	4607      	mov	r7, r0
 8029d98:	6830      	ldr	r0, [r6, #0]
 8029d9a:	6803      	ldr	r3, [r0, #0]
 8029d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8029d9e:	4798      	blx	r3
 8029da0:	4638      	mov	r0, r7
 8029da2:	b002      	add	sp, #8
 8029da4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8029da8:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
 8029dac:	2204      	movs	r2, #4
 8029dae:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 8029db2:	fb91 f2f2 	sdiv	r2, r1, r2
 8029db6:	fb08 2303 	mla	r3, r8, r3, r2
 8029dba:	441f      	add	r7, r3
 8029dbc:	424b      	negs	r3, r1
 8029dbe:	f001 0103 	and.w	r1, r1, #3
 8029dc2:	f003 0303 	and.w	r3, r3, #3
 8029dc6:	e7d7      	b.n	8029d78 <_ZN8touchgfx6Canvas6renderEh+0x98>
 8029dc8:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
 8029dcc:	2202      	movs	r2, #2
 8029dce:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 8029dd2:	2900      	cmp	r1, #0
 8029dd4:	fb91 f2f2 	sdiv	r2, r1, r2
 8029dd8:	f001 0101 	and.w	r1, r1, #1
 8029ddc:	fb08 2303 	mla	r3, r8, r3, r2
 8029de0:	bfb8      	it	lt
 8029de2:	4249      	neglt	r1, r1
 8029de4:	441f      	add	r7, r3
 8029de6:	e7c9      	b.n	8029d7c <_ZN8touchgfx6Canvas6renderEh+0x9c>
 8029de8:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 8029dec:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 8029df0:	fb08 f303 	mul.w	r3, r8, r3
 8029df4:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8029df8:	441f      	add	r7, r3
 8029dfa:	2100      	movs	r1, #0
 8029dfc:	e7bf      	b.n	8029d7e <_ZN8touchgfx6Canvas6renderEh+0x9e>
 8029dfe:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 8029e02:	2103      	movs	r1, #3
 8029e04:	fb08 f203 	mul.w	r2, r8, r3
 8029e08:	8b23      	ldrh	r3, [r4, #24]
 8029e0a:	fb13 2301 	smlabb	r3, r3, r1, r2
 8029e0e:	e7f3      	b.n	8029df8 <_ZN8touchgfx6Canvas6renderEh+0x118>
 8029e10:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 8029e14:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 8029e18:	fb08 2303 	mla	r3, r8, r3, r2
 8029e1c:	e7ec      	b.n	8029df8 <_ZN8touchgfx6Canvas6renderEh+0x118>
 8029e1e:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 8029e22:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 8029e26:	fb08 f303 	mul.w	r3, r8, r3
 8029e2a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8029e2e:	e7e3      	b.n	8029df8 <_ZN8touchgfx6Canvas6renderEh+0x118>
 8029e30:	2701      	movs	r7, #1
 8029e32:	e7b5      	b.n	8029da0 <_ZN8touchgfx6Canvas6renderEh+0xc0>
 8029e34:	200177c4 	.word	0x200177c4

08029e38 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 8029e38:	b513      	push	{r0, r1, r4, lr}
 8029e3a:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 8029e3e:	4604      	mov	r4, r0
 8029e40:	e9cd 2100 	strd	r2, r1, [sp]
 8029e44:	b1a3      	cbz	r3, 8029e70 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x38>
 8029e46:	466a      	mov	r2, sp
 8029e48:	a901      	add	r1, sp, #4
 8029e4a:	4620      	mov	r0, r4
 8029e4c:	f7ff feba 	bl	8029bc4 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 8029e50:	68a3      	ldr	r3, [r4, #8]
 8029e52:	9901      	ldr	r1, [sp, #4]
 8029e54:	9a00      	ldr	r2, [sp, #0]
 8029e56:	1ac9      	subs	r1, r1, r3
 8029e58:	68e3      	ldr	r3, [r4, #12]
 8029e5a:	1ad2      	subs	r2, r2, r3
 8029e5c:	9101      	str	r1, [sp, #4]
 8029e5e:	2a00      	cmp	r2, #0
 8029e60:	9200      	str	r2, [sp, #0]
 8029e62:	da0b      	bge.n	8029e7c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x44>
 8029e64:	2301      	movs	r3, #1
 8029e66:	2900      	cmp	r1, #0
 8029e68:	da0e      	bge.n	8029e88 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x50>
 8029e6a:	f043 0304 	orr.w	r3, r3, #4
 8029e6e:	e013      	b.n	8029e98 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x60>
 8029e70:	f7ff ff13 	bl	8029c9a <_ZN8touchgfx6Canvas5closeEv>
 8029e74:	2800      	cmp	r0, #0
 8029e76:	d1e6      	bne.n	8029e46 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0xe>
 8029e78:	b002      	add	sp, #8
 8029e7a:	bd10      	pop	{r4, pc}
 8029e7c:	6963      	ldr	r3, [r4, #20]
 8029e7e:	429a      	cmp	r2, r3
 8029e80:	bfac      	ite	ge
 8029e82:	2302      	movge	r3, #2
 8029e84:	2300      	movlt	r3, #0
 8029e86:	e7ee      	b.n	8029e66 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x2e>
 8029e88:	6920      	ldr	r0, [r4, #16]
 8029e8a:	4281      	cmp	r1, r0
 8029e8c:	bfac      	ite	ge
 8029e8e:	2008      	movge	r0, #8
 8029e90:	2000      	movlt	r0, #0
 8029e92:	4318      	orrs	r0, r3
 8029e94:	b2c3      	uxtb	r3, r0
 8029e96:	b158      	cbz	r0, 8029eb0 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x78>
 8029e98:	2201      	movs	r2, #1
 8029e9a:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
 8029e9e:	9901      	ldr	r1, [sp, #4]
 8029ea0:	9a00      	ldr	r2, [sp, #0]
 8029ea2:	66a1      	str	r1, [r4, #104]	; 0x68
 8029ea4:	66e2      	str	r2, [r4, #108]	; 0x6c
 8029ea6:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 8029eaa:	e9c4 1217 	strd	r1, r2, [r4, #92]	; 0x5c
 8029eae:	e7e3      	b.n	8029e78 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x40>
 8029eb0:	f884 0065 	strb.w	r0, [r4, #101]	; 0x65
 8029eb4:	e9d4 3009 	ldrd	r3, r0, [r4, #36]	; 0x24
 8029eb8:	4298      	cmp	r0, r3
 8029eba:	d803      	bhi.n	8029ec4 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x8c>
 8029ebc:	f104 0020 	add.w	r0, r4, #32
 8029ec0:	f7f0 f83e 	bl	8019f40 <_ZN8touchgfx7Outline6moveToEii>
 8029ec4:	2300      	movs	r3, #0
 8029ec6:	2201      	movs	r2, #1
 8029ec8:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 8029ecc:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 8029ed0:	e7e5      	b.n	8029e9e <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>

08029ed2 <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
 8029ed2:	b510      	push	{r4, lr}
 8029ed4:	2200      	movs	r2, #0
 8029ed6:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 8029eda:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 8029ede:	8002      	strh	r2, [r0, #0]
 8029ee0:	8042      	strh	r2, [r0, #2]
 8029ee2:	8084      	strh	r4, [r0, #4]
 8029ee4:	80c1      	strh	r1, [r0, #6]
 8029ee6:	bd10      	pop	{r4, pc}

08029ee8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 8029ee8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8029eea:	6803      	ldr	r3, [r0, #0]
 8029eec:	460d      	mov	r5, r1
 8029eee:	4604      	mov	r4, r0
 8029ef0:	4601      	mov	r1, r0
 8029ef2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029ef4:	a802      	add	r0, sp, #8
 8029ef6:	4798      	blx	r3
 8029ef8:	6828      	ldr	r0, [r5, #0]
 8029efa:	6869      	ldr	r1, [r5, #4]
 8029efc:	466b      	mov	r3, sp
 8029efe:	c303      	stmia	r3!, {r0, r1}
 8029f00:	4668      	mov	r0, sp
 8029f02:	4619      	mov	r1, r3
 8029f04:	f7ed fb46 	bl	8017594 <_ZN8touchgfx4RectaNERKS0_>
 8029f08:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8029f0a:	b1a8      	cbz	r0, 8029f38 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
 8029f0c:	6803      	ldr	r3, [r0, #0]
 8029f0e:	1d21      	adds	r1, r4, #4
 8029f10:	68db      	ldr	r3, [r3, #12]
 8029f12:	4798      	blx	r3
 8029f14:	b180      	cbz	r0, 8029f38 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
 8029f16:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8029f1a:	2b00      	cmp	r3, #0
 8029f1c:	dd0c      	ble.n	8029f38 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
 8029f1e:	f9bd 5006 	ldrsh.w	r5, [sp, #6]
 8029f22:	2d00      	cmp	r5, #0
 8029f24:	dd08      	ble.n	8029f38 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
 8029f26:	4a2d      	ldr	r2, [pc, #180]	; (8029fdc <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xf4>)
 8029f28:	7812      	ldrb	r2, [r2, #0]
 8029f2a:	b13a      	cbz	r2, 8029f3c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x54>
 8029f2c:	2a01      	cmp	r2, #1
 8029f2e:	d02d      	beq.n	8029f8c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa4>
 8029f30:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8029f32:	6803      	ldr	r3, [r0, #0]
 8029f34:	691b      	ldr	r3, [r3, #16]
 8029f36:	4798      	blx	r3
 8029f38:	b004      	add	sp, #16
 8029f3a:	bd70      	pop	{r4, r5, r6, pc}
 8029f3c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8029f40:	441d      	add	r5, r3
 8029f42:	b2ad      	uxth	r5, r5
 8029f44:	b22e      	sxth	r6, r5
 8029f46:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8029f4a:	42b3      	cmp	r3, r6
 8029f4c:	daf0      	bge.n	8029f30 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8029f4e:	6823      	ldr	r3, [r4, #0]
 8029f50:	4669      	mov	r1, sp
 8029f52:	4620      	mov	r0, r4
 8029f54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8029f56:	4798      	blx	r3
 8029f58:	b940      	cbnz	r0, 8029f6c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x84>
 8029f5a:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8029f5e:	2b01      	cmp	r3, #1
 8029f60:	d004      	beq.n	8029f6c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x84>
 8029f62:	3301      	adds	r3, #1
 8029f64:	105b      	asrs	r3, r3, #1
 8029f66:	f8ad 3006 	strh.w	r3, [sp, #6]
 8029f6a:	e7f0      	b.n	8029f4e <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x66>
 8029f6c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8029f70:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8029f74:	4413      	add	r3, r2
 8029f76:	b29b      	uxth	r3, r3
 8029f78:	441a      	add	r2, r3
 8029f7a:	f8ad 3002 	strh.w	r3, [sp, #2]
 8029f7e:	b212      	sxth	r2, r2
 8029f80:	4296      	cmp	r6, r2
 8029f82:	dae0      	bge.n	8029f46 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 8029f84:	1aeb      	subs	r3, r5, r3
 8029f86:	f8ad 3006 	strh.w	r3, [sp, #6]
 8029f8a:	e7dc      	b.n	8029f46 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 8029f8c:	f8bd 5000 	ldrh.w	r5, [sp]
 8029f90:	441d      	add	r5, r3
 8029f92:	b2ad      	uxth	r5, r5
 8029f94:	b22e      	sxth	r6, r5
 8029f96:	f9bd 3000 	ldrsh.w	r3, [sp]
 8029f9a:	42b3      	cmp	r3, r6
 8029f9c:	dac8      	bge.n	8029f30 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8029f9e:	6823      	ldr	r3, [r4, #0]
 8029fa0:	4669      	mov	r1, sp
 8029fa2:	4620      	mov	r0, r4
 8029fa4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8029fa6:	4798      	blx	r3
 8029fa8:	b940      	cbnz	r0, 8029fbc <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd4>
 8029faa:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8029fae:	2b01      	cmp	r3, #1
 8029fb0:	d004      	beq.n	8029fbc <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd4>
 8029fb2:	3301      	adds	r3, #1
 8029fb4:	105b      	asrs	r3, r3, #1
 8029fb6:	f8ad 3004 	strh.w	r3, [sp, #4]
 8029fba:	e7f0      	b.n	8029f9e <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xb6>
 8029fbc:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8029fc0:	f8bd 3000 	ldrh.w	r3, [sp]
 8029fc4:	4413      	add	r3, r2
 8029fc6:	b29b      	uxth	r3, r3
 8029fc8:	441a      	add	r2, r3
 8029fca:	f8ad 3000 	strh.w	r3, [sp]
 8029fce:	b212      	sxth	r2, r2
 8029fd0:	4296      	cmp	r6, r2
 8029fd2:	dae0      	bge.n	8029f96 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xae>
 8029fd4:	1aeb      	subs	r3, r5, r3
 8029fd6:	f8ad 3004 	strh.w	r3, [sp, #4]
 8029fda:	e7dc      	b.n	8029f96 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xae>
 8029fdc:	200177bc 	.word	0x200177bc

08029fe0 <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 8029fe0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8029fe2:	6803      	ldr	r3, [r0, #0]
 8029fe4:	4604      	mov	r4, r0
 8029fe6:	4601      	mov	r1, r0
 8029fe8:	4668      	mov	r0, sp
 8029fea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029fec:	4798      	blx	r3
 8029fee:	2100      	movs	r1, #0
 8029ff0:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8029ff4:	4668      	mov	r0, sp
 8029ff6:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8029ffa:	9102      	str	r1, [sp, #8]
 8029ffc:	a902      	add	r1, sp, #8
 8029ffe:	f8ad 200c 	strh.w	r2, [sp, #12]
 802a002:	f8ad 300e 	strh.w	r3, [sp, #14]
 802a006:	f7ed fac5 	bl	8017594 <_ZN8touchgfx4RectaNERKS0_>
 802a00a:	6823      	ldr	r3, [r4, #0]
 802a00c:	4669      	mov	r1, sp
 802a00e:	4620      	mov	r0, r4
 802a010:	691b      	ldr	r3, [r3, #16]
 802a012:	4798      	blx	r3
 802a014:	b004      	add	sp, #16
 802a016:	bd10      	pop	{r4, pc}

0802a018 <_ZN8touchgfx12CanvasWidgetC1Ev>:
 802a018:	2101      	movs	r1, #1
 802a01a:	2200      	movs	r2, #0
 802a01c:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 802a020:	490a      	ldr	r1, [pc, #40]	; (802a04c <_ZN8touchgfx12CanvasWidgetC1Ev+0x34>)
 802a022:	8082      	strh	r2, [r0, #4]
 802a024:	6001      	str	r1, [r0, #0]
 802a026:	21ff      	movs	r1, #255	; 0xff
 802a028:	80c2      	strh	r2, [r0, #6]
 802a02a:	8102      	strh	r2, [r0, #8]
 802a02c:	8142      	strh	r2, [r0, #10]
 802a02e:	8182      	strh	r2, [r0, #12]
 802a030:	81c2      	strh	r2, [r0, #14]
 802a032:	8202      	strh	r2, [r0, #16]
 802a034:	8242      	strh	r2, [r0, #18]
 802a036:	61c2      	str	r2, [r0, #28]
 802a038:	8402      	strh	r2, [r0, #32]
 802a03a:	8442      	strh	r2, [r0, #34]	; 0x22
 802a03c:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 802a040:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
 802a044:	6282      	str	r2, [r0, #40]	; 0x28
 802a046:	e9c0 2205 	strd	r2, r2, [r0, #20]
 802a04a:	4770      	bx	lr
 802a04c:	0803026c 	.word	0x0803026c

0802a050 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 802a050:	790b      	ldrb	r3, [r1, #4]
 802a052:	2b00      	cmp	r3, #0
 802a054:	bf0c      	ite	eq
 802a056:	2301      	moveq	r3, #1
 802a058:	2300      	movne	r3, #0
 802a05a:	b570      	push	{r4, r5, r6, lr}
 802a05c:	4604      	mov	r4, r0
 802a05e:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 802a062:	460e      	mov	r6, r1
 802a064:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 802a068:	d109      	bne.n	802a07e <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 802a06a:	b14d      	cbz	r5, 802a080 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 802a06c:	7933      	ldrb	r3, [r6, #4]
 802a06e:	2b01      	cmp	r3, #1
 802a070:	d10c      	bne.n	802a08c <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 802a072:	6823      	ldr	r3, [r4, #0]
 802a074:	4620      	mov	r0, r4
 802a076:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802a078:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802a07c:	4718      	bx	r3
 802a07e:	b12d      	cbz	r5, 802a08c <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 802a080:	6823      	ldr	r3, [r4, #0]
 802a082:	4620      	mov	r0, r4
 802a084:	695b      	ldr	r3, [r3, #20]
 802a086:	4798      	blx	r3
 802a088:	2d00      	cmp	r5, #0
 802a08a:	d1ef      	bne.n	802a06c <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 802a08c:	bd70      	pop	{r4, r5, r6, pc}

0802a08e <__aeabi_atexit>:
 802a08e:	460b      	mov	r3, r1
 802a090:	4601      	mov	r1, r0
 802a092:	4618      	mov	r0, r3
 802a094:	f000 b852 	b.w	802a13c <__cxa_atexit>

0802a098 <_ZdlPvj>:
 802a098:	f000 b812 	b.w	802a0c0 <_ZdlPv>

0802a09c <__cxa_guard_acquire>:
 802a09c:	6803      	ldr	r3, [r0, #0]
 802a09e:	07db      	lsls	r3, r3, #31
 802a0a0:	d406      	bmi.n	802a0b0 <__cxa_guard_acquire+0x14>
 802a0a2:	7843      	ldrb	r3, [r0, #1]
 802a0a4:	b103      	cbz	r3, 802a0a8 <__cxa_guard_acquire+0xc>
 802a0a6:	deff      	udf	#255	; 0xff
 802a0a8:	2301      	movs	r3, #1
 802a0aa:	7043      	strb	r3, [r0, #1]
 802a0ac:	4618      	mov	r0, r3
 802a0ae:	4770      	bx	lr
 802a0b0:	2000      	movs	r0, #0
 802a0b2:	4770      	bx	lr

0802a0b4 <__cxa_guard_release>:
 802a0b4:	2301      	movs	r3, #1
 802a0b6:	6003      	str	r3, [r0, #0]
 802a0b8:	4770      	bx	lr

0802a0ba <__cxa_pure_virtual>:
 802a0ba:	b508      	push	{r3, lr}
 802a0bc:	f000 f80e 	bl	802a0dc <_ZSt9terminatev>

0802a0c0 <_ZdlPv>:
 802a0c0:	f000 b892 	b.w	802a1e8 <free>

0802a0c4 <_ZN10__cxxabiv111__terminateEPFvvE>:
 802a0c4:	b508      	push	{r3, lr}
 802a0c6:	4780      	blx	r0
 802a0c8:	f000 f80d 	bl	802a0e6 <abort>

0802a0cc <_ZSt13get_terminatev>:
 802a0cc:	4b02      	ldr	r3, [pc, #8]	; (802a0d8 <_ZSt13get_terminatev+0xc>)
 802a0ce:	6818      	ldr	r0, [r3, #0]
 802a0d0:	f3bf 8f5b 	dmb	ish
 802a0d4:	4770      	bx	lr
 802a0d6:	bf00      	nop
 802a0d8:	200000b8 	.word	0x200000b8

0802a0dc <_ZSt9terminatev>:
 802a0dc:	b508      	push	{r3, lr}
 802a0de:	f7ff fff5 	bl	802a0cc <_ZSt13get_terminatev>
 802a0e2:	f7ff ffef 	bl	802a0c4 <_ZN10__cxxabiv111__terminateEPFvvE>

0802a0e6 <abort>:
 802a0e6:	b508      	push	{r3, lr}
 802a0e8:	2006      	movs	r0, #6
 802a0ea:	f000 fca1 	bl	802aa30 <raise>
 802a0ee:	2001      	movs	r0, #1
 802a0f0:	f7d7 fbfc 	bl	80018ec <_exit>

0802a0f4 <__assert_func>:
 802a0f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802a0f6:	4614      	mov	r4, r2
 802a0f8:	461a      	mov	r2, r3
 802a0fa:	4b09      	ldr	r3, [pc, #36]	; (802a120 <__assert_func+0x2c>)
 802a0fc:	681b      	ldr	r3, [r3, #0]
 802a0fe:	4605      	mov	r5, r0
 802a100:	68d8      	ldr	r0, [r3, #12]
 802a102:	b14c      	cbz	r4, 802a118 <__assert_func+0x24>
 802a104:	4b07      	ldr	r3, [pc, #28]	; (802a124 <__assert_func+0x30>)
 802a106:	9100      	str	r1, [sp, #0]
 802a108:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802a10c:	4906      	ldr	r1, [pc, #24]	; (802a128 <__assert_func+0x34>)
 802a10e:	462b      	mov	r3, r5
 802a110:	f000 f828 	bl	802a164 <fiprintf>
 802a114:	f7ff ffe7 	bl	802a0e6 <abort>
 802a118:	4b04      	ldr	r3, [pc, #16]	; (802a12c <__assert_func+0x38>)
 802a11a:	461c      	mov	r4, r3
 802a11c:	e7f3      	b.n	802a106 <__assert_func+0x12>
 802a11e:	bf00      	nop
 802a120:	200000bc 	.word	0x200000bc
 802a124:	080302dc 	.word	0x080302dc
 802a128:	080302e9 	.word	0x080302e9
 802a12c:	08030317 	.word	0x08030317

0802a130 <atexit>:
 802a130:	2300      	movs	r3, #0
 802a132:	4601      	mov	r1, r0
 802a134:	461a      	mov	r2, r3
 802a136:	4618      	mov	r0, r3
 802a138:	f000 bd8a 	b.w	802ac50 <__register_exitproc>

0802a13c <__cxa_atexit>:
 802a13c:	b510      	push	{r4, lr}
 802a13e:	4c05      	ldr	r4, [pc, #20]	; (802a154 <__cxa_atexit+0x18>)
 802a140:	4613      	mov	r3, r2
 802a142:	b12c      	cbz	r4, 802a150 <__cxa_atexit+0x14>
 802a144:	460a      	mov	r2, r1
 802a146:	4601      	mov	r1, r0
 802a148:	2002      	movs	r0, #2
 802a14a:	f000 fd81 	bl	802ac50 <__register_exitproc>
 802a14e:	bd10      	pop	{r4, pc}
 802a150:	4620      	mov	r0, r4
 802a152:	e7fc      	b.n	802a14e <__cxa_atexit+0x12>
 802a154:	0802ac51 	.word	0x0802ac51

0802a158 <__errno>:
 802a158:	4b01      	ldr	r3, [pc, #4]	; (802a160 <__errno+0x8>)
 802a15a:	6818      	ldr	r0, [r3, #0]
 802a15c:	4770      	bx	lr
 802a15e:	bf00      	nop
 802a160:	200000bc 	.word	0x200000bc

0802a164 <fiprintf>:
 802a164:	b40e      	push	{r1, r2, r3}
 802a166:	b503      	push	{r0, r1, lr}
 802a168:	4601      	mov	r1, r0
 802a16a:	ab03      	add	r3, sp, #12
 802a16c:	4805      	ldr	r0, [pc, #20]	; (802a184 <fiprintf+0x20>)
 802a16e:	f853 2b04 	ldr.w	r2, [r3], #4
 802a172:	6800      	ldr	r0, [r0, #0]
 802a174:	9301      	str	r3, [sp, #4]
 802a176:	f000 f95f 	bl	802a438 <_vfiprintf_r>
 802a17a:	b002      	add	sp, #8
 802a17c:	f85d eb04 	ldr.w	lr, [sp], #4
 802a180:	b003      	add	sp, #12
 802a182:	4770      	bx	lr
 802a184:	200000bc 	.word	0x200000bc

0802a188 <__libc_init_array>:
 802a188:	b570      	push	{r4, r5, r6, lr}
 802a18a:	4d0d      	ldr	r5, [pc, #52]	; (802a1c0 <__libc_init_array+0x38>)
 802a18c:	4c0d      	ldr	r4, [pc, #52]	; (802a1c4 <__libc_init_array+0x3c>)
 802a18e:	1b64      	subs	r4, r4, r5
 802a190:	10a4      	asrs	r4, r4, #2
 802a192:	2600      	movs	r6, #0
 802a194:	42a6      	cmp	r6, r4
 802a196:	d109      	bne.n	802a1ac <__libc_init_array+0x24>
 802a198:	4d0b      	ldr	r5, [pc, #44]	; (802a1c8 <__libc_init_array+0x40>)
 802a19a:	4c0c      	ldr	r4, [pc, #48]	; (802a1cc <__libc_init_array+0x44>)
 802a19c:	f001 fa3a 	bl	802b614 <_init>
 802a1a0:	1b64      	subs	r4, r4, r5
 802a1a2:	10a4      	asrs	r4, r4, #2
 802a1a4:	2600      	movs	r6, #0
 802a1a6:	42a6      	cmp	r6, r4
 802a1a8:	d105      	bne.n	802a1b6 <__libc_init_array+0x2e>
 802a1aa:	bd70      	pop	{r4, r5, r6, pc}
 802a1ac:	f855 3b04 	ldr.w	r3, [r5], #4
 802a1b0:	4798      	blx	r3
 802a1b2:	3601      	adds	r6, #1
 802a1b4:	e7ee      	b.n	802a194 <__libc_init_array+0xc>
 802a1b6:	f855 3b04 	ldr.w	r3, [r5], #4
 802a1ba:	4798      	blx	r3
 802a1bc:	3601      	adds	r6, #1
 802a1be:	e7f2      	b.n	802a1a6 <__libc_init_array+0x1e>
 802a1c0:	080303d4 	.word	0x080303d4
 802a1c4:	080303d4 	.word	0x080303d4
 802a1c8:	080303d4 	.word	0x080303d4
 802a1cc:	080303f0 	.word	0x080303f0

0802a1d0 <__retarget_lock_init_recursive>:
 802a1d0:	4770      	bx	lr

0802a1d2 <__retarget_lock_acquire_recursive>:
 802a1d2:	4770      	bx	lr

0802a1d4 <__retarget_lock_release>:
 802a1d4:	4770      	bx	lr

0802a1d6 <__retarget_lock_release_recursive>:
 802a1d6:	4770      	bx	lr

0802a1d8 <malloc>:
 802a1d8:	4b02      	ldr	r3, [pc, #8]	; (802a1e4 <malloc+0xc>)
 802a1da:	4601      	mov	r1, r0
 802a1dc:	6818      	ldr	r0, [r3, #0]
 802a1de:	f000 b88d 	b.w	802a2fc <_malloc_r>
 802a1e2:	bf00      	nop
 802a1e4:	200000bc 	.word	0x200000bc

0802a1e8 <free>:
 802a1e8:	4b02      	ldr	r3, [pc, #8]	; (802a1f4 <free+0xc>)
 802a1ea:	4601      	mov	r1, r0
 802a1ec:	6818      	ldr	r0, [r3, #0]
 802a1ee:	f000 b819 	b.w	802a224 <_free_r>
 802a1f2:	bf00      	nop
 802a1f4:	200000bc 	.word	0x200000bc

0802a1f8 <memcpy>:
 802a1f8:	440a      	add	r2, r1
 802a1fa:	4291      	cmp	r1, r2
 802a1fc:	f100 33ff 	add.w	r3, r0, #4294967295
 802a200:	d100      	bne.n	802a204 <memcpy+0xc>
 802a202:	4770      	bx	lr
 802a204:	b510      	push	{r4, lr}
 802a206:	f811 4b01 	ldrb.w	r4, [r1], #1
 802a20a:	f803 4f01 	strb.w	r4, [r3, #1]!
 802a20e:	4291      	cmp	r1, r2
 802a210:	d1f9      	bne.n	802a206 <memcpy+0xe>
 802a212:	bd10      	pop	{r4, pc}

0802a214 <memset>:
 802a214:	4402      	add	r2, r0
 802a216:	4603      	mov	r3, r0
 802a218:	4293      	cmp	r3, r2
 802a21a:	d100      	bne.n	802a21e <memset+0xa>
 802a21c:	4770      	bx	lr
 802a21e:	f803 1b01 	strb.w	r1, [r3], #1
 802a222:	e7f9      	b.n	802a218 <memset+0x4>

0802a224 <_free_r>:
 802a224:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802a226:	2900      	cmp	r1, #0
 802a228:	d044      	beq.n	802a2b4 <_free_r+0x90>
 802a22a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802a22e:	9001      	str	r0, [sp, #4]
 802a230:	2b00      	cmp	r3, #0
 802a232:	f1a1 0404 	sub.w	r4, r1, #4
 802a236:	bfb8      	it	lt
 802a238:	18e4      	addlt	r4, r4, r3
 802a23a:	f000 ffa1 	bl	802b180 <__malloc_lock>
 802a23e:	4a1e      	ldr	r2, [pc, #120]	; (802a2b8 <_free_r+0x94>)
 802a240:	9801      	ldr	r0, [sp, #4]
 802a242:	6813      	ldr	r3, [r2, #0]
 802a244:	b933      	cbnz	r3, 802a254 <_free_r+0x30>
 802a246:	6063      	str	r3, [r4, #4]
 802a248:	6014      	str	r4, [r2, #0]
 802a24a:	b003      	add	sp, #12
 802a24c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802a250:	f000 bf9c 	b.w	802b18c <__malloc_unlock>
 802a254:	42a3      	cmp	r3, r4
 802a256:	d908      	bls.n	802a26a <_free_r+0x46>
 802a258:	6825      	ldr	r5, [r4, #0]
 802a25a:	1961      	adds	r1, r4, r5
 802a25c:	428b      	cmp	r3, r1
 802a25e:	bf01      	itttt	eq
 802a260:	6819      	ldreq	r1, [r3, #0]
 802a262:	685b      	ldreq	r3, [r3, #4]
 802a264:	1949      	addeq	r1, r1, r5
 802a266:	6021      	streq	r1, [r4, #0]
 802a268:	e7ed      	b.n	802a246 <_free_r+0x22>
 802a26a:	461a      	mov	r2, r3
 802a26c:	685b      	ldr	r3, [r3, #4]
 802a26e:	b10b      	cbz	r3, 802a274 <_free_r+0x50>
 802a270:	42a3      	cmp	r3, r4
 802a272:	d9fa      	bls.n	802a26a <_free_r+0x46>
 802a274:	6811      	ldr	r1, [r2, #0]
 802a276:	1855      	adds	r5, r2, r1
 802a278:	42a5      	cmp	r5, r4
 802a27a:	d10b      	bne.n	802a294 <_free_r+0x70>
 802a27c:	6824      	ldr	r4, [r4, #0]
 802a27e:	4421      	add	r1, r4
 802a280:	1854      	adds	r4, r2, r1
 802a282:	42a3      	cmp	r3, r4
 802a284:	6011      	str	r1, [r2, #0]
 802a286:	d1e0      	bne.n	802a24a <_free_r+0x26>
 802a288:	681c      	ldr	r4, [r3, #0]
 802a28a:	685b      	ldr	r3, [r3, #4]
 802a28c:	6053      	str	r3, [r2, #4]
 802a28e:	4421      	add	r1, r4
 802a290:	6011      	str	r1, [r2, #0]
 802a292:	e7da      	b.n	802a24a <_free_r+0x26>
 802a294:	d902      	bls.n	802a29c <_free_r+0x78>
 802a296:	230c      	movs	r3, #12
 802a298:	6003      	str	r3, [r0, #0]
 802a29a:	e7d6      	b.n	802a24a <_free_r+0x26>
 802a29c:	6825      	ldr	r5, [r4, #0]
 802a29e:	1961      	adds	r1, r4, r5
 802a2a0:	428b      	cmp	r3, r1
 802a2a2:	bf04      	itt	eq
 802a2a4:	6819      	ldreq	r1, [r3, #0]
 802a2a6:	685b      	ldreq	r3, [r3, #4]
 802a2a8:	6063      	str	r3, [r4, #4]
 802a2aa:	bf04      	itt	eq
 802a2ac:	1949      	addeq	r1, r1, r5
 802a2ae:	6021      	streq	r1, [r4, #0]
 802a2b0:	6054      	str	r4, [r2, #4]
 802a2b2:	e7ca      	b.n	802a24a <_free_r+0x26>
 802a2b4:	b003      	add	sp, #12
 802a2b6:	bd30      	pop	{r4, r5, pc}
 802a2b8:	200178cc 	.word	0x200178cc

0802a2bc <sbrk_aligned>:
 802a2bc:	b570      	push	{r4, r5, r6, lr}
 802a2be:	4e0e      	ldr	r6, [pc, #56]	; (802a2f8 <sbrk_aligned+0x3c>)
 802a2c0:	460c      	mov	r4, r1
 802a2c2:	6831      	ldr	r1, [r6, #0]
 802a2c4:	4605      	mov	r5, r0
 802a2c6:	b911      	cbnz	r1, 802a2ce <sbrk_aligned+0x12>
 802a2c8:	f000 fb7a 	bl	802a9c0 <_sbrk_r>
 802a2cc:	6030      	str	r0, [r6, #0]
 802a2ce:	4621      	mov	r1, r4
 802a2d0:	4628      	mov	r0, r5
 802a2d2:	f000 fb75 	bl	802a9c0 <_sbrk_r>
 802a2d6:	1c43      	adds	r3, r0, #1
 802a2d8:	d00a      	beq.n	802a2f0 <sbrk_aligned+0x34>
 802a2da:	1cc4      	adds	r4, r0, #3
 802a2dc:	f024 0403 	bic.w	r4, r4, #3
 802a2e0:	42a0      	cmp	r0, r4
 802a2e2:	d007      	beq.n	802a2f4 <sbrk_aligned+0x38>
 802a2e4:	1a21      	subs	r1, r4, r0
 802a2e6:	4628      	mov	r0, r5
 802a2e8:	f000 fb6a 	bl	802a9c0 <_sbrk_r>
 802a2ec:	3001      	adds	r0, #1
 802a2ee:	d101      	bne.n	802a2f4 <sbrk_aligned+0x38>
 802a2f0:	f04f 34ff 	mov.w	r4, #4294967295
 802a2f4:	4620      	mov	r0, r4
 802a2f6:	bd70      	pop	{r4, r5, r6, pc}
 802a2f8:	200178d0 	.word	0x200178d0

0802a2fc <_malloc_r>:
 802a2fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802a300:	1ccd      	adds	r5, r1, #3
 802a302:	f025 0503 	bic.w	r5, r5, #3
 802a306:	3508      	adds	r5, #8
 802a308:	2d0c      	cmp	r5, #12
 802a30a:	bf38      	it	cc
 802a30c:	250c      	movcc	r5, #12
 802a30e:	2d00      	cmp	r5, #0
 802a310:	4607      	mov	r7, r0
 802a312:	db01      	blt.n	802a318 <_malloc_r+0x1c>
 802a314:	42a9      	cmp	r1, r5
 802a316:	d905      	bls.n	802a324 <_malloc_r+0x28>
 802a318:	230c      	movs	r3, #12
 802a31a:	603b      	str	r3, [r7, #0]
 802a31c:	2600      	movs	r6, #0
 802a31e:	4630      	mov	r0, r6
 802a320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802a324:	4e2e      	ldr	r6, [pc, #184]	; (802a3e0 <_malloc_r+0xe4>)
 802a326:	f000 ff2b 	bl	802b180 <__malloc_lock>
 802a32a:	6833      	ldr	r3, [r6, #0]
 802a32c:	461c      	mov	r4, r3
 802a32e:	bb34      	cbnz	r4, 802a37e <_malloc_r+0x82>
 802a330:	4629      	mov	r1, r5
 802a332:	4638      	mov	r0, r7
 802a334:	f7ff ffc2 	bl	802a2bc <sbrk_aligned>
 802a338:	1c43      	adds	r3, r0, #1
 802a33a:	4604      	mov	r4, r0
 802a33c:	d14d      	bne.n	802a3da <_malloc_r+0xde>
 802a33e:	6834      	ldr	r4, [r6, #0]
 802a340:	4626      	mov	r6, r4
 802a342:	2e00      	cmp	r6, #0
 802a344:	d140      	bne.n	802a3c8 <_malloc_r+0xcc>
 802a346:	6823      	ldr	r3, [r4, #0]
 802a348:	4631      	mov	r1, r6
 802a34a:	4638      	mov	r0, r7
 802a34c:	eb04 0803 	add.w	r8, r4, r3
 802a350:	f000 fb36 	bl	802a9c0 <_sbrk_r>
 802a354:	4580      	cmp	r8, r0
 802a356:	d13a      	bne.n	802a3ce <_malloc_r+0xd2>
 802a358:	6821      	ldr	r1, [r4, #0]
 802a35a:	3503      	adds	r5, #3
 802a35c:	1a6d      	subs	r5, r5, r1
 802a35e:	f025 0503 	bic.w	r5, r5, #3
 802a362:	3508      	adds	r5, #8
 802a364:	2d0c      	cmp	r5, #12
 802a366:	bf38      	it	cc
 802a368:	250c      	movcc	r5, #12
 802a36a:	4629      	mov	r1, r5
 802a36c:	4638      	mov	r0, r7
 802a36e:	f7ff ffa5 	bl	802a2bc <sbrk_aligned>
 802a372:	3001      	adds	r0, #1
 802a374:	d02b      	beq.n	802a3ce <_malloc_r+0xd2>
 802a376:	6823      	ldr	r3, [r4, #0]
 802a378:	442b      	add	r3, r5
 802a37a:	6023      	str	r3, [r4, #0]
 802a37c:	e00e      	b.n	802a39c <_malloc_r+0xa0>
 802a37e:	6822      	ldr	r2, [r4, #0]
 802a380:	1b52      	subs	r2, r2, r5
 802a382:	d41e      	bmi.n	802a3c2 <_malloc_r+0xc6>
 802a384:	2a0b      	cmp	r2, #11
 802a386:	d916      	bls.n	802a3b6 <_malloc_r+0xba>
 802a388:	1961      	adds	r1, r4, r5
 802a38a:	42a3      	cmp	r3, r4
 802a38c:	6025      	str	r5, [r4, #0]
 802a38e:	bf18      	it	ne
 802a390:	6059      	strne	r1, [r3, #4]
 802a392:	6863      	ldr	r3, [r4, #4]
 802a394:	bf08      	it	eq
 802a396:	6031      	streq	r1, [r6, #0]
 802a398:	5162      	str	r2, [r4, r5]
 802a39a:	604b      	str	r3, [r1, #4]
 802a39c:	4638      	mov	r0, r7
 802a39e:	f104 060b 	add.w	r6, r4, #11
 802a3a2:	f000 fef3 	bl	802b18c <__malloc_unlock>
 802a3a6:	f026 0607 	bic.w	r6, r6, #7
 802a3aa:	1d23      	adds	r3, r4, #4
 802a3ac:	1af2      	subs	r2, r6, r3
 802a3ae:	d0b6      	beq.n	802a31e <_malloc_r+0x22>
 802a3b0:	1b9b      	subs	r3, r3, r6
 802a3b2:	50a3      	str	r3, [r4, r2]
 802a3b4:	e7b3      	b.n	802a31e <_malloc_r+0x22>
 802a3b6:	6862      	ldr	r2, [r4, #4]
 802a3b8:	42a3      	cmp	r3, r4
 802a3ba:	bf0c      	ite	eq
 802a3bc:	6032      	streq	r2, [r6, #0]
 802a3be:	605a      	strne	r2, [r3, #4]
 802a3c0:	e7ec      	b.n	802a39c <_malloc_r+0xa0>
 802a3c2:	4623      	mov	r3, r4
 802a3c4:	6864      	ldr	r4, [r4, #4]
 802a3c6:	e7b2      	b.n	802a32e <_malloc_r+0x32>
 802a3c8:	4634      	mov	r4, r6
 802a3ca:	6876      	ldr	r6, [r6, #4]
 802a3cc:	e7b9      	b.n	802a342 <_malloc_r+0x46>
 802a3ce:	230c      	movs	r3, #12
 802a3d0:	603b      	str	r3, [r7, #0]
 802a3d2:	4638      	mov	r0, r7
 802a3d4:	f000 feda 	bl	802b18c <__malloc_unlock>
 802a3d8:	e7a1      	b.n	802a31e <_malloc_r+0x22>
 802a3da:	6025      	str	r5, [r4, #0]
 802a3dc:	e7de      	b.n	802a39c <_malloc_r+0xa0>
 802a3de:	bf00      	nop
 802a3e0:	200178cc 	.word	0x200178cc

0802a3e4 <__sfputc_r>:
 802a3e4:	6893      	ldr	r3, [r2, #8]
 802a3e6:	3b01      	subs	r3, #1
 802a3e8:	2b00      	cmp	r3, #0
 802a3ea:	b410      	push	{r4}
 802a3ec:	6093      	str	r3, [r2, #8]
 802a3ee:	da08      	bge.n	802a402 <__sfputc_r+0x1e>
 802a3f0:	6994      	ldr	r4, [r2, #24]
 802a3f2:	42a3      	cmp	r3, r4
 802a3f4:	db01      	blt.n	802a3fa <__sfputc_r+0x16>
 802a3f6:	290a      	cmp	r1, #10
 802a3f8:	d103      	bne.n	802a402 <__sfputc_r+0x1e>
 802a3fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 802a3fe:	f000 bb67 	b.w	802aad0 <__swbuf_r>
 802a402:	6813      	ldr	r3, [r2, #0]
 802a404:	1c58      	adds	r0, r3, #1
 802a406:	6010      	str	r0, [r2, #0]
 802a408:	7019      	strb	r1, [r3, #0]
 802a40a:	4608      	mov	r0, r1
 802a40c:	f85d 4b04 	ldr.w	r4, [sp], #4
 802a410:	4770      	bx	lr

0802a412 <__sfputs_r>:
 802a412:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a414:	4606      	mov	r6, r0
 802a416:	460f      	mov	r7, r1
 802a418:	4614      	mov	r4, r2
 802a41a:	18d5      	adds	r5, r2, r3
 802a41c:	42ac      	cmp	r4, r5
 802a41e:	d101      	bne.n	802a424 <__sfputs_r+0x12>
 802a420:	2000      	movs	r0, #0
 802a422:	e007      	b.n	802a434 <__sfputs_r+0x22>
 802a424:	f814 1b01 	ldrb.w	r1, [r4], #1
 802a428:	463a      	mov	r2, r7
 802a42a:	4630      	mov	r0, r6
 802a42c:	f7ff ffda 	bl	802a3e4 <__sfputc_r>
 802a430:	1c43      	adds	r3, r0, #1
 802a432:	d1f3      	bne.n	802a41c <__sfputs_r+0xa>
 802a434:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802a438 <_vfiprintf_r>:
 802a438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a43c:	460d      	mov	r5, r1
 802a43e:	b09d      	sub	sp, #116	; 0x74
 802a440:	4614      	mov	r4, r2
 802a442:	4698      	mov	r8, r3
 802a444:	4606      	mov	r6, r0
 802a446:	b118      	cbz	r0, 802a450 <_vfiprintf_r+0x18>
 802a448:	6983      	ldr	r3, [r0, #24]
 802a44a:	b90b      	cbnz	r3, 802a450 <_vfiprintf_r+0x18>
 802a44c:	f000 fd7c 	bl	802af48 <__sinit>
 802a450:	4b89      	ldr	r3, [pc, #548]	; (802a678 <_vfiprintf_r+0x240>)
 802a452:	429d      	cmp	r5, r3
 802a454:	d11b      	bne.n	802a48e <_vfiprintf_r+0x56>
 802a456:	6875      	ldr	r5, [r6, #4]
 802a458:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802a45a:	07d9      	lsls	r1, r3, #31
 802a45c:	d405      	bmi.n	802a46a <_vfiprintf_r+0x32>
 802a45e:	89ab      	ldrh	r3, [r5, #12]
 802a460:	059a      	lsls	r2, r3, #22
 802a462:	d402      	bmi.n	802a46a <_vfiprintf_r+0x32>
 802a464:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802a466:	f7ff feb4 	bl	802a1d2 <__retarget_lock_acquire_recursive>
 802a46a:	89ab      	ldrh	r3, [r5, #12]
 802a46c:	071b      	lsls	r3, r3, #28
 802a46e:	d501      	bpl.n	802a474 <_vfiprintf_r+0x3c>
 802a470:	692b      	ldr	r3, [r5, #16]
 802a472:	b9eb      	cbnz	r3, 802a4b0 <_vfiprintf_r+0x78>
 802a474:	4629      	mov	r1, r5
 802a476:	4630      	mov	r0, r6
 802a478:	f000 fb7c 	bl	802ab74 <__swsetup_r>
 802a47c:	b1c0      	cbz	r0, 802a4b0 <_vfiprintf_r+0x78>
 802a47e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802a480:	07dc      	lsls	r4, r3, #31
 802a482:	d50e      	bpl.n	802a4a2 <_vfiprintf_r+0x6a>
 802a484:	f04f 30ff 	mov.w	r0, #4294967295
 802a488:	b01d      	add	sp, #116	; 0x74
 802a48a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a48e:	4b7b      	ldr	r3, [pc, #492]	; (802a67c <_vfiprintf_r+0x244>)
 802a490:	429d      	cmp	r5, r3
 802a492:	d101      	bne.n	802a498 <_vfiprintf_r+0x60>
 802a494:	68b5      	ldr	r5, [r6, #8]
 802a496:	e7df      	b.n	802a458 <_vfiprintf_r+0x20>
 802a498:	4b79      	ldr	r3, [pc, #484]	; (802a680 <_vfiprintf_r+0x248>)
 802a49a:	429d      	cmp	r5, r3
 802a49c:	bf08      	it	eq
 802a49e:	68f5      	ldreq	r5, [r6, #12]
 802a4a0:	e7da      	b.n	802a458 <_vfiprintf_r+0x20>
 802a4a2:	89ab      	ldrh	r3, [r5, #12]
 802a4a4:	0598      	lsls	r0, r3, #22
 802a4a6:	d4ed      	bmi.n	802a484 <_vfiprintf_r+0x4c>
 802a4a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802a4aa:	f7ff fe94 	bl	802a1d6 <__retarget_lock_release_recursive>
 802a4ae:	e7e9      	b.n	802a484 <_vfiprintf_r+0x4c>
 802a4b0:	2300      	movs	r3, #0
 802a4b2:	9309      	str	r3, [sp, #36]	; 0x24
 802a4b4:	2320      	movs	r3, #32
 802a4b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802a4ba:	f8cd 800c 	str.w	r8, [sp, #12]
 802a4be:	2330      	movs	r3, #48	; 0x30
 802a4c0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 802a684 <_vfiprintf_r+0x24c>
 802a4c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802a4c8:	f04f 0901 	mov.w	r9, #1
 802a4cc:	4623      	mov	r3, r4
 802a4ce:	469a      	mov	sl, r3
 802a4d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 802a4d4:	b10a      	cbz	r2, 802a4da <_vfiprintf_r+0xa2>
 802a4d6:	2a25      	cmp	r2, #37	; 0x25
 802a4d8:	d1f9      	bne.n	802a4ce <_vfiprintf_r+0x96>
 802a4da:	ebba 0b04 	subs.w	fp, sl, r4
 802a4de:	d00b      	beq.n	802a4f8 <_vfiprintf_r+0xc0>
 802a4e0:	465b      	mov	r3, fp
 802a4e2:	4622      	mov	r2, r4
 802a4e4:	4629      	mov	r1, r5
 802a4e6:	4630      	mov	r0, r6
 802a4e8:	f7ff ff93 	bl	802a412 <__sfputs_r>
 802a4ec:	3001      	adds	r0, #1
 802a4ee:	f000 80aa 	beq.w	802a646 <_vfiprintf_r+0x20e>
 802a4f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802a4f4:	445a      	add	r2, fp
 802a4f6:	9209      	str	r2, [sp, #36]	; 0x24
 802a4f8:	f89a 3000 	ldrb.w	r3, [sl]
 802a4fc:	2b00      	cmp	r3, #0
 802a4fe:	f000 80a2 	beq.w	802a646 <_vfiprintf_r+0x20e>
 802a502:	2300      	movs	r3, #0
 802a504:	f04f 32ff 	mov.w	r2, #4294967295
 802a508:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802a50c:	f10a 0a01 	add.w	sl, sl, #1
 802a510:	9304      	str	r3, [sp, #16]
 802a512:	9307      	str	r3, [sp, #28]
 802a514:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802a518:	931a      	str	r3, [sp, #104]	; 0x68
 802a51a:	4654      	mov	r4, sl
 802a51c:	2205      	movs	r2, #5
 802a51e:	f814 1b01 	ldrb.w	r1, [r4], #1
 802a522:	4858      	ldr	r0, [pc, #352]	; (802a684 <_vfiprintf_r+0x24c>)
 802a524:	f7d5 fe74 	bl	8000210 <memchr>
 802a528:	9a04      	ldr	r2, [sp, #16]
 802a52a:	b9d8      	cbnz	r0, 802a564 <_vfiprintf_r+0x12c>
 802a52c:	06d1      	lsls	r1, r2, #27
 802a52e:	bf44      	itt	mi
 802a530:	2320      	movmi	r3, #32
 802a532:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802a536:	0713      	lsls	r3, r2, #28
 802a538:	bf44      	itt	mi
 802a53a:	232b      	movmi	r3, #43	; 0x2b
 802a53c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802a540:	f89a 3000 	ldrb.w	r3, [sl]
 802a544:	2b2a      	cmp	r3, #42	; 0x2a
 802a546:	d015      	beq.n	802a574 <_vfiprintf_r+0x13c>
 802a548:	9a07      	ldr	r2, [sp, #28]
 802a54a:	4654      	mov	r4, sl
 802a54c:	2000      	movs	r0, #0
 802a54e:	f04f 0c0a 	mov.w	ip, #10
 802a552:	4621      	mov	r1, r4
 802a554:	f811 3b01 	ldrb.w	r3, [r1], #1
 802a558:	3b30      	subs	r3, #48	; 0x30
 802a55a:	2b09      	cmp	r3, #9
 802a55c:	d94e      	bls.n	802a5fc <_vfiprintf_r+0x1c4>
 802a55e:	b1b0      	cbz	r0, 802a58e <_vfiprintf_r+0x156>
 802a560:	9207      	str	r2, [sp, #28]
 802a562:	e014      	b.n	802a58e <_vfiprintf_r+0x156>
 802a564:	eba0 0308 	sub.w	r3, r0, r8
 802a568:	fa09 f303 	lsl.w	r3, r9, r3
 802a56c:	4313      	orrs	r3, r2
 802a56e:	9304      	str	r3, [sp, #16]
 802a570:	46a2      	mov	sl, r4
 802a572:	e7d2      	b.n	802a51a <_vfiprintf_r+0xe2>
 802a574:	9b03      	ldr	r3, [sp, #12]
 802a576:	1d19      	adds	r1, r3, #4
 802a578:	681b      	ldr	r3, [r3, #0]
 802a57a:	9103      	str	r1, [sp, #12]
 802a57c:	2b00      	cmp	r3, #0
 802a57e:	bfbb      	ittet	lt
 802a580:	425b      	neglt	r3, r3
 802a582:	f042 0202 	orrlt.w	r2, r2, #2
 802a586:	9307      	strge	r3, [sp, #28]
 802a588:	9307      	strlt	r3, [sp, #28]
 802a58a:	bfb8      	it	lt
 802a58c:	9204      	strlt	r2, [sp, #16]
 802a58e:	7823      	ldrb	r3, [r4, #0]
 802a590:	2b2e      	cmp	r3, #46	; 0x2e
 802a592:	d10c      	bne.n	802a5ae <_vfiprintf_r+0x176>
 802a594:	7863      	ldrb	r3, [r4, #1]
 802a596:	2b2a      	cmp	r3, #42	; 0x2a
 802a598:	d135      	bne.n	802a606 <_vfiprintf_r+0x1ce>
 802a59a:	9b03      	ldr	r3, [sp, #12]
 802a59c:	1d1a      	adds	r2, r3, #4
 802a59e:	681b      	ldr	r3, [r3, #0]
 802a5a0:	9203      	str	r2, [sp, #12]
 802a5a2:	2b00      	cmp	r3, #0
 802a5a4:	bfb8      	it	lt
 802a5a6:	f04f 33ff 	movlt.w	r3, #4294967295
 802a5aa:	3402      	adds	r4, #2
 802a5ac:	9305      	str	r3, [sp, #20]
 802a5ae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 802a694 <_vfiprintf_r+0x25c>
 802a5b2:	7821      	ldrb	r1, [r4, #0]
 802a5b4:	2203      	movs	r2, #3
 802a5b6:	4650      	mov	r0, sl
 802a5b8:	f7d5 fe2a 	bl	8000210 <memchr>
 802a5bc:	b140      	cbz	r0, 802a5d0 <_vfiprintf_r+0x198>
 802a5be:	2340      	movs	r3, #64	; 0x40
 802a5c0:	eba0 000a 	sub.w	r0, r0, sl
 802a5c4:	fa03 f000 	lsl.w	r0, r3, r0
 802a5c8:	9b04      	ldr	r3, [sp, #16]
 802a5ca:	4303      	orrs	r3, r0
 802a5cc:	3401      	adds	r4, #1
 802a5ce:	9304      	str	r3, [sp, #16]
 802a5d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 802a5d4:	482c      	ldr	r0, [pc, #176]	; (802a688 <_vfiprintf_r+0x250>)
 802a5d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802a5da:	2206      	movs	r2, #6
 802a5dc:	f7d5 fe18 	bl	8000210 <memchr>
 802a5e0:	2800      	cmp	r0, #0
 802a5e2:	d03f      	beq.n	802a664 <_vfiprintf_r+0x22c>
 802a5e4:	4b29      	ldr	r3, [pc, #164]	; (802a68c <_vfiprintf_r+0x254>)
 802a5e6:	bb1b      	cbnz	r3, 802a630 <_vfiprintf_r+0x1f8>
 802a5e8:	9b03      	ldr	r3, [sp, #12]
 802a5ea:	3307      	adds	r3, #7
 802a5ec:	f023 0307 	bic.w	r3, r3, #7
 802a5f0:	3308      	adds	r3, #8
 802a5f2:	9303      	str	r3, [sp, #12]
 802a5f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802a5f6:	443b      	add	r3, r7
 802a5f8:	9309      	str	r3, [sp, #36]	; 0x24
 802a5fa:	e767      	b.n	802a4cc <_vfiprintf_r+0x94>
 802a5fc:	fb0c 3202 	mla	r2, ip, r2, r3
 802a600:	460c      	mov	r4, r1
 802a602:	2001      	movs	r0, #1
 802a604:	e7a5      	b.n	802a552 <_vfiprintf_r+0x11a>
 802a606:	2300      	movs	r3, #0
 802a608:	3401      	adds	r4, #1
 802a60a:	9305      	str	r3, [sp, #20]
 802a60c:	4619      	mov	r1, r3
 802a60e:	f04f 0c0a 	mov.w	ip, #10
 802a612:	4620      	mov	r0, r4
 802a614:	f810 2b01 	ldrb.w	r2, [r0], #1
 802a618:	3a30      	subs	r2, #48	; 0x30
 802a61a:	2a09      	cmp	r2, #9
 802a61c:	d903      	bls.n	802a626 <_vfiprintf_r+0x1ee>
 802a61e:	2b00      	cmp	r3, #0
 802a620:	d0c5      	beq.n	802a5ae <_vfiprintf_r+0x176>
 802a622:	9105      	str	r1, [sp, #20]
 802a624:	e7c3      	b.n	802a5ae <_vfiprintf_r+0x176>
 802a626:	fb0c 2101 	mla	r1, ip, r1, r2
 802a62a:	4604      	mov	r4, r0
 802a62c:	2301      	movs	r3, #1
 802a62e:	e7f0      	b.n	802a612 <_vfiprintf_r+0x1da>
 802a630:	ab03      	add	r3, sp, #12
 802a632:	9300      	str	r3, [sp, #0]
 802a634:	462a      	mov	r2, r5
 802a636:	4b16      	ldr	r3, [pc, #88]	; (802a690 <_vfiprintf_r+0x258>)
 802a638:	a904      	add	r1, sp, #16
 802a63a:	4630      	mov	r0, r6
 802a63c:	f3af 8000 	nop.w
 802a640:	4607      	mov	r7, r0
 802a642:	1c78      	adds	r0, r7, #1
 802a644:	d1d6      	bne.n	802a5f4 <_vfiprintf_r+0x1bc>
 802a646:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802a648:	07d9      	lsls	r1, r3, #31
 802a64a:	d405      	bmi.n	802a658 <_vfiprintf_r+0x220>
 802a64c:	89ab      	ldrh	r3, [r5, #12]
 802a64e:	059a      	lsls	r2, r3, #22
 802a650:	d402      	bmi.n	802a658 <_vfiprintf_r+0x220>
 802a652:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802a654:	f7ff fdbf 	bl	802a1d6 <__retarget_lock_release_recursive>
 802a658:	89ab      	ldrh	r3, [r5, #12]
 802a65a:	065b      	lsls	r3, r3, #25
 802a65c:	f53f af12 	bmi.w	802a484 <_vfiprintf_r+0x4c>
 802a660:	9809      	ldr	r0, [sp, #36]	; 0x24
 802a662:	e711      	b.n	802a488 <_vfiprintf_r+0x50>
 802a664:	ab03      	add	r3, sp, #12
 802a666:	9300      	str	r3, [sp, #0]
 802a668:	462a      	mov	r2, r5
 802a66a:	4b09      	ldr	r3, [pc, #36]	; (802a690 <_vfiprintf_r+0x258>)
 802a66c:	a904      	add	r1, sp, #16
 802a66e:	4630      	mov	r0, r6
 802a670:	f000 f880 	bl	802a774 <_printf_i>
 802a674:	e7e4      	b.n	802a640 <_vfiprintf_r+0x208>
 802a676:	bf00      	nop
 802a678:	08030374 	.word	0x08030374
 802a67c:	08030394 	.word	0x08030394
 802a680:	08030354 	.word	0x08030354
 802a684:	0803031c 	.word	0x0803031c
 802a688:	08030326 	.word	0x08030326
 802a68c:	00000000 	.word	0x00000000
 802a690:	0802a413 	.word	0x0802a413
 802a694:	08030322 	.word	0x08030322

0802a698 <_printf_common>:
 802a698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802a69c:	4616      	mov	r6, r2
 802a69e:	4699      	mov	r9, r3
 802a6a0:	688a      	ldr	r2, [r1, #8]
 802a6a2:	690b      	ldr	r3, [r1, #16]
 802a6a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802a6a8:	4293      	cmp	r3, r2
 802a6aa:	bfb8      	it	lt
 802a6ac:	4613      	movlt	r3, r2
 802a6ae:	6033      	str	r3, [r6, #0]
 802a6b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802a6b4:	4607      	mov	r7, r0
 802a6b6:	460c      	mov	r4, r1
 802a6b8:	b10a      	cbz	r2, 802a6be <_printf_common+0x26>
 802a6ba:	3301      	adds	r3, #1
 802a6bc:	6033      	str	r3, [r6, #0]
 802a6be:	6823      	ldr	r3, [r4, #0]
 802a6c0:	0699      	lsls	r1, r3, #26
 802a6c2:	bf42      	ittt	mi
 802a6c4:	6833      	ldrmi	r3, [r6, #0]
 802a6c6:	3302      	addmi	r3, #2
 802a6c8:	6033      	strmi	r3, [r6, #0]
 802a6ca:	6825      	ldr	r5, [r4, #0]
 802a6cc:	f015 0506 	ands.w	r5, r5, #6
 802a6d0:	d106      	bne.n	802a6e0 <_printf_common+0x48>
 802a6d2:	f104 0a19 	add.w	sl, r4, #25
 802a6d6:	68e3      	ldr	r3, [r4, #12]
 802a6d8:	6832      	ldr	r2, [r6, #0]
 802a6da:	1a9b      	subs	r3, r3, r2
 802a6dc:	42ab      	cmp	r3, r5
 802a6de:	dc26      	bgt.n	802a72e <_printf_common+0x96>
 802a6e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 802a6e4:	1e13      	subs	r3, r2, #0
 802a6e6:	6822      	ldr	r2, [r4, #0]
 802a6e8:	bf18      	it	ne
 802a6ea:	2301      	movne	r3, #1
 802a6ec:	0692      	lsls	r2, r2, #26
 802a6ee:	d42b      	bmi.n	802a748 <_printf_common+0xb0>
 802a6f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802a6f4:	4649      	mov	r1, r9
 802a6f6:	4638      	mov	r0, r7
 802a6f8:	47c0      	blx	r8
 802a6fa:	3001      	adds	r0, #1
 802a6fc:	d01e      	beq.n	802a73c <_printf_common+0xa4>
 802a6fe:	6823      	ldr	r3, [r4, #0]
 802a700:	68e5      	ldr	r5, [r4, #12]
 802a702:	6832      	ldr	r2, [r6, #0]
 802a704:	f003 0306 	and.w	r3, r3, #6
 802a708:	2b04      	cmp	r3, #4
 802a70a:	bf08      	it	eq
 802a70c:	1aad      	subeq	r5, r5, r2
 802a70e:	68a3      	ldr	r3, [r4, #8]
 802a710:	6922      	ldr	r2, [r4, #16]
 802a712:	bf0c      	ite	eq
 802a714:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802a718:	2500      	movne	r5, #0
 802a71a:	4293      	cmp	r3, r2
 802a71c:	bfc4      	itt	gt
 802a71e:	1a9b      	subgt	r3, r3, r2
 802a720:	18ed      	addgt	r5, r5, r3
 802a722:	2600      	movs	r6, #0
 802a724:	341a      	adds	r4, #26
 802a726:	42b5      	cmp	r5, r6
 802a728:	d11a      	bne.n	802a760 <_printf_common+0xc8>
 802a72a:	2000      	movs	r0, #0
 802a72c:	e008      	b.n	802a740 <_printf_common+0xa8>
 802a72e:	2301      	movs	r3, #1
 802a730:	4652      	mov	r2, sl
 802a732:	4649      	mov	r1, r9
 802a734:	4638      	mov	r0, r7
 802a736:	47c0      	blx	r8
 802a738:	3001      	adds	r0, #1
 802a73a:	d103      	bne.n	802a744 <_printf_common+0xac>
 802a73c:	f04f 30ff 	mov.w	r0, #4294967295
 802a740:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802a744:	3501      	adds	r5, #1
 802a746:	e7c6      	b.n	802a6d6 <_printf_common+0x3e>
 802a748:	18e1      	adds	r1, r4, r3
 802a74a:	1c5a      	adds	r2, r3, #1
 802a74c:	2030      	movs	r0, #48	; 0x30
 802a74e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802a752:	4422      	add	r2, r4
 802a754:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802a758:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802a75c:	3302      	adds	r3, #2
 802a75e:	e7c7      	b.n	802a6f0 <_printf_common+0x58>
 802a760:	2301      	movs	r3, #1
 802a762:	4622      	mov	r2, r4
 802a764:	4649      	mov	r1, r9
 802a766:	4638      	mov	r0, r7
 802a768:	47c0      	blx	r8
 802a76a:	3001      	adds	r0, #1
 802a76c:	d0e6      	beq.n	802a73c <_printf_common+0xa4>
 802a76e:	3601      	adds	r6, #1
 802a770:	e7d9      	b.n	802a726 <_printf_common+0x8e>
	...

0802a774 <_printf_i>:
 802a774:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802a778:	7e0f      	ldrb	r7, [r1, #24]
 802a77a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802a77c:	2f78      	cmp	r7, #120	; 0x78
 802a77e:	4691      	mov	r9, r2
 802a780:	4680      	mov	r8, r0
 802a782:	460c      	mov	r4, r1
 802a784:	469a      	mov	sl, r3
 802a786:	f101 0243 	add.w	r2, r1, #67	; 0x43
 802a78a:	d807      	bhi.n	802a79c <_printf_i+0x28>
 802a78c:	2f62      	cmp	r7, #98	; 0x62
 802a78e:	d80a      	bhi.n	802a7a6 <_printf_i+0x32>
 802a790:	2f00      	cmp	r7, #0
 802a792:	f000 80d8 	beq.w	802a946 <_printf_i+0x1d2>
 802a796:	2f58      	cmp	r7, #88	; 0x58
 802a798:	f000 80a3 	beq.w	802a8e2 <_printf_i+0x16e>
 802a79c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802a7a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 802a7a4:	e03a      	b.n	802a81c <_printf_i+0xa8>
 802a7a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 802a7aa:	2b15      	cmp	r3, #21
 802a7ac:	d8f6      	bhi.n	802a79c <_printf_i+0x28>
 802a7ae:	a101      	add	r1, pc, #4	; (adr r1, 802a7b4 <_printf_i+0x40>)
 802a7b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 802a7b4:	0802a80d 	.word	0x0802a80d
 802a7b8:	0802a821 	.word	0x0802a821
 802a7bc:	0802a79d 	.word	0x0802a79d
 802a7c0:	0802a79d 	.word	0x0802a79d
 802a7c4:	0802a79d 	.word	0x0802a79d
 802a7c8:	0802a79d 	.word	0x0802a79d
 802a7cc:	0802a821 	.word	0x0802a821
 802a7d0:	0802a79d 	.word	0x0802a79d
 802a7d4:	0802a79d 	.word	0x0802a79d
 802a7d8:	0802a79d 	.word	0x0802a79d
 802a7dc:	0802a79d 	.word	0x0802a79d
 802a7e0:	0802a92d 	.word	0x0802a92d
 802a7e4:	0802a851 	.word	0x0802a851
 802a7e8:	0802a90f 	.word	0x0802a90f
 802a7ec:	0802a79d 	.word	0x0802a79d
 802a7f0:	0802a79d 	.word	0x0802a79d
 802a7f4:	0802a94f 	.word	0x0802a94f
 802a7f8:	0802a79d 	.word	0x0802a79d
 802a7fc:	0802a851 	.word	0x0802a851
 802a800:	0802a79d 	.word	0x0802a79d
 802a804:	0802a79d 	.word	0x0802a79d
 802a808:	0802a917 	.word	0x0802a917
 802a80c:	682b      	ldr	r3, [r5, #0]
 802a80e:	1d1a      	adds	r2, r3, #4
 802a810:	681b      	ldr	r3, [r3, #0]
 802a812:	602a      	str	r2, [r5, #0]
 802a814:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802a818:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802a81c:	2301      	movs	r3, #1
 802a81e:	e0a3      	b.n	802a968 <_printf_i+0x1f4>
 802a820:	6820      	ldr	r0, [r4, #0]
 802a822:	6829      	ldr	r1, [r5, #0]
 802a824:	0606      	lsls	r6, r0, #24
 802a826:	f101 0304 	add.w	r3, r1, #4
 802a82a:	d50a      	bpl.n	802a842 <_printf_i+0xce>
 802a82c:	680e      	ldr	r6, [r1, #0]
 802a82e:	602b      	str	r3, [r5, #0]
 802a830:	2e00      	cmp	r6, #0
 802a832:	da03      	bge.n	802a83c <_printf_i+0xc8>
 802a834:	232d      	movs	r3, #45	; 0x2d
 802a836:	4276      	negs	r6, r6
 802a838:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802a83c:	485e      	ldr	r0, [pc, #376]	; (802a9b8 <_printf_i+0x244>)
 802a83e:	230a      	movs	r3, #10
 802a840:	e019      	b.n	802a876 <_printf_i+0x102>
 802a842:	680e      	ldr	r6, [r1, #0]
 802a844:	602b      	str	r3, [r5, #0]
 802a846:	f010 0f40 	tst.w	r0, #64	; 0x40
 802a84a:	bf18      	it	ne
 802a84c:	b236      	sxthne	r6, r6
 802a84e:	e7ef      	b.n	802a830 <_printf_i+0xbc>
 802a850:	682b      	ldr	r3, [r5, #0]
 802a852:	6820      	ldr	r0, [r4, #0]
 802a854:	1d19      	adds	r1, r3, #4
 802a856:	6029      	str	r1, [r5, #0]
 802a858:	0601      	lsls	r1, r0, #24
 802a85a:	d501      	bpl.n	802a860 <_printf_i+0xec>
 802a85c:	681e      	ldr	r6, [r3, #0]
 802a85e:	e002      	b.n	802a866 <_printf_i+0xf2>
 802a860:	0646      	lsls	r6, r0, #25
 802a862:	d5fb      	bpl.n	802a85c <_printf_i+0xe8>
 802a864:	881e      	ldrh	r6, [r3, #0]
 802a866:	4854      	ldr	r0, [pc, #336]	; (802a9b8 <_printf_i+0x244>)
 802a868:	2f6f      	cmp	r7, #111	; 0x6f
 802a86a:	bf0c      	ite	eq
 802a86c:	2308      	moveq	r3, #8
 802a86e:	230a      	movne	r3, #10
 802a870:	2100      	movs	r1, #0
 802a872:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802a876:	6865      	ldr	r5, [r4, #4]
 802a878:	60a5      	str	r5, [r4, #8]
 802a87a:	2d00      	cmp	r5, #0
 802a87c:	bfa2      	ittt	ge
 802a87e:	6821      	ldrge	r1, [r4, #0]
 802a880:	f021 0104 	bicge.w	r1, r1, #4
 802a884:	6021      	strge	r1, [r4, #0]
 802a886:	b90e      	cbnz	r6, 802a88c <_printf_i+0x118>
 802a888:	2d00      	cmp	r5, #0
 802a88a:	d04d      	beq.n	802a928 <_printf_i+0x1b4>
 802a88c:	4615      	mov	r5, r2
 802a88e:	fbb6 f1f3 	udiv	r1, r6, r3
 802a892:	fb03 6711 	mls	r7, r3, r1, r6
 802a896:	5dc7      	ldrb	r7, [r0, r7]
 802a898:	f805 7d01 	strb.w	r7, [r5, #-1]!
 802a89c:	4637      	mov	r7, r6
 802a89e:	42bb      	cmp	r3, r7
 802a8a0:	460e      	mov	r6, r1
 802a8a2:	d9f4      	bls.n	802a88e <_printf_i+0x11a>
 802a8a4:	2b08      	cmp	r3, #8
 802a8a6:	d10b      	bne.n	802a8c0 <_printf_i+0x14c>
 802a8a8:	6823      	ldr	r3, [r4, #0]
 802a8aa:	07de      	lsls	r6, r3, #31
 802a8ac:	d508      	bpl.n	802a8c0 <_printf_i+0x14c>
 802a8ae:	6923      	ldr	r3, [r4, #16]
 802a8b0:	6861      	ldr	r1, [r4, #4]
 802a8b2:	4299      	cmp	r1, r3
 802a8b4:	bfde      	ittt	le
 802a8b6:	2330      	movle	r3, #48	; 0x30
 802a8b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 802a8bc:	f105 35ff 	addle.w	r5, r5, #4294967295
 802a8c0:	1b52      	subs	r2, r2, r5
 802a8c2:	6122      	str	r2, [r4, #16]
 802a8c4:	f8cd a000 	str.w	sl, [sp]
 802a8c8:	464b      	mov	r3, r9
 802a8ca:	aa03      	add	r2, sp, #12
 802a8cc:	4621      	mov	r1, r4
 802a8ce:	4640      	mov	r0, r8
 802a8d0:	f7ff fee2 	bl	802a698 <_printf_common>
 802a8d4:	3001      	adds	r0, #1
 802a8d6:	d14c      	bne.n	802a972 <_printf_i+0x1fe>
 802a8d8:	f04f 30ff 	mov.w	r0, #4294967295
 802a8dc:	b004      	add	sp, #16
 802a8de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802a8e2:	4835      	ldr	r0, [pc, #212]	; (802a9b8 <_printf_i+0x244>)
 802a8e4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 802a8e8:	6829      	ldr	r1, [r5, #0]
 802a8ea:	6823      	ldr	r3, [r4, #0]
 802a8ec:	f851 6b04 	ldr.w	r6, [r1], #4
 802a8f0:	6029      	str	r1, [r5, #0]
 802a8f2:	061d      	lsls	r5, r3, #24
 802a8f4:	d514      	bpl.n	802a920 <_printf_i+0x1ac>
 802a8f6:	07df      	lsls	r7, r3, #31
 802a8f8:	bf44      	itt	mi
 802a8fa:	f043 0320 	orrmi.w	r3, r3, #32
 802a8fe:	6023      	strmi	r3, [r4, #0]
 802a900:	b91e      	cbnz	r6, 802a90a <_printf_i+0x196>
 802a902:	6823      	ldr	r3, [r4, #0]
 802a904:	f023 0320 	bic.w	r3, r3, #32
 802a908:	6023      	str	r3, [r4, #0]
 802a90a:	2310      	movs	r3, #16
 802a90c:	e7b0      	b.n	802a870 <_printf_i+0xfc>
 802a90e:	6823      	ldr	r3, [r4, #0]
 802a910:	f043 0320 	orr.w	r3, r3, #32
 802a914:	6023      	str	r3, [r4, #0]
 802a916:	2378      	movs	r3, #120	; 0x78
 802a918:	4828      	ldr	r0, [pc, #160]	; (802a9bc <_printf_i+0x248>)
 802a91a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 802a91e:	e7e3      	b.n	802a8e8 <_printf_i+0x174>
 802a920:	0659      	lsls	r1, r3, #25
 802a922:	bf48      	it	mi
 802a924:	b2b6      	uxthmi	r6, r6
 802a926:	e7e6      	b.n	802a8f6 <_printf_i+0x182>
 802a928:	4615      	mov	r5, r2
 802a92a:	e7bb      	b.n	802a8a4 <_printf_i+0x130>
 802a92c:	682b      	ldr	r3, [r5, #0]
 802a92e:	6826      	ldr	r6, [r4, #0]
 802a930:	6961      	ldr	r1, [r4, #20]
 802a932:	1d18      	adds	r0, r3, #4
 802a934:	6028      	str	r0, [r5, #0]
 802a936:	0635      	lsls	r5, r6, #24
 802a938:	681b      	ldr	r3, [r3, #0]
 802a93a:	d501      	bpl.n	802a940 <_printf_i+0x1cc>
 802a93c:	6019      	str	r1, [r3, #0]
 802a93e:	e002      	b.n	802a946 <_printf_i+0x1d2>
 802a940:	0670      	lsls	r0, r6, #25
 802a942:	d5fb      	bpl.n	802a93c <_printf_i+0x1c8>
 802a944:	8019      	strh	r1, [r3, #0]
 802a946:	2300      	movs	r3, #0
 802a948:	6123      	str	r3, [r4, #16]
 802a94a:	4615      	mov	r5, r2
 802a94c:	e7ba      	b.n	802a8c4 <_printf_i+0x150>
 802a94e:	682b      	ldr	r3, [r5, #0]
 802a950:	1d1a      	adds	r2, r3, #4
 802a952:	602a      	str	r2, [r5, #0]
 802a954:	681d      	ldr	r5, [r3, #0]
 802a956:	6862      	ldr	r2, [r4, #4]
 802a958:	2100      	movs	r1, #0
 802a95a:	4628      	mov	r0, r5
 802a95c:	f7d5 fc58 	bl	8000210 <memchr>
 802a960:	b108      	cbz	r0, 802a966 <_printf_i+0x1f2>
 802a962:	1b40      	subs	r0, r0, r5
 802a964:	6060      	str	r0, [r4, #4]
 802a966:	6863      	ldr	r3, [r4, #4]
 802a968:	6123      	str	r3, [r4, #16]
 802a96a:	2300      	movs	r3, #0
 802a96c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802a970:	e7a8      	b.n	802a8c4 <_printf_i+0x150>
 802a972:	6923      	ldr	r3, [r4, #16]
 802a974:	462a      	mov	r2, r5
 802a976:	4649      	mov	r1, r9
 802a978:	4640      	mov	r0, r8
 802a97a:	47d0      	blx	sl
 802a97c:	3001      	adds	r0, #1
 802a97e:	d0ab      	beq.n	802a8d8 <_printf_i+0x164>
 802a980:	6823      	ldr	r3, [r4, #0]
 802a982:	079b      	lsls	r3, r3, #30
 802a984:	d413      	bmi.n	802a9ae <_printf_i+0x23a>
 802a986:	68e0      	ldr	r0, [r4, #12]
 802a988:	9b03      	ldr	r3, [sp, #12]
 802a98a:	4298      	cmp	r0, r3
 802a98c:	bfb8      	it	lt
 802a98e:	4618      	movlt	r0, r3
 802a990:	e7a4      	b.n	802a8dc <_printf_i+0x168>
 802a992:	2301      	movs	r3, #1
 802a994:	4632      	mov	r2, r6
 802a996:	4649      	mov	r1, r9
 802a998:	4640      	mov	r0, r8
 802a99a:	47d0      	blx	sl
 802a99c:	3001      	adds	r0, #1
 802a99e:	d09b      	beq.n	802a8d8 <_printf_i+0x164>
 802a9a0:	3501      	adds	r5, #1
 802a9a2:	68e3      	ldr	r3, [r4, #12]
 802a9a4:	9903      	ldr	r1, [sp, #12]
 802a9a6:	1a5b      	subs	r3, r3, r1
 802a9a8:	42ab      	cmp	r3, r5
 802a9aa:	dcf2      	bgt.n	802a992 <_printf_i+0x21e>
 802a9ac:	e7eb      	b.n	802a986 <_printf_i+0x212>
 802a9ae:	2500      	movs	r5, #0
 802a9b0:	f104 0619 	add.w	r6, r4, #25
 802a9b4:	e7f5      	b.n	802a9a2 <_printf_i+0x22e>
 802a9b6:	bf00      	nop
 802a9b8:	0803032d 	.word	0x0803032d
 802a9bc:	0803033e 	.word	0x0803033e

0802a9c0 <_sbrk_r>:
 802a9c0:	b538      	push	{r3, r4, r5, lr}
 802a9c2:	4d06      	ldr	r5, [pc, #24]	; (802a9dc <_sbrk_r+0x1c>)
 802a9c4:	2300      	movs	r3, #0
 802a9c6:	4604      	mov	r4, r0
 802a9c8:	4608      	mov	r0, r1
 802a9ca:	602b      	str	r3, [r5, #0]
 802a9cc:	f7d6 ffbc 	bl	8001948 <_sbrk>
 802a9d0:	1c43      	adds	r3, r0, #1
 802a9d2:	d102      	bne.n	802a9da <_sbrk_r+0x1a>
 802a9d4:	682b      	ldr	r3, [r5, #0]
 802a9d6:	b103      	cbz	r3, 802a9da <_sbrk_r+0x1a>
 802a9d8:	6023      	str	r3, [r4, #0]
 802a9da:	bd38      	pop	{r3, r4, r5, pc}
 802a9dc:	20017a6c 	.word	0x20017a6c

0802a9e0 <_raise_r>:
 802a9e0:	291f      	cmp	r1, #31
 802a9e2:	b538      	push	{r3, r4, r5, lr}
 802a9e4:	4604      	mov	r4, r0
 802a9e6:	460d      	mov	r5, r1
 802a9e8:	d904      	bls.n	802a9f4 <_raise_r+0x14>
 802a9ea:	2316      	movs	r3, #22
 802a9ec:	6003      	str	r3, [r0, #0]
 802a9ee:	f04f 30ff 	mov.w	r0, #4294967295
 802a9f2:	bd38      	pop	{r3, r4, r5, pc}
 802a9f4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 802a9f6:	b112      	cbz	r2, 802a9fe <_raise_r+0x1e>
 802a9f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802a9fc:	b94b      	cbnz	r3, 802aa12 <_raise_r+0x32>
 802a9fe:	4620      	mov	r0, r4
 802aa00:	f000 f830 	bl	802aa64 <_getpid_r>
 802aa04:	462a      	mov	r2, r5
 802aa06:	4601      	mov	r1, r0
 802aa08:	4620      	mov	r0, r4
 802aa0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802aa0e:	f000 b817 	b.w	802aa40 <_kill_r>
 802aa12:	2b01      	cmp	r3, #1
 802aa14:	d00a      	beq.n	802aa2c <_raise_r+0x4c>
 802aa16:	1c59      	adds	r1, r3, #1
 802aa18:	d103      	bne.n	802aa22 <_raise_r+0x42>
 802aa1a:	2316      	movs	r3, #22
 802aa1c:	6003      	str	r3, [r0, #0]
 802aa1e:	2001      	movs	r0, #1
 802aa20:	e7e7      	b.n	802a9f2 <_raise_r+0x12>
 802aa22:	2400      	movs	r4, #0
 802aa24:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 802aa28:	4628      	mov	r0, r5
 802aa2a:	4798      	blx	r3
 802aa2c:	2000      	movs	r0, #0
 802aa2e:	e7e0      	b.n	802a9f2 <_raise_r+0x12>

0802aa30 <raise>:
 802aa30:	4b02      	ldr	r3, [pc, #8]	; (802aa3c <raise+0xc>)
 802aa32:	4601      	mov	r1, r0
 802aa34:	6818      	ldr	r0, [r3, #0]
 802aa36:	f7ff bfd3 	b.w	802a9e0 <_raise_r>
 802aa3a:	bf00      	nop
 802aa3c:	200000bc 	.word	0x200000bc

0802aa40 <_kill_r>:
 802aa40:	b538      	push	{r3, r4, r5, lr}
 802aa42:	4d07      	ldr	r5, [pc, #28]	; (802aa60 <_kill_r+0x20>)
 802aa44:	2300      	movs	r3, #0
 802aa46:	4604      	mov	r4, r0
 802aa48:	4608      	mov	r0, r1
 802aa4a:	4611      	mov	r1, r2
 802aa4c:	602b      	str	r3, [r5, #0]
 802aa4e:	f7d6 ff45 	bl	80018dc <_kill>
 802aa52:	1c43      	adds	r3, r0, #1
 802aa54:	d102      	bne.n	802aa5c <_kill_r+0x1c>
 802aa56:	682b      	ldr	r3, [r5, #0]
 802aa58:	b103      	cbz	r3, 802aa5c <_kill_r+0x1c>
 802aa5a:	6023      	str	r3, [r4, #0]
 802aa5c:	bd38      	pop	{r3, r4, r5, pc}
 802aa5e:	bf00      	nop
 802aa60:	20017a6c 	.word	0x20017a6c

0802aa64 <_getpid_r>:
 802aa64:	f7d6 bf38 	b.w	80018d8 <_getpid>

0802aa68 <siprintf>:
 802aa68:	b40e      	push	{r1, r2, r3}
 802aa6a:	b500      	push	{lr}
 802aa6c:	b09c      	sub	sp, #112	; 0x70
 802aa6e:	ab1d      	add	r3, sp, #116	; 0x74
 802aa70:	9002      	str	r0, [sp, #8]
 802aa72:	9006      	str	r0, [sp, #24]
 802aa74:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 802aa78:	4809      	ldr	r0, [pc, #36]	; (802aaa0 <siprintf+0x38>)
 802aa7a:	9107      	str	r1, [sp, #28]
 802aa7c:	9104      	str	r1, [sp, #16]
 802aa7e:	4909      	ldr	r1, [pc, #36]	; (802aaa4 <siprintf+0x3c>)
 802aa80:	f853 2b04 	ldr.w	r2, [r3], #4
 802aa84:	9105      	str	r1, [sp, #20]
 802aa86:	6800      	ldr	r0, [r0, #0]
 802aa88:	9301      	str	r3, [sp, #4]
 802aa8a:	a902      	add	r1, sp, #8
 802aa8c:	f000 fc0e 	bl	802b2ac <_svfiprintf_r>
 802aa90:	9b02      	ldr	r3, [sp, #8]
 802aa92:	2200      	movs	r2, #0
 802aa94:	701a      	strb	r2, [r3, #0]
 802aa96:	b01c      	add	sp, #112	; 0x70
 802aa98:	f85d eb04 	ldr.w	lr, [sp], #4
 802aa9c:	b003      	add	sp, #12
 802aa9e:	4770      	bx	lr
 802aaa0:	200000bc 	.word	0x200000bc
 802aaa4:	ffff0208 	.word	0xffff0208

0802aaa8 <strncmp>:
 802aaa8:	b510      	push	{r4, lr}
 802aaaa:	b17a      	cbz	r2, 802aacc <strncmp+0x24>
 802aaac:	4603      	mov	r3, r0
 802aaae:	3901      	subs	r1, #1
 802aab0:	1884      	adds	r4, r0, r2
 802aab2:	f813 0b01 	ldrb.w	r0, [r3], #1
 802aab6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 802aaba:	4290      	cmp	r0, r2
 802aabc:	d101      	bne.n	802aac2 <strncmp+0x1a>
 802aabe:	42a3      	cmp	r3, r4
 802aac0:	d101      	bne.n	802aac6 <strncmp+0x1e>
 802aac2:	1a80      	subs	r0, r0, r2
 802aac4:	bd10      	pop	{r4, pc}
 802aac6:	2800      	cmp	r0, #0
 802aac8:	d1f3      	bne.n	802aab2 <strncmp+0xa>
 802aaca:	e7fa      	b.n	802aac2 <strncmp+0x1a>
 802aacc:	4610      	mov	r0, r2
 802aace:	e7f9      	b.n	802aac4 <strncmp+0x1c>

0802aad0 <__swbuf_r>:
 802aad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802aad2:	460e      	mov	r6, r1
 802aad4:	4614      	mov	r4, r2
 802aad6:	4605      	mov	r5, r0
 802aad8:	b118      	cbz	r0, 802aae2 <__swbuf_r+0x12>
 802aada:	6983      	ldr	r3, [r0, #24]
 802aadc:	b90b      	cbnz	r3, 802aae2 <__swbuf_r+0x12>
 802aade:	f000 fa33 	bl	802af48 <__sinit>
 802aae2:	4b21      	ldr	r3, [pc, #132]	; (802ab68 <__swbuf_r+0x98>)
 802aae4:	429c      	cmp	r4, r3
 802aae6:	d12b      	bne.n	802ab40 <__swbuf_r+0x70>
 802aae8:	686c      	ldr	r4, [r5, #4]
 802aaea:	69a3      	ldr	r3, [r4, #24]
 802aaec:	60a3      	str	r3, [r4, #8]
 802aaee:	89a3      	ldrh	r3, [r4, #12]
 802aaf0:	071a      	lsls	r2, r3, #28
 802aaf2:	d52f      	bpl.n	802ab54 <__swbuf_r+0x84>
 802aaf4:	6923      	ldr	r3, [r4, #16]
 802aaf6:	b36b      	cbz	r3, 802ab54 <__swbuf_r+0x84>
 802aaf8:	6923      	ldr	r3, [r4, #16]
 802aafa:	6820      	ldr	r0, [r4, #0]
 802aafc:	1ac0      	subs	r0, r0, r3
 802aafe:	6963      	ldr	r3, [r4, #20]
 802ab00:	b2f6      	uxtb	r6, r6
 802ab02:	4283      	cmp	r3, r0
 802ab04:	4637      	mov	r7, r6
 802ab06:	dc04      	bgt.n	802ab12 <__swbuf_r+0x42>
 802ab08:	4621      	mov	r1, r4
 802ab0a:	4628      	mov	r0, r5
 802ab0c:	f000 f988 	bl	802ae20 <_fflush_r>
 802ab10:	bb30      	cbnz	r0, 802ab60 <__swbuf_r+0x90>
 802ab12:	68a3      	ldr	r3, [r4, #8]
 802ab14:	3b01      	subs	r3, #1
 802ab16:	60a3      	str	r3, [r4, #8]
 802ab18:	6823      	ldr	r3, [r4, #0]
 802ab1a:	1c5a      	adds	r2, r3, #1
 802ab1c:	6022      	str	r2, [r4, #0]
 802ab1e:	701e      	strb	r6, [r3, #0]
 802ab20:	6963      	ldr	r3, [r4, #20]
 802ab22:	3001      	adds	r0, #1
 802ab24:	4283      	cmp	r3, r0
 802ab26:	d004      	beq.n	802ab32 <__swbuf_r+0x62>
 802ab28:	89a3      	ldrh	r3, [r4, #12]
 802ab2a:	07db      	lsls	r3, r3, #31
 802ab2c:	d506      	bpl.n	802ab3c <__swbuf_r+0x6c>
 802ab2e:	2e0a      	cmp	r6, #10
 802ab30:	d104      	bne.n	802ab3c <__swbuf_r+0x6c>
 802ab32:	4621      	mov	r1, r4
 802ab34:	4628      	mov	r0, r5
 802ab36:	f000 f973 	bl	802ae20 <_fflush_r>
 802ab3a:	b988      	cbnz	r0, 802ab60 <__swbuf_r+0x90>
 802ab3c:	4638      	mov	r0, r7
 802ab3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802ab40:	4b0a      	ldr	r3, [pc, #40]	; (802ab6c <__swbuf_r+0x9c>)
 802ab42:	429c      	cmp	r4, r3
 802ab44:	d101      	bne.n	802ab4a <__swbuf_r+0x7a>
 802ab46:	68ac      	ldr	r4, [r5, #8]
 802ab48:	e7cf      	b.n	802aaea <__swbuf_r+0x1a>
 802ab4a:	4b09      	ldr	r3, [pc, #36]	; (802ab70 <__swbuf_r+0xa0>)
 802ab4c:	429c      	cmp	r4, r3
 802ab4e:	bf08      	it	eq
 802ab50:	68ec      	ldreq	r4, [r5, #12]
 802ab52:	e7ca      	b.n	802aaea <__swbuf_r+0x1a>
 802ab54:	4621      	mov	r1, r4
 802ab56:	4628      	mov	r0, r5
 802ab58:	f000 f80c 	bl	802ab74 <__swsetup_r>
 802ab5c:	2800      	cmp	r0, #0
 802ab5e:	d0cb      	beq.n	802aaf8 <__swbuf_r+0x28>
 802ab60:	f04f 37ff 	mov.w	r7, #4294967295
 802ab64:	e7ea      	b.n	802ab3c <__swbuf_r+0x6c>
 802ab66:	bf00      	nop
 802ab68:	08030374 	.word	0x08030374
 802ab6c:	08030394 	.word	0x08030394
 802ab70:	08030354 	.word	0x08030354

0802ab74 <__swsetup_r>:
 802ab74:	4b32      	ldr	r3, [pc, #200]	; (802ac40 <__swsetup_r+0xcc>)
 802ab76:	b570      	push	{r4, r5, r6, lr}
 802ab78:	681d      	ldr	r5, [r3, #0]
 802ab7a:	4606      	mov	r6, r0
 802ab7c:	460c      	mov	r4, r1
 802ab7e:	b125      	cbz	r5, 802ab8a <__swsetup_r+0x16>
 802ab80:	69ab      	ldr	r3, [r5, #24]
 802ab82:	b913      	cbnz	r3, 802ab8a <__swsetup_r+0x16>
 802ab84:	4628      	mov	r0, r5
 802ab86:	f000 f9df 	bl	802af48 <__sinit>
 802ab8a:	4b2e      	ldr	r3, [pc, #184]	; (802ac44 <__swsetup_r+0xd0>)
 802ab8c:	429c      	cmp	r4, r3
 802ab8e:	d10f      	bne.n	802abb0 <__swsetup_r+0x3c>
 802ab90:	686c      	ldr	r4, [r5, #4]
 802ab92:	89a3      	ldrh	r3, [r4, #12]
 802ab94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802ab98:	0719      	lsls	r1, r3, #28
 802ab9a:	d42c      	bmi.n	802abf6 <__swsetup_r+0x82>
 802ab9c:	06dd      	lsls	r5, r3, #27
 802ab9e:	d411      	bmi.n	802abc4 <__swsetup_r+0x50>
 802aba0:	2309      	movs	r3, #9
 802aba2:	6033      	str	r3, [r6, #0]
 802aba4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 802aba8:	81a3      	strh	r3, [r4, #12]
 802abaa:	f04f 30ff 	mov.w	r0, #4294967295
 802abae:	e03e      	b.n	802ac2e <__swsetup_r+0xba>
 802abb0:	4b25      	ldr	r3, [pc, #148]	; (802ac48 <__swsetup_r+0xd4>)
 802abb2:	429c      	cmp	r4, r3
 802abb4:	d101      	bne.n	802abba <__swsetup_r+0x46>
 802abb6:	68ac      	ldr	r4, [r5, #8]
 802abb8:	e7eb      	b.n	802ab92 <__swsetup_r+0x1e>
 802abba:	4b24      	ldr	r3, [pc, #144]	; (802ac4c <__swsetup_r+0xd8>)
 802abbc:	429c      	cmp	r4, r3
 802abbe:	bf08      	it	eq
 802abc0:	68ec      	ldreq	r4, [r5, #12]
 802abc2:	e7e6      	b.n	802ab92 <__swsetup_r+0x1e>
 802abc4:	0758      	lsls	r0, r3, #29
 802abc6:	d512      	bpl.n	802abee <__swsetup_r+0x7a>
 802abc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802abca:	b141      	cbz	r1, 802abde <__swsetup_r+0x6a>
 802abcc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802abd0:	4299      	cmp	r1, r3
 802abd2:	d002      	beq.n	802abda <__swsetup_r+0x66>
 802abd4:	4630      	mov	r0, r6
 802abd6:	f7ff fb25 	bl	802a224 <_free_r>
 802abda:	2300      	movs	r3, #0
 802abdc:	6363      	str	r3, [r4, #52]	; 0x34
 802abde:	89a3      	ldrh	r3, [r4, #12]
 802abe0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802abe4:	81a3      	strh	r3, [r4, #12]
 802abe6:	2300      	movs	r3, #0
 802abe8:	6063      	str	r3, [r4, #4]
 802abea:	6923      	ldr	r3, [r4, #16]
 802abec:	6023      	str	r3, [r4, #0]
 802abee:	89a3      	ldrh	r3, [r4, #12]
 802abf0:	f043 0308 	orr.w	r3, r3, #8
 802abf4:	81a3      	strh	r3, [r4, #12]
 802abf6:	6923      	ldr	r3, [r4, #16]
 802abf8:	b94b      	cbnz	r3, 802ac0e <__swsetup_r+0x9a>
 802abfa:	89a3      	ldrh	r3, [r4, #12]
 802abfc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802ac00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802ac04:	d003      	beq.n	802ac0e <__swsetup_r+0x9a>
 802ac06:	4621      	mov	r1, r4
 802ac08:	4630      	mov	r0, r6
 802ac0a:	f000 fa5f 	bl	802b0cc <__smakebuf_r>
 802ac0e:	89a0      	ldrh	r0, [r4, #12]
 802ac10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802ac14:	f010 0301 	ands.w	r3, r0, #1
 802ac18:	d00a      	beq.n	802ac30 <__swsetup_r+0xbc>
 802ac1a:	2300      	movs	r3, #0
 802ac1c:	60a3      	str	r3, [r4, #8]
 802ac1e:	6963      	ldr	r3, [r4, #20]
 802ac20:	425b      	negs	r3, r3
 802ac22:	61a3      	str	r3, [r4, #24]
 802ac24:	6923      	ldr	r3, [r4, #16]
 802ac26:	b943      	cbnz	r3, 802ac3a <__swsetup_r+0xc6>
 802ac28:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 802ac2c:	d1ba      	bne.n	802aba4 <__swsetup_r+0x30>
 802ac2e:	bd70      	pop	{r4, r5, r6, pc}
 802ac30:	0781      	lsls	r1, r0, #30
 802ac32:	bf58      	it	pl
 802ac34:	6963      	ldrpl	r3, [r4, #20]
 802ac36:	60a3      	str	r3, [r4, #8]
 802ac38:	e7f4      	b.n	802ac24 <__swsetup_r+0xb0>
 802ac3a:	2000      	movs	r0, #0
 802ac3c:	e7f7      	b.n	802ac2e <__swsetup_r+0xba>
 802ac3e:	bf00      	nop
 802ac40:	200000bc 	.word	0x200000bc
 802ac44:	08030374 	.word	0x08030374
 802ac48:	08030394 	.word	0x08030394
 802ac4c:	08030354 	.word	0x08030354

0802ac50 <__register_exitproc>:
 802ac50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802ac54:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 802ad10 <__register_exitproc+0xc0>
 802ac58:	4606      	mov	r6, r0
 802ac5a:	f8d8 0000 	ldr.w	r0, [r8]
 802ac5e:	461f      	mov	r7, r3
 802ac60:	460d      	mov	r5, r1
 802ac62:	4691      	mov	r9, r2
 802ac64:	f7ff fab5 	bl	802a1d2 <__retarget_lock_acquire_recursive>
 802ac68:	4b25      	ldr	r3, [pc, #148]	; (802ad00 <__register_exitproc+0xb0>)
 802ac6a:	681c      	ldr	r4, [r3, #0]
 802ac6c:	b934      	cbnz	r4, 802ac7c <__register_exitproc+0x2c>
 802ac6e:	4c25      	ldr	r4, [pc, #148]	; (802ad04 <__register_exitproc+0xb4>)
 802ac70:	601c      	str	r4, [r3, #0]
 802ac72:	4b25      	ldr	r3, [pc, #148]	; (802ad08 <__register_exitproc+0xb8>)
 802ac74:	b113      	cbz	r3, 802ac7c <__register_exitproc+0x2c>
 802ac76:	681b      	ldr	r3, [r3, #0]
 802ac78:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 802ac7c:	6863      	ldr	r3, [r4, #4]
 802ac7e:	2b1f      	cmp	r3, #31
 802ac80:	dd07      	ble.n	802ac92 <__register_exitproc+0x42>
 802ac82:	f8d8 0000 	ldr.w	r0, [r8]
 802ac86:	f7ff faa6 	bl	802a1d6 <__retarget_lock_release_recursive>
 802ac8a:	f04f 30ff 	mov.w	r0, #4294967295
 802ac8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802ac92:	b34e      	cbz	r6, 802ace8 <__register_exitproc+0x98>
 802ac94:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 802ac98:	b988      	cbnz	r0, 802acbe <__register_exitproc+0x6e>
 802ac9a:	4b1c      	ldr	r3, [pc, #112]	; (802ad0c <__register_exitproc+0xbc>)
 802ac9c:	b923      	cbnz	r3, 802aca8 <__register_exitproc+0x58>
 802ac9e:	f8d8 0000 	ldr.w	r0, [r8]
 802aca2:	f7ff fa97 	bl	802a1d4 <__retarget_lock_release>
 802aca6:	e7f0      	b.n	802ac8a <__register_exitproc+0x3a>
 802aca8:	f44f 7084 	mov.w	r0, #264	; 0x108
 802acac:	f7ff fa94 	bl	802a1d8 <malloc>
 802acb0:	2800      	cmp	r0, #0
 802acb2:	d0f4      	beq.n	802ac9e <__register_exitproc+0x4e>
 802acb4:	2300      	movs	r3, #0
 802acb6:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 802acba:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 802acbe:	6863      	ldr	r3, [r4, #4]
 802acc0:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 802acc4:	2201      	movs	r2, #1
 802acc6:	409a      	lsls	r2, r3
 802acc8:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 802accc:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 802acd0:	4313      	orrs	r3, r2
 802acd2:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 802acd6:	2e02      	cmp	r6, #2
 802acd8:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 802acdc:	bf02      	ittt	eq
 802acde:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 802ace2:	4313      	orreq	r3, r2
 802ace4:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 802ace8:	6863      	ldr	r3, [r4, #4]
 802acea:	f8d8 0000 	ldr.w	r0, [r8]
 802acee:	1c5a      	adds	r2, r3, #1
 802acf0:	3302      	adds	r3, #2
 802acf2:	6062      	str	r2, [r4, #4]
 802acf4:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 802acf8:	f7ff fa6d 	bl	802a1d6 <__retarget_lock_release_recursive>
 802acfc:	2000      	movs	r0, #0
 802acfe:	e7c6      	b.n	802ac8e <__register_exitproc+0x3e>
 802ad00:	20017a68 	.word	0x20017a68
 802ad04:	200179dc 	.word	0x200179dc
 802ad08:	08030350 	.word	0x08030350
 802ad0c:	0802a1d9 	.word	0x0802a1d9
 802ad10:	20000120 	.word	0x20000120

0802ad14 <__sflush_r>:
 802ad14:	898a      	ldrh	r2, [r1, #12]
 802ad16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802ad1a:	4605      	mov	r5, r0
 802ad1c:	0710      	lsls	r0, r2, #28
 802ad1e:	460c      	mov	r4, r1
 802ad20:	d458      	bmi.n	802add4 <__sflush_r+0xc0>
 802ad22:	684b      	ldr	r3, [r1, #4]
 802ad24:	2b00      	cmp	r3, #0
 802ad26:	dc05      	bgt.n	802ad34 <__sflush_r+0x20>
 802ad28:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802ad2a:	2b00      	cmp	r3, #0
 802ad2c:	dc02      	bgt.n	802ad34 <__sflush_r+0x20>
 802ad2e:	2000      	movs	r0, #0
 802ad30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802ad34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802ad36:	2e00      	cmp	r6, #0
 802ad38:	d0f9      	beq.n	802ad2e <__sflush_r+0x1a>
 802ad3a:	2300      	movs	r3, #0
 802ad3c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 802ad40:	682f      	ldr	r7, [r5, #0]
 802ad42:	602b      	str	r3, [r5, #0]
 802ad44:	d032      	beq.n	802adac <__sflush_r+0x98>
 802ad46:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802ad48:	89a3      	ldrh	r3, [r4, #12]
 802ad4a:	075a      	lsls	r2, r3, #29
 802ad4c:	d505      	bpl.n	802ad5a <__sflush_r+0x46>
 802ad4e:	6863      	ldr	r3, [r4, #4]
 802ad50:	1ac0      	subs	r0, r0, r3
 802ad52:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802ad54:	b10b      	cbz	r3, 802ad5a <__sflush_r+0x46>
 802ad56:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802ad58:	1ac0      	subs	r0, r0, r3
 802ad5a:	2300      	movs	r3, #0
 802ad5c:	4602      	mov	r2, r0
 802ad5e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802ad60:	6a21      	ldr	r1, [r4, #32]
 802ad62:	4628      	mov	r0, r5
 802ad64:	47b0      	blx	r6
 802ad66:	1c43      	adds	r3, r0, #1
 802ad68:	89a3      	ldrh	r3, [r4, #12]
 802ad6a:	d106      	bne.n	802ad7a <__sflush_r+0x66>
 802ad6c:	6829      	ldr	r1, [r5, #0]
 802ad6e:	291d      	cmp	r1, #29
 802ad70:	d82c      	bhi.n	802adcc <__sflush_r+0xb8>
 802ad72:	4a2a      	ldr	r2, [pc, #168]	; (802ae1c <__sflush_r+0x108>)
 802ad74:	40ca      	lsrs	r2, r1
 802ad76:	07d6      	lsls	r6, r2, #31
 802ad78:	d528      	bpl.n	802adcc <__sflush_r+0xb8>
 802ad7a:	2200      	movs	r2, #0
 802ad7c:	6062      	str	r2, [r4, #4]
 802ad7e:	04d9      	lsls	r1, r3, #19
 802ad80:	6922      	ldr	r2, [r4, #16]
 802ad82:	6022      	str	r2, [r4, #0]
 802ad84:	d504      	bpl.n	802ad90 <__sflush_r+0x7c>
 802ad86:	1c42      	adds	r2, r0, #1
 802ad88:	d101      	bne.n	802ad8e <__sflush_r+0x7a>
 802ad8a:	682b      	ldr	r3, [r5, #0]
 802ad8c:	b903      	cbnz	r3, 802ad90 <__sflush_r+0x7c>
 802ad8e:	6560      	str	r0, [r4, #84]	; 0x54
 802ad90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802ad92:	602f      	str	r7, [r5, #0]
 802ad94:	2900      	cmp	r1, #0
 802ad96:	d0ca      	beq.n	802ad2e <__sflush_r+0x1a>
 802ad98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802ad9c:	4299      	cmp	r1, r3
 802ad9e:	d002      	beq.n	802ada6 <__sflush_r+0x92>
 802ada0:	4628      	mov	r0, r5
 802ada2:	f7ff fa3f 	bl	802a224 <_free_r>
 802ada6:	2000      	movs	r0, #0
 802ada8:	6360      	str	r0, [r4, #52]	; 0x34
 802adaa:	e7c1      	b.n	802ad30 <__sflush_r+0x1c>
 802adac:	6a21      	ldr	r1, [r4, #32]
 802adae:	2301      	movs	r3, #1
 802adb0:	4628      	mov	r0, r5
 802adb2:	47b0      	blx	r6
 802adb4:	1c41      	adds	r1, r0, #1
 802adb6:	d1c7      	bne.n	802ad48 <__sflush_r+0x34>
 802adb8:	682b      	ldr	r3, [r5, #0]
 802adba:	2b00      	cmp	r3, #0
 802adbc:	d0c4      	beq.n	802ad48 <__sflush_r+0x34>
 802adbe:	2b1d      	cmp	r3, #29
 802adc0:	d001      	beq.n	802adc6 <__sflush_r+0xb2>
 802adc2:	2b16      	cmp	r3, #22
 802adc4:	d101      	bne.n	802adca <__sflush_r+0xb6>
 802adc6:	602f      	str	r7, [r5, #0]
 802adc8:	e7b1      	b.n	802ad2e <__sflush_r+0x1a>
 802adca:	89a3      	ldrh	r3, [r4, #12]
 802adcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802add0:	81a3      	strh	r3, [r4, #12]
 802add2:	e7ad      	b.n	802ad30 <__sflush_r+0x1c>
 802add4:	690f      	ldr	r7, [r1, #16]
 802add6:	2f00      	cmp	r7, #0
 802add8:	d0a9      	beq.n	802ad2e <__sflush_r+0x1a>
 802adda:	0793      	lsls	r3, r2, #30
 802addc:	680e      	ldr	r6, [r1, #0]
 802adde:	bf08      	it	eq
 802ade0:	694b      	ldreq	r3, [r1, #20]
 802ade2:	600f      	str	r7, [r1, #0]
 802ade4:	bf18      	it	ne
 802ade6:	2300      	movne	r3, #0
 802ade8:	eba6 0807 	sub.w	r8, r6, r7
 802adec:	608b      	str	r3, [r1, #8]
 802adee:	f1b8 0f00 	cmp.w	r8, #0
 802adf2:	dd9c      	ble.n	802ad2e <__sflush_r+0x1a>
 802adf4:	6a21      	ldr	r1, [r4, #32]
 802adf6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802adf8:	4643      	mov	r3, r8
 802adfa:	463a      	mov	r2, r7
 802adfc:	4628      	mov	r0, r5
 802adfe:	47b0      	blx	r6
 802ae00:	2800      	cmp	r0, #0
 802ae02:	dc06      	bgt.n	802ae12 <__sflush_r+0xfe>
 802ae04:	89a3      	ldrh	r3, [r4, #12]
 802ae06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802ae0a:	81a3      	strh	r3, [r4, #12]
 802ae0c:	f04f 30ff 	mov.w	r0, #4294967295
 802ae10:	e78e      	b.n	802ad30 <__sflush_r+0x1c>
 802ae12:	4407      	add	r7, r0
 802ae14:	eba8 0800 	sub.w	r8, r8, r0
 802ae18:	e7e9      	b.n	802adee <__sflush_r+0xda>
 802ae1a:	bf00      	nop
 802ae1c:	20400001 	.word	0x20400001

0802ae20 <_fflush_r>:
 802ae20:	b538      	push	{r3, r4, r5, lr}
 802ae22:	690b      	ldr	r3, [r1, #16]
 802ae24:	4605      	mov	r5, r0
 802ae26:	460c      	mov	r4, r1
 802ae28:	b913      	cbnz	r3, 802ae30 <_fflush_r+0x10>
 802ae2a:	2500      	movs	r5, #0
 802ae2c:	4628      	mov	r0, r5
 802ae2e:	bd38      	pop	{r3, r4, r5, pc}
 802ae30:	b118      	cbz	r0, 802ae3a <_fflush_r+0x1a>
 802ae32:	6983      	ldr	r3, [r0, #24]
 802ae34:	b90b      	cbnz	r3, 802ae3a <_fflush_r+0x1a>
 802ae36:	f000 f887 	bl	802af48 <__sinit>
 802ae3a:	4b14      	ldr	r3, [pc, #80]	; (802ae8c <_fflush_r+0x6c>)
 802ae3c:	429c      	cmp	r4, r3
 802ae3e:	d11b      	bne.n	802ae78 <_fflush_r+0x58>
 802ae40:	686c      	ldr	r4, [r5, #4]
 802ae42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802ae46:	2b00      	cmp	r3, #0
 802ae48:	d0ef      	beq.n	802ae2a <_fflush_r+0xa>
 802ae4a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 802ae4c:	07d0      	lsls	r0, r2, #31
 802ae4e:	d404      	bmi.n	802ae5a <_fflush_r+0x3a>
 802ae50:	0599      	lsls	r1, r3, #22
 802ae52:	d402      	bmi.n	802ae5a <_fflush_r+0x3a>
 802ae54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802ae56:	f7ff f9bc 	bl	802a1d2 <__retarget_lock_acquire_recursive>
 802ae5a:	4628      	mov	r0, r5
 802ae5c:	4621      	mov	r1, r4
 802ae5e:	f7ff ff59 	bl	802ad14 <__sflush_r>
 802ae62:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802ae64:	07da      	lsls	r2, r3, #31
 802ae66:	4605      	mov	r5, r0
 802ae68:	d4e0      	bmi.n	802ae2c <_fflush_r+0xc>
 802ae6a:	89a3      	ldrh	r3, [r4, #12]
 802ae6c:	059b      	lsls	r3, r3, #22
 802ae6e:	d4dd      	bmi.n	802ae2c <_fflush_r+0xc>
 802ae70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802ae72:	f7ff f9b0 	bl	802a1d6 <__retarget_lock_release_recursive>
 802ae76:	e7d9      	b.n	802ae2c <_fflush_r+0xc>
 802ae78:	4b05      	ldr	r3, [pc, #20]	; (802ae90 <_fflush_r+0x70>)
 802ae7a:	429c      	cmp	r4, r3
 802ae7c:	d101      	bne.n	802ae82 <_fflush_r+0x62>
 802ae7e:	68ac      	ldr	r4, [r5, #8]
 802ae80:	e7df      	b.n	802ae42 <_fflush_r+0x22>
 802ae82:	4b04      	ldr	r3, [pc, #16]	; (802ae94 <_fflush_r+0x74>)
 802ae84:	429c      	cmp	r4, r3
 802ae86:	bf08      	it	eq
 802ae88:	68ec      	ldreq	r4, [r5, #12]
 802ae8a:	e7da      	b.n	802ae42 <_fflush_r+0x22>
 802ae8c:	08030374 	.word	0x08030374
 802ae90:	08030394 	.word	0x08030394
 802ae94:	08030354 	.word	0x08030354

0802ae98 <std>:
 802ae98:	2300      	movs	r3, #0
 802ae9a:	b510      	push	{r4, lr}
 802ae9c:	4604      	mov	r4, r0
 802ae9e:	e9c0 3300 	strd	r3, r3, [r0]
 802aea2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802aea6:	6083      	str	r3, [r0, #8]
 802aea8:	8181      	strh	r1, [r0, #12]
 802aeaa:	6643      	str	r3, [r0, #100]	; 0x64
 802aeac:	81c2      	strh	r2, [r0, #14]
 802aeae:	6183      	str	r3, [r0, #24]
 802aeb0:	4619      	mov	r1, r3
 802aeb2:	2208      	movs	r2, #8
 802aeb4:	305c      	adds	r0, #92	; 0x5c
 802aeb6:	f7ff f9ad 	bl	802a214 <memset>
 802aeba:	4b05      	ldr	r3, [pc, #20]	; (802aed0 <std+0x38>)
 802aebc:	6263      	str	r3, [r4, #36]	; 0x24
 802aebe:	4b05      	ldr	r3, [pc, #20]	; (802aed4 <std+0x3c>)
 802aec0:	62a3      	str	r3, [r4, #40]	; 0x28
 802aec2:	4b05      	ldr	r3, [pc, #20]	; (802aed8 <std+0x40>)
 802aec4:	62e3      	str	r3, [r4, #44]	; 0x2c
 802aec6:	4b05      	ldr	r3, [pc, #20]	; (802aedc <std+0x44>)
 802aec8:	6224      	str	r4, [r4, #32]
 802aeca:	6323      	str	r3, [r4, #48]	; 0x30
 802aecc:	bd10      	pop	{r4, pc}
 802aece:	bf00      	nop
 802aed0:	0802b4ad 	.word	0x0802b4ad
 802aed4:	0802b4cf 	.word	0x0802b4cf
 802aed8:	0802b507 	.word	0x0802b507
 802aedc:	0802b52b 	.word	0x0802b52b

0802aee0 <_cleanup_r>:
 802aee0:	4901      	ldr	r1, [pc, #4]	; (802aee8 <_cleanup_r+0x8>)
 802aee2:	f000 b8af 	b.w	802b044 <_fwalk_reent>
 802aee6:	bf00      	nop
 802aee8:	0802ae21 	.word	0x0802ae21

0802aeec <__sfmoreglue>:
 802aeec:	b570      	push	{r4, r5, r6, lr}
 802aeee:	2268      	movs	r2, #104	; 0x68
 802aef0:	1e4d      	subs	r5, r1, #1
 802aef2:	4355      	muls	r5, r2
 802aef4:	460e      	mov	r6, r1
 802aef6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 802aefa:	f7ff f9ff 	bl	802a2fc <_malloc_r>
 802aefe:	4604      	mov	r4, r0
 802af00:	b140      	cbz	r0, 802af14 <__sfmoreglue+0x28>
 802af02:	2100      	movs	r1, #0
 802af04:	e9c0 1600 	strd	r1, r6, [r0]
 802af08:	300c      	adds	r0, #12
 802af0a:	60a0      	str	r0, [r4, #8]
 802af0c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 802af10:	f7ff f980 	bl	802a214 <memset>
 802af14:	4620      	mov	r0, r4
 802af16:	bd70      	pop	{r4, r5, r6, pc}

0802af18 <__sfp_lock_acquire>:
 802af18:	4801      	ldr	r0, [pc, #4]	; (802af20 <__sfp_lock_acquire+0x8>)
 802af1a:	f7ff b95a 	b.w	802a1d2 <__retarget_lock_acquire_recursive>
 802af1e:	bf00      	nop
 802af20:	200178ca 	.word	0x200178ca

0802af24 <__sfp_lock_release>:
 802af24:	4801      	ldr	r0, [pc, #4]	; (802af2c <__sfp_lock_release+0x8>)
 802af26:	f7ff b956 	b.w	802a1d6 <__retarget_lock_release_recursive>
 802af2a:	bf00      	nop
 802af2c:	200178ca 	.word	0x200178ca

0802af30 <__sinit_lock_acquire>:
 802af30:	4801      	ldr	r0, [pc, #4]	; (802af38 <__sinit_lock_acquire+0x8>)
 802af32:	f7ff b94e 	b.w	802a1d2 <__retarget_lock_acquire_recursive>
 802af36:	bf00      	nop
 802af38:	200178cb 	.word	0x200178cb

0802af3c <__sinit_lock_release>:
 802af3c:	4801      	ldr	r0, [pc, #4]	; (802af44 <__sinit_lock_release+0x8>)
 802af3e:	f7ff b94a 	b.w	802a1d6 <__retarget_lock_release_recursive>
 802af42:	bf00      	nop
 802af44:	200178cb 	.word	0x200178cb

0802af48 <__sinit>:
 802af48:	b510      	push	{r4, lr}
 802af4a:	4604      	mov	r4, r0
 802af4c:	f7ff fff0 	bl	802af30 <__sinit_lock_acquire>
 802af50:	69a3      	ldr	r3, [r4, #24]
 802af52:	b11b      	cbz	r3, 802af5c <__sinit+0x14>
 802af54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802af58:	f7ff bff0 	b.w	802af3c <__sinit_lock_release>
 802af5c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 802af60:	6523      	str	r3, [r4, #80]	; 0x50
 802af62:	4b13      	ldr	r3, [pc, #76]	; (802afb0 <__sinit+0x68>)
 802af64:	4a13      	ldr	r2, [pc, #76]	; (802afb4 <__sinit+0x6c>)
 802af66:	681b      	ldr	r3, [r3, #0]
 802af68:	62a2      	str	r2, [r4, #40]	; 0x28
 802af6a:	42a3      	cmp	r3, r4
 802af6c:	bf04      	itt	eq
 802af6e:	2301      	moveq	r3, #1
 802af70:	61a3      	streq	r3, [r4, #24]
 802af72:	4620      	mov	r0, r4
 802af74:	f000 f820 	bl	802afb8 <__sfp>
 802af78:	6060      	str	r0, [r4, #4]
 802af7a:	4620      	mov	r0, r4
 802af7c:	f000 f81c 	bl	802afb8 <__sfp>
 802af80:	60a0      	str	r0, [r4, #8]
 802af82:	4620      	mov	r0, r4
 802af84:	f000 f818 	bl	802afb8 <__sfp>
 802af88:	2200      	movs	r2, #0
 802af8a:	60e0      	str	r0, [r4, #12]
 802af8c:	2104      	movs	r1, #4
 802af8e:	6860      	ldr	r0, [r4, #4]
 802af90:	f7ff ff82 	bl	802ae98 <std>
 802af94:	68a0      	ldr	r0, [r4, #8]
 802af96:	2201      	movs	r2, #1
 802af98:	2109      	movs	r1, #9
 802af9a:	f7ff ff7d 	bl	802ae98 <std>
 802af9e:	68e0      	ldr	r0, [r4, #12]
 802afa0:	2202      	movs	r2, #2
 802afa2:	2112      	movs	r1, #18
 802afa4:	f7ff ff78 	bl	802ae98 <std>
 802afa8:	2301      	movs	r3, #1
 802afaa:	61a3      	str	r3, [r4, #24]
 802afac:	e7d2      	b.n	802af54 <__sinit+0xc>
 802afae:	bf00      	nop
 802afb0:	08030318 	.word	0x08030318
 802afb4:	0802aee1 	.word	0x0802aee1

0802afb8 <__sfp>:
 802afb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802afba:	4607      	mov	r7, r0
 802afbc:	f7ff ffac 	bl	802af18 <__sfp_lock_acquire>
 802afc0:	4b1e      	ldr	r3, [pc, #120]	; (802b03c <__sfp+0x84>)
 802afc2:	681e      	ldr	r6, [r3, #0]
 802afc4:	69b3      	ldr	r3, [r6, #24]
 802afc6:	b913      	cbnz	r3, 802afce <__sfp+0x16>
 802afc8:	4630      	mov	r0, r6
 802afca:	f7ff ffbd 	bl	802af48 <__sinit>
 802afce:	3648      	adds	r6, #72	; 0x48
 802afd0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 802afd4:	3b01      	subs	r3, #1
 802afd6:	d503      	bpl.n	802afe0 <__sfp+0x28>
 802afd8:	6833      	ldr	r3, [r6, #0]
 802afda:	b30b      	cbz	r3, 802b020 <__sfp+0x68>
 802afdc:	6836      	ldr	r6, [r6, #0]
 802afde:	e7f7      	b.n	802afd0 <__sfp+0x18>
 802afe0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 802afe4:	b9d5      	cbnz	r5, 802b01c <__sfp+0x64>
 802afe6:	4b16      	ldr	r3, [pc, #88]	; (802b040 <__sfp+0x88>)
 802afe8:	60e3      	str	r3, [r4, #12]
 802afea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802afee:	6665      	str	r5, [r4, #100]	; 0x64
 802aff0:	f7ff f8ee 	bl	802a1d0 <__retarget_lock_init_recursive>
 802aff4:	f7ff ff96 	bl	802af24 <__sfp_lock_release>
 802aff8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 802affc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 802b000:	6025      	str	r5, [r4, #0]
 802b002:	61a5      	str	r5, [r4, #24]
 802b004:	2208      	movs	r2, #8
 802b006:	4629      	mov	r1, r5
 802b008:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 802b00c:	f7ff f902 	bl	802a214 <memset>
 802b010:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 802b014:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 802b018:	4620      	mov	r0, r4
 802b01a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802b01c:	3468      	adds	r4, #104	; 0x68
 802b01e:	e7d9      	b.n	802afd4 <__sfp+0x1c>
 802b020:	2104      	movs	r1, #4
 802b022:	4638      	mov	r0, r7
 802b024:	f7ff ff62 	bl	802aeec <__sfmoreglue>
 802b028:	4604      	mov	r4, r0
 802b02a:	6030      	str	r0, [r6, #0]
 802b02c:	2800      	cmp	r0, #0
 802b02e:	d1d5      	bne.n	802afdc <__sfp+0x24>
 802b030:	f7ff ff78 	bl	802af24 <__sfp_lock_release>
 802b034:	230c      	movs	r3, #12
 802b036:	603b      	str	r3, [r7, #0]
 802b038:	e7ee      	b.n	802b018 <__sfp+0x60>
 802b03a:	bf00      	nop
 802b03c:	08030318 	.word	0x08030318
 802b040:	ffff0001 	.word	0xffff0001

0802b044 <_fwalk_reent>:
 802b044:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802b048:	4606      	mov	r6, r0
 802b04a:	4688      	mov	r8, r1
 802b04c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 802b050:	2700      	movs	r7, #0
 802b052:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802b056:	f1b9 0901 	subs.w	r9, r9, #1
 802b05a:	d505      	bpl.n	802b068 <_fwalk_reent+0x24>
 802b05c:	6824      	ldr	r4, [r4, #0]
 802b05e:	2c00      	cmp	r4, #0
 802b060:	d1f7      	bne.n	802b052 <_fwalk_reent+0xe>
 802b062:	4638      	mov	r0, r7
 802b064:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802b068:	89ab      	ldrh	r3, [r5, #12]
 802b06a:	2b01      	cmp	r3, #1
 802b06c:	d907      	bls.n	802b07e <_fwalk_reent+0x3a>
 802b06e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802b072:	3301      	adds	r3, #1
 802b074:	d003      	beq.n	802b07e <_fwalk_reent+0x3a>
 802b076:	4629      	mov	r1, r5
 802b078:	4630      	mov	r0, r6
 802b07a:	47c0      	blx	r8
 802b07c:	4307      	orrs	r7, r0
 802b07e:	3568      	adds	r5, #104	; 0x68
 802b080:	e7e9      	b.n	802b056 <_fwalk_reent+0x12>

0802b082 <__swhatbuf_r>:
 802b082:	b570      	push	{r4, r5, r6, lr}
 802b084:	460e      	mov	r6, r1
 802b086:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b08a:	2900      	cmp	r1, #0
 802b08c:	b096      	sub	sp, #88	; 0x58
 802b08e:	4614      	mov	r4, r2
 802b090:	461d      	mov	r5, r3
 802b092:	da08      	bge.n	802b0a6 <__swhatbuf_r+0x24>
 802b094:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 802b098:	2200      	movs	r2, #0
 802b09a:	602a      	str	r2, [r5, #0]
 802b09c:	061a      	lsls	r2, r3, #24
 802b09e:	d410      	bmi.n	802b0c2 <__swhatbuf_r+0x40>
 802b0a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802b0a4:	e00e      	b.n	802b0c4 <__swhatbuf_r+0x42>
 802b0a6:	466a      	mov	r2, sp
 802b0a8:	f000 fa66 	bl	802b578 <_fstat_r>
 802b0ac:	2800      	cmp	r0, #0
 802b0ae:	dbf1      	blt.n	802b094 <__swhatbuf_r+0x12>
 802b0b0:	9a01      	ldr	r2, [sp, #4]
 802b0b2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802b0b6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802b0ba:	425a      	negs	r2, r3
 802b0bc:	415a      	adcs	r2, r3
 802b0be:	602a      	str	r2, [r5, #0]
 802b0c0:	e7ee      	b.n	802b0a0 <__swhatbuf_r+0x1e>
 802b0c2:	2340      	movs	r3, #64	; 0x40
 802b0c4:	2000      	movs	r0, #0
 802b0c6:	6023      	str	r3, [r4, #0]
 802b0c8:	b016      	add	sp, #88	; 0x58
 802b0ca:	bd70      	pop	{r4, r5, r6, pc}

0802b0cc <__smakebuf_r>:
 802b0cc:	898b      	ldrh	r3, [r1, #12]
 802b0ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802b0d0:	079d      	lsls	r5, r3, #30
 802b0d2:	4606      	mov	r6, r0
 802b0d4:	460c      	mov	r4, r1
 802b0d6:	d507      	bpl.n	802b0e8 <__smakebuf_r+0x1c>
 802b0d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802b0dc:	6023      	str	r3, [r4, #0]
 802b0de:	6123      	str	r3, [r4, #16]
 802b0e0:	2301      	movs	r3, #1
 802b0e2:	6163      	str	r3, [r4, #20]
 802b0e4:	b002      	add	sp, #8
 802b0e6:	bd70      	pop	{r4, r5, r6, pc}
 802b0e8:	ab01      	add	r3, sp, #4
 802b0ea:	466a      	mov	r2, sp
 802b0ec:	f7ff ffc9 	bl	802b082 <__swhatbuf_r>
 802b0f0:	9900      	ldr	r1, [sp, #0]
 802b0f2:	4605      	mov	r5, r0
 802b0f4:	4630      	mov	r0, r6
 802b0f6:	f7ff f901 	bl	802a2fc <_malloc_r>
 802b0fa:	b948      	cbnz	r0, 802b110 <__smakebuf_r+0x44>
 802b0fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802b100:	059a      	lsls	r2, r3, #22
 802b102:	d4ef      	bmi.n	802b0e4 <__smakebuf_r+0x18>
 802b104:	f023 0303 	bic.w	r3, r3, #3
 802b108:	f043 0302 	orr.w	r3, r3, #2
 802b10c:	81a3      	strh	r3, [r4, #12]
 802b10e:	e7e3      	b.n	802b0d8 <__smakebuf_r+0xc>
 802b110:	4b0d      	ldr	r3, [pc, #52]	; (802b148 <__smakebuf_r+0x7c>)
 802b112:	62b3      	str	r3, [r6, #40]	; 0x28
 802b114:	89a3      	ldrh	r3, [r4, #12]
 802b116:	6020      	str	r0, [r4, #0]
 802b118:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802b11c:	81a3      	strh	r3, [r4, #12]
 802b11e:	9b00      	ldr	r3, [sp, #0]
 802b120:	6163      	str	r3, [r4, #20]
 802b122:	9b01      	ldr	r3, [sp, #4]
 802b124:	6120      	str	r0, [r4, #16]
 802b126:	b15b      	cbz	r3, 802b140 <__smakebuf_r+0x74>
 802b128:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802b12c:	4630      	mov	r0, r6
 802b12e:	f000 fa35 	bl	802b59c <_isatty_r>
 802b132:	b128      	cbz	r0, 802b140 <__smakebuf_r+0x74>
 802b134:	89a3      	ldrh	r3, [r4, #12]
 802b136:	f023 0303 	bic.w	r3, r3, #3
 802b13a:	f043 0301 	orr.w	r3, r3, #1
 802b13e:	81a3      	strh	r3, [r4, #12]
 802b140:	89a0      	ldrh	r0, [r4, #12]
 802b142:	4305      	orrs	r5, r0
 802b144:	81a5      	strh	r5, [r4, #12]
 802b146:	e7cd      	b.n	802b0e4 <__smakebuf_r+0x18>
 802b148:	0802aee1 	.word	0x0802aee1

0802b14c <memmove>:
 802b14c:	4288      	cmp	r0, r1
 802b14e:	b510      	push	{r4, lr}
 802b150:	eb01 0402 	add.w	r4, r1, r2
 802b154:	d902      	bls.n	802b15c <memmove+0x10>
 802b156:	4284      	cmp	r4, r0
 802b158:	4623      	mov	r3, r4
 802b15a:	d807      	bhi.n	802b16c <memmove+0x20>
 802b15c:	1e43      	subs	r3, r0, #1
 802b15e:	42a1      	cmp	r1, r4
 802b160:	d008      	beq.n	802b174 <memmove+0x28>
 802b162:	f811 2b01 	ldrb.w	r2, [r1], #1
 802b166:	f803 2f01 	strb.w	r2, [r3, #1]!
 802b16a:	e7f8      	b.n	802b15e <memmove+0x12>
 802b16c:	4402      	add	r2, r0
 802b16e:	4601      	mov	r1, r0
 802b170:	428a      	cmp	r2, r1
 802b172:	d100      	bne.n	802b176 <memmove+0x2a>
 802b174:	bd10      	pop	{r4, pc}
 802b176:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802b17a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802b17e:	e7f7      	b.n	802b170 <memmove+0x24>

0802b180 <__malloc_lock>:
 802b180:	4801      	ldr	r0, [pc, #4]	; (802b188 <__malloc_lock+0x8>)
 802b182:	f7ff b826 	b.w	802a1d2 <__retarget_lock_acquire_recursive>
 802b186:	bf00      	nop
 802b188:	200178c9 	.word	0x200178c9

0802b18c <__malloc_unlock>:
 802b18c:	4801      	ldr	r0, [pc, #4]	; (802b194 <__malloc_unlock+0x8>)
 802b18e:	f7ff b822 	b.w	802a1d6 <__retarget_lock_release_recursive>
 802b192:	bf00      	nop
 802b194:	200178c9 	.word	0x200178c9

0802b198 <_realloc_r>:
 802b198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802b19c:	4680      	mov	r8, r0
 802b19e:	4614      	mov	r4, r2
 802b1a0:	460e      	mov	r6, r1
 802b1a2:	b921      	cbnz	r1, 802b1ae <_realloc_r+0x16>
 802b1a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802b1a8:	4611      	mov	r1, r2
 802b1aa:	f7ff b8a7 	b.w	802a2fc <_malloc_r>
 802b1ae:	b92a      	cbnz	r2, 802b1bc <_realloc_r+0x24>
 802b1b0:	f7ff f838 	bl	802a224 <_free_r>
 802b1b4:	4625      	mov	r5, r4
 802b1b6:	4628      	mov	r0, r5
 802b1b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802b1bc:	f000 fa10 	bl	802b5e0 <_malloc_usable_size_r>
 802b1c0:	4284      	cmp	r4, r0
 802b1c2:	4607      	mov	r7, r0
 802b1c4:	d802      	bhi.n	802b1cc <_realloc_r+0x34>
 802b1c6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 802b1ca:	d812      	bhi.n	802b1f2 <_realloc_r+0x5a>
 802b1cc:	4621      	mov	r1, r4
 802b1ce:	4640      	mov	r0, r8
 802b1d0:	f7ff f894 	bl	802a2fc <_malloc_r>
 802b1d4:	4605      	mov	r5, r0
 802b1d6:	2800      	cmp	r0, #0
 802b1d8:	d0ed      	beq.n	802b1b6 <_realloc_r+0x1e>
 802b1da:	42bc      	cmp	r4, r7
 802b1dc:	4622      	mov	r2, r4
 802b1de:	4631      	mov	r1, r6
 802b1e0:	bf28      	it	cs
 802b1e2:	463a      	movcs	r2, r7
 802b1e4:	f7ff f808 	bl	802a1f8 <memcpy>
 802b1e8:	4631      	mov	r1, r6
 802b1ea:	4640      	mov	r0, r8
 802b1ec:	f7ff f81a 	bl	802a224 <_free_r>
 802b1f0:	e7e1      	b.n	802b1b6 <_realloc_r+0x1e>
 802b1f2:	4635      	mov	r5, r6
 802b1f4:	e7df      	b.n	802b1b6 <_realloc_r+0x1e>

0802b1f6 <__ssputs_r>:
 802b1f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802b1fa:	688e      	ldr	r6, [r1, #8]
 802b1fc:	429e      	cmp	r6, r3
 802b1fe:	4682      	mov	sl, r0
 802b200:	460c      	mov	r4, r1
 802b202:	4690      	mov	r8, r2
 802b204:	461f      	mov	r7, r3
 802b206:	d838      	bhi.n	802b27a <__ssputs_r+0x84>
 802b208:	898a      	ldrh	r2, [r1, #12]
 802b20a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 802b20e:	d032      	beq.n	802b276 <__ssputs_r+0x80>
 802b210:	6825      	ldr	r5, [r4, #0]
 802b212:	6909      	ldr	r1, [r1, #16]
 802b214:	eba5 0901 	sub.w	r9, r5, r1
 802b218:	6965      	ldr	r5, [r4, #20]
 802b21a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802b21e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802b222:	3301      	adds	r3, #1
 802b224:	444b      	add	r3, r9
 802b226:	106d      	asrs	r5, r5, #1
 802b228:	429d      	cmp	r5, r3
 802b22a:	bf38      	it	cc
 802b22c:	461d      	movcc	r5, r3
 802b22e:	0553      	lsls	r3, r2, #21
 802b230:	d531      	bpl.n	802b296 <__ssputs_r+0xa0>
 802b232:	4629      	mov	r1, r5
 802b234:	f7ff f862 	bl	802a2fc <_malloc_r>
 802b238:	4606      	mov	r6, r0
 802b23a:	b950      	cbnz	r0, 802b252 <__ssputs_r+0x5c>
 802b23c:	230c      	movs	r3, #12
 802b23e:	f8ca 3000 	str.w	r3, [sl]
 802b242:	89a3      	ldrh	r3, [r4, #12]
 802b244:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802b248:	81a3      	strh	r3, [r4, #12]
 802b24a:	f04f 30ff 	mov.w	r0, #4294967295
 802b24e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802b252:	6921      	ldr	r1, [r4, #16]
 802b254:	464a      	mov	r2, r9
 802b256:	f7fe ffcf 	bl	802a1f8 <memcpy>
 802b25a:	89a3      	ldrh	r3, [r4, #12]
 802b25c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 802b260:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802b264:	81a3      	strh	r3, [r4, #12]
 802b266:	6126      	str	r6, [r4, #16]
 802b268:	6165      	str	r5, [r4, #20]
 802b26a:	444e      	add	r6, r9
 802b26c:	eba5 0509 	sub.w	r5, r5, r9
 802b270:	6026      	str	r6, [r4, #0]
 802b272:	60a5      	str	r5, [r4, #8]
 802b274:	463e      	mov	r6, r7
 802b276:	42be      	cmp	r6, r7
 802b278:	d900      	bls.n	802b27c <__ssputs_r+0x86>
 802b27a:	463e      	mov	r6, r7
 802b27c:	6820      	ldr	r0, [r4, #0]
 802b27e:	4632      	mov	r2, r6
 802b280:	4641      	mov	r1, r8
 802b282:	f7ff ff63 	bl	802b14c <memmove>
 802b286:	68a3      	ldr	r3, [r4, #8]
 802b288:	1b9b      	subs	r3, r3, r6
 802b28a:	60a3      	str	r3, [r4, #8]
 802b28c:	6823      	ldr	r3, [r4, #0]
 802b28e:	4433      	add	r3, r6
 802b290:	6023      	str	r3, [r4, #0]
 802b292:	2000      	movs	r0, #0
 802b294:	e7db      	b.n	802b24e <__ssputs_r+0x58>
 802b296:	462a      	mov	r2, r5
 802b298:	f7ff ff7e 	bl	802b198 <_realloc_r>
 802b29c:	4606      	mov	r6, r0
 802b29e:	2800      	cmp	r0, #0
 802b2a0:	d1e1      	bne.n	802b266 <__ssputs_r+0x70>
 802b2a2:	6921      	ldr	r1, [r4, #16]
 802b2a4:	4650      	mov	r0, sl
 802b2a6:	f7fe ffbd 	bl	802a224 <_free_r>
 802b2aa:	e7c7      	b.n	802b23c <__ssputs_r+0x46>

0802b2ac <_svfiprintf_r>:
 802b2ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b2b0:	4698      	mov	r8, r3
 802b2b2:	898b      	ldrh	r3, [r1, #12]
 802b2b4:	061b      	lsls	r3, r3, #24
 802b2b6:	b09d      	sub	sp, #116	; 0x74
 802b2b8:	4607      	mov	r7, r0
 802b2ba:	460d      	mov	r5, r1
 802b2bc:	4614      	mov	r4, r2
 802b2be:	d50e      	bpl.n	802b2de <_svfiprintf_r+0x32>
 802b2c0:	690b      	ldr	r3, [r1, #16]
 802b2c2:	b963      	cbnz	r3, 802b2de <_svfiprintf_r+0x32>
 802b2c4:	2140      	movs	r1, #64	; 0x40
 802b2c6:	f7ff f819 	bl	802a2fc <_malloc_r>
 802b2ca:	6028      	str	r0, [r5, #0]
 802b2cc:	6128      	str	r0, [r5, #16]
 802b2ce:	b920      	cbnz	r0, 802b2da <_svfiprintf_r+0x2e>
 802b2d0:	230c      	movs	r3, #12
 802b2d2:	603b      	str	r3, [r7, #0]
 802b2d4:	f04f 30ff 	mov.w	r0, #4294967295
 802b2d8:	e0d1      	b.n	802b47e <_svfiprintf_r+0x1d2>
 802b2da:	2340      	movs	r3, #64	; 0x40
 802b2dc:	616b      	str	r3, [r5, #20]
 802b2de:	2300      	movs	r3, #0
 802b2e0:	9309      	str	r3, [sp, #36]	; 0x24
 802b2e2:	2320      	movs	r3, #32
 802b2e4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802b2e8:	f8cd 800c 	str.w	r8, [sp, #12]
 802b2ec:	2330      	movs	r3, #48	; 0x30
 802b2ee:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 802b498 <_svfiprintf_r+0x1ec>
 802b2f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802b2f6:	f04f 0901 	mov.w	r9, #1
 802b2fa:	4623      	mov	r3, r4
 802b2fc:	469a      	mov	sl, r3
 802b2fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 802b302:	b10a      	cbz	r2, 802b308 <_svfiprintf_r+0x5c>
 802b304:	2a25      	cmp	r2, #37	; 0x25
 802b306:	d1f9      	bne.n	802b2fc <_svfiprintf_r+0x50>
 802b308:	ebba 0b04 	subs.w	fp, sl, r4
 802b30c:	d00b      	beq.n	802b326 <_svfiprintf_r+0x7a>
 802b30e:	465b      	mov	r3, fp
 802b310:	4622      	mov	r2, r4
 802b312:	4629      	mov	r1, r5
 802b314:	4638      	mov	r0, r7
 802b316:	f7ff ff6e 	bl	802b1f6 <__ssputs_r>
 802b31a:	3001      	adds	r0, #1
 802b31c:	f000 80aa 	beq.w	802b474 <_svfiprintf_r+0x1c8>
 802b320:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802b322:	445a      	add	r2, fp
 802b324:	9209      	str	r2, [sp, #36]	; 0x24
 802b326:	f89a 3000 	ldrb.w	r3, [sl]
 802b32a:	2b00      	cmp	r3, #0
 802b32c:	f000 80a2 	beq.w	802b474 <_svfiprintf_r+0x1c8>
 802b330:	2300      	movs	r3, #0
 802b332:	f04f 32ff 	mov.w	r2, #4294967295
 802b336:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802b33a:	f10a 0a01 	add.w	sl, sl, #1
 802b33e:	9304      	str	r3, [sp, #16]
 802b340:	9307      	str	r3, [sp, #28]
 802b342:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802b346:	931a      	str	r3, [sp, #104]	; 0x68
 802b348:	4654      	mov	r4, sl
 802b34a:	2205      	movs	r2, #5
 802b34c:	f814 1b01 	ldrb.w	r1, [r4], #1
 802b350:	4851      	ldr	r0, [pc, #324]	; (802b498 <_svfiprintf_r+0x1ec>)
 802b352:	f7d4 ff5d 	bl	8000210 <memchr>
 802b356:	9a04      	ldr	r2, [sp, #16]
 802b358:	b9d8      	cbnz	r0, 802b392 <_svfiprintf_r+0xe6>
 802b35a:	06d0      	lsls	r0, r2, #27
 802b35c:	bf44      	itt	mi
 802b35e:	2320      	movmi	r3, #32
 802b360:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802b364:	0711      	lsls	r1, r2, #28
 802b366:	bf44      	itt	mi
 802b368:	232b      	movmi	r3, #43	; 0x2b
 802b36a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802b36e:	f89a 3000 	ldrb.w	r3, [sl]
 802b372:	2b2a      	cmp	r3, #42	; 0x2a
 802b374:	d015      	beq.n	802b3a2 <_svfiprintf_r+0xf6>
 802b376:	9a07      	ldr	r2, [sp, #28]
 802b378:	4654      	mov	r4, sl
 802b37a:	2000      	movs	r0, #0
 802b37c:	f04f 0c0a 	mov.w	ip, #10
 802b380:	4621      	mov	r1, r4
 802b382:	f811 3b01 	ldrb.w	r3, [r1], #1
 802b386:	3b30      	subs	r3, #48	; 0x30
 802b388:	2b09      	cmp	r3, #9
 802b38a:	d94e      	bls.n	802b42a <_svfiprintf_r+0x17e>
 802b38c:	b1b0      	cbz	r0, 802b3bc <_svfiprintf_r+0x110>
 802b38e:	9207      	str	r2, [sp, #28]
 802b390:	e014      	b.n	802b3bc <_svfiprintf_r+0x110>
 802b392:	eba0 0308 	sub.w	r3, r0, r8
 802b396:	fa09 f303 	lsl.w	r3, r9, r3
 802b39a:	4313      	orrs	r3, r2
 802b39c:	9304      	str	r3, [sp, #16]
 802b39e:	46a2      	mov	sl, r4
 802b3a0:	e7d2      	b.n	802b348 <_svfiprintf_r+0x9c>
 802b3a2:	9b03      	ldr	r3, [sp, #12]
 802b3a4:	1d19      	adds	r1, r3, #4
 802b3a6:	681b      	ldr	r3, [r3, #0]
 802b3a8:	9103      	str	r1, [sp, #12]
 802b3aa:	2b00      	cmp	r3, #0
 802b3ac:	bfbb      	ittet	lt
 802b3ae:	425b      	neglt	r3, r3
 802b3b0:	f042 0202 	orrlt.w	r2, r2, #2
 802b3b4:	9307      	strge	r3, [sp, #28]
 802b3b6:	9307      	strlt	r3, [sp, #28]
 802b3b8:	bfb8      	it	lt
 802b3ba:	9204      	strlt	r2, [sp, #16]
 802b3bc:	7823      	ldrb	r3, [r4, #0]
 802b3be:	2b2e      	cmp	r3, #46	; 0x2e
 802b3c0:	d10c      	bne.n	802b3dc <_svfiprintf_r+0x130>
 802b3c2:	7863      	ldrb	r3, [r4, #1]
 802b3c4:	2b2a      	cmp	r3, #42	; 0x2a
 802b3c6:	d135      	bne.n	802b434 <_svfiprintf_r+0x188>
 802b3c8:	9b03      	ldr	r3, [sp, #12]
 802b3ca:	1d1a      	adds	r2, r3, #4
 802b3cc:	681b      	ldr	r3, [r3, #0]
 802b3ce:	9203      	str	r2, [sp, #12]
 802b3d0:	2b00      	cmp	r3, #0
 802b3d2:	bfb8      	it	lt
 802b3d4:	f04f 33ff 	movlt.w	r3, #4294967295
 802b3d8:	3402      	adds	r4, #2
 802b3da:	9305      	str	r3, [sp, #20]
 802b3dc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 802b4a8 <_svfiprintf_r+0x1fc>
 802b3e0:	7821      	ldrb	r1, [r4, #0]
 802b3e2:	2203      	movs	r2, #3
 802b3e4:	4650      	mov	r0, sl
 802b3e6:	f7d4 ff13 	bl	8000210 <memchr>
 802b3ea:	b140      	cbz	r0, 802b3fe <_svfiprintf_r+0x152>
 802b3ec:	2340      	movs	r3, #64	; 0x40
 802b3ee:	eba0 000a 	sub.w	r0, r0, sl
 802b3f2:	fa03 f000 	lsl.w	r0, r3, r0
 802b3f6:	9b04      	ldr	r3, [sp, #16]
 802b3f8:	4303      	orrs	r3, r0
 802b3fa:	3401      	adds	r4, #1
 802b3fc:	9304      	str	r3, [sp, #16]
 802b3fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 802b402:	4826      	ldr	r0, [pc, #152]	; (802b49c <_svfiprintf_r+0x1f0>)
 802b404:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802b408:	2206      	movs	r2, #6
 802b40a:	f7d4 ff01 	bl	8000210 <memchr>
 802b40e:	2800      	cmp	r0, #0
 802b410:	d038      	beq.n	802b484 <_svfiprintf_r+0x1d8>
 802b412:	4b23      	ldr	r3, [pc, #140]	; (802b4a0 <_svfiprintf_r+0x1f4>)
 802b414:	bb1b      	cbnz	r3, 802b45e <_svfiprintf_r+0x1b2>
 802b416:	9b03      	ldr	r3, [sp, #12]
 802b418:	3307      	adds	r3, #7
 802b41a:	f023 0307 	bic.w	r3, r3, #7
 802b41e:	3308      	adds	r3, #8
 802b420:	9303      	str	r3, [sp, #12]
 802b422:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802b424:	4433      	add	r3, r6
 802b426:	9309      	str	r3, [sp, #36]	; 0x24
 802b428:	e767      	b.n	802b2fa <_svfiprintf_r+0x4e>
 802b42a:	fb0c 3202 	mla	r2, ip, r2, r3
 802b42e:	460c      	mov	r4, r1
 802b430:	2001      	movs	r0, #1
 802b432:	e7a5      	b.n	802b380 <_svfiprintf_r+0xd4>
 802b434:	2300      	movs	r3, #0
 802b436:	3401      	adds	r4, #1
 802b438:	9305      	str	r3, [sp, #20]
 802b43a:	4619      	mov	r1, r3
 802b43c:	f04f 0c0a 	mov.w	ip, #10
 802b440:	4620      	mov	r0, r4
 802b442:	f810 2b01 	ldrb.w	r2, [r0], #1
 802b446:	3a30      	subs	r2, #48	; 0x30
 802b448:	2a09      	cmp	r2, #9
 802b44a:	d903      	bls.n	802b454 <_svfiprintf_r+0x1a8>
 802b44c:	2b00      	cmp	r3, #0
 802b44e:	d0c5      	beq.n	802b3dc <_svfiprintf_r+0x130>
 802b450:	9105      	str	r1, [sp, #20]
 802b452:	e7c3      	b.n	802b3dc <_svfiprintf_r+0x130>
 802b454:	fb0c 2101 	mla	r1, ip, r1, r2
 802b458:	4604      	mov	r4, r0
 802b45a:	2301      	movs	r3, #1
 802b45c:	e7f0      	b.n	802b440 <_svfiprintf_r+0x194>
 802b45e:	ab03      	add	r3, sp, #12
 802b460:	9300      	str	r3, [sp, #0]
 802b462:	462a      	mov	r2, r5
 802b464:	4b0f      	ldr	r3, [pc, #60]	; (802b4a4 <_svfiprintf_r+0x1f8>)
 802b466:	a904      	add	r1, sp, #16
 802b468:	4638      	mov	r0, r7
 802b46a:	f3af 8000 	nop.w
 802b46e:	1c42      	adds	r2, r0, #1
 802b470:	4606      	mov	r6, r0
 802b472:	d1d6      	bne.n	802b422 <_svfiprintf_r+0x176>
 802b474:	89ab      	ldrh	r3, [r5, #12]
 802b476:	065b      	lsls	r3, r3, #25
 802b478:	f53f af2c 	bmi.w	802b2d4 <_svfiprintf_r+0x28>
 802b47c:	9809      	ldr	r0, [sp, #36]	; 0x24
 802b47e:	b01d      	add	sp, #116	; 0x74
 802b480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b484:	ab03      	add	r3, sp, #12
 802b486:	9300      	str	r3, [sp, #0]
 802b488:	462a      	mov	r2, r5
 802b48a:	4b06      	ldr	r3, [pc, #24]	; (802b4a4 <_svfiprintf_r+0x1f8>)
 802b48c:	a904      	add	r1, sp, #16
 802b48e:	4638      	mov	r0, r7
 802b490:	f7ff f970 	bl	802a774 <_printf_i>
 802b494:	e7eb      	b.n	802b46e <_svfiprintf_r+0x1c2>
 802b496:	bf00      	nop
 802b498:	0803031c 	.word	0x0803031c
 802b49c:	08030326 	.word	0x08030326
 802b4a0:	00000000 	.word	0x00000000
 802b4a4:	0802b1f7 	.word	0x0802b1f7
 802b4a8:	08030322 	.word	0x08030322

0802b4ac <__sread>:
 802b4ac:	b510      	push	{r4, lr}
 802b4ae:	460c      	mov	r4, r1
 802b4b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b4b4:	f000 f89c 	bl	802b5f0 <_read_r>
 802b4b8:	2800      	cmp	r0, #0
 802b4ba:	bfab      	itete	ge
 802b4bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802b4be:	89a3      	ldrhlt	r3, [r4, #12]
 802b4c0:	181b      	addge	r3, r3, r0
 802b4c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802b4c6:	bfac      	ite	ge
 802b4c8:	6563      	strge	r3, [r4, #84]	; 0x54
 802b4ca:	81a3      	strhlt	r3, [r4, #12]
 802b4cc:	bd10      	pop	{r4, pc}

0802b4ce <__swrite>:
 802b4ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802b4d2:	461f      	mov	r7, r3
 802b4d4:	898b      	ldrh	r3, [r1, #12]
 802b4d6:	05db      	lsls	r3, r3, #23
 802b4d8:	4605      	mov	r5, r0
 802b4da:	460c      	mov	r4, r1
 802b4dc:	4616      	mov	r6, r2
 802b4de:	d505      	bpl.n	802b4ec <__swrite+0x1e>
 802b4e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b4e4:	2302      	movs	r3, #2
 802b4e6:	2200      	movs	r2, #0
 802b4e8:	f000 f868 	bl	802b5bc <_lseek_r>
 802b4ec:	89a3      	ldrh	r3, [r4, #12]
 802b4ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802b4f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802b4f6:	81a3      	strh	r3, [r4, #12]
 802b4f8:	4632      	mov	r2, r6
 802b4fa:	463b      	mov	r3, r7
 802b4fc:	4628      	mov	r0, r5
 802b4fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802b502:	f000 b817 	b.w	802b534 <_write_r>

0802b506 <__sseek>:
 802b506:	b510      	push	{r4, lr}
 802b508:	460c      	mov	r4, r1
 802b50a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b50e:	f000 f855 	bl	802b5bc <_lseek_r>
 802b512:	1c43      	adds	r3, r0, #1
 802b514:	89a3      	ldrh	r3, [r4, #12]
 802b516:	bf15      	itete	ne
 802b518:	6560      	strne	r0, [r4, #84]	; 0x54
 802b51a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802b51e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802b522:	81a3      	strheq	r3, [r4, #12]
 802b524:	bf18      	it	ne
 802b526:	81a3      	strhne	r3, [r4, #12]
 802b528:	bd10      	pop	{r4, pc}

0802b52a <__sclose>:
 802b52a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b52e:	f000 b813 	b.w	802b558 <_close_r>
	...

0802b534 <_write_r>:
 802b534:	b538      	push	{r3, r4, r5, lr}
 802b536:	4d07      	ldr	r5, [pc, #28]	; (802b554 <_write_r+0x20>)
 802b538:	4604      	mov	r4, r0
 802b53a:	4608      	mov	r0, r1
 802b53c:	4611      	mov	r1, r2
 802b53e:	2200      	movs	r2, #0
 802b540:	602a      	str	r2, [r5, #0]
 802b542:	461a      	mov	r2, r3
 802b544:	f7d6 f9e6 	bl	8001914 <_write>
 802b548:	1c43      	adds	r3, r0, #1
 802b54a:	d102      	bne.n	802b552 <_write_r+0x1e>
 802b54c:	682b      	ldr	r3, [r5, #0]
 802b54e:	b103      	cbz	r3, 802b552 <_write_r+0x1e>
 802b550:	6023      	str	r3, [r4, #0]
 802b552:	bd38      	pop	{r3, r4, r5, pc}
 802b554:	20017a6c 	.word	0x20017a6c

0802b558 <_close_r>:
 802b558:	b538      	push	{r3, r4, r5, lr}
 802b55a:	4d06      	ldr	r5, [pc, #24]	; (802b574 <_close_r+0x1c>)
 802b55c:	2300      	movs	r3, #0
 802b55e:	4604      	mov	r4, r0
 802b560:	4608      	mov	r0, r1
 802b562:	602b      	str	r3, [r5, #0]
 802b564:	f7d6 f9e4 	bl	8001930 <_close>
 802b568:	1c43      	adds	r3, r0, #1
 802b56a:	d102      	bne.n	802b572 <_close_r+0x1a>
 802b56c:	682b      	ldr	r3, [r5, #0]
 802b56e:	b103      	cbz	r3, 802b572 <_close_r+0x1a>
 802b570:	6023      	str	r3, [r4, #0]
 802b572:	bd38      	pop	{r3, r4, r5, pc}
 802b574:	20017a6c 	.word	0x20017a6c

0802b578 <_fstat_r>:
 802b578:	b538      	push	{r3, r4, r5, lr}
 802b57a:	4d07      	ldr	r5, [pc, #28]	; (802b598 <_fstat_r+0x20>)
 802b57c:	2300      	movs	r3, #0
 802b57e:	4604      	mov	r4, r0
 802b580:	4608      	mov	r0, r1
 802b582:	4611      	mov	r1, r2
 802b584:	602b      	str	r3, [r5, #0]
 802b586:	f7d6 f9d6 	bl	8001936 <_fstat>
 802b58a:	1c43      	adds	r3, r0, #1
 802b58c:	d102      	bne.n	802b594 <_fstat_r+0x1c>
 802b58e:	682b      	ldr	r3, [r5, #0]
 802b590:	b103      	cbz	r3, 802b594 <_fstat_r+0x1c>
 802b592:	6023      	str	r3, [r4, #0]
 802b594:	bd38      	pop	{r3, r4, r5, pc}
 802b596:	bf00      	nop
 802b598:	20017a6c 	.word	0x20017a6c

0802b59c <_isatty_r>:
 802b59c:	b538      	push	{r3, r4, r5, lr}
 802b59e:	4d06      	ldr	r5, [pc, #24]	; (802b5b8 <_isatty_r+0x1c>)
 802b5a0:	2300      	movs	r3, #0
 802b5a2:	4604      	mov	r4, r0
 802b5a4:	4608      	mov	r0, r1
 802b5a6:	602b      	str	r3, [r5, #0]
 802b5a8:	f7d6 f9ca 	bl	8001940 <_isatty>
 802b5ac:	1c43      	adds	r3, r0, #1
 802b5ae:	d102      	bne.n	802b5b6 <_isatty_r+0x1a>
 802b5b0:	682b      	ldr	r3, [r5, #0]
 802b5b2:	b103      	cbz	r3, 802b5b6 <_isatty_r+0x1a>
 802b5b4:	6023      	str	r3, [r4, #0]
 802b5b6:	bd38      	pop	{r3, r4, r5, pc}
 802b5b8:	20017a6c 	.word	0x20017a6c

0802b5bc <_lseek_r>:
 802b5bc:	b538      	push	{r3, r4, r5, lr}
 802b5be:	4d07      	ldr	r5, [pc, #28]	; (802b5dc <_lseek_r+0x20>)
 802b5c0:	4604      	mov	r4, r0
 802b5c2:	4608      	mov	r0, r1
 802b5c4:	4611      	mov	r1, r2
 802b5c6:	2200      	movs	r2, #0
 802b5c8:	602a      	str	r2, [r5, #0]
 802b5ca:	461a      	mov	r2, r3
 802b5cc:	f7d6 f9ba 	bl	8001944 <_lseek>
 802b5d0:	1c43      	adds	r3, r0, #1
 802b5d2:	d102      	bne.n	802b5da <_lseek_r+0x1e>
 802b5d4:	682b      	ldr	r3, [r5, #0]
 802b5d6:	b103      	cbz	r3, 802b5da <_lseek_r+0x1e>
 802b5d8:	6023      	str	r3, [r4, #0]
 802b5da:	bd38      	pop	{r3, r4, r5, pc}
 802b5dc:	20017a6c 	.word	0x20017a6c

0802b5e0 <_malloc_usable_size_r>:
 802b5e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802b5e4:	1f18      	subs	r0, r3, #4
 802b5e6:	2b00      	cmp	r3, #0
 802b5e8:	bfbc      	itt	lt
 802b5ea:	580b      	ldrlt	r3, [r1, r0]
 802b5ec:	18c0      	addlt	r0, r0, r3
 802b5ee:	4770      	bx	lr

0802b5f0 <_read_r>:
 802b5f0:	b538      	push	{r3, r4, r5, lr}
 802b5f2:	4d07      	ldr	r5, [pc, #28]	; (802b610 <_read_r+0x20>)
 802b5f4:	4604      	mov	r4, r0
 802b5f6:	4608      	mov	r0, r1
 802b5f8:	4611      	mov	r1, r2
 802b5fa:	2200      	movs	r2, #0
 802b5fc:	602a      	str	r2, [r5, #0]
 802b5fe:	461a      	mov	r2, r3
 802b600:	f7d6 f97a 	bl	80018f8 <_read>
 802b604:	1c43      	adds	r3, r0, #1
 802b606:	d102      	bne.n	802b60e <_read_r+0x1e>
 802b608:	682b      	ldr	r3, [r5, #0]
 802b60a:	b103      	cbz	r3, 802b60e <_read_r+0x1e>
 802b60c:	6023      	str	r3, [r4, #0]
 802b60e:	bd38      	pop	{r3, r4, r5, pc}
 802b610:	20017a6c 	.word	0x20017a6c

0802b614 <_init>:
 802b614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802b616:	bf00      	nop
 802b618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802b61a:	bc08      	pop	{r3}
 802b61c:	469e      	mov	lr, r3
 802b61e:	4770      	bx	lr

0802b620 <_fini>:
 802b620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802b622:	bf00      	nop
 802b624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802b626:	bc08      	pop	{r3}
 802b628:	469e      	mov	lr, r3
 802b62a:	4770      	bx	lr
