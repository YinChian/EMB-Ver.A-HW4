/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/rule_screen/ruleViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <BitmapDatabase.hpp>

ruleViewBase::ruleViewBase() :
    buttonCallback(this, &ruleViewBase::buttonCallbackHandler)
{

    __background.setPosition(0, 0, 480, 272);
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));

    button1.setXY(0, 0);
    button1.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BACKGROUNDS_MAIN_BG_480X272PX_ID), touchgfx::Bitmap(BITMAP_BLUE_BACKGROUNDS_MAIN_BG_480X272PX_ID));
    button1.setAction(buttonCallback);

    scalableImage1.setBitmap(touchgfx::Bitmap(BITMAP_RULE_ID));
    scalableImage1.setPosition(0, 0, 480, 272);
    scalableImage1.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);

    add(__background);
    add(button1);
    add(scalableImage1);
}

void ruleViewBase::setupScreen()
{

}

//Handles tick based events
void ruleViewBase::handleTickEvent()
{
    //RNG_Seed_Generator
    //When every N tick call virtual function
    //Call RNG
    RNG();

}

void ruleViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &button1)
    {
        //Interaction1
        //When button1 clicked change screen to playscreen
        //Go to playscreen with no screen transition
        application().gotoplayscreenScreenNoTransition();
    }
}
